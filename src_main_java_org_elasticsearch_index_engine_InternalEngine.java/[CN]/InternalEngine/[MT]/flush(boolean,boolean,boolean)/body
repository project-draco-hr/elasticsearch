{
  ensureOpen();
  if (commitTranslog) {
    if (onGoingRecoveries.get() > 0) {
      throw new FlushNotAllowedEngineException(shardId,"recovery is in progress, flush with committing translog is not allowed");
    }
  }
  try (ReleasableLock _=readLock.acquire()){
    ensureOpen();
    updateIndexWriterSettings();
    if (flushLock.tryLock() == false) {
      if (waitIfOngoing) {
        logger.trace("waiting fore in-flight flush to finish");
        flushLock.lock();
        logger.trace("acquired flush lock after blocking");
      }
 else {
        throw new FlushNotAllowedEngineException(shardId,"already flushing...");
      }
    }
 else {
      logger.trace("acquired flush lock immediately");
    }
    try {
      if (commitTranslog) {
        if (onGoingRecoveries.get() > 0) {
          throw new FlushNotAllowedEngineException(shardId,"Recovery is in progress, flush is not allowed");
        }
        if (flushNeeded || force) {
          flushNeeded=false;
          try {
            long translogId=translogIdGenerator.incrementAndGet();
            translog.newTransientTranslog(translogId);
            indexWriter.setCommitData(Collections.singletonMap(Translog.TRANSLOG_ID_KEY,Long.toString(translogId)));
            commitIndexWriter(indexWriter);
            refresh("version_table_flush");
            translog.makeTransientCurrent();
          }
 catch (          Throwable e) {
            try {
              translog.revertTransient();
            }
 catch (            IOException ex) {
              e.addSuppressed(ex);
            }
            throw new FlushFailedEngineException(shardId,e);
          }
        }
      }
 else {
        try {
          long translogId=translog.currentId();
          indexWriter.setCommitData(Collections.singletonMap(Translog.TRANSLOG_ID_KEY,Long.toString(translogId)));
          commitIndexWriter(indexWriter);
        }
 catch (        Throwable e) {
          throw new FlushFailedEngineException(shardId,e);
        }
      }
      try {
        lastCommittedSegmentInfos=store.readLastCommittedSegmentsInfo();
      }
 catch (      Throwable e) {
        if (isClosed.get() == false) {
          logger.warn("failed to read latest segment infos on flush",e);
          if (Lucene.isCorruptionException(e)) {
            throw new FlushFailedEngineException(shardId,e);
          }
        }
      }
    }
 catch (    FlushFailedEngineException ex) {
      maybeFailEngine("flush",ex);
      throw ex;
    }
 finally {
      flushLock.unlock();
    }
  }
   if (engineConfig.isEnableGcDeletes()) {
    pruneDeletedTombstones();
  }
}
