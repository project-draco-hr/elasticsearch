{
  ensureOpen();
  try (ReleasableLock lock=readLock.acquire()){
    ensureOpen();
    updateIndexWriterSettings();
    if (flushLock.tryLock() == false) {
      if (waitIfOngoing) {
        logger.trace("waiting for in-flight flush to finish");
        flushLock.lock();
        logger.trace("acquired flush lock after blocking");
      }
 else {
        throw new FlushNotAllowedEngineException(shardId,"already flushing...");
      }
    }
 else {
      logger.trace("acquired flush lock immediately");
    }
    try {
      if (commitTranslog) {
        if (flushNeeded || force) {
          flushNeeded=false;
          final Translog.TranslogGeneration translogGeneration;
          try {
            translog.prepareCommit();
            translogGeneration=translog.getGeneration();
            logger.trace("starting commit for flush; commitTranslog=true");
            commitIndexWriter(indexWriter,translogGeneration);
            logger.trace("finished commit for flush");
            translog.commit();
            refresh("version_table_flush");
          }
 catch (          Throwable e) {
            throw new FlushFailedEngineException(shardId,e);
          }
        }
      }
 else {
        try {
          logger.trace("starting commit for flush; commitTranslog=false");
          commitIndexWriter(indexWriter,translog.getGeneration());
          logger.trace("finished commit for flush");
        }
 catch (        Throwable e) {
          throw new FlushFailedEngineException(shardId,e);
        }
      }
      store.incRef();
      try {
        lastCommittedSegmentInfos=store.readLastCommittedSegmentsInfo();
      }
 catch (      Throwable e) {
        if (isClosed.get() == false) {
          logger.warn("failed to read latest segment infos on flush",e);
          if (Lucene.isCorruptionException(e)) {
            throw new FlushFailedEngineException(shardId,e);
          }
        }
      }
 finally {
        store.decRef();
      }
    }
 catch (    FlushFailedEngineException ex) {
      maybeFailEngine("flush",ex);
      throw ex;
    }
 finally {
      flushLock.unlock();
    }
  }
   if (engineConfig.isEnableGcDeletes()) {
    pruneDeletedTombstones();
  }
}
