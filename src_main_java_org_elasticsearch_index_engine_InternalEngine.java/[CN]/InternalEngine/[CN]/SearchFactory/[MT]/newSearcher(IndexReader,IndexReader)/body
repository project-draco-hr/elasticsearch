{
  IndexSearcher searcher=super.newSearcher(reader,previousReader);
  if (warmer != null) {
    IndexSearcher newSearcher=null;
    boolean closeNewSearcher=false;
    try {
      if (previousReader == null) {
        newSearcher=searcher;
      }
 else {
        List<IndexReader> readers=Lists.newArrayList();
        for (        LeafReaderContext newReaderContext : reader.leaves()) {
          if (isMergedSegment(newReaderContext.reader())) {
            continue;
          }
          boolean found=false;
          for (          LeafReaderContext currentReaderContext : previousReader.leaves()) {
            if (currentReaderContext.reader().getCoreCacheKey().equals(newReaderContext.reader().getCoreCacheKey())) {
              found=true;
              break;
            }
          }
          if (!found) {
            readers.add(newReaderContext.reader());
          }
        }
        if (!readers.isEmpty()) {
          IndexReader newReader=new MultiReader(readers.toArray(new IndexReader[readers.size()]),false);
          newSearcher=super.newSearcher(newReader,null);
          closeNewSearcher=true;
        }
      }
      if (newSearcher != null) {
        IndicesWarmer.WarmerContext context=new IndicesWarmer.WarmerContext(shardId,new Searcher("warmer",newSearcher));
        warmer.warmNewReaders(context);
      }
      warmer.warmTopReader(new IndicesWarmer.WarmerContext(shardId,new Searcher("warmer",searcher)));
    }
 catch (    Throwable e) {
      if (isEngineClosed.get() == false) {
        logger.warn("failed to prepare/warm",e);
      }
    }
 finally {
      if (newSearcher != null && closeNewSearcher) {
        IOUtils.closeWhileHandlingException(newSearcher.getIndexReader());
      }
    }
  }
  return searcher;
}
