{
  logger.info("--> start 2 nodes");
  ArrayList<String> nodes=new ArrayList<>();
  nodes.add(internalCluster().startNode());
  nodes.add(internalCluster().startNode());
  Client client=client();
  assertAcked(prepareCreate("test-idx",2,Settings.builder().put("number_of_shards",2).put("number_of_replicas",0)));
  ensureGreen();
  logger.info("--> indexing some data");
  for (int i=0; i < 100; i++) {
    index("test-idx","doc",Integer.toString(i),"foo","bar" + i);
  }
  refresh();
  assertThat(client.prepareSearch("test-idx").setSize(0).get().getHits().totalHits(),equalTo(100L));
  logger.info("--> creating repository");
  Path repo=randomRepoPath();
  PutRepositoryResponse putRepositoryResponse=client.admin().cluster().preparePutRepository("test-repo").setType("mock").setSettings(Settings.builder().put("location",repo).put("random",randomAsciiOfLength(10)).put("wait_after_unblock",200)).get();
  assertThat(putRepositoryResponse.isAcknowledged(),equalTo(true));
  String blockedNode=blockNodeWithIndex("test-repo","test-idx");
  nodes.remove(blockedNode);
  int numberOfFilesBeforeSnapshot=numberOfFiles(repo);
  logger.info("--> snapshot");
  client.admin().cluster().prepareCreateSnapshot("test-repo","test-snap").setWaitForCompletion(false).setIndices("test-idx").get();
  logger.info("--> waiting for block to kick in");
  waitForBlock(blockedNode,"test-repo",TimeValue.timeValueSeconds(60));
  logger.info("--> execution was blocked on node [{}], aborting snapshot",blockedNode);
  ListenableActionFuture<DeleteSnapshotResponse> deleteSnapshotResponseFuture=internalCluster().client(nodes.get(0)).admin().cluster().prepareDeleteSnapshot("test-repo","test-snap").execute();
  Thread.sleep(100);
  unblockNode("test-repo",blockedNode);
  logger.info("--> stopping node [{}]",blockedNode);
  stopNode(blockedNode);
  try {
    DeleteSnapshotResponse deleteSnapshotResponse=deleteSnapshotResponseFuture.actionGet();
    assertThat(deleteSnapshotResponse.isAcknowledged(),equalTo(true));
  }
 catch (  SnapshotMissingException ex) {
  }
  logger.info("--> making sure that snapshot no longer exists");
  assertThrows(client().admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").execute(),SnapshotMissingException.class);
  assertThat("not all files were deleted during snapshot cancellation",numberOfFilesBeforeSnapshot,equalTo(numberOfFiles(repo) - 1));
  logger.info("--> done");
}
