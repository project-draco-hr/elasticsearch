{
  logger.info("--> start 2 nodes");
  Settings nodeSettings=settingsBuilder().put("discovery.type","zen").put(ZenDiscovery.SETTING_PING_TIMEOUT,"200ms").put("discovery.initial_state_timeout","500ms").build();
  internalCluster().startNode(nodeSettings);
  Client client=client();
  String secondNode=internalCluster().startNode(nodeSettings);
  logger.info("--> wait for the second node to join the cluster");
  assertThat(client.admin().cluster().prepareHealth().setWaitForNodes("2").get().isTimedOut(),equalTo(false));
  int random=randomIntBetween(10,42);
  logger.info("--> set test persistent setting");
  client.admin().cluster().prepareUpdateSettings().setPersistentSettings(Settings.settingsBuilder().put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(),2).put(IndicesTTLService.INDICES_TTL_INTERVAL_SETTING.getKey(),random,TimeUnit.MINUTES)).execute().actionGet();
  assertThat(client.admin().cluster().prepareState().setRoutingTable(false).setNodes(false).execute().actionGet().getState().getMetaData().persistentSettings().getAsTime(IndicesTTLService.INDICES_TTL_INTERVAL_SETTING.getKey(),TimeValue.timeValueMinutes(1)).millis(),equalTo(TimeValue.timeValueMinutes(random).millis()));
  assertThat(client.admin().cluster().prepareState().setRoutingTable(false).setNodes(false).execute().actionGet().getState().getMetaData().persistentSettings().getAsInt(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(),-1),equalTo(2));
  logger.info("--> create repository");
  PutRepositoryResponse putRepositoryResponse=client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.settingsBuilder().put("location",randomRepoPath())).execute().actionGet();
  assertThat(putRepositoryResponse.isAcknowledged(),equalTo(true));
  logger.info("--> start snapshot");
  CreateSnapshotResponse createSnapshotResponse=client.admin().cluster().prepareCreateSnapshot("test-repo","test-snap").setWaitForCompletion(true).execute().actionGet();
  assertThat(createSnapshotResponse.getSnapshotInfo().totalShards(),equalTo(0));
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),equalTo(0));
  assertThat(client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").execute().actionGet().getSnapshots().get(0).state(),equalTo(SnapshotState.SUCCESS));
  logger.info("--> clean the test persistent setting");
  client.admin().cluster().prepareUpdateSettings().setPersistentSettings(Settings.settingsBuilder().put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(),1).put(IndicesTTLService.INDICES_TTL_INTERVAL_SETTING.getKey(),TimeValue.timeValueMinutes(1))).execute().actionGet();
  assertThat(client.admin().cluster().prepareState().setRoutingTable(false).setNodes(false).execute().actionGet().getState().getMetaData().persistentSettings().getAsTime(IndicesTTLService.INDICES_TTL_INTERVAL_SETTING.getKey(),TimeValue.timeValueMinutes(1)).millis(),equalTo(TimeValue.timeValueMinutes(1).millis()));
  stopNode(secondNode);
  assertThat(client.admin().cluster().prepareHealth().setWaitForNodes("1").get().isTimedOut(),equalTo(false));
  logger.info("--> restore snapshot");
  try {
    client.admin().cluster().prepareRestoreSnapshot("test-repo","test-snap").setRestoreGlobalState(true).setWaitForCompletion(true).execute().actionGet();
    fail("can't restore minimum master nodes");
  }
 catch (  IllegalArgumentException ex) {
    assertEquals("illegal value can't update [discovery.zen.minimum_master_nodes] from [1] to [2]",ex.getMessage());
    assertEquals("cannot set discovery.zen.minimum_master_nodes to more than the current master nodes count [1]",ex.getCause().getMessage());
  }
  logger.info("--> ensure that zen discovery minimum master nodes wasn't restored");
  assertThat(client.admin().cluster().prepareState().setRoutingTable(false).setNodes(false).execute().actionGet().getState().getMetaData().persistentSettings().getAsInt(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(),-1),not(equalTo(2)));
}
