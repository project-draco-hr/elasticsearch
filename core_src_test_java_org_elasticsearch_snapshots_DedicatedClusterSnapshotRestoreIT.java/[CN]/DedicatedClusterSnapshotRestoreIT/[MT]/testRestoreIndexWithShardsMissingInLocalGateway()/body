{
  logger.info("--> start 2 nodes");
  Settings nodeSettings=settingsBuilder().put(EnableAllocationDecider.CLUSTER_ROUTING_REBALANCE_ENABLE_SETTING.getKey(),EnableAllocationDecider.Rebalance.NONE).build();
  internalCluster().startNode(nodeSettings);
  internalCluster().startNode(nodeSettings);
  cluster().wipeIndices("_all");
  logger.info("--> create repository");
  PutRepositoryResponse putRepositoryResponse=client().admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.settingsBuilder().put("location",randomRepoPath())).execute().actionGet();
  assertThat(putRepositoryResponse.isAcknowledged(),equalTo(true));
  int numberOfShards=6;
  logger.info("--> create an index that will have some unallocated shards");
  assertAcked(prepareCreate("test-idx",2,settingsBuilder().put("number_of_shards",numberOfShards).put("number_of_replicas",0)));
  ensureGreen();
  logger.info("--> indexing some data into test-idx");
  for (int i=0; i < 100; i++) {
    index("test-idx","doc",Integer.toString(i),"foo","bar" + i);
  }
  refresh();
  assertThat(client().prepareSearch("test-idx").setSize(0).get().getHits().totalHits(),equalTo(100L));
  logger.info("--> start snapshot");
  assertThat(client().admin().cluster().prepareCreateSnapshot("test-repo","test-snap-1").setIndices("test-idx").setWaitForCompletion(true).get().getSnapshotInfo().state(),equalTo(SnapshotState.SUCCESS));
  logger.info("--> close the index");
  assertAcked(client().admin().indices().prepareClose("test-idx"));
  logger.info("--> shutdown one of the nodes that should make half of the shards unavailable");
  internalCluster().restartRandomDataNode(new InternalTestCluster.RestartCallback(){
    @Override public boolean clearData(    String nodeName){
      return true;
    }
  }
);
  assertThat(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout("1m").setWaitForNodes("2").execute().actionGet().isTimedOut(),equalTo(false));
  logger.info("--> restore index snapshot");
  assertThat(client().admin().cluster().prepareRestoreSnapshot("test-repo","test-snap-1").setRestoreGlobalState(false).setWaitForCompletion(true).get().getRestoreInfo().successfulShards(),equalTo(6));
  ensureGreen("test-idx");
  assertThat(client().prepareSearch("test-idx").setSize(0).get().getHits().totalHits(),equalTo(100L));
  IntSet reusedShards=new IntHashSet();
  for (  RecoveryState recoveryState : client().admin().indices().prepareRecoveries("test-idx").get().shardRecoveryStates().get("test-idx")) {
    if (recoveryState.getIndex().reusedBytes() > 0) {
      reusedShards.add(recoveryState.getShardId().getId());
    }
  }
  logger.info("--> check that at least half of the shards had some reuse: [{}]",reusedShards);
  assertThat(reusedShards.size(),greaterThanOrEqualTo(numberOfShards / 2));
}
