{
  Settings masterSettings=settingsBuilder().put(Node.NODE_DATA_SETTING.getKey(),false).build();
  Settings dataSettings=settingsBuilder().put(Node.NODE_MASTER_SETTING.getKey(),false).build();
  logger.info("-->  starting two master nodes and two data nodes");
  internalCluster().startNode(masterSettings);
  internalCluster().startNode(masterSettings);
  internalCluster().startNode(dataSettings);
  internalCluster().startNode(dataSettings);
  final Client client=client();
  logger.info("-->  creating repository");
  assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.settingsBuilder().put("location",randomRepoPath()).put("compress",randomBoolean()).put("chunk_size",randomIntBetween(100,1000),ByteSizeUnit.BYTES)));
  assertAcked(prepareCreate("test-idx",0,settingsBuilder().put("number_of_shards",between(1,20)).put("number_of_replicas",0)));
  ensureGreen();
  logger.info("--> indexing some data");
  final int numdocs=randomIntBetween(10,100);
  IndexRequestBuilder[] builders=new IndexRequestBuilder[numdocs];
  for (int i=0; i < builders.length; i++) {
    builders[i]=client().prepareIndex("test-idx","type1",Integer.toString(i)).setSource("field1","bar " + i);
  }
  indexRandom(true,builders);
  flushAndRefresh();
  final int numberOfShards=getNumShards("test-idx").numPrimaries;
  logger.info("number of shards: {}",numberOfShards);
  final ClusterService clusterService=internalCluster().clusterService(internalCluster().getMasterName());
  BlockingClusterStateListener snapshotListener=new BlockingClusterStateListener(clusterService,"update_snapshot [","update snapshot state",Priority.HIGH);
  try {
    clusterService.addFirst(snapshotListener);
    logger.info("--> snapshot");
    dataNodeClient().admin().cluster().prepareCreateSnapshot("test-repo","test-snap").setWaitForCompletion(false).setIndices("test-idx").get();
    assertBusyPendingTasks("update snapshot state",1);
    logger.info("--> stopping master node");
    internalCluster().stopCurrentMasterNode();
    logger.info("--> unblocking snapshot execution");
    snapshotListener.unblock();
  }
  finally {
    clusterService.remove(snapshotListener);
  }
  logger.info("--> wait until the snapshot is done");
  assertBusy(new Runnable(){
    @Override public void run(){
      GetSnapshotsResponse snapshotsStatusResponse=client().admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").get();
      SnapshotInfo snapshotInfo=snapshotsStatusResponse.getSnapshots().get(0);
      assertTrue(snapshotInfo.state().completed());
    }
  }
,1,TimeUnit.MINUTES);
  logger.info("--> verify that snapshot was succesful");
  GetSnapshotsResponse snapshotsStatusResponse=client().admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").get();
  SnapshotInfo snapshotInfo=snapshotsStatusResponse.getSnapshots().get(0);
  assertEquals(SnapshotState.SUCCESS,snapshotInfo.state());
  assertEquals(snapshotInfo.totalShards(),snapshotInfo.successfulShards());
  assertEquals(0,snapshotInfo.failedShards());
}
