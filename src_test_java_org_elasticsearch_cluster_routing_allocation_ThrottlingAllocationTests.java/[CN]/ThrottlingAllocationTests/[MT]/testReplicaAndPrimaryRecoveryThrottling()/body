{
  AllocationService strategy=new AllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries",3).put("cluster.routing.allocation.node_initial_primaries_recoveries",3).build());
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").numberOfShards(5).numberOfReplicas(1)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder().metaData(metaData).routingTable(routingTable).build();
  logger.info("start one node, do reroute, only 3 should initialize");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1"))).build();
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(routingTable.shardsWithState(STARTED).size(),equalTo(0));
  assertThat(routingTable.shardsWithState(INITIALIZING).size(),equalTo(3));
  assertThat(routingTable.shardsWithState(UNASSIGNED).size(),equalTo(7));
  logger.info("start initializing, another 2 should initialize");
  routingTable=strategy.applyStartedShards(clusterState,routingTable.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(routingTable.shardsWithState(STARTED).size(),equalTo(3));
  assertThat(routingTable.shardsWithState(INITIALIZING).size(),equalTo(2));
  assertThat(routingTable.shardsWithState(UNASSIGNED).size(),equalTo(5));
  logger.info("start initializing, all primaries should be started");
  routingTable=strategy.applyStartedShards(clusterState,routingTable.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(routingTable.shardsWithState(STARTED).size(),equalTo(5));
  assertThat(routingTable.shardsWithState(INITIALIZING).size(),equalTo(0));
  assertThat(routingTable.shardsWithState(UNASSIGNED).size(),equalTo(5));
  logger.info("start another node, replicas should start being allocated");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).put(newNode("node2"))).build();
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(routingTable.shardsWithState(STARTED).size(),equalTo(5));
  assertThat(routingTable.shardsWithState(INITIALIZING).size(),equalTo(3));
  assertThat(routingTable.shardsWithState(UNASSIGNED).size(),equalTo(2));
  logger.info("start initializing replicas");
  routingTable=strategy.applyStartedShards(clusterState,routingTable.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(routingTable.shardsWithState(STARTED).size(),equalTo(8));
  assertThat(routingTable.shardsWithState(INITIALIZING).size(),equalTo(2));
  assertThat(routingTable.shardsWithState(UNASSIGNED).size(),equalTo(0));
  logger.info("start initializing replicas, all should be started");
  routingTable=strategy.applyStartedShards(clusterState,routingTable.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(routingTable.shardsWithState(STARTED).size(),equalTo(10));
  assertThat(routingTable.shardsWithState(INITIALIZING).size(),equalTo(0));
  assertThat(routingTable.shardsWithState(UNASSIGNED).size(),equalTo(0));
}
