{
  if (newRequestsPerSecond != 0 && newRequestsPerSecond < requestsPerSecond) {
    if (logger.isDebugEnabled()) {
      logger.debug("[{}]: Skipping rescheduling because the new throttle [{}] is slower than the old one [{}].",getId(),newRequestsPerSecond,requestsPerSecond);
    }
    return this;
  }
  long remainingDelay=future.getDelay(TimeUnit.NANOSECONDS);
  if (false == FutureUtils.cancel(future)) {
    if (logger.isDebugEnabled()) {
      logger.debug("[{}]: Skipping rescheduling we couldn't cancel the task.",getId());
    }
    return this;
  }
  TimeValue newDelay=newDelay(remainingDelay,newRequestsPerSecond);
  if (logger.isDebugEnabled()) {
    logger.debug("[{}]: Rescheduling for [{}] in the future.",getId(),newDelay);
  }
  return new DelayedPrepareBulkRequest(threadPool,requestsPerSecond,newDelay,command);
}
