{
  Settings diskSettings=settingsBuilder().put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED,true).put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK,0.7).put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK,0.85).build();
  Map<String,DiskUsage> usages=new HashMap<String,DiskUsage>();
  usages.put("node2",new DiskUsage("node2",100,50));
  usages.put("node3",new DiskUsage("node3",100,0));
  Map<String,Long> shardSizes=new HashMap<String,Long>();
  shardSizes.put("[test][0][p]",10L);
  shardSizes.put("[test][0][r]",10L);
  final ClusterInfo clusterInfo=new ClusterInfo(ImmutableMap.copyOf(usages),ImmutableMap.copyOf(shardSizes));
  AllocationDeciders deciders=new AllocationDeciders(ImmutableSettings.EMPTY,new HashSet<AllocationDecider>(Arrays.asList(new SameShardAllocationDecider(ImmutableSettings.EMPTY),new DiskThresholdDecider(diskSettings))));
  ClusterInfoService cis=new ClusterInfoService(){
    @Override public ClusterInfo getClusterInfo(){
      logger.info("--> calling fake getClusterInfo");
      return clusterInfo;
    }
  }
;
  AllocationService strategy=new AllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries",10).put("cluster.routing.allocation.allow_rebalance","always").put("cluster.routing.allocation.cluster_concurrent_rebalance",-1).build(),deciders,new ShardsAllocators(),cis);
  MetaData metaData=newMetaDataBuilder().put(newIndexMetaDataBuilder("test").numberOfShards(1).numberOfReplicas(0)).build();
  RoutingTable routingTable=routingTable().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=newClusterStateBuilder().metaData(metaData).routingTable(routingTable).build();
  logger.info("--> adding node1");
  clusterState=newClusterStateBuilder().state(clusterState).nodes(newNodesBuilder().put(newNode("node1")).put(newNode("node3"))).build();
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  logger.info("--> start the shards (primaries)");
  routingTable=strategy.applyStartedShards(clusterState,clusterState.routingNodes().shardsWithState(INITIALIZING)).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  logShardStates(clusterState);
  assertThat(clusterState.routingNodes().shardsWithState(INITIALIZING).size(),equalTo(0));
  assertThat(clusterState.routingNodes().shardsWithState(STARTED).size(),equalTo(0));
}
