{
  XContentParser parser=parseContext.parser();
  final ArrayList<QueryBuilder> queries=newArrayList();
  boolean queriesFound=false;
  String queryName=null;
  String currentFieldName=null;
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  XContentParser.Token token=parser.currentToken();
  if (token == XContentParser.Token.START_ARRAY) {
    while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
      queriesFound=true;
      QueryBuilder filter=parseContext.parseInnerFilterToQueryBuilder();
      if (filter != null) {
        queries.add(filter);
      }
    }
  }
 else {
    while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
      if (token == XContentParser.Token.FIELD_NAME) {
        currentFieldName=parser.currentName();
      }
 else       if (parseContext.isDeprecatedSetting(currentFieldName)) {
      }
 else       if (token == XContentParser.Token.START_ARRAY) {
        if ("filters".equals(currentFieldName)) {
          queriesFound=true;
          while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
            QueryBuilder filter=parseContext.parseInnerFilterToQueryBuilder();
            if (filter != null) {
              queries.add(filter);
            }
          }
        }
 else {
          queriesFound=true;
          while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
            QueryBuilder filter=parseContext.parseInnerFilterToQueryBuilder();
            if (filter != null) {
              queries.add(filter);
            }
          }
        }
      }
 else       if (token.isValue()) {
        if ("_name".equals(currentFieldName)) {
          queryName=parser.text();
        }
 else         if ("boost".equals(currentFieldName)) {
          boost=parser.floatValue();
        }
 else {
          throw new QueryParsingException(parseContext,"[and] query does not support [" + currentFieldName + "]");
        }
      }
    }
  }
  if (!queriesFound) {
    throw new QueryParsingException(parseContext,"[and] query requires 'filters' to be set on it'");
  }
  AndQueryBuilder andQuery=new AndQueryBuilder();
  for (  QueryBuilder query : queries) {
    andQuery.add(query);
  }
  andQuery.queryName(queryName);
  andQuery.boost(boost);
  return andQuery;
}
