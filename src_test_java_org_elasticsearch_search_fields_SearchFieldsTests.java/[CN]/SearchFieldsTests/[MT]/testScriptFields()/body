{
  assertAcked(prepareCreate("index").addMapping("type","s","type=string,index=not_analyzed","l","type=long","d","type=double","ms","type=string,index=not_analyzed","ml","type=long","md","type=double").get());
  final int numDocs=randomIntBetween(3,8);
  List<IndexRequestBuilder> reqs=new ArrayList<>();
  for (int i=0; i < numDocs; ++i) {
    reqs.add(client().prepareIndex("index","type",Integer.toString(i)).setSource("s",Integer.toString(i),"ms",new String[]{Integer.toString(i),Integer.toString(i + 1)},"l",i,"ml",new long[]{i,i + 1},"d",i,"md",new double[]{i,i + 1}));
  }
  indexRandom(true,reqs);
  ensureSearchable();
  SearchRequestBuilder req=client().prepareSearch("index");
  for (  String field : Arrays.asList("s","ms","l","ml","d","md")) {
    req.addScriptField(field,new Script("doc['" + field + "'].values"));
  }
  SearchResponse resp=req.get();
  assertSearchResponse(resp);
  for (  SearchHit hit : resp.getHits().getHits()) {
    final int id=Integer.parseInt(hit.getId());
    Map<String,SearchHitField> fields=hit.getFields();
    assertThat(fields.get("s").getValues(),equalTo(Collections.<Object>singletonList(Integer.toString(id))));
    assertThat(fields.get("l").getValues(),equalTo(Collections.<Object>singletonList((long)id)));
    assertThat(fields.get("d").getValues(),equalTo(Collections.<Object>singletonList((double)id)));
    assertThat(fields.get("ms").getValues(),equalTo(Arrays.<Object>asList(Integer.toString(id),Integer.toString(id + 1))));
    assertThat(fields.get("ml").getValues(),equalTo(Arrays.<Object>asList((long)id,id + 1L)));
    assertThat(fields.get("md").getValues(),equalTo(Arrays.<Object>asList((double)id,id + 1d)));
  }
}
