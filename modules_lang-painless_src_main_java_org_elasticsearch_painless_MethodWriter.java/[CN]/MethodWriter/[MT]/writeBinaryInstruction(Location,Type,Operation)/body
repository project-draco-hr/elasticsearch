{
  final Sort sort=type.sort;
  if ((sort == Sort.FLOAT || sort == Sort.DOUBLE) && (operation == Operation.LSH || operation == Operation.USH || operation == Operation.RSH || operation == Operation.BWAND || operation == Operation.XOR || operation == Operation.BWOR)) {
    throw location.createError(new IllegalStateException("Illegal tree structure."));
  }
switch (operation) {
case MUL:
    math(GeneratorAdapter.MUL,type.type);
  break;
case DIV:
math(GeneratorAdapter.DIV,type.type);
break;
case REM:
math(GeneratorAdapter.REM,type.type);
break;
case ADD:
math(GeneratorAdapter.ADD,type.type);
break;
case SUB:
math(GeneratorAdapter.SUB,type.type);
break;
case LSH:
math(GeneratorAdapter.SHL,type.type);
break;
case USH:
math(GeneratorAdapter.USHR,type.type);
break;
case RSH:
math(GeneratorAdapter.SHR,type.type);
break;
case BWAND:
math(GeneratorAdapter.AND,type.type);
break;
case XOR:
math(GeneratorAdapter.XOR,type.type);
break;
case BWOR:
math(GeneratorAdapter.OR,type.type);
break;
default :
throw location.createError(new IllegalStateException("Illegal tree structure."));
}
}
