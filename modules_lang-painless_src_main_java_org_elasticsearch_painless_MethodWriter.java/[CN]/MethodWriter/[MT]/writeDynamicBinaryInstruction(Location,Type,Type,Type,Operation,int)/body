{
  org.objectweb.asm.Type methodType=org.objectweb.asm.Type.getMethodType(returnType.type,lhs.type,rhs.type);
switch (operation) {
case MUL:
    invokeDefCall("mul",methodType,DefBootstrap.BINARY_OPERATOR,flags);
  break;
case DIV:
invokeDefCall("div",methodType,DefBootstrap.BINARY_OPERATOR,flags);
break;
case REM:
invokeDefCall("rem",methodType,DefBootstrap.BINARY_OPERATOR,flags);
break;
case ADD:
boolean hasPrimitiveArg=lhs.clazz.isPrimitive() || rhs.clazz.isPrimitive();
if (!hasPrimitiveArg) {
flags|=DefBootstrap.OPERATOR_ALLOWS_NULL;
}
invokeDefCall("add",methodType,DefBootstrap.BINARY_OPERATOR,flags);
break;
case SUB:
invokeDefCall("sub",methodType,DefBootstrap.BINARY_OPERATOR,flags);
break;
case LSH:
invokeDefCall("lsh",methodType,DefBootstrap.SHIFT_OPERATOR,flags);
break;
case USH:
invokeDefCall("ush",methodType,DefBootstrap.SHIFT_OPERATOR,flags);
break;
case RSH:
invokeDefCall("rsh",methodType,DefBootstrap.SHIFT_OPERATOR,flags);
break;
case BWAND:
invokeDefCall("and",methodType,DefBootstrap.BINARY_OPERATOR,flags);
break;
case XOR:
invokeDefCall("xor",methodType,DefBootstrap.BINARY_OPERATOR,flags);
break;
case BWOR:
invokeDefCall("or",methodType,DefBootstrap.BINARY_OPERATOR,flags);
break;
default :
throw location.createError(new IllegalStateException("Illegal tree structure."));
}
}
