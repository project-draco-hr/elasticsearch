{
  if (cast != null) {
    final Type from=cast.from;
    final Type to=cast.to;
    if (from.sort == Sort.CHAR && to.sort == Sort.STRING) {
      invokeStatic(UTILITY_TYPE,CHAR_TO_STRING);
    }
 else     if (from.sort == Sort.STRING && to.sort == Sort.CHAR) {
      invokeStatic(UTILITY_TYPE,STRING_TO_CHAR);
    }
 else     if (cast.unboxFrom) {
      if (from.sort == Sort.DEF) {
        if (cast.explicit) {
          if (to.sort == Sort.BOOL)           invokeStatic(DEF_UTIL_TYPE,DEF_TO_BOOLEAN);
 else           if (to.sort == Sort.BYTE)           invokeStatic(DEF_UTIL_TYPE,DEF_TO_BYTE_EXPLICIT);
 else           if (to.sort == Sort.SHORT)           invokeStatic(DEF_UTIL_TYPE,DEF_TO_SHORT_EXPLICIT);
 else           if (to.sort == Sort.CHAR)           invokeStatic(DEF_UTIL_TYPE,DEF_TO_CHAR_EXPLICIT);
 else           if (to.sort == Sort.INT)           invokeStatic(DEF_UTIL_TYPE,DEF_TO_INT_EXPLICIT);
 else           if (to.sort == Sort.LONG)           invokeStatic(DEF_UTIL_TYPE,DEF_TO_LONG_EXPLICIT);
 else           if (to.sort == Sort.FLOAT)           invokeStatic(DEF_UTIL_TYPE,DEF_TO_FLOAT_EXPLICIT);
 else           if (to.sort == Sort.DOUBLE)           invokeStatic(DEF_UTIL_TYPE,DEF_TO_DOUBLE_EXPLICIT);
 else           throw new IllegalStateException("Illegal tree structure.");
        }
 else {
          if (to.sort == Sort.BOOL)           invokeStatic(DEF_UTIL_TYPE,DEF_TO_BOOLEAN);
 else           if (to.sort == Sort.BYTE)           invokeStatic(DEF_UTIL_TYPE,DEF_TO_BYTE_IMPLICIT);
 else           if (to.sort == Sort.SHORT)           invokeStatic(DEF_UTIL_TYPE,DEF_TO_SHORT_IMPLICIT);
 else           if (to.sort == Sort.CHAR)           invokeStatic(DEF_UTIL_TYPE,DEF_TO_CHAR_IMPLICIT);
 else           if (to.sort == Sort.INT)           invokeStatic(DEF_UTIL_TYPE,DEF_TO_INT_IMPLICIT);
 else           if (to.sort == Sort.LONG)           invokeStatic(DEF_UTIL_TYPE,DEF_TO_LONG_IMPLICIT);
 else           if (to.sort == Sort.FLOAT)           invokeStatic(DEF_UTIL_TYPE,DEF_TO_FLOAT_IMPLICIT);
 else           if (to.sort == Sort.DOUBLE)           invokeStatic(DEF_UTIL_TYPE,DEF_TO_DOUBLE_IMPLICIT);
 else           throw new IllegalStateException("Illegal tree structure.");
        }
      }
 else {
        unbox(from.type);
        writeCast(from,to);
      }
    }
 else     if (cast.unboxTo) {
      writeCast(from,to);
      unbox(to.type);
    }
 else     if (cast.boxFrom) {
      valueOf(from.type);
      writeCast(from,to);
    }
 else     if (cast.boxTo) {
      writeCast(from,to);
      valueOf(to.type);
    }
 else {
      writeCast(from,to);
    }
  }
}
