{
  String mapping=copyToStringFromClasspath("/org/elasticsearch/index/mapper/xcontent/multifield/merge/test-mapping1.json");
  XContentDocumentMapperParser parser=MapperTests.newParser();
  XContentDocumentMapper docMapper=parser.parse(mapping);
  assertThat(docMapper.mappers().fullName("name").mapper().indexed(),equalTo(true));
  assertThat(docMapper.mappers().fullName("name.indexed"),nullValue());
  byte[] json=copyToBytesFromClasspath("/org/elasticsearch/index/mapper/xcontent/multifield/merge/test-data.json");
  Document doc=docMapper.parse(json).doc();
  Field f=doc.getField("name");
  assertThat(f,notNullValue());
  f=doc.getField("name.indexed");
  assertThat(f,nullValue());
  mapping=copyToStringFromClasspath("/org/elasticsearch/index/mapper/xcontent/multifield/merge/test-mapping2.json");
  XContentDocumentMapper docMapper2=parser.parse(mapping);
  DocumentMapper.MergeResult mergeResult=docMapper.merge(docMapper2,mergeFlags().simulate(true));
  assertThat(Arrays.toString(mergeResult.conflicts()),mergeResult.hasConflicts(),equalTo(false));
  docMapper.merge(docMapper2,mergeFlags().simulate(false));
  assertThat(docMapper.mappers().name("name").mapper().indexed(),equalTo(true));
  assertThat(docMapper.mappers().fullName("name").mapper().indexed(),equalTo(true));
  assertThat(docMapper.mappers().fullName("name.indexed").mapper(),notNullValue());
  assertThat(docMapper.mappers().fullName("name.not_indexed").mapper(),notNullValue());
  assertThat(docMapper.mappers().fullName("name.not_indexed2"),nullValue());
  assertThat(docMapper.mappers().fullName("name.not_indexed3"),nullValue());
  json=copyToBytesFromClasspath("/org/elasticsearch/index/mapper/xcontent/multifield/merge/test-data.json");
  doc=docMapper.parse(json).doc();
  f=doc.getField("name");
  assertThat(f,notNullValue());
  f=doc.getField("name.indexed");
  assertThat(f,notNullValue());
  mapping=copyToStringFromClasspath("/org/elasticsearch/index/mapper/xcontent/multifield/merge/test-mapping3.json");
  XContentDocumentMapper docMapper3=parser.parse(mapping);
  mergeResult=docMapper.merge(docMapper3,mergeFlags().simulate(true));
  assertThat(Arrays.toString(mergeResult.conflicts()),mergeResult.hasConflicts(),equalTo(false));
  docMapper.merge(docMapper3,mergeFlags().simulate(false));
  assertThat(docMapper.mappers().name("name").mapper().indexed(),equalTo(true));
  assertThat(docMapper.mappers().fullName("name").mapper().indexed(),equalTo(true));
  assertThat(docMapper.mappers().fullName("name.indexed").mapper(),notNullValue());
  assertThat(docMapper.mappers().fullName("name.not_indexed").mapper(),notNullValue());
  assertThat(docMapper.mappers().fullName("name.not_indexed2").mapper(),notNullValue());
  assertThat(docMapper.mappers().fullName("name.not_indexed3"),nullValue());
  mapping=copyToStringFromClasspath("/org/elasticsearch/index/mapper/xcontent/multifield/merge/test-mapping4.json");
  XContentDocumentMapper docMapper4=parser.parse(mapping);
  mergeResult=docMapper.merge(docMapper4,mergeFlags().simulate(true));
  assertThat(Arrays.toString(mergeResult.conflicts()),mergeResult.hasConflicts(),equalTo(false));
  docMapper.merge(docMapper4,mergeFlags().simulate(false));
  assertThat(docMapper.mappers().name("name").mapper().indexed(),equalTo(true));
  assertThat(docMapper.mappers().fullName("name").mapper().indexed(),equalTo(true));
  assertThat(docMapper.mappers().fullName("name.indexed").mapper(),notNullValue());
  assertThat(docMapper.mappers().fullName("name.not_indexed").mapper(),notNullValue());
  assertThat(docMapper.mappers().fullName("name.not_indexed2").mapper(),notNullValue());
  assertThat(docMapper.mappers().fullName("name.not_indexed3").mapper(),notNullValue());
}
