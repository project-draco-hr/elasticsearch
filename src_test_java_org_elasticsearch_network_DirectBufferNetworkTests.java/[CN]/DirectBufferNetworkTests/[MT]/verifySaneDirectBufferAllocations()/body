{
  createIndex("test");
  int estimatedBytesSize=scaledRandomIntBetween(ByteSizeValue.parseBytesSizeValue("1.1mb","estimatedBytesSize").bytesAsInt(),ByteSizeValue.parseBytesSizeValue("1.5mb","estimatedBytesSize").bytesAsInt());
  byte[] data=new byte[estimatedBytesSize];
  getRandom().nextBytes(data);
  ByteArrayOutputStream docOut=new ByteArrayOutputStream();
  XContentBuilder doc=XContentFactory.smileBuilder(docOut).startObject().startObject("doc").field("value",data).endObject();
  doc.close();
  byte[] docBytes=docOut.toByteArray();
  int numDocs=randomIntBetween(2,5);
  logger.info("indexing [{}] docs, each with size [{}]",numDocs,estimatedBytesSize);
  IndexRequestBuilder[] builders=new IndexRequestBuilder[numDocs];
  for (int i=0; i < numDocs; ++i) {
    builders[i]=client().prepareIndex("test","type").setSource(docBytes);
  }
  indexRandom(true,builders);
  logger.info("done indexing");
  logger.info("executing random client search for all docs");
  assertHitCount(client().prepareSearch("test").setFrom(0).setSize(numDocs).get(),numDocs);
  logger.info("executing transport client search for all docs");
  assertHitCount(internalCluster().transportClient().prepareSearch("test").setFrom(0).setSize(numDocs).get(),numDocs);
  logger.info("executing HTTP search for all docs");
  httpClient().method("GET").path("/test/_search").addParam("size",Integer.toString(numDocs)).execute();
  logger.info("validating large direct buffer not allocated");
  validateNoLargeDirectBufferAllocated();
}
