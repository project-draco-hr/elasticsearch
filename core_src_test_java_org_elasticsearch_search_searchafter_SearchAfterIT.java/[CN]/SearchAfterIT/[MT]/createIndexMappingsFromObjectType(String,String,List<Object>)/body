{
  CreateIndexRequestBuilder indexRequestBuilder=client().admin().indices().prepareCreate(indexName);
  List<String> mappings=new ArrayList<>();
  int numFields=types.size();
  for (int i=0; i < numFields; i++) {
    Class type=types.get(i).getClass();
    if (type == Integer.class) {
      mappings.add("field" + Integer.toString(i));
      mappings.add("type=integer");
    }
 else     if (type == Long.class) {
      mappings.add("field" + Integer.toString(i));
      mappings.add("type=long");
    }
 else     if (type == Float.class) {
      mappings.add("field" + Integer.toString(i));
      mappings.add("type=float");
    }
 else     if (type == Double.class) {
      mappings.add("field" + Integer.toString(i));
      mappings.add("type=double");
    }
 else     if (type == Byte.class) {
      mappings.add("field" + Integer.toString(i));
      mappings.add("type=byte");
    }
 else     if (type == Short.class) {
      mappings.add("field" + Integer.toString(i));
      mappings.add("type=short");
    }
 else     if (type == Boolean.class) {
      mappings.add("field" + Integer.toString(i));
      mappings.add("type=boolean");
    }
 else     if (types.get(i) instanceof String) {
      mappings.add("field" + Integer.toString(i));
      mappings.add("type=keyword");
    }
 else {
      fail("Can't match type [" + type + "]");
    }
  }
  indexRequestBuilder.addMapping(typeName,mappings.toArray()).get();
  ensureGreen();
}
