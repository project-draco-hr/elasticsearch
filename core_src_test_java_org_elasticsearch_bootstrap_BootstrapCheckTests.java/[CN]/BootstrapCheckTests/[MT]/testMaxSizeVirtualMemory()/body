{
  final long rlimInfinity=Constants.MAC_OS_X ? 9223372036854775807L : -1L;
  final AtomicLong maxSizeVirtualMemory=new AtomicLong(randomIntBetween(0,Integer.MAX_VALUE));
  final BootstrapCheck.MaxSizeVirtualMemoryCheck check=new BootstrapCheck.MaxSizeVirtualMemoryCheck(){
    @Override long getMaxSizeVirtualMemory(){
      return maxSizeVirtualMemory.get();
    }
    @Override long getRlimInfinity(){
      return rlimInfinity;
    }
  }
;
  try {
    BootstrapCheck.check(true,Collections.singletonList(check),"testMaxSizeVirtualMemory");
    fail("should have failed due to max size virtual memory too low");
  }
 catch (  final RuntimeException e) {
    assertThat(e.getMessage(),containsString("max size virtual memory"));
  }
  maxSizeVirtualMemory.set(rlimInfinity);
  BootstrapCheck.check(true,Collections.singletonList(check),"testMaxSizeVirtualMemory");
  maxSizeVirtualMemory.set(Long.MIN_VALUE);
  BootstrapCheck.check(true,Collections.singletonList(check),"testMaxSizeVirtualMemory");
}
