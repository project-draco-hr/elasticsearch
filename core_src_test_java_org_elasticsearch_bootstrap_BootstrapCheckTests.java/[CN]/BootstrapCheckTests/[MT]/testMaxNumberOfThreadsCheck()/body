{
  final int limit=1 << 15;
  final AtomicLong maxNumberOfThreads=new AtomicLong(randomIntBetween(1,limit - 1));
  final BootstrapCheck.MaxNumberOfThreadsCheck check=new BootstrapCheck.MaxNumberOfThreadsCheck(){
    @Override long getMaxNumberOfThreads(){
      return maxNumberOfThreads.get();
    }
  }
;
  try {
    BootstrapCheck.check(true,Collections.singletonList(check));
    fail("should have failed due to max number of threads too low");
  }
 catch (  final RuntimeException e) {
    assertThat(e.getMessage(),containsString("max number of threads"));
  }
  maxNumberOfThreads.set(randomIntBetween(limit + 1,Integer.MAX_VALUE));
  BootstrapCheck.check(true,Collections.singletonList(check));
  maxNumberOfThreads.set(-1);
  BootstrapCheck.check(true,Collections.singletonList(check));
}
