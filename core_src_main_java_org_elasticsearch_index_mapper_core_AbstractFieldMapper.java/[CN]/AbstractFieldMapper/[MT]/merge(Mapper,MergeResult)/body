{
  if (!this.getClass().equals(mergeWith.getClass())) {
    String mergedType=mergeWith.getClass().getSimpleName();
    if (mergeWith instanceof AbstractFieldMapper) {
      mergedType=((AbstractFieldMapper)mergeWith).contentType();
    }
    mergeResult.addConflict("mapper [" + fieldType().names().fullName() + "] of different type, current_type ["+ contentType()+ "], merged_type ["+ mergedType+ "]");
    return;
  }
  AbstractFieldMapper fieldMergeWith=(AbstractFieldMapper)mergeWith;
  List<String> subConflicts=new ArrayList<>();
  fieldType().checkCompatibility(fieldMergeWith.fieldType(),subConflicts);
  for (  String conflict : subConflicts) {
    mergeResult.addConflict(conflict);
  }
  multiFields.merge(mergeWith,mergeResult);
  if (mergeResult.simulate() == false && mergeResult.hasConflicts() == false) {
    this.fieldType=fieldMergeWith.fieldType().clone();
    this.fieldType().freeze();
    if (fieldMergeWith.customFieldDataSettings != null) {
      if (!Objects.equal(fieldMergeWith.customFieldDataSettings,this.customFieldDataSettings)) {
        this.customFieldDataSettings=fieldMergeWith.customFieldDataSettings;
      }
    }
    this.copyTo=fieldMergeWith.copyTo;
  }
}
