{
  if (!this.getClass().equals(mergeWith.getClass())) {
    String mergedType=mergeWith.getClass().getSimpleName();
    if (mergeWith instanceof AbstractFieldMapper) {
      mergedType=((AbstractFieldMapper)mergeWith).contentType();
    }
    mergeResult.addConflict("mapper [" + fieldType.names().fullName() + "] of different type, current_type ["+ contentType()+ "], merged_type ["+ mergedType+ "]");
    return;
  }
  AbstractFieldMapper fieldMergeWith=(AbstractFieldMapper)mergeWith;
  boolean indexed=fieldType.indexOptions() != IndexOptions.NONE;
  boolean mergeWithIndexed=fieldMergeWith.fieldType().indexOptions() != IndexOptions.NONE;
  if (indexed != mergeWithIndexed || this.fieldType().tokenized() != fieldMergeWith.fieldType().tokenized()) {
    mergeResult.addConflict("mapper [" + fieldType.names().fullName() + "] has different index values");
  }
  if (this.fieldType().stored() != fieldMergeWith.fieldType().stored()) {
    mergeResult.addConflict("mapper [" + fieldType.names().fullName() + "] has different store values");
  }
  if (!this.fieldType().hasDocValues() && fieldMergeWith.fieldType().hasDocValues()) {
    mergeResult.addConflict("mapper [" + fieldType.names().fullName() + "] has different "+ TypeParsers.DOC_VALUES+ " values");
  }
  if (this.fieldType().omitNorms() && !fieldMergeWith.fieldType.omitNorms()) {
    mergeResult.addConflict("mapper [" + fieldType.names().fullName() + "] cannot enable norms (`norms.enabled`)");
  }
  if (this.fieldType().tokenized() != fieldMergeWith.fieldType().tokenized()) {
    mergeResult.addConflict("mapper [" + fieldType.names().fullName() + "] has different tokenize values");
  }
  if (this.fieldType().storeTermVectors() != fieldMergeWith.fieldType().storeTermVectors()) {
    mergeResult.addConflict("mapper [" + fieldType.names().fullName() + "] has different store_term_vector values");
  }
  if (this.fieldType().storeTermVectorOffsets() != fieldMergeWith.fieldType().storeTermVectorOffsets()) {
    mergeResult.addConflict("mapper [" + fieldType.names().fullName() + "] has different store_term_vector_offsets values");
  }
  if (this.fieldType().storeTermVectorPositions() != fieldMergeWith.fieldType().storeTermVectorPositions()) {
    mergeResult.addConflict("mapper [" + fieldType.names().fullName() + "] has different store_term_vector_positions values");
  }
  if (this.fieldType().storeTermVectorPayloads() != fieldMergeWith.fieldType().storeTermVectorPayloads()) {
    mergeResult.addConflict("mapper [" + fieldType.names().fullName() + "] has different store_term_vector_payloads values");
  }
  if (this.fieldType.indexAnalyzer() == null || "default".equals(this.fieldType.indexAnalyzer().name())) {
    if (fieldMergeWith.fieldType.indexAnalyzer() != null && "default".equals(fieldMergeWith.fieldType.indexAnalyzer().name()) == false) {
      mergeResult.addConflict("mapper [" + fieldType.names().fullName() + "] has different analyzer");
    }
  }
 else   if (fieldMergeWith.fieldType.indexAnalyzer() == null || "default".equals(fieldMergeWith.fieldType.indexAnalyzer().name())) {
    mergeResult.addConflict("mapper [" + fieldType.names().fullName() + "] has different analyzer");
  }
 else   if (this.fieldType.indexAnalyzer().name().equals(fieldMergeWith.fieldType.indexAnalyzer().name()) == false) {
    mergeResult.addConflict("mapper [" + fieldType.names().fullName() + "] has different analyzer");
  }
  if (!this.fieldType().names().equals(fieldMergeWith.fieldType().names())) {
    mergeResult.addConflict("mapper [" + fieldType.names().fullName() + "] has different index_name");
  }
  if (this.fieldType.similarity() == null) {
    if (fieldMergeWith.fieldType.similarity() != null) {
      mergeResult.addConflict("mapper [" + fieldType.names().fullName() + "] has different similarity");
    }
  }
 else   if (fieldMergeWith.fieldType().similarity() == null) {
    mergeResult.addConflict("mapper [" + fieldType.names().fullName() + "] has different similarity");
  }
 else   if (!this.fieldType().similarity().equals(fieldMergeWith.fieldType().similarity())) {
    mergeResult.addConflict("mapper [" + fieldType.names().fullName() + "] has different similarity");
  }
  multiFields.merge(mergeWith,mergeResult);
  if (!mergeResult.simulate()) {
    this.fieldType=this.fieldType.clone();
    this.fieldType.setOmitNorms(fieldMergeWith.fieldType.omitNorms());
    this.fieldType.setBoost(fieldMergeWith.fieldType.boost());
    this.fieldType.setNormsLoading(fieldMergeWith.fieldType.normsLoading());
    if (fieldMergeWith.fieldType.searchAnalyzer() != null) {
      this.fieldType.setSearchAnalyzer(fieldMergeWith.fieldType.searchAnalyzer());
    }
    if (fieldMergeWith.customFieldDataSettings != null) {
      if (!Objects.equal(fieldMergeWith.customFieldDataSettings,this.customFieldDataSettings)) {
        this.customFieldDataSettings=fieldMergeWith.customFieldDataSettings;
        this.fieldType.setFieldDataType(new FieldDataType(defaultFieldDataType().getType(),Settings.builder().put(defaultFieldDataType().getSettings()).put(this.customFieldDataSettings)));
      }
    }
    this.fieldType.freeze();
    this.copyTo=fieldMergeWith.copyTo;
  }
}
