{
  final int min=2;
  final int max=4;
  final long waitTime=1000;
  final ThreadBarrier barrier=new ThreadBarrier(max + 1);
  TransferThreadPoolExecutor pool=TransferThreadPoolExecutor.newBlockingExecutor(min,max,60000,TimeUnit.MILLISECONDS,waitTime,TimeUnit.MILLISECONDS,1,Executors.defaultThreadFactory());
  assertThat("Min property",pool.getCorePoolSize(),equalTo(min));
  assertThat("Max property",pool.getMaximumPoolSize(),equalTo(max));
  for (int i=0; i < max; ++i) {
    pool.execute(new Runnable(){
      public void run(){
        try {
          barrier.await();
          barrier.await();
        }
 catch (        Throwable e) {
          barrier.reset(e);
        }
      }
    }
);
    Thread.sleep(100);
  }
  barrier.await();
  assertThat("wrong pool size",pool.getPoolSize(),equalTo(max));
  assertThat("wrong active size",pool.getActiveCount(),equalTo(max));
  assertThat("queue isn't empty",pool.getQueueSize(),equalTo(0));
  pool.execute(new Runnable(){
    public void run(){
    }
  }
);
  assertThat("queue isn't full",pool.getQueueSize(),equalTo(1));
  try {
    pool.execute(new Runnable(){
      public void run(){
      }
    }
);
    assertThat("Should have thrown RejectedExecutionException",false,equalTo(true));
  }
 catch (  RejectedExecutionException e) {
  }
  barrier.await();
  pool.shutdown();
}
