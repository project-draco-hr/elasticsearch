{
  assertAcked(prepareCreate("test").setSettings(Settings.builder().put(indexSettings()).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,0).put(EnableAllocationDecider.INDEX_ROUTING_REBALANCE_ENABLE_SETTING.getKey(),EnableAllocationDecider.Rebalance.NONE)));
  logger.info("--> indexing docs");
  int numDocs=scaledRandomIntBetween(100,1000);
  IndexRequestBuilder[] builders=new IndexRequestBuilder[numDocs];
  for (int i=0; i < builders.length; i++) {
    builders[i]=client().prepareIndex("test","type").setSource("field","value");
  }
  indexRandom(true,builders);
  ensureGreen();
  logger.info("--> bump number of replicas from 0 to 1");
  client().admin().indices().prepareFlush().execute().actionGet();
  client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,"1").build()).get();
  ensureGreen();
  assertAllShardsOnNodes("test",backwardsCluster().backwardsNodePattern());
  logger.info("--> upgrade cluster");
  logClusterState();
  SearchResponse countResponse=client().prepareSearch().setSize(0).get();
  assertHitCount(countResponse,numDocs);
  client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().put(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE_SETTING.getKey(),"none")).execute().actionGet();
  backwardsCluster().upgradeAllNodes();
  client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().put(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE_SETTING.getKey(),"all")).execute().actionGet();
  ensureGreen();
  countResponse=client().prepareSearch().setSize(0).get();
  assertHitCount(countResponse,numDocs);
  RecoveryResponse recoveryResponse=client().admin().indices().prepareRecoveries("test").setDetailed(true).get();
  HashMap<String,String> map=new HashMap<>();
  map.put("details","true");
  final ToXContent.Params params=new ToXContent.MapParams(map);
  for (  RecoveryState recoveryState : recoveryResponse.shardRecoveryStates().get("test")) {
    final String recoverStateAsJSON=XContentHelper.toString(recoveryState,params);
    if (!recoveryState.getPrimary()) {
      RecoveryState.Index index=recoveryState.getIndex();
      assertThat(recoverStateAsJSON,index.recoveredBytes(),equalTo(0L));
      assertThat(recoverStateAsJSON,index.reusedBytes(),greaterThan(0L));
      assertThat(recoverStateAsJSON,index.reusedBytes(),equalTo(index.totalBytes()));
      assertThat(recoverStateAsJSON,index.recoveredFileCount(),equalTo(0));
      assertThat(recoverStateAsJSON,index.reusedFileCount(),equalTo(index.totalFileCount()));
      assertThat(recoverStateAsJSON,index.reusedFileCount(),greaterThan(0));
      assertThat(recoverStateAsJSON,index.recoveredBytesPercent(),equalTo(100.f));
      assertThat(recoverStateAsJSON,index.recoveredFilesPercent(),equalTo(100.f));
      assertThat(recoverStateAsJSON,index.reusedBytes(),greaterThan(index.recoveredBytes()));
    }
  }
}
