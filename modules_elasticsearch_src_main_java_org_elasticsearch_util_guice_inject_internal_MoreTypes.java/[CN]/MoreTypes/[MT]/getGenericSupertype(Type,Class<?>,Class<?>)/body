{
  if (toResolve == rawType) {
    return type;
  }
  if (toResolve.isInterface()) {
    Class[] interfaces=rawType.getInterfaces();
    for (int i=0, length=interfaces.length; i < length; i++) {
      if (interfaces[i] == toResolve) {
        return rawType.getGenericInterfaces()[i];
      }
 else       if (toResolve.isAssignableFrom(interfaces[i])) {
        return getGenericSupertype(rawType.getGenericInterfaces()[i],interfaces[i],toResolve);
      }
    }
  }
  if (!rawType.isInterface()) {
    while (rawType != Object.class) {
      Class<?> rawSupertype=rawType.getSuperclass();
      if (rawSupertype == toResolve) {
        return rawType.getGenericSuperclass();
      }
 else       if (toResolve.isAssignableFrom(rawSupertype)) {
        return getGenericSupertype(rawType.getGenericSuperclass(),rawSupertype,toResolve);
      }
      rawType=rawSupertype;
    }
  }
  return toResolve;
}
