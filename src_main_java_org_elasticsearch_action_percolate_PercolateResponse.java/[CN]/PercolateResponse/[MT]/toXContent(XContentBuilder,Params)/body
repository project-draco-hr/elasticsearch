{
  builder.startObject();
  builder.field(Fields.TOOK,tookInMillis);
  builder.startObject(Fields._SHARDS);
  builder.field(Fields.TOTAL,getTotalShards());
  builder.field(Fields.SUCCESSFUL,getSuccessfulShards());
  builder.field(Fields.FAILED,getFailedShards());
  if (getShardFailures().length > 0) {
    builder.startArray(Fields.FAILURES);
    for (    ShardOperationFailedException shardFailure : getShardFailures()) {
      builder.startObject();
      builder.field(Fields.INDEX,shardFailure.index());
      builder.field(Fields.SHARD,shardFailure.shardId());
      builder.field(Fields.STATUS,shardFailure.status().getStatus());
      builder.field(Fields.REASON,shardFailure.reason());
      builder.endObject();
    }
    builder.endArray();
  }
  builder.endObject();
  builder.field(Fields.TOTAL,count);
  if (matches.length != 0) {
    builder.startArray(Fields.MATCHES);
    boolean justIds="ids".equals(params.param("percolate_format"));
    if (justIds) {
      for (      PercolateResponse.Match match : matches) {
        builder.value(match.id());
      }
    }
 else {
      for (      PercolateResponse.Match match : matches) {
        builder.startObject();
        builder.field(Fields._INDEX,match.getIndex());
        builder.field(Fields._ID,match.getId());
        builder.endObject();
      }
    }
    builder.endArray();
  }
  builder.endObject();
  return builder;
}
