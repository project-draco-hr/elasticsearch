{
  builder.startObject();
  builder.field(Fields.TOOK,tookInMillis);
  RestActions.buildBroadcastShardsHeader(builder,this);
  builder.field(Fields.TOTAL,count);
  if (matches.length != 0) {
    builder.startArray(Fields.MATCHES);
    boolean justIds="ids".equals(params.param("percolate_format"));
    if (justIds) {
      for (      PercolateResponse.Match match : matches) {
        builder.value(match.getId());
      }
    }
 else {
      for (      PercolateResponse.Match match : matches) {
        builder.startObject();
        builder.field(Fields._INDEX,match.getIndex());
        builder.field(Fields._ID,match.getId());
        float score=match.getScore();
        if (score != PercolatorService.NO_SCORE) {
          builder.field(Fields._SCORE,match.getScore());
        }
        if (match.getHighlightFields() != null) {
          builder.startObject(Fields.HIGHLIGHT);
          for (          HighlightField field : match.getHighlightFields().values()) {
            builder.field(field.name());
            if (field.fragments() == null) {
              builder.nullValue();
            }
 else {
              builder.startArray();
              for (              Text fragment : field.fragments()) {
                builder.value(fragment);
              }
              builder.endArray();
            }
          }
          builder.endObject();
        }
        builder.endObject();
      }
    }
    builder.endArray();
  }
  if (facets != null) {
    facets.toXContent(builder,params);
  }
  builder.endObject();
  return builder;
}
