{
  standardPolicy=new ESPolicy(permissions);
  URL bogus=new URL("file:/bogus");
  PermissionCollection smallPermissions=standardPolicy.template.getPermissions(new CodeSource(bogus,(Certificate[])null));
  Set<Permission> small=new HashSet<>(Collections.list(smallPermissions.elements()));
  System.setProperty(insecurePluginProp,bogus.toString());
  ESPolicy biggerPolicy=new ESPolicy(permissions);
  System.clearProperty(insecurePluginProp);
  PermissionCollection bigPermissions=biggerPolicy.template.getPermissions(new CodeSource(bogus,(Certificate[])null));
  Set<Permission> big=new HashSet<>(Collections.list(bigPermissions.elements()));
  big.removeAll(small);
  extraPermissions=new Permissions();
  for (  Permission p : big) {
    extraPermissions.add(p);
  }
  extraSources=new HashSet<CodeSource>();
  for (  URL location : JarHell.parseClassPath()) {
    Path path=PathUtils.get(location.toURI());
    String baseName=path.getFileName().toString();
    if (baseName.contains("test-classes") == false) {
      extraSources.add(new CodeSource(location,(Certificate[])null));
    }
  }
  extraSources.remove(Bootstrap.class.getProtectionDomain().getCodeSource());
  extraSources.remove(getClass().getProtectionDomain().getCodeSource());
  extraSources.remove(LuceneTestCase.class.getProtectionDomain().getCodeSource());
  extraSources.remove(RandomizedRunner.class.getProtectionDomain().getCodeSource());
  extraSources.remove(Assert.class.getProtectionDomain().getCodeSource());
  Loggers.getLogger(getClass()).debug("Apply permissions [{}] to codebases [{}]",extraPermissions,extraSources);
}
