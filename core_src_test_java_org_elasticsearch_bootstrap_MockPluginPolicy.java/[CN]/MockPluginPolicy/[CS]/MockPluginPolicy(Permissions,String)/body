{
  standardPolicy=new ESPolicy(permissions);
  URL bogus=new URL("file:/bogus");
  PermissionCollection smallPermissions=standardPolicy.template.getPermissions(new CodeSource(bogus,(Certificate[])null));
  Set<Permission> small=new HashSet<>(Collections.list(smallPermissions.elements()));
  System.setProperty(insecurePluginProp,bogus.toString());
  ESPolicy biggerPolicy=new ESPolicy(permissions);
  System.clearProperty(insecurePluginProp);
  PermissionCollection bigPermissions=biggerPolicy.template.getPermissions(new CodeSource(bogus,(Certificate[])null));
  Set<Permission> big=new HashSet<>(Collections.list(bigPermissions.elements()));
  big.removeAll(small);
  extraPermissions=new Permissions();
  for (  Permission p : big) {
    extraPermissions.add(p);
  }
  excludedSources=new HashSet<CodeSource>();
  excludedSources.add(Bootstrap.class.getProtectionDomain().getCodeSource());
  excludedSources.add(getClass().getProtectionDomain().getCodeSource());
  excludedSources.add(LuceneTestCase.class.getProtectionDomain().getCodeSource());
  excludedSources.add(RandomizedRunner.class.getProtectionDomain().getCodeSource());
  excludedSources.add(Assert.class.getProtectionDomain().getCodeSource());
  excludedSources.add(new CodeSource(new URL("file:" + BootstrapInfo.UNTRUSTED_CODEBASE),(Certificate[])null));
  Loggers.getLogger(getClass()).debug("Apply permissions [{}] excluding codebases [{}]",extraPermissions,excludedSources);
}
