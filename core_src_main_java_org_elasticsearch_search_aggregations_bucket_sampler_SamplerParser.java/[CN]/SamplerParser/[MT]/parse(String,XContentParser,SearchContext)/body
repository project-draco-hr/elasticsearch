{
  XContentParser.Token token;
  String currentFieldName=null;
  String executionHint=null;
  int shardSize=DEFAULT_SHARD_SAMPLE_SIZE;
  int maxDocsPerValue=MAX_DOCS_PER_VALUE_DEFAULT;
  ValuesSourceParser vsParser=null;
  boolean diversityChoiceMade=false;
  vsParser=ValuesSourceParser.any(aggregationName,InternalSampler.TYPE,context).scriptable(true).formattable(false).build();
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (vsParser.token(currentFieldName,token,parser)) {
      continue;
    }
 else     if (token == XContentParser.Token.VALUE_NUMBER) {
      if (context.parseFieldMatcher().match(currentFieldName,SHARD_SIZE_FIELD)) {
        shardSize=parser.intValue();
      }
 else       if (context.parseFieldMatcher().match(currentFieldName,MAX_DOCS_PER_VALUE_FIELD)) {
        diversityChoiceMade=true;
        maxDocsPerValue=parser.intValue();
      }
 else {
        throw new SearchParseException(context,"Unsupported property \"" + currentFieldName + "\" for aggregation \""+ aggregationName,parser.getTokenLocation());
      }
    }
 else     if (!vsParser.token(currentFieldName,token,parser)) {
      if (context.parseFieldMatcher().match(currentFieldName,EXECUTION_HINT_FIELD)) {
        executionHint=parser.text();
      }
 else {
        throw new SearchParseException(context,"Unexpected token " + token + " in ["+ aggregationName+ "].",parser.getTokenLocation());
      }
    }
 else {
      throw new SearchParseException(context,"Unsupported property \"" + currentFieldName + "\" for aggregation \""+ aggregationName,parser.getTokenLocation());
    }
  }
  ValuesSourceConfig vsConfig=vsParser.config();
  if (vsConfig.valid()) {
    return new SamplerAggregator.DiversifiedFactory(aggregationName,shardSize,executionHint,vsConfig,maxDocsPerValue);
  }
 else {
    if (diversityChoiceMade) {
      throw new SearchParseException(context,"Sampler aggregation has " + MAX_DOCS_PER_VALUE_FIELD.getPreferredName() + " setting but no \"field\" or \"script\" setting to provide values for aggregation \""+ aggregationName+ "\"",parser.getTokenLocation());
    }
    return new SamplerAggregator.Factory(aggregationName,shardSize);
  }
}
