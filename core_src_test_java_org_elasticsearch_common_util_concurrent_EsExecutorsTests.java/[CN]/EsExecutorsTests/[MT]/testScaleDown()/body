{
  final int min=between(1,3);
  final int max=between(min + 1,6);
  final ThreadBarrier barrier=new ThreadBarrier(max + 1);
  final ThreadPoolExecutor pool=EsExecutors.newScaling(getTestName(),min,max,between(1,100),TimeUnit.MILLISECONDS,EsExecutors.daemonThreadFactory("test"),threadContext);
  assertThat("Min property",pool.getCorePoolSize(),equalTo(min));
  assertThat("Max property",pool.getMaximumPoolSize(),equalTo(max));
  for (int i=0; i < max; ++i) {
    final CountDownLatch latch=new CountDownLatch(1);
    pool.execute(new Runnable(){
      @Override public void run(){
        latch.countDown();
        try {
          barrier.await();
          barrier.await();
        }
 catch (        Exception e) {
          barrier.reset(e);
        }
      }
    }
);
    latch.await();
  }
  barrier.await();
  assertThat("wrong pool size",pool.getPoolSize(),equalTo(max));
  assertThat("wrong active size",pool.getActiveCount(),equalTo(max));
  barrier.await();
  assertBusy(new Runnable(){
    @Override public void run(){
      assertThat("wrong active count",pool.getActiveCount(),equalTo(0));
      assertThat("idle threads didn't shrink below max. (" + pool.getPoolSize() + ")",pool.getPoolSize(),lessThan(max));
    }
  }
);
  terminate(pool);
}
