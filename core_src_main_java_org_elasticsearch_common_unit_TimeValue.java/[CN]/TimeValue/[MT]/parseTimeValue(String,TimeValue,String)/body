{
  settingName=Objects.requireNonNull(settingName);
  if (sValue == null) {
    return defaultValue;
  }
  try {
    String lowerSValue=sValue.toLowerCase(Locale.ROOT).trim();
    if (lowerSValue.endsWith("nanos")) {
      return new TimeValue(parse(lowerSValue,5),TimeUnit.NANOSECONDS);
    }
 else     if (lowerSValue.endsWith("micros")) {
      return new TimeValue(parse(lowerSValue,6),TimeUnit.MICROSECONDS);
    }
 else     if (lowerSValue.endsWith("ms")) {
      return new TimeValue(parse(lowerSValue,2),TimeUnit.MILLISECONDS);
    }
 else     if (lowerSValue.endsWith("s")) {
      return new TimeValue(parse(lowerSValue,1),TimeUnit.SECONDS);
    }
 else     if (lowerSValue.endsWith("m")) {
      return new TimeValue(parse(lowerSValue,1),TimeUnit.MINUTES);
    }
 else     if (lowerSValue.endsWith("h")) {
      return new TimeValue(parse(lowerSValue,1),TimeUnit.HOURS);
    }
 else     if (lowerSValue.endsWith("d")) {
      return new TimeValue(parse(lowerSValue,1),TimeUnit.DAYS);
    }
 else     if (lowerSValue.matches("-0*1")) {
      return TimeValue.MINUS_ONE;
    }
 else     if (lowerSValue.matches("0+")) {
      return TimeValue.ZERO;
    }
 else {
      throw new ElasticsearchParseException("failed to parse setting [{}] with value [{}] as a time value: unit is missing or unrecognized",settingName,sValue);
    }
  }
 catch (  NumberFormatException e) {
    throw new ElasticsearchParseException("failed to parse [{}]",e,sValue);
  }
}
