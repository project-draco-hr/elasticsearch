{
  XContentParser parser=parseContext.parser();
  String currentFieldName=null;
  String queryBody=null;
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  String queryName=null;
  String field=null;
  String minimumShouldMatch=null;
  Map<String,Float> fieldsAndWeights=new HashMap<>();
  Operator defaultOperator=null;
  String analyzerName=null;
  int flags=SimpleQueryStringFlag.ALL.value();
  boolean lenient=SimpleQueryStringBuilder.DEFAULT_LENIENT;
  boolean lowercaseExpandedTerms=SimpleQueryStringBuilder.DEFAULT_LOWERCASE_EXPANDED_TERMS;
  boolean analyzeWildcard=SimpleQueryStringBuilder.DEFAULT_ANALYZE_WILDCARD;
  Locale locale=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if ("fields".equals(currentFieldName)) {
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          String fField=null;
          float fBoost=1;
          char[] text=parser.textCharacters();
          int end=parser.textOffset() + parser.textLength();
          for (int i=parser.textOffset(); i < end; i++) {
            if (text[i] == '^') {
              int relativeLocation=i - parser.textOffset();
              fField=new String(text,parser.textOffset(),relativeLocation);
              fBoost=Float.parseFloat(new String(text,i + 1,parser.textLength() - relativeLocation - 1));
              break;
            }
          }
          if (fField == null) {
            fField=parser.text();
          }
          fieldsAndWeights.put(fField,fBoost);
        }
      }
 else {
        throw new QueryParsingException(parseContext,"[" + SimpleQueryStringBuilder.NAME + "] query does not support ["+ currentFieldName+ "]");
      }
    }
 else     if (token.isValue()) {
      if ("query".equals(currentFieldName)) {
        queryBody=parser.text();
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=parser.floatValue();
      }
 else       if ("analyzer".equals(currentFieldName)) {
        analyzerName=parser.text();
      }
 else       if ("field".equals(currentFieldName)) {
        field=parser.text();
      }
 else       if ("default_operator".equals(currentFieldName) || "defaultOperator".equals(currentFieldName)) {
        defaultOperator=Operator.fromString(parser.text());
      }
 else       if ("flags".equals(currentFieldName)) {
        if (parser.currentToken() != XContentParser.Token.VALUE_NUMBER) {
          flags=SimpleQueryStringFlag.resolveFlags(parser.text());
        }
 else {
          flags=parser.intValue();
          if (flags < 0) {
            flags=SimpleQueryStringFlag.ALL.value();
          }
        }
      }
 else       if ("locale".equals(currentFieldName)) {
        String localeStr=parser.text();
        locale=Locale.forLanguageTag(localeStr);
      }
 else       if ("lowercase_expanded_terms".equals(currentFieldName)) {
        lowercaseExpandedTerms=parser.booleanValue();
      }
 else       if ("lenient".equals(currentFieldName)) {
        lenient=parser.booleanValue();
      }
 else       if ("analyze_wildcard".equals(currentFieldName)) {
        analyzeWildcard=parser.booleanValue();
      }
 else       if ("_name".equals(currentFieldName)) {
        queryName=parser.text();
      }
 else       if ("minimum_should_match".equals(currentFieldName)) {
        minimumShouldMatch=parser.textOrNull();
      }
 else {
        throw new QueryParsingException(parseContext,"[" + SimpleQueryStringBuilder.NAME + "] unsupported field ["+ parser.currentName()+ "]");
      }
    }
  }
  if (queryBody == null) {
    throw new QueryParsingException(parseContext,"[" + SimpleQueryStringBuilder.NAME + "] query text missing");
  }
  if (field == null) {
    field=currentFieldName;
  }
  SimpleQueryStringBuilder qb=new SimpleQueryStringBuilder(queryBody);
  qb.boost(boost).fields(fieldsAndWeights).analyzer(analyzerName).queryName(queryName).minimumShouldMatch(minimumShouldMatch);
  qb.flags(flags).defaultOperator(defaultOperator).locale(locale).lowercaseExpandedTerms(lowercaseExpandedTerms);
  qb.lenient(lenient).analyzeWildcard(analyzeWildcard).boost(boost);
  return qb;
}
