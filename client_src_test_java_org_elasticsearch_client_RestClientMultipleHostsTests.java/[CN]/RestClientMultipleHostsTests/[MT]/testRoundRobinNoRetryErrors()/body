{
  int numIters=RandomInts.randomIntBetween(random(),1,5);
  for (int i=0; i < numIters; i++) {
    Set<HttpHost> hostsSet=new HashSet<>();
    Collections.addAll(hostsSet,httpHosts);
    for (int j=0; j < httpHosts.length; j++) {
      String method=randomHttpMethod(random());
      int statusCode=randomErrorNoRetryStatusCode(random());
      try (Response response=restClient.performRequest(method,"/" + statusCode,Collections.<String,String>emptyMap(),null)){
        if (method.equals("HEAD") && statusCode == 404) {
          assertThat(response.getStatusLine().getStatusCode(),equalTo(404));
          assertThat(response.getStatusLine().getStatusCode(),equalTo(statusCode));
          assertTrue("host not found: " + response.getHost(),hostsSet.remove(response.getHost()));
        }
 else {
          fail("request should have failed");
        }
      }
 catch (      ResponseException e) {
        if (method.equals("HEAD") && statusCode == 404) {
          throw e;
        }
        Response response=e.getResponse();
        assertThat(response.getStatusLine().getStatusCode(),equalTo(statusCode));
        assertTrue("host not found: " + response.getHost(),hostsSet.remove(response.getHost()));
        assertEquals(0,e.getSuppressed().length);
      }
    }
    assertEquals("every host should have been used but some weren't: " + hostsSet,0,hostsSet.size());
  }
  failureListener.assertNotCalled();
}
