{
  String retryEndpoint=randomErrorRetryEndpoint();
  try {
    restClient.performRequest(randomHttpMethod(random()),retryEndpoint,Collections.<String,String>emptyMap(),null);
    fail("request should have failed");
  }
 catch (  ElasticsearchResponseException e) {
    Set<HttpHost> hostsSet=new HashSet<>();
    Collections.addAll(hostsSet,httpHosts);
    failureListener.assertCalled(httpHosts);
    do {
      ElasticsearchResponse response=e.getElasticsearchResponse();
      assertThat(response.getStatusLine().getStatusCode(),equalTo(Integer.parseInt(retryEndpoint.substring(1))));
      assertTrue("host [" + response.getHost() + "] not found, most likely used multiple times",hostsSet.remove(response.getHost()));
      if (e.getSuppressed().length > 0) {
        assertEquals(1,e.getSuppressed().length);
        Throwable suppressed=e.getSuppressed()[0];
        assertThat(suppressed,instanceOf(ElasticsearchResponseException.class));
        e=(ElasticsearchResponseException)suppressed;
      }
 else {
        e=null;
      }
    }
 while (e != null);
    assertEquals("every host should have been used but some weren't: " + hostsSet,0,hostsSet.size());
  }
catch (  IOException e) {
    Set<HttpHost> hostsSet=new HashSet<>();
    Collections.addAll(hostsSet,httpHosts);
    failureListener.assertCalled(httpHosts);
    do {
      HttpHost httpHost=HttpHost.create(e.getMessage());
      assertTrue("host [" + httpHost + "] not found, most likely used multiple times",hostsSet.remove(httpHost));
      if (e.getSuppressed().length > 0) {
        assertEquals(1,e.getSuppressed().length);
        Throwable suppressed=e.getSuppressed()[0];
        assertThat(suppressed,instanceOf(IOException.class));
        e=(IOException)suppressed;
      }
 else {
        e=null;
      }
    }
 while (e != null);
    assertEquals("every host should have been used but some weren't: " + hostsSet,0,hostsSet.size());
  }
  int numIters=RandomInts.randomIntBetween(random(),2,5);
  for (int i=1; i <= numIters; i++) {
    Set<HttpHost> hostsSet=new HashSet<>();
    Collections.addAll(hostsSet,httpHosts);
    for (int j=0; j < httpHosts.length; j++) {
      retryEndpoint=randomErrorRetryEndpoint();
      try {
        restClient.performRequest(randomHttpMethod(random()),retryEndpoint,Collections.<String,String>emptyMap(),null);
        fail("request should have failed");
      }
 catch (      ElasticsearchResponseException e) {
        ElasticsearchResponse response=e.getElasticsearchResponse();
        assertThat(response.getStatusLine().getStatusCode(),equalTo(Integer.parseInt(retryEndpoint.substring(1))));
        assertTrue("host [" + response.getHost() + "] not found, most likely used multiple times",hostsSet.remove(response.getHost()));
        failureListener.assertCalled(response.getHost());
        assertEquals(0,e.getSuppressed().length);
      }
catch (      IOException e) {
        HttpHost httpHost=HttpHost.create(e.getMessage());
        assertTrue("host [" + httpHost + "] not found, most likely used multiple times",hostsSet.remove(httpHost));
        failureListener.assertCalled(httpHost);
        assertEquals(0,e.getSuppressed().length);
      }
    }
    assertEquals("every host should have been used but some weren't: " + hostsSet,0,hostsSet.size());
    if (random().nextBoolean()) {
      HttpHost selectedHost=null;
      int iters=RandomInts.randomIntBetween(random(),2,10);
      for (int y=0; y < iters; y++) {
        int statusCode=randomErrorNoRetryStatusCode(random());
        ElasticsearchResponse response;
        try (ElasticsearchResponse esResponse=restClient.performRequest(randomHttpMethod(random()),"/" + statusCode,Collections.<String,String>emptyMap(),null)){
          response=esResponse;
        }
 catch (        ElasticsearchResponseException e) {
          response=e.getElasticsearchResponse();
        }
        assertThat(response.getStatusLine().getStatusCode(),equalTo(statusCode));
        if (selectedHost == null) {
          selectedHost=response.getHost();
        }
 else {
          assertThat(response.getHost(),equalTo(selectedHost));
        }
      }
      failureListener.assertNotCalled();
      for (int y=0; y < i + 1; y++) {
        retryEndpoint=randomErrorRetryEndpoint();
        try {
          restClient.performRequest(randomHttpMethod(random()),retryEndpoint,Collections.<String,String>emptyMap(),null);
          fail("request should have failed");
        }
 catch (        ElasticsearchResponseException e) {
          ElasticsearchResponse response=e.getElasticsearchResponse();
          assertThat(response.getStatusLine().getStatusCode(),equalTo(Integer.parseInt(retryEndpoint.substring(1))));
          assertThat(response.getHost(),equalTo(selectedHost));
          failureListener.assertCalled(selectedHost);
        }
catch (        IOException e) {
          HttpHost httpHost=HttpHost.create(e.getMessage());
          assertThat(httpHost,equalTo(selectedHost));
          failureListener.assertCalled(selectedHost);
        }
      }
    }
  }
}
