{
  @SuppressWarnings("unchecked") K key=(K)k;
  if (key == null) {
    throw new NullPointerException("key");
  }
  int hash=hash(key);
  Segment segment=segmentFor(hash);
  outer:   while (true) {
    E entry=segment.getEntry(key,hash);
    if (entry == null) {
      boolean created=false;
      segment.lock();
      try {
        entry=segment.getEntry(key,hash);
        if (entry == null) {
          created=true;
          int count=segment.count;
          if (count++ > segment.threshold) {
            segment.expand();
          }
          AtomicReferenceArray<E> table=segment.table;
          int index=hash & (table.length() - 1);
          E first=table.get(index);
          ++segment.modCount;
          entry=computingStrategy.newEntry(key,hash,first);
          table.set(index,entry);
          segment.count=count;
        }
      }
  finally {
        segment.unlock();
      }
      if (created) {
        boolean success=false;
        try {
          V value=computingStrategy.compute(key,entry,computer);
          if (value == null) {
            throw new NullPointerException("compute() returned null unexpectedly");
          }
          success=true;
          return value;
        }
  finally {
          if (!success) {
            segment.removeEntry(entry,hash);
          }
        }
      }
    }
    boolean interrupted=false;
    try {
      while (true) {
        try {
          V value=computingStrategy.waitForValue(entry);
          if (value == null) {
            segment.removeEntry(entry,hash);
            continue outer;
          }
          return value;
        }
 catch (        InterruptedException e) {
          interrupted=true;
        }
      }
    }
  finally {
      if (interrupted) {
        Thread.currentThread().interrupt();
      }
    }
  }
}
