{
  Strategy<K,V,E> s=Impl.this.strategy;
  lock();
  try {
    int count=this.count;
    if (count++ > this.threshold) {
      expand();
    }
    AtomicReferenceArray<E> table=this.table;
    int index=hash & (table.length() - 1);
    E first=table.get(index);
    for (E e=first; e != null; e=s.getNext(e)) {
      K entryKey=s.getKey(e);
      if (s.getHash(e) == hash && entryKey != null && s.equalKeys(key,entryKey)) {
        V entryValue=s.getValue(e);
        if (onlyIfAbsent && entryValue != null) {
          return entryValue;
        }
        s.setValue(e,value);
        return entryValue;
      }
    }
    ++modCount;
    E newEntry=s.newEntry(key,hash,first);
    s.setValue(newEntry,value);
    table.set(index,newEntry);
    this.count=count;
    return null;
  }
  finally {
    unlock();
  }
}
