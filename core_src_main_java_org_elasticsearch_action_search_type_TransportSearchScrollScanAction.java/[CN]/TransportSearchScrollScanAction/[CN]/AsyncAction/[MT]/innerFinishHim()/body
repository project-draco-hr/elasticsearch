{
  int numberOfHits=0;
  List<AtomicArray.Entry<QueryFetchSearchResult>> entries=queryFetchResults.asList();
  for (  AtomicArray.Entry<QueryFetchSearchResult> entry : entries) {
    numberOfHits+=entry.value.queryResult().topDocs().scoreDocs.length;
  }
  List<ScoreDoc> docs=new ArrayList<>(numberOfHits);
  for (  AtomicArray.Entry<QueryFetchSearchResult> entry : entries) {
    ScoreDoc[] scoreDocs=entry.value.queryResult().topDocs().scoreDocs;
    for (    ScoreDoc scoreDoc : scoreDocs) {
      scoreDoc.shardIndex=entry.index;
      docs.add(scoreDoc);
    }
  }
  final InternalSearchResponse internalResponse=searchPhaseController.merge(docs.toArray(new ScoreDoc[0]),queryFetchResults,queryFetchResults,request);
  ((InternalSearchHits)internalResponse.hits()).totalHits=Long.parseLong(this.scrollId.getAttributes().get("total_hits"));
  for (  AtomicArray.Entry<QueryFetchSearchResult> entry : entries) {
    if (entry.value.queryResult().topDocs().scoreDocs.length < entry.value.queryResult().size()) {
      queryFetchResults.set(entry.index,null);
    }
  }
  String scrollId=null;
  if (request.scroll() != null) {
    scrollId=TransportSearchHelper.buildScrollId(this.scrollId.getType(),queryFetchResults,this.scrollId.getAttributes());
  }
  listener.onResponse(new SearchResponse(internalResponse,scrollId,this.scrollId.getContext().length,successfulOps.get(),buildTookInMillis(),buildShardFailures()));
}
