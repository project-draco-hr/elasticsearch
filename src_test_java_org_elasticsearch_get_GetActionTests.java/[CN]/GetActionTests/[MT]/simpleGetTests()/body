{
  assertAcked(prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("index.refresh_interval",-1)).addAlias(new Alias("alias")));
  ensureGreen();
  GetResponse response=client().prepareGet(indexOrAlias(),"type1","1").get();
  assertThat(response.isExists(),equalTo(false));
  logger.info("--> index doc 1");
  client().prepareIndex("test","type1","1").setSource("field1","value1","field2","value2").get();
  logger.info("--> realtime get 1");
  response=client().prepareGet(indexOrAlias(),"type1","1").get();
  assertThat(response.isExists(),equalTo(true));
  assertThat(response.getIndex(),equalTo("test"));
  assertThat(response.getSourceAsMap().get("field1").toString(),equalTo("value1"));
  assertThat(response.getSourceAsMap().get("field2").toString(),equalTo("value2"));
  logger.info("--> realtime get 1 (no source, implicit)");
  response=client().prepareGet(indexOrAlias(),"type1","1").setFields(Strings.EMPTY_ARRAY).get();
  assertThat(response.isExists(),equalTo(true));
  assertThat(response.getIndex(),equalTo("test"));
  assertThat(response.getFields().size(),equalTo(0));
  assertThat(response.getSourceAsBytes(),nullValue());
  logger.info("--> realtime get 1 (no source, explicit)");
  response=client().prepareGet(indexOrAlias(),"type1","1").setFetchSource(false).get();
  assertThat(response.isExists(),equalTo(true));
  assertThat(response.getIndex(),equalTo("test"));
  assertThat(response.getFields().size(),equalTo(0));
  assertThat(response.getSourceAsBytes(),nullValue());
  logger.info("--> realtime get 1 (no type)");
  response=client().prepareGet(indexOrAlias(),null,"1").get();
  assertThat(response.isExists(),equalTo(true));
  assertThat(response.getIndex(),equalTo("test"));
  assertThat(response.getSourceAsMap().get("field1").toString(),equalTo("value1"));
  assertThat(response.getSourceAsMap().get("field2").toString(),equalTo("value2"));
  logger.info("--> non realtime get 1");
  response=client().prepareGet(indexOrAlias(),"type1","1").setRealtime(false).get();
  assertThat(response.isExists(),equalTo(false));
  logger.info("--> realtime fetch of field (requires fetching parsing source)");
  response=client().prepareGet(indexOrAlias(),"type1","1").setFields("field1").get();
  assertThat(response.isExists(),equalTo(true));
  assertThat(response.getIndex(),equalTo("test"));
  assertThat(response.getSourceAsBytes(),nullValue());
  assertThat(response.getField("field1").getValues().get(0).toString(),equalTo("value1"));
  assertThat(response.getField("field2"),nullValue());
  logger.info("--> realtime fetch of field & source (requires fetching parsing source)");
  response=client().prepareGet(indexOrAlias(),"type1","1").setFields("field1").setFetchSource("field1",null).get();
  assertThat(response.isExists(),equalTo(true));
  assertThat(response.getIndex(),equalTo("test"));
  assertThat(response.getSourceAsMap(),hasKey("field1"));
  assertThat(response.getSourceAsMap(),not(hasKey("field2")));
  assertThat(response.getField("field1").getValues().get(0).toString(),equalTo("value1"));
  assertThat(response.getField("field2"),nullValue());
  logger.info("--> flush the index, so we load it from it");
  flush();
  logger.info("--> realtime get 1 (loaded from index)");
  response=client().prepareGet(indexOrAlias(),"type1","1").get();
  assertThat(response.isExists(),equalTo(true));
  assertThat(response.getIndex(),equalTo("test"));
  assertThat(response.getSourceAsMap().get("field1").toString(),equalTo("value1"));
  assertThat(response.getSourceAsMap().get("field2").toString(),equalTo("value2"));
  logger.info("--> non realtime get 1 (loaded from index)");
  response=client().prepareGet(indexOrAlias(),"type1","1").setRealtime(false).get();
  assertThat(response.isExists(),equalTo(true));
  assertThat(response.getIndex(),equalTo("test"));
  assertThat(response.getSourceAsMap().get("field1").toString(),equalTo("value1"));
  assertThat(response.getSourceAsMap().get("field2").toString(),equalTo("value2"));
  logger.info("--> realtime fetch of field (loaded from index)");
  response=client().prepareGet(indexOrAlias(),"type1","1").setFields("field1").get();
  assertThat(response.isExists(),equalTo(true));
  assertThat(response.getIndex(),equalTo("test"));
  assertThat(response.getSourceAsBytes(),nullValue());
  assertThat(response.getField("field1").getValues().get(0).toString(),equalTo("value1"));
  assertThat(response.getField("field2"),nullValue());
  logger.info("--> realtime fetch of field & source (loaded from index)");
  response=client().prepareGet(indexOrAlias(),"type1","1").setFields("field1").setFetchSource(true).get();
  assertThat(response.isExists(),equalTo(true));
  assertThat(response.getIndex(),equalTo("test"));
  assertThat(response.getSourceAsBytes(),not(nullValue()));
  assertThat(response.getField("field1").getValues().get(0).toString(),equalTo("value1"));
  assertThat(response.getField("field2"),nullValue());
  logger.info("--> update doc 1");
  client().prepareIndex("test","type1","1").setSource("field1","value1_1","field2","value2_1").get();
  logger.info("--> realtime get 1");
  response=client().prepareGet(indexOrAlias(),"type1","1").get();
  assertThat(response.isExists(),equalTo(true));
  assertThat(response.getIndex(),equalTo("test"));
  assertThat(response.getSourceAsMap().get("field1").toString(),equalTo("value1_1"));
  assertThat(response.getSourceAsMap().get("field2").toString(),equalTo("value2_1"));
  logger.info("--> update doc 1 again");
  client().prepareIndex("test","type1","1").setSource("field1","value1_2","field2","value2_2").get();
  response=client().prepareGet(indexOrAlias(),"type1","1").get();
  assertThat(response.isExists(),equalTo(true));
  assertThat(response.getIndex(),equalTo("test"));
  assertThat(response.getSourceAsMap().get("field1").toString(),equalTo("value1_2"));
  assertThat(response.getSourceAsMap().get("field2").toString(),equalTo("value2_2"));
  DeleteResponse deleteResponse=client().prepareDelete("test","type1","1").get();
  assertThat(deleteResponse.isFound(),equalTo(true));
  response=client().prepareGet(indexOrAlias(),"type1","1").get();
  assertThat(response.isExists(),equalTo(false));
}
