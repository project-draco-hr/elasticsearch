{
  final Sort sort=type.sort;
  boolean exact=!settings.getNumericOverflow() && ((sort == Sort.INT || sort == Sort.LONG) && (operation == Operation.MUL || operation == Operation.DIV || operation == Operation.ADD || operation == Operation.SUB) || (sort == Sort.FLOAT || sort == Sort.DOUBLE) && (operation == Operation.MUL || operation == Operation.DIV || operation == Operation.REM || operation == Operation.ADD || operation == Operation.SUB));
  if (exact) {
switch (sort) {
case INT:
switch (operation) {
case MUL:
        adapter.invokeStatic(definition.mathType.type,MULEXACT_INT);
      break;
case DIV:
    adapter.invokeStatic(definition.utilityType.type,DIVWOOVERLOW_INT);
  break;
case ADD:
adapter.invokeStatic(definition.mathType.type,ADDEXACT_INT);
break;
case SUB:
adapter.invokeStatic(definition.mathType.type,SUBEXACT_INT);
break;
}
break;
case LONG:
switch (operation) {
case MUL:
adapter.invokeStatic(definition.mathType.type,MULEXACT_LONG);
break;
case DIV:
adapter.invokeStatic(definition.utilityType.type,DIVWOOVERLOW_LONG);
break;
case ADD:
adapter.invokeStatic(definition.mathType.type,ADDEXACT_LONG);
break;
case SUB:
adapter.invokeStatic(definition.mathType.type,SUBEXACT_LONG);
break;
}
break;
case FLOAT:
switch (operation) {
case MUL:
adapter.invokeStatic(definition.utilityType.type,MULWOOVERLOW_FLOAT);
break;
case DIV:
adapter.invokeStatic(definition.utilityType.type,DIVWOOVERLOW_FLOAT);
break;
case REM:
adapter.invokeStatic(definition.utilityType.type,REMWOOVERLOW_FLOAT);
break;
case ADD:
adapter.invokeStatic(definition.utilityType.type,ADDWOOVERLOW_FLOAT);
break;
case SUB:
adapter.invokeStatic(definition.utilityType.type,SUBWOOVERLOW_FLOAT);
break;
default :
throw new IllegalStateException("Error " + location + ": Illegal tree structure.");
}
break;
case DOUBLE:
switch (operation) {
case MUL:
adapter.invokeStatic(definition.utilityType.type,MULWOOVERLOW_DOUBLE);
break;
case DIV:
adapter.invokeStatic(definition.utilityType.type,DIVWOOVERLOW_DOUBLE);
break;
case REM:
adapter.invokeStatic(definition.utilityType.type,REMWOOVERLOW_DOUBLE);
break;
case ADD:
adapter.invokeStatic(definition.utilityType.type,ADDWOOVERLOW_DOUBLE);
break;
case SUB:
adapter.invokeStatic(definition.utilityType.type,SUBWOOVERLOW_DOUBLE);
break;
default :
throw new IllegalStateException("Error " + location + ": Illegal tree structure.");
}
break;
default :
throw new IllegalStateException("Error " + location + ": Illegal tree structure.");
}
}
 else {
if ((sort == Sort.FLOAT || sort == Sort.DOUBLE) && (operation == Operation.LSH || operation == Operation.USH || operation == Operation.RSH || operation == Operation.BWAND || operation == Operation.XOR || operation == Operation.BWOR)) {
throw new IllegalStateException("Error " + location + ": Illegal tree structure.");
}
if (sort == Sort.DEF) {
switch (operation) {
case MUL:
adapter.invokeStatic(definition.defobjType.type,DEF_MUL_CALL);
break;
case DIV:
adapter.invokeStatic(definition.defobjType.type,DEF_DIV_CALL);
break;
case REM:
adapter.invokeStatic(definition.defobjType.type,DEF_REM_CALL);
break;
case ADD:
adapter.invokeStatic(definition.defobjType.type,DEF_ADD_CALL);
break;
case SUB:
adapter.invokeStatic(definition.defobjType.type,DEF_SUB_CALL);
break;
case LSH:
adapter.invokeStatic(definition.defobjType.type,DEF_LSH_CALL);
break;
case USH:
adapter.invokeStatic(definition.defobjType.type,DEF_RSH_CALL);
break;
case RSH:
adapter.invokeStatic(definition.defobjType.type,DEF_USH_CALL);
break;
case BWAND:
adapter.invokeStatic(definition.defobjType.type,DEF_AND_CALL);
break;
case XOR:
adapter.invokeStatic(definition.defobjType.type,DEF_XOR_CALL);
break;
case BWOR:
adapter.invokeStatic(definition.defobjType.type,DEF_OR_CALL);
break;
default :
throw new IllegalStateException("Error " + location + ": Illegal tree structure.");
}
}
 else {
switch (operation) {
case MUL:
adapter.math(GeneratorAdapter.MUL,type.type);
break;
case DIV:
adapter.math(GeneratorAdapter.DIV,type.type);
break;
case REM:
adapter.math(GeneratorAdapter.REM,type.type);
break;
case ADD:
adapter.math(GeneratorAdapter.ADD,type.type);
break;
case SUB:
adapter.math(GeneratorAdapter.SUB,type.type);
break;
case LSH:
adapter.math(GeneratorAdapter.SHL,type.type);
break;
case USH:
adapter.math(GeneratorAdapter.USHR,type.type);
break;
case RSH:
adapter.math(GeneratorAdapter.SHR,type.type);
break;
case BWAND:
adapter.math(GeneratorAdapter.AND,type.type);
break;
case XOR:
adapter.math(GeneratorAdapter.XOR,type.type);
break;
case BWOR:
adapter.math(GeneratorAdapter.OR,type.type);
break;
default :
throw new IllegalStateException("Error " + location + ": Illegal tree structure.");
}
}
}
}
