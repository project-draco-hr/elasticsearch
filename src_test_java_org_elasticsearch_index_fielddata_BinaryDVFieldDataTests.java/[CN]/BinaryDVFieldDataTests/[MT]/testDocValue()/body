{
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("test").startObject("properties").startObject("field").field("type","binary").startObject("fielddata").field("format","doc_values").endObject().endObject().endObject().endObject().endObject().string();
  final DocumentMapper mapper=mapperService.documentMapperParser().parse(mapping);
  ObjectArrayList<byte[]> bytesList1=new ObjectArrayList<>(2);
  bytesList1.add(randomBytes());
  bytesList1.add(randomBytes());
  XContentBuilder doc=XContentFactory.jsonBuilder().startObject().startArray("field").value(bytesList1.get(0)).value(bytesList1.get(1)).endArray().endObject();
  ParsedDocument d=mapper.parse("test","1",doc.bytes());
  writer.addDocument(d.rootDoc());
  byte[] bytes1=randomBytes();
  doc=XContentFactory.jsonBuilder().startObject().field("field",bytes1).endObject();
  d=mapper.parse("test","2",doc.bytes());
  writer.addDocument(d.rootDoc());
  doc=XContentFactory.jsonBuilder().startObject().endObject();
  d=mapper.parse("test","3",doc.bytes());
  writer.addDocument(d.rootDoc());
  ObjectArrayList<byte[]> bytesList2=new ObjectArrayList<>(2);
  bytesList2.add(randomBytes());
  bytesList2.add(randomBytes());
  doc=XContentFactory.jsonBuilder().startObject().startArray("field").value(bytesList2.get(0)).value(bytesList2.get(1)).value(bytesList2.get(0)).endArray().endObject();
  d=mapper.parse("test","4",doc.bytes());
  writer.addDocument(d.rootDoc());
  AtomicReaderContext reader=refreshReader();
  IndexFieldData indexFieldData=getForField("field");
  AtomicFieldData fieldData=indexFieldData.load(reader);
  BytesValues bytesValues=fieldData.getBytesValues();
  CollectionUtils.sortAndDedup(bytesList1);
  assertThat(bytesValues.setDocument(0),equalTo(2));
  assertThat(bytesValues.nextValue(),equalTo(new BytesRef(bytesList1.get(0))));
  assertThat(bytesValues.nextValue(),equalTo(new BytesRef(bytesList1.get(1))));
  assertThat(bytesValues.setDocument(1),equalTo(1));
  assertThat(bytesValues.nextValue(),equalTo(new BytesRef(bytes1)));
  assertThat(bytesValues.setDocument(2),equalTo(0));
  CollectionUtils.sortAndDedup(bytesList2);
  assertThat(bytesValues.setDocument(3),equalTo(2));
  assertThat(bytesValues.nextValue(),equalTo(new BytesRef(bytesList2.get(0))));
  assertThat(bytesValues.nextValue(),equalTo(new BytesRef(bytesList2.get(1))));
}
