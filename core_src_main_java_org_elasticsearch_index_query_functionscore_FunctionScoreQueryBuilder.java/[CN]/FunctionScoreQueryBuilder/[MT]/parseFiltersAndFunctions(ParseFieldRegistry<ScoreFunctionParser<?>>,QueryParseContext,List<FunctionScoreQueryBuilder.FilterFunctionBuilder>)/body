{
  String currentFieldName=null;
  XContentParser.Token token;
  XContentParser parser=parseContext.parser();
  while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
    QueryBuilder filter=null;
    ScoreFunctionBuilder<?> scoreFunction=null;
    Float functionWeight=null;
    if (token != XContentParser.Token.START_OBJECT) {
      throw new ParsingException(parser.getTokenLocation(),"failed to parse [{}]. malformed query, expected a [{}] while parsing functions but got a [{}] instead",XContentParser.Token.START_OBJECT,token,NAME);
    }
 else {
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          currentFieldName=parser.currentName();
        }
 else         if (token == XContentParser.Token.START_OBJECT) {
          if (parseContext.getParseFieldMatcher().match(currentFieldName,FILTER_FIELD)) {
            filter=parseContext.parseInnerQueryBuilder();
          }
 else {
            if (scoreFunction != null) {
              throw new ParsingException(parser.getTokenLocation(),"failed to parse function_score functions. already found [{}], now encountering [{}].",scoreFunction.getName(),currentFieldName);
            }
            scoreFunction=scoreFunctionsRegistry.lookup(currentFieldName,parseContext.getParseFieldMatcher(),parser.getTokenLocation()).fromXContent(parseContext);
          }
        }
 else         if (token.isValue()) {
          if (parseContext.getParseFieldMatcher().match(currentFieldName,WEIGHT_FIELD)) {
            functionWeight=parser.floatValue();
          }
 else {
            throw new ParsingException(parser.getTokenLocation(),"failed to parse [{}] query. field [{}] is not supported",NAME,currentFieldName);
          }
        }
      }
      if (functionWeight != null) {
        if (scoreFunction == null) {
          scoreFunction=new WeightBuilder().setWeight(functionWeight);
        }
 else {
          scoreFunction.setWeight(functionWeight);
        }
      }
    }
    if (filter == null) {
      filter=new MatchAllQueryBuilder();
    }
    if (scoreFunction == null) {
      throw new ParsingException(parser.getTokenLocation(),"failed to parse [{}] query. an entry in functions list is missing a function.",NAME);
    }
    filterFunctionBuilders.add(new FunctionScoreQueryBuilder.FilterFunctionBuilder(filter,scoreFunction));
  }
  return currentFieldName;
}
