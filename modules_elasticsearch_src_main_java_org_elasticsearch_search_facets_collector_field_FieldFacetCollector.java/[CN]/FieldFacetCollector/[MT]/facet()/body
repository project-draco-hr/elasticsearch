{
  if (facets.isEmpty()) {
    pushFacets(facets);
    return new InternalMultiCountFacet<String>(name,MultiCountFacet.ValueType.STRING,MultiCountFacet.ComparatorType.COUNT,size,ImmutableList.<MultiCountFacet.Entry<String>>of());
  }
 else {
    BoundedTreeSet<MultiCountFacet.Entry<String>> ordered=new BoundedTreeSet<MultiCountFacet.Entry<String>>(MultiCountFacet.ComparatorType.COUNT.comparator(),size);
    for (TObjectIntIterator<String> it=facets.iterator(); it.hasNext(); ) {
      it.advance();
      ordered.add(new MultiCountFacet.Entry<String>(it.key(),it.value()));
    }
    pushFacets(facets);
    return new InternalMultiCountFacet<String>(name,MultiCountFacet.ValueType.STRING,MultiCountFacet.ComparatorType.COUNT,size,ordered);
  }
}
