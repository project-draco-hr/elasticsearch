{
  Builder builder=new Builder(parserContext.mapperService().fullName(NAME),parserContext.mapperService().getIndexSettings().getSettings());
  boolean defaultSet=false;
  Boolean ignoreMissing=null;
  for (Iterator<Map.Entry<String,Object>> iterator=node.entrySet().iterator(); iterator.hasNext(); ) {
    Map.Entry<String,Object> entry=iterator.next();
    String fieldName=Strings.toUnderscoreCase(entry.getKey());
    Object fieldNode=entry.getValue();
    if (fieldName.equals("enabled")) {
      EnabledAttributeMapper enabledState=lenientNodeBooleanValue(fieldNode) ? EnabledAttributeMapper.ENABLED : EnabledAttributeMapper.DISABLED;
      builder.enabled(enabledState);
      iterator.remove();
    }
 else     if (fieldName.equals("format")) {
      builder.dateTimeFormatter(parseDateTimeFormatter(fieldNode.toString()));
      iterator.remove();
    }
 else     if (fieldName.equals("default")) {
      if (fieldNode == null) {
        throw new TimestampParsingException("default timestamp can not be set to null");
      }
 else {
        builder.defaultTimestamp(fieldNode.toString());
        defaultSet=true;
      }
      iterator.remove();
    }
 else     if (fieldName.equals("ignore_missing")) {
      ignoreMissing=lenientNodeBooleanValue(fieldNode);
      builder.ignoreMissing(ignoreMissing);
      iterator.remove();
    }
  }
  if (defaultSet && (ignoreMissing != null && ignoreMissing == false)) {
    throw new TimestampParsingException("default timestamp can not be set with ignore_missing set to false");
  }
  return builder;
}
