{
  clusterService.submitStateUpdateTask("gateway (recovered meta-data)",new ProcessedClusterStateUpdateTask(){
    @Override public ClusterState execute(    ClusterState currentState){
      MetaData.Builder metaDataBuilder=newMetaDataBuilder().metaData(currentState.metaData()).maxNumberOfShardsPerNode(fMetaData.maxNumberOfShardsPerNode());
      metaDataBuilder.markAsRecoveredFromGateway();
      ClusterBlocks.Builder blocks=ClusterBlocks.builder().blocks(currentState.blocks()).removeGlobalBlock(NOT_RECOVERED_FROM_GATEWAY_BLOCK);
      return newClusterStateBuilder().state(currentState).metaData(metaDataBuilder).blocks(blocks).build();
    }
    @Override public void clusterStateProcessed(    ClusterState clusterState){
      for (      final IndexMetaData indexMetaData : fMetaData) {
        threadPool.execute(new Runnable(){
          @Override public void run(){
            try {
              metaDataService.createIndex("gateway",indexMetaData.index(),indexMetaData.settings(),indexMetaData.mappings(),timeValueMillis(initialStateTimeout.millis() - 1000));
            }
 catch (            Exception e) {
              logger.error("failed to create index [" + indexMetaData.index() + "]",e);
            }
 finally {
              latch.countDown();
            }
          }
        }
);
      }
    }
  }
);
}
