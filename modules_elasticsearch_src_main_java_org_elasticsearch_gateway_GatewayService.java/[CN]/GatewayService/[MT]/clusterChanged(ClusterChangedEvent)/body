{
  if (!lifecycle.started()) {
    return;
  }
  if (event.localNodeMaster()) {
    if (event.state().blocks().hasGlobalBlock(STATE_NOT_RECOVERED_BLOCK)) {
      ClusterState clusterState=event.state();
      DiscoveryNodes nodes=clusterState.nodes();
      if (recoverAfterNodes != -1 && (nodes.masterAndDataNodes().size()) < recoverAfterNodes) {
        logger.debug("not recovering from gateway, nodes_size (data+master) [" + nodes.masterAndDataNodes().size() + "] < recover_after_nodes ["+ recoverAfterNodes+ "]");
      }
 else       if (recoverAfterDataNodes != -1 && nodes.dataNodes().size() < recoverAfterDataNodes) {
        logger.debug("not recovering from gateway, nodes_size (data) [" + nodes.dataNodes().size() + "] < recover_after_data_nodes ["+ recoverAfterDataNodes+ "]");
      }
 else       if (recoverAfterMasterNodes != -1 && nodes.masterNodes().size() < recoverAfterMasterNodes) {
        logger.debug("not recovering from gateway, nodes_size (master) [" + nodes.masterNodes().size() + "] < recover_after_master_nodes ["+ recoverAfterMasterNodes+ "]");
      }
 else {
        boolean ignoreTimeout;
        if (expectedNodes == -1 && expectedMasterNodes == -1 && expectedDataNodes == -1) {
          ignoreTimeout=false;
        }
 else {
          ignoreTimeout=true;
          if (expectedNodes != -1 && (nodes.masterAndDataNodes().size() < expectedNodes)) {
            ignoreTimeout=false;
          }
          if (expectedMasterNodes != -1 && (nodes.masterNodes().size() < expectedMasterNodes)) {
            ignoreTimeout=false;
          }
          if (expectedDataNodes != -1 && (nodes.dataNodes().size() < expectedDataNodes)) {
            ignoreTimeout=false;
          }
        }
        final boolean fIgnoreTimeout=ignoreTimeout;
        threadPool.cached().execute(new Runnable(){
          @Override public void run(){
            performStateRecovery(null,fIgnoreTimeout);
          }
        }
);
      }
    }
  }
}
