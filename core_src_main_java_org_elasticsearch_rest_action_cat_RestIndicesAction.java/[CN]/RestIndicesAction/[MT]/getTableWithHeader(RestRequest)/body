{
  Table table=new Table();
  table.startHeaders();
  table.addCell("health","alias:h;desc:current health status");
  table.addCell("status","alias:s;desc:open/close status");
  table.addCell("index","alias:i,idx;desc:index name");
  table.addCell("pri","alias:p,shards.primary,shardsPrimary;text-align:right;desc:number of primary shards");
  table.addCell("rep","alias:r,shards.replica,shardsReplica;text-align:right;desc:number of replica shards");
  table.addCell("docs.count","alias:dc,docsCount;text-align:right;desc:available docs");
  table.addCell("docs.deleted","alias:dd,docsDeleted;text-align:right;desc:deleted docs");
  table.addCell("store.size","sibling:pri;alias:ss,storeSize;text-align:right;desc:store size of primaries & replicas");
  table.addCell("pri.store.size","text-align:right;desc:store size of primaries");
  table.addCell("completion.size","sibling:pri;alias:cs,completionSize;default:false;text-align:right;desc:size of completion");
  table.addCell("pri.completion.size","default:false;text-align:right;desc:size of completion");
  table.addCell("fielddata.memory_size","sibling:pri;alias:fm,fielddataMemory;default:false;text-align:right;desc:used fielddata cache");
  table.addCell("pri.fielddata.memory_size","default:false;text-align:right;desc:used fielddata cache");
  table.addCell("fielddata.evictions","sibling:pri;alias:fe,fielddataEvictions;default:false;text-align:right;desc:fielddata evictions");
  table.addCell("pri.fielddata.evictions","default:false;text-align:right;desc:fielddata evictions");
  table.addCell("filter_cache.memory_size","sibling:pri;alias:fcm,filterCacheMemory;default:false;text-align:right;desc:used filter cache");
  table.addCell("pri.filter_cache.memory_size","default:false;text-align:right;desc:used filter cache");
  table.addCell("filter_cache.evictions","sibling:pri;alias:fce,filterCacheEvictions;default:false;text-align:right;desc:filter cache evictions");
  table.addCell("pri.filter_cache.evictions","default:false;text-align:right;desc:filter cache evictions");
  table.addCell("query_cache.memory_size","sibling:pri;alias:qcm,queryCacheMemory;default:false;text-align:right;desc:used query cache");
  table.addCell("pri.query_cache.memory_size","default:false;text-align:right;desc:used query cache");
  table.addCell("query_cache.evictions","sibling:pri;alias:qce,queryCacheEvictions;default:false;text-align:right;desc:query cache evictions");
  table.addCell("pri.query_cache.evictions","default:false;text-align:right;desc:query cache evictions");
  table.addCell("query_cache.hit_count","sibling:pri;alias:qchc,queryCacheHitCount;default:false;text-align:right;desc:query cache hit count");
  table.addCell("pri.query_cache.hit_count","default:false;text-align:right;desc:query cache hit count");
  table.addCell("query_cache.miss_count","sibling:pri;alias:qcmc,queryCacheMissCount;default:false;text-align:right;desc:query cache miss count");
  table.addCell("pri.query_cache.miss_count","default:false;text-align:right;desc:query cache miss count");
  table.addCell("flush.total","sibling:pri;alias:ft,flushTotal;default:false;text-align:right;desc:number of flushes");
  table.addCell("pri.flush.total","default:false;text-align:right;desc:number of flushes");
  table.addCell("flush.total_time","sibling:pri;alias:ftt,flushTotalTime;default:false;text-align:right;desc:time spent in flush");
  table.addCell("pri.flush.total_time","default:false;text-align:right;desc:time spent in flush");
  table.addCell("get.current","sibling:pri;alias:gc,getCurrent;default:false;text-align:right;desc:number of current get ops");
  table.addCell("pri.get.current","default:false;text-align:right;desc:number of current get ops");
  table.addCell("get.time","sibling:pri;alias:gti,getTime;default:false;text-align:right;desc:time spent in get");
  table.addCell("pri.get.time","default:false;text-align:right;desc:time spent in get");
  table.addCell("get.total","sibling:pri;alias:gto,getTotal;default:false;text-align:right;desc:number of get ops");
  table.addCell("pri.get.total","default:false;text-align:right;desc:number of get ops");
  table.addCell("get.exists_time","sibling:pri;alias:geti,getExistsTime;default:false;text-align:right;desc:time spent in successful gets");
  table.addCell("pri.get.exists_time","default:false;text-align:right;desc:time spent in successful gets");
  table.addCell("get.exists_total","sibling:pri;alias:geto,getExistsTotal;default:false;text-align:right;desc:number of successful gets");
  table.addCell("pri.get.exists_total","default:false;text-align:right;desc:number of successful gets");
  table.addCell("get.missing_time","sibling:pri;alias:gmti,getMissingTime;default:false;text-align:right;desc:time spent in failed gets");
  table.addCell("pri.get.missing_time","default:false;text-align:right;desc:time spent in failed gets");
  table.addCell("get.missing_total","sibling:pri;alias:gmto,getMissingTotal;default:false;text-align:right;desc:number of failed gets");
  table.addCell("pri.get.missing_total","default:false;text-align:right;desc:number of failed gets");
  table.addCell("indexing.delete_current","sibling:pri;alias:idc,indexingDeleteCurrent;default:false;text-align:right;desc:number of current deletions");
  table.addCell("pri.indexing.delete_current","default:false;text-align:right;desc:number of current deletions");
  table.addCell("indexing.delete_time","sibling:pri;alias:idti,indexingDeleteTime;default:false;text-align:right;desc:time spent in deletions");
  table.addCell("pri.indexing.delete_time","default:false;text-align:right;desc:time spent in deletions");
  table.addCell("indexing.delete_total","sibling:pri;alias:idto,indexingDeleteTotal;default:false;text-align:right;desc:number of delete ops");
  table.addCell("pri.indexing.delete_total","default:false;text-align:right;desc:number of delete ops");
  table.addCell("indexing.index_current","sibling:pri;alias:iic,indexingIndexCurrent;default:false;text-align:right;desc:number of current indexing ops");
  table.addCell("pri.indexing.index_current","default:false;text-align:right;desc:number of current indexing ops");
  table.addCell("indexing.index_time","sibling:pri;alias:iiti,indexingIndexTime;default:false;text-align:right;desc:time spent in indexing");
  table.addCell("pri.indexing.index_time","default:false;text-align:right;desc:time spent in indexing");
  table.addCell("indexing.index_total","sibling:pri;alias:iito,indexingIndexTotal;default:false;text-align:right;desc:number of indexing ops");
  table.addCell("pri.indexing.index_total","default:false;text-align:right;desc:number of indexing ops");
  table.addCell("merges.current","sibling:pri;alias:mc,mergesCurrent;default:false;text-align:right;desc:number of current merges");
  table.addCell("pri.merges.current","default:false;text-align:right;desc:number of current merges");
  table.addCell("merges.current_docs","sibling:pri;alias:mcd,mergesCurrentDocs;default:false;text-align:right;desc:number of current merging docs");
  table.addCell("pri.merges.current_docs","default:false;text-align:right;desc:number of current merging docs");
  table.addCell("merges.current_size","sibling:pri;alias:mcs,mergesCurrentSize;default:false;text-align:right;desc:size of current merges");
  table.addCell("pri.merges.current_size","default:false;text-align:right;desc:size of current merges");
  table.addCell("merges.total","sibling:pri;alias:mt,mergesTotal;default:false;text-align:right;desc:number of completed merge ops");
  table.addCell("pri.merges.total","default:false;text-align:right;desc:number of completed merge ops");
  table.addCell("merges.total_docs","sibling:pri;alias:mtd,mergesTotalDocs;default:false;text-align:right;desc:docs merged");
  table.addCell("pri.merges.total_docs","default:false;text-align:right;desc:docs merged");
  table.addCell("merges.total_size","sibling:pri;alias:mts,mergesTotalSize;default:false;text-align:right;desc:size merged");
  table.addCell("pri.merges.total_size","default:false;text-align:right;desc:size merged");
  table.addCell("merges.total_time","sibling:pri;alias:mtt,mergesTotalTime;default:false;text-align:right;desc:time spent in merges");
  table.addCell("pri.merges.total_time","default:false;text-align:right;desc:time spent in merges");
  table.addCell("percolate.current","sibling:pri;alias:pc,percolateCurrent;default:false;text-align:right;desc:number of current percolations");
  table.addCell("pri.percolate.current","default:false;text-align:right;desc:number of current percolations");
  table.addCell("percolate.memory_size","sibling:pri;alias:pm,percolateMemory;default:false;text-align:right;desc:memory used by percolations");
  table.addCell("pri.percolate.memory_size","default:false;text-align:right;desc:memory used by percolations");
  table.addCell("percolate.queries","sibling:pri;alias:pq,percolateQueries;default:false;text-align:right;desc:number of registered percolation queries");
  table.addCell("pri.percolate.queries","default:false;text-align:right;desc:number of registered percolation queries");
  table.addCell("percolate.time","sibling:pri;alias:pti,percolateTime;default:false;text-align:right;desc:time spent percolating");
  table.addCell("pri.percolate.time","default:false;text-align:right;desc:time spent percolating");
  table.addCell("percolate.total","sibling:pri;alias:pto,percolateTotal;default:false;text-align:right;desc:total percolations");
  table.addCell("pri.percolate.total","default:false;text-align:right;desc:total percolations");
  table.addCell("refresh.total","sibling:pri;alias:rto,refreshTotal;default:false;text-align:right;desc:total refreshes");
  table.addCell("pri.refresh.total","default:false;text-align:right;desc:total refreshes");
  table.addCell("refresh.time","sibling:pri;alias:rti,refreshTime;default:false;text-align:right;desc:time spent in refreshes");
  table.addCell("pri.refresh.time","default:false;text-align:right;desc:time spent in refreshes");
  table.addCell("search.fetch_current","sibling:pri;alias:sfc,searchFetchCurrent;default:false;text-align:right;desc:current fetch phase ops");
  table.addCell("pri.search.fetch_current","default:false;text-align:right;desc:current fetch phase ops");
  table.addCell("search.fetch_time","sibling:pri;alias:sfti,searchFetchTime;default:false;text-align:right;desc:time spent in fetch phase");
  table.addCell("pri.search.fetch_time","default:false;text-align:right;desc:time spent in fetch phase");
  table.addCell("search.fetch_total","sibling:pri;alias:sfto,searchFetchTotal;default:false;text-align:right;desc:total fetch ops");
  table.addCell("pri.search.fetch_total","default:false;text-align:right;desc:total fetch ops");
  table.addCell("search.open_contexts","sibling:pri;alias:so,searchOpenContexts;default:false;text-align:right;desc:open search contexts");
  table.addCell("pri.search.open_contexts","default:false;text-align:right;desc:open search contexts");
  table.addCell("search.query_current","sibling:pri;alias:sqc,searchQueryCurrent;default:false;text-align:right;desc:current query phase ops");
  table.addCell("pri.search.query_current","default:false;text-align:right;desc:current query phase ops");
  table.addCell("search.query_time","sibling:pri;alias:sqti,searchQueryTime;default:false;text-align:right;desc:time spent in query phase");
  table.addCell("pri.search.query_time","default:false;text-align:right;desc:time spent in query phase");
  table.addCell("search.query_total","sibling:pri;alias:sqto,searchQueryTotal;default:false;text-align:right;desc:total query phase ops");
  table.addCell("pri.search.query_total","default:false;text-align:right;desc:total query phase ops");
  table.addCell("segments.count","sibling:pri;alias:sc,segmentsCount;default:false;text-align:right;desc:number of segments");
  table.addCell("pri.segments.count","default:false;text-align:right;desc:number of segments");
  table.addCell("segments.memory","sibling:pri;alias:sm,segmentsMemory;default:false;text-align:right;desc:memory used by segments");
  table.addCell("pri.segments.memory","default:false;text-align:right;desc:memory used by segments");
  table.addCell("segments.index_writer_memory","sibling:pri;alias:siwm,segmentsIndexWriterMemory;default:false;text-align:right;desc:memory used by index writer");
  table.addCell("pri.segments.index_writer_memory","default:false;text-align:right;desc:memory used by index writer");
  table.addCell("segments.index_writer_max_memory","sibling:pri;alias:siwmx,segmentsIndexWriterMaxMemory;default:false;text-align:right;desc:maximum memory index writer may use before it must write buffered documents to a new segment");
  table.addCell("pri.segments.index_writer_max_memory","default:false;text-align:right;desc:maximum memory index writer may use before it must write buffered documents to a new segment");
  table.addCell("segments.version_map_memory","sibling:pri;alias:svmm,segmentsVersionMapMemory;default:false;text-align:right;desc:memory used by version map");
  table.addCell("pri.segments.version_map_memory","default:false;text-align:right;desc:memory used by version map");
  table.addCell("segments.fixed_bitset_memory","sibling:pri;alias:sfbm,fixedBitsetMemory;default:false;text-align:right;desc:memory used by fixed bit sets for nested object field types and type filters for types referred in _parent fields");
  table.addCell("pri.segments.fixed_bitset_memory","default:false;text-align:right;desc:memory used by fixed bit sets for nested object field types and type filters for types referred in _parent fields");
  table.addCell("warmer.current","sibling:pri;alias:wc,warmerCurrent;default:false;text-align:right;desc:current warmer ops");
  table.addCell("pri.warmer.current","default:false;text-align:right;desc:current warmer ops");
  table.addCell("warmer.total","sibling:pri;alias:wto,warmerTotal;default:false;text-align:right;desc:total warmer ops");
  table.addCell("pri.warmer.total","default:false;text-align:right;desc:total warmer ops");
  table.addCell("warmer.total_time","sibling:pri;alias:wtt,warmerTotalTime;default:false;text-align:right;desc:time spent in warmers");
  table.addCell("pri.warmer.total_time","default:false;text-align:right;desc:time spent in warmers");
  table.addCell("suggest.current","sibling:pri;alias:suc,suggestCurrent;default:false;text-align:right;desc:number of current suggest ops");
  table.addCell("pri.suggest.current","default:false;text-align:right;desc:number of current suggest ops");
  table.addCell("suggest.time","sibling:pri;alias:suti,suggestTime;default:false;text-align:right;desc:time spend in suggest");
  table.addCell("pri.suggest.time","default:false;text-align:right;desc:time spend in suggest");
  table.addCell("suggest.total","sibling:pri;alias:suto,suggestTotal;default:false;text-align:right;desc:number of suggest ops");
  table.addCell("pri.suggest.total","default:false;text-align:right;desc:number of suggest ops");
  table.addCell("memory.total","sibling:pri;alias:tm,memoryTotal;default:false;text-align:right;desc:total used memory");
  table.addCell("pri.memory.total","default:false;text-align:right;desc:total user memory");
  table.endHeaders();
  return table;
}
