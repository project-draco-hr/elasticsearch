{
  logger.info("--> starting 3 nodes");
  cluster().startNode(settingsBuilder().put("gateway.type","local").put("index.number_of_shards",2).put("index.number_of_replicas",2).build());
  cluster().startNode(settingsBuilder().put("gateway.type","local").put("index.number_of_shards",2).put("index.number_of_replicas",2).build());
  cluster().startNode(settingsBuilder().put("gateway.type","local").put("index.number_of_shards",2).put("index.number_of_replicas",2).build());
  logger.info("--> indexing...");
  client().prepareIndex("test","type1","1").setSource(jsonBuilder().startObject().field("field","value1").endObject()).get();
  client().admin().indices().prepareFlush().get();
  client().prepareIndex("test","type1","2").setSource(jsonBuilder().startObject().field("field","value2").endObject()).get();
  assertNoFailures(client().admin().indices().prepareRefresh().get());
  logger.info("--> running cluster_health (wait for the shards to startup)");
  ClusterHealthResponse clusterHealth=client().admin().cluster().health(clusterHealthRequest().waitForGreenStatus().waitForActiveShards(6)).actionGet();
  logger.info("--> done cluster_health, status " + clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.GREEN));
  for (int i=0; i < 10; i++) {
    assertHitCount(client().prepareCount().setQuery(matchAllQuery()).get(),2l);
  }
  logger.info("--> restart all nodes");
  cluster().fullRestart(new RestartCallback(){
    @Override public Settings onNodeStopped(    String nodeName) throws Exception {
      return null;
    }
    @Override public void doAfterNodes(    int numNodes,    final Client activeClient) throws Exception {
      if (numNodes == 1) {
        assertThat(awaitBusy(new Predicate<Object>(){
          @Override public boolean apply(          Object input){
            logger.info("--> running cluster_health (wait for the shards to startup)");
            ClusterHealthResponse clusterHealth=activeClient.admin().cluster().health(clusterHealthRequest().waitForYellowStatus().waitForNodes("2").waitForActiveShards(4)).actionGet();
            logger.info("--> done cluster_health, status " + clusterHealth.getStatus());
            return (!clusterHealth.isTimedOut()) && clusterHealth.getStatus() == ClusterHealthStatus.YELLOW;
          }
        }
,30,TimeUnit.SECONDS),equalTo(true));
        logger.info("--> one node is closed -- index 1 document into the remaining nodes");
        activeClient.prepareIndex("test","type1","3").setSource(jsonBuilder().startObject().field("field","value3").endObject()).get();
        assertNoFailures(activeClient.admin().indices().prepareRefresh().get());
        for (int i=0; i < 10; i++) {
          assertHitCount(activeClient.prepareCount().setQuery(matchAllQuery()).get(),3l);
        }
      }
    }
  }
);
  logger.info("--> all nodes are started back, verifying we got the latest version");
  logger.info("--> running cluster_health (wait for the shards to startup)");
  clusterHealth=client().admin().cluster().health(clusterHealthRequest().waitForGreenStatus().waitForActiveShards(6)).actionGet();
  logger.info("--> done cluster_health, status " + clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.GREEN));
  for (int i=0; i < 10; i++) {
    assertHitCount(client().prepareCount().setQuery(matchAllQuery()).get(),3l);
  }
}
