{
  logger.info("--> starting 3 nodes");
  final String[] nodes=cluster().startNodesAsync(3,settingsBuilder().put("gateway.type","local").build()).get().toArray(new String[0]);
  createIndex("test");
  ensureGreen();
  NumShards test=getNumShards("test");
  logger.info("--> indexing...");
  client().prepareIndex("test","type1","1").setSource(jsonBuilder().startObject().field("field","value1").endObject()).get();
  flush();
  client().prepareIndex("test","type1","2").setSource(jsonBuilder().startObject().field("field","value2").endObject()).get();
  refresh();
  for (int i=0; i < 10; i++) {
    assertHitCount(client().prepareCount().setQuery(matchAllQuery()).get(),2l);
  }
  final String nodeToRemove=nodes[between(0,2)];
  logger.info("--> restarting 1 nodes -- kill 2");
  cluster().fullRestart(new RestartCallback(){
    @Override public Settings onNodeStopped(    String nodeName) throws Exception {
      return settingsBuilder().put("gateway.type","local").build();
    }
    @Override public boolean doRestart(    String nodeName){
      return nodeToRemove.equals(nodeName);
    }
  }
);
  if (randomBoolean()) {
    Thread.sleep(between(1,400));
  }
  ClusterHealthResponse clusterHealth=client().admin().cluster().health(clusterHealthRequest().waitForNodes("1")).actionGet();
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.RED));
  assertThat(awaitBusy(new Predicate<Object>(){
    @Override public boolean apply(    Object input){
      ClusterStateResponse clusterStateResponse=cluster().smartClient().admin().cluster().prepareState().setMasterNodeTimeout("500ms").get();
      return clusterStateResponse.getState() != null && clusterStateResponse.getState().routingTable().index("test") != null;
    }
  }
),equalTo(true));
  final ClusterStateResponse clusterStateResponse=cluster().smartClient().admin().cluster().prepareState().setMasterNodeTimeout("500ms").get();
  assertThat(clusterStateResponse.getState(),notNullValue());
  assertThat(clusterStateResponse.getState().routingTable().index("test"),notNullValue());
  assertThat(clusterStateResponse.getState().routingTable().index("test").allPrimaryShardsActive(),is(false));
  logger.info("--> change the recovery.initial_shards setting, and make sure its recovered");
  client().admin().indices().prepareUpdateSettings("test").setSettings(settingsBuilder().put("recovery.initial_shards",1)).get();
  logger.info("--> running cluster_health (wait for the shards to startup), primaries only since we only have 1 node");
  clusterHealth=client().admin().cluster().health(clusterHealthRequest().waitForYellowStatus().waitForActiveShards(test.numPrimaries)).actionGet();
  logger.info("--> done cluster_health, status " + clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.YELLOW));
  for (int i=0; i < 10; i++) {
    assertHitCount(client().prepareCount().setQuery(matchAllQuery()).get(),2l);
  }
}
