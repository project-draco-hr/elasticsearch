{
  if (!queryBuilder.hasClauses()) {
    assertThat(query,instanceOf(MatchAllDocsQuery.class));
  }
 else {
    List<BooleanClause> clauses=new ArrayList<>();
    clauses.addAll(getBooleanClauses(queryBuilder.must(),BooleanClause.Occur.MUST,context));
    clauses.addAll(getBooleanClauses(queryBuilder.mustNot(),BooleanClause.Occur.MUST_NOT,context));
    clauses.addAll(getBooleanClauses(queryBuilder.should(),BooleanClause.Occur.SHOULD,context));
    clauses.addAll(getBooleanClauses(queryBuilder.filter(),BooleanClause.Occur.FILTER,context));
    if (clauses.isEmpty()) {
      assertThat(query,instanceOf(MatchAllDocsQuery.class));
    }
 else {
      assertThat(query,instanceOf(BooleanQuery.class));
      BooleanQuery booleanQuery=(BooleanQuery)query;
      assertThat(booleanQuery.isCoordDisabled(),equalTo(queryBuilder.disableCoord()));
      if (queryBuilder.adjustPureNegative()) {
        boolean isNegative=true;
        for (        BooleanClause clause : clauses) {
          if (clause.isProhibited() == false) {
            isNegative=false;
            break;
          }
        }
        if (isNegative) {
          clauses.add(new BooleanClause(new MatchAllDocsQuery(),BooleanClause.Occur.MUST));
        }
      }
      assertThat(booleanQuery.clauses().size(),equalTo(clauses.size()));
      Iterator<BooleanClause> clauseIterator=clauses.iterator();
      for (      BooleanClause booleanClause : booleanQuery.getClauses()) {
        assertThat(booleanClause,instanceOf(clauseIterator.next().getClass()));
      }
    }
  }
}
