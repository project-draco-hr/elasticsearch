{
  final int lastShadow=this.last;
  final Data dataShadow=this.data;
  final boolean[] inUse=dataShadow.inUse;
  final byte[] block=dataShadow.block;
  final int[] fmap=dataShadow.fmap;
  final char[] sfmap=dataShadow.sfmap;
  final int[] mtfFreq=dataShadow.mtfFreq;
  final byte[] unseqToSeq=dataShadow.unseqToSeq;
  final byte[] yy=dataShadow.generateMTFValues_yy;
  int nInUseShadow=0;
  for (int i=0; i < 256; i++) {
    if (inUse[i]) {
      unseqToSeq[i]=(byte)nInUseShadow;
      nInUseShadow++;
    }
  }
  this.nInUse=nInUseShadow;
  final int eob=nInUseShadow + 1;
  for (int i=eob; i >= 0; i--) {
    mtfFreq[i]=0;
  }
  for (int i=nInUseShadow; --i >= 0; ) {
    yy[i]=(byte)i;
  }
  int wr=0;
  int zPend=0;
  for (int i=0; i <= lastShadow; i++) {
    final byte ll_i=unseqToSeq[block[fmap[i]] & 0xff];
    byte tmp=yy[0];
    int j=0;
    while (ll_i != tmp) {
      j++;
      byte tmp2=tmp;
      tmp=yy[j];
      yy[j]=tmp2;
    }
    yy[0]=tmp;
    if (j == 0) {
      zPend++;
    }
 else {
      if (zPend > 0) {
        zPend--;
        while (true) {
          if ((zPend & 1) == 0) {
            sfmap[wr]=RUNA;
            wr++;
            mtfFreq[RUNA]++;
          }
 else {
            sfmap[wr]=RUNB;
            wr++;
            mtfFreq[RUNB]++;
          }
          if (zPend >= 2) {
            zPend=(zPend - 2) >> 1;
          }
 else {
            break;
          }
        }
        zPend=0;
      }
      sfmap[wr]=(char)(j + 1);
      wr++;
      mtfFreq[j + 1]++;
    }
  }
  if (zPend > 0) {
    zPend--;
    while (true) {
      if ((zPend & 1) == 0) {
        sfmap[wr]=RUNA;
        wr++;
        mtfFreq[RUNA]++;
      }
 else {
        sfmap[wr]=RUNB;
        wr++;
        mtfFreq[RUNB]++;
      }
      if (zPend >= 2) {
        zPend=(zPend - 2) >> 1;
      }
 else {
        break;
      }
    }
  }
  sfmap[wr]=(char)eob;
  mtfFreq[eob]++;
  this.nMTF=wr + 1;
}
