{
  final int numberOfThreads=scaledRandomIntBetween(1,10);
  final int switchSize=randomIntBetween(1,500);
  final CountDownLatch numberOfMutations=new CountDownLatch(scaledRandomIntBetween(300,1000));
  final UpdateInPlaceMap<String,String> map=UpdateInPlaceMap.of(switchSize);
  final ConcurrentMap<String,String> verifier=ConcurrentCollections.newConcurrentMap();
  Thread[] threads=new Thread[numberOfThreads];
  for (int i=0; i < numberOfThreads; i++) {
    threads[i]=new Thread(new Runnable(){
      @Override public void run(){
        while (numberOfMutations.getCount() > 0) {
          try {
            UpdateInPlaceMap<String,String>.Mutator mutator=map.mutator();
            String str=Strings.randomBase64UUID();
            mutator.put(str,str);
            verifier.put(str,str);
            mutator.close();
            numberOfMutations.countDown();
          }
 catch (          ElasticsearchIllegalStateException e) {
          }
        }
      }
    }
,getClass().getName() + "concurrent_access_i");
    threads[i].setDaemon(true);
  }
  for (  Thread thread : threads) {
    thread.start();
  }
  numberOfMutations.await();
  assertThat(Iterables.toArray(map.values(),String.class),arrayContainingInAnyOrder(Iterables.toArray(verifier.values(),String.class)));
}
