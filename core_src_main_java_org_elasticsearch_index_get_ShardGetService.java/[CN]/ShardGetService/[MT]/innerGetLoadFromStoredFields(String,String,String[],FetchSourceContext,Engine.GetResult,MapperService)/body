{
  Map<String,GetField> fields=null;
  BytesReference source=null;
  Versions.DocIdAndVersion docIdAndVersion=get.docIdAndVersion();
  FieldsVisitor fieldVisitor=buildFieldsVisitors(gFields,fetchSourceContext);
  if (fieldVisitor != null) {
    try {
      docIdAndVersion.context.reader().document(docIdAndVersion.docId,fieldVisitor);
    }
 catch (    IOException e) {
      throw new ElasticsearchException("Failed to get type [" + type + "] and id ["+ id+ "]",e);
    }
    source=fieldVisitor.source();
    if (!fieldVisitor.fields().isEmpty()) {
      fieldVisitor.postProcess(mapperService);
      fields=new HashMap<>(fieldVisitor.fields().size());
      for (      Map.Entry<String,List<Object>> entry : fieldVisitor.fields().entrySet()) {
        fields.put(entry.getKey(),new GetField(entry.getKey(),entry.getValue()));
      }
    }
  }
  DocumentMapper docMapper=mapperService.documentMapper(type);
  if (docMapper.parentFieldMapper().active()) {
    String parentId=ParentFieldSubFetchPhase.getParentId(docMapper.parentFieldMapper(),docIdAndVersion.context.reader(),docIdAndVersion.docId);
    if (fields == null) {
      fields=new HashMap<>(1);
    }
    fields.put(ParentFieldMapper.NAME,new GetField(ParentFieldMapper.NAME,Collections.singletonList(parentId)));
  }
  if (gFields != null && gFields.length > 0) {
    for (    String field : gFields) {
      FieldMapper fieldMapper=docMapper.mappers().smartNameFieldMapper(field);
      if (fieldMapper == null) {
        if (docMapper.objectMappers().get(field) != null) {
          throw new IllegalArgumentException("field [" + field + "] isn't a leaf field");
        }
      }
    }
  }
  if (!fetchSourceContext.fetchSource()) {
    source=null;
  }
 else   if (fetchSourceContext.includes().length > 0 || fetchSourceContext.excludes().length > 0) {
    Map<String,Object> sourceAsMap;
    XContentType sourceContentType=null;
    Tuple<XContentType,Map<String,Object>> typeMapTuple=XContentHelper.convertToMap(source,true);
    sourceContentType=typeMapTuple.v1();
    sourceAsMap=typeMapTuple.v2();
    sourceAsMap=XContentMapValues.filter(sourceAsMap,fetchSourceContext.includes(),fetchSourceContext.excludes());
    try {
      source=XContentFactory.contentBuilder(sourceContentType).map(sourceAsMap).bytes();
    }
 catch (    IOException e) {
      throw new ElasticsearchException("Failed to get type [" + type + "] and id ["+ id+ "] with includes/excludes set",e);
    }
  }
  return new GetResult(shardId.getIndexName(),type,id,get.version(),get.exists(),source,fields);
}
