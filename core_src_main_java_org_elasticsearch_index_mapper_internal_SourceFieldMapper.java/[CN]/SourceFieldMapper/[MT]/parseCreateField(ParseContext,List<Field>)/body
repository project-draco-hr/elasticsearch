{
  if (!enabled) {
    return;
  }
  if (!fieldType().stored()) {
    return;
  }
  if (context.flyweight()) {
    return;
  }
  BytesReference source=context.source();
  boolean filtered=(includes != null && includes.length > 0) || (excludes != null && excludes.length > 0);
  if (filtered) {
    Tuple<XContentType,Map<String,Object>> mapTuple=XContentHelper.convertToMap(source,true);
    Map<String,Object> filteredSource=XContentMapValues.filter(mapTuple.v2(),includes,excludes);
    BytesStreamOutput bStream=new BytesStreamOutput();
    XContentType contentType=formatContentType;
    if (contentType == null) {
      contentType=mapTuple.v1();
    }
    XContentBuilder builder=XContentFactory.contentBuilder(contentType,bStream).map(filteredSource);
    builder.close();
    source=bStream.bytes();
  }
 else   if (formatContentType != null) {
    Compressor compressor=CompressorFactory.compressor(source);
    if (compressor != null) {
      InputStream compressedStreamInput=compressor.streamInput(source.streamInput());
      if (compressedStreamInput.markSupported() == false) {
        compressedStreamInput=new BufferedInputStream(compressedStreamInput);
      }
      XContentType contentType=XContentFactory.xContentType(compressedStreamInput);
      if (contentType != formatContentType) {
        BytesStreamOutput bStream=new BytesStreamOutput();
        StreamOutput streamOutput=CompressorFactory.defaultCompressor().streamOutput(bStream);
        XContentBuilder builder=XContentFactory.contentBuilder(formatContentType,streamOutput);
        builder.copyCurrentStructure(XContentFactory.xContent(contentType).createParser(compressedStreamInput));
        builder.close();
        source=bStream.bytes();
        context.source(source);
      }
 else {
        compressedStreamInput.close();
      }
    }
 else {
      XContentType contentType=XContentFactory.xContentType(source);
      if (contentType != formatContentType) {
        BytesStreamOutput bStream=new BytesStreamOutput();
        XContentBuilder builder=XContentFactory.contentBuilder(formatContentType,bStream);
        builder.copyCurrentStructure(XContentFactory.xContent(contentType).createParser(source));
        builder.close();
        source=bStream.bytes();
        context.source(source);
      }
    }
  }
  if (!source.hasArray()) {
    source=source.toBytesArray();
  }
  fields.add(new StoredField(fieldType().names().indexName(),source.array(),source.arrayOffset(),source.length()));
}
