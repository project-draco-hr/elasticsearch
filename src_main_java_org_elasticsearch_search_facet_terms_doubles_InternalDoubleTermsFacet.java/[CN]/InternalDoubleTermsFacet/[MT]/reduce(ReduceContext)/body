{
  List<Facet> facets=context.facets();
  if (facets.size() == 1) {
    return facets.get(0);
  }
  InternalDoubleTermsFacet first=null;
  TDoubleIntHashMap aggregated=context.cacheRecycler().popDoubleIntMap();
  long missing=0;
  long total=0;
  for (  Facet facet : facets) {
    TermsFacet termsFacet=(TermsFacet)facet;
    if (first == null && termsFacet instanceof InternalDoubleTermsFacet) {
      first=(InternalDoubleTermsFacet)termsFacet;
    }
    missing+=termsFacet.getMissingCount();
    total+=termsFacet.getTotalCount();
    for (    Entry entry : termsFacet.getEntries()) {
      aggregated.adjustOrPutValue(((DoubleEntry)entry).term,entry.getCount(),entry.getCount());
    }
  }
  BoundedTreeSet<DoubleEntry> ordered=new BoundedTreeSet<DoubleEntry>(first.comparatorType.comparator(),first.requiredSize);
  for (TDoubleIntIterator it=aggregated.iterator(); it.hasNext(); ) {
    it.advance();
    ordered.add(new DoubleEntry(it.key(),it.value()));
  }
  first.entries=ordered;
  first.missing=missing;
  first.total=total;
  context.cacheRecycler().pushDoubleIntMap(aggregated);
  return first;
}
