{
  AllocationService allocation=createAllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries",10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),"always").build());
  logger.info("--> building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build();
  logger.info("--> adding 2 nodes on same rack and do rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2"))).build();
  clusterState=allocation.reroute(clusterState,"reroute");
  clusterState=allocation.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING));
  clusterState=allocation.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING));
  logger.info("--> verifying all is allocated");
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node1").iterator().next().state(),equalTo(STARTED));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").iterator().next().state(),equalTo(STARTED));
  logger.info("--> adding additional node");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode("node3"))).build();
  clusterState=allocation.reroute(clusterState,"reroute");
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node1").iterator().next().state(),equalTo(STARTED));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").iterator().next().state(),equalTo(STARTED));
  assertThat(clusterState.getRoutingNodes().node("node3").size(),equalTo(0));
  String origPrimaryNodeId=clusterState.routingTable().index("test").shard(0).primaryShard().currentNodeId();
  String origReplicaNodeId=clusterState.routingTable().index("test").shard(0).replicaShards().get(0).currentNodeId();
  logger.info("--> moving primary shard to node3");
  AllocationService.CommandsResult commandsResult=allocation.reroute(clusterState,new AllocationCommands(new MoveAllocationCommand("test",0,clusterState.routingTable().index("test").shard(0).primaryShard().currentNodeId(),"node3")),false,false);
  assertThat(commandsResult.getClusterState(),not(equalTo(clusterState)));
  clusterState=commandsResult.getClusterState();
  assertThat(clusterState.getRoutingNodes().node(origPrimaryNodeId).iterator().next().state(),equalTo(RELOCATING));
  assertThat(clusterState.getRoutingNodes().node("node3").iterator().next().state(),equalTo(INITIALIZING));
  logger.info("--> fail primary shard recovering instance on 'origPrimaryNodeId' being relocated");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node3")).add(newNode(origReplicaNodeId))).build();
  clusterState=allocation.deassociateDeadNodes(clusterState,true,"reroute");
  assertThat(clusterState.getRoutingNodes().node(origReplicaNodeId).iterator().next().state(),equalTo(STARTED));
  assertThat(clusterState.getRoutingNodes().node("node3").iterator().next().state(),equalTo(INITIALIZING));
}
