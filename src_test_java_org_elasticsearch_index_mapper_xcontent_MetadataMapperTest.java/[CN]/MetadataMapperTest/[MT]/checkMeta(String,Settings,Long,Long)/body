{
  DocumentMapperParser mapperParser=new DocumentMapperParser(new Index("test"),settings,new AnalysisService(new Index("test")),null,null,null,null);
  mapperParser.putTypeParser(AttachmentMapper.CONTENT_TYPE,new AttachmentMapper.TypeParser());
  String mapping=copyToStringFromClasspath("/org/elasticsearch/index/mapper/xcontent/test-mapping.json");
  DocumentMapper docMapper=mapperParser.parse(mapping);
  byte[] html=copyToBytesFromClasspath("/org/elasticsearch/index/mapper/xcontent/" + filename);
  BytesReference json=jsonBuilder().startObject().field("_id",1).startObject("file").field("_name",filename).field("content",html).endObject().endObject().bytes();
  ParseContext.Document doc=docMapper.parse(json).rootDoc();
  assertThat(doc.get(docMapper.mappers().smartName("file").mapper().names().indexName()),containsString("World"));
  assertThat(doc.get(docMapper.mappers().smartName("file.name").mapper().names().indexName()),equalTo(filename));
  if (expectedDate == null) {
    assertThat(doc.getField(docMapper.mappers().smartName("file.date").mapper().names().indexName()),nullValue());
  }
 else {
    assertThat(doc.getField(docMapper.mappers().smartName("file.date").mapper().names().indexName()).numericValue().longValue(),is(expectedDate));
  }
  assertThat(doc.get(docMapper.mappers().smartName("file.title").mapper().names().indexName()),equalTo("Hello"));
  assertThat(doc.get(docMapper.mappers().smartName("file.author").mapper().names().indexName()),equalTo("kimchy"));
  assertThat(doc.get(docMapper.mappers().smartName("file.keywords").mapper().names().indexName()),equalTo("elasticsearch,cool,bonsai"));
  assertThat(doc.get(docMapper.mappers().smartName("file.content_type").mapper().names().indexName()),equalTo("text/html; charset=ISO-8859-1"));
  assertThat(doc.getField(docMapper.mappers().smartName("file.content_length").mapper().names().indexName()).numericValue().longValue(),is(expectedLength));
}
