{
  String fieldName=randomAsciiOfLengthBetween(1,10);
  GeoDistanceSortBuilder result=null;
  int id=randomIntBetween(0,2);
switch (id) {
case 0:
    int count=randomIntBetween(1,10);
  String[] geohashes=new String[count];
for (int i=0; i < count; i++) {
  geohashes[i]=RandomGeoGenerator.randomPoint(random()).geohash();
}
result=new GeoDistanceSortBuilder(fieldName,geohashes);
break;
case 1:
GeoPoint pt=RandomGeoGenerator.randomPoint(random());
result=new GeoDistanceSortBuilder(fieldName,pt.getLat(),pt.getLon());
break;
case 2:
result=new GeoDistanceSortBuilder(fieldName,points(new GeoPoint[0]));
break;
default :
throw new IllegalStateException("one of three geo initialisation strategies must be used");
}
if (randomBoolean()) {
result.geoDistance(geoDistance(result.geoDistance()));
}
if (randomBoolean()) {
result.unit(unit(result.unit()));
}
if (randomBoolean()) {
result.order(RandomSortDataGenerator.order(null));
}
if (randomBoolean()) {
result.sortMode(mode(result.sortMode()));
}
if (randomBoolean()) {
result.setNestedFilter(RandomSortDataGenerator.nestedFilter(result.getNestedFilter()));
}
if (randomBoolean()) {
result.setNestedPath(RandomSortDataGenerator.randomAscii(result.getNestedPath()));
}
if (randomBoolean()) {
result.validation(randomFrom(GeoValidationMethod.values()));
}
return result;
}
