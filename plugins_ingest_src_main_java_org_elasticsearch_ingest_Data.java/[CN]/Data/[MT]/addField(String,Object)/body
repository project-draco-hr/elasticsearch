{
  modified=true;
  String[] pathElements=Strings.splitStringToArray(path,'.');
  String writeKey=pathElements[pathElements.length - 1];
  Map<String,Object> inner=document;
  for (int i=0; i < pathElements.length - 1; i++) {
    String pathElement=pathElements[i];
    if (inner.containsKey(pathElement)) {
      Object object=inner.get(pathElement);
      if (object instanceof Map) {
        @SuppressWarnings("unchecked") Map<String,Object> stringObjectMap=(Map<String,Object>)object;
        inner=stringObjectMap;
      }
 else {
        throw new IllegalArgumentException("cannot add field to parent [" + pathElement + "] of type ["+ object.getClass().getName()+ "], ["+ Map.class.getName()+ "] expected instead.");
      }
    }
 else {
      Map<String,Object> newInnerMap=new HashMap<>();
      inner.put(pathElement,newInnerMap);
      inner=newInnerMap;
    }
  }
  inner.put(writeKey,value);
}
