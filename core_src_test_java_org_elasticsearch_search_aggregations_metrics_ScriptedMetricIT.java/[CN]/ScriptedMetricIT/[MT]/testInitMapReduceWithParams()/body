{
  Map<String,Object> varsMap=new HashMap<>();
  varsMap.put("multiplier",1);
  Map<String,Object> params=new HashMap<>();
  params.put("_agg",new ArrayList<>());
  params.put("vars",varsMap);
  Script initScript=new Script("vars.multiplier = 3",ScriptType.INLINE,CustomScriptPlugin.NAME,null);
  Script mapScript=new Script("_agg.add(vars.multiplier)",ScriptType.INLINE,CustomScriptPlugin.NAME,null);
  Script reduceScript=new Script("sum aggs of agg values as a new aggregation",ScriptType.INLINE,CustomScriptPlugin.NAME,null);
  SearchResponse response=client().prepareSearch("idx").setQuery(matchAllQuery()).addAggregation(scriptedMetric("scripted").params(params).initScript(initScript).mapScript(mapScript).reduceScript(reduceScript)).get();
  assertSearchResponse(response);
  assertThat(response.getHits().getTotalHits(),equalTo(numDocs));
  Aggregation aggregation=response.getAggregations().get("scripted");
  assertThat(aggregation,notNullValue());
  assertThat(aggregation,instanceOf(ScriptedMetric.class));
  ScriptedMetric scriptedMetricAggregation=(ScriptedMetric)aggregation;
  assertThat(scriptedMetricAggregation.getName(),equalTo("scripted"));
  assertThat(scriptedMetricAggregation.aggregation(),notNullValue());
  assertThat(scriptedMetricAggregation.aggregation(),instanceOf(ArrayList.class));
  List<?> aggregationList=(List<?>)scriptedMetricAggregation.aggregation();
  assertThat(aggregationList.size(),equalTo(1));
  Object object=aggregationList.get(0);
  assertThat(object,notNullValue());
  assertThat(object,instanceOf(Number.class));
  assertThat(((Number)object).longValue(),equalTo(numDocs * 3));
}
