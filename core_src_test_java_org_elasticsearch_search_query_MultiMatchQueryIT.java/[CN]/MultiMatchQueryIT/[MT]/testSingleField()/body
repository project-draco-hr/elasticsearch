{
  SearchResponse searchResponse=client().prepareSearch("test").setQuery(randomizeType(multiMatchQuery("15","skill"))).get();
  assertNoFailures(searchResponse);
  assertFirstHit(searchResponse,hasId("theone"));
  searchResponse=client().prepareSearch("test").setQuery(randomizeType(multiMatchQuery("15","skill","int-field")).analyzer("category")).get();
  assertNoFailures(searchResponse);
  assertFirstHit(searchResponse,hasId("theone"));
  String[] fields={"full_name","first_name","last_name","last_name_phrase","first_name_phrase","category_phrase","category","missing_field","missing_fields*"};
  String[] query={"marvel","hero","captain","america","15","17","1","5","ultimate","Man","marvel","wolferine","ninja"};
  int numIters=scaledRandomIntBetween(10,100);
  for (int i=0; i < numIters; i++) {
    String field=RandomPicks.randomFrom(random(),fields);
    int numTerms=randomIntBetween(1,query.length);
    StringBuilder builder=new StringBuilder();
    for (int j=0; j < numTerms; j++) {
      builder.append(RandomPicks.randomFrom(random(),query)).append(" ");
    }
    MultiMatchQueryBuilder multiMatchQueryBuilder=randomizeType(multiMatchQuery(builder.toString(),field));
    SearchResponse multiMatchResp=client().prepareSearch("test").addSort("_score",SortOrder.DESC).addSort("_uid",SortOrder.ASC).setQuery(multiMatchQueryBuilder).get();
    MatchQueryBuilder matchQueryBuilder=QueryBuilders.matchQuery(field,builder.toString());
    if (multiMatchQueryBuilder.getType() != null) {
      matchQueryBuilder.type(MatchQuery.Type.valueOf(multiMatchQueryBuilder.getType().matchQueryType().toString()));
    }
    SearchResponse matchResp=client().prepareSearch("test").addSort("_score",SortOrder.DESC).addSort("_uid",SortOrder.ASC).setQuery(matchQueryBuilder).get();
    assertThat("field: " + field + " query: "+ builder.toString(),multiMatchResp.getHits().getTotalHits(),equalTo(matchResp.getHits().getTotalHits()));
    SearchHits hits=multiMatchResp.getHits();
    if (field.startsWith("missing")) {
      assertEquals(0,hits.hits().length);
    }
    for (int j=0; j < hits.hits().length; j++) {
      assertThat(hits.getHits()[j].score(),equalTo(matchResp.getHits().getHits()[j].score()));
      assertThat(hits.getHits()[j].getId(),equalTo(matchResp.getHits().getHits()[j].getId()));
    }
  }
}
