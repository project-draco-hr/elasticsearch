{
  this.shardId=shardId;
  this.optimizeAutoGenerateId=optimizeAutoGenerateId;
  this.threadPool=threadPool;
  this.indexingService=indexingService;
  this.indexSettingsService=indexSettingsService;
  this.warmer=warmer;
  this.store=store;
  this.deletionPolicy=deletionPolicy;
  this.translog=translog;
  this.mergePolicyProvider=mergePolicyProvider;
  this.mergeScheduler=mergeScheduler;
  this.analyzer=analyzer;
  this.similarity=similarity;
  this.codecService=codecService;
  this.failedEngineListener=failedEngineListener;
  Settings indexSettings=indexSettingsService.getSettings();
  this.compoundOnFlush=indexSettings.getAsBoolean(EngineConfig.INDEX_COMPOUND_ON_FLUSH,compoundOnFlush);
  this.indexConcurrency=indexSettings.getAsInt(EngineConfig.INDEX_CONCURRENCY_SETTING,Math.max(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES,(int)(EsExecutors.boundedNumberOfProcessors(indexSettings) * 0.65)));
  codecName=indexSettings.get(EngineConfig.INDEX_CODEC_SETTING,EngineConfig.DEFAULT_CODEC_NAME);
  indexingBufferSize=indexSettings.getAsBytesSize(INDEX_BUFFER_SIZE_SETTING,DEFAUTL_INDEX_BUFFER_SIZE);
  failEngineOnCorruption=indexSettings.getAsBoolean(INDEX_FAIL_ON_CORRUPTION_SETTING,true);
  failOnMergeFailure=indexSettings.getAsBoolean(INDEX_FAIL_ON_MERGE_FAILURE_SETTING,true);
  gcDeletesInMillis=indexSettings.getAsTime(INDEX_GC_DELETES_SETTING,EngineConfig.DEFAULT_GC_DELETES).millis();
}
