{
  final Iterator<Entry<K,V>> iterator=esDelegate.iterator();
  return new Iterator<Entry<K,V>>(){
    Entry<K,V> entry;
    public boolean hasNext(){
      return iterator.hasNext();
    }
    public Entry<K,V> next(){
      entry=iterator.next();
      final Entry<K,V> finalEntry=entry;
      return new ForwardingMapEntry<K,V>(){
        @Override protected Entry<K,V> delegate(){
          return finalEntry;
        }
        @Override public V setValue(        V value){
          checkState(contains(this),"entry no longer in map");
          if (Objects.equal(value,getValue())) {
            return value;
          }
          checkArgument(!containsValue(value),"value already present: %s",value);
          V oldValue=finalEntry.setValue(value);
          checkState(Objects.equal(value,get(getKey())),"entry no longer in map");
          updateInverseMap(getKey(),true,oldValue,value);
          return oldValue;
        }
      }
;
    }
    public void remove(){
      checkState(entry != null);
      V value=entry.getValue();
      iterator.remove();
      removeFromInverseMap(value);
    }
  }
;
}
