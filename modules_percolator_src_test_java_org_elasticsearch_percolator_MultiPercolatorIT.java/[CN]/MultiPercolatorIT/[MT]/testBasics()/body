{
  assertAcked(prepareCreate(INDEX_NAME).addMapping(TYPE_NAME,"query","type=percolator").addMapping("type","field1","type=text"));
  ensureGreen();
  logger.info("--> register a queries");
  client().prepareIndex(INDEX_NAME,TYPE_NAME,"1").setSource(jsonBuilder().startObject().field("query",matchQuery("field1","b")).field("a","b").endObject()).execute().actionGet();
  client().prepareIndex(INDEX_NAME,TYPE_NAME,"2").setSource(jsonBuilder().startObject().field("query",matchQuery("field1","c")).endObject()).execute().actionGet();
  client().prepareIndex(INDEX_NAME,TYPE_NAME,"3").setSource(jsonBuilder().startObject().field("query",boolQuery().must(matchQuery("field1","b")).must(matchQuery("field1","c"))).endObject()).execute().actionGet();
  client().prepareIndex(INDEX_NAME,TYPE_NAME,"4").setSource(jsonBuilder().startObject().field("query",matchAllQuery()).endObject()).execute().actionGet();
  refresh();
  MultiPercolateResponse response=prepareMultiPercolate(client()).add(preparePercolate(client()).setIndices(INDEX_NAME).setDocumentType("type").setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1","b").endObject()))).add(preparePercolate(client()).setIndices(INDEX_NAME).setDocumentType("type").setPercolateDoc(docBuilder().setDoc(yamlBuilder().startObject().field("field1","c").endObject()))).add(preparePercolate(client()).setIndices(INDEX_NAME).setDocumentType("type").setPercolateDoc(docBuilder().setDoc(smileBuilder().startObject().field("field1","b c").endObject()))).add(preparePercolate(client()).setIndices(INDEX_NAME).setDocumentType("type").setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1","d").endObject()))).add(preparePercolate(client()).setIndices(INDEX_NAME).setDocumentType("type").setGetRequest(Requests.getRequest(INDEX_NAME).type("type").id("5"))).execute().actionGet();
  MultiPercolateResponse.Item item=response.getItems()[0];
  assertMatchCount(item.getResponse(),2L);
  assertThat(item.getResponse().getMatches(),arrayWithSize(2));
  assertThat(item.getErrorMessage(),nullValue());
  assertThat(convertFromTextArray(item.getResponse().getMatches(),INDEX_NAME),arrayContainingInAnyOrder("1","4"));
  item=response.getItems()[1];
  assertThat(item.getErrorMessage(),nullValue());
  assertMatchCount(item.getResponse(),2L);
  assertThat(item.getResponse().getMatches(),arrayWithSize(2));
  assertThat(convertFromTextArray(item.getResponse().getMatches(),INDEX_NAME),arrayContainingInAnyOrder("2","4"));
  item=response.getItems()[2];
  assertThat(item.getErrorMessage(),nullValue());
  assertMatchCount(item.getResponse(),4L);
  assertThat(convertFromTextArray(item.getResponse().getMatches(),INDEX_NAME),arrayContainingInAnyOrder("1","2","3","4"));
  item=response.getItems()[3];
  assertThat(item.getErrorMessage(),nullValue());
  assertMatchCount(item.getResponse(),1L);
  assertThat(item.getResponse().getMatches(),arrayWithSize(1));
  assertThat(convertFromTextArray(item.getResponse().getMatches(),INDEX_NAME),arrayContaining("4"));
  item=response.getItems()[4];
  assertThat(item.getResponse(),nullValue());
  assertThat(item.getErrorMessage(),notNullValue());
  assertThat(item.getErrorMessage(),containsString("[" + INDEX_NAME + "/type/5] doesn't exist"));
}
