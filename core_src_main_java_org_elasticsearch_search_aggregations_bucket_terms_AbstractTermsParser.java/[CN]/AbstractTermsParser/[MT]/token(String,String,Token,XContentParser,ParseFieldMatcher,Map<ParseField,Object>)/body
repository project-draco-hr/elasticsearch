{
  if (incExcParser.token(currentFieldName,token,parser,parseFieldMatcher,otherOptions)) {
    return true;
  }
 else   if (token == XContentParser.Token.VALUE_STRING) {
    if (parseFieldMatcher.match(currentFieldName,EXECUTION_HINT_FIELD_NAME)) {
      otherOptions.put(EXECUTION_HINT_FIELD_NAME,parser.text());
      return true;
    }
 else     if (parseFieldMatcher.match(currentFieldName,SubAggCollectionMode.KEY)) {
      otherOptions.put(SubAggCollectionMode.KEY,SubAggCollectionMode.parse(parser.text(),parseFieldMatcher));
      return true;
    }
 else     if (parseFieldMatcher.match(currentFieldName,REQUIRED_SIZE_FIELD_NAME)) {
      otherOptions.put(REQUIRED_SIZE_FIELD_NAME,parser.intValue());
      return true;
    }
 else     if (parseSpecial(aggregationName,parser,parseFieldMatcher,token,currentFieldName,otherOptions)) {
      return true;
    }
  }
 else   if (token == XContentParser.Token.VALUE_NUMBER) {
    if (parseFieldMatcher.match(currentFieldName,REQUIRED_SIZE_FIELD_NAME)) {
      otherOptions.put(REQUIRED_SIZE_FIELD_NAME,parser.intValue());
      return true;
    }
 else     if (parseFieldMatcher.match(currentFieldName,SHARD_SIZE_FIELD_NAME)) {
      otherOptions.put(SHARD_SIZE_FIELD_NAME,parser.intValue());
      return true;
    }
 else     if (parseFieldMatcher.match(currentFieldName,MIN_DOC_COUNT_FIELD_NAME)) {
      otherOptions.put(MIN_DOC_COUNT_FIELD_NAME,parser.longValue());
      return true;
    }
 else     if (parseFieldMatcher.match(currentFieldName,SHARD_MIN_DOC_COUNT_FIELD_NAME)) {
      otherOptions.put(SHARD_MIN_DOC_COUNT_FIELD_NAME,parser.longValue());
      return true;
    }
 else     if (parseSpecial(aggregationName,parser,parseFieldMatcher,token,currentFieldName,otherOptions)) {
      return true;
    }
  }
 else   if (parseSpecial(aggregationName,parser,parseFieldMatcher,token,currentFieldName,otherOptions)) {
    return true;
  }
  return false;
}
