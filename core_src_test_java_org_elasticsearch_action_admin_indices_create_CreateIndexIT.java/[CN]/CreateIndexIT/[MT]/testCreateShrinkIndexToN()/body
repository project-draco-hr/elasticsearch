{
  int[][] possibleShardSplits=new int[][]{{8,4,2},{9,3,1},{4,2,1},{15,5,1}};
  int[] shardSplits=randomFrom(possibleShardSplits);
  assertEquals(shardSplits[0],(shardSplits[0] / shardSplits[1]) * shardSplits[1]);
  assertEquals(shardSplits[1],(shardSplits[1] / shardSplits[2]) * shardSplits[2]);
  internalCluster().ensureAtLeastNumDataNodes(2);
  prepareCreate("source").setSettings(Settings.builder().put(indexSettings()).put("number_of_shards",shardSplits[0])).get();
  for (int i=0; i < 20; i++) {
    client().prepareIndex("source","t1",Integer.toString(i)).setSource("{\"foo\" : \"bar\", \"i\" : " + i + "}").get();
  }
  ImmutableOpenMap<String,DiscoveryNode> dataNodes=client().admin().cluster().prepareState().get().getState().nodes().getDataNodes();
  assertTrue("at least 2 nodes but was: " + dataNodes.size(),dataNodes.size() >= 2);
  DiscoveryNode[] discoveryNodes=dataNodes.values().toArray(DiscoveryNode.class);
  String mergeNode=discoveryNodes[0].getName();
  ensureGreen();
  client().admin().indices().prepareUpdateSettings("source").setSettings(Settings.builder().put("index.routing.allocation.require._name",mergeNode).put("index.blocks.write",true)).get();
  ensureGreen();
  assertAcked(client().admin().indices().prepareShrinkIndex("source","first_shrink").setSettings(Settings.builder().put("index.number_of_replicas",0).put("index.number_of_shards",shardSplits[1]).build()).get());
  ensureGreen();
  assertHitCount(client().prepareSearch("first_shrink").setSize(100).setQuery(new TermsQueryBuilder("foo","bar")).get(),20);
  for (int i=0; i < 20; i++) {
    client().prepareIndex("first_shrink","t1",Integer.toString(i)).setSource("{\"foo\" : \"bar\", \"i\" : " + i + "}").get();
  }
  flushAndRefresh();
  assertHitCount(client().prepareSearch("first_shrink").setSize(100).setQuery(new TermsQueryBuilder("foo","bar")).get(),20);
  assertHitCount(client().prepareSearch("source").setSize(100).setQuery(new TermsQueryBuilder("foo","bar")).get(),20);
  client().admin().indices().prepareUpdateSettings("first_shrink").setSettings(Settings.builder().put("index.routing.allocation.require._name",mergeNode).put("index.blocks.write",true)).get();
  ensureGreen();
  assertAcked(client().admin().indices().prepareShrinkIndex("first_shrink","second_shrink").setSettings(Settings.builder().put("index.number_of_replicas",0).put("index.number_of_shards",shardSplits[2]).build()).get());
  ensureGreen();
  assertHitCount(client().prepareSearch("second_shrink").setSize(100).setQuery(new TermsQueryBuilder("foo","bar")).get(),20);
  client().admin().indices().prepareUpdateSettings("second_shrink").setSettings(Settings.builder().putNull("index.routing.allocation.include._id").put("index.number_of_replicas",1)).get();
  ensureGreen();
  assertHitCount(client().prepareSearch("second_shrink").setSize(100).setQuery(new TermsQueryBuilder("foo","bar")).get(),20);
  for (int i=0; i < 20; i++) {
    client().prepareIndex("second_shrink","t1",Integer.toString(i)).setSource("{\"foo\" : \"bar\", \"i\" : " + i + "}").get();
  }
  flushAndRefresh();
  assertHitCount(client().prepareSearch("second_shrink").setSize(100).setQuery(new TermsQueryBuilder("foo","bar")).get(),20);
  assertHitCount(client().prepareSearch("first_shrink").setSize(100).setQuery(new TermsQueryBuilder("foo","bar")).get(),20);
  assertHitCount(client().prepareSearch("source").setSize(100).setQuery(new TermsQueryBuilder("foo","bar")).get(),20);
}
