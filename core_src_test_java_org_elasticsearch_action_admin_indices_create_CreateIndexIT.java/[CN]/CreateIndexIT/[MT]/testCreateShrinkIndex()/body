{
  internalCluster().ensureAtLeastNumDataNodes(2);
  prepareCreate("source").setSettings(Settings.builder().put(indexSettings()).put("number_of_shards",randomIntBetween(2,7))).get();
  for (int i=0; i < 20; i++) {
    client().prepareIndex("source",randomFrom("t1","t2","t3")).setSource("{\"foo\" : \"bar\", \"i\" : " + i + "}").get();
  }
  ImmutableOpenMap<String,DiscoveryNode> dataNodes=client().admin().cluster().prepareState().get().getState().nodes().getDataNodes();
  assertTrue("at least 2 nodes but was: " + dataNodes.size(),dataNodes.size() >= 2);
  DiscoveryNode[] discoveryNodes=dataNodes.values().toArray(DiscoveryNode.class);
  String mergeNode=discoveryNodes[0].getName();
  ensureGreen();
  client().admin().indices().prepareUpdateSettings("source").setSettings(Settings.builder().put("index.routing.allocation.require._name",mergeNode).put("index.blocks.write",true)).get();
  ensureGreen();
  assertAcked(client().admin().indices().prepareShrinkIndex("source","target").setSettings(Settings.builder().put("index.number_of_replicas",0).build()).get());
  ensureGreen();
  assertHitCount(client().prepareSearch("target").setSize(100).setQuery(new TermsQueryBuilder("foo","bar")).get(),20);
  client().admin().indices().prepareUpdateSettings("target").setSettings(Settings.builder().put("index.number_of_replicas",1)).get();
  ensureGreen();
  assertHitCount(client().prepareSearch("target").setSize(100).setQuery(new TermsQueryBuilder("foo","bar")).get(),20);
  for (int i=20; i < 40; i++) {
    client().prepareIndex("target",randomFrom("t1","t2","t3")).setSource("{\"foo\" : \"bar\", \"i\" : " + i + "}").get();
  }
  flushAndRefresh();
  assertHitCount(client().prepareSearch("target").setSize(100).setQuery(new TermsQueryBuilder("foo","bar")).get(),40);
  assertHitCount(client().prepareSearch("source").setSize(100).setQuery(new TermsQueryBuilder("foo","bar")).get(),20);
}
