{
  internalCluster().startNode(ImmutableSettings.builder().put("http.enabled","false").put("discovery.type","local").put("indices.memory.interval","1s"));
  client().admin().indices().prepareCreate("test1").setSettings(ImmutableSettings.builder().put("number_of_shards",1).put("number_of_replicas",0)).get();
  ensureGreen();
  final InternalIndexShard shard1=(InternalIndexShard)internalCluster().getInstance(IndicesService.class).indexService("test1").shard(0);
  client().admin().indices().prepareCreate("test2").setSettings(ImmutableSettings.builder().put("number_of_shards",1).put("number_of_replicas",0)).get();
  ensureGreen();
  final InternalIndexShard shard2=(InternalIndexShard)internalCluster().getInstance(IndicesService.class).indexService("test2").shard(0);
  final long expectedShardSize=internalCluster().getInstance(IndexingMemoryController.class).indexingBufferSize().bytes() / 2;
  boolean success=awaitBusy(new Predicate<Object>(){
    @Override public boolean apply(    Object input){
      return ((InternalEngine)shard1.engine()).indexingBufferSize().bytes() <= expectedShardSize && ((InternalEngine)shard2.engine()).indexingBufferSize().bytes() <= expectedShardSize;
    }
  }
);
  if (!success) {
    fail("failed to update shard indexing buffer size. expected [" + expectedShardSize + "] shard1 ["+ ((InternalEngine)shard1.engine()).indexingBufferSize().bytes()+ "] shard2  ["+ ((InternalEngine)shard1.engine()).indexingBufferSize().bytes()+ "]");
  }
}
