{
  client().admin().indices().prepareCreate("test").setSettings(ImmutableSettings.builder().put("index.number_of_shards",1).put("index.number_of_replicas",0)).execute().actionGet();
  client().admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();
  IndicesService indicesService=internalCluster().getInstance(IndicesService.class);
  IndexService indexService=indicesService.indexServiceSafe("test");
  Injector indexInjector=indexService.injector();
  IndexShard shard=indexService.shardSafe(0);
  Injector shardInjector=indexService.shardInjectorSafe(0);
  performCommonOperations();
  List<WeakReference> indexReferences=new ArrayList<>();
  List<WeakReference> shardReferences=new ArrayList<>();
  indexReferences.add(new WeakReference(indexService));
  indexReferences.add(new WeakReference(indexInjector));
  indexReferences.add(new WeakReference(indexService.mapperService()));
  for (  DocumentMapper documentMapper : indexService.mapperService().docMappers(true)) {
    indexReferences.add(new WeakReference(documentMapper));
  }
  indexReferences.add(new WeakReference(indexService.aliasesService()));
  indexReferences.add(new WeakReference(indexService.analysisService()));
  indexReferences.add(new WeakReference(indexService.fieldData()));
  indexReferences.add(new WeakReference(indexService.queryParserService()));
  shardReferences.add(new WeakReference(shard));
  shardReferences.add(new WeakReference(shardInjector));
  indexService=null;
  indexInjector=null;
  shard=null;
  shardInjector=null;
  client().admin().indices().prepareDelete().execute().actionGet();
  for (int i=0; i < 100; i++) {
    System.gc();
    int indexNotCleared=0;
    for (    WeakReference indexReference : indexReferences) {
      if (indexReference.get() != null) {
        indexNotCleared++;
      }
    }
    int shardNotCleared=0;
    for (    WeakReference shardReference : shardReferences) {
      if (shardReference.get() != null) {
        shardNotCleared++;
      }
    }
    logger.info("round {}, indices {}/{}, shards {}/{}",i,indexNotCleared,indexReferences.size(),shardNotCleared,shardReferences.size());
    if (indexNotCleared == 0 && shardNotCleared == 0) {
      break;
    }
  }
  for (  WeakReference indexReference : indexReferences) {
    assertThat("dangling index reference: " + indexReference.get(),indexReference.get(),nullValue());
  }
  for (  WeakReference shardReference : shardReferences) {
    assertThat("dangling shard reference: " + shardReference.get(),shardReference.get(),nullValue());
  }
}
