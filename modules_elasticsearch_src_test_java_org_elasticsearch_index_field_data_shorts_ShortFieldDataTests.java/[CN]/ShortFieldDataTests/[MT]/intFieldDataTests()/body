{
  Directory dir=new RAMDirectory();
  IndexWriter indexWriter=new IndexWriter(dir,Lucene.STANDARD_ANALYZER,true,IndexWriter.MaxFieldLength.UNLIMITED);
  indexWriter.addDocument(doc().add(new NumericField("svalue").setIntValue(4)).add(new NumericField("mvalue").setIntValue(104)).build());
  indexWriter.addDocument(doc().add(new NumericField("svalue").setIntValue(3)).add(new NumericField("mvalue").setIntValue(104)).add(new NumericField("mvalue").setIntValue(105)).build());
  indexWriter.addDocument(doc().add(new NumericField("svalue").setIntValue(7)).build());
  indexWriter.addDocument(doc().add(new NumericField("mvalue").setIntValue(102)).build());
  indexWriter.addDocument(doc().add(new NumericField("svalue").setIntValue(4)).build());
  IndexReader reader=indexWriter.getReader();
  ShortFieldData sFieldData=ShortFieldData.load(reader,"svalue");
  ShortFieldData mFieldData=ShortFieldData.load(reader,"mvalue");
  assertThat(sFieldData.fieldName(),equalTo("svalue"));
  assertThat(sFieldData.multiValued(),equalTo(false));
  assertThat(mFieldData.fieldName(),equalTo("mvalue"));
  assertThat(mFieldData.multiValued(),equalTo(true));
  assertThat(sFieldData.hasValue(0),equalTo(true));
  assertThat(sFieldData.docFieldData(0).isEmpty(),equalTo(false));
  assertThat(sFieldData.value(0),equalTo((short)4));
  assertThat(sFieldData.docFieldData(0).getValue(),equalTo((short)4));
  assertThat(sFieldData.values(0).length,equalTo(1));
  assertThat(sFieldData.docFieldData(0).getValues().length,equalTo(1));
  assertThat(sFieldData.values(0)[0],equalTo((short)4));
  assertThat(sFieldData.docFieldData(0).getValues()[0],equalTo((short)4));
  assertThat(sFieldData.hasValue(1),equalTo(true));
  assertThat(sFieldData.value(1),equalTo((short)3));
  assertThat(sFieldData.values(1).length,equalTo(1));
  assertThat(sFieldData.values(1)[0],equalTo((short)3));
  assertThat(sFieldData.hasValue(2),equalTo(true));
  assertThat(sFieldData.value(2),equalTo((short)7));
  assertThat(sFieldData.values(2).length,equalTo(1));
  assertThat(sFieldData.values(2)[0],equalTo((short)7));
  assertThat(sFieldData.hasValue(3),equalTo(false));
  assertThat(sFieldData.hasValue(4),equalTo(true));
  assertThat(sFieldData.value(4),equalTo((short)4));
  assertThat(sFieldData.values(4).length,equalTo(1));
  assertThat(sFieldData.values(4)[0],equalTo((short)4));
  final ArrayList<Short> values=new ArrayList<Short>();
  sFieldData.forEachValue(new ShortFieldData.ValueProc(){
    @Override public void onValue(    short value){
      values.add(value);
    }
  }
);
  assertThat(values.size(),equalTo(3));
  assertThat(values.get(0),equalTo((short)3));
  assertThat(values.get(1),equalTo((short)4));
  assertThat(values.get(2),equalTo((short)7));
  assertThat(mFieldData.hasValue(0),equalTo(true));
  assertThat(mFieldData.value(0),equalTo((short)104));
  assertThat(mFieldData.values(0).length,equalTo(1));
  assertThat(mFieldData.values(0)[0],equalTo((short)104));
  assertThat(mFieldData.hasValue(1),equalTo(true));
  assertThat(mFieldData.value(1),equalTo((short)104));
  assertThat(mFieldData.docFieldData(1).getValue(),equalTo((short)104));
  assertThat(mFieldData.values(1).length,equalTo(2));
  assertThat(mFieldData.docFieldData(1).getValues().length,equalTo(2));
  assertThat(mFieldData.values(1)[0],equalTo((short)104));
  assertThat(mFieldData.docFieldData(1).getValues()[0],equalTo((short)104));
  assertThat(mFieldData.docFieldData(1).getValues()[1],equalTo((short)105));
  assertThat(mFieldData.hasValue(2),equalTo(false));
  assertThat(mFieldData.hasValue(3),equalTo(true));
  assertThat(mFieldData.value(3),equalTo((short)102));
  assertThat(mFieldData.values(3).length,equalTo(1));
  assertThat(mFieldData.values(3)[0],equalTo((short)102));
  assertThat(mFieldData.hasValue(4),equalTo(false));
  indexWriter.close();
  values.clear();
  mFieldData.forEachValue(new ShortFieldData.ValueProc(){
    @Override public void onValue(    short value){
      values.add(value);
    }
  }
);
  assertThat(values.size(),equalTo(3));
  assertThat(values.get(0),equalTo((short)102));
  assertThat(values.get(1),equalTo((short)104));
  assertThat(values.get(2),equalTo((short)105));
}
