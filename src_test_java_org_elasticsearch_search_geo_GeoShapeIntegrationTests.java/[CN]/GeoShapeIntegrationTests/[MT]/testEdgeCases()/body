{
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("location").field("type","geo_shape").field("tree","quadtree").endObject().endObject().endObject().endObject().string();
  assertAcked(prepareCreate("test").addMapping("type1",mapping));
  ensureGreen();
  indexRandom(true,client().prepareIndex("test","type1","blakely").setSource(jsonBuilder().startObject().field("name","Blakely Island").startObject("location").field("type","polygon").startArray("coordinates").startArray().startArray().value(-122.83).value(48.57).endArray().startArray().value(-122.77).value(48.56).endArray().startArray().value(-122.79).value(48.53).endArray().startArray().value(-122.83).value(48.57).endArray().endArray().endArray().endObject().endObject()));
  ShapeBuilder query=ShapeBuilder.newEnvelope().topLeft(-122.88,48.62).bottomRight(-122.82,48.54);
  SearchResponse searchResponse=client().prepareSearch().setQuery(filteredQuery(matchAllQuery(),geoIntersectionQuery("location",query))).execute().actionGet();
  assertSearchResponse(searchResponse);
  assertThat(searchResponse.getHits().getTotalHits(),equalTo(1l));
  assertThat(searchResponse.getHits().hits().length,equalTo(1));
  assertThat(searchResponse.getHits().getAt(0).id(),equalTo("blakely"));
}
