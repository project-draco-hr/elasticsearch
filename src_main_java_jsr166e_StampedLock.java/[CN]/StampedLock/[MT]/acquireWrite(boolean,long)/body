{
  WNode node=null, p;
  for (int spins=-1; ; ) {
    long m, s, ns;
    if ((m=(s=state) & ABITS) == 0L) {
      if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT))       return ns;
    }
 else     if (spins < 0)     spins=(m == WBIT && wtail == whead) ? SPINS : 0;
 else     if (spins > 0) {
      if (ThreadLocalRandom.current().nextInt() >= 0)       --spins;
    }
 else     if ((p=wtail) == null) {
      WNode hd=new WNode(WMODE,null);
      if (U.compareAndSwapObject(this,WHEAD,null,hd))       wtail=hd;
    }
 else     if (node == null)     node=new WNode(WMODE,p);
 else     if (node.prev != p)     node.prev=p;
 else     if (U.compareAndSwapObject(this,WTAIL,p,node)) {
      p.next=node;
      break;
    }
  }
  for (int spins=-1; ; ) {
    WNode h, np, pp;
    int ps;
    if ((h=whead) == p) {
      if (spins < 0)       spins=HEAD_SPINS;
 else       if (spins < MAX_HEAD_SPINS)       spins<<=1;
      for (int k=spins; ; ) {
        long s, ns;
        if (((s=state) & ABITS) == 0L) {
          if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT)) {
            whead=node;
            node.prev=null;
            return ns;
          }
        }
 else         if (ThreadLocalRandom.current().nextInt() >= 0 && --k <= 0)         break;
      }
    }
 else     if (h != null) {
      WNode c;
      Thread w;
      while ((c=h.cowait) != null) {
        if (U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w);
      }
    }
    if (whead == h) {
      if ((np=node.prev) != p) {
        if (np != null)         (p=np).next=node;
      }
 else       if ((ps=p.status) == 0)       U.compareAndSwapInt(p,WSTATUS,0,WAITING);
 else       if (ps == CANCELLED) {
        if ((pp=p.prev) != null) {
          node.prev=pp;
          pp.next=node;
        }
      }
 else {
        long time;
        if (deadline == 0L)         time=0L;
 else         if ((time=deadline - System.nanoTime()) <= 0L)         return cancelWaiter(node,node,false);
        Thread wt=Thread.currentThread();
        U.putObject(wt,PARKBLOCKER,this);
        node.thread=wt;
        if (p.status < 0 && (p != h || (state & ABITS) != 0L) && whead == h && node.prev == p)         U.park(false,time);
        node.thread=null;
        U.putObject(wt,PARKBLOCKER,null);
        if (interruptible && Thread.interrupted())         return cancelWaiter(node,node,true);
      }
    }
  }
}
