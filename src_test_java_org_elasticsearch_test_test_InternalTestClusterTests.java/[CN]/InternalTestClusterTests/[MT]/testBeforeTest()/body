{
  long clusterSeed=randomLong();
  int minNumDataNodes=randomIntBetween(0,3);
  int maxNumDataNodes=randomIntBetween(minNumDataNodes,4);
  String clusterName=this.getClass().getName() + ":" + this.getTestName();
  SettingsSource settingsSource=SettingsSource.EMPTY;
  int numClientNodes=randomIntBetween(0,2);
  boolean enableRandomBenchNodes=randomBoolean();
  int jvmOrdinal=randomIntBetween(0,10);
  String nodePrefix="foobar";
  InternalTestCluster cluster0=new InternalTestCluster(clusterSeed,minNumDataNodes,maxNumDataNodes,clusterName + "1",settingsSource,numClientNodes,enableRandomBenchNodes,jvmOrdinal,nodePrefix);
  InternalTestCluster cluster1=new InternalTestCluster(clusterSeed,minNumDataNodes,maxNumDataNodes,clusterName + "2",settingsSource,numClientNodes,enableRandomBenchNodes,jvmOrdinal,nodePrefix);
  assertClusters(cluster0,cluster1,false);
  long seed=randomLong();
  try {
{
      Random random=new Random(seed);
      cluster0.beforeTest(random,random.nextDouble());
    }
{
      Random random=new Random(seed);
      cluster1.beforeTest(random,random.nextDouble());
    }
    assertArrayEquals(cluster0.getNodeNames(),cluster1.getNodeNames());
    Iterator<Client> iterator1=cluster1.iterator();
    for (    Client client : cluster0) {
      assertTrue(iterator1.hasNext());
      Client other=iterator1.next();
      assertSettings(client.settings(),other.settings(),false);
    }
    assertArrayEquals(cluster0.getNodeNames(),cluster1.getNodeNames());
  }
  finally {
    IOUtils.close(cluster0,cluster1);
  }
}
