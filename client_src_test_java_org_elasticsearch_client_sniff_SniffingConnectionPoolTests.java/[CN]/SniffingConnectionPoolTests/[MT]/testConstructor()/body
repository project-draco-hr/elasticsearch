{
  CloseableHttpClient httpClient=HttpClientBuilder.create().build();
  String[] schemes=new String[]{"http","https"};
  int numNodes=RandomInts.randomIntBetween(random(),1,5);
  HttpHost[] hosts=new HttpHost[numNodes];
  for (int i=0; i < numNodes; i++) {
    hosts[i]=new HttpHost("localhost",9200);
  }
  try (SniffingConnectionPool connectionPool=new SniffingConnectionPool(RandomInts.randomIntBetween(random(),Integer.MIN_VALUE,0),random().nextBoolean(),RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),httpClient,RequestConfig.DEFAULT,RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),RandomPicks.randomFrom(random(),schemes),hosts)){
    fail("pool creation should have failed " + connectionPool);
  }
 catch (  IllegalArgumentException e) {
    assertEquals(e.getMessage(),"sniffInterval must be greater than 0");
  }
  try (SniffingConnectionPool connectionPool=new SniffingConnectionPool(RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),random().nextBoolean(),RandomInts.randomIntBetween(random(),Integer.MIN_VALUE,0),httpClient,RequestConfig.DEFAULT,RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),RandomPicks.randomFrom(random(),schemes),hosts)){
    fail("pool creation should have failed " + connectionPool);
  }
 catch (  IllegalArgumentException e) {
    assertEquals(e.getMessage(),"sniffAfterFailureDelay must be greater than 0");
  }
  try (SniffingConnectionPool connectionPool=new SniffingConnectionPool(RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),random().nextBoolean(),RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),null,RequestConfig.DEFAULT,RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),RandomPicks.randomFrom(random(),schemes),hosts)){
    fail("pool creation should have failed " + connectionPool);
  }
 catch (  NullPointerException e) {
    assertEquals(e.getMessage(),"client cannot be null");
  }
  try (SniffingConnectionPool connectionPool=new SniffingConnectionPool(RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),random().nextBoolean(),RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),httpClient,null,RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),RandomPicks.randomFrom(random(),schemes),hosts)){
    fail("pool creation should have failed " + connectionPool);
  }
 catch (  NullPointerException e) {
    assertEquals(e.getMessage(),"sniffRequestConfig cannot be null");
  }
  try (SniffingConnectionPool connectionPool=new SniffingConnectionPool(RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),random().nextBoolean(),RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),httpClient,RequestConfig.DEFAULT,RandomInts.randomIntBetween(random(),Integer.MIN_VALUE,0),RandomPicks.randomFrom(random(),schemes),hosts)){
    fail("pool creation should have failed " + connectionPool);
  }
 catch (  IllegalArgumentException e) {
    assertEquals(e.getMessage(),"sniffRequestTimeout must be greater than 0");
  }
  try (SniffingConnectionPool connectionPool=new SniffingConnectionPool(RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),random().nextBoolean(),RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),httpClient,RequestConfig.DEFAULT,RandomInts.randomIntBetween(random(),Integer.MIN_VALUE,0),null,hosts)){
    fail("pool creation should have failed " + connectionPool);
  }
 catch (  NullPointerException e) {
    assertEquals(e.getMessage(),"scheme cannot be null");
  }
  try (SniffingConnectionPool connectionPool=new SniffingConnectionPool(RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),random().nextBoolean(),RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),httpClient,RequestConfig.DEFAULT,RandomInts.randomIntBetween(random(),Integer.MIN_VALUE,0),"whatever",hosts)){
    fail("pool creation should have failed " + connectionPool);
  }
 catch (  IllegalArgumentException e) {
    assertEquals(e.getMessage(),"scheme must be either http or https");
  }
  try (SniffingConnectionPool connectionPool=new SniffingConnectionPool(RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),random().nextBoolean(),RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),httpClient,RequestConfig.DEFAULT,RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),RandomPicks.randomFrom(random(),schemes),(HttpHost[])null)){
    fail("pool creation should have failed " + connectionPool);
  }
 catch (  IllegalArgumentException e) {
    assertEquals(e.getMessage(),"no hosts provided");
  }
  try (SniffingConnectionPool connectionPool=new SniffingConnectionPool(RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),random().nextBoolean(),RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),httpClient,RequestConfig.DEFAULT,RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),RandomPicks.randomFrom(random(),schemes),(HttpHost)null)){
    fail("pool creation should have failed " + connectionPool);
  }
 catch (  NullPointerException e) {
    assertEquals(e.getMessage(),"host cannot be null");
  }
  try (SniffingConnectionPool connectionPool=new SniffingConnectionPool(RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),random().nextBoolean(),RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),httpClient,RequestConfig.DEFAULT,RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),RandomPicks.randomFrom(random(),schemes))){
    fail("pool creation should have failed " + connectionPool);
  }
 catch (  IllegalArgumentException e) {
    assertEquals(e.getMessage(),"no hosts provided");
  }
  try (SniffingConnectionPool sniffingConnectionPool=new SniffingConnectionPool(RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),random().nextBoolean(),RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),httpClient,RequestConfig.DEFAULT,RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE),RandomPicks.randomFrom(random(),schemes),hosts)){
    assertNotNull(sniffingConnectionPool);
  }
 }
