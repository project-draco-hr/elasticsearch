{
  bucketCountThresholds=getDefaultBucketCountThresholds();
  XContentParser.Token token;
  String currentFieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (vsParser.token(currentFieldName,token,parser)) {
      continue;
    }
 else     if (incExcParser.token(currentFieldName,token,parser)) {
      continue;
    }
 else     if (token == XContentParser.Token.VALUE_STRING) {
      if (context.parseFieldMatcher().match(currentFieldName,EXECUTION_HINT_FIELD_NAME)) {
        executionHint=parser.text();
      }
 else       if (context.parseFieldMatcher().match(currentFieldName,SubAggCollectionMode.KEY)) {
        collectMode=SubAggCollectionMode.parse(parser.text(),context.parseFieldMatcher());
      }
 else       if (context.parseFieldMatcher().match(currentFieldName,REQUIRED_SIZE_FIELD_NAME)) {
        bucketCountThresholds.setRequiredSize(parser.intValue());
      }
 else {
        parseSpecial(aggregationName,parser,context,token,currentFieldName);
      }
    }
 else     if (token == XContentParser.Token.VALUE_NUMBER) {
      if (context.parseFieldMatcher().match(currentFieldName,REQUIRED_SIZE_FIELD_NAME)) {
        bucketCountThresholds.setRequiredSize(parser.intValue());
      }
 else       if (context.parseFieldMatcher().match(currentFieldName,SHARD_SIZE_FIELD_NAME)) {
        bucketCountThresholds.setShardSize(parser.intValue());
      }
 else       if (context.parseFieldMatcher().match(currentFieldName,MIN_DOC_COUNT_FIELD_NAME)) {
        bucketCountThresholds.setMinDocCount(parser.intValue());
      }
 else       if (context.parseFieldMatcher().match(currentFieldName,SHARD_MIN_DOC_COUNT_FIELD_NAME)) {
        bucketCountThresholds.setShardMinDocCount(parser.longValue());
      }
 else {
        parseSpecial(aggregationName,parser,context,token,currentFieldName);
      }
    }
 else {
      parseSpecial(aggregationName,parser,context,token,currentFieldName);
    }
  }
  includeExclude=incExcParser.includeExclude();
}
