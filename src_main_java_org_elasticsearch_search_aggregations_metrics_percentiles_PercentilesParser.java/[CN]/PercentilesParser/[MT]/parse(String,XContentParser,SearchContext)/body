{
  ValuesSourceParser<ValuesSource.Numeric> vsParser=ValuesSourceParser.numeric(aggregationName,InternalPercentiles.TYPE,context).requiresSortedValues(true).build();
  double[] percents=DEFAULT_PERCENTS;
  boolean keyed=true;
  Map<String,Object> settings=null;
  XContentParser.Token token;
  String currentFieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (vsParser.token(currentFieldName,token,parser)) {
      continue;
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if ("percents".equals(currentFieldName)) {
        DoubleArrayList values=new DoubleArrayList(10);
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          double percent=parser.doubleValue();
          if (percent < 0 || percent > 100) {
            throw new SearchParseException(context,"the percents in the percentiles aggregation [" + aggregationName + "] must be in the [0, 100] range");
          }
          values.add(percent);
        }
        percents=values.toArray();
        Arrays.sort(percents);
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else     if (token.isValue()) {
      if (token == XContentParser.Token.VALUE_BOOLEAN && "keyed".equals(currentFieldName)) {
        keyed=parser.booleanValue();
      }
 else {
        if (settings == null) {
          settings=new HashMap<>();
        }
        settings.put(currentFieldName,parser.objectText());
      }
    }
 else {
      throw new SearchParseException(context,"Unexpected token " + token + " in ["+ aggregationName+ "].");
    }
  }
  PercentilesEstimator.Factory estimatorFactory=EstimatorType.TDIGEST.estimatorFactory(settings);
  return new PercentilesAggregator.Factory(aggregationName,vsParser.config(),percents,estimatorFactory,keyed);
}
