{
  ValuesSourceConfig<ValuesSource.Numeric> config=new ValuesSourceConfig<>(ValuesSource.Numeric.class);
  String field=null;
  String script=null;
  String scriptLang=null;
  double[] percents=DEFAULT_PERCENTS;
  Map<String,Object> scriptParams=null;
  boolean assumeSorted=false;
  boolean keyed=true;
  Map<String,Object> settings=null;
  XContentParser.Token token;
  String currentFieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.VALUE_STRING) {
      if ("field".equals(currentFieldName)) {
        field=parser.text();
      }
 else       if ("script".equals(currentFieldName)) {
        script=parser.text();
      }
 else       if ("lang".equals(currentFieldName)) {
        scriptLang=parser.text();
      }
 else {
        if (settings == null) {
          settings=new HashMap<>();
        }
        settings.put(currentFieldName,parser.text());
      }
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if ("percents".equals(currentFieldName)) {
        DoubleArrayList values=new DoubleArrayList(10);
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          double percent=parser.doubleValue();
          if (percent < 0 || percent > 100) {
            throw new SearchParseException(context,"the percents in the percentiles aggregation [" + aggregationName + "] must be in the [0, 100] range");
          }
          values.add(percent);
        }
        percents=values.toArray();
        Arrays.sort(percents);
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("params".equals(currentFieldName)) {
        scriptParams=parser.map();
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else     if (token == XContentParser.Token.VALUE_BOOLEAN) {
      if ("script_values_sorted".equals(currentFieldName) || "scriptValuesSorted".equals(currentFieldName)) {
        assumeSorted=parser.booleanValue();
      }
      if ("keyed".equals(currentFieldName)) {
        keyed=parser.booleanValue();
      }
 else {
        if (settings == null) {
          settings=new HashMap<>();
        }
        settings.put(currentFieldName,parser.booleanValue());
      }
    }
 else     if (token == XContentParser.Token.VALUE_NUMBER) {
      if (settings == null) {
        settings=new HashMap<>();
      }
      settings.put(currentFieldName,parser.numberValue());
    }
 else {
      throw new SearchParseException(context,"Unexpected token " + token + " in ["+ aggregationName+ "].");
    }
  }
  PercentilesEstimator.Factory estimatorFactory=EstimatorType.TDIGEST.estimatorFactory(settings);
  if (script != null) {
    config.script(context.scriptService().search(context.lookup(),scriptLang,script,scriptParams));
  }
  if (!assumeSorted) {
    config.ensureSorted(true);
  }
  if (field == null) {
    return new PercentilesAggregator.Factory(aggregationName,config,percents,estimatorFactory,keyed);
  }
  FieldMapper<?> mapper=context.smartNameFieldMapper(field);
  if (mapper == null) {
    config.unmapped(true);
    return new PercentilesAggregator.Factory(aggregationName,config,percents,estimatorFactory,keyed);
  }
  IndexFieldData<?> indexFieldData=context.fieldData().getForField(mapper);
  config.fieldContext(new FieldContext(field,indexFieldData));
  return new PercentilesAggregator.Factory(aggregationName,config,percents,estimatorFactory,keyed);
}
