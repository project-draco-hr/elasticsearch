{
  assumeTrue("test runs only when at least a type is registered",getCurrentTypes().length > 0);
  for (  Operator op : Operator.values()) {
    BooleanClause.Occur defaultOp=op.toBooleanClauseOccur();
    MapperQueryParser queryParser=new MapperQueryParser(createShardContext());
    QueryParserSettings settings=new QueryParserSettings("first foo-bar-foobar* last");
    settings.defaultField(STRING_FIELD_NAME);
    settings.fieldsAndWeights(Collections.emptyMap());
    settings.analyzeWildcard(true);
    settings.fuzziness(Fuzziness.AUTO);
    settings.rewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);
    settings.defaultOperator(op.toQueryParserOperator());
    queryParser.reset(settings);
    Query query=queryParser.parse("first foo-bar-foobar* last");
    Query expectedQuery=new BooleanQuery.Builder().add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME,"first")),defaultOp)).add(new BooleanQuery.Builder().add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME,"foo")),defaultOp)).add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME,"bar")),defaultOp)).add(new BooleanClause(new PrefixQuery(new Term(STRING_FIELD_NAME,"foobar")),defaultOp)).build(),defaultOp).add(new BooleanClause(new TermQuery(new Term(STRING_FIELD_NAME,"last")),defaultOp)).build();
    assertThat(query,Matchers.equalTo(expectedQuery));
  }
}
