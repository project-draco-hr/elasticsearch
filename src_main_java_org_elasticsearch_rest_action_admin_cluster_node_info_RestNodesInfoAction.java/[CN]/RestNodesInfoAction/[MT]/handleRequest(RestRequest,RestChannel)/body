{
  String[] nodeIds;
  Set<String> metrics;
  if (request.hasParam("nodeId") && !request.hasParam("metrics")) {
    nodeIds=new String[]{"_all"};
    metrics=Strings.splitStringByCommaToSet(request.param("nodeId","_all"));
  }
 else {
    nodeIds=Strings.splitStringByCommaToArray(request.param("nodeId","_all"));
    metrics=Strings.splitStringByCommaToSet(request.param("metrics","_all"));
  }
  final NodesInfoRequest nodesInfoRequest=new NodesInfoRequest(nodeIds);
  nodesInfoRequest.listenerThreaded(false);
  if (metrics.size() == 1 && metrics.contains("_all")) {
    nodesInfoRequest.all();
  }
 else {
    nodesInfoRequest.clear();
    nodesInfoRequest.settings(metrics.contains("settings"));
    nodesInfoRequest.os(metrics.contains("os"));
    nodesInfoRequest.process(metrics.contains("process"));
    nodesInfoRequest.jvm(metrics.contains("jvm"));
    nodesInfoRequest.threadPool(metrics.contains("thread_pool"));
    nodesInfoRequest.network(metrics.contains("network"));
    nodesInfoRequest.transport(metrics.contains("transport"));
    nodesInfoRequest.http(metrics.contains("http"));
    nodesInfoRequest.plugin(metrics.contains("plugin"));
  }
  client.admin().cluster().nodesInfo(nodesInfoRequest,new ActionListener<NodesInfoResponse>(){
    @Override public void onResponse(    NodesInfoResponse response){
      try {
        response.settingsFilter(settingsFilter);
        XContentBuilder builder=RestXContentBuilder.restContentBuilder(request);
        builder.startObject();
        response.toXContent(builder,request);
        builder.endObject();
        channel.sendResponse(new XContentRestResponse(request,RestStatus.OK,builder));
      }
 catch (      Throwable e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
