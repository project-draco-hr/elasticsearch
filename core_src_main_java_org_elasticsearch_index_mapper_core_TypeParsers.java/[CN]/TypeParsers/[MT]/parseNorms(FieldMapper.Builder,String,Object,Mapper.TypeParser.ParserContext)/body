{
  if (propName.equals("norms")) {
    if (propNode instanceof Map) {
      final Map<String,Object> properties=nodeMapValue(propNode,"norms");
      for (Iterator<Entry<String,Object>> propsIterator=properties.entrySet().iterator(); propsIterator.hasNext(); ) {
        Entry<String,Object> entry2=propsIterator.next();
        final String propName2=entry2.getKey();
        final Object propNode2=entry2.getValue();
        if (propName2.equals("enabled")) {
          builder.omitNorms(!lenientNodeBooleanValue(propNode2));
          propsIterator.remove();
        }
 else         if (propName2.equals("loading")) {
          propsIterator.remove();
        }
      }
      DocumentMapperParser.checkNoRemainingFields(propName,properties,parserContext.indexVersionCreated());
      DEPRECATION_LOGGER.deprecated("The [norms{enabled:true/false}] way of specifying norms is deprecated, please use [norms:true/false] instead");
    }
 else {
      builder.omitNorms(nodeBooleanValue("norms",propNode,parserContext) == false);
    }
    return true;
  }
 else   if (propName.equals("omit_norms")) {
    builder.omitNorms(nodeBooleanValue("norms",propNode,parserContext));
    DEPRECATION_LOGGER.deprecated("[omit_norms] is deprecated, please use [norms] instead with the opposite boolean value");
    return true;
  }
 else {
    return false;
  }
}
