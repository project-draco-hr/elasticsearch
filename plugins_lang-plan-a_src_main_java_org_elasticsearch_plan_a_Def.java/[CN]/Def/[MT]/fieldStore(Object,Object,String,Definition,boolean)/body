{
  final Field field=getField(owner,name,definition);
  MethodHandle handle=null;
  if (field == null) {
    final String set="set" + Character.toUpperCase(name.charAt(0)) + name.substring(1);
    final Method method=getMethod(owner,set,definition);
    if (method != null) {
      handle=method.handle;
    }
  }
 else {
    handle=field.setter;
  }
  if (handle != null) {
    try {
      if (!typesafe) {
        final Transform transform=getTransform(value.getClass(),handle.type().parameterType(1),definition);
        if (transform != null) {
          value=transform.method.handle.invoke(value);
        }
      }
      handle.invoke(owner,value);
    }
 catch (    Throwable throwable) {
      throw new IllegalArgumentException("Error storing value [" + value + "] "+ "in field ["+ name+ "] with owner class ["+ owner.getClass()+ "].",throwable);
    }
  }
 else   if (owner instanceof Map) {
    ((Map)owner).put(name,value);
  }
 else   if (owner instanceof List) {
    try {
      final int index=Integer.parseInt(name);
      ((List)owner).add(index,value);
    }
 catch (    NumberFormatException exception) {
      throw new IllegalArgumentException("Illegal list shortcut value [" + name + "].");
    }
  }
 else {
    throw new IllegalArgumentException("Unable to find dynamic field [" + name + "] "+ "for class ["+ owner.getClass().getCanonicalName()+ "].");
  }
}
