{
  final Method method=getMethod(owner,name,definition);
  if (method == null) {
    throw new IllegalArgumentException("Unable to find dynamic method [" + name + "] "+ "for class ["+ owner.getClass().getCanonicalName()+ "].");
  }
  final MethodHandle handle=method.handle;
  final List<Type> types=method.arguments;
  final Object[] parameters=new Object[arguments.length + 1];
  parameters[0]=owner;
  if (types.size() != arguments.length) {
    throw new IllegalArgumentException("When dynamically calling [" + name + "] from class "+ "["+ owner.getClass()+ "] expected ["+ types.size()+ "] arguments,"+ " but found ["+ arguments.length+ "].");
  }
  try {
    for (int count=0; count < arguments.length; ++count) {
      if (typesafe[count]) {
        parameters[count + 1]=arguments[count];
      }
 else {
        final Transform transform=getTransform(arguments[count].getClass(),types.get(count).clazz,definition);
        parameters[count + 1]=transform == null ? arguments[count] : transform.method.handle.invoke(arguments[count]);
      }
    }
    return handle.invokeWithArguments(parameters);
  }
 catch (  Throwable throwable) {
    throw new IllegalArgumentException("Error invoking method [" + name + "] "+ "with owner class ["+ owner.getClass().getCanonicalName()+ "].",throwable);
  }
}
