{
  super(settings);
  this.networkService=networkService;
  this.bigArrays=bigArrays;
  this.threadPool=threadPool;
  if (settings.getAsBoolean("netty.epollBugWorkaround",false)) {
    System.setProperty("org.jboss.netty.epollBugWorkaround","true");
  }
  ByteSizeValue maxContentLength=HttpTransportSettings.SETTING_HTTP_MAX_CONTENT_LENGTH.get(settings);
  this.maxChunkSize=HttpTransportSettings.SETTING_HTTP_MAX_CHUNK_SIZE.get(settings);
  this.maxHeaderSize=HttpTransportSettings.SETTING_HTTP_MAX_HEADER_SIZE.get(settings);
  this.maxInitialLineLength=HttpTransportSettings.SETTING_HTTP_MAX_INITIAL_LINE_LENGTH.get(settings);
  this.resetCookies=HttpTransportSettings.SETTING_HTTP_RESET_COOKIES.get(settings);
  this.maxCumulationBufferCapacity=settings.getAsBytesSize("http.netty.max_cumulation_buffer_capacity",null);
  this.maxCompositeBufferComponents=settings.getAsInt("http.netty.max_composite_buffer_components",-1);
  this.workerCount=settings.getAsInt("http.netty.worker_count",EsExecutors.boundedNumberOfProcessors(settings) * 2);
  this.blockingServer=settings.getAsBoolean("http.netty.http.blocking_server",TCP_BLOCKING.get(settings));
  this.port=HttpTransportSettings.SETTING_HTTP_PORT.get(settings);
  this.bindHosts=settings.getAsArray("http.netty.bind_host",settings.getAsArray("http.bind_host",settings.getAsArray("http.host",null)));
  this.publishHosts=settings.getAsArray("http.netty.publish_host",settings.getAsArray("http.publish_host",settings.getAsArray("http.host",null)));
  this.publishPort=HttpTransportSettings.SETTING_HTTP_PUBLISH_PORT.get(settings);
  this.tcpNoDelay=settings.getAsBoolean("http.netty.tcp_no_delay",TCP_NO_DELAY.get(settings));
  this.tcpKeepAlive=settings.getAsBoolean("http.netty.tcp_keep_alive",TCP_KEEP_ALIVE.get(settings));
  this.reuseAddress=settings.getAsBoolean("http.netty.reuse_address",TCP_REUSE_ADDRESS.get(settings));
  this.tcpSendBufferSize=settings.getAsBytesSize("http.netty.tcp_send_buffer_size",TCP_SEND_BUFFER_SIZE.get(settings));
  this.tcpReceiveBufferSize=settings.getAsBytesSize("http.netty.tcp_receive_buffer_size",TCP_RECEIVE_BUFFER_SIZE.get(settings));
  this.detailedErrorsEnabled=HttpTransportSettings.SETTING_HTTP_DETAILED_ERRORS_ENABLED.get(settings);
  long defaultReceiverPredictor=512 * 1024;
  if (JvmInfo.jvmInfo().getMem().getDirectMemoryMax().bytes() > 0) {
    long l=(long)((0.3 * JvmInfo.jvmInfo().getMem().getDirectMemoryMax().bytes()) / workerCount);
    defaultReceiverPredictor=Math.min(defaultReceiverPredictor,Math.max(l,64 * 1024));
  }
  ByteSizeValue receivePredictorMin=settings.getAsBytesSize("http.netty.receive_predictor_min",settings.getAsBytesSize("http.netty.receive_predictor_size",new ByteSizeValue(defaultReceiverPredictor)));
  ByteSizeValue receivePredictorMax=settings.getAsBytesSize("http.netty.receive_predictor_max",settings.getAsBytesSize("http.netty.receive_predictor_size",new ByteSizeValue(defaultReceiverPredictor)));
  if (receivePredictorMax.bytes() == receivePredictorMin.bytes()) {
    receiveBufferSizePredictorFactory=new FixedReceiveBufferSizePredictorFactory((int)receivePredictorMax.bytes());
  }
 else {
    receiveBufferSizePredictorFactory=new AdaptiveReceiveBufferSizePredictorFactory((int)receivePredictorMin.bytes(),(int)receivePredictorMin.bytes(),(int)receivePredictorMax.bytes());
  }
  this.compression=HttpTransportSettings.SETTING_HTTP_COMPRESSION.get(settings);
  this.compressionLevel=HttpTransportSettings.SETTING_HTTP_COMPRESSION_LEVEL.get(settings);
  this.pipelining=HttpTransportSettings.SETTING_PIPELINING.get(settings);
  this.pipeliningMaxEvents=HttpTransportSettings.SETTING_PIPELINING_MAX_EVENTS.get(settings);
  if (maxContentLength.bytes() > Integer.MAX_VALUE) {
    logger.warn("maxContentLength[" + maxContentLength + "] set to high value, resetting it to [100mb]");
    maxContentLength=new ByteSizeValue(100,ByteSizeUnit.MB);
  }
  this.maxContentLength=maxContentLength;
  logger.debug("using max_chunk_size[{}], max_header_size[{}], max_initial_line_length[{}], max_content_length[{}], receive_predictor[{}->{}], pipelining[{}], pipelining_max_events[{}]",maxChunkSize,maxHeaderSize,maxInitialLineLength,this.maxContentLength,receivePredictorMin,receivePredictorMax,pipelining,pipeliningMaxEvents);
}
