{
  super(settings);
  this.networkService=networkService;
  this.bigArrays=bigArrays;
  this.threadPool=threadPool;
  ByteSizeValue maxContentLength=SETTING_HTTP_MAX_CONTENT_LENGTH.get(settings);
  this.maxChunkSize=SETTING_HTTP_MAX_CHUNK_SIZE.get(settings);
  this.maxHeaderSize=SETTING_HTTP_MAX_HEADER_SIZE.get(settings);
  this.maxInitialLineLength=SETTING_HTTP_MAX_INITIAL_LINE_LENGTH.get(settings);
  this.resetCookies=SETTING_HTTP_RESET_COOKIES.get(settings);
  this.maxCumulationBufferCapacity=SETTING_HTTP_NETTY_MAX_CUMULATION_BUFFER_CAPACITY.get(settings);
  this.maxCompositeBufferComponents=SETTING_HTTP_NETTY_MAX_COMPOSITE_BUFFER_COMPONENTS.get(settings);
  this.workerCount=SETTING_HTTP_WORKER_COUNT.get(settings);
  this.blockingServer=SETTING_HTTP_TCP_BLOCKING_SERVER.get(settings);
  this.port=SETTING_HTTP_PORT.get(settings);
  this.bindHosts=SETTING_HTTP_BIND_HOST.get(settings).toArray(Strings.EMPTY_ARRAY);
  this.publishHosts=SETTING_HTTP_PUBLISH_HOST.get(settings).toArray(Strings.EMPTY_ARRAY);
  this.publishPort=SETTING_HTTP_PUBLISH_PORT.get(settings);
  this.tcpNoDelay=SETTING_HTTP_TCP_NO_DELAY.get(settings);
  this.tcpKeepAlive=SETTING_HTTP_TCP_KEEP_ALIVE.get(settings);
  this.reuseAddress=SETTING_HTTP_TCP_REUSE_ADDRESS.get(settings);
  this.tcpSendBufferSize=SETTING_HTTP_TCP_SEND_BUFFER_SIZE.get(settings);
  this.tcpReceiveBufferSize=SETTING_HTTP_TCP_RECEIVE_BUFFER_SIZE.get(settings);
  this.detailedErrorsEnabled=SETTING_HTTP_DETAILED_ERRORS_ENABLED.get(settings);
  ByteSizeValue receivePredictorMin=SETTING_HTTP_NETTY_RECEIVE_PREDICTOR_MIN.get(settings);
  ByteSizeValue receivePredictorMax=SETTING_HTTP_NETTY_RECEIVE_PREDICTOR_MAX.get(settings);
  if (receivePredictorMax.bytes() == receivePredictorMin.bytes()) {
    receiveBufferSizePredictorFactory=new FixedReceiveBufferSizePredictorFactory((int)receivePredictorMax.bytes());
  }
 else {
    receiveBufferSizePredictorFactory=new AdaptiveReceiveBufferSizePredictorFactory((int)receivePredictorMin.bytes(),(int)receivePredictorMin.bytes(),(int)receivePredictorMax.bytes());
  }
  this.compression=SETTING_HTTP_COMPRESSION.get(settings);
  this.compressionLevel=SETTING_HTTP_COMPRESSION_LEVEL.get(settings);
  this.pipelining=SETTING_PIPELINING.get(settings);
  this.pipeliningMaxEvents=SETTING_PIPELINING_MAX_EVENTS.get(settings);
  this.corsConfig=buildCorsConfig(settings);
  if (maxContentLength.bytes() > Integer.MAX_VALUE) {
    logger.warn("maxContentLength[" + maxContentLength + "] set to high value, resetting it to [100mb]");
    maxContentLength=new ByteSizeValue(100,ByteSizeUnit.MB);
  }
  this.maxContentLength=maxContentLength;
  logger.debug("using max_chunk_size[{}], max_header_size[{}], max_initial_line_length[{}], max_content_length[{}], receive_predictor[{}->{}], pipelining[{}], pipelining_max_events[{}]",maxChunkSize,maxHeaderSize,maxInitialLineLength,this.maxContentLength,receivePredictorMin,receivePredictorMax,pipelining,pipeliningMaxEvents);
}
