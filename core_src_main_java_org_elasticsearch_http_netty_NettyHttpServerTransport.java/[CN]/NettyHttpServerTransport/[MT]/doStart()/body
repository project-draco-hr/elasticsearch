{
  this.serverOpenChannels=new OpenChannelsHandler(logger);
  if (blockingServer) {
    serverBootstrap=new ServerBootstrap(new OioServerSocketChannelFactory(Executors.newCachedThreadPool(daemonThreadFactory(settings,"http_server_boss")),Executors.newCachedThreadPool(daemonThreadFactory(settings,"http_server_worker"))));
  }
 else {
    serverBootstrap=new ServerBootstrap(new NioServerSocketChannelFactory(Executors.newCachedThreadPool(daemonThreadFactory(settings,"http_server_boss")),Executors.newCachedThreadPool(daemonThreadFactory(settings,"http_server_worker")),workerCount));
  }
  serverBootstrap.setPipelineFactory(configureServerChannelPipelineFactory());
  if (!"default".equals(tcpNoDelay)) {
    serverBootstrap.setOption("child.tcpNoDelay",Booleans.parseBoolean(tcpNoDelay,null));
  }
  if (!"default".equals(tcpKeepAlive)) {
    serverBootstrap.setOption("child.keepAlive",Booleans.parseBoolean(tcpKeepAlive,null));
  }
  if (tcpSendBufferSize != null && tcpSendBufferSize.bytes() > 0) {
    serverBootstrap.setOption("child.sendBufferSize",tcpSendBufferSize.bytes());
  }
  if (tcpReceiveBufferSize != null && tcpReceiveBufferSize.bytes() > 0) {
    serverBootstrap.setOption("child.receiveBufferSize",tcpReceiveBufferSize.bytes());
  }
  serverBootstrap.setOption("receiveBufferSizePredictorFactory",receiveBufferSizePredictorFactory);
  serverBootstrap.setOption("child.receiveBufferSizePredictorFactory",receiveBufferSizePredictorFactory);
  serverBootstrap.setOption("reuseAddress",reuseAddress);
  serverBootstrap.setOption("child.reuseAddress",reuseAddress);
  InetAddress hostAddresses[];
  try {
    hostAddresses=networkService.resolveBindHostAddress(bindHost);
  }
 catch (  IOException e) {
    throw new BindHttpException("Failed to resolve host [" + bindHost + "]",e);
  }
  List<InetSocketTransportAddress> boundAddresses=new ArrayList<>(hostAddresses.length);
  for (  InetAddress address : hostAddresses) {
    boundAddresses.add(bindAddress(address));
  }
  InetSocketTransportAddress boundAddress=boundAddresses.get(0);
  InetSocketAddress publishAddress;
  if (0 == publishPort) {
    publishPort=boundAddress.getPort();
  }
  try {
    publishAddress=new InetSocketAddress(networkService.resolvePublishHostAddress(publishHost),publishPort);
  }
 catch (  Exception e) {
    throw new BindTransportException("Failed to resolve publish address",e);
  }
  this.boundAddress=new BoundTransportAddress(boundAddresses.toArray(new TransportAddress[boundAddresses.size()]),new InetSocketTransportAddress(publishAddress));
}
