{
  JsonParser jp=parseContext.jp();
  boolean disableCoord=false;
  float boost=1.0f;
  int minimumNumberShouldMatch=-1;
  List<BooleanClause> clauses=newArrayList();
  String currentFieldName=null;
  JsonToken token;
  while ((token=jp.nextToken()) != JsonToken.END_OBJECT) {
    if (token == JsonToken.FIELD_NAME) {
      currentFieldName=jp.getCurrentName();
    }
 else     if (token == JsonToken.START_OBJECT) {
      if ("must".equals(currentFieldName)) {
        clauses.add(new BooleanClause(parseContext.parseInnerQuery(),BooleanClause.Occur.MUST));
      }
 else       if ("mustNot".equals(currentFieldName)) {
        clauses.add(new BooleanClause(parseContext.parseInnerQuery(),BooleanClause.Occur.MUST_NOT));
      }
 else       if ("should".equals(currentFieldName)) {
        clauses.add(new BooleanClause(parseContext.parseInnerQuery(),BooleanClause.Occur.SHOULD));
      }
    }
 else     if (token == JsonToken.START_ARRAY) {
      if ("must".equals(currentFieldName)) {
        while ((token=jp.nextToken()) != JsonToken.END_ARRAY) {
          clauses.add(new BooleanClause(parseContext.parseInnerQuery(),BooleanClause.Occur.MUST));
        }
      }
 else       if ("mustNot".equals(currentFieldName)) {
        while ((token=jp.nextToken()) != JsonToken.END_ARRAY) {
          clauses.add(new BooleanClause(parseContext.parseInnerQuery(),BooleanClause.Occur.MUST_NOT));
        }
      }
 else       if ("should".equals(currentFieldName)) {
        while ((token=jp.nextToken()) != JsonToken.END_ARRAY) {
          clauses.add(new BooleanClause(parseContext.parseInnerQuery(),BooleanClause.Occur.SHOULD));
        }
      }
    }
 else     if (token == JsonToken.VALUE_TRUE || token == JsonToken.VALUE_FALSE) {
      if ("disableCoord".equals(currentFieldName)) {
        disableCoord=token == JsonToken.VALUE_TRUE;
      }
    }
 else     if (token == JsonToken.VALUE_NUMBER_INT) {
      if ("disableCoord".equals(currentFieldName)) {
        disableCoord=jp.getIntValue() != 0;
      }
 else       if ("minimumNumberShouldMatch".equals(currentFieldName)) {
        minimumNumberShouldMatch=jp.getIntValue();
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=jp.getIntValue();
      }
    }
 else     if (token == JsonToken.VALUE_NUMBER_FLOAT) {
      if ("boost".equals(currentFieldName)) {
        boost=jp.getFloatValue();
      }
    }
 else     if (token == JsonToken.VALUE_STRING) {
      if ("disableCoord".equals(currentFieldName)) {
        disableCoord=Booleans.parseBoolean(jp.getText(),false);
      }
 else       if ("minimumNumberShouldMatch".equals(currentFieldName)) {
        minimumNumberShouldMatch=Integer.parseInt(jp.getText());
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=Float.parseFloat(jp.getText());
      }
    }
  }
  BooleanQuery query=new BooleanQuery(disableCoord);
  for (  BooleanClause clause : clauses) {
    query.add(clause);
  }
  query.setBoost(boost);
  if (minimumNumberShouldMatch != -1) {
    query.setMinimumNumberShouldMatch(minimumNumberShouldMatch);
  }
  return optimizeQuery(fixNegativeQueryIfNeeded(query));
}
