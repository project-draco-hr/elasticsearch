{
  createIndex("test-idx-1","test-idx-2","test-idx-3");
  ensureGreen();
  logger.info("--> indexing some data");
  for (int i=0; i < 100; i++) {
    index("test-idx-1","doc",Integer.toString(i),"foo","bar" + i);
    index("test-idx-2","doc",Integer.toString(i),"foo","baz" + i);
    index("test-idx-3","doc",Integer.toString(i),"foo","baz" + i);
  }
  refresh();
  ClusterAdminClient client=client().admin().cluster();
  logger.info("-->  creating azure repository without any path");
  PutRepositoryResponse putRepositoryResponse=client.preparePutRepository("test-repo").setType("azure").setSettings(ImmutableSettings.settingsBuilder().put(Repository.CONTAINER,getContainerName())).get();
  assertThat(putRepositoryResponse.isAcknowledged(),equalTo(true));
  assertThat(client.prepareGetSnapshots("test-repo").get().getSnapshots().size(),equalTo(0));
  logger.info("--> snapshot");
  CreateSnapshotResponse createSnapshotResponse=client.prepareCreateSnapshot("test-repo","test-snap").setWaitForCompletion(true).setIndices("test-idx-*").get();
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),greaterThan(0));
  assertThat(client.prepareGetSnapshots("test-repo").get().getSnapshots().size(),equalTo(1));
  client.prepareDeleteSnapshot("test-repo","test-snap").get();
  client.prepareDeleteRepository("test-repo").get();
  logger.info("-->  creating azure repository path [{}]",getRepositoryPath());
  putRepositoryResponse=client.preparePutRepository("test-repo").setType("azure").setSettings(ImmutableSettings.settingsBuilder().put(Repository.CONTAINER,getContainerName()).put(Repository.BASE_PATH,getRepositoryPath())).get();
  assertThat(putRepositoryResponse.isAcknowledged(),equalTo(true));
  assertThat(client.prepareGetSnapshots("test-repo").get().getSnapshots().size(),equalTo(0));
  logger.info("--> snapshot");
  createSnapshotResponse=client.prepareCreateSnapshot("test-repo","test-snap").setWaitForCompletion(true).setIndices("test-idx-*").get();
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),greaterThan(0));
  assertThat(client.prepareGetSnapshots("test-repo").get().getSnapshots().size(),equalTo(1));
}
