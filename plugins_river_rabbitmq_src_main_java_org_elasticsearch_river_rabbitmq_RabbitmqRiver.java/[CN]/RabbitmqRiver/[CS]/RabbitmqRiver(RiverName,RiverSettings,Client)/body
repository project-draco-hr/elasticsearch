{
  super(riverName,settings);
  this.client=client;
  if (settings.settings().containsKey("rabbitmq")) {
    Map<String,Object> rabbitSettings=(Map<String,Object>)settings.settings().get("rabbitmq");
    rabbitHost=XContentMapValues.nodeStringValue(rabbitSettings.get("host"),ConnectionFactory.DEFAULT_HOST);
    rabbitPort=XContentMapValues.nodeIntegerValue(rabbitSettings.get("port"),ConnectionFactory.DEFAULT_AMQP_PORT);
    rabbitUser=XContentMapValues.nodeStringValue(rabbitSettings.get("user"),ConnectionFactory.DEFAULT_USER);
    rabbitPassword=XContentMapValues.nodeStringValue(rabbitSettings.get("pass"),ConnectionFactory.DEFAULT_PASS);
    rabbitVhost=XContentMapValues.nodeStringValue(rabbitSettings.get("vhost"),ConnectionFactory.DEFAULT_VHOST);
    rabbitQueue=XContentMapValues.nodeStringValue(rabbitSettings.get("queue"),"elasticsearch");
    rabbitExchange=XContentMapValues.nodeStringValue(rabbitSettings.get("exchange"),"elasticsearch");
    rabbitExchangeType=XContentMapValues.nodeStringValue(rabbitSettings.get("exchange_type"),"direct");
    rabbitRoutingKey=XContentMapValues.nodeStringValue(rabbitSettings.get("routing_key"),"elasticsearch");
    rabbitExchangeDurable=Boolean.valueOf(XContentMapValues.nodeStringValue(rabbitSettings.get("exchange_durable"),"true")).booleanValue();
    rabbitQueueDurable=Boolean.valueOf(XContentMapValues.nodeStringValue(rabbitSettings.get("queue_durable"),"true")).booleanValue();
    rabbitQueueAutoDelete=Boolean.valueOf(XContentMapValues.nodeStringValue(rabbitSettings.get("queue_auto_delete"),"false")).booleanValue();
  }
 else {
    rabbitHost=ConnectionFactory.DEFAULT_HOST;
    rabbitPort=ConnectionFactory.DEFAULT_AMQP_PORT;
    rabbitUser=ConnectionFactory.DEFAULT_USER;
    rabbitPassword=ConnectionFactory.DEFAULT_PASS;
    rabbitVhost=ConnectionFactory.DEFAULT_VHOST;
    rabbitQueue="elasticsearch";
    rabbitQueueAutoDelete=false;
    rabbitQueueDurable=true;
    rabbitExchange="elasticsearch";
    rabbitExchangeType="direct";
    rabbitExchangeDurable=true;
    rabbitRoutingKey="elasticsearch";
  }
  if (settings.settings().containsKey("index")) {
    Map<String,Object> indexSettings=(Map<String,Object>)settings.settings().get("index");
    bulkSize=XContentMapValues.nodeIntegerValue(indexSettings.get("bulk_size"),100);
    if (indexSettings.containsKey("bulk_timeout")) {
      bulkTimeout=TimeValue.parseTimeValue(XContentMapValues.nodeStringValue(indexSettings.get("bulk_timeout"),"10ms"),TimeValue.timeValueMillis(10));
    }
 else {
      bulkTimeout=TimeValue.timeValueMillis(10);
    }
    ordered=XContentMapValues.nodeBooleanValue(indexSettings.get("ordered"),false);
  }
 else {
    bulkSize=100;
    bulkTimeout=TimeValue.timeValueMillis(10);
    ordered=false;
  }
}
