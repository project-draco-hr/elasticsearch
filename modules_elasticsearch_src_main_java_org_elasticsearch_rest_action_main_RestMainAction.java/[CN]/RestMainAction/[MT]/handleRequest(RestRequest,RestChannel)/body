{
  try {
    JsonBuilder builder=RestJsonBuilder.cached(request).prettyPrint();
    builder.startObject();
    builder.field("ok",true);
    if (settings.get("name") != null) {
      builder.field("name",settings.get("name"));
    }
    builder.startObject("version").field("number",Version.number()).field("date",Version.date()).field("devBuild",Version.devBuild()).endObject();
    builder.field("version",Version.number());
    builder.field("cover","DON'T PANIC");
    if (rootNode != null) {
      builder.startObject("quote");
      ArrayNode arrayNode=(ArrayNode)rootNode.get("quotes");
      JsonNode quoteNode=arrayNode.get(ThreadLocalRandom.current().nextInt(quotesSize));
      builder.field("book",quoteNode.get("book").getValueAsText());
      builder.field("chapter",quoteNode.get("chapter").getValueAsText());
      ArrayNode textNodes=(ArrayNode)quoteNode.get("text");
      int index=0;
      for (      JsonNode textNode : textNodes) {
        builder.field("text" + (++index),textNode.getValueAsText());
      }
      builder.endObject();
    }
    builder.endObject();
    channel.sendResponse(new JsonRestResponse(request,RestResponse.Status.OK,builder));
  }
 catch (  Exception e) {
    try {
      channel.sendResponse(new JsonThrowableRestResponse(request,e));
    }
 catch (    IOException e1) {
      logger.warn("Failed to send response",e);
    }
  }
}
