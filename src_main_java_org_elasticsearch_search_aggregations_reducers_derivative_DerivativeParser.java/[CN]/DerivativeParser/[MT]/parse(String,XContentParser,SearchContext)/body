{
  XContentParser.Token token;
  String currentFieldName=null;
  String[] bucketsPaths=null;
  String format=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.VALUE_STRING) {
      if (FORMAT.match(currentFieldName)) {
        format=parser.text();
      }
 else       if (BUCKETS_PATH.match(currentFieldName)) {
        bucketsPaths=new String[]{parser.text()};
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ reducerName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if (BUCKETS_PATH.match(currentFieldName)) {
        List<String> paths=new ArrayList<>();
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          String path=parser.text();
          paths.add(path);
        }
        bucketsPaths=paths.toArray(new String[paths.size()]);
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ reducerName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else {
      throw new SearchParseException(context,"Unexpected token " + token + " in ["+ reducerName+ "].");
    }
  }
  if (bucketsPaths == null) {
    throw new SearchParseException(context,"Missing required field [" + BUCKETS_PATH.getPreferredName() + "] for derivative aggregation ["+ reducerName+ "]");
  }
  ValueFormatter formatter=null;
  if (format != null) {
    formatter=ValueFormat.Patternable.Number.format(format).formatter();
  }
  return new DerivativeReducer.Factory(reducerName,bucketsPaths,formatter);
}
