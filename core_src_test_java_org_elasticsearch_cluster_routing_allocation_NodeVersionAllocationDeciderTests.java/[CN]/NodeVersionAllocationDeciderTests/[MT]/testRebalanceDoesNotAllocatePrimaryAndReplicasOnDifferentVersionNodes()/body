{
  ShardId shard1=new ShardId("test1","_na_",0);
  ShardId shard2=new ShardId("test2","_na_",0);
  final DiscoveryNode newNode=new DiscoveryNode("newNode",LocalTransportAddress.buildUnique(),emptyMap(),MASTER_DATA_ROLES,Version.CURRENT);
  final DiscoveryNode oldNode1=new DiscoveryNode("oldNode1",LocalTransportAddress.buildUnique(),emptyMap(),MASTER_DATA_ROLES,VersionUtils.getPreviousVersion());
  final DiscoveryNode oldNode2=new DiscoveryNode("oldNode2",LocalTransportAddress.buildUnique(),emptyMap(),MASTER_DATA_ROLES,VersionUtils.getPreviousVersion());
  AllocationId allocationId1P=AllocationId.newInitializing();
  AllocationId allocationId1R=AllocationId.newInitializing();
  AllocationId allocationId2P=AllocationId.newInitializing();
  AllocationId allocationId2R=AllocationId.newInitializing();
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder(shard1.getIndexName()).settings(settings(Version.CURRENT).put(Settings.EMPTY)).numberOfShards(1).numberOfReplicas(1).putActiveAllocationIds(0,Sets.newHashSet(allocationId1P.getId(),allocationId1R.getId()))).put(IndexMetaData.builder(shard2.getIndexName()).settings(settings(Version.CURRENT).put(Settings.EMPTY)).numberOfShards(1).numberOfReplicas(1).putActiveAllocationIds(0,Sets.newHashSet(allocationId2P.getId(),allocationId2R.getId()))).build();
  RoutingTable routingTable=RoutingTable.builder().add(IndexRoutingTable.builder(shard1.getIndex()).addIndexShard(new IndexShardRoutingTable.Builder(shard1).addShard(TestShardRouting.newShardRouting(shard1.getIndexName(),shard1.getId(),newNode.getId(),null,true,ShardRoutingState.STARTED,allocationId1P)).addShard(TestShardRouting.newShardRouting(shard1.getIndexName(),shard1.getId(),oldNode1.getId(),null,false,ShardRoutingState.STARTED,allocationId1R)).build())).add(IndexRoutingTable.builder(shard2.getIndex()).addIndexShard(new IndexShardRoutingTable.Builder(shard2).addShard(TestShardRouting.newShardRouting(shard2.getIndexName(),shard2.getId(),newNode.getId(),null,true,ShardRoutingState.STARTED,allocationId2P)).addShard(TestShardRouting.newShardRouting(shard2.getIndexName(),shard2.getId(),oldNode1.getId(),null,false,ShardRoutingState.STARTED,allocationId2R)).build())).build();
  ClusterState state=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).nodes(DiscoveryNodes.builder().add(newNode).add(oldNode1).add(oldNode2)).build();
  AllocationDeciders allocationDeciders=new AllocationDeciders(Settings.EMPTY,Collections.singleton(new NodeVersionAllocationDecider(Settings.EMPTY)));
  AllocationService strategy=new MockAllocationService(Settings.EMPTY,allocationDeciders,NoopGatewayAllocator.INSTANCE,new BalancedShardsAllocator(Settings.EMPTY),EmptyClusterInfoService.INSTANCE);
  RoutingAllocation.Result result=strategy.reroute(state,new AllocationCommands(),true,false);
  state=ClusterState.builder(state).routingResult(result).build();
  assertThat(result.routingTable().index(shard2.getIndex()).shardsWithState(ShardRoutingState.RELOCATING).size(),equalTo(0));
  assertThat(result.routingTable().index(shard1.getIndex()).shardsWithState(ShardRoutingState.RELOCATING).size(),equalTo(0));
}
