{
  final DiscoveryNode newNode=new DiscoveryNode("newNode",DummyTransportAddress.INSTANCE,emptyMap(),MASTER_DATA_ROLES,Version.CURRENT);
  final DiscoveryNode oldNode1=new DiscoveryNode("oldNode1",DummyTransportAddress.INSTANCE,emptyMap(),MASTER_DATA_ROLES,VersionUtils.getPreviousVersion());
  final DiscoveryNode oldNode2=new DiscoveryNode("oldNode2",DummyTransportAddress.INSTANCE,emptyMap(),MASTER_DATA_ROLES,VersionUtils.getPreviousVersion());
  int numberOfShards=randomIntBetween(1,3);
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(numberOfShards).numberOfReplicas(randomIntBetween(0,3))).build();
  ClusterState state=ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(RoutingTable.builder().addAsRestore(metaData.index("test"),new RestoreSource(new Snapshot("rep1",new SnapshotId("snp1",UUIDs.randomBase64UUID())),Version.CURRENT,"test")).build()).nodes(DiscoveryNodes.builder().put(newNode).put(oldNode1).put(oldNode2)).build();
  AllocationDeciders allocationDeciders=new AllocationDeciders(Settings.EMPTY,new AllocationDecider[]{new ReplicaAfterPrimaryActiveAllocationDecider(Settings.EMPTY),new NodeVersionAllocationDecider(Settings.EMPTY)});
  AllocationService strategy=new MockAllocationService(Settings.EMPTY,allocationDeciders,NoopGatewayAllocator.INSTANCE,new BalancedShardsAllocator(Settings.EMPTY),EmptyClusterInfoService.INSTANCE);
  RoutingAllocation.Result result=strategy.reroute(state,new AllocationCommands(),true,false);
  for (int i=0; i < numberOfShards; i++) {
    assertEquals("newNode",result.routingTable().index("test").getShards().get(i).primaryShard().currentNodeId());
  }
}
