{
  AllocationService service=createAllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries",10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),"always").put("cluster.routing.allocation.cluster_concurrent_rebalance",-1).build());
  logger.info("Building initial routing table");
  MetaData.Builder builder=MetaData.builder();
  RoutingTable.Builder rtBuilder=RoutingTable.builder();
  int numIndices=between(1,20);
  for (int i=0; i < numIndices; i++) {
    builder.put(IndexMetaData.builder("test_" + i).settings(settings(Version.CURRENT)).numberOfShards(between(1,5)).numberOfReplicas(between(0,2)));
  }
  MetaData metaData=builder.build();
  for (int i=0; i < numIndices; i++) {
    rtBuilder.addAsNew(metaData.index("test_" + i));
  }
  RoutingTable routingTable=rtBuilder.build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build();
  assertThat(routingTable.shardsWithState(UNASSIGNED).size(),equalTo(routingTable.allShards().size()));
  List<DiscoveryNode> nodes=new ArrayList<>();
  int nodeIdx=0;
  int iters=scaledRandomIntBetween(10,100);
  for (int i=0; i < iters; i++) {
    DiscoveryNodes.Builder nodesBuilder=DiscoveryNodes.builder();
    int numNodes=between(1,20);
    if (nodes.size() > numNodes) {
      shuffle(nodes,random());
      nodes=nodes.subList(0,numNodes);
    }
 else {
      for (int j=nodes.size(); j < numNodes; j++) {
        if (frequently()) {
          nodes.add(newNode("node" + (nodeIdx++),randomBoolean() ? VersionUtils.getPreviousVersion() : Version.CURRENT));
        }
 else {
          nodes.add(newNode("node" + (nodeIdx++),randomVersion(random())));
        }
      }
    }
    for (    DiscoveryNode node : nodes) {
      nodesBuilder.add(node);
    }
    clusterState=ClusterState.builder(clusterState).nodes(nodesBuilder).build();
    clusterState=stabilize(clusterState,service);
  }
}
