{
  IndexService indexService=indicesService.indexServiceSafe(request.index());
  IndexShard indexShard=indexService.shardSafe(shardId);
  final Engine.Searcher searcher=indexShard.searcher();
  IndexReader topLevelReader=searcher.reader();
  final TermVectorResponse termVectorResponse=new TermVectorResponse(request.index(),request.type(),request.id());
  final Term uidTerm=new Term(UidFieldMapper.NAME,Uid.createUidAsBytes(request.type(),request.id()));
  try {
    Fields topLevelFields=MultiFields.getFields(topLevelReader);
    Versions.DocIdAndVersion docIdAndVersion=Versions.loadDocIdAndVersion(topLevelReader,uidTerm);
    if (docIdAndVersion != null) {
      termVectorResponse.setFields(topLevelReader.getTermVectors(docIdAndVersion.docId),request.selectedFields(),request.getFlags(),topLevelFields);
      termVectorResponse.setDocVersion(docIdAndVersion.version);
    }
 else {
    }
  }
 catch (  Throwable ex) {
    throw new ElasticSearchException("failed to execute term vector request",ex);
  }
 finally {
    searcher.release();
  }
  return termVectorResponse;
}
