{
  final Class<?> rawType=key.getTypeLiteral().getRawType();
  final Class<? extends Provider<?>> providerType=providedBy.value();
  if (providerType == rawType) {
    throw errors.recursiveProviderType().toException();
  }
  @SuppressWarnings("unchecked") final Key<? extends Provider<T>> providerKey=(Key<? extends Provider<T>>)Key.get(providerType);
  final BindingImpl<? extends Provider<?>> providerBinding=getBindingOrThrow(providerKey,errors);
  InternalFactory<T> internalFactory=new InternalFactory<T>(){
    public T get(    Errors errors,    InternalContext context,    Dependency dependency) throws ErrorsException {
      errors=errors.withSource(providerKey);
      Provider<?> provider=providerBinding.getInternalFactory().get(errors,context,dependency);
      try {
        Object o=provider.get();
        if (o != null && !rawType.isInstance(o)) {
          throw errors.subtypeNotProvided(providerType,rawType).toException();
        }
        @SuppressWarnings("unchecked") T t=(T)o;
        return t;
      }
 catch (      RuntimeException e) {
        throw errors.errorInProvider(e).toException();
      }
    }
  }
;
  return new LinkedProviderBindingImpl<T>(this,key,rawType,Scopes.<T>scope(key,this,internalFactory,scoping),scoping,providerKey);
}
