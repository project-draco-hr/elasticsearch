{
  assert(outputLength == getDecodedLength(inputArray,inputOffset,inputLength));
  final int numInputChars=inputLength - 1;
  final int numOutputBytes=outputLength;
  if (numOutputBytes > 0) {
    int caseNum=0;
    int outputByteNum=outputOffset;
    int inputCharNum=inputOffset;
    short inputChar;
    CodingCase codingCase;
    for (; inputCharNum < numInputChars - 1; ++inputCharNum) {
      codingCase=CODING_CASES[caseNum];
      inputChar=(short)inputArray[inputCharNum];
      if (2 == codingCase.numBytes) {
        if (0 == caseNum) {
          outputArray[outputByteNum]=(byte)(inputChar >>> codingCase.initialShift);
        }
 else {
          outputArray[outputByteNum]+=(byte)(inputChar >>> codingCase.initialShift);
        }
        outputArray[outputByteNum + 1]=(byte)((inputChar & codingCase.finalMask) << codingCase.finalShift);
      }
 else {
        outputArray[outputByteNum]+=(byte)(inputChar >>> codingCase.initialShift);
        outputArray[outputByteNum + 1]=(byte)((inputChar & codingCase.middleMask) >>> codingCase.middleShift);
        outputArray[outputByteNum + 2]=(byte)((inputChar & codingCase.finalMask) << codingCase.finalShift);
      }
      outputByteNum+=codingCase.advanceBytes;
      if (++caseNum == CODING_CASES.length) {
        caseNum=0;
      }
    }
    inputChar=(short)inputArray[inputCharNum];
    codingCase=CODING_CASES[caseNum];
    if (0 == caseNum) {
      outputArray[outputByteNum]=0;
    }
    outputArray[outputByteNum]+=(byte)(inputChar >>> codingCase.initialShift);
    final int bytesLeft=numOutputBytes - outputByteNum;
    if (bytesLeft > 1) {
      if (2 == codingCase.numBytes) {
        outputArray[outputByteNum + 1]=(byte)((inputChar & codingCase.finalMask) >>> codingCase.finalShift);
      }
 else {
        outputArray[outputByteNum + 1]=(byte)((inputChar & codingCase.middleMask) >>> codingCase.middleShift);
        if (bytesLeft > 2) {
          outputArray[outputByteNum + 2]=(byte)((inputChar & codingCase.finalMask) << codingCase.finalShift);
        }
      }
    }
  }
}
