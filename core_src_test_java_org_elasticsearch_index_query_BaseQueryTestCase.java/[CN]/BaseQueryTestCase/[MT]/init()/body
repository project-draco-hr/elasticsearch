{
  Settings settings=Settings.settingsBuilder().put("name",BaseQueryTestCase.class.toString()).put("path.home",createTempDir()).put(IndexMetaData.SETTING_VERSION_CREATED,VersionUtils.randomVersionBetween(random(),Version.V_1_0_0,Version.CURRENT)).build();
  index=new Index("test");
  injector=new ModulesBuilder().add(new EnvironmentModule(new Environment(settings)),new SettingsModule(settings),new ThreadPoolModule(new ThreadPool(settings)),new IndicesQueriesModule(),new ScriptModule(settings),new IndexSettingsModule(index,settings),new IndexCacheModule(settings),new AnalysisModule(settings,new IndicesAnalysisService(settings)),new SimilarityModule(settings),new IndexNameModule(index),new AbstractModule(){
    @Override protected void configure(){
      Multibinder.newSetBinder(binder(),ScoreFunctionParser.class);
      bind(ClusterService.class).toProvider(Providers.of((ClusterService)null));
      bind(CircuitBreakerService.class).to(NoneCircuitBreakerService.class);
      bind(NamedWriteableRegistry.class).asEagerSingleton();
    }
  }
).createInjector();
  queryParserService=injector.getInstance(IndexQueryParserService.class);
  MapperService mapperService=queryParserService.mapperService;
  currentTypes=new String[randomIntBetween(0,5)];
  for (int i=0; i < currentTypes.length; i++) {
    String type=randomAsciiOfLengthBetween(1,10);
    mapperService.merge(type,new CompressedXContent(PutMappingRequest.buildFromSimplifiedDef(type,STRING_FIELD_NAME,"type=string",INT_FIELD_NAME,"type=integer",DOUBLE_FIELD_NAME,"type=double",BOOLEAN_FIELD_NAME,"type=boolean",DATE_FIELD_NAME,"type=date",OBJECT_FIELD_NAME,"type=object").string()),false,false);
    mapperService.merge(type,new CompressedXContent("{\"properties\":{\"" + OBJECT_FIELD_NAME + "\":{\"type\":\"object\","+ "\"properties\":{\""+ DATE_FIELD_NAME+ "\":{\"type\":\"date\"},\""+ INT_FIELD_NAME+ "\":{\"type\":\"integer\"}}}}}"),false,false);
    currentTypes[i]=type;
  }
  namedWriteableRegistry=injector.getInstance(NamedWriteableRegistry.class);
}
