{
  QueryShardContext context=createShardContext();
  context.setAllowUnmappedFields(true);
  QB firstQuery=createTestQueryBuilder();
  Query firstLuceneQuery=firstQuery.toQuery(context);
  assertLuceneQuery(firstQuery,firstLuceneQuery,context);
  try (BytesStreamOutput output=new BytesStreamOutput()){
    firstQuery.writeTo(output);
    try (StreamInput in=new NamedWriteableAwareStreamInput(StreamInput.wrap(output.bytes()),namedWriteableRegistry)){
      @SuppressWarnings("unchecked") QueryParser<QB> queryParser=(QueryParser<QB>)queryParserService.queryParser(firstQuery.getWriteableName());
      QB secondQuery=queryParser.getBuilderPrototype().readFrom(in);
      if (randomBoolean()) {
        secondQuery.queryName(secondQuery.queryName() == null ? randomAsciiOfLengthBetween(1,30) : secondQuery.queryName() + randomAsciiOfLengthBetween(1,10));
      }
      Query secondLuceneQuery=secondQuery.toQuery(context);
      assertLuceneQuery(secondQuery,secondLuceneQuery,context);
      assertThat("two equivalent query builders lead to different lucene queries",secondLuceneQuery,equalTo(firstLuceneQuery));
      if (firstLuceneQuery != null && supportsBoostAndQueryName()) {
        secondQuery.boost(firstQuery.boost() + 1f + randomFloat());
        Query thirdLuceneQuery=secondQuery.toQuery(context);
        assertThat("modifying the boost doesn't affect the corresponding lucene query",firstLuceneQuery,not(equalTo(thirdLuceneQuery)));
      }
    }
   }
 }
