{
  Path destinationDataPath=dests[randomInt(dests.length - 1)];
  for (  Path dest : dests) {
    Path indexDir=dest.resolve(indexName);
    assertFalse(Files.exists(indexDir));
    Files.createDirectories(indexDir);
  }
  Files.walkFileTree(src,new SimpleFileVisitor<Path>(){
    @Override public FileVisitResult preVisitDirectory(    Path dir,    BasicFileAttributes attrs) throws IOException {
      Path relativeDir=src.relativize(dir);
      for (      Path dest : dests) {
        Path destDir=dest.resolve(indexName).resolve(relativeDir);
        Files.createDirectories(destDir);
      }
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {
      if (file.getFileName().toString().equals(IndexWriter.WRITE_LOCK_NAME)) {
        logger.trace("Skipping lock file: {}",file);
        return FileVisitResult.CONTINUE;
      }
      Path relativeFile=src.relativize(file);
      Path destFile=destinationDataPath.resolve(indexName).resolve(relativeFile);
      logger.trace("--> Moving {} to {}",relativeFile,destFile);
      Files.move(file,destFile);
      assertFalse(Files.exists(file));
      assertTrue(Files.exists(destFile));
      return FileVisitResult.CONTINUE;
    }
  }
);
}
