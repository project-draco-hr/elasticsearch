{
  try {
    RepositoriesMetaData oldMetaData=event.previousState().getMetaData().custom(RepositoriesMetaData.TYPE);
    RepositoriesMetaData newMetaData=event.state().getMetaData().custom(RepositoriesMetaData.TYPE);
    if ((oldMetaData == null && newMetaData == null) || (oldMetaData != null && oldMetaData.equals(newMetaData))) {
      return;
    }
    logger.trace("processing new index repositories for state version [{}]",event.state().version());
    Map<String,Repository> survivors=new HashMap<>();
    for (    Map.Entry<String,Repository> entry : repositories.entrySet()) {
      if (newMetaData == null || newMetaData.repository(entry.getKey()) == null) {
        logger.debug("unregistering repository [{}]",entry.getKey());
        closeRepository(entry.getValue());
      }
 else {
        survivors.put(entry.getKey(),entry.getValue());
      }
    }
    Map<String,Repository> builder=new HashMap<>();
    if (newMetaData != null) {
      for (      RepositoryMetaData repositoryMetaData : newMetaData.repositories()) {
        Repository repository=survivors.get(repositoryMetaData.name());
        if (repository != null) {
          RepositoryMetaData previousMetadata=repository.getMetadata();
          if (previousMetadata.type().equals(repositoryMetaData.type()) == false || previousMetadata.settings().equals(repositoryMetaData.settings()) == false) {
            logger.debug("updating repository [{}]",repositoryMetaData.name());
            closeRepository(repository);
            repository=null;
            try {
              repository=createRepository(repositoryMetaData);
            }
 catch (            RepositoryException ex) {
              logger.warn(new ParameterizedMessage("failed to change repository [{}]",repositoryMetaData.name()),ex);
            }
          }
        }
 else {
          try {
            repository=createRepository(repositoryMetaData);
          }
 catch (          RepositoryException ex) {
            logger.warn(new ParameterizedMessage("failed to create repository [{}]",repositoryMetaData.name()),ex);
          }
        }
        if (repository != null) {
          logger.debug("registering repository [{}]",repositoryMetaData.name());
          builder.put(repositoryMetaData.name(),repository);
        }
      }
    }
    repositories=Collections.unmodifiableMap(builder);
  }
 catch (  Exception ex) {
    logger.warn("failure updating cluster state ",ex);
  }
}
