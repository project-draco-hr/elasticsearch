{
  MapBinder<String,NativeScriptFactory> scriptsBinder=MapBinder.newMapBinder(binder(),String.class,NativeScriptFactory.class);
  for (  Map.Entry<String,Class<? extends NativeScriptFactory>> entry : scripts.entrySet()) {
    scriptsBinder.addBinding(entry.getKey()).to(entry.getValue()).asEagerSingleton();
  }
  Map<String,Settings> nativeSettings=settings.getGroups("script.native");
  for (  Map.Entry<String,Settings> entry : nativeSettings.entrySet()) {
    String name=entry.getKey();
    Class<? extends NativeScriptFactory> type=entry.getValue().getAsClass("type",NativeScriptFactory.class);
    if (type == NativeScriptFactory.class) {
      throw new ElasticsearchIllegalArgumentException("type is missing for native script [" + name + "]");
    }
    scriptsBinder.addBinding(name).to(type).asEagerSingleton();
  }
  Multibinder<ScriptEngineService> multibinder=Multibinder.newSetBinder(binder(),ScriptEngineService.class);
  multibinder.addBinding().to(NativeScriptEngineService.class);
  try {
    settings.getClassLoader().loadClass("groovy.lang.GroovyClassLoader");
    multibinder.addBinding().to(GroovyScriptEngineService.class).asEagerSingleton();
  }
 catch (  Throwable t) {
    Loggers.getLogger(ScriptService.class,settings).debug("failed to load groovy",t);
  }
  try {
    settings.getClassLoader().loadClass("com.github.mustachejava.Mustache");
    multibinder.addBinding().to(MustacheScriptEngineService.class).asEagerSingleton();
  }
 catch (  Throwable t) {
    Loggers.getLogger(ScriptService.class,settings).debug("failed to load mustache",t);
  }
  try {
    settings.getClassLoader().loadClass("org.apache.lucene.expressions.Expression");
    multibinder.addBinding().to(ExpressionScriptEngineService.class).asEagerSingleton();
  }
 catch (  Throwable t) {
    Loggers.getLogger(ScriptService.class,settings).debug("failed to load lucene expressions",t);
  }
  for (  Class<? extends ScriptEngineService> scriptEngine : scriptEngines) {
    multibinder.addBinding().to(scriptEngine).asEagerSingleton();
  }
  bind(ScriptContextRegistry.class).toInstance(new ScriptContextRegistry(customScriptContexts));
  bind(ScriptService.class).asEagerSingleton();
}
