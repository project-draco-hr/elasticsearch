{
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled",true).field("store","yes").field("index","analyzed").field("path","foo").field("default","1970-01-01").endObject().endObject().endObject().string();
  Settings indexSettings=Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED,Version.V_1_4_2.id).build();
  MapperService mapperService=createIndex("test",indexSettings).mapperService();
  DocumentMapper docMapper=mapperService.merge("type",new CompressedXContent(mapping),true,false);
  assertThat(docMapper.timestampFieldMapper().fieldType().fieldDataType().getLoading(),equalTo(MappedFieldType.Loading.LAZY));
  mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled",false).startObject("fielddata").field("format","array").endObject().field("store","no").field("index","no").field("path","foo").field("default","1970-01-01").endObject().endObject().endObject().string();
  try {
    mapperService.merge("type",new CompressedXContent(mapping),false,false);
    fail();
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage(),containsString("mapper [_timestamp] has different [index] values"));
    assertThat(e.getMessage(),containsString("mapper [_timestamp] has different [store] values"));
  }
  mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled",false).startObject("fielddata").field("format","array").endObject().field("store","yes").field("index","analyzed").field("path","bar").field("default","1970-01-02").endObject().endObject().endObject().string();
  try {
    mapperService.merge("type",new CompressedXContent(mapping),false,false);
    fail();
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage(),containsString("Cannot update default in _timestamp value"));
    assertThat(e.getMessage(),containsString("Cannot update path in _timestamp value"));
  }
  assertThat(docMapper.timestampFieldMapper().fieldType().fieldDataType().getLoading(),equalTo(MappedFieldType.Loading.LAZY));
  assertTrue(docMapper.timestampFieldMapper().enabled());
  mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled",true).field("store","yes").field("index","analyzed").field("path","bar").field("default","1970-01-02").endObject().endObject().endObject().string();
  try {
    mapperService.merge("type",new CompressedXContent(mapping),false,false);
    fail();
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage(),containsString("Cannot update default in _timestamp value. Value is 1970-01-01 now encountering 1970-01-02"));
    assertThat(e.getMessage(),containsString("Cannot update path in _timestamp value. Value is foo path in merged mapping is bar"));
  }
}
