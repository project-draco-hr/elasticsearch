{
  super(settings);
  final Type type=Type.parse(componentSettings.get(TYPE));
  final long limit=componentSettings.getAsMemory(LIMIT_HEAP,"10%").bytes();
  final int availableProcessors=EsExecutors.boundedNumberOfProcessors(settings);
  final int searchThreadPoolSize=maximumSearchThreadPoolSize(threadPool,settings);
  final double bytesWeight=componentSettings.getAsDouble(WEIGHT + ".bytes",1d);
  final double intsWeight=componentSettings.getAsDouble(WEIGHT + ".ints",1d);
  final double longsWeight=componentSettings.getAsDouble(WEIGHT + ".longs",1d);
  final double doublesWeight=componentSettings.getAsDouble(WEIGHT + ".doubles",1d);
  final double objectsWeight=componentSettings.getAsDouble(WEIGHT + ".objects",0.1d);
  final double totalWeight=bytesWeight + intsWeight + longsWeight+ doublesWeight+ objectsWeight;
  bytePage=build(type,maxCount(limit,BigArrays.BYTE_PAGE_SIZE,bytesWeight,totalWeight),searchThreadPoolSize,availableProcessors,new Recycler.C<byte[]>(){
    @Override public byte[] newInstance(    int sizing){
      return new byte[BigArrays.BYTE_PAGE_SIZE];
    }
    @Override public void clear(    byte[] value){
    }
  }
);
  intPage=build(type,maxCount(limit,BigArrays.INT_PAGE_SIZE,intsWeight,totalWeight),searchThreadPoolSize,availableProcessors,new Recycler.C<int[]>(){
    @Override public int[] newInstance(    int sizing){
      return new int[BigArrays.INT_PAGE_SIZE];
    }
    @Override public void clear(    int[] value){
    }
  }
);
  longPage=build(type,maxCount(limit,BigArrays.LONG_PAGE_SIZE,longsWeight,totalWeight),searchThreadPoolSize,availableProcessors,new Recycler.C<long[]>(){
    @Override public long[] newInstance(    int sizing){
      return new long[BigArrays.LONG_PAGE_SIZE];
    }
    @Override public void clear(    long[] value){
    }
  }
);
  doublePage=build(type,maxCount(limit,BigArrays.DOUBLE_PAGE_SIZE,doublesWeight,totalWeight),searchThreadPoolSize,availableProcessors,new Recycler.C<double[]>(){
    @Override public double[] newInstance(    int sizing){
      return new double[BigArrays.DOUBLE_PAGE_SIZE];
    }
    @Override public void clear(    double[] value){
    }
  }
);
  objectPage=build(type,maxCount(limit,BigArrays.OBJECT_PAGE_SIZE,objectsWeight,totalWeight),searchThreadPoolSize,availableProcessors,new Recycler.C<Object[]>(){
    @Override public Object[] newInstance(    int sizing){
      return new Object[BigArrays.OBJECT_PAGE_SIZE];
    }
    @Override public void clear(    Object[] value){
      Arrays.fill(value,null);
    }
  }
);
}
