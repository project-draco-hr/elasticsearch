{
  int iterations=randomIntBetween(10,100);
  for (int i=0; i < iterations; i++) {
    Version version=randomVersion(random());
    EnumSet<ClusterBlockLevel> levels=EnumSet.noneOf(ClusterBlockLevel.class);
    int nbLevels=randomIntBetween(1,ClusterBlockLevel.values().length);
    for (int j=0; j < nbLevels; j++) {
      levels.add(randomFrom(ClusterBlockLevel.values()));
    }
    ClusterBlock clusterBlock=new ClusterBlock(randomInt(),"cluster block #" + randomInt(),randomBoolean(),randomBoolean(),randomFrom(RestStatus.values()),levels);
    BytesStreamOutput out=new BytesStreamOutput();
    out.setVersion(version);
    clusterBlock.writeTo(out);
    BytesStreamInput in=new BytesStreamInput(out.bytes());
    in.setVersion(version);
    ClusterBlock result=ClusterBlock.readClusterBlock(in);
    assertThat(result.id(),equalTo(clusterBlock.id()));
    assertThat(result.status(),equalTo(clusterBlock.status()));
    assertThat(result.description(),equalTo(clusterBlock.description()));
    assertThat(result.retryable(),equalTo(clusterBlock.retryable()));
    assertThat(result.disableStatePersistence(),equalTo(clusterBlock.disableStatePersistence()));
    assertArrayEquals(result.levels().toArray(),clusterBlock.levels().toArray());
  }
}
