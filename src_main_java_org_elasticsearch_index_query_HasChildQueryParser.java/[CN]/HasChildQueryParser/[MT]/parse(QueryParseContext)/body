{
  XContentParser parser=parseContext.parser();
  Query innerQuery=null;
  boolean queryFound=false;
  float boost=1.0f;
  String childType=null;
  ScoreType scoreType=null;
  int shortCircuitParentDocSet=8192;
  String queryName=null;
  String currentFieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("query".equals(currentFieldName)) {
        String[] origTypes=QueryParseContext.setTypesWithPrevious(childType == null ? null : new String[]{childType});
        try {
          innerQuery=parseContext.parseInnerQuery();
          queryFound=true;
        }
  finally {
          QueryParseContext.setTypes(origTypes);
        }
      }
 else {
        throw new QueryParsingException(parseContext.index(),"[has_child] query does not support [" + currentFieldName + "]");
      }
    }
 else     if (token.isValue()) {
      if ("type".equals(currentFieldName) || "child_type".equals(currentFieldName) || "childType".equals(currentFieldName)) {
        childType=parser.text();
      }
 else       if ("_scope".equals(currentFieldName)) {
        throw new QueryParsingException(parseContext.index(),"the [_scope] support in [has_child] query has been removed, use a filter as a facet_filter in the relevant global facet");
      }
 else       if ("score_type".equals(currentFieldName) || "scoreType".equals(currentFieldName)) {
        String scoreTypeValue=parser.text();
        if (!"none".equals(scoreTypeValue)) {
          scoreType=ScoreType.fromString(scoreTypeValue);
        }
      }
 else       if ("score_mode".equals(currentFieldName) || "scoreMode".equals(currentFieldName)) {
        String scoreModeValue=parser.text();
        if (!"none".equals(scoreModeValue)) {
          scoreType=ScoreType.fromString(scoreModeValue);
        }
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=parser.floatValue();
      }
 else       if ("short_circuit_cutoff".equals(currentFieldName)) {
        shortCircuitParentDocSet=parser.intValue();
      }
 else       if ("_name".equals(currentFieldName)) {
        queryName=parser.text();
      }
 else {
        throw new QueryParsingException(parseContext.index(),"[has_child] query does not support [" + currentFieldName + "]");
      }
    }
  }
  if (!queryFound) {
    throw new QueryParsingException(parseContext.index(),"[has_child] requires 'query' field");
  }
  if (innerQuery == null) {
    return null;
  }
  if (childType == null) {
    throw new QueryParsingException(parseContext.index(),"[has_child] requires 'type' field");
  }
  innerQuery.setBoost(boost);
  DocumentMapper childDocMapper=parseContext.mapperService().documentMapper(childType);
  if (childDocMapper == null) {
    throw new QueryParsingException(parseContext.index(),"[has_child] No mapping for for type [" + childType + "]");
  }
  if (!childDocMapper.parentFieldMapper().active()) {
    throw new QueryParsingException(parseContext.index(),"[has_child]  Type [" + childType + "] does not have parent mapping");
  }
  String parentType=childDocMapper.parentFieldMapper().type();
  DocumentMapper parentDocMapper=parseContext.mapperService().documentMapper(parentType);
  if (parentDocMapper == null) {
    throw new QueryParsingException(parseContext.index(),"[has_child]  Type [" + childType + "] points to a non existent parent type ["+ parentType+ "]");
  }
  Filter nonNestedDocsFilter=null;
  if (parentDocMapper.hasNestedObjects()) {
    nonNestedDocsFilter=parseContext.cacheFilter(NonNestedDocsFilter.INSTANCE,null);
  }
  innerQuery=new XFilteredQuery(innerQuery,parseContext.cacheFilter(childDocMapper.typeFilter(),null));
  boolean deleteByQuery="delete_by_query".equals(SearchContext.current().source());
  Query query;
  Filter parentFilter=parseContext.cacheFilter(parentDocMapper.typeFilter(),null);
  if (!deleteByQuery && scoreType != null) {
    query=new ChildrenQuery(parentType,childType,parentFilter,innerQuery,scoreType,shortCircuitParentDocSet,nonNestedDocsFilter);
  }
 else {
    query=new ChildrenConstantScoreQuery(innerQuery,parentType,childType,parentFilter,shortCircuitParentDocSet,nonNestedDocsFilter);
    if (deleteByQuery) {
      query=new XConstantScoreQuery(new DeleteByQueryWrappingFilter(query));
    }
  }
  if (queryName != null) {
    parseContext.addNamedFilter(queryName,new CustomQueryWrappingFilter(query));
  }
  query.setBoost(boost);
  return query;
}
