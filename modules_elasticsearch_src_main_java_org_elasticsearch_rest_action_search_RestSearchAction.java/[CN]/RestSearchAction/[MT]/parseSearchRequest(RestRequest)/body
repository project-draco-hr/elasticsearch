{
  String[] indices=RestActions.splitIndices(request.param("index"));
  SearchRequest searchRequest=new SearchRequest(indices,parseSearchSource(request));
  String searchType=request.param("searchType");
  if (searchType != null) {
    if ("dfs_query_then_fetch".equals(searchType)) {
      searchRequest.searchType(SearchType.DFS_QUERY_THEN_FETCH);
    }
 else     if ("dfs_query_and_fetch".equals(searchType)) {
      searchRequest.searchType(SearchType.DFS_QUERY_AND_FETCH);
    }
 else     if ("query_then_fetch".equals(searchType)) {
      searchRequest.searchType(SearchType.QUERY_THEN_FETCH);
    }
 else     if ("query_and_fetch".equals(searchType)) {
      searchRequest.searchType(SearchType.QUERY_AND_FETCH);
    }
 else {
      throw new ElasticSearchIllegalArgumentException("No search type for [" + searchType + "]");
    }
  }
 else {
    searchRequest.searchType(SearchType.QUERY_THEN_FETCH);
  }
  String from=request.param("from");
  if (from != null) {
    searchRequest.from(Integer.parseInt(from));
  }
  String size=request.param("size");
  if (size != null) {
    searchRequest.size(Integer.parseInt(size));
  }
  String scroll=request.param("scroll");
  if (scroll != null) {
    searchRequest.scroll(new Scroll(TimeValue.parseTimeValue(scroll,null)));
  }
  String timeout=request.param("timeout");
  if (timeout != null) {
    searchRequest.timeout(TimeValue.parseTimeValue(timeout,null));
  }
  String typesParam=request.param("type");
  if (typesParam != null) {
    searchRequest.types(RestActions.splitTypes(typesParam));
  }
  searchRequest.queryHint(request.param("queryHint"));
  return searchRequest;
}
