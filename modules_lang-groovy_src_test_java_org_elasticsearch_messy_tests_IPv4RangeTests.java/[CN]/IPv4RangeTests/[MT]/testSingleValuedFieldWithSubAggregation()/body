{
  SearchResponse response=client().prepareSearch("idx").addAggregation(ipRange("range").field("ip").addUnboundedTo("10.0.0.100").addRange("10.0.0.100","10.0.0.200").addUnboundedFrom("10.0.0.200").subAggregation(sum("sum").field("value"))).execute().actionGet();
  assertSearchResponse(response);
  Range range=response.getAggregations().get("range");
  assertThat(range,notNullValue());
  assertThat(range.getName(),equalTo("range"));
  List<? extends Bucket> buckets=range.getBuckets();
  assertThat(range.getBuckets().size(),equalTo(3));
  Object[] propertiesKeys=(Object[])range.getProperty("_key");
  Object[] propertiesDocCounts=(Object[])range.getProperty("_count");
  Object[] propertiesCounts=(Object[])range.getProperty("sum.value");
  Range.Bucket bucket=buckets.get(0);
  assertThat(bucket,notNullValue());
  assertThat((String)bucket.getKey(),equalTo("*-10.0.0.100"));
  assertThat(((Number)bucket.getFrom()).doubleValue(),equalTo(Double.NEGATIVE_INFINITY));
  assertThat(bucket.getFromAsString(),nullValue());
  assertThat(bucket.getToAsString(),equalTo("10.0.0.100"));
  assertThat(((Number)bucket.getTo()).doubleValue(),equalTo((double)LegacyIpFieldMapper.ipToLong("10.0.0.100")));
  assertThat(bucket.getDocCount(),equalTo(100L));
  Sum sum=bucket.getAggregations().get("sum");
  assertThat(sum,notNullValue());
  assertThat(sum.getValue(),equalTo((double)100));
  assertThat((String)propertiesKeys[0],equalTo("*-10.0.0.100"));
  assertThat((long)propertiesDocCounts[0],equalTo(100L));
  assertThat((double)propertiesCounts[0],equalTo((double)100));
  bucket=buckets.get(1);
  assertThat(bucket,notNullValue());
  assertThat((String)bucket.getKey(),equalTo("10.0.0.100-10.0.0.200"));
  assertThat(bucket.getFromAsString(),equalTo("10.0.0.100"));
  assertThat(((Number)bucket.getFrom()).doubleValue(),equalTo((double)LegacyIpFieldMapper.ipToLong("10.0.0.100")));
  assertThat(bucket.getToAsString(),equalTo("10.0.0.200"));
  assertThat(((Number)bucket.getTo()).doubleValue(),equalTo((double)LegacyIpFieldMapper.ipToLong("10.0.0.200")));
  assertThat(bucket.getDocCount(),equalTo(100L));
  sum=bucket.getAggregations().get("sum");
  assertThat(sum,notNullValue());
  assertThat(sum.getValue(),equalTo((double)200));
  assertThat((String)propertiesKeys[1],equalTo("10.0.0.100-10.0.0.200"));
  assertThat((long)propertiesDocCounts[1],equalTo(100L));
  assertThat((double)propertiesCounts[1],equalTo((double)200));
  bucket=buckets.get(2);
  assertThat(bucket,notNullValue());
  assertThat((String)bucket.getKey(),equalTo("10.0.0.200-*"));
  assertThat(bucket.getFromAsString(),equalTo("10.0.0.200"));
  assertThat(((Number)bucket.getFrom()).doubleValue(),equalTo((double)LegacyIpFieldMapper.ipToLong("10.0.0.200")));
  assertThat(((Number)bucket.getTo()).doubleValue(),equalTo(Double.POSITIVE_INFINITY));
  assertThat(bucket.getToAsString(),nullValue());
  assertThat(bucket.getDocCount(),equalTo(55L));
  sum=bucket.getAggregations().get("sum");
  assertThat(sum,notNullValue());
  assertThat(sum.getValue(),equalTo((double)55 * 3));
  assertThat((String)propertiesKeys[2],equalTo("10.0.0.200-*"));
  assertThat((long)propertiesDocCounts[2],equalTo(55L));
  assertThat((double)propertiesCounts[2],equalTo((double)55 * 3));
}
