{
  SearchResponse response=client().prepareSearch("idx").addAggregation(ipRange("range").field("ip").addMaskRange("10.0.0.0/25").addMaskRange("10.0.0.128/25")).execute().actionGet();
  assertSearchResponse(response);
  Range range=response.getAggregations().get("range");
  assertThat(range,notNullValue());
  assertThat(range.getName(),equalTo("range"));
  List<? extends Bucket> buckets=range.getBuckets();
  assertThat(range.getBuckets().size(),equalTo(2));
  Range.Bucket bucket=buckets.get(0);
  assertThat(bucket,notNullValue());
  assertThat((String)bucket.getKey(),equalTo("10.0.0.0/25"));
  assertThat(((Number)bucket.getFrom()).doubleValue(),equalTo((double)IpFieldMapper.ipToLong("10.0.0.0")));
  assertThat(bucket.getFromAsString(),equalTo("10.0.0.0"));
  assertThat(((Number)bucket.getTo()).doubleValue(),equalTo((double)IpFieldMapper.ipToLong("10.0.0.128")));
  assertThat(bucket.getToAsString(),equalTo("10.0.0.128"));
  assertThat(bucket.getDocCount(),equalTo(128L));
  bucket=buckets.get(1);
  assertThat(bucket,notNullValue());
  assertThat((String)bucket.getKey(),equalTo("10.0.0.128/25"));
  assertThat((long)((Number)bucket.getFrom()).doubleValue(),equalTo(IpFieldMapper.ipToLong("10.0.0.128")));
  assertThat(bucket.getFromAsString(),equalTo("10.0.0.128"));
  assertThat((long)((Number)bucket.getTo()).doubleValue(),equalTo(IpFieldMapper.ipToLong("10.0.1.0")));
  assertThat(bucket.getToAsString(),equalTo("10.0.1.0"));
  assertThat(bucket.getDocCount(),equalTo(127L));
}
