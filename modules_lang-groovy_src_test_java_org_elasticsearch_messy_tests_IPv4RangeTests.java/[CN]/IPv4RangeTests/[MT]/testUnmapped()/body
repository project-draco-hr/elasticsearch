{
  SearchResponse response=client().prepareSearch("idx_unmapped").addAggregation(ipRange("range").field("ip").addUnboundedTo("10.0.0.100").addRange("10.0.0.100","10.0.0.200").addUnboundedFrom("10.0.0.200")).execute().actionGet();
  assertSearchResponse(response);
  Range range=response.getAggregations().get("range");
  assertThat(range,notNullValue());
  assertThat(range.getName(),equalTo("range"));
  List<? extends Bucket> buckets=range.getBuckets();
  assertThat(range.getBuckets().size(),equalTo(3));
  Range.Bucket bucket=buckets.get(0);
  assertThat(bucket,notNullValue());
  assertThat((String)bucket.getKey(),equalTo("*-10.0.0.100"));
  assertThat(((Number)bucket.getFrom()).doubleValue(),equalTo(Double.NEGATIVE_INFINITY));
  assertThat(bucket.getFromAsString(),nullValue());
  assertThat(bucket.getToAsString(),equalTo("10.0.0.100"));
  assertThat(((Number)bucket.getTo()).doubleValue(),equalTo((double)IpFieldMapper.ipToLong("10.0.0.100")));
  assertThat(bucket.getDocCount(),equalTo(0l));
  bucket=buckets.get(1);
  assertThat(bucket,notNullValue());
  assertThat((String)bucket.getKey(),equalTo("10.0.0.100-10.0.0.200"));
  assertThat(bucket.getFromAsString(),equalTo("10.0.0.100"));
  assertThat(((Number)bucket.getFrom()).doubleValue(),equalTo((double)IpFieldMapper.ipToLong("10.0.0.100")));
  assertThat(bucket.getToAsString(),equalTo("10.0.0.200"));
  assertThat(((Number)bucket.getTo()).doubleValue(),equalTo((double)IpFieldMapper.ipToLong("10.0.0.200")));
  assertThat(bucket.getDocCount(),equalTo(0l));
  bucket=buckets.get(2);
  assertThat(bucket,notNullValue());
  assertThat((String)bucket.getKey(),equalTo("10.0.0.200-*"));
  assertThat(bucket.getFromAsString(),equalTo("10.0.0.200"));
  assertThat(((Number)bucket.getFrom()).doubleValue(),equalTo((double)IpFieldMapper.ipToLong("10.0.0.200")));
  assertThat(((Number)bucket.getTo()).doubleValue(),equalTo(Double.POSITIVE_INFINITY));
  assertThat(bucket.getToAsString(),nullValue());
  assertThat(bucket.getDocCount(),equalTo(0l));
}
