{
  FakeFsDirectory[] directories=new FakeFsDirectory[]{new FakeFsDirectory("dir0",10L),new FakeFsDirectory("dir1",20L),new FakeFsDirectory("dir2",30L)};
  FakeDirectoryService directoryService=new FakeDirectoryService(directories);
  LeastUsedDistributor distributor=new LeastUsedDistributor(directoryService);
  for (int i=0; i < 5; i++) {
    assertThat(distributor.any(),equalTo((Directory)directories[2]));
  }
  directories[2].setUsableSpace(5L);
  for (int i=0; i < 5; i++) {
    assertThat(distributor.any(),equalTo((Directory)directories[1]));
  }
  directories[1].setUsableSpace(0L);
  for (int i=0; i < 5; i++) {
    assertThat(distributor.any(),equalTo((Directory)directories[0]));
  }
  directories[0].setUsableSpace(10L);
  directories[1].setUsableSpace(20L);
  directories[2].setUsableSpace(20L);
  for (  FakeFsDirectory directory : directories) {
    directory.resetAllocationCount();
  }
  for (int i=0; i < 10000; i++) {
    ((FakeFsDirectory)distributor.any()).incrementAllocationCount();
  }
  assertThat(directories[0].getAllocationCount(),equalTo(0));
  assertThat((double)directories[1].getAllocationCount() / directories[2].getAllocationCount(),closeTo(1.0,0.5));
  for (  FakeFsDirectory directory : directories) {
    directory.resetAllocationCount();
  }
  directories[0].setUsableSpace(0L);
  directories[1].setUsableSpace(0L);
  directories[2].setUsableSpace(0L);
  for (int i=0; i < 10000; i++) {
    ((FakeFsDirectory)distributor.any()).incrementAllocationCount();
  }
  for (  FakeFsDirectory directory : directories) {
    assertThat(directory.getAllocationCount(),greaterThan(0));
  }
  assertThat((double)directories[0].getAllocationCount() / directories[2].getAllocationCount(),closeTo(1.0,0.5));
  assertThat((double)directories[1].getAllocationCount() / directories[2].getAllocationCount(),closeTo(1.0,0.5));
}
