{
  final ClusterUpdateSettingsRequest clusterUpdateSettingsRequest=Requests.clusterUpdateSettingsRequest();
  clusterUpdateSettingsRequest.listenerThreaded(false);
  clusterUpdateSettingsRequest.masterNodeTimeout(request.paramAsTime("master_timeout",clusterUpdateSettingsRequest.masterNodeTimeout()));
  try {
    Map<String,Object> source=XContentFactory.xContent(request.content()).createParser(request.content()).mapAndClose();
    if (source.containsKey("transient")) {
      clusterUpdateSettingsRequest.transientSettings((Map)source.get("transient"));
    }
    if (source.containsKey("persistent")) {
      clusterUpdateSettingsRequest.persistentSettings((Map)source.get("persistent"));
    }
  }
 catch (  Exception e) {
    try {
      channel.sendResponse(new XContentThrowableRestResponse(request,e));
    }
 catch (    IOException e1) {
      logger.warn("Failed to send response",e1);
    }
    return;
  }
  client.admin().cluster().updateSettings(clusterUpdateSettingsRequest,new ActionListener<ClusterUpdateSettingsResponse>(){
    @Override public void onResponse(    ClusterUpdateSettingsResponse response){
      try {
        XContentBuilder builder=RestXContentBuilder.restContentBuilder(request);
        builder.startObject();
        builder.startObject("persistent");
        for (        Map.Entry<String,String> entry : response.getPersistentSettings().getAsMap().entrySet()) {
          builder.field(entry.getKey(),entry.getValue());
        }
        builder.endObject();
        builder.startObject("transient");
        for (        Map.Entry<String,String> entry : response.getTransientSettings().getAsMap().entrySet()) {
          builder.field(entry.getKey(),entry.getValue());
        }
        builder.endObject();
        builder.endObject();
        channel.sendResponse(new XContentRestResponse(request,RestStatus.OK,builder));
      }
 catch (      Throwable e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      if (logger.isDebugEnabled()) {
        logger.debug("failed to handle cluster state",e);
      }
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
