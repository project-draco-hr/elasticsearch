{
  return new MetaDataStateFormat<ShardStateMetaData>(XContentType.JSON,deleteOldFiles){
    @Override protected XContentBuilder newXContentBuilder(    XContentType type,    OutputStream stream) throws IOException {
      XContentBuilder xContentBuilder=super.newXContentBuilder(type,stream);
      xContentBuilder.prettyPrint();
      return xContentBuilder;
    }
    @Override public void toXContent(    XContentBuilder builder,    ShardStateMetaData shardStateMetaData) throws IOException {
      builder.field(VERSION_KEY,shardStateMetaData.version);
      builder.field(PRIMARY_KEY,shardStateMetaData.primary);
      builder.field(INDEX_UUID_KEY,shardStateMetaData.indexUUID);
    }
    @Override public ShardStateMetaData fromXContent(    XContentParser parser) throws IOException {
      XContentParser.Token token=parser.nextToken();
      if (token == null) {
        return null;
      }
      long version=-1;
      Boolean primary=null;
      String currentFieldName=null;
      String indexUUID=IndexMetaData.INDEX_UUID_NA_VALUE;
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          currentFieldName=parser.currentName();
        }
 else         if (token.isValue()) {
          if (VERSION_KEY.equals(currentFieldName)) {
            version=parser.longValue();
          }
 else           if (PRIMARY_KEY.equals(currentFieldName)) {
            primary=parser.booleanValue();
          }
 else           if (INDEX_UUID_KEY.equals(currentFieldName)) {
            indexUUID=parser.text();
          }
 else {
            throw new CorruptStateException("unexpected field in shard state [" + currentFieldName + "]");
          }
        }
 else {
          throw new CorruptStateException("unexpected token in shard state [" + token.name() + "]");
        }
      }
      if (primary == null) {
        throw new CorruptStateException("missing value for [primary] in shard state");
      }
      if (version == -1) {
        throw new CorruptStateException("missing value for [version] in shard state");
      }
      return new ShardStateMetaData(version,primary,indexUUID);
    }
  }
;
}
