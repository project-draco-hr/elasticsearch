{
  super(settings);
  this.blobStoreContext=blobStoreContext;
  this.container=container;
  this.bufferSizeInBytes=(int)settings.getAsBytesSize("buffer_size",new ByteSizeValue(100,ByteSizeUnit.KB)).bytes();
  this.executorService=Executors.newCachedThreadPool(daemonThreadFactory(settings,"cloud_blobstore"));
  if (location == null) {
    this.location=null;
  }
 else {
    Location matchedLocation=null;
    Set<? extends Location> assignableLocations=blobStoreContext.getBlobStore().listAssignableLocations();
    for (    Location oLocation : assignableLocations) {
      if (oLocation.getId().equals(location)) {
        matchedLocation=oLocation;
        break;
      }
    }
    this.location=matchedLocation;
    if (this.location == null) {
      throw new ElasticSearchIllegalArgumentException("Not a valid location [" + location + "], available locations "+ assignableLocations);
    }
  }
  logger.debug("Using location [{}], container [{}]",this.location,this.container);
  sync().createContainerInLocation(this.location,container);
}
