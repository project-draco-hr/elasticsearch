{
  IndexService indexService=indicesService.indexService(request.getIndex());
  IndexShard indexShard=indexService.shardSafe(shardId);
  Term uidTerm=new Term(UidFieldMapper.NAME,Uid.createUidAsBytes(request.getType(),request.getId()));
  Engine.GetResult result=indexShard.get(new Engine.Get(false,uidTerm));
  if (!result.exists()) {
    return new ExplainResponse(false);
  }
  SearchContext context=new SearchContext(0,new ShardSearchRequest().types(new String[]{request.getType()}).filteringAliases(request.getFilteringAlias()),null,result.searcher(),indexService,indexShard,scriptService);
  SearchContext.setCurrent(context);
  try {
    context.parsedQuery(parseQuery(request,indexService));
    context.preProcess();
    int topLevelDocId=result.docIdAndVersion().docId + result.docIdAndVersion().reader.docBase;
    Explanation explanation;
    if (context.rescore() != null) {
      RescoreSearchContext ctx=context.rescore();
      Rescorer rescorer=ctx.rescorer();
      explanation=rescorer.explain(topLevelDocId,context,ctx);
    }
 else {
      explanation=context.searcher().explain(context.query(),topLevelDocId);
    }
    if (request.getFields() != null) {
      if (request.getFields().length == 1 && "_source".equals(request.getFields()[0])) {
        request.setFields(null);
      }
      GetResult getResult=indexShard.getService().get(result,request.getId(),request.getType(),request.getFields());
      return new ExplainResponse(true,explanation,getResult);
    }
 else {
      return new ExplainResponse(true,explanation);
    }
  }
 catch (  IOException e) {
    throw new ElasticSearchException("Could not explain",e);
  }
 finally {
    context.release();
    SearchContext.removeCurrent();
  }
}
