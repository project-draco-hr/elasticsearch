{
  IndexService indexService=indicesService.indexService(request.index());
  IndexShard indexShard=indexService.shardSafe(shardId);
  Term uidTerm=new Term(UidFieldMapper.NAME,Uid.createUidAsBytes(request.type(),request.id()));
  Engine.GetResult result=indexShard.get(new Engine.Get(false,uidTerm));
  if (!result.exists()) {
    return new ExplainResponse(false);
  }
  SearchContext context=new DefaultSearchContext(0,new ShardSearchRequest().types(new String[]{request.type()}).filteringAliases(request.filteringAlias()),null,result.searcher(),indexService,indexShard,scriptService,cacheRecycler);
  SearchContext.setCurrent(context);
  try {
    context.parsedQuery(parseQuery(request,indexService));
    context.preProcess();
    int topLevelDocId=result.docIdAndVersion().docId + result.docIdAndVersion().context.docBase;
    Explanation explanation;
    if (context.rescore() != null) {
      RescoreSearchContext ctx=context.rescore();
      Rescorer rescorer=ctx.rescorer();
      explanation=rescorer.explain(topLevelDocId,context,ctx);
    }
 else {
      explanation=context.searcher().explain(context.query(),topLevelDocId);
    }
    if (request.fields() != null || (request.fetchSourceContext() != null && request.fetchSourceContext().fetchSource())) {
      GetResult getResult=indexShard.getService().get(result,request.id(),request.type(),request.fields(),request.fetchSourceContext());
      return new ExplainResponse(true,explanation,getResult);
    }
 else {
      return new ExplainResponse(true,explanation);
    }
  }
 catch (  IOException e) {
    throw new ElasticSearchException("Could not explain",e);
  }
 finally {
    context.release();
    SearchContext.removeCurrent();
  }
}
