{
  Map<String,Object> source=templateSource;
  for (  Map.Entry<String,Object> entry : source.entrySet()) {
    String name=entry.getKey();
    if (name.equals("template")) {
      template(entry.getValue().toString());
    }
 else     if (name.equals("order")) {
      order(XContentMapValues.nodeIntegerValue(entry.getValue(),order()));
    }
 else     if (name.equals("settings")) {
      if (!(entry.getValue() instanceof Map)) {
        throw new ElasticsearchIllegalArgumentException("Malformed settings section, should include an inner object");
      }
      settings((Map<String,Object>)entry.getValue());
    }
 else     if (name.equals("mappings")) {
      Map<String,Object> mappings=(Map<String,Object>)entry.getValue();
      for (      Map.Entry<String,Object> entry1 : mappings.entrySet()) {
        if (!(entry1.getValue() instanceof Map)) {
          throw new ElasticsearchIllegalArgumentException("Malformed mappings section for type [" + entry1.getKey() + "], should include an inner object describing the mapping");
        }
        mapping(entry1.getKey(),(Map<String,Object>)entry1.getValue());
      }
    }
 else     if (name.equals("aliases")) {
      aliases((Map<String,Object>)entry.getValue());
    }
 else {
      IndexMetaData.Custom.Factory factory=IndexMetaData.lookupFactory(name);
      if (factory != null) {
        try {
          customs.put(name,factory.fromMap((Map<String,Object>)entry.getValue()));
        }
 catch (        IOException e) {
          throw new ElasticsearchParseException("failed to parse custom metadata for [" + name + "]");
        }
      }
    }
  }
  return this;
}
