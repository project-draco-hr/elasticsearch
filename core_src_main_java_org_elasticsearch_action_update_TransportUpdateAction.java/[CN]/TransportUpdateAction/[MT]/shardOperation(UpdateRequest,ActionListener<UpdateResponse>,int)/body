{
  final ShardId shardId=request.getShardId();
  final IndexService indexService=indicesService.indexServiceSafe(shardId.getIndex());
  final IndexShard indexShard=indexService.getShard(shardId.getId());
  final UpdateHelper.Result result=updateHelper.prepare(request,indexShard);
switch (result.getResponseResult()) {
case CREATED:
    IndexRequest upsertRequest=result.action();
  final BytesReference upsertSourceBytes=upsertRequest.source();
indexAction.execute(upsertRequest,new ActionListener<IndexResponse>(){
  @Override public void onResponse(  IndexResponse response){
    UpdateResponse update=new UpdateResponse(response.getShardInfo(),response.getShardId(),response.getType(),response.getId(),response.getVersion(),response.getResult());
    if ((request.fetchSource() != null && request.fetchSource().fetchSource()) || (request.fields() != null && request.fields().length > 0)) {
      Tuple<XContentType,Map<String,Object>> sourceAndContent=XContentHelper.convertToMap(upsertSourceBytes,true);
      update.setGetResult(updateHelper.extractGetResult(request,request.concreteIndex(),response.getVersion(),sourceAndContent.v2(),sourceAndContent.v1(),upsertSourceBytes));
    }
 else {
      update.setGetResult(null);
    }
    update.setForcedRefresh(response.forcedRefresh());
    listener.onResponse(update);
  }
  @Override public void onFailure(  Exception e){
    final Throwable cause=ExceptionsHelper.unwrapCause(e);
    if (cause instanceof VersionConflictEngineException) {
      if (retryCount < request.retryOnConflict()) {
        logger.trace("Retry attempt [{}] of [{}] on version conflict on [{}][{}][{}]",retryCount + 1,request.retryOnConflict(),request.index(),request.getShardId(),request.id());
        threadPool.executor(executor()).execute(new ActionRunnable<UpdateResponse>(listener){
          @Override protected void doRun(){
            shardOperation(request,listener,retryCount + 1);
          }
        }
);
        return;
      }
    }
    listener.onFailure(cause instanceof Exception ? (Exception)cause : new NotSerializableExceptionWrapper(cause));
  }
}
);
break;
case UPDATED:
IndexRequest indexRequest=result.action();
final BytesReference indexSourceBytes=indexRequest.source();
indexAction.execute(indexRequest,new ActionListener<IndexResponse>(){
@Override public void onResponse(IndexResponse response){
UpdateResponse update=new UpdateResponse(response.getShardInfo(),response.getShardId(),response.getType(),response.getId(),response.getVersion(),response.getResult());
update.setGetResult(updateHelper.extractGetResult(request,request.concreteIndex(),response.getVersion(),result.updatedSourceAsMap(),result.updateSourceContentType(),indexSourceBytes));
update.setForcedRefresh(response.forcedRefresh());
listener.onResponse(update);
}
@Override public void onFailure(Exception e){
final Throwable cause=unwrapCause(e);
if (cause instanceof VersionConflictEngineException) {
if (retryCount < request.retryOnConflict()) {
threadPool.executor(executor()).execute(new ActionRunnable<UpdateResponse>(listener){
  @Override protected void doRun(){
    shardOperation(request,listener,retryCount + 1);
  }
}
);
return;
}
}
listener.onFailure(cause instanceof Exception ? (Exception)cause : new NotSerializableExceptionWrapper(cause));
}
}
);
break;
case DELETED:
DeleteRequest deleteRequest=result.action();
deleteAction.execute(deleteRequest,new ActionListener<DeleteResponse>(){
@Override public void onResponse(DeleteResponse response){
UpdateResponse update=new UpdateResponse(response.getShardInfo(),response.getShardId(),response.getType(),response.getId(),response.getVersion(),response.getResult());
update.setGetResult(updateHelper.extractGetResult(request,request.concreteIndex(),response.getVersion(),result.updatedSourceAsMap(),result.updateSourceContentType(),null));
update.setForcedRefresh(response.forcedRefresh());
listener.onResponse(update);
}
@Override public void onFailure(Exception e){
final Throwable cause=unwrapCause(e);
if (cause instanceof VersionConflictEngineException) {
if (retryCount < request.retryOnConflict()) {
threadPool.executor(executor()).execute(new ActionRunnable<UpdateResponse>(listener){
@Override protected void doRun(){
shardOperation(request,listener,retryCount + 1);
}
}
);
return;
}
}
listener.onFailure(cause instanceof Exception ? (Exception)cause : new NotSerializableExceptionWrapper(cause));
}
}
);
break;
case NOOP:
UpdateResponse update=result.action();
IndexService indexServiceOrNull=indicesService.indexService(shardId.getIndex());
if (indexServiceOrNull != null) {
IndexShard shard=indexService.getShardOrNull(shardId.getId());
if (shard != null) {
shard.noopUpdate(request.type());
}
}
listener.onResponse(update);
break;
default :
throw new IllegalStateException("Illegal result " + result.getResponseResult());
}
}
