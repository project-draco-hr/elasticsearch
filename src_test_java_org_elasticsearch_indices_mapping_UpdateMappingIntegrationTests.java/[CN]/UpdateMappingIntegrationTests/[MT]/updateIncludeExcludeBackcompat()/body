{
  assertAcked(prepareCreate("test").setSettings(IndexMetaData.SETTING_VERSION_CREATED,Version.V_1_4_2.id).addMapping("type",jsonBuilder().startObject().startObject("type").startObject("properties").startObject("normal").field("type","long").endObject().startObject("exclude").field("type","long").endObject().startObject("include").field("type","long").endObject().endObject().endObject().endObject()));
  ensureGreen();
  logger.info("Index doc");
  index("test","type","1",JsonXContent.contentBuilder().startObject().field("normal",1).field("exclude",1).field("include",1).endObject());
  refresh();
  logger.info("Adding exclude settings");
  PutMappingResponse putResponse=client().admin().indices().preparePutMapping("test").setType("type").setSource(JsonXContent.contentBuilder().startObject().startObject("type").startObject("_source").startArray("excludes").value("exclude").endArray().endObject().endObject()).get();
  assertTrue(putResponse.isAcknowledged());
  GetResponse getResponse=client().prepareGet("test","type","1").setRealtime(false).get();
  assertThat(getResponse.getSource(),hasKey("normal"));
  assertThat(getResponse.getSource(),hasKey("exclude"));
  assertThat(getResponse.getSource(),hasKey("include"));
  logger.info("Index doc again");
  index("test","type","1",JsonXContent.contentBuilder().startObject().field("normal",2).field("exclude",1).field("include",2).endObject());
  getResponse=get("test","type","1");
  assertThat(getResponse.getSource(),hasKey("normal"));
  assertThat(getResponse.getSource(),not(hasKey("exclude")));
  assertThat(getResponse.getSource(),hasKey("include"));
  logger.info("Changing mapping to includes");
  putResponse=client().admin().indices().preparePutMapping("test").setType("type").setSource(JsonXContent.contentBuilder().startObject().startObject("type").startObject("_source").startArray("excludes").endArray().startArray("includes").value("include").endArray().endObject().endObject()).get();
  assertTrue(putResponse.isAcknowledged());
  GetMappingsResponse getMappingsResponse=client().admin().indices().prepareGetMappings("test").get();
  MappingMetaData typeMapping=getMappingsResponse.getMappings().get("test").get("type");
  assertThat((Map<String,Object>)typeMapping.getSourceAsMap().get("_source"),hasKey("includes"));
  ArrayList<String> includes=(ArrayList<String>)((Map<String,Object>)typeMapping.getSourceAsMap().get("_source")).get("includes");
  assertThat(includes,contains("include"));
  assertThat((Map<String,Object>)typeMapping.getSourceAsMap().get("_source"),hasKey("excludes"));
  assertThat((ArrayList<String>)((Map<String,Object>)typeMapping.getSourceAsMap().get("_source")).get("excludes"),emptyIterable());
  logger.info("Indexing doc yet again");
  index("test","type","1",JsonXContent.contentBuilder().startObject().field("normal",3).field("exclude",3).field("include",3).endObject());
  getResponse=get("test","type","1");
  assertThat(getResponse.getSource(),not(hasKey("normal")));
  assertThat(getResponse.getSource(),not(hasKey("exclude")));
  assertThat(getResponse.getSource(),hasKey("include"));
  logger.info("Adding excludes, but keep includes");
  putResponse=client().admin().indices().preparePutMapping("test").setType("type").setSource(JsonXContent.contentBuilder().startObject().startObject("type").startObject("_source").startArray("excludes").value("*.excludes").endArray().endObject().endObject()).get();
  assertTrue(putResponse.isAcknowledged());
  getMappingsResponse=client().admin().indices().prepareGetMappings("test").get();
  typeMapping=getMappingsResponse.getMappings().get("test").get("type");
  assertThat((Map<String,Object>)typeMapping.getSourceAsMap().get("_source"),hasKey("includes"));
  includes=(ArrayList<String>)((Map<String,Object>)typeMapping.getSourceAsMap().get("_source")).get("includes");
  assertThat(includes,contains("include"));
  assertThat((Map<String,Object>)typeMapping.getSourceAsMap().get("_source"),hasKey("excludes"));
  ArrayList<String> excludes=(ArrayList<String>)((Map<String,Object>)typeMapping.getSourceAsMap().get("_source")).get("excludes");
  assertThat(excludes,contains("*.excludes"));
}
