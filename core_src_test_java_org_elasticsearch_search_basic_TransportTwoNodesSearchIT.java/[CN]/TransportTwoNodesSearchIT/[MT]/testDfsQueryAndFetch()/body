{
  prepareData(3);
  SearchSourceBuilder source=searchSource().query(termQuery("multi","test")).from(0).size(20).explain(true);
  Set<String> expectedIds=new HashSet<>();
  for (int i=0; i < 100; i++) {
    expectedIds.add(Integer.toString(i));
  }
  SearchResponse searchResponse=client().prepareSearch("test").setSearchType(DFS_QUERY_AND_FETCH).setScroll("10m").setSource(source.buildAsBytes()).get();
  assertNoFailures(searchResponse);
  assertThat(searchResponse.getHits().totalHits(),equalTo(100l));
  assertThat(searchResponse.getHits().hits().length,equalTo(60));
  for (int i=0; i < 60; i++) {
    SearchHit hit=searchResponse.getHits().hits()[i];
    assertThat(hit.explanation(),notNullValue());
    assertThat("make sure we don't have duplicates",expectedIds.remove(hit.id()),notNullValue());
  }
  do {
    searchResponse=client().prepareSearchScroll(searchResponse.getScrollId()).setScroll("10m").get();
    assertThat(searchResponse.getHits().totalHits(),equalTo(100l));
    assertThat(searchResponse.getHits().hits().length,lessThanOrEqualTo(40));
    for (int i=0; i < searchResponse.getHits().hits().length; i++) {
      SearchHit hit=searchResponse.getHits().hits()[i];
      assertThat("make sure we don't have duplicates",expectedIds.remove(hit.id()),notNullValue());
    }
  }
 while (searchResponse.getHits().hits().length > 0);
  clearScroll(searchResponse.getScrollId());
  assertThat("make sure we got all [" + expectedIds + "]",expectedIds.size(),equalTo(0));
}
