{
  prepareData();
  NumShards test=getNumShards("test");
  logger.info("Start Testing failed search with wrong from");
  SearchSourceBuilder source=searchSource().query(termQuery("multi","test")).from(1000).size(20).explain(true);
  SearchResponse response=client().search(searchRequest("test").searchType(DFS_QUERY_AND_FETCH).source(source)).actionGet();
  assertThat(response.getHits().hits().length,equalTo(0));
  assertThat(response.getTotalShards(),equalTo(test.numPrimaries));
  assertThat(response.getSuccessfulShards(),equalTo(test.numPrimaries));
  assertThat(response.getFailedShards(),equalTo(0));
  response=client().search(searchRequest("test").searchType(QUERY_THEN_FETCH).source(source)).actionGet();
  assertNoFailures(response);
  assertThat(response.getHits().hits().length,equalTo(0));
  response=client().search(searchRequest("test").searchType(DFS_QUERY_AND_FETCH).source(source)).actionGet();
  assertNoFailures(response);
  assertThat(response.getHits().hits().length,equalTo(0));
  response=client().search(searchRequest("test").searchType(DFS_QUERY_THEN_FETCH).source(source)).actionGet();
  assertNoFailures(response);
  assertThat(response.getHits().hits().length,equalTo(0));
  logger.info("Done Testing failed search");
}
