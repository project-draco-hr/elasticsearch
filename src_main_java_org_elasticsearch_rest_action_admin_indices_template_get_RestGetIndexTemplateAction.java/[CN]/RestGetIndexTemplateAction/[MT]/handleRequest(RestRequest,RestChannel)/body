{
  ClusterStateRequest clusterStateRequest=Requests.clusterStateRequest().filterRoutingTable(true).filterNodes(true).filteredIndexTemplates(request.param("name")).filteredIndices("_na");
  clusterStateRequest.listenerThreaded(false);
  client.admin().cluster().state(clusterStateRequest,new ActionListener<ClusterStateResponse>(){
    @Override public void onResponse(    ClusterStateResponse response){
      try {
        MetaData metaData=response.state().metaData();
        XContentBuilder builder=RestXContentBuilder.restContentBuilder(request);
        builder.startObject();
        for (        IndexTemplateMetaData indexMetaData : metaData.templates().values()) {
          builder.startObject(indexMetaData.name(),XContentBuilder.FieldCaseConversion.NONE);
          builder.field("template",indexMetaData.template());
          builder.field("order",indexMetaData.order());
          builder.startObject("settings");
          Settings settings=settingsFilter.filterSettings(indexMetaData.settings());
          for (          Map.Entry<String,String> entry : settings.getAsMap().entrySet()) {
            builder.field(entry.getKey(),entry.getValue());
          }
          builder.endObject();
          builder.startObject("mappings");
          for (          Map.Entry<String,CompressedString> entry : indexMetaData.mappings().entrySet()) {
            byte[] mappingSource=entry.getValue().uncompressed();
            XContentParser parser=XContentFactory.xContent(mappingSource).createParser(mappingSource);
            Map<String,Object> mapping=parser.map();
            if (mapping.size() == 1 && mapping.containsKey(entry.getKey())) {
              mapping=(Map<String,Object>)mapping.get(entry.getKey());
            }
            builder.field(entry.getKey());
            builder.map(mapping);
          }
          builder.endObject();
          builder.endObject();
        }
        builder.endObject();
        channel.sendResponse(new XContentRestResponse(request,OK,builder));
      }
 catch (      Exception e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
