{
  if (!enabled) {
    return null;
  }
  if (store == Field.Store.NO) {
    return null;
  }
  if (context.flyweight()) {
    return null;
  }
  byte[] data=context.source();
  int dataOffset=context.sourceOffset();
  int dataLength=context.sourceLength();
  boolean filtered=includes.length > 0 || excludes.length > 0;
  if (filtered) {
    Tuple<XContentType,Map<String,Object>> mapTuple=XContentHelper.convertToMap(data,dataOffset,dataLength,true);
    Map<String,Object> filteredSource=XContentMapValues.filter(mapTuple.v2(),includes,excludes);
    CachedStreamOutput.Entry cachedEntry=CachedStreamOutput.popEntry();
    StreamOutput streamOutput;
    if (compress != null && compress && (compressThreshold == -1 || dataLength > compressThreshold)) {
      streamOutput=cachedEntry.cachedBytes(CompressorFactory.defaultCompressor());
    }
 else {
      streamOutput=cachedEntry.cachedBytes();
    }
    XContentType contentType=formatContentType;
    if (contentType == null) {
      contentType=mapTuple.v1();
    }
    XContentBuilder builder=XContentFactory.contentBuilder(contentType,streamOutput).map(filteredSource);
    builder.close();
    data=cachedEntry.bytes().copiedByteArray();
    dataOffset=0;
    dataLength=data.length;
    CachedStreamOutput.pushEntry(cachedEntry);
  }
 else   if (compress != null && compress && !CompressorFactory.isCompressed(data,dataOffset,dataLength)) {
    if (compressThreshold == -1 || dataLength > compressThreshold) {
      CachedStreamOutput.Entry cachedEntry=CachedStreamOutput.popEntry();
      try {
        XContentType contentType=XContentFactory.xContentType(data,dataOffset,dataLength);
        if (formatContentType != null && formatContentType != contentType) {
          XContentBuilder builder=XContentFactory.contentBuilder(formatContentType,cachedEntry.cachedBytes(CompressorFactory.defaultCompressor()));
          builder.copyCurrentStructure(XContentFactory.xContent(contentType).createParser(data,dataOffset,dataLength));
          builder.close();
        }
 else {
          StreamOutput streamOutput=cachedEntry.cachedBytes(CompressorFactory.defaultCompressor());
          streamOutput.writeBytes(data,dataOffset,dataLength);
          streamOutput.close();
        }
        data=cachedEntry.bytes().copiedByteArray();
        dataOffset=0;
        dataLength=data.length;
        context.source(data,dataOffset,dataLength);
      }
  finally {
        CachedStreamOutput.pushEntry(cachedEntry);
      }
    }
  }
 else   if (formatContentType != null) {
    Compressor compressor=CompressorFactory.compressor(data,dataOffset,dataLength);
    if (compressor != null) {
      CompressedStreamInput compressedStreamInput=compressor.streamInput(new BytesStreamInput(data,dataOffset,dataLength,false));
      XContentType contentType=XContentFactory.xContentType(compressedStreamInput);
      compressedStreamInput.resetToBufferStart();
      if (contentType != formatContentType) {
        CachedStreamOutput.Entry cachedEntry=CachedStreamOutput.popEntry();
        try {
          StreamOutput streamOutput=cachedEntry.cachedBytes(CompressorFactory.defaultCompressor());
          XContentBuilder builder=XContentFactory.contentBuilder(formatContentType,streamOutput);
          builder.copyCurrentStructure(XContentFactory.xContent(contentType).createParser(compressedStreamInput));
          builder.close();
          data=cachedEntry.bytes().copiedByteArray();
          dataOffset=0;
          dataLength=data.length;
          context.source(data,dataOffset,dataLength);
        }
  finally {
          CachedStreamOutput.pushEntry(cachedEntry);
        }
      }
 else {
        compressedStreamInput.close();
      }
    }
 else {
      XContentType contentType=XContentFactory.xContentType(data,dataOffset,dataLength);
      if (contentType != formatContentType) {
        CachedStreamOutput.Entry cachedEntry=CachedStreamOutput.popEntry();
        try {
          XContentBuilder builder=XContentFactory.contentBuilder(formatContentType,cachedEntry.cachedBytes());
          builder.copyCurrentStructure(XContentFactory.xContent(contentType).createParser(data,dataOffset,dataLength));
          builder.close();
          data=cachedEntry.bytes().copiedByteArray();
          dataOffset=0;
          dataLength=data.length;
          context.source(data,dataOffset,dataLength);
        }
  finally {
          CachedStreamOutput.pushEntry(cachedEntry);
        }
      }
    }
  }
  return new Field(names().indexName(),data,dataOffset,dataLength);
}
