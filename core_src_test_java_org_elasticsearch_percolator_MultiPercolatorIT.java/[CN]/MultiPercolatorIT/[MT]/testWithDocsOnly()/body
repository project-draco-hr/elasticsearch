{
  createIndex("test");
  ensureGreen();
  int numQueries=randomIntBetween(50,100);
  logger.info("--> register a queries");
  for (int i=0; i < numQueries; i++) {
    client().prepareIndex("test",PercolatorFieldMapper.TYPE_NAME,Integer.toString(i)).setSource(jsonBuilder().startObject().field("query",matchAllQuery()).endObject()).execute().actionGet();
  }
  refresh();
  MultiPercolateRequestBuilder builder=client().prepareMultiPercolate();
  int numPercolateRequest=randomIntBetween(50,100);
  for (int i=0; i < numPercolateRequest; i++) {
    builder.add(client().preparePercolate().setIndices("test").setDocumentType("type").setSize(numQueries).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field","a").endObject())));
  }
  MultiPercolateResponse response=builder.execute().actionGet();
  assertThat(response.items().length,equalTo(numPercolateRequest));
  for (  MultiPercolateResponse.Item item : response) {
    assertThat(item.isFailure(),equalTo(false));
    assertMatchCount(item.getResponse(),numQueries);
    assertThat(item.getResponse().getMatches().length,equalTo(numQueries));
  }
  builder=client().prepareMultiPercolate();
  for (int i=0; i < numPercolateRequest; i++) {
    builder.add(client().preparePercolate().setIndices("test").setDocumentType("type").setSource("illegal json"));
  }
  response=builder.execute().actionGet();
  assertThat(response.items().length,equalTo(numPercolateRequest));
  for (  MultiPercolateResponse.Item item : response) {
    assertThat(item.isFailure(),equalTo(true));
    assertThat(item.getFailure(),notNullValue());
  }
  builder=client().prepareMultiPercolate();
  for (int i=0; i < numPercolateRequest; i++) {
    builder.add(client().preparePercolate().setIndices("test").setDocumentType("type").setSource("illegal json"));
  }
  builder.add(client().preparePercolate().setSize(numQueries).setIndices("test").setDocumentType("type").setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field","a").endObject())));
  response=builder.execute().actionGet();
  assertThat(response.items().length,equalTo(numPercolateRequest + 1));
  assertThat(response.items()[numPercolateRequest].isFailure(),equalTo(false));
  assertMatchCount(response.items()[numPercolateRequest].getResponse(),numQueries);
  assertThat(response.items()[numPercolateRequest].getResponse().getMatches().length,equalTo(numQueries));
}
