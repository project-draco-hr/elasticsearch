{
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled",randomBoolean()).startObject("fielddata").field("loading","lazy").field("format","doc_values").endObject().field("store","yes").endObject().endObject().endObject().string();
  Settings indexSettings=ImmutableSettings.builder().put(IndexMetaData.SETTING_VERSION_CREATED,Version.V_1_4_2.id).build();
  DocumentMapperParser parser=createIndex("test",indexSettings).mapperService().documentMapperParser();
  DocumentMapper docMapper=parser.parse(mapping);
  assertThat(docMapper.timestampFieldMapper().fieldDataType().getLoading(),equalTo(FieldMapper.Loading.LAZY));
  assertThat(docMapper.timestampFieldMapper().fieldDataType().getFormat(indexSettings),equalTo("doc_values"));
  mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled",randomBoolean()).startObject("fielddata").field("loading","eager").field("format","array").endObject().field("store","yes").endObject().endObject().endObject().string();
  DocumentMapper.MergeResult mergeResult=docMapper.merge(parser.parse(mapping).mapping(),DocumentMapper.MergeFlags.mergeFlags().simulate(false));
  assertThat(mergeResult.conflicts().length,equalTo(0));
  assertThat(docMapper.timestampFieldMapper().fieldDataType().getLoading(),equalTo(FieldMapper.Loading.EAGER));
  assertThat(docMapper.timestampFieldMapper().fieldDataType().getFormat(indexSettings),equalTo("array"));
}
