{
  List<String> indexValues=new ArrayList<>();
  indexValues.add("analyzed");
  indexValues.add("no");
  indexValues.add("not_analyzed");
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("index",indexValues.remove(randomInt(2))).endObject().endObject().endObject().string();
  DocumentMapperParser parser=createIndex("test").mapperService().documentMapperParser();
  DocumentMapper docMapper=parser.parse(mapping);
  mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("index",indexValues.remove(randomInt(1))).endObject().endObject().endObject().string();
  DocumentMapper.MergeResult mergeResult=docMapper.merge(parser.parse(mapping),DocumentMapper.MergeFlags.mergeFlags().simulate(true));
  List<String> expectedConflicts=new ArrayList<>();
  expectedConflicts.add("mapper [_timestamp] has different index values");
  expectedConflicts.add("mapper [_timestamp] has different tokenize values");
  if (indexValues.get(0).equals("not_analyzed") == false) {
    expectedConflicts.add("mapper [_timestamp] has different doc_values values");
  }
  for (  String conflict : mergeResult.conflicts()) {
    assertThat(conflict,isIn(expectedConflicts));
  }
}
