{
  boolean modified=false;
  QueryBuilder<?> queryBuilder=RestActions.urlParamsToQueryBuilder(request);
  if (queryBuilder != null) {
    searchSourceBuilder.query(queryBuilder);
    modified=true;
  }
  int from=request.paramAsInt("from",-1);
  if (from != -1) {
    searchSourceBuilder.from(from);
    modified=true;
  }
  int size=request.paramAsInt("size",-1);
  if (size != -1) {
    searchSourceBuilder.size(size);
    modified=true;
  }
  if (request.hasParam("explain")) {
    searchSourceBuilder.explain(request.paramAsBoolean("explain",null));
    modified=true;
  }
  if (request.hasParam("version")) {
    searchSourceBuilder.version(request.paramAsBoolean("version",null));
    modified=true;
  }
  if (request.hasParam("timeout")) {
    searchSourceBuilder.timeout(request.paramAsTime("timeout",null));
    modified=true;
  }
  if (request.hasParam("terminate_after")) {
    int terminateAfter=request.paramAsInt("terminate_after",SearchContext.DEFAULT_TERMINATE_AFTER);
    if (terminateAfter < 0) {
      throw new IllegalArgumentException("terminateAfter must be > 0");
    }
 else     if (terminateAfter > 0) {
      searchSourceBuilder.terminateAfter(terminateAfter);
      modified=true;
    }
  }
  String sField=request.param("fields");
  if (sField != null) {
    if (!Strings.hasText(sField)) {
      searchSourceBuilder.noFields();
      modified=true;
    }
 else {
      String[] sFields=Strings.splitStringByCommaToArray(sField);
      if (sFields != null) {
        for (        String field : sFields) {
          searchSourceBuilder.field(field);
          modified=true;
        }
      }
    }
  }
  String sFieldDataFields=request.param("fielddata_fields");
  if (sFieldDataFields != null) {
    if (Strings.hasText(sFieldDataFields)) {
      String[] sFields=Strings.splitStringByCommaToArray(sFieldDataFields);
      if (sFields != null) {
        for (        String field : sFields) {
          searchSourceBuilder.fieldDataField(field);
          modified=true;
        }
      }
    }
  }
  FetchSourceContext fetchSourceContext=FetchSourceContext.parseFromRestRequest(request);
  if (fetchSourceContext != null) {
    searchSourceBuilder.fetchSource(fetchSourceContext);
    modified=true;
  }
  if (request.hasParam("track_scores")) {
    searchSourceBuilder.trackScores(request.paramAsBoolean("track_scores",false));
    modified=true;
  }
  String sSorts=request.param("sort");
  if (sSorts != null) {
    String[] sorts=Strings.splitStringByCommaToArray(sSorts);
    for (    String sort : sorts) {
      int delimiter=sort.lastIndexOf(":");
      if (delimiter != -1) {
        String sortField=sort.substring(0,delimiter);
        String reverse=sort.substring(delimiter + 1);
        if ("asc".equals(reverse)) {
          searchSourceBuilder.sort(sortField,SortOrder.ASC);
          modified=true;
        }
 else         if ("desc".equals(reverse)) {
          searchSourceBuilder.sort(sortField,SortOrder.DESC);
          modified=true;
        }
      }
 else {
        searchSourceBuilder.sort(sort);
        modified=true;
      }
    }
  }
  String sStats=request.param("stats");
  if (sStats != null) {
    searchSourceBuilder.stats(Arrays.asList(Strings.splitStringByCommaToArray(sStats)));
    modified=true;
  }
  String suggestField=request.param("suggest_field");
  if (suggestField != null) {
    String suggestText=request.param("suggest_text",request.param("q"));
    int suggestSize=request.paramAsInt("suggest_size",5);
    String suggestMode=request.param("suggest_mode");
    searchSourceBuilder.suggest(new SuggestBuilder().addSuggestion(termSuggestion(suggestField).field(suggestField).text(suggestText).size(suggestSize).suggestMode(suggestMode)));
    modified=true;
  }
  return modified;
}
