{
  TestThreadPool threadPool=null;
  ClusterService clusterService=null;
  try {
    threadPool=new TestThreadPool("testPreferNodes");
    clusterService=ClusterServiceUtils.createClusterService(threadPool);
    final String indexName="test";
    ClusterServiceUtils.setState(clusterService,ClusterStateCreationUtils.stateWithActivePrimary(indexName,true,randomInt(8)));
    final Index index=clusterService.state().metaData().index(indexName).getIndex();
    final List<ShardRouting> shards=clusterService.state().getRoutingNodes().assignedShards(new ShardId(index,0));
    final int count=randomIntBetween(1,shards.size());
    int position=0;
    final List<String> nodes=new ArrayList<>();
    final List<ShardRouting> expected=new ArrayList<>();
    for (int i=0; i < count; i++) {
      if (randomBoolean() && !shards.get(position).initializing()) {
        nodes.add(shards.get(position).currentNodeId());
        expected.add(shards.get(position));
        position++;
      }
 else {
        nodes.add("missing_" + i);
      }
    }
    final ShardIterator it=new OperationRouting(Settings.EMPTY,new AwarenessAllocationDecider()).getShards(clusterService.state(),indexName,0,"_prefer_nodes:" + String.join(",",nodes));
    final List<ShardRouting> all=new ArrayList<>();
    ShardRouting shard;
    while ((shard=it.nextOrNull()) != null) {
      all.add(shard);
    }
    final Set<ShardRouting> preferred=new HashSet<>();
    preferred.addAll(all.subList(0,expected.size()));
    assertThat(preferred,containsInAnyOrder(expected.toArray()));
    assertThat(all.size(),equalTo(shards.size()));
  }
  finally {
    IOUtils.close(clusterService);
    terminate(threadPool);
  }
}
