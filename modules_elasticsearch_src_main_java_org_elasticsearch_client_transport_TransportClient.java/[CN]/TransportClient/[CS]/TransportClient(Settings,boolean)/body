{
  Tuple<Settings,Environment> tuple=InternalSettingsPerparer.prepareSettings(pSettings,loadConfigSettings);
  this.settings=settingsBuilder().put(tuple.v1()).put("network.server",false).put("node.client",true).build();
  this.environment=tuple.v2();
  ModulesBuilder modules=new ModulesBuilder();
  modules.add(new EnvironmentModule(environment));
  modules.add(new SettingsModule(settings));
  modules.add(new NetworkModule());
  modules.add(new ClusterNameModule(settings));
  modules.add(new TimerModule());
  modules.add(new ThreadPoolModule(settings));
  modules.add(new TransportModule(settings));
  modules.add(new ClientTransportActionModule());
  modules.add(new ClientTransportModule());
  if (settings.getAsBoolean("discovery.enabled",true) && false) {
    modules.add(new TransportClientClusterModule(settings));
  }
  injector=modules.createInjector();
  injector.getInstance(TransportService.class).start();
  try {
    injector.getInstance(TransportClientClusterService.class).start();
  }
 catch (  Exception e) {
  }
  nodesService=injector.getInstance(TransportClientNodesService.class);
  internalClient=injector.getInstance(InternalTransportClient.class);
}
