{
  super(facetName);
  this.fieldDataCache=context.fieldDataCache();
  this.size=size;
  this.comparatorType=comparatorType;
  this.numberOfShards=context.numberOfShards();
  MapperService.SmartNameFieldMappers smartMappers=context.mapperService().smartName(fieldName);
  if (smartMappers == null || !smartMappers.hasMapper()) {
    throw new ElasticSearchIllegalArgumentException("Field [" + fieldName + "] doesn't have a type, can't run terms int facet collector on it");
  }
 else {
    if (smartMappers.hasDocMapper()) {
      setFilter(context.filterCache().cache(smartMappers.docMapper().typeFilter()));
    }
    if (smartMappers.mapper().fieldDataType() != FieldDataType.DefaultTypes.INT) {
      throw new ElasticSearchIllegalArgumentException("Field [" + fieldName + "] is not of int type, can't run terms int facet collector on it");
    }
    this.indexFieldName=smartMappers.mapper().names().indexName();
    this.fieldDataType=smartMappers.mapper().fieldDataType();
  }
  if (excluded == null || excluded.isEmpty()) {
    this.excluded=null;
  }
 else {
    this.excluded=new TIntHashSet(excluded.size());
    for (    String s : excluded) {
      this.excluded.add(Integer.parseInt(s));
    }
  }
  if (allTerms) {
    minCount=-1;
  }
 else {
    minCount=0;
  }
  this.aggregators=new ArrayList<ReaderAggregator>(context.searcher().subReaders().length);
}
