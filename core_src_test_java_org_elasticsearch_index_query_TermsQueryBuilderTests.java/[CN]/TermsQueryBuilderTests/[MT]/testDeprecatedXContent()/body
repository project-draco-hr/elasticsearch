{
  String query="{\n" + "  \"terms\": {\n" + "    \"field\": [\n"+ "      \"blue\",\n"+ "      \"pill\"\n"+ "    ],\n"+ "    \"disable_coord\": true\n"+ "  }\n"+ "}";
  try {
    parseQuery(query);
    fail("disable_coord is deprecated");
  }
 catch (  IllegalArgumentException ex) {
    assertEquals("Deprecated field [disable_coord] used, replaced by [Use [bool] query instead]",ex.getMessage());
  }
  TermsQueryBuilder queryBuilder=(TermsQueryBuilder)parseQuery(query,ParseFieldMatcher.EMPTY);
  TermsQueryBuilder copy=assertSerialization(queryBuilder);
  assertTrue(queryBuilder.disableCoord());
  assertTrue(copy.disableCoord());
  Query luceneQuery=queryBuilder.toQuery(createShardContext());
  assertThat(luceneQuery,instanceOf(BooleanQuery.class));
  BooleanQuery booleanQuery=(BooleanQuery)luceneQuery;
  assertThat(booleanQuery.isCoordDisabled(),equalTo(true));
  String randomMinShouldMatch=RandomPicks.randomFrom(random(),Arrays.asList("min_match","min_should_match","minimum_should_match"));
  query="{\n" + "  \"terms\": {\n" + "    \"field\": [\n"+ "      \"value1\",\n"+ "      \"value2\",\n"+ "      \"value3\",\n"+ "      \"value4\"\n"+ "    ],\n"+ "    \"" + randomMinShouldMatch + "\": \"25%\"\n"+ "  }\n"+ "}";
  try {
    parseQuery(query);
    fail(randomMinShouldMatch + " is deprecated");
  }
 catch (  IllegalArgumentException ex) {
    assertEquals("Deprecated field [" + randomMinShouldMatch + "] used, replaced by [Use [bool] query instead]",ex.getMessage());
  }
  queryBuilder=(TermsQueryBuilder)parseQuery(query,ParseFieldMatcher.EMPTY);
  copy=assertSerialization(queryBuilder);
  assertEquals("25%",queryBuilder.minimumShouldMatch());
  assertEquals("25%",copy.minimumShouldMatch());
  luceneQuery=queryBuilder.toQuery(createShardContext());
  assertThat(luceneQuery,instanceOf(BooleanQuery.class));
  booleanQuery=(BooleanQuery)luceneQuery;
  assertThat(booleanQuery.getMinimumNumberShouldMatch(),equalTo(1));
}
