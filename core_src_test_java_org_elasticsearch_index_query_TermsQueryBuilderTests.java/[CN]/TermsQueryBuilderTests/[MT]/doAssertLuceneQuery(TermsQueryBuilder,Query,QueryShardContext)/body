{
  if (queryBuilder.termsLookup() == null && (queryBuilder.values() == null || queryBuilder.values().isEmpty())) {
    assertThat(query,instanceOf(MatchNoDocsQuery.class));
    MatchNoDocsQuery matchNoDocsQuery=(MatchNoDocsQuery)query;
    assertThat(matchNoDocsQuery.toString(),containsString("No terms supplied for \"terms\" query."));
  }
 else   if (queryBuilder.termsLookup() != null && randomTerms.size() == 0) {
    assertThat(query,instanceOf(MatchNoDocsQuery.class));
    MatchNoDocsQuery matchNoDocsQuery=(MatchNoDocsQuery)query;
    assertThat(matchNoDocsQuery.toString(),containsString("No terms supplied for \"terms\" query."));
  }
 else {
    assertThat(query,instanceOf(BooleanQuery.class));
    BooleanQuery booleanQuery=(BooleanQuery)query;
    if (queryBuilder.fieldName().equals(INT_FIELD_NAME) || queryBuilder.fieldName().equals(DOUBLE_FIELD_NAME) || queryBuilder.fieldName().equals(BOOLEAN_FIELD_NAME)|| queryBuilder.fieldName().equals(DATE_FIELD_NAME)) {
      return;
    }
    List<Object> terms;
    if (queryBuilder.termsLookup() != null) {
      terms=randomTerms;
    }
 else {
      terms=queryBuilder.values();
    }
    final List<Term> booleanTerms=new ArrayList<>();
    for (    BooleanClause booleanClause : booleanQuery) {
      assertThat(booleanClause.getOccur(),equalTo(BooleanClause.Occur.SHOULD));
      assertThat(booleanClause.getQuery(),instanceOf(TermQuery.class));
      Term term=((TermQuery)booleanClause.getQuery()).getTerm();
      booleanTerms.add(term);
    }
    CollectionUtil.timSort(booleanTerms);
    List<Term> expectedTerms=new ArrayList<>();
    for (    Object term : terms) {
      if (term != null) {
        expectedTerms.add(new Term(queryBuilder.fieldName(),term.toString()));
      }
    }
    CollectionUtil.timSort(expectedTerms);
    assertEquals(expectedTerms + " vs. " + booleanTerms,expectedTerms.size(),booleanTerms.size());
    assertEquals(expectedTerms + " vs. " + booleanTerms,expectedTerms,booleanTerms);
  }
}
