{
  Map<String,String> transportHeaders=randomHeaders(randomIntBetween(0,10));
  Map<String,String> restHeaders=randomHeaders(randomIntBetween(0,10));
  Map<String,String> copiedHeaders=randomHeadersFrom(restHeaders);
  Set<String> usefulRestHeaders=new HashSet<>(copiedHeaders.keySet());
  usefulRestHeaders.addAll(randomMap(randomIntBetween(0,10),"useful-").keySet());
  Map<String,String> restContext=randomContext(randomIntBetween(0,10));
  Map<String,String> transportContext=Maps.difference(randomContext(randomIntBetween(0,10)),restContext).entriesOnlyOnLeft();
  Map<String,String> expectedHeaders=new HashMap<>();
  expectedHeaders.putAll(transportHeaders);
  expectedHeaders.putAll(copiedHeaders);
  Map<String,String> expectedContext=new HashMap<>();
  expectedContext.putAll(transportContext);
  expectedContext.putAll(restContext);
  Client client=client(new NoOpClient(),new FakeRestRequest(restHeaders,restContext),usefulRestHeaders);
  SearchRequest searchRequest=Requests.searchRequest();
  putHeaders(searchRequest,transportHeaders);
  putContext(searchRequest,transportContext);
  assertHeaders(searchRequest,transportHeaders);
  client.search(searchRequest);
  assertHeaders(searchRequest,expectedHeaders);
  assertContext(searchRequest,expectedContext);
  GetRequest getRequest=Requests.getRequest("index");
  putHeaders(getRequest,transportHeaders);
  putContext(getRequest,transportContext);
  assertHeaders(getRequest,transportHeaders);
  client.get(getRequest);
  assertHeaders(getRequest,expectedHeaders);
  assertContext(getRequest,expectedContext);
  IndexRequest indexRequest=Requests.indexRequest();
  putHeaders(indexRequest,transportHeaders);
  putContext(indexRequest,transportContext);
  assertHeaders(indexRequest,transportHeaders);
  client.index(indexRequest);
  assertHeaders(indexRequest,expectedHeaders);
  assertContext(indexRequest,expectedContext);
}
