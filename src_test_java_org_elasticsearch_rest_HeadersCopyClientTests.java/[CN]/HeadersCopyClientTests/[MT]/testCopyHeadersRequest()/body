{
  Map<String,String> existingTransportHeaders=randomHeaders(randomIntBetween(0,10));
  Map<String,String> restHeaders=randomHeaders(randomIntBetween(0,10));
  Map<String,String> leftRestHeaders=randomHeadersFrom(restHeaders);
  Set<String> usefulRestHeaders=new HashSet<>(leftRestHeaders.keySet());
  usefulRestHeaders.addAll(randomHeaders(randomIntBetween(0,10),"useful-").keySet());
  HashMap<String,String> expectedHeaders=new HashMap<>();
  expectedHeaders.putAll(existingTransportHeaders);
  expectedHeaders.putAll(leftRestHeaders);
  Client client=client(new NoOpClient(),new FakeRestRequest(restHeaders),usefulRestHeaders);
  SearchRequest searchRequest=Requests.searchRequest();
  putHeaders(searchRequest,existingTransportHeaders);
  assertHeaders(searchRequest,existingTransportHeaders);
  client.search(searchRequest);
  assertHeaders(searchRequest,expectedHeaders);
  GetRequest getRequest=Requests.getRequest("index");
  putHeaders(getRequest,existingTransportHeaders);
  assertHeaders(getRequest,existingTransportHeaders);
  client.get(getRequest);
  assertHeaders(getRequest,expectedHeaders);
  IndexRequest indexRequest=Requests.indexRequest();
  putHeaders(indexRequest,existingTransportHeaders);
  assertHeaders(indexRequest,existingTransportHeaders);
  client.index(indexRequest);
  assertHeaders(indexRequest,expectedHeaders);
}
