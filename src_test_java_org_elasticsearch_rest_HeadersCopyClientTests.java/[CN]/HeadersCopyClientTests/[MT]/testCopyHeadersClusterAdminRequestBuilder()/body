{
  Map<String,String> existingTransportHeaders=randomHeaders(randomIntBetween(0,10));
  Map<String,String> restHeaders=randomHeaders(randomIntBetween(0,10));
  Map<String,String> leftRestHeaders=randomHeadersFrom(restHeaders);
  Set<String> usefulRestHeaders=new HashSet<>(leftRestHeaders.keySet());
  usefulRestHeaders.addAll(randomHeaders(randomIntBetween(0,10),"useful-").keySet());
  HashMap<String,String> expectedHeaders=new HashMap<>();
  expectedHeaders.putAll(existingTransportHeaders);
  expectedHeaders.putAll(leftRestHeaders);
  Client client=client(new NoOpClient(),new FakeRestRequest(restHeaders),usefulRestHeaders);
  ActionRequestBuilder requestBuilders[]=new ActionRequestBuilder[]{client.admin().cluster().prepareNodesInfo(),client.admin().cluster().prepareClusterStats(),client.admin().cluster().prepareState(),client.admin().cluster().prepareCreateSnapshot("repo","name"),client.admin().cluster().prepareHealth(),client.admin().cluster().prepareReroute()};
  for (  ActionRequestBuilder requestBuilder : requestBuilders) {
    putHeaders(requestBuilder.request(),existingTransportHeaders);
    assertHeaders(requestBuilder.request(),existingTransportHeaders);
    requestBuilder.get();
    assertHeaders(requestBuilder.request(),expectedHeaders);
  }
}
