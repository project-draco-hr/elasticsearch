{
  Map<String,String> existingTransportHeaders=randomHeaders(randomIntBetween(0,10));
  Map<String,String> restHeaders=randomHeaders(randomIntBetween(0,10));
  Map<String,String> leftRestHeaders=randomHeadersFrom(restHeaders);
  Set<String> usefulRestHeaders=new HashSet<>(leftRestHeaders.keySet());
  usefulRestHeaders.addAll(randomHeaders(randomIntBetween(0,10),"useful-").keySet());
  HashMap<String,String> expectedHeaders=new HashMap<>();
  expectedHeaders.putAll(existingTransportHeaders);
  expectedHeaders.putAll(leftRestHeaders);
  Client client=client(new NoOpClient(),new FakeRestRequest(restHeaders),usefulRestHeaders);
  CreateIndexRequest createIndexRequest=Requests.createIndexRequest("test");
  putHeaders(createIndexRequest,existingTransportHeaders);
  assertHeaders(createIndexRequest,existingTransportHeaders);
  client.admin().indices().create(createIndexRequest);
  assertHeaders(createIndexRequest,expectedHeaders);
  CloseIndexRequest closeIndexRequest=Requests.closeIndexRequest("test");
  putHeaders(closeIndexRequest,existingTransportHeaders);
  assertHeaders(closeIndexRequest,existingTransportHeaders);
  client.admin().indices().close(closeIndexRequest);
  assertHeaders(closeIndexRequest,expectedHeaders);
  FlushRequest flushRequest=Requests.flushRequest();
  putHeaders(flushRequest,existingTransportHeaders);
  assertHeaders(flushRequest,existingTransportHeaders);
  client.admin().indices().flush(flushRequest);
  assertHeaders(flushRequest,expectedHeaders);
}
