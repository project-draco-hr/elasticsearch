{
  final List<String> headers=Lists.newArrayList(BaseRestHandler.usefulHeaders());
  int iterations=randomIntBetween(1,5);
  ExecutorService executorService=Executors.newFixedThreadPool(iterations);
  for (int i=0; i < iterations; i++) {
    int headersCount=randomInt(10);
    final String[] newHeaders=new String[headersCount];
    for (int j=0; j < headersCount; j++) {
      String usefulHeader=randomRealisticUnicodeOfLengthBetween(1,30);
      newHeaders[j]=usefulHeader;
      headers.add(usefulHeader);
    }
    executorService.submit(new Runnable(){
      @Override public void run(){
        BaseRestHandler.addUsefulHeaders(newHeaders);
      }
    }
);
  }
  executorService.shutdown();
  assertThat(executorService.awaitTermination(1,TimeUnit.SECONDS),equalTo(true));
  String[] usefulHeaders=BaseRestHandler.usefulHeaders();
  assertThat(usefulHeaders.length,equalTo(headers.size()));
  Arrays.sort(usefulHeaders);
  Collections.sort(headers);
  assertThat(usefulHeaders,equalTo(headers.toArray(new String[headers.size()])));
}
