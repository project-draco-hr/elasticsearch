{
  Map<String,String> existingTransportHeaders=randomHeaders(randomIntBetween(0,10));
  Map<String,String> restHeaders=randomHeaders(randomIntBetween(0,10));
  Map<String,String> leftRestHeaders=randomHeadersFrom(restHeaders);
  Set<String> usefulRestHeaders=new HashSet<>(leftRestHeaders.keySet());
  usefulRestHeaders.addAll(randomHeaders(randomIntBetween(0,10),"useful-").keySet());
  HashMap<String,String> expectedHeaders=new HashMap<>();
  expectedHeaders.putAll(existingTransportHeaders);
  expectedHeaders.putAll(leftRestHeaders);
  Client client=client(new NoOpClient(),new FakeRestRequest(restHeaders),usefulRestHeaders);
  ClusterHealthRequest clusterHealthRequest=Requests.clusterHealthRequest();
  putHeaders(clusterHealthRequest,existingTransportHeaders);
  assertHeaders(clusterHealthRequest,existingTransportHeaders);
  client.admin().cluster().health(clusterHealthRequest);
  assertHeaders(clusterHealthRequest,expectedHeaders);
  ClusterStateRequest clusterStateRequest=Requests.clusterStateRequest();
  putHeaders(clusterStateRequest,existingTransportHeaders);
  assertHeaders(clusterStateRequest,existingTransportHeaders);
  client.admin().cluster().state(clusterStateRequest);
  assertHeaders(clusterStateRequest,expectedHeaders);
  ClusterStatsRequest clusterStatsRequest=Requests.clusterStatsRequest();
  putHeaders(clusterStatsRequest,existingTransportHeaders);
  assertHeaders(clusterStatsRequest,existingTransportHeaders);
  client.admin().cluster().clusterStats(clusterStatsRequest);
  assertHeaders(clusterStatsRequest,expectedHeaders);
}
