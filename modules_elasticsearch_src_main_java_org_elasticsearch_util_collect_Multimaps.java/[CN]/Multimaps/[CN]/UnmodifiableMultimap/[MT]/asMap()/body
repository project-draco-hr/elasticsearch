{
  Map<K,Collection<V>> result=map;
  if (result == null) {
    final Map<K,Collection<V>> unmodifiableMap=Collections.unmodifiableMap(delegate.asMap());
    map=result=new ForwardingMap<K,Collection<V>>(){
      @Override protected Map<K,Collection<V>> delegate(){
        return unmodifiableMap;
      }
      Set<Entry<K,Collection<V>>> entrySet;
      @Override public Set<Map.Entry<K,Collection<V>>> entrySet(){
        Set<Entry<K,Collection<V>>> result=entrySet;
        return (result == null) ? entrySet=unmodifiableAsMapEntries(unmodifiableMap.entrySet()) : result;
      }
      @Override public Collection<V> get(      Object key){
        Collection<V> collection=unmodifiableMap.get(key);
        return (collection == null) ? null : unmodifiableValueCollection(collection);
      }
      Collection<Collection<V>> asMapValues;
      @Override public Collection<Collection<V>> values(){
        Collection<Collection<V>> result=asMapValues;
        return (result == null) ? asMapValues=new UnmodifiableAsMapValues<V>(unmodifiableMap.values()) : result;
      }
      @Override public boolean containsValue(      Object o){
        return values().contains(o);
      }
    }
;
  }
  return result;
}
