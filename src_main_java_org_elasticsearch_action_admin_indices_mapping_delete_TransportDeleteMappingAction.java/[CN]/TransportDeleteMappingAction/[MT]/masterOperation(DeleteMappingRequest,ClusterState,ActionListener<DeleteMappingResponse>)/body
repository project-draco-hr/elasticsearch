{
  flushAction.execute(Requests.flushRequest(request.indices()),new ActionListener<FlushResponse>(){
    @Override public void onResponse(    FlushResponse flushResponse){
      deleteByQueryAction.execute(Requests.deleteByQueryRequest(request.indices()).query(QueryBuilders.filteredQuery(QueryBuilders.matchAllQuery(),FilterBuilders.typeFilter(request.type()))),new ActionListener<DeleteByQueryResponse>(){
        @Override public void onResponse(        DeleteByQueryResponse deleteByQueryResponse){
          refreshAction.execute(Requests.refreshRequest(request.indices()),new ActionListener<RefreshResponse>(){
            @Override public void onResponse(            RefreshResponse refreshResponse){
              metaDataMappingService.removeMapping(new MetaDataMappingService.RemoveRequest(request.indices(),request.type()).masterTimeout(request.masterNodeTimeout()),new MetaDataMappingService.Listener(){
                @Override public void onResponse(                MetaDataMappingService.Response response){
                  listener.onResponse(new DeleteMappingResponse());
                }
                @Override public void onFailure(                Throwable t){
                  listener.onFailure(t);
                }
              }
);
            }
            @Override public void onFailure(            Throwable e){
              metaDataMappingService.removeMapping(new MetaDataMappingService.RemoveRequest(request.indices(),request.type()).masterTimeout(request.masterNodeTimeout()),new MetaDataMappingService.Listener(){
                @Override public void onResponse(                MetaDataMappingService.Response response){
                  listener.onResponse(new DeleteMappingResponse());
                }
                @Override public void onFailure(                Throwable t){
                  listener.onFailure(t);
                }
              }
);
            }
          }
);
        }
        @Override public void onFailure(        Throwable t){
          listener.onFailure(t);
        }
      }
);
    }
    @Override public void onFailure(    Throwable t){
      listener.onFailure(t);
    }
  }
);
}
