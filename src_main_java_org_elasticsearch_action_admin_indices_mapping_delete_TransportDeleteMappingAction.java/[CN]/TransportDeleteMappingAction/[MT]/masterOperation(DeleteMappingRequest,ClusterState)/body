{
  final AtomicReference<Throwable> failureRef=new AtomicReference<Throwable>();
  final CountDownLatch latch=new CountDownLatch(1);
  flushAction.execute(Requests.flushRequest(request.indices()),new ActionListener<FlushResponse>(){
    @Override public void onResponse(    FlushResponse flushResponse){
      deleteByQueryAction.execute(Requests.deleteByQueryRequest(request.indices()).query(QueryBuilders.filteredQuery(QueryBuilders.matchAllQuery(),FilterBuilders.typeFilter(request.type()))),new ActionListener<DeleteByQueryResponse>(){
        @Override public void onResponse(        DeleteByQueryResponse deleteByQueryResponse){
          refreshAction.execute(Requests.refreshRequest(request.indices()),new ActionListener<RefreshResponse>(){
            @Override public void onResponse(            RefreshResponse refreshResponse){
              metaDataMappingService.removeMapping(new MetaDataMappingService.RemoveRequest(request.indices(),request.type()),new MetaDataMappingService.Listener(){
                @Override public void onResponse(                MetaDataMappingService.Response response){
                  latch.countDown();
                }
                @Override public void onFailure(                Throwable t){
                  failureRef.set(t);
                  latch.countDown();
                }
              }
);
            }
            @Override public void onFailure(            Throwable e){
              metaDataMappingService.removeMapping(new MetaDataMappingService.RemoveRequest(request.indices(),request.type()),new MetaDataMappingService.Listener(){
                @Override public void onResponse(                MetaDataMappingService.Response response){
                  latch.countDown();
                }
                @Override public void onFailure(                Throwable t){
                  failureRef.set(t);
                  latch.countDown();
                }
              }
);
            }
          }
);
        }
        @Override public void onFailure(        Throwable e){
          failureRef.set(e);
          latch.countDown();
        }
      }
);
    }
    @Override public void onFailure(    Throwable e){
      failureRef.set(e);
      latch.countDown();
    }
  }
);
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
    failureRef.set(e);
  }
  if (failureRef.get() != null) {
    if (failureRef.get() instanceof ElasticSearchException) {
      throw (ElasticSearchException)failureRef.get();
    }
 else {
      throw new ElasticSearchException(failureRef.get().getMessage(),failureRef.get());
    }
  }
  return new DeleteMappingResponse();
}
