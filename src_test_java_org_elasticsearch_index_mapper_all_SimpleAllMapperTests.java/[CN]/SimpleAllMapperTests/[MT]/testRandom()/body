{
  boolean omitNorms=false;
  boolean stored=false;
  boolean enabled=true;
  boolean autoBoost=false;
  boolean tv_stored=false;
  boolean tv_payloads=false;
  boolean tv_offsets=false;
  boolean tv_positions=false;
  String similarity=null;
  boolean fieldData=false;
  XContentBuilder mappingBuilder=jsonBuilder();
  mappingBuilder.startObject().startObject("test");
  List<Tuple<String,Boolean>> booleanOptionList=new ArrayList<>();
  boolean allDefault=true;
  if (frequently()) {
    allDefault=false;
    mappingBuilder.startObject("_all");
    if (randomBoolean()) {
      booleanOptionList.add(new Tuple<>("omit_norms",omitNorms=randomBoolean()));
    }
    if (randomBoolean()) {
      booleanOptionList.add(new Tuple<>("store",stored=randomBoolean()));
    }
    if (randomBoolean()) {
      booleanOptionList.add(new Tuple<>("store_term_vectors",tv_stored=randomBoolean()));
    }
    if (randomBoolean()) {
      booleanOptionList.add(new Tuple<>("enabled",enabled=randomBoolean()));
    }
    if (randomBoolean()) {
      booleanOptionList.add(new Tuple<>("auto_boost",autoBoost=randomBoolean()));
    }
    if (randomBoolean()) {
      booleanOptionList.add(new Tuple<>("store_term_vector_offsets",tv_offsets=randomBoolean()));
    }
    if (randomBoolean()) {
      booleanOptionList.add(new Tuple<>("store_term_vector_positions",tv_positions=randomBoolean()));
    }
    if (randomBoolean()) {
      booleanOptionList.add(new Tuple<>("store_term_vector_payloads",tv_payloads=randomBoolean()));
    }
    Collections.shuffle(booleanOptionList,getRandom());
    for (    Tuple<String,Boolean> option : booleanOptionList) {
      mappingBuilder.field(option.v1(),option.v2().booleanValue());
    }
    tv_stored|=tv_positions || tv_payloads || tv_offsets;
    if (randomBoolean()) {
      mappingBuilder.field("similarity",similarity=randomBoolean() ? "BM25" : "TF/IDF");
    }
    if (randomBoolean()) {
      fieldData=true;
      mappingBuilder.startObject("fielddata");
      mappingBuilder.field("foo","bar");
      mappingBuilder.endObject();
    }
    mappingBuilder.endObject();
  }
  String mapping=mappingBuilder.endObject().endObject().bytes().toUtf8();
  logger.info(mapping);
  DocumentMapper docMapper=MapperTestUtils.newParser().parse(mapping);
  String builtMapping=docMapper.mappingSource().string();
  DocumentMapper builtDocMapper=MapperTestUtils.newParser().parse(builtMapping);
  byte[] json=jsonBuilder().startObject().field("foo","bar").field("_id",1).field("foobar","foobar").endObject().bytes().toBytes();
  Document doc=builtDocMapper.parse(new BytesArray(json)).rootDoc();
  AllField field=(AllField)doc.getField("_all");
  if (enabled) {
    assertThat(field.fieldType().omitNorms(),equalTo(omitNorms));
    assertThat(field.fieldType().stored(),equalTo(stored));
    assertThat(field.fieldType().storeTermVectorOffsets(),equalTo(tv_offsets));
    assertThat(field.fieldType().storeTermVectorPayloads(),equalTo(tv_payloads));
    assertThat(field.fieldType().storeTermVectorPositions(),equalTo(tv_positions));
    assertThat(field.fieldType().storeTermVectors(),equalTo(tv_stored));
    AllEntries allEntries=((AllTokenStream)field.tokenStream(docMapper.mappers().indexAnalyzer())).allEntries();
    assertThat(allEntries.fields().size(),equalTo(2));
    assertThat(allEntries.fields().contains("foobar"),equalTo(true));
    assertThat(allEntries.fields().contains("foo"),equalTo(true));
    if (!stored) {
      assertThat(field.stringValue(),nullValue());
    }
    String text=stored ? field.stringValue() : "bar foobar";
    assertThat(text.trim(),equalTo(allEntries.buildText().trim()));
  }
 else {
    assertThat(field,nullValue());
  }
  Term term=new Term("foo","bar");
  Query query=builtDocMapper.allFieldMapper().queryStringTermQuery(term);
  if (autoBoost) {
    assertThat(query,equalTo((Query)new AllTermQuery(term)));
  }
 else {
    assertThat(query,equalTo((Query)new TermQuery(term)));
  }
  if (similarity == null || similarity.equals("TF/IDF")) {
    assertThat(builtDocMapper.allFieldMapper().similarity(),nullValue());
  }
 else {
    assertThat(similarity,equalTo(builtDocMapper.allFieldMapper().similarity().name()));
  }
  assertThat(builtMapping.contains("fielddata"),is(fieldData));
  if (allDefault) {
    BytesStreamOutput bytesStreamOutput=new BytesStreamOutput(0);
    XContentBuilder b=new XContentBuilder(XContentType.JSON.xContent(),bytesStreamOutput);
    XContentBuilder xContentBuilder=builtDocMapper.allFieldMapper().toXContent(b,ToXContent.EMPTY_PARAMS);
    xContentBuilder.flush();
    assertThat(bytesStreamOutput.size(),equalTo(0));
  }
}
