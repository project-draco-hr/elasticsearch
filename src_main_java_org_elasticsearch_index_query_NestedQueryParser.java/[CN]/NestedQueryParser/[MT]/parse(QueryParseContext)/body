{
  XContentParser parser=parseContext.parser();
  Query query=null;
  boolean queryFound=false;
  Filter filter=null;
  boolean filterFound=false;
  float boost=1.0f;
  String scope=null;
  String path=null;
  BlockJoinQuery.ScoreMode scoreMode=BlockJoinQuery.ScoreMode.Avg;
  LateBindingParentFilter currentParentFilterContext=parentFilterContext.get();
  LateBindingParentFilter usAsParentFilter=new LateBindingParentFilter();
  parentFilterContext.set(usAsParentFilter);
  try {
    String currentFieldName=null;
    XContentParser.Token token;
    while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
      if (token == XContentParser.Token.FIELD_NAME) {
        currentFieldName=parser.currentName();
      }
 else       if (token == XContentParser.Token.START_OBJECT) {
        if ("query".equals(currentFieldName)) {
          queryFound=true;
          query=parseContext.parseInnerQuery();
        }
 else         if ("filter".equals(currentFieldName)) {
          filterFound=true;
          filter=parseContext.parseInnerFilter();
        }
 else {
          throw new QueryParsingException(parseContext.index(),"[nested] query does not support [" + currentFieldName + "]");
        }
      }
 else       if (token.isValue()) {
        if ("path".equals(currentFieldName)) {
          path=parser.text();
        }
 else         if ("boost".equals(currentFieldName)) {
          boost=parser.floatValue();
        }
 else         if ("_scope".equals(currentFieldName)) {
          scope=parser.text();
        }
 else         if ("score_mode".equals(currentFieldName) || "scoreMode".equals(currentFieldName)) {
          String sScoreMode=parser.text();
          if ("avg".equals(sScoreMode)) {
            scoreMode=BlockJoinQuery.ScoreMode.Avg;
          }
 else           if ("max".equals(sScoreMode)) {
            scoreMode=BlockJoinQuery.ScoreMode.Max;
          }
 else           if ("total".equals(sScoreMode)) {
            scoreMode=BlockJoinQuery.ScoreMode.Total;
          }
 else           if ("none".equals(sScoreMode)) {
            scoreMode=BlockJoinQuery.ScoreMode.None;
          }
 else {
            throw new QueryParsingException(parseContext.index(),"illegal score_mode for nested query [" + sScoreMode + "]");
          }
        }
 else {
          throw new QueryParsingException(parseContext.index(),"[nested] query does not support [" + currentFieldName + "]");
        }
      }
    }
    if (!queryFound && !filterFound) {
      throw new QueryParsingException(parseContext.index(),"[nested] requires either 'query' or 'filter' field");
    }
    if (path == null) {
      throw new QueryParsingException(parseContext.index(),"[nested] requires 'path' field");
    }
    if (query == null && filter == null) {
      return null;
    }
    if (filter != null) {
      query=new DeletionAwareConstantScoreQuery(filter);
    }
    MapperService.SmartNameObjectMapper mapper=parseContext.smartObjectMapper(path);
    if (mapper == null) {
      throw new QueryParsingException(parseContext.index(),"[nested] failed to find nested object under path [" + path + "]");
    }
    ObjectMapper objectMapper=mapper.mapper();
    if (objectMapper == null) {
      throw new QueryParsingException(parseContext.index(),"[nested] failed to find nested object under path [" + path + "]");
    }
    if (!objectMapper.nested().isNested()) {
      throw new QueryParsingException(parseContext.index(),"[nested] nested object under path [" + path + "] is not of nested type");
    }
    Filter childFilter=parseContext.cacheFilter(objectMapper.nestedTypeFilter(),null);
    usAsParentFilter.filter=childFilter;
    query=new FilteredQuery(query,childFilter);
    Filter parentFilter=currentParentFilterContext;
    if (parentFilter == null) {
      parentFilter=NonNestedDocsFilter.INSTANCE;
      parentFilter=parseContext.cacheFilter(parentFilter,null);
    }
    BlockJoinQuery joinQuery=new BlockJoinQuery(query,parentFilter,scoreMode);
    joinQuery.setBoost(boost);
    if (scope != null) {
      SearchContext.current().addNestedQuery(scope,joinQuery);
    }
    return joinQuery;
  }
  finally {
    parentFilterContext.set(currentParentFilterContext);
  }
}
