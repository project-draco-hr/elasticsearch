{
  AllocationService strategy=createAllocationService(Settings.builder().put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),ClusterRebalanceAllocationDecider.ClusterRebalanceType.ALWAYS.toString()).build());
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test1").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)).put(IndexMetaData.builder("test2").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)).build();
  RoutingTable initialRoutingTable=RoutingTable.builder().addAsNew(metaData.index("test1")).addAsNew(metaData.index("test2")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();
  logger.info("start two nodes");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2"))).build();
  clusterState=strategy.reroute(clusterState,"reroute");
  for (int i=0; i < clusterState.routingTable().index("test1").shards().size(); i++) {
    assertThat(clusterState.routingTable().index("test1").shard(i).shards().size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test1").shard(i).primaryShard().state(),equalTo(INITIALIZING));
    assertThat(clusterState.routingTable().index("test1").shard(i).replicaShards().get(0).state(),equalTo(UNASSIGNED));
  }
  for (int i=0; i < clusterState.routingTable().index("test2").shards().size(); i++) {
    assertThat(clusterState.routingTable().index("test2").shard(i).shards().size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test2").shard(i).primaryShard().state(),equalTo(INITIALIZING));
    assertThat(clusterState.routingTable().index("test2").shard(i).replicaShards().get(0).state(),equalTo(UNASSIGNED));
  }
  logger.info("start all the primary shards for test1, replicas will start initializing");
  RoutingNodes routingNodes=clusterState.getRoutingNodes();
  clusterState=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState("test1",INITIALIZING));
  for (int i=0; i < clusterState.routingTable().index("test1").shards().size(); i++) {
    assertThat(clusterState.routingTable().index("test1").shard(i).shards().size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test1").shard(i).replicaShards().get(0).state(),equalTo(INITIALIZING));
  }
  for (int i=0; i < clusterState.routingTable().index("test2").shards().size(); i++) {
    assertThat(clusterState.routingTable().index("test2").shard(i).shards().size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test2").shard(i).primaryShard().state(),equalTo(INITIALIZING));
    assertThat(clusterState.routingTable().index("test2").shard(i).replicaShards().get(0).state(),equalTo(UNASSIGNED));
  }
  logger.info("start the test1 replica shards");
  routingNodes=clusterState.getRoutingNodes();
  clusterState=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState("test1",INITIALIZING));
  routingNodes=clusterState.getRoutingNodes();
  for (int i=0; i < clusterState.routingTable().index("test1").shards().size(); i++) {
    assertThat(clusterState.routingTable().index("test1").shard(i).shards().size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test1").shard(i).primaryShard().state(),equalTo(STARTED));
    assertThat(clusterState.routingTable().index("test1").shard(i).replicaShards().get(0).state(),equalTo(STARTED));
  }
  for (int i=0; i < clusterState.routingTable().index("test2").shards().size(); i++) {
    assertThat(clusterState.routingTable().index("test2").shard(i).shards().size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test2").shard(i).primaryShard().state(),equalTo(INITIALIZING));
    assertThat(clusterState.routingTable().index("test2").shard(i).replicaShards().get(0).state(),equalTo(UNASSIGNED));
  }
  logger.info("now, start 1 more node, check that rebalancing will happen (for test1) because we set it to always");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode("node3"))).build();
  clusterState=strategy.reroute(clusterState,"reroute");
  routingNodes=clusterState.getRoutingNodes();
  assertThat(routingNodes.node("node3").size(),equalTo(1));
  assertThat(routingNodes.node("node3").iterator().next().shardId().getIndex().getName(),equalTo("test1"));
}
