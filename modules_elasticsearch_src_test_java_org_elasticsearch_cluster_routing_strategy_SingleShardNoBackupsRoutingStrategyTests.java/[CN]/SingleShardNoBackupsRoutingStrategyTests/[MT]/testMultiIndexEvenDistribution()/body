{
  ShardsRoutingStrategy strategy=new ShardsRoutingStrategy();
  final int numberOfIndices=50;
  logger.info("Building initial routing table with " + numberOfIndices + " indices");
  MetaData.Builder metaDataBuilder=newMetaDataBuilder();
  for (int i=0; i < numberOfIndices; i++) {
    metaDataBuilder.put(newIndexMetaDataBuilder("test" + i).numberOfShards(1).numberOfReplicas(0));
  }
  MetaData metaData=metaDataBuilder.build();
  RoutingTable.Builder routingTableBuilder=routingTable();
  for (int i=0; i < numberOfIndices; i++) {
    routingTableBuilder.add(indexRoutingTable("test" + i).initializeEmpty(metaData.index("test" + i)));
  }
  RoutingTable routingTable=routingTableBuilder.build();
  ClusterState clusterState=newClusterStateBuilder().metaData(metaData).routingTable(routingTable).build();
  assertThat(routingTable.indicesRouting().size(),equalTo(numberOfIndices));
  for (int i=0; i < numberOfIndices; i++) {
    assertThat(routingTable.index("test" + i).shards().size(),equalTo(1));
    assertThat(routingTable.index("test" + i).shard(0).size(),equalTo(1));
    assertThat(routingTable.index("test" + i).shard(0).shards().size(),equalTo(1));
    assertThat(routingTable.index("test" + i).shard(0).shards().get(0).state(),equalTo(UNASSIGNED));
    assertThat(routingTable.index("test" + i).shard(0).shards().get(0).currentNodeId(),nullValue());
  }
  logger.info("Adding " + (numberOfIndices / 2) + " nodes");
  DiscoveryNodes.Builder nodesBuilder=newNodesBuilder();
  List<DiscoveryNode> nodes=newArrayList();
  for (int i=0; i < (numberOfIndices / 2); i++) {
    nodesBuilder.put(newNode("node" + i));
  }
  RoutingTable prevRoutingTable=routingTable;
  clusterState=newClusterStateBuilder().state(clusterState).nodes(nodesBuilder).build();
  routingTable=strategy.reroute(clusterState);
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  for (int i=0; i < numberOfIndices; i++) {
    assertThat(routingTable.index("test" + i).shards().size(),equalTo(1));
    assertThat(routingTable.index("test" + i).shard(0).size(),equalTo(1));
    assertThat(routingTable.index("test" + i).shard(0).shards().size(),equalTo(1));
    assertThat(routingTable.index("test" + i).shard(0).shards().get(0).unassigned(),equalTo(false));
    assertThat(routingTable.index("test" + i).shard(0).shards().get(0).state(),equalTo(INITIALIZING));
    assertThat(routingTable.index("test" + i).shard(0).shards().get(0).primary(),equalTo(true));
    String nodeId=routingTable.index("test" + i).shard(0).shards().get(0).currentNodeId();
    int nodeIndex=Integer.parseInt(nodeId.substring("node".length()));
    assertThat(nodeIndex,lessThan(25));
  }
  RoutingNodes routingNodes=routingTable.routingNodes(metaData);
  Set<String> encounteredIndices=newHashSet();
  for (  RoutingNode routingNode : routingNodes) {
    assertThat(routingNode.numberOfShardsWithState(STARTED),equalTo(0));
    assertThat(routingNode.shards().size(),equalTo(2));
    int nodeIndex=Integer.parseInt(routingNode.nodeId().substring("node".length()));
    assertThat(nodeIndex,lessThan(25));
    for (    MutableShardRouting shardRoutingEntry : routingNode) {
      assertThat(encounteredIndices,not(hasItem(shardRoutingEntry.index())));
      encounteredIndices.add(shardRoutingEntry.index());
    }
  }
  logger.info("Adding additional " + (numberOfIndices / 2) + " nodes, nothing should change");
  nodesBuilder=newNodesBuilder().putAll(clusterState.nodes());
  for (int i=(numberOfIndices / 2); i < numberOfIndices; i++) {
    nodesBuilder.put(newNode("node" + i));
  }
  prevRoutingTable=routingTable;
  clusterState=newClusterStateBuilder().state(clusterState).nodes(nodesBuilder).build();
  routingTable=strategy.reroute(clusterState);
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable != routingTable,equalTo(false));
  logger.info("Marking the shard as started");
  prevRoutingTable=routingTable;
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsOfType(INITIALIZING));
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(routingTable != prevRoutingTable,equalTo(true));
  for (int i=0; i < numberOfIndices; i++) {
    assertThat(routingTable.index("test" + i).shards().size(),equalTo(1));
    assertThat(routingTable.index("test" + i).shard(0).size(),equalTo(1));
    assertThat(routingTable.index("test" + i).shard(0).shards().size(),equalTo(1));
    assertThat(routingTable.index("test" + i).shard(0).shards().get(0).unassigned(),equalTo(false));
    assertThat(routingTable.index("test" + i).shard(0).shards().get(0).state(),equalTo(STARTED));
    assertThat(routingTable.index("test" + i).shard(0).shards().get(0).primary(),equalTo(true));
    String nodeId=routingTable.index("test" + i).shard(0).shards().get(0).currentNodeId();
    int nodeIndex=Integer.parseInt(nodeId.substring("node".length()));
    assertThat(nodeIndex,lessThan(25));
  }
  logger.info("Perform another round of reroute after we started the shards (we don't do automatic reroute when applying started shards)");
  prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState);
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  int numberOfRelocatingShards=0;
  int numberOfStartedShards=0;
  for (int i=0; i < numberOfIndices; i++) {
    assertThat(routingTable.index("test" + i).shards().size(),equalTo(1));
    assertThat(routingTable.index("test" + i).shard(0).size(),equalTo(1));
    assertThat(routingTable.index("test" + i).shard(0).shards().size(),equalTo(1));
    assertThat(routingTable.index("test" + i).shard(0).shards().get(0).unassigned(),equalTo(false));
    assertThat(routingTable.index("test" + i).shard(0).shards().get(0).state(),anyOf(equalTo(STARTED),equalTo(RELOCATING)));
    if (routingTable.index("test" + i).shard(0).shards().get(0).state() == STARTED) {
      numberOfStartedShards++;
    }
 else     if (routingTable.index("test" + i).shard(0).shards().get(0).state() == RELOCATING) {
      numberOfRelocatingShards++;
    }
    assertThat(routingTable.index("test" + i).shard(0).shards().get(0).primary(),equalTo(true));
    String nodeId=routingTable.index("test" + i).shard(0).shards().get(0).currentNodeId();
    int nodeIndex=Integer.parseInt(nodeId.substring("node".length()));
    assertThat(nodeIndex,lessThan(25));
  }
  assertThat(numberOfRelocatingShards,equalTo(25));
  assertThat(numberOfStartedShards,equalTo(25));
}
