{
  ShardsRoutingStrategy strategy=new ShardsRoutingStrategy();
  final int numberOfIndices=10;
  logger.info("Building initial routing table with " + numberOfIndices + " indices");
  MetaData.Builder metaDataBuilder=newMetaDataBuilder();
  for (int i=0; i < numberOfIndices; i++) {
    metaDataBuilder.put(newIndexMetaDataBuilder("test" + i).numberOfShards(1).numberOfReplicas(0));
  }
  MetaData metaData=metaDataBuilder.build();
  RoutingTable.Builder routingTableBuilder=routingTable();
  for (int i=0; i < numberOfIndices; i++) {
    routingTableBuilder.add(indexRoutingTable("test" + i).initializeEmpty(metaData.index("test" + i)));
  }
  RoutingTable routingTable=routingTableBuilder.build();
  ClusterState clusterState=newClusterStateBuilder().metaData(metaData).routingTable(routingTable).build();
  assertThat(routingTable.indicesRouting().size(),equalTo(numberOfIndices));
  logger.info("Starting 3 nodes and rerouting");
  clusterState=newClusterStateBuilder().state(clusterState).nodes(newNodesBuilder().put(newNode("node1")).put(newNode("node2")).put(newNode("node3"))).build();
  RoutingTable prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState);
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  for (int i=0; i < numberOfIndices; i++) {
    assertThat(routingTable.index("test" + i).shards().size(),equalTo(1));
    assertThat(routingTable.index("test" + i).shard(0).size(),equalTo(1));
    assertThat(routingTable.index("test" + i).shard(0).shards().size(),equalTo(1));
    assertThat(routingTable.index("test" + i).shard(0).shards().get(0).state(),equalTo(INITIALIZING));
  }
  RoutingNodes routingNodes=routingTable.routingNodes(metaData);
  assertThat(routingNodes.numberOfShardsOfType(INITIALIZING),equalTo(numberOfIndices));
  assertThat(routingNodes.node("node1").numberOfShardsWithState(INITIALIZING),anyOf(equalTo(3),equalTo(4)));
  assertThat(routingNodes.node("node2").numberOfShardsWithState(INITIALIZING),anyOf(equalTo(3),equalTo(4)));
  assertThat(routingNodes.node("node2").numberOfShardsWithState(INITIALIZING),anyOf(equalTo(3),equalTo(4)));
  logger.info("Start two more nodes, things should remain the same");
  clusterState=newClusterStateBuilder().state(clusterState).nodes(newNodesBuilder().putAll(clusterState.nodes()).put(newNode("node4")).put(newNode("node5"))).build();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState);
  assertThat(prevRoutingTable == routingTable,equalTo(true));
  routingNodes=routingTable.routingNodes(metaData);
  prevRoutingTable=routingTable;
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  for (int i=0; i < numberOfIndices; i++) {
    assertThat(routingTable.index("test" + i).shards().size(),equalTo(1));
    assertThat(routingTable.index("test" + i).shard(0).size(),equalTo(1));
    assertThat(routingTable.index("test" + i).shard(0).shards().size(),equalTo(1));
    assertThat(routingTable.index("test" + i).shard(0).shards().get(0).state(),anyOf(equalTo(RELOCATING),equalTo(STARTED)));
  }
  routingNodes=routingTable.routingNodes(metaData);
  assertThat("4 source shard routing are relocating",routingNodes.numberOfShardsOfType(RELOCATING),equalTo(4));
  assertThat("4 target shard routing are initializing",routingNodes.numberOfShardsOfType(INITIALIZING),equalTo(4));
  logger.info("Now, mark the relocated as started");
  prevRoutingTable=routingTable;
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  for (int i=0; i < numberOfIndices; i++) {
    assertThat(routingTable.index("test" + i).shards().size(),equalTo(1));
    assertThat(routingTable.index("test" + i).shard(0).size(),equalTo(1));
    assertThat(routingTable.index("test" + i).shard(0).shards().size(),equalTo(1));
    assertThat(routingTable.index("test" + i).shard(0).shards().get(0).state(),anyOf(equalTo(RELOCATING),equalTo(STARTED)));
  }
  routingNodes=routingTable.routingNodes(metaData);
  assertThat(routingNodes.numberOfShardsOfType(STARTED),equalTo(numberOfIndices));
  for (  RoutingNode routingNode : routingNodes) {
    assertThat(routingNode.numberOfShardsWithState(STARTED),equalTo(2));
  }
}
