{
  AllocationService allocation=new AllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries",10).build());
  logger.info("creating an index with 1 shard, no replica");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").numberOfShards(1).numberOfReplicas(0)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder().metaData(metaData).routingTable(routingTable).build();
  logger.info("adding two nodes and performing rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1")).put(newNode("node2"))).build();
  RoutingAllocation.Result rerouteResult=allocation.reroute(clusterState);
  clusterState=ClusterState.builder(clusterState).routingTable(rerouteResult.routingTable()).build();
  logger.info("start primary shard");
  rerouteResult=allocation.applyStartedShards(clusterState,clusterState.routingNodes().shardsWithState(INITIALIZING));
  clusterState=ClusterState.builder(clusterState).routingTable(rerouteResult.routingTable()).build();
  logger.info("move the shard");
  String existingNodeId=clusterState.routingTable().index("test").shard(0).primaryShard().currentNodeId();
  String toNodeId;
  if ("node1".equals(existingNodeId)) {
    toNodeId="node2";
  }
 else {
    toNodeId="node1";
  }
  rerouteResult=allocation.reroute(clusterState,new AllocationCommands(new MoveAllocationCommand(new ShardId("test",0),existingNodeId,toNodeId)));
  assertThat(rerouteResult.changed(),equalTo(true));
  clusterState=ClusterState.builder(clusterState).routingTable(rerouteResult.routingTable()).build();
  assertThat(clusterState.routingNodes().node(existingNodeId).get(0).state(),equalTo(ShardRoutingState.RELOCATING));
  assertThat(clusterState.routingNodes().node(toNodeId).get(0).state(),equalTo(ShardRoutingState.INITIALIZING));
  logger.info("finish moving the shard");
  rerouteResult=allocation.applyStartedShards(clusterState,clusterState.routingNodes().shardsWithState(INITIALIZING));
  clusterState=ClusterState.builder(clusterState).routingTable(rerouteResult.routingTable()).build();
  assertThat(clusterState.routingNodes().node(existingNodeId).isEmpty(),equalTo(true));
  assertThat(clusterState.routingNodes().node(toNodeId).get(0).state(),equalTo(ShardRoutingState.STARTED));
}
