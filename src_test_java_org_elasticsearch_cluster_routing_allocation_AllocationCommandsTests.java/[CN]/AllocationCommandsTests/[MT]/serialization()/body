{
  AllocationCommands commands=new AllocationCommands(new AllocateAllocationCommand(new ShardId("test",1),"node1",true),new MoveAllocationCommand(new ShardId("test",3),"node2","node3"),new CancelAllocationCommand(new ShardId("test",4),"node5",true));
  BytesStreamOutput bytes=new BytesStreamOutput();
  AllocationCommands.writeTo(commands,bytes);
  AllocationCommands sCommands=AllocationCommands.readFrom(new BytesStreamInput(bytes.bytes()));
  assertThat(sCommands.commands().size(),equalTo(3));
  assertThat(((AllocateAllocationCommand)(sCommands.commands().get(0))).shardId(),equalTo(new ShardId("test",1)));
  assertThat(((AllocateAllocationCommand)(sCommands.commands().get(0))).node(),equalTo("node1"));
  assertThat(((AllocateAllocationCommand)(sCommands.commands().get(0))).allowPrimary(),equalTo(true));
  assertThat(((MoveAllocationCommand)(sCommands.commands().get(1))).shardId(),equalTo(new ShardId("test",3)));
  assertThat(((MoveAllocationCommand)(sCommands.commands().get(1))).fromNode(),equalTo("node2"));
  assertThat(((MoveAllocationCommand)(sCommands.commands().get(1))).toNode(),equalTo("node3"));
  assertThat(((CancelAllocationCommand)(sCommands.commands().get(2))).shardId(),equalTo(new ShardId("test",4)));
  assertThat(((CancelAllocationCommand)(sCommands.commands().get(2))).node(),equalTo("node5"));
  assertThat(((CancelAllocationCommand)(sCommands.commands().get(2))).allowPrimary(),equalTo(true));
}
