{
  XContentParser parser=parseContext.parser();
  float boost=1.0f;
  SpanQuery include=null;
  SpanQuery exclude=null;
  Integer dist=null;
  Integer pre=null;
  Integer post=null;
  String queryName=null;
  String currentFieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("include".equals(currentFieldName)) {
        Query query=parseContext.parseInnerQuery();
        if (!(query instanceof SpanQuery)) {
          throw new ParsingException(parseContext,"spanNot [include] must be of type span query");
        }
        include=(SpanQuery)query;
      }
 else       if ("exclude".equals(currentFieldName)) {
        Query query=parseContext.parseInnerQuery();
        if (!(query instanceof SpanQuery)) {
          throw new ParsingException(parseContext,"spanNot [exclude] must be of type span query");
        }
        exclude=(SpanQuery)query;
      }
 else {
        throw new ParsingException(parseContext,"[span_not] query does not support [" + currentFieldName + "]");
      }
    }
 else {
      if ("dist".equals(currentFieldName)) {
        dist=parser.intValue();
      }
 else       if ("pre".equals(currentFieldName)) {
        pre=parser.intValue();
      }
 else       if ("post".equals(currentFieldName)) {
        post=parser.intValue();
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=parser.floatValue();
      }
 else       if ("_name".equals(currentFieldName)) {
        queryName=parser.text();
      }
 else {
        throw new ParsingException(parseContext,"[span_not] query does not support [" + currentFieldName + "]");
      }
    }
  }
  if (include == null) {
    throw new ParsingException(parseContext,"spanNot must have [include] span query clause");
  }
  if (exclude == null) {
    throw new ParsingException(parseContext,"spanNot must have [exclude] span query clause");
  }
  if (dist != null && (pre != null || post != null)) {
    throw new ParsingException(parseContext,"spanNot can either use [dist] or [pre] & [post] (or none)");
  }
  if (pre != null && post == null) {
    post=0;
  }
 else   if (pre == null && post != null) {
    pre=0;
  }
  SpanNotQuery query;
  if (pre != null && post != null) {
    query=new SpanNotQuery(include,exclude,pre,post);
  }
 else   if (dist != null) {
    query=new SpanNotQuery(include,exclude,dist);
  }
 else {
    query=new SpanNotQuery(include,exclude);
  }
  query.setBoost(boost);
  if (queryName != null) {
    parseContext.addNamedQuery(queryName,query);
  }
  return query;
}
