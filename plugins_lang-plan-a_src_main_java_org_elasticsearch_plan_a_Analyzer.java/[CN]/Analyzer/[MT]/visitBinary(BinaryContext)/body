{
  final ExpressionMetadata binaryemd=adapter.getExpressionMetadata(ctx);
  final ExpressionContext exprctx0=adapter.updateExpressionTree(ctx.expression(0));
  final ExpressionMetadata expremd0=adapter.createExpressionMetadata(exprctx0);
  visit(exprctx0);
  final ExpressionContext exprctx1=adapter.updateExpressionTree(ctx.expression(1));
  final ExpressionMetadata expremd1=adapter.createExpressionMetadata(exprctx1);
  visit(exprctx1);
  final boolean decimal=ctx.MUL() != null || ctx.DIV() != null || ctx.REM() != null || ctx.SUB() != null;
  final boolean add=ctx.ADD() != null;
  final boolean xor=ctx.BWXOR() != null;
  final Type promote=add ? promoteAdd(expremd0.from,expremd1.from) : xor ? promoteXor(expremd0.from,expremd1.from) : promoteNumeric(expremd0.from,expremd1.from,decimal,true);
  if (promote == null) {
    throw new ClassCastException("Cannot apply [" + ctx.getChild(1).getText() + "] "+ "operation to types ["+ expremd0.from.name+ "] and ["+ expremd1.from.name+ "].");
  }
  final Sort sort=promote.sort;
  expremd0.to=add && sort == Sort.STRING ? expremd0.from : promote;
  expremd1.to=add && sort == Sort.STRING ? expremd1.from : promote;
  markCast(expremd0);
  markCast(expremd1);
  if (expremd0.postConst != null && expremd1.postConst != null) {
    if (ctx.MUL() != null) {
      if (sort == Sort.INT) {
        if (settings.getNumericOverflow()) {
          binaryemd.preConst=(int)expremd0.postConst * (int)expremd1.postConst;
        }
 else {
          binaryemd.preConst=Math.multiplyExact((int)expremd0.postConst,(int)expremd1.postConst);
        }
      }
 else       if (sort == Sort.LONG) {
        if (settings.getNumericOverflow()) {
          binaryemd.preConst=(long)expremd0.postConst * (long)expremd1.postConst;
        }
 else {
          binaryemd.preConst=Math.multiplyExact((long)expremd0.postConst,(long)expremd1.postConst);
        }
      }
 else       if (sort == Sort.FLOAT) {
        if (settings.getNumericOverflow()) {
          binaryemd.preConst=(float)expremd0.postConst * (float)expremd1.postConst;
        }
 else {
          binaryemd.preConst=Utility.multiplyWithoutOverflow((float)expremd0.postConst,(float)expremd1.postConst);
        }
      }
 else       if (sort == Sort.DOUBLE) {
        if (settings.getNumericOverflow()) {
          binaryemd.preConst=(double)expremd0.postConst * (double)expremd1.postConst;
        }
 else {
          binaryemd.preConst=Utility.multiplyWithoutOverflow((double)expremd0.postConst,(double)expremd1.postConst);
        }
      }
 else {
        throw new IllegalStateException(error(ctx) + "Unexpected parser state.");
      }
    }
 else     if (ctx.DIV() != null) {
      if (sort == Sort.INT) {
        if (settings.getNumericOverflow()) {
          binaryemd.preConst=(int)expremd0.postConst / (int)expremd1.postConst;
        }
 else {
          binaryemd.preConst=Utility.divideWithoutOverflow((int)expremd0.postConst,(int)expremd1.postConst);
        }
      }
 else       if (sort == Sort.LONG) {
        if (settings.getNumericOverflow()) {
          binaryemd.preConst=(long)expremd0.postConst / (long)expremd1.postConst;
        }
 else {
          binaryemd.preConst=Utility.divideWithoutOverflow((long)expremd0.postConst,(long)expremd1.postConst);
        }
      }
 else       if (sort == Sort.FLOAT) {
        if (settings.getNumericOverflow()) {
          binaryemd.preConst=(float)expremd0.postConst / (float)expremd1.postConst;
        }
 else {
          binaryemd.preConst=Utility.divideWithoutOverflow((float)expremd0.postConst,(float)expremd1.postConst);
        }
      }
 else       if (sort == Sort.DOUBLE) {
        if (settings.getNumericOverflow()) {
          binaryemd.preConst=(double)expremd0.postConst / (double)expremd1.postConst;
        }
 else {
          binaryemd.preConst=Utility.divideWithoutOverflow((double)expremd0.postConst,(double)expremd1.postConst);
        }
      }
 else {
        throw new IllegalStateException(error(ctx) + "Unexpected parser state.");
      }
    }
 else     if (ctx.REM() != null) {
      if (sort == Sort.INT) {
        binaryemd.preConst=(int)expremd0.postConst % (int)expremd1.postConst;
      }
 else       if (sort == Sort.LONG) {
        binaryemd.preConst=(long)expremd0.postConst % (long)expremd1.postConst;
      }
 else       if (sort == Sort.FLOAT) {
        if (settings.getNumericOverflow()) {
          binaryemd.preConst=(float)expremd0.postConst % (float)expremd1.postConst;
        }
 else {
          binaryemd.preConst=Utility.remainderWithoutOverflow((float)expremd0.postConst,(float)expremd1.postConst);
        }
      }
 else       if (sort == Sort.DOUBLE) {
        if (settings.getNumericOverflow()) {
          binaryemd.preConst=(double)expremd0.postConst % (double)expremd1.postConst;
        }
 else {
          binaryemd.preConst=Utility.remainderWithoutOverflow((double)expremd0.postConst,(double)expremd1.postConst);
        }
      }
 else {
        throw new IllegalStateException(error(ctx) + "Unexpected parser state.");
      }
    }
 else     if (ctx.ADD() != null) {
      if (sort == Sort.INT) {
        if (settings.getNumericOverflow()) {
          binaryemd.preConst=(int)expremd0.postConst + (int)expremd1.postConst;
        }
 else {
          binaryemd.preConst=Math.addExact((int)expremd0.postConst,(int)expremd1.postConst);
        }
      }
 else       if (sort == Sort.LONG) {
        if (settings.getNumericOverflow()) {
          binaryemd.preConst=(long)expremd0.postConst + (long)expremd1.postConst;
        }
 else {
          binaryemd.preConst=Math.addExact((long)expremd0.postConst,(long)expremd1.postConst);
        }
      }
 else       if (sort == Sort.FLOAT) {
        if (settings.getNumericOverflow()) {
          binaryemd.preConst=(float)expremd0.postConst + (float)expremd1.postConst;
        }
 else {
          binaryemd.preConst=Utility.addWithoutOverflow((float)expremd0.postConst,(float)expremd1.postConst);
        }
      }
 else       if (sort == Sort.DOUBLE) {
        if (settings.getNumericOverflow()) {
          binaryemd.preConst=(double)expremd0.postConst + (double)expremd1.postConst;
        }
 else {
          binaryemd.preConst=Utility.addWithoutOverflow((double)expremd0.postConst,(double)expremd1.postConst);
        }
      }
 else       if (sort == Sort.STRING) {
        binaryemd.preConst="" + expremd0.postConst + expremd1.postConst;
      }
 else {
        throw new IllegalStateException(error(ctx) + "Unexpected parser state.");
      }
    }
 else     if (ctx.SUB() != null) {
      if (sort == Sort.INT) {
        if (settings.getNumericOverflow()) {
          binaryemd.preConst=(int)expremd0.postConst - (int)expremd1.postConst;
        }
 else {
          binaryemd.preConst=Math.subtractExact((int)expremd0.postConst,(int)expremd1.postConst);
        }
      }
 else       if (sort == Sort.LONG) {
        if (settings.getNumericOverflow()) {
          binaryemd.preConst=(long)expremd0.postConst - (long)expremd1.postConst;
        }
 else {
          binaryemd.preConst=Math.subtractExact((long)expremd0.postConst,(long)expremd1.postConst);
        }
      }
 else       if (sort == Sort.FLOAT) {
        if (settings.getNumericOverflow()) {
          binaryemd.preConst=(float)expremd0.postConst - (float)expremd1.postConst;
        }
 else {
          binaryemd.preConst=Utility.subtractWithoutOverflow((float)expremd0.postConst,(float)expremd1.postConst);
        }
      }
 else       if (sort == Sort.DOUBLE) {
        if (settings.getNumericOverflow()) {
          binaryemd.preConst=(double)expremd0.postConst - (double)expremd1.postConst;
        }
 else {
          binaryemd.preConst=Utility.subtractWithoutOverflow((double)expremd0.postConst,(double)expremd1.postConst);
        }
      }
 else {
        throw new IllegalStateException(error(ctx) + "Unexpected parser state.");
      }
    }
 else     if (ctx.LSH() != null) {
      if (sort == Sort.INT) {
        binaryemd.preConst=(int)expremd0.postConst << (int)expremd1.postConst;
      }
 else       if (sort == Sort.LONG) {
        binaryemd.preConst=(long)expremd0.postConst << (long)expremd1.postConst;
      }
 else {
        throw new IllegalStateException(error(ctx) + "Unexpected parser state.");
      }
    }
 else     if (ctx.RSH() != null) {
      if (sort == Sort.INT) {
        binaryemd.preConst=(int)expremd0.postConst >> (int)expremd1.postConst;
      }
 else       if (sort == Sort.LONG) {
        binaryemd.preConst=(long)expremd0.postConst >> (long)expremd1.postConst;
      }
 else {
        throw new IllegalStateException(error(ctx) + "Unexpected parser state.");
      }
    }
 else     if (ctx.USH() != null) {
      if (sort == Sort.INT) {
        binaryemd.preConst=(int)expremd0.postConst >>> (int)expremd1.postConst;
      }
 else       if (sort == Sort.LONG) {
        binaryemd.preConst=(long)expremd0.postConst >>> (long)expremd1.postConst;
      }
 else {
        throw new IllegalStateException(error(ctx) + "Unexpected parser state.");
      }
    }
 else     if (ctx.BWAND() != null) {
      if (sort == Sort.INT) {
        binaryemd.preConst=(int)expremd0.postConst & (int)expremd1.postConst;
      }
 else       if (sort == Sort.LONG) {
        binaryemd.preConst=(long)expremd0.postConst & (long)expremd1.postConst;
      }
 else {
        throw new IllegalStateException(error(ctx) + "Unexpected parser state.");
      }
    }
 else     if (ctx.BWXOR() != null) {
      if (sort == Sort.BOOL) {
        binaryemd.preConst=(boolean)expremd0.postConst ^ (boolean)expremd1.postConst;
      }
 else       if (sort == Sort.INT) {
        binaryemd.preConst=(int)expremd0.postConst ^ (int)expremd1.postConst;
      }
 else       if (sort == Sort.LONG) {
        binaryemd.preConst=(long)expremd0.postConst ^ (long)expremd1.postConst;
      }
 else {
        throw new IllegalStateException(error(ctx) + "Unexpected parser state.");
      }
    }
 else     if (ctx.BWOR() != null) {
      if (sort == Sort.INT) {
        binaryemd.preConst=(int)expremd0.postConst | (int)expremd1.postConst;
      }
 else       if (sort == Sort.LONG) {
        binaryemd.preConst=(long)expremd0.postConst | (long)expremd1.postConst;
      }
 else {
        throw new IllegalStateException(error(ctx) + "Unexpected parser state.");
      }
    }
 else {
      throw new IllegalStateException(error(ctx) + "Unexpected parser state.");
    }
  }
  binaryemd.from=promote;
  binaryemd.typesafe=expremd0.typesafe && expremd1.typesafe;
  return null;
}
