{
  if (Double.isNaN(d) || Double.isInfinite(d)) {
    return d;
  }
 else   if (d == 0) {
    return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
  }
  long bits=Double.doubleToLongBits(d);
  long sign=bits & 0x8000000000000000L;
  long exponent=bits & 0x7ff0000000000000L;
  long mantissa=bits & 0x000fffffffffffffL;
  if (d * (direction - d) >= 0) {
    if (mantissa == 0x000fffffffffffffL) {
      return Double.longBitsToDouble(sign | (exponent + 0x0010000000000000L));
    }
 else {
      return Double.longBitsToDouble(sign | exponent | (mantissa + 1));
    }
  }
 else {
    if (mantissa == 0L) {
      return Double.longBitsToDouble(sign | (exponent - 0x0010000000000000L) | 0x000fffffffffffffL);
    }
 else {
      return Double.longBitsToDouble(sign | exponent | (mantissa - 1));
    }
  }
}
