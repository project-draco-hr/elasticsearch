{
  AllocationService strategy=new AllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries",10).put("cluster.routing.allocation.allow_rebalance","always").put("cluster.routing.allocation.awareness.attributes","rack_id").build());
  logger.info("Building initial routing table for 'moveShardOnceNewNodeWithAttributeAdded5'");
  MetaData metaData=newMetaDataBuilder().put(newIndexMetaDataBuilder("test").numberOfShards(1).numberOfReplicas(2)).build();
  RoutingTable routingTable=routingTable().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=newClusterStateBuilder().metaData(metaData).routingTable(routingTable).build();
  logger.info("--> adding two nodes on same rack and do rerouting");
  clusterState=newClusterStateBuilder().state(clusterState).nodes(newNodesBuilder().put(newNode("node1",ImmutableMap.of("rack_id","1"))).put(newNode("node2",ImmutableMap.of("rack_id","1")))).build();
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.routingNodes().shardsWithState(INITIALIZING).size(),equalTo(1));
  logger.info("--> start the shards (primaries)");
  routingTable=strategy.applyStartedShards(clusterState,clusterState.routingNodes().shardsWithState(INITIALIZING)).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  logger.info("--> start the shards (replicas)");
  routingTable=strategy.applyStartedShards(clusterState,clusterState.routingNodes().shardsWithState(INITIALIZING)).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.routingNodes().shardsWithState(ShardRoutingState.STARTED).size(),equalTo(2));
  logger.info("--> add a new node with a new rack and reroute");
  clusterState=newClusterStateBuilder().state(clusterState).nodes(newNodesBuilder().putAll(clusterState.nodes()).put(newNode("node3",ImmutableMap.of("rack_id","2")))).build();
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.routingNodes().shardsWithState(ShardRoutingState.STARTED).size(),equalTo(2));
  assertThat(clusterState.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(),equalTo(1));
  assertThat(clusterState.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).currentNodeId(),equalTo("node3"));
  logger.info("--> complete relocation");
  routingTable=strategy.applyStartedShards(clusterState,clusterState.routingNodes().shardsWithState(INITIALIZING)).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.routingNodes().shardsWithState(ShardRoutingState.STARTED).size(),equalTo(3));
  logger.info("--> do another reroute, make sure nothing moves");
  assertThat(strategy.reroute(clusterState).routingTable(),sameInstance(clusterState.routingTable()));
  logger.info("--> add another node with a new rack, we will have another relocation");
  clusterState=newClusterStateBuilder().state(clusterState).nodes(newNodesBuilder().putAll(clusterState.nodes()).put(newNode("node4",ImmutableMap.of("rack_id","3")))).build();
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.routingNodes().shardsWithState(STARTED).size(),equalTo(2));
  assertThat(clusterState.routingNodes().shardsWithState(ShardRoutingState.RELOCATING).size(),equalTo(1));
  assertThat(clusterState.routingNodes().shardsWithState(ShardRoutingState.RELOCATING).get(0).relocatingNodeId(),equalTo("node4"));
  logger.info("--> complete relocation");
  routingTable=strategy.applyStartedShards(clusterState,clusterState.routingNodes().shardsWithState(INITIALIZING)).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.routingNodes().shardsWithState(ShardRoutingState.STARTED).size(),equalTo(3));
  logger.info("--> make sure another reroute does not move things");
  assertThat(strategy.reroute(clusterState).routingTable(),sameInstance(clusterState.routingTable()));
}
