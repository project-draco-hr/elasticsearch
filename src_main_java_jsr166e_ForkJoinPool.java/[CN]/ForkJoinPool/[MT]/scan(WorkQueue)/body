{
  WorkQueue[] ws;
  int m;
  int ps=plock;
  if (w != null && (ws=workQueues) != null && (m=ws.length - 1) >= 0) {
    int ec=w.eventCount;
    int r=w.seed;
    r^=r << 13;
    r^=r >>> 17;
    w.seed=r^=r << 5;
    w.hint=-1;
    int j=((m + m + 1) | MIN_SCAN) & MAX_SCAN;
    do {
      WorkQueue q;
      ForkJoinTask<?>[] a;
      int b;
      if ((q=ws[(r + j) & m]) != null && (b=q.base) - q.top < 0 && (a=q.array) != null) {
        int i=(((a.length - 1) & b) << ASHIFT) + ABASE;
        ForkJoinTask<?> t=(ForkJoinTask<?>)U.getObjectVolatile(a,i);
        if (q.base == b && ec >= 0 && t != null && U.compareAndSwapObject(a,i,t,null)) {
          if ((q.base=b + 1) - q.top < 0)           signalWork(q);
          return t;
        }
 else         if ((ec < 0 || j < m) && (int)(ctl >> AC_SHIFT) <= 0) {
          w.hint=(r + j) & m;
          break;
        }
      }
    }
 while (--j >= 0);
    int h, e, ns;
    long c, sc;
    WorkQueue q;
    if ((ns=w.nsteals) != 0) {
      if (U.compareAndSwapLong(this,STEALCOUNT,sc=stealCount,sc + ns))       w.nsteals=0;
    }
 else     if (plock != ps)     ;
 else     if ((e=(int)(c=ctl)) < 0)     w.qlock=-1;
 else {
      if ((h=w.hint) < 0) {
        if (ec >= 0) {
          long nc=(((long)ec | ((c - AC_UNIT) & (AC_MASK | TC_MASK))));
          w.nextWait=e;
          w.eventCount=ec | INT_SIGN;
          if (ctl != c || !U.compareAndSwapLong(this,CTL,c,nc))           w.eventCount=ec;
 else           if ((int)(c >> AC_SHIFT) == 1 - (config & SMASK))           idleAwaitWork(w,nc,c);
        }
 else         if (w.eventCount < 0 && ctl == c) {
          Thread wt=Thread.currentThread();
          Thread.interrupted();
          U.putObject(wt,PARKBLOCKER,this);
          w.parker=wt;
          if (w.eventCount < 0)           U.park(false,0L);
          w.parker=null;
          U.putObject(wt,PARKBLOCKER,null);
        }
      }
      if ((h >= 0 || (h=w.hint) >= 0) && (ws=workQueues) != null && h < ws.length && (q=ws[h]) != null) {
        WorkQueue v;
        Thread p;
        int u, i, s;
        for (int n=(config & SMASK) - 1; ; ) {
          int idleCount=(w.eventCount < 0) ? 0 : -1;
          if (((s=idleCount - q.base + q.top) <= n && (n=s) <= 0) || (u=(int)((c=ctl) >>> 32)) >= 0 || (e=(int)c) <= 0 || m < (i=e & SMASK) || (v=ws[i]) == null)           break;
          long nc=(((long)(v.nextWait & E_MASK)) | ((long)(u + UAC_UNIT) << 32));
          if (v.eventCount != (e | INT_SIGN) || !U.compareAndSwapLong(this,CTL,c,nc))           break;
          v.hint=h;
          v.eventCount=(e + E_SEQ) & E_MASK;
          if ((p=v.parker) != null)           U.unpark(p);
          if (--n <= 0)           break;
        }
      }
    }
  }
  return null;
}
