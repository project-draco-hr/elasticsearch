{
  ForkJoinTask<?> ps=w.currentSteal;
  for (boolean active=true; ; ) {
    long c;
    WorkQueue q;
    ForkJoinTask<?> t;
    int b;
    while ((t=w.nextLocalTask()) != null)     t.doExec();
    if ((q=findNonEmptyStealQueue()) != null) {
      if (!active) {
        active=true;
        do {
        }
 while (!U.compareAndSwapLong(this,CTL,c=ctl,((c & ~AC_MASK) | ((c & AC_MASK) + AC_UNIT))));
      }
      if ((b=q.base) - q.top < 0 && (t=q.pollAt(b)) != null) {
        (w.currentSteal=t).doExec();
        w.currentSteal=ps;
      }
    }
 else     if (active) {
      long nc=((c=ctl) & ~AC_MASK) | ((c & AC_MASK) - AC_UNIT);
      if ((int)(nc >> AC_SHIFT) + parallelism == 0)       break;
      if (U.compareAndSwapLong(this,CTL,c,nc))       active=false;
    }
 else     if ((int)((c=ctl) >> AC_SHIFT) + parallelism <= 0 && U.compareAndSwapLong(this,CTL,c,((c & ~AC_MASK) | ((c & AC_MASK) + AC_UNIT))))     break;
  }
}
