{
  int parallelism=-1;
  ForkJoinWorkerThreadFactory factory=defaultForkJoinWorkerThreadFactory;
  UncaughtExceptionHandler handler=null;
  try {
    String pp=System.getProperty("java.util.concurrent.ForkJoinPool.common.parallelism");
    String fp=System.getProperty("java.util.concurrent.ForkJoinPool.common.threadFactory");
    String hp=System.getProperty("java.util.concurrent.ForkJoinPool.common.exceptionHandler");
    if (pp != null)     parallelism=Integer.parseInt(pp);
    if (fp != null)     factory=((ForkJoinWorkerThreadFactory)ClassLoader.getSystemClassLoader().loadClass(fp).newInstance());
    if (hp != null)     handler=((UncaughtExceptionHandler)ClassLoader.getSystemClassLoader().loadClass(hp).newInstance());
  }
 catch (  Exception ignore) {
  }
  if (parallelism < 0 && (parallelism=Runtime.getRuntime().availableProcessors() - 1) < 0)   parallelism=0;
  if (parallelism > MAX_CAP)   parallelism=MAX_CAP;
  return new ForkJoinPool(parallelism,factory,handler,LIFO_QUEUE,"ForkJoinPool.commonPool-worker-");
}
