{
  int ps;
  if (this == common)   return false;
  if ((ps=plock) >= 0) {
    if (!enable)     return false;
    if ((ps & PL_LOCK) != 0 || !U.compareAndSwapInt(this,PLOCK,ps,ps+=PL_LOCK))     ps=acquirePlock();
    int nps=((ps + PL_LOCK) & ~SHUTDOWN) | SHUTDOWN;
    if (!U.compareAndSwapInt(this,PLOCK,ps,nps))     releasePlock(nps);
  }
  for (long c; ; ) {
    if (((c=ctl) & STOP_BIT) != 0) {
      if ((short)(c >>> TC_SHIFT) + parallelism <= 0) {
synchronized (this) {
          notifyAll();
        }
      }
      return true;
    }
    if (!now) {
      WorkQueue[] ws;
      WorkQueue w;
      if ((int)(c >> AC_SHIFT) + parallelism > 0)       return false;
      if ((ws=workQueues) != null) {
        for (int i=0; i < ws.length; ++i) {
          if ((w=ws[i]) != null && (!w.isEmpty() || ((i & 1) != 0 && w.eventCount >= 0))) {
            signalWork(ws,w);
            return false;
          }
        }
      }
    }
    if (U.compareAndSwapLong(this,CTL,c,c | STOP_BIT)) {
      for (int pass=0; pass < 3; ++pass) {
        WorkQueue[] ws;
        WorkQueue w;
        Thread wt;
        if ((ws=workQueues) != null) {
          int n=ws.length;
          for (int i=0; i < n; ++i) {
            if ((w=ws[i]) != null) {
              w.qlock=-1;
              if (pass > 0) {
                w.cancelAll();
                if (pass > 1 && (wt=w.owner) != null) {
                  if (!wt.isInterrupted()) {
                    try {
                      wt.interrupt();
                    }
 catch (                    Throwable ignore) {
                    }
                  }
                  U.unpark(wt);
                }
              }
            }
          }
          int i, e;
          long cc;
          Thread p;
          while ((e=(int)(cc=ctl) & E_MASK) != 0 && (i=e & SMASK) < n && i >= 0 && (w=ws[i]) != null) {
            long nc=((long)(w.nextWait & E_MASK) | ((cc + AC_UNIT) & AC_MASK) | (cc & (TC_MASK | STOP_BIT)));
            if (w.eventCount == (e | INT_SIGN) && U.compareAndSwapLong(this,CTL,cc,nc)) {
              w.eventCount=(e + E_SEQ) & E_MASK;
              w.qlock=-1;
              if ((p=w.parker) != null)               U.unpark(p);
            }
          }
        }
      }
    }
  }
}
