{
  if (Thread.interrupted())   throw new InterruptedException();
  if (this == common) {
    awaitQuiescence(timeout,unit);
    return false;
  }
  long nanos=unit.toNanos(timeout);
  if (isTerminated())   return true;
  long startTime=System.nanoTime();
  boolean terminated=false;
synchronized (this) {
    for (long waitTime=nanos, millis=0L; ; ) {
      if (terminated=isTerminated() || waitTime <= 0L || (millis=unit.toMillis(waitTime)) <= 0L)       break;
      wait(millis);
      waitTime=nanos - (System.nanoTime() - startTime);
    }
  }
  return terminated;
}
