{
  int spins=PL_SPINS, r=0, ps, nps;
  for (; ; ) {
    if (((ps=plock) & PL_LOCK) == 0 && U.compareAndSwapInt(this,PLOCK,ps,nps=ps + PL_LOCK))     return nps;
 else     if (r == 0) {
      Thread t=Thread.currentThread();
      WorkQueue w;
      Submitter z;
      if ((t instanceof ForkJoinWorkerThread) && (w=((ForkJoinWorkerThread)t).workQueue) != null)       r=w.seed;
 else       if ((z=submitters.get()) != null)       r=z.seed;
 else       r=1;
    }
 else     if (spins >= 0) {
      r^=r << 1;
      r^=r >>> 3;
      r^=r << 10;
      if (r >= 0)       --spins;
    }
 else     if (U.compareAndSwapInt(this,PLOCK,ps,ps | PL_SIGNAL)) {
synchronized (this) {
        if ((plock & PL_SIGNAL) != 0) {
          try {
            wait();
          }
 catch (          InterruptedException ie) {
            try {
              Thread.currentThread().interrupt();
            }
 catch (            SecurityException ignore) {
            }
          }
        }
 else         notifyAll();
      }
    }
  }
}
