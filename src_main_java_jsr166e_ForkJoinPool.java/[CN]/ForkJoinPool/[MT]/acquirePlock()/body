{
  int spins=PL_SPINS, ps, nps;
  for (; ; ) {
    if (((ps=plock) & PL_LOCK) == 0 && U.compareAndSwapInt(this,PLOCK,ps,nps=ps + PL_LOCK))     return nps;
 else     if (spins >= 0) {
      if (ThreadLocalRandom.current().nextInt() >= 0)       --spins;
    }
 else     if (U.compareAndSwapInt(this,PLOCK,ps,ps | PL_SIGNAL)) {
synchronized (this) {
        if ((plock & PL_SIGNAL) != 0) {
          try {
            wait();
          }
 catch (          InterruptedException ie) {
            try {
              Thread.currentThread().interrupt();
            }
 catch (            SecurityException ignore) {
            }
          }
        }
 else         notifyAll();
      }
    }
  }
}
