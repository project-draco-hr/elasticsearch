{
  client().admin().indices().prepareCreate("index").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards",2).put("index.number_of_replicas",1).build()).execute().actionGet();
  ensureGreen();
  final int numIndexThreads=3;
  final int numberPercolateOperation=100;
  final AtomicBoolean assertionFailure=new AtomicBoolean(false);
  final CountDownLatch start=new CountDownLatch(1);
  final AtomicInteger indexOperations=new AtomicInteger();
  final AtomicInteger deleteOperations=new AtomicInteger();
  final AtomicBoolean run=new AtomicBoolean(true);
  final AtomicBoolean freeze=new AtomicBoolean(false);
  final CountDownLatch[] latches=new CountDownLatch[2];
  Thread[] indexThreads=new Thread[numIndexThreads];
  for (int i=0; i < indexThreads.length; i++) {
    Runnable r=new Runnable(){
      @Override public void run(){
        try {
          Random r=new Random();
          XContentBuilder doc=XContentFactory.jsonBuilder().startObject().field("query",termQuery("field1","value")).endObject();
          start.await();
          while (run.get()) {
            if (freeze.get()) {
              latches[0].countDown();
              latches[1].await();
            }
            if ((indexOperations.get() - deleteOperations.get()) > 0 && r.nextInt(100) < 19) {
              String id=Integer.toString(deleteOperations.incrementAndGet());
              DeleteResponse response=client().prepareDelete("index","_percolator",id).execute().actionGet();
              assertThat(response.getId(),equalTo(id));
              assertThat(response.isNotFound(),equalTo(false));
            }
 else {
              String id=Integer.toString(indexOperations.incrementAndGet());
              IndexResponse response=client().prepareIndex("index","_percolator",id).setSource(doc).execute().actionGet();
              assertThat(response.getId(),equalTo(id));
            }
          }
        }
 catch (        Throwable t) {
          run.set(false);
          assertionFailure.set(true);
          CountDownLatch percolateLatch=latches[0];
          latches[0]=null;
          if (percolateLatch != null) {
            percolateLatch.countDown();
          }
          logger.error("Error in indexing thread...",t);
        }
      }
    }
;
    indexThreads[i]=new Thread(r);
    indexThreads[i].start();
  }
  XContentBuilder percolateDoc=XContentFactory.jsonBuilder().startObject().startObject("doc").field("field1","value").endObject().endObject();
  start.countDown();
  for (int counter=0; counter < numberPercolateOperation; counter++) {
    Thread.sleep(100);
    latches[0]=new CountDownLatch(numIndexThreads);
    latches[1]=new CountDownLatch(1);
    freeze.set(true);
    latches[0].await();
    int atLeastExpected=indexOperations.get() - deleteOperations.get();
    PercolateResponse response=client().preparePercolate("index","type").setSource(percolateDoc).execute().actionGet();
    assertThat(response.getShardFailures(),emptyArray());
    assertThat(response.getSuccessfulShards(),equalTo(response.getTotalShards()));
    assertThat(response.getMatches().length,equalTo(atLeastExpected));
    freeze.set(false);
    latches[1].countDown();
  }
  run.set(false);
  for (  Thread thread : indexThreads) {
    thread.join();
  }
  assertThat(assertionFailure.get(),equalTo(false));
}
