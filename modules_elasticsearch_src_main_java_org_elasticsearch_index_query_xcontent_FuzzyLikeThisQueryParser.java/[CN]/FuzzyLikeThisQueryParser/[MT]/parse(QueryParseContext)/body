{
  XContentParser parser=parseContext.parser();
  int maxNumTerms=25;
  float boost=1.0f;
  List<String> fields=null;
  String likeText=null;
  float minSimilarity=0.5f;
  int prefixLength=0;
  boolean ignoreTF=false;
  XContentParser.Token token;
  String currentFieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token.isValue()) {
      if ("like_text".equals(currentFieldName) || "likeText".equals(currentFieldName)) {
        likeText=parser.text();
      }
 else       if ("max_query_terms".equals(currentFieldName) || "maxQueryTerms".equals(currentFieldName)) {
        maxNumTerms=parser.intValue();
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=parser.floatValue();
      }
 else       if ("ignore_tf".equals(currentFieldName) || "ignoreTF".equals(currentFieldName)) {
        ignoreTF=parser.booleanValue();
      }
 else       if ("min_similarity".equals(currentFieldName) || "minSimilarity".equals(currentFieldName)) {
        minSimilarity=parser.floatValue();
      }
 else       if ("prefix_length".equals(currentFieldName) || "prefixLength".equals(currentFieldName)) {
        prefixLength=parser.intValue();
      }
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if ("fields".equals(currentFieldName)) {
        fields=Lists.newArrayList();
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          fields.add(parseContext.indexName(parser.text()));
        }
      }
    }
  }
  if (likeText == null) {
    throw new QueryParsingException(index,"fuzzy_like_this requires 'like_text' to be specified");
  }
  FuzzyLikeThisQuery query=new FuzzyLikeThisQuery(maxNumTerms,parseContext.mapperService().searchAnalyzer());
  if (fields == null) {
    query.addTerms(likeText,AllFieldMapper.NAME,minSimilarity,prefixLength);
  }
 else {
    for (    String field : fields) {
      query.addTerms(likeText,field,minSimilarity,prefixLength);
    }
  }
  query.setBoost(boost);
  query.setIgnoreTF(ignoreTF);
  return query;
}
