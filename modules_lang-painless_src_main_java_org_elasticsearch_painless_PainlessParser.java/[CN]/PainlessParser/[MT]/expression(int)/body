{
  ParserRuleContext _parentctx=_ctx;
  int _parentState=getState();
  ExpressionContext _localctx=new ExpressionContext(_ctx,_parentState);
  ExpressionContext _prevctx=_localctx;
  int _startState=26;
  enterRecursionRule(_localctx,26,RULE_expression,_p);
  int _la;
  try {
    int _alt;
    enterOuterAlt(_localctx,1);
{
      setState(237);
switch (getInterpreter().adaptivePredict(_input,26,_ctx)) {
case 1:
{
          _localctx=new UnaryContext(_localctx);
          _ctx=_localctx;
          _prevctx=_localctx;
          setState(210);
          _la=_input.LA(1);
          if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD)| (1L << SUB))) != 0))) {
            _errHandler.recoverInline(this);
          }
 else {
            consume();
          }
          setState(211);
          expression(14);
        }
      break;
case 2:
{
      _localctx=new CastContext(_localctx);
      _ctx=_localctx;
      _prevctx=_localctx;
      setState(212);
      match(LP);
      setState(213);
      decltype();
      setState(214);
      match(RP);
      setState(215);
      expression(13);
    }
  break;
case 3:
{
  _localctx=new AssignmentContext(_localctx);
  _ctx=_localctx;
  _prevctx=_localctx;
  setState(217);
  extstart();
  setState(218);
  _la=_input.LA(1);
  if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << AADD) | (1L << ASUB)| (1L << AMUL)| (1L << ADIV)| (1L << AREM)| (1L << AAND)| (1L << AXOR)| (1L << AOR)| (1L << ALSH)| (1L << ARSH)| (1L << AUSH))) != 0))) {
    _errHandler.recoverInline(this);
  }
 else {
    consume();
  }
  setState(219);
  expression(1);
}
break;
case 4:
{
_localctx=new PrecedenceContext(_localctx);
_ctx=_localctx;
_prevctx=_localctx;
setState(221);
match(LP);
setState(222);
expression(0);
setState(223);
match(RP);
}
break;
case 5:
{
_localctx=new NumericContext(_localctx);
_ctx=_localctx;
_prevctx=_localctx;
setState(225);
_la=_input.LA(1);
if (!(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (OCTAL - 63)) | (1L << (HEX - 63)) | (1L << (INTEGER - 63))| (1L << (DECIMAL - 63)))) != 0))) {
_errHandler.recoverInline(this);
}
 else {
consume();
}
}
break;
case 6:
{
_localctx=new CharContext(_localctx);
_ctx=_localctx;
_prevctx=_localctx;
setState(226);
match(CHAR);
}
break;
case 7:
{
_localctx=new TrueContext(_localctx);
_ctx=_localctx;
_prevctx=_localctx;
setState(227);
match(TRUE);
}
break;
case 8:
{
_localctx=new FalseContext(_localctx);
_ctx=_localctx;
_prevctx=_localctx;
setState(228);
match(FALSE);
}
break;
case 9:
{
_localctx=new NullContext(_localctx);
_ctx=_localctx;
_prevctx=_localctx;
setState(229);
match(NULL);
}
break;
case 10:
{
_localctx=new PostincContext(_localctx);
_ctx=_localctx;
_prevctx=_localctx;
setState(230);
extstart();
setState(231);
increment();
}
break;
case 11:
{
_localctx=new PreincContext(_localctx);
_ctx=_localctx;
_prevctx=_localctx;
setState(233);
increment();
setState(234);
extstart();
}
break;
case 12:
{
_localctx=new ExternalContext(_localctx);
_ctx=_localctx;
_prevctx=_localctx;
setState(236);
extstart();
}
break;
}
_ctx.stop=_input.LT(-1);
setState(277);
_errHandler.sync(this);
_alt=getInterpreter().adaptivePredict(_input,28,_ctx);
while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
if (_alt == 1) {
if (_parseListeners != null) triggerExitRuleEvent();
_prevctx=_localctx;
{
setState(275);
switch (getInterpreter().adaptivePredict(_input,27,_ctx)) {
case 1:
{
_localctx=new BinaryContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(239);
if (!(precpred(_ctx,12))) throw new FailedPredicateException(this,"precpred(_ctx, 12)");
setState(240);
_la=_input.LA(1);
if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << REM))) != 0))) {
_errHandler.recoverInline(this);
}
 else {
consume();
}
setState(241);
expression(13);
}
break;
case 2:
{
_localctx=new BinaryContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(242);
if (!(precpred(_ctx,11))) throw new FailedPredicateException(this,"precpred(_ctx, 11)");
setState(243);
_la=_input.LA(1);
if (!(_la == ADD || _la == SUB)) {
_errHandler.recoverInline(this);
}
 else {
consume();
}
setState(244);
expression(12);
}
break;
case 3:
{
_localctx=new BinaryContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(245);
if (!(precpred(_ctx,10))) throw new FailedPredicateException(this,"precpred(_ctx, 10)");
setState(246);
_la=_input.LA(1);
if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LSH) | (1L << RSH) | (1L << USH))) != 0))) {
_errHandler.recoverInline(this);
}
 else {
consume();
}
setState(247);
expression(11);
}
break;
case 4:
{
_localctx=new CompContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(248);
if (!(precpred(_ctx,9))) throw new FailedPredicateException(this,"precpred(_ctx, 9)");
setState(249);
_la=_input.LA(1);
if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LTE) | (1L << GT)| (1L << GTE))) != 0))) {
_errHandler.recoverInline(this);
}
 else {
consume();
}
setState(250);
expression(10);
}
break;
case 5:
{
_localctx=new CompContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(251);
if (!(precpred(_ctx,8))) throw new FailedPredicateException(this,"precpred(_ctx, 8)");
setState(252);
_la=_input.LA(1);
if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << EQR) | (1L << NE)| (1L << NER))) != 0))) {
_errHandler.recoverInline(this);
}
 else {
consume();
}
setState(253);
expression(9);
}
break;
case 6:
{
_localctx=new BinaryContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(254);
if (!(precpred(_ctx,7))) throw new FailedPredicateException(this,"precpred(_ctx, 7)");
setState(255);
match(BWAND);
setState(256);
expression(8);
}
break;
case 7:
{
_localctx=new BinaryContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(257);
if (!(precpred(_ctx,6))) throw new FailedPredicateException(this,"precpred(_ctx, 6)");
setState(258);
match(BWXOR);
setState(259);
expression(7);
}
break;
case 8:
{
_localctx=new BinaryContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(260);
if (!(precpred(_ctx,5))) throw new FailedPredicateException(this,"precpred(_ctx, 5)");
setState(261);
match(BWOR);
setState(262);
expression(6);
}
break;
case 9:
{
_localctx=new BoolContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(263);
if (!(precpred(_ctx,4))) throw new FailedPredicateException(this,"precpred(_ctx, 4)");
setState(264);
match(BOOLAND);
setState(265);
expression(5);
}
break;
case 10:
{
_localctx=new BoolContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(266);
if (!(precpred(_ctx,3))) throw new FailedPredicateException(this,"precpred(_ctx, 3)");
setState(267);
match(BOOLOR);
setState(268);
expression(4);
}
break;
case 11:
{
_localctx=new ConditionalContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(269);
if (!(precpred(_ctx,2))) throw new FailedPredicateException(this,"precpred(_ctx, 2)");
setState(270);
match(COND);
setState(271);
expression(0);
setState(272);
match(COLON);
setState(273);
expression(2);
}
break;
}
}
}
setState(279);
_errHandler.sync(this);
_alt=getInterpreter().adaptivePredict(_input,28,_ctx);
}
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
unrollRecursionContexts(_parentctx);
}
return _localctx;
}
