{
  StatementContext _localctx=new StatementContext(_ctx,getState());
  enterRule(_localctx,2,RULE_statement);
  int _la;
  try {
    int _alt;
    setState(136);
switch (getInterpreter().adaptivePredict(_input,15,_ctx)) {
case 1:
      _localctx=new IfContext(_localctx);
    enterOuterAlt(_localctx,1);
{
    setState(59);
    match(IF);
    setState(60);
    match(LP);
    setState(61);
    expression(0);
    setState(62);
    match(RP);
    setState(63);
    block();
    setState(66);
switch (getInterpreter().adaptivePredict(_input,1,_ctx)) {
case 1:
{
        setState(64);
        match(ELSE);
        setState(65);
        block();
      }
    break;
}
}
break;
case 2:
_localctx=new WhileContext(_localctx);
enterOuterAlt(_localctx,2);
{
setState(68);
match(WHILE);
setState(69);
match(LP);
setState(70);
expression(0);
setState(71);
match(RP);
setState(74);
switch (getInterpreter().adaptivePredict(_input,2,_ctx)) {
case 1:
{
setState(72);
block();
}
break;
case 2:
{
setState(73);
empty();
}
break;
}
}
break;
case 3:
_localctx=new DoContext(_localctx);
enterOuterAlt(_localctx,3);
{
setState(76);
match(DO);
setState(77);
block();
setState(78);
match(WHILE);
setState(79);
match(LP);
setState(80);
expression(0);
setState(81);
match(RP);
setState(83);
_la=_input.LA(1);
if (_la == SEMICOLON) {
{
setState(82);
match(SEMICOLON);
}
}
}
break;
case 4:
_localctx=new ForContext(_localctx);
enterOuterAlt(_localctx,4);
{
setState(85);
match(FOR);
setState(86);
match(LP);
setState(88);
_la=_input.LA(1);
if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LP) | (1L << NEW) | (1L << BOOLNOT)| (1L << BWNOT)| (1L << ADD)| (1L << SUB)| (1L << INCR)| (1L << DECR)| (1L << OCTAL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (HEX - 64)) | (1L << (INTEGER - 64)) | (1L << (DECIMAL - 64))| (1L << (STRING - 64))| (1L << (CHAR - 64))| (1L << (TRUE - 64))| (1L << (FALSE - 64))| (1L << (NULL - 64))| (1L << (ID - 64)))) != 0)) {
{
setState(87);
initializer();
}
}
setState(90);
match(SEMICOLON);
setState(92);
_la=_input.LA(1);
if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LP) | (1L << NEW) | (1L << BOOLNOT)| (1L << BWNOT)| (1L << ADD)| (1L << SUB)| (1L << INCR)| (1L << DECR)| (1L << OCTAL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (HEX - 64)) | (1L << (INTEGER - 64)) | (1L << (DECIMAL - 64))| (1L << (STRING - 64))| (1L << (CHAR - 64))| (1L << (TRUE - 64))| (1L << (FALSE - 64))| (1L << (NULL - 64))| (1L << (ID - 64)))) != 0)) {
{
setState(91);
expression(0);
}
}
setState(94);
match(SEMICOLON);
setState(96);
_la=_input.LA(1);
if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LP) | (1L << NEW) | (1L << BOOLNOT)| (1L << BWNOT)| (1L << ADD)| (1L << SUB)| (1L << INCR)| (1L << DECR)| (1L << OCTAL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (HEX - 64)) | (1L << (INTEGER - 64)) | (1L << (DECIMAL - 64))| (1L << (STRING - 64))| (1L << (CHAR - 64))| (1L << (TRUE - 64))| (1L << (FALSE - 64))| (1L << (NULL - 64))| (1L << (ID - 64)))) != 0)) {
{
setState(95);
afterthought();
}
}
setState(98);
match(RP);
setState(101);
switch (getInterpreter().adaptivePredict(_input,7,_ctx)) {
case 1:
{
setState(99);
block();
}
break;
case 2:
{
setState(100);
empty();
}
break;
}
}
break;
case 5:
_localctx=new DeclContext(_localctx);
enterOuterAlt(_localctx,5);
{
setState(103);
declaration();
setState(105);
_la=_input.LA(1);
if (_la == SEMICOLON) {
{
setState(104);
match(SEMICOLON);
}
}
}
break;
case 6:
_localctx=new ContinueContext(_localctx);
enterOuterAlt(_localctx,6);
{
setState(107);
match(CONTINUE);
setState(109);
_la=_input.LA(1);
if (_la == SEMICOLON) {
{
setState(108);
match(SEMICOLON);
}
}
}
break;
case 7:
_localctx=new BreakContext(_localctx);
enterOuterAlt(_localctx,7);
{
setState(111);
match(BREAK);
setState(113);
_la=_input.LA(1);
if (_la == SEMICOLON) {
{
setState(112);
match(SEMICOLON);
}
}
}
break;
case 8:
_localctx=new ReturnContext(_localctx);
enterOuterAlt(_localctx,8);
{
setState(115);
match(RETURN);
setState(116);
expression(0);
setState(118);
_la=_input.LA(1);
if (_la == SEMICOLON) {
{
setState(117);
match(SEMICOLON);
}
}
}
break;
case 9:
_localctx=new TryContext(_localctx);
enterOuterAlt(_localctx,9);
{
setState(120);
match(TRY);
setState(121);
block();
setState(123);
_errHandler.sync(this);
_alt=1;
do {
switch (_alt) {
case 1:
{
{
setState(122);
trap();
}
}
break;
default :
throw new NoViableAltException(this);
}
setState(125);
_errHandler.sync(this);
_alt=getInterpreter().adaptivePredict(_input,12,_ctx);
}
 while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
}
break;
case 10:
_localctx=new ThrowContext(_localctx);
enterOuterAlt(_localctx,10);
{
setState(127);
match(THROW);
setState(128);
expression(0);
setState(130);
_la=_input.LA(1);
if (_la == SEMICOLON) {
{
setState(129);
match(SEMICOLON);
}
}
}
break;
case 11:
_localctx=new ExprContext(_localctx);
enterOuterAlt(_localctx,11);
{
setState(132);
expression(0);
setState(134);
_la=_input.LA(1);
if (_la == SEMICOLON) {
{
setState(133);
match(SEMICOLON);
}
}
}
break;
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}
