{
  this.serverOpenChannels=new Netty3OpenChannelsHandler(logger);
  if (blockingServer) {
    serverBootstrap=new ServerBootstrap(new OioServerSocketChannelFactory(Executors.newCachedThreadPool(daemonThreadFactory(settings,HTTP_SERVER_BOSS_THREAD_NAME_PREFIX)),Executors.newCachedThreadPool(daemonThreadFactory(settings,HTTP_SERVER_WORKER_THREAD_NAME_PREFIX))));
  }
 else {
    serverBootstrap=new ServerBootstrap(new NioServerSocketChannelFactory(Executors.newCachedThreadPool(daemonThreadFactory(settings,HTTP_SERVER_BOSS_THREAD_NAME_PREFIX)),Executors.newCachedThreadPool(daemonThreadFactory(settings,HTTP_SERVER_WORKER_THREAD_NAME_PREFIX)),workerCount));
  }
  serverBootstrap.setPipelineFactory(configureServerChannelPipelineFactory());
  serverBootstrap.setOption("child.tcpNoDelay",tcpNoDelay);
  serverBootstrap.setOption("child.keepAlive",tcpKeepAlive);
  if (tcpSendBufferSize.bytes() > 0) {
    serverBootstrap.setOption("child.sendBufferSize",tcpSendBufferSize.bytes());
  }
  if (tcpReceiveBufferSize.bytes() > 0) {
    serverBootstrap.setOption("child.receiveBufferSize",tcpReceiveBufferSize.bytes());
  }
  serverBootstrap.setOption("receiveBufferSizePredictorFactory",receiveBufferSizePredictorFactory);
  serverBootstrap.setOption("child.receiveBufferSizePredictorFactory",receiveBufferSizePredictorFactory);
  serverBootstrap.setOption("reuseAddress",reuseAddress);
  serverBootstrap.setOption("child.reuseAddress",reuseAddress);
  this.boundAddress=createBoundHttpAddress();
}
