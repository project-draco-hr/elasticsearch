{
  ChannelPipeline pipeline=Channels.pipeline();
  pipeline.addLast("openChannels",transport.serverOpenChannels);
  HttpRequestDecoder requestDecoder=new HttpRequestDecoder((int)transport.maxInitialLineLength.getBytes(),(int)transport.maxHeaderSize.getBytes(),(int)transport.maxChunkSize.getBytes());
  if (transport.maxCumulationBufferCapacity.getBytes() >= 0) {
    if (transport.maxCumulationBufferCapacity.getBytes() > Integer.MAX_VALUE) {
      requestDecoder.setMaxCumulationBufferCapacity(Integer.MAX_VALUE);
    }
 else {
      requestDecoder.setMaxCumulationBufferCapacity((int)transport.maxCumulationBufferCapacity.getBytes());
    }
  }
  if (transport.maxCompositeBufferComponents != -1) {
    requestDecoder.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);
  }
  pipeline.addLast("decoder",requestDecoder);
  pipeline.addLast("decoder_compress",new HttpContentDecompressor());
  HttpChunkAggregator httpChunkAggregator=new HttpChunkAggregator((int)transport.maxContentLength.getBytes());
  if (transport.maxCompositeBufferComponents != -1) {
    httpChunkAggregator.setMaxCumulationBufferComponents(transport.maxCompositeBufferComponents);
  }
  pipeline.addLast("aggregator",httpChunkAggregator);
  pipeline.addLast("encoder",new ESNetty3HttpResponseEncoder());
  if (transport.compression) {
    pipeline.addLast("encoder_compress",new HttpContentCompressor(transport.compressionLevel));
  }
  if (SETTING_CORS_ENABLED.get(transport.settings())) {
    pipeline.addLast("cors",new Netty3CorsHandler(transport.getCorsConfig()));
  }
  if (transport.pipelining) {
    pipeline.addLast("pipelining",new HttpPipeliningHandler(transport.pipeliningMaxEvents));
  }
  pipeline.addLast("handler",requestHandler);
  return pipeline;
}
