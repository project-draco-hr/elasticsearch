{
  Object includeObject=otherOptions.get(INCLUDE_FIELD);
  String include=null;
  SortedSet<BytesRef> includeValues=null;
  if (includeObject != null) {
    if (includeObject instanceof String) {
      include=(String)includeObject;
    }
 else     if (includeObject instanceof SortedSet) {
      includeValues=(SortedSet<BytesRef>)includeObject;
    }
  }
  Object excludeObject=otherOptions.get(EXCLUDE_FIELD);
  String exclude=null;
  SortedSet<BytesRef> excludeValues=null;
  if (excludeObject != null) {
    if (excludeObject instanceof String) {
      exclude=(String)excludeObject;
    }
 else     if (excludeObject instanceof SortedSet) {
      excludeValues=(SortedSet<BytesRef>)excludeObject;
    }
  }
  RegExp includePattern=include != null ? new RegExp(include) : null;
  RegExp excludePattern=exclude != null ? new RegExp(exclude) : null;
  if (includePattern != null || excludePattern != null) {
    if (includeValues != null || excludeValues != null) {
      throw new IllegalArgumentException("Can only use regular expression include/exclude or a set of values, not both");
    }
    return new IncludeExclude(includePattern,excludePattern);
  }
 else   if (includeValues != null || excludeValues != null) {
    return new IncludeExclude(includeValues,excludeValues);
  }
 else {
    return null;
  }
}
