def full_cluster_restart(node_dir, current_version, bwc_version, seed, tcp_port, http_port):
    assert_versions(bwc_version, current_version, node_dir)
    random.seed(seed)
    num_nodes = random.randint(2, 3)
    nodes = []
    data_dir = tempfile.mkdtemp()
    logging.info(('Running upgrade test from [%s] to [%s] seed: [%s] es.path.data: [%s] es.http.port [%s] es.tcp.port [%s]' % (bwc_version, current_version, seed, data_dir, http_port, tcp_port)))
    try:
        logging.info(('Starting %s BWC nodes of version %s' % (num_nodes, bwc_version)))
        unicast_addresses = ','.join([('127.0.0.1:%s' % (tcp_port + x)) for x in range(0, num_nodes)])
        for id in range(0, num_nodes):
            nodes.append(start_node(bwc_version, data_dir, node_dir, unicast_addresses, (tcp_port + id), (http_port + id)))
        es = new_es_instance(num_nodes, http_port)
        es.indices.delete(index='test_index', ignore=404)
        num_shards = random.randint(1, 10)
        num_replicas = random.randint(0, 1)
        logging.info(('Create index with [%s] shards and [%s] replicas' % (num_shards, num_replicas)))
        es.indices.create(index='test_index', body={'settings': {'number_of_shards': num_shards, 'number_of_replicas': num_replicas, }, })
        logging.info('Nodes joined, waiting for green status')
        health = es.cluster.health(wait_for_status='green', wait_for_relocating_shards=0)
        assert_health(health, num_shards, num_replicas)
        num_docs = random.randint(10, 100)
        index_documents(es, 'test_index', 'test_type', num_docs)
        logging.info('Run basic asserts before full cluster restart')
        run_basic_asserts(es, 'test_index', 'test_type', num_docs)
        logging.info('kill bwc nodes -- prepare upgrade')
        for node in nodes:
            node.terminate()
        tcp_port = (tcp_port + len(nodes))
        http_port = (http_port + len(nodes))
        logging.info(('Full Cluster restart starts upgrading to version [elasticsearch-%s] es.http.port [%s] es.tcp.port [%s]' % (current_version, http_port, tcp_port)))
        nodes = []
        unicast_addresses = ','.join([('127.0.0.1:%s' % (tcp_port + x)) for x in range(0, num_nodes)])
        for id in range(0, (num_nodes + 1)):
            nodes.append(start_node(current_version, data_dir, node_dir, unicast_addresses, (tcp_port + id), (http_port + id)))
        es = new_es_instance((num_nodes + 1), http_port)
        logging.info('Nodes joined, waiting for green status')
        health = es.cluster.health(wait_for_status='green', wait_for_relocating_shards=0)
        assert_health(health, num_shards, num_replicas)
        run_basic_asserts(es, 'test_index', 'test_type', num_docs)
        index_documents(es, 'test_index', 'test_type', num_docs)
        run_basic_asserts(es, 'test_index', 'test_type', num_docs)
        logging.info(('[SUCCESSS] - all test passed upgrading from version [%s] to version [%s]' % (bwc_version, current_version)))
    finally:
        for node in nodes:
            node.terminate()
        time.sleep(1)
        shutil.rmtree(data_dir)
