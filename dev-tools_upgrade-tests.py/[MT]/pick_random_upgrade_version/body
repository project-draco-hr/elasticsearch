def pick_random_upgrade_version(directory, lower_version=None, upper_version=None):
    if (lower_version and upper_version):
        return (lower_version, upper_version)
    assert os.path.isdir(directory), ('No such directory %s' % directory)
    versions = []
    for version in map((lambda x: x[len('elasticsearch-'):]), filter((lambda x: re.match('^elasticsearch-\\d+[.]\\d+[.]\\d+$', x)), os.listdir(directory))):
        if (not (version in BLACK_LIST)):
            versions.append(build_tuple(version))
    versions.sort()
    if lower_version:
        versions = filter((lambda x: (x > build_tuple(lower_version))), versions)
        assert (len(versions) >= 1), ('Expected at least 1 higher version than %s version in %s ' % (lower_version, directory))
        random.shuffle(versions)
        return (lower_version, build_version(versions[0]))
    if upper_version:
        versions = filter((lambda x: (x < build_tuple(upper_version))), versions)
        assert (len(versions) >= 1), ('Expected at least 1 lower version than %s version in %s ' % (upper_version, directory))
        random.shuffle(versions)
        return (build_version(versions[0]), upper_version)
    assert (len(versions) >= 2), ('Expected at least 2 different version in %s but found %s' % (directory, len(versions)))
    random.shuffle(versions)
    versions = versions[0:2]
    versions.sort()
    return (build_version(versions[0]), build_version(versions[1]))
