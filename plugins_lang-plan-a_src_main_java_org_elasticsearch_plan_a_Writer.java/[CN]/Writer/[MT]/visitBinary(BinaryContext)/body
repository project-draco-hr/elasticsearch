{
  final ExpressionMetadata binaryemd=adapter.getExpressionMetadata(ctx);
  final Object postConst=binaryemd.postConst;
  final Object preConst=binaryemd.preConst;
  final Branch branch=getBranch(ctx);
  if (postConst != null) {
    writeConstant(ctx,postConst);
  }
 else   if (preConst != null) {
    if (branch == null) {
      writeConstant(ctx,preConst);
      checkWriteCast(binaryemd);
    }
 else {
      throw new IllegalStateException(error(ctx) + "Unexpected writer state.");
    }
  }
 else   if (binaryemd.from.sort == Sort.STRING) {
    final boolean marked=strings.contains(ctx);
    if (!marked) {
      writeNewStrings();
    }
    final ExpressionContext exprctx0=ctx.expression(0);
    final ExpressionMetadata expremd0=adapter.getExpressionMetadata(exprctx0);
    strings.add(exprctx0);
    visit(exprctx0);
    if (strings.contains(exprctx0)) {
      writeAppendStrings(expremd0.from.sort);
      strings.remove(exprctx0);
    }
    final ExpressionContext exprctx1=ctx.expression(1);
    final ExpressionMetadata expremd1=adapter.getExpressionMetadata(exprctx1);
    strings.add(exprctx1);
    visit(exprctx1);
    if (strings.contains(exprctx1)) {
      writeAppendStrings(expremd1.from.sort);
      strings.remove(exprctx1);
    }
    if (marked) {
      strings.remove(ctx);
    }
 else {
      writeToStrings();
    }
    checkWriteCast(binaryemd);
  }
 else {
    final ExpressionContext exprctx0=ctx.expression(0);
    final ExpressionContext exprctx1=ctx.expression(1);
    visit(exprctx0);
    visit(exprctx1);
    final Type type=binaryemd.from;
    if (ctx.MUL() != null)     writeBinaryInstruction(ctx,type,MUL);
 else     if (ctx.DIV() != null)     writeBinaryInstruction(ctx,type,DIV);
 else     if (ctx.REM() != null)     writeBinaryInstruction(ctx,type,REM);
 else     if (ctx.ADD() != null)     writeBinaryInstruction(ctx,type,ADD);
 else     if (ctx.SUB() != null)     writeBinaryInstruction(ctx,type,SUB);
 else     if (ctx.LSH() != null)     writeBinaryInstruction(ctx,type,LSH);
 else     if (ctx.USH() != null)     writeBinaryInstruction(ctx,type,USH);
 else     if (ctx.RSH() != null)     writeBinaryInstruction(ctx,type,RSH);
 else     if (ctx.BWAND() != null)     writeBinaryInstruction(ctx,type,BWAND);
 else     if (ctx.BWXOR() != null)     writeBinaryInstruction(ctx,type,BWXOR);
 else     if (ctx.BWOR() != null)     writeBinaryInstruction(ctx,type,BWOR);
 else {
      throw new IllegalStateException(error(ctx) + "Unexpected writer state.");
    }
    checkWriteCast(binaryemd);
  }
  checkWriteBranch(ctx);
  return null;
}
