{
  final ExpressionMetadata declvaremd=metadata.getExpressionMetadata(ctx);
  final org.objectweb.asm.Type type=declvaremd.to.type;
  final Sort sort=declvaremd.to.sort;
  final int slot=(int)declvaremd.postConst;
  final ExpressionContext exprctx=ctx.expression();
  final boolean initialize=exprctx == null;
  if (!initialize) {
    visit(exprctx);
  }
switch (sort) {
case VOID:
    throw new IllegalStateException(error(ctx) + "Unexpected writer state.");
case BOOL:
case BYTE:
case SHORT:
case CHAR:
case INT:
  if (initialize)   execute.push(0);
break;
case LONG:
if (initialize) execute.push(0L);
break;
case FLOAT:
if (initialize) execute.push(0.0F);
break;
case DOUBLE:
if (initialize) execute.push(0.0);
break;
default :
if (initialize) execute.visitInsn(Opcodes.ACONST_NULL);
}
execute.visitVarInsn(type.getOpcode(Opcodes.ISTORE),slot);
return null;
}
