{
  createIndex("test");
  ensureGreen();
  IndicesService indicesService=getInstanceFromNode(IndicesService.class);
  NodeEnvironment env=getInstanceFromNode(NodeEnvironment.class);
  IndexService test=indicesService.indexService("test");
  IndexShard shard=test.shard(0);
  ShardStateMetaData shardStateMetaData=load(logger,env.shardPaths(shard.shardId));
  assertEquals(getShardStateMetadata(shard),shardStateMetaData);
  ShardRouting routing=new MutableShardRouting(shard.shardRouting,shard.shardRouting.version() + 1);
  shard.updateRoutingEntry(routing,true);
  shardStateMetaData=load(logger,env.shardPaths(shard.shardId));
  assertEquals(shardStateMetaData,getShardStateMetadata(shard));
  assertEquals(shardStateMetaData,new ShardStateMetaData(routing.version(),routing.primary(),shard.indexSettings.get(IndexMetaData.SETTING_UUID)));
  routing=new MutableShardRouting(shard.shardRouting,shard.shardRouting.version() + 1);
  shard.updateRoutingEntry(routing,true);
  shardStateMetaData=load(logger,env.shardPaths(shard.shardId));
  assertEquals(shardStateMetaData,getShardStateMetadata(shard));
  assertEquals(shardStateMetaData,new ShardStateMetaData(routing.version(),routing.primary(),shard.indexSettings.get(IndexMetaData.SETTING_UUID)));
  routing=new MutableShardRouting(shard.shardRouting,shard.shardRouting.version() + 1);
  shard.updateRoutingEntry(routing,true);
  shardStateMetaData=load(logger,env.shardPaths(shard.shardId));
  assertEquals(shardStateMetaData,getShardStateMetadata(shard));
  assertEquals(shardStateMetaData,new ShardStateMetaData(routing.version(),routing.primary(),shard.indexSettings.get(IndexMetaData.SETTING_UUID)));
  MutableShardRouting inactiveRouting=new MutableShardRouting(shard.shardRouting.index(),shard.shardRouting.shardId().id(),shard.shardRouting.currentNodeId(),true,ShardRoutingState.INITIALIZING,shard.shardRouting.version() + 1);
  shard.persistMetadata(inactiveRouting,shard.shardRouting);
  shardStateMetaData=load(logger,env.shardPaths(shard.shardId));
  assertEquals("inactive shard state shouldn't be persisted",shardStateMetaData,getShardStateMetadata(shard));
  assertEquals("inactive shard state shouldn't be persisted",shardStateMetaData,new ShardStateMetaData(routing.version(),routing.primary(),shard.indexSettings.get(IndexMetaData.SETTING_UUID)));
  shard.updateRoutingEntry(new MutableShardRouting(shard.shardRouting,shard.shardRouting.version() + 1),false);
  shardStateMetaData=load(logger,env.shardPaths(shard.shardId));
  assertFalse("shard state persisted despite of persist=false",shardStateMetaData.equals(getShardStateMetadata(shard)));
  assertEquals("shard state persisted despite of persist=false",shardStateMetaData,new ShardStateMetaData(routing.version(),routing.primary(),shard.indexSettings.get(IndexMetaData.SETTING_UUID)));
  routing=new MutableShardRouting(shard.shardRouting,shard.shardRouting.version() + 1);
  shard.updateRoutingEntry(routing,true);
  shardStateMetaData=load(logger,env.shardPaths(shard.shardId));
  assertEquals(shardStateMetaData,getShardStateMetadata(shard));
  assertEquals(shardStateMetaData,new ShardStateMetaData(routing.version(),routing.primary(),shard.indexSettings.get(IndexMetaData.SETTING_UUID)));
}
