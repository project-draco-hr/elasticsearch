{
  assertAcked(prepareCreate("index1").addMapping("child","_parent","type=parent"));
  List<IndexRequestBuilder> requests=new ArrayList<>();
  requests.add(client().prepareIndex("index1","parent","1").setSource("{}"));
  requests.add(client().prepareIndex("index1","child","1").setParent("1").setSource("field","value1"));
  indexRandom(true,requests);
  QueryBuilder query=hasChildQuery("child",matchQuery("field","value1"),ScoreMode.None).innerHit(new InnerHitBuilder().setSize(ArrayUtil.MAX_ARRAY_LENGTH - 1));
  SearchResponse response=client().prepareSearch("index1").setQuery(query).addSort("_uid",SortOrder.ASC).get();
  assertNoFailures(response);
  assertHitCount(response,1);
  assertAcked(prepareCreate("index2").addMapping("type","nested","type=nested"));
  client().prepareIndex("index2","type","1").setSource(jsonBuilder().startObject().startArray("nested").startObject().field("field","value1").endObject().endArray().endObject()).setRefreshPolicy(IMMEDIATE).get();
  query=nestedQuery("nested",matchQuery("nested.field","value1"),ScoreMode.Avg).innerHit(new InnerHitBuilder().setSize(ArrayUtil.MAX_ARRAY_LENGTH - 1));
  response=client().prepareSearch("index2").setQuery(query).addSort("_uid",SortOrder.ASC).get();
  assertNoFailures(response);
  assertHitCount(response,1);
}
