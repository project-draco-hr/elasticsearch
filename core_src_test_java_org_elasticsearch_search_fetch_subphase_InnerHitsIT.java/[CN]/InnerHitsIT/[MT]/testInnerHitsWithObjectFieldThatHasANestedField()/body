{
  assertAcked(prepareCreate("articles").addMapping("article",jsonBuilder().startObject().startObject("properties").startObject("comments").field("type","object").startObject("properties").startObject("messages").field("type","nested").endObject().endObject().endObject().endObject().endObject()));
  List<IndexRequestBuilder> requests=new ArrayList<>();
  requests.add(client().prepareIndex("articles","article","1").setSource(jsonBuilder().startObject().field("title","quick brown fox").startObject("comments").startArray("messages").startObject().field("message","fox eat quick").endObject().startObject().field("message","bear eat quick").endObject().endArray().endObject().endObject()));
  indexRandom(true,requests);
  SearchResponse response=client().prepareSearch("articles").setQuery(nestedQuery("comments.messages",matchQuery("comments.messages.message","fox"),ScoreMode.Avg).innerHit(new InnerHitBuilder())).get();
  assertNoFailures(response);
  assertHitCount(response,1);
  SearchHit hit=response.getHits().getAt(0);
  assertThat(hit.id(),equalTo("1"));
  SearchHits messages=hit.getInnerHits().get("comments.messages");
  assertThat(messages.getTotalHits(),equalTo(1L));
  assertThat(messages.getAt(0).id(),equalTo("1"));
  assertThat(messages.getAt(0).getNestedIdentity().getField().string(),equalTo("comments.messages"));
  assertThat(messages.getAt(0).getNestedIdentity().getOffset(),equalTo(0));
  assertThat(messages.getAt(0).getNestedIdentity().getChild(),nullValue());
  response=client().prepareSearch("articles").setQuery(nestedQuery("comments.messages",matchQuery("comments.messages.message","bear"),ScoreMode.Avg).innerHit(new InnerHitBuilder())).get();
  assertNoFailures(response);
  assertHitCount(response,1);
  hit=response.getHits().getAt(0);
  assertThat(hit.id(),equalTo("1"));
  messages=hit.getInnerHits().get("comments.messages");
  assertThat(messages.getTotalHits(),equalTo(1L));
  assertThat(messages.getAt(0).id(),equalTo("1"));
  assertThat(messages.getAt(0).getNestedIdentity().getField().string(),equalTo("comments.messages"));
  assertThat(messages.getAt(0).getNestedIdentity().getOffset(),equalTo(1));
  assertThat(messages.getAt(0).getNestedIdentity().getChild(),nullValue());
  requests=new ArrayList<>();
  requests.add(client().prepareIndex("articles","article","1").setSource(jsonBuilder().startObject().field("title","quick brown fox").startObject("comments").startObject("messages").field("message","fox eat quick").endObject().endObject().endObject()));
  indexRandom(true,requests);
  response=client().prepareSearch("articles").setQuery(nestedQuery("comments.messages",matchQuery("comments.messages.message","fox"),ScoreMode.Avg).innerHit(new InnerHitBuilder())).get();
  assertNoFailures(response);
  assertHitCount(response,1);
  hit=response.getHits().getAt(0);
  ;
  assertThat(hit.id(),equalTo("1"));
  messages=hit.getInnerHits().get("comments.messages");
  assertThat(messages.getTotalHits(),equalTo(1L));
  assertThat(messages.getAt(0).id(),equalTo("1"));
  assertThat(messages.getAt(0).getNestedIdentity().getField().string(),equalTo("comments.messages"));
  assertThat(messages.getAt(0).getNestedIdentity().getOffset(),equalTo(0));
  assertThat(messages.getAt(0).getNestedIdentity().getChild(),nullValue());
}
