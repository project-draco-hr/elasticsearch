{
  Settings settings=settingsBuilder().put("index.queryparser.query.my.type",MyJsonQueryParser.class).put("index.queryparser.query.my.param1","value1").put("index.queryparser.filter.my.type",MyJsonFilterParser.class).put("index.queryparser.filter.my.param2","value2").put("index.cache.filter.type","none").put("name","IndexQueryParserModuleTests").build();
  Index index=new Index("test");
  Injector injector=new ModulesBuilder().add(new SettingsModule(settings),new CacheRecyclerModule(settings),new CodecModule(settings),new ThreadPoolModule(settings),new IndicesQueriesModule(),new ScriptModule(settings),new IndexSettingsModule(index,settings),new IndexCacheModule(settings),new AnalysisModule(settings),new IndexEngineModule(settings),new SimilarityModule(settings),new IndexQueryParserModule(settings),new IndexNameModule(index),new FunctionScoreModule(),new AbstractModule(){
    @Override protected void configure(){
      bind(ClusterService.class).toProvider(Providers.of((ClusterService)null));
      bind(CircuitBreakerService.class).to(DummyCircuitBreakerService.class);
    }
  }
).createInjector();
  IndexQueryParserService indexQueryParserService=injector.getInstance(IndexQueryParserService.class);
  MyJsonQueryParser myJsonQueryParser=(MyJsonQueryParser)indexQueryParserService.queryParser("my");
  assertThat(myJsonQueryParser.names()[0],equalTo("my"));
  assertThat(myJsonQueryParser.settings().get("param1"),equalTo("value1"));
  MyJsonFilterParser myJsonFilterParser=(MyJsonFilterParser)indexQueryParserService.filterParser("my");
  assertThat(myJsonFilterParser.names()[0],equalTo("my"));
  assertThat(myJsonFilterParser.settings().get("param2"),equalTo("value2"));
  injector.getInstance(ThreadPool.class).shutdownNow();
}
