{
  final Map<String,Object> extendedAttributes=new TreeMap<>();
  stream.reflectWith(new AttributeReflector(){
    @Override public void reflect(    Class<? extends Attribute> attClass,    String key,    Object value){
      if (CharTermAttribute.class.isAssignableFrom(attClass))       return;
      if (PositionIncrementAttribute.class.isAssignableFrom(attClass))       return;
      if (OffsetAttribute.class.isAssignableFrom(attClass))       return;
      if (TypeAttribute.class.isAssignableFrom(attClass))       return;
      if (includeAttributes == null || includeAttributes.isEmpty() || includeAttributes.contains(key.toLowerCase(Locale.ROOT))) {
        if (value instanceof BytesRef) {
          final BytesRef p=(BytesRef)value;
          value=p.toString();
        }
        extendedAttributes.put(key,value);
      }
    }
  }
);
  return extendedAttributes;
}
