{
  boolean closeAnalyzer=false;
  if (analyzer == null && request.analyzer() != null) {
    if (analysisService == null) {
      analyzer=analysisRegistry.getAnalyzer(request.analyzer());
      if (analyzer == null) {
        throw new IllegalArgumentException("failed to find global analyzer [" + request.analyzer() + "]");
      }
    }
 else {
      analyzer=analysisService.analyzer(request.analyzer());
      if (analyzer == null) {
        throw new IllegalArgumentException("failed to find analyzer [" + request.analyzer() + "]");
      }
    }
  }
 else   if (request.tokenizer() != null) {
    TokenizerFactory tokenizerFactory;
    if (analysisService == null) {
      AnalysisModule.AnalysisProvider<TokenizerFactory> tokenizerFactoryFactory=analysisRegistry.getTokenizerProvider(request.tokenizer());
      if (tokenizerFactoryFactory == null) {
        throw new IllegalArgumentException("failed to find global tokenizer under [" + request.tokenizer() + "]");
      }
      tokenizerFactory=tokenizerFactoryFactory.get(environment,request.tokenizer());
    }
 else {
      tokenizerFactory=analysisService.tokenizer(request.tokenizer());
      if (tokenizerFactory == null) {
        throw new IllegalArgumentException("failed to find tokenizer under [" + request.tokenizer() + "]");
      }
    }
    TokenFilterFactory[] tokenFilterFactories=new TokenFilterFactory[0];
    if (request.tokenFilters() != null && request.tokenFilters().length > 0) {
      tokenFilterFactories=new TokenFilterFactory[request.tokenFilters().length];
      for (int i=0; i < request.tokenFilters().length; i++) {
        String tokenFilterName=request.tokenFilters()[i];
        if (analysisService == null) {
          AnalysisModule.AnalysisProvider<TokenFilterFactory> tokenFilterFactoryFactory=analysisRegistry.getTokenFilterProvider(tokenFilterName);
          if (tokenFilterFactoryFactory == null) {
            throw new IllegalArgumentException("failed to find global token filter under [" + tokenFilterName + "]");
          }
          tokenFilterFactories[i]=tokenFilterFactoryFactory.get(environment,tokenFilterName);
        }
 else {
          tokenFilterFactories[i]=analysisService.tokenFilter(tokenFilterName);
          if (tokenFilterFactories[i] == null) {
            throw new IllegalArgumentException("failed to find token filter under [" + tokenFilterName + "]");
          }
        }
        if (tokenFilterFactories[i] == null) {
          throw new IllegalArgumentException("failed to find token filter under [" + tokenFilterName + "]");
        }
      }
    }
    CharFilterFactory[] charFilterFactories=new CharFilterFactory[0];
    if (request.charFilters() != null && request.charFilters().length > 0) {
      charFilterFactories=new CharFilterFactory[request.charFilters().length];
      for (int i=0; i < request.charFilters().length; i++) {
        String charFilterName=request.charFilters()[i];
        if (analysisService == null) {
          AnalysisModule.AnalysisProvider<CharFilterFactory> charFilterFactoryFactory=analysisRegistry.getCharFilterProvider(charFilterName);
          if (charFilterFactoryFactory == null) {
            throw new IllegalArgumentException("failed to find global char filter under [" + charFilterName + "]");
          }
          charFilterFactories[i]=charFilterFactoryFactory.get(environment,charFilterName);
        }
 else {
          charFilterFactories[i]=analysisService.charFilter(charFilterName);
          if (charFilterFactories[i] == null) {
            throw new IllegalArgumentException("failed to find char filter under [" + charFilterName + "]");
          }
        }
        if (charFilterFactories[i] == null) {
          throw new IllegalArgumentException("failed to find char filter under [" + charFilterName + "]");
        }
      }
    }
    analyzer=new CustomAnalyzer(tokenizerFactory,charFilterFactories,tokenFilterFactories);
    closeAnalyzer=true;
  }
 else   if (analyzer == null) {
    if (analysisService == null) {
      analyzer=analysisRegistry.getAnalyzer("standard");
    }
 else {
      analyzer=analysisService.defaultIndexAnalyzer();
    }
  }
  if (analyzer == null) {
    throw new IllegalArgumentException("failed to find analyzer");
  }
  List<AnalyzeResponse.AnalyzeToken> tokens=null;
  DetailAnalyzeResponse detail=null;
  if (request.explain()) {
    detail=detailAnalyze(request,analyzer,field);
  }
 else {
    tokens=simpleAnalyze(request,analyzer,field);
  }
  if (closeAnalyzer) {
    analyzer.close();
  }
  return new AnalyzeResponse(tokens,detail);
}
