{
  DeleteByQueryRequest deleteByQueryRequest=new DeleteByQueryRequest(Strings.splitStringByCommaToArray(request.param("index")));
  deleteByQueryRequest.listenerThreaded(false);
  try {
    if (request.hasContent()) {
      deleteByQueryRequest.source(request.content(),request.contentUnsafe());
    }
 else {
      String source=request.param("source");
      if (source != null) {
        deleteByQueryRequest.source(source);
      }
 else {
        QuerySourceBuilder querySourceBuilder=RestActions.parseQuerySource(request);
        if (querySourceBuilder != null) {
          deleteByQueryRequest.source(querySourceBuilder);
        }
      }
    }
    deleteByQueryRequest.types(Strings.splitStringByCommaToArray(request.param("type")));
    deleteByQueryRequest.timeout(request.paramAsTime("timeout",ShardDeleteByQueryRequest.DEFAULT_TIMEOUT));
    deleteByQueryRequest.routing(request.param("routing"));
    String replicationType=request.param("replication");
    if (replicationType != null) {
      deleteByQueryRequest.replicationType(ReplicationType.fromString(replicationType));
    }
    String consistencyLevel=request.param("consistency");
    if (consistencyLevel != null) {
      deleteByQueryRequest.consistencyLevel(WriteConsistencyLevel.fromString(consistencyLevel));
    }
    deleteByQueryRequest.indicesOptions(IndicesOptions.fromRequest(request,deleteByQueryRequest.indicesOptions()));
  }
 catch (  Exception e) {
    try {
      XContentBuilder builder=RestXContentBuilder.restContentBuilder(request);
      channel.sendResponse(new XContentRestResponse(request,PRECONDITION_FAILED,builder.startObject().field("error",e.getMessage()).endObject()));
    }
 catch (    IOException e1) {
      logger.error("Failed to send failure response",e1);
    }
    return;
  }
  client.deleteByQuery(deleteByQueryRequest,new ActionListener<DeleteByQueryResponse>(){
    @Override public void onResponse(    DeleteByQueryResponse result){
      try {
        XContentBuilder builder=RestXContentBuilder.restContentBuilder(request);
        RestStatus restStatus=result.status();
        builder.startObject();
        builder.startObject(Fields._INDICES);
        for (        IndexDeleteByQueryResponse indexDeleteByQueryResponse : result.getIndices().values()) {
          builder.startObject(indexDeleteByQueryResponse.getIndex(),XContentBuilder.FieldCaseConversion.NONE);
          builder.startObject(Fields._SHARDS);
          builder.field(Fields.TOTAL,indexDeleteByQueryResponse.getTotalShards());
          builder.field(Fields.SUCCESSFUL,indexDeleteByQueryResponse.getSuccessfulShards());
          builder.field(Fields.FAILED,indexDeleteByQueryResponse.getFailedShards());
          ShardOperationFailedException[] failures=indexDeleteByQueryResponse.getFailures();
          if (failures != null && failures.length > 0) {
            builder.startArray(Fields.FAILURES);
            for (            ShardOperationFailedException shardFailure : failures) {
              builder.startObject();
              builder.field(Fields.INDEX,shardFailure.index());
              builder.field(Fields.SHARD,shardFailure.shardId());
              builder.field(Fields.REASON,shardFailure.reason());
              builder.endObject();
            }
            builder.endArray();
          }
          builder.endObject();
          builder.endObject();
        }
        builder.endObject();
        builder.endObject();
        channel.sendResponse(new XContentRestResponse(request,restStatus,builder));
      }
 catch (      Throwable e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
