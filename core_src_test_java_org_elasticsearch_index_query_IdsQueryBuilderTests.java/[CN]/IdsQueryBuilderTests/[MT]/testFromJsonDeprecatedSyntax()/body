{
  IdsQueryBuilder tempQuery=createTestQueryBuilder();
  assumeTrue("test requires at least one type",tempQuery.types() != null && tempQuery.types().length > 0);
  String type=tempQuery.types()[0];
  IdsQueryBuilder testQuery=new IdsQueryBuilder(type);
  String contentString="{\n" + "    \"ids\" : {\n" + "        \"_type\" : \"" + type + "\",\n"+ "        \"values\" : []\n"+ "    }\n"+ "}";
  IdsQueryBuilder parsed=(IdsQueryBuilder)parseQuery(contentString,ParseFieldMatcher.EMPTY);
  assertEquals(testQuery,parsed);
  try {
    parseQuery(contentString);
    fail("parse should have failed");
  }
 catch (  IllegalArgumentException e) {
    assertEquals("Deprecated field [_type] used, expected [type] instead",e.getMessage());
  }
  contentString="{\n" + "    \"ids\" : {\n" + "        \"types\" : [\"" + type + "\"],\n"+ "        \"values\" : []\n"+ "    }\n"+ "}";
  parsed=(IdsQueryBuilder)parseQuery(contentString,ParseFieldMatcher.EMPTY);
  assertEquals(testQuery,parsed);
  try {
    parseQuery(contentString);
    fail("parse should have failed");
  }
 catch (  IllegalArgumentException e) {
    assertEquals("Deprecated field [types] used, expected [type] instead",e.getMessage());
  }
}
