{
  Objects.requireNonNull(cidr,"cidr");
  String[] fields=cidr.split("/");
  if (fields.length != 2) {
    throw new IllegalArgumentException(String.format(Locale.ROOT,"invalid IPv4/CIDR; expected [a.b.c.d, e] but was [%s] after splitting on \"/\" in [%s]",Arrays.toString(fields),cidr));
  }
  if (fields[0].contains(":")) {
    throw new IllegalArgumentException(String.format(Locale.ROOT,"invalid IPv4/CIDR; expected [a.b.c.d, e] where a, b, c, d are decimal octets but was [%s] after splitting on \"/\" in [%s]",Arrays.toString(fields),cidr));
  }
  byte[] addressBytes;
  try {
    addressBytes=InetAddresses.forString(fields[0]).getAddress();
  }
 catch (  Throwable t) {
    throw new IllegalArgumentException(String.format(Locale.ROOT,"invalid IPv4/CIDR; unable to parse [%s] as an IP address literal",fields[0]),t);
  }
  long accumulator=((addressBytes[0] & 0xFFL) << 24) + ((addressBytes[1] & 0xFFL) << 16) + ((addressBytes[2] & 0xFFL) << 8)+ ((addressBytes[3] & 0xFFL));
  int networkMask;
  try {
    networkMask=Integer.parseInt(fields[1]);
  }
 catch (  NumberFormatException e) {
    throw new IllegalArgumentException(String.format(Locale.ROOT,"invalid IPv4/CIDR; invalid network mask [%s] in [%s]",fields[1],cidr),e);
  }
  if (networkMask < 0 || networkMask > 32) {
    throw new IllegalArgumentException(String.format(Locale.ROOT,"invalid IPv4/CIDR; invalid network mask [%s], out of range in [%s]",fields[1],cidr));
  }
  long blockSize=1L << (32 - networkMask);
  if ((accumulator & (blockSize - 1)) != 0) {
    throw new IllegalArgumentException(String.format(Locale.ROOT,"invalid IPv4/CIDR; invalid address/network mask combination in [%s]; perhaps [%s] was intended?",cidr,octetsToCIDR(longToOctets(accumulator - (accumulator & (blockSize - 1))),networkMask)));
  }
  return new long[]{accumulator,accumulator + blockSize};
}
