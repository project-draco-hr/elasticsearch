{
  super(settings);
  this.fileChunkSize=settings.getAsBytesSize(INDICES_RECOVERY_FILE_CHUNK_SIZE,settings.getAsBytesSize("index.shard.recovery.file_chunk_size",new ByteSizeValue(512,ByteSizeUnit.KB)));
  this.translogOps=settings.getAsInt(INDICES_RECOVERY_TRANSLOG_OPS,settings.getAsInt("index.shard.recovery.translog_ops",1000));
  this.translogSize=settings.getAsBytesSize(INDICES_RECOVERY_TRANSLOG_SIZE,settings.getAsBytesSize("index.shard.recovery.translog_size",new ByteSizeValue(512,ByteSizeUnit.KB)));
  this.compress=settings.getAsBoolean(INDICES_RECOVERY_COMPRESS,true);
  this.retryDelayStateSync=settings.getAsTime(INDICES_RECOVERY_RETRY_DELAY_STATE_SYNC,TimeValue.timeValueMillis(500));
  this.retryDelayNetwork=settings.getAsTime(INDICES_RECOVERY_RETRY_DELAY_NETWORK,TimeValue.timeValueSeconds(5));
  this.internalActionTimeout=settings.getAsTime(INDICES_RECOVERY_INTERNAL_ACTION_TIMEOUT,TimeValue.timeValueMinutes(15));
  this.internalActionLongTimeout=settings.getAsTime(INDICES_RECOVERY_INTERNAL_LONG_ACTION_TIMEOUT,new TimeValue(internalActionTimeout.millis() * 2));
  this.activityTimeout=settings.getAsTime(INDICES_RECOVERY_ACTIVITY_TIMEOUT,internalActionLongTimeout);
  this.concurrentStreams=settings.getAsInt("indices.recovery.concurrent_streams",settings.getAsInt("index.shard.recovery.concurrent_streams",3));
  this.concurrentStreamPool=EsExecutors.newScaling(0,concurrentStreams,60,TimeUnit.SECONDS,EsExecutors.daemonThreadFactory(settings,"[recovery_stream]"));
  this.concurrentSmallFileStreams=settings.getAsInt("indices.recovery.concurrent_small_file_streams",settings.getAsInt("index.shard.recovery.concurrent_small_file_streams",2));
  this.concurrentSmallFileStreamPool=EsExecutors.newScaling(0,concurrentSmallFileStreams,60,TimeUnit.SECONDS,EsExecutors.daemonThreadFactory(settings,"[small_file_recovery_stream]"));
  this.maxBytesPerSec=settings.getAsBytesSize("indices.recovery.max_bytes_per_sec",settings.getAsBytesSize("indices.recovery.max_size_per_sec",new ByteSizeValue(40,ByteSizeUnit.MB)));
  if (maxBytesPerSec.bytes() <= 0) {
    rateLimiter=null;
  }
 else {
    rateLimiter=new SimpleRateLimiter(maxBytesPerSec.mbFrac());
  }
  logger.debug("using max_bytes_per_sec[{}], concurrent_streams [{}], file_chunk_size [{}], translog_size [{}], translog_ops [{}], and compress [{}]",maxBytesPerSec,concurrentStreams,fileChunkSize,translogSize,translogOps,compress);
  nodeSettingsService.addListener(new ApplySettings());
}
