{
  IndexService indexService=indicesService.indexServiceSafe(request.index());
  IndexShard indexShard=indexService.shardSafe(request.shardId());
  long getDate=System.currentTimeMillis();
  final GetResult getResult=indexShard.getService().get(request.type(),request.id(),new String[]{SourceFieldMapper.NAME,RoutingFieldMapper.NAME,ParentFieldMapper.NAME,TTLFieldMapper.NAME},true);
  if (!getResult.exists()) {
    if (request.upsertRequest() == null) {
      listener.onFailure(new DocumentMissingException(new ShardId(request.index(),request.shardId()),request.type(),request.id()));
      return;
    }
    IndexRequest indexRequest=request.upsertRequest();
    indexRequest.index(request.index()).type(request.type()).id(request.id()).create(true).routing(request.routing()).percolate(request.percolate()).refresh(request.refresh()).replicationType(request.replicationType()).consistencyLevel(request.consistencyLevel());
    indexRequest.operationThreaded(false);
    final BytesHolder updateSourceBytes=indexRequest.underlyingSourceBytes();
    indexAction.execute(indexRequest,new ActionListener<IndexResponse>(){
      @Override public void onResponse(      IndexResponse response){
        UpdateResponse update=new UpdateResponse(response.index(),response.type(),response.id(),response.version());
        update.matches(response.matches());
        update.getResult(null);
        listener.onResponse(update);
      }
      @Override public void onFailure(      Throwable e){
        e=ExceptionsHelper.unwrapCause(e);
        if (e instanceof VersionConflictEngineException) {
          if (retryCount < request.retryOnConflict()) {
            threadPool.executor(executor()).execute(new Runnable(){
              @Override public void run(){
                shardOperation(request,listener,retryCount + 1);
              }
            }
);
            return;
          }
        }
        listener.onFailure(e);
      }
    }
);
    return;
  }
  if (getResult.internalSourceRef() == null) {
    listener.onFailure(new DocumentSourceMissingException(new ShardId(request.index(),request.shardId()),request.type(),request.id()));
    return;
  }
  Tuple<XContentType,Map<String,Object>> sourceAndContent=XContentHelper.convertToMap(getResult.internalSourceRef().bytes(),getResult.internalSourceRef().offset(),getResult.internalSourceRef().length(),true);
  String operation=null;
  String timestamp=null;
  Long ttl=null;
  Object fetchedTTL=null;
  final Map<String,Object> updatedSourceAsMap;
  final XContentType updateSourceContentType=sourceAndContent.v1();
  String routing=getResult.fields().containsKey(RoutingFieldMapper.NAME) ? getResult.field(RoutingFieldMapper.NAME).value().toString() : null;
  String parent=getResult.fields().containsKey(ParentFieldMapper.NAME) ? getResult.field(ParentFieldMapper.NAME).value().toString() : null;
  if (request.script() == null && request.doc() != null) {
    IndexRequest indexRequest=request.doc();
    updatedSourceAsMap=sourceAndContent.v2();
    if (indexRequest.ttl() > 0) {
      ttl=indexRequest.ttl();
    }
    timestamp=indexRequest.timestamp();
    if (indexRequest.routing() != null) {
      routing=indexRequest.routing();
    }
    if (indexRequest.parent() != null) {
      parent=indexRequest.parent();
    }
    updateSource(updatedSourceAsMap,indexRequest.underlyingSourceAsMap());
  }
 else {
    Map<String,Object> ctx=new HashMap<String,Object>(2);
    ctx.put("_source",sourceAndContent.v2());
    try {
      ExecutableScript script=scriptService.executable(request.scriptLang,request.script,request.scriptParams);
      script.setNextVar("ctx",ctx);
      script.run();
      ctx=(Map<String,Object>)script.unwrap(ctx);
    }
 catch (    Exception e) {
      throw new ElasticSearchIllegalArgumentException("failed to execute script",e);
    }
    operation=(String)ctx.get("op");
    timestamp=(String)ctx.get("_timestamp");
    fetchedTTL=ctx.get("_ttl");
    if (fetchedTTL != null) {
      if (fetchedTTL instanceof Number) {
        ttl=((Number)fetchedTTL).longValue();
      }
 else {
        ttl=TimeValue.parseTimeValue((String)fetchedTTL,null).millis();
      }
    }
    updatedSourceAsMap=(Map<String,Object>)ctx.get("_source");
  }
  if (ttl == null) {
    ttl=getResult.fields().containsKey(TTLFieldMapper.NAME) ? (Long)getResult.field(TTLFieldMapper.NAME).value() : null;
    if (ttl != null) {
      ttl=ttl - (System.currentTimeMillis() - getDate);
    }
  }
  if (operation == null || "index".equals(operation)) {
    final IndexRequest indexRequest=Requests.indexRequest(request.index()).type(request.type()).id(request.id()).routing(routing).parent(parent).source(updatedSourceAsMap,updateSourceContentType).version(getResult.version()).replicationType(request.replicationType()).consistencyLevel(request.consistencyLevel()).timestamp(timestamp).ttl(ttl).percolate(request.percolate()).refresh(request.refresh());
    indexRequest.operationThreaded(false);
    final BytesHolder updateSourceBytes=indexRequest.underlyingSourceBytes();
    indexAction.execute(indexRequest,new ActionListener<IndexResponse>(){
      @Override public void onResponse(      IndexResponse response){
        UpdateResponse update=new UpdateResponse(response.index(),response.type(),response.id(),response.version());
        update.matches(response.matches());
        update.getResult(extractGetResult(request,response.version(),updatedSourceAsMap,updateSourceContentType,updateSourceBytes));
        listener.onResponse(update);
      }
      @Override public void onFailure(      Throwable e){
        e=ExceptionsHelper.unwrapCause(e);
        if (e instanceof VersionConflictEngineException) {
          if (retryCount < request.retryOnConflict()) {
            threadPool.executor(executor()).execute(new Runnable(){
              @Override public void run(){
                shardOperation(request,listener,retryCount + 1);
              }
            }
);
            return;
          }
        }
        listener.onFailure(e);
      }
    }
);
  }
 else   if ("delete".equals(operation)) {
    DeleteRequest deleteRequest=Requests.deleteRequest(request.index()).type(request.type()).id(request.id()).routing(routing).parent(parent).version(getResult.version()).replicationType(request.replicationType()).consistencyLevel(request.consistencyLevel());
    deleteRequest.operationThreaded(false);
    deleteAction.execute(deleteRequest,new ActionListener<DeleteResponse>(){
      @Override public void onResponse(      DeleteResponse response){
        UpdateResponse update=new UpdateResponse(response.index(),response.type(),response.id(),response.version());
        update.getResult(extractGetResult(request,response.version(),updatedSourceAsMap,updateSourceContentType,null));
        listener.onResponse(update);
      }
      @Override public void onFailure(      Throwable e){
        e=ExceptionsHelper.unwrapCause(e);
        if (e instanceof VersionConflictEngineException) {
          if (retryCount < request.retryOnConflict()) {
            threadPool.executor(executor()).execute(new Runnable(){
              @Override public void run(){
                shardOperation(request,listener,retryCount + 1);
              }
            }
);
            return;
          }
        }
        listener.onFailure(e);
      }
    }
);
  }
 else   if ("none".equals(operation)) {
    UpdateResponse update=new UpdateResponse(getResult.index(),getResult.type(),getResult.id(),getResult.version());
    update.getResult(extractGetResult(request,getResult.version(),updatedSourceAsMap,updateSourceContentType,null));
    listener.onResponse(update);
  }
 else {
    logger.warn("Used update operation [{}] for script [{}], doing nothing...",operation,request.script);
    listener.onResponse(new UpdateResponse(getResult.index(),getResult.type(),getResult.id(),getResult.version()));
  }
}
