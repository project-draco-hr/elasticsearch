{
  IndexService indexService=indicesService.indexServiceSafe(request.getIndex());
  IndexShard indexShard=indexService.shardSafe(request.getShardId());
  long getDate=System.currentTimeMillis();
  final GetResult getResult=indexShard.getService().get(request.getType(),request.getId(),new String[]{SourceFieldMapper.NAME,RoutingFieldMapper.NAME,ParentFieldMapper.NAME,TTLFieldMapper.NAME},true);
  if (!getResult.isExists()) {
    if (request.getUpsertRequest() == null) {
      listener.onFailure(new DocumentMissingException(new ShardId(request.getIndex(),request.getShardId()),request.getType(),request.getId()));
      return;
    }
    final IndexRequest indexRequest=request.getUpsertRequest();
    indexRequest.setIndex(request.getIndex()).setType(request.getType()).setId(request.getId()).setCreate(true).setRouting(request.getRouting()).setPercolate(request.getPercolate()).setRefresh(request.isRefresh()).setReplicationType(request.setReplicationType()).setConsistencyLevel(request.getConsistencyLevel());
    indexRequest.setOperationThreaded(false);
    final BytesReference updateSourceBytes=indexRequest.getSource();
    indexAction.execute(indexRequest,new ActionListener<IndexResponse>(){
      @Override public void onResponse(      IndexResponse response){
        UpdateResponse update=new UpdateResponse(response.getIndex(),response.getType(),response.getId(),response.getVersion());
        update.setMatches(response.getMatches());
        if (request.getFields() != null && request.getFields().length > 0) {
          Tuple<XContentType,Map<String,Object>> sourceAndContent=XContentHelper.convertToMap(updateSourceBytes,true);
          update.setGetResult(extractGetResult(request,response.getVersion(),sourceAndContent.v2(),sourceAndContent.v1(),updateSourceBytes));
        }
 else {
          update.setGetResult(null);
        }
        listener.onResponse(update);
      }
      @Override public void onFailure(      Throwable e){
        e=ExceptionsHelper.unwrapCause(e);
        if (e instanceof VersionConflictEngineException || e instanceof DocumentAlreadyExistsException) {
          if (retryCount < request.getRetryOnConflict()) {
            threadPool.executor(executor()).execute(new Runnable(){
              @Override public void run(){
                shardOperation(request,listener,retryCount + 1);
              }
            }
);
            return;
          }
        }
        listener.onFailure(e);
      }
    }
);
    return;
  }
  if (getResult.internalSourceRef() == null) {
    listener.onFailure(new DocumentSourceMissingException(new ShardId(request.getIndex(),request.getShardId()),request.getType(),request.getId()));
    return;
  }
  Tuple<XContentType,Map<String,Object>> sourceAndContent=XContentHelper.convertToMap(getResult.internalSourceRef(),true);
  String operation=null;
  String timestamp=null;
  Long ttl=null;
  Object fetchedTTL=null;
  final Map<String,Object> updatedSourceAsMap;
  final XContentType updateSourceContentType=sourceAndContent.v1();
  String routing=getResult.getFields().containsKey(RoutingFieldMapper.NAME) ? getResult.field(RoutingFieldMapper.NAME).getValue().toString() : null;
  String parent=getResult.getFields().containsKey(ParentFieldMapper.NAME) ? getResult.field(ParentFieldMapper.NAME).getValue().toString() : null;
  if (request.getScript() == null && request.getDoc() != null) {
    IndexRequest indexRequest=request.getDoc();
    updatedSourceAsMap=sourceAndContent.v2();
    if (indexRequest.getTtl() > 0) {
      ttl=indexRequest.getTtl();
    }
    timestamp=indexRequest.getTimestamp();
    if (indexRequest.getRouting() != null) {
      routing=indexRequest.getRouting();
    }
    if (indexRequest.getParent() != null) {
      parent=indexRequest.getParent();
    }
    XContentHelper.update(updatedSourceAsMap,indexRequest.getSourceAsMap());
  }
 else {
    Map<String,Object> ctx=new HashMap<String,Object>(2);
    ctx.put("_source",sourceAndContent.v2());
    try {
      ExecutableScript script=scriptService.executable(request.scriptLang,request.script,request.scriptParams);
      script.setNextVar("ctx",ctx);
      script.run();
      ctx=(Map<String,Object>)script.unwrap(ctx);
    }
 catch (    Exception e) {
      throw new ElasticSearchIllegalArgumentException("failed to execute script",e);
    }
    operation=(String)ctx.get("op");
    timestamp=(String)ctx.get("_timestamp");
    fetchedTTL=ctx.get("_ttl");
    if (fetchedTTL != null) {
      if (fetchedTTL instanceof Number) {
        ttl=((Number)fetchedTTL).longValue();
      }
 else {
        ttl=TimeValue.parseTimeValue((String)fetchedTTL,null).millis();
      }
    }
    updatedSourceAsMap=(Map<String,Object>)ctx.get("_source");
  }
  if (ttl == null) {
    ttl=getResult.getFields().containsKey(TTLFieldMapper.NAME) ? (Long)getResult.field(TTLFieldMapper.NAME).getValue() : null;
    if (ttl != null) {
      ttl=ttl - (System.currentTimeMillis() - getDate);
    }
  }
  if (operation == null || "index".equals(operation)) {
    final IndexRequest indexRequest=Requests.indexRequest(request.getIndex()).setType(request.getType()).setId(request.getId()).setRouting(routing).setParent(parent).setSource(updatedSourceAsMap,updateSourceContentType).setVersion(getResult.getVersion()).setReplicationType(request.setReplicationType()).setConsistencyLevel(request.getConsistencyLevel()).setTimestamp(timestamp).setTtl(ttl).setPercolate(request.getPercolate()).setRefresh(request.isRefresh());
    indexRequest.setOperationThreaded(false);
    final BytesReference updateSourceBytes=indexRequest.getSource();
    indexAction.execute(indexRequest,new ActionListener<IndexResponse>(){
      @Override public void onResponse(      IndexResponse response){
        UpdateResponse update=new UpdateResponse(response.getIndex(),response.getType(),response.getId(),response.getVersion());
        update.setMatches(response.getMatches());
        update.setGetResult(extractGetResult(request,response.getVersion(),updatedSourceAsMap,updateSourceContentType,updateSourceBytes));
        listener.onResponse(update);
      }
      @Override public void onFailure(      Throwable e){
        e=ExceptionsHelper.unwrapCause(e);
        if (e instanceof VersionConflictEngineException) {
          if (retryCount < request.getRetryOnConflict()) {
            threadPool.executor(executor()).execute(new Runnable(){
              @Override public void run(){
                shardOperation(request,listener,retryCount + 1);
              }
            }
);
            return;
          }
        }
        listener.onFailure(e);
      }
    }
);
  }
 else   if ("delete".equals(operation)) {
    DeleteRequest deleteRequest=Requests.deleteRequest(request.getIndex()).setType(request.getType()).setId(request.getId()).setRouting(routing).setParent(parent).setVersion(getResult.getVersion()).setReplicationType(request.setReplicationType()).setConsistencyLevel(request.getConsistencyLevel());
    deleteRequest.setOperationThreaded(false);
    deleteAction.execute(deleteRequest,new ActionListener<DeleteResponse>(){
      @Override public void onResponse(      DeleteResponse response){
        UpdateResponse update=new UpdateResponse(response.getIndex(),response.getType(),response.getId(),response.getVersion());
        update.setGetResult(extractGetResult(request,response.getVersion(),updatedSourceAsMap,updateSourceContentType,null));
        listener.onResponse(update);
      }
      @Override public void onFailure(      Throwable e){
        e=ExceptionsHelper.unwrapCause(e);
        if (e instanceof VersionConflictEngineException) {
          if (retryCount < request.getRetryOnConflict()) {
            threadPool.executor(executor()).execute(new Runnable(){
              @Override public void run(){
                shardOperation(request,listener,retryCount + 1);
              }
            }
);
            return;
          }
        }
        listener.onFailure(e);
      }
    }
);
  }
 else   if ("none".equals(operation)) {
    UpdateResponse update=new UpdateResponse(getResult.getIndex(),getResult.getType(),getResult.getId(),getResult.getVersion());
    update.setGetResult(extractGetResult(request,getResult.getVersion(),updatedSourceAsMap,updateSourceContentType,null));
    listener.onResponse(update);
  }
 else {
    logger.warn("Used update operation [{}] for script [{}], doing nothing...",operation,request.script);
    listener.onResponse(new UpdateResponse(getResult.getIndex(),getResult.getType(),getResult.getId(),getResult.getVersion()));
  }
}
