{
  if (facets.size() == 1) {
    if (requiredSize == 0) {
      InternalTermsStatsLongFacet tsFacet=(InternalTermsStatsLongFacet)facets.get(0);
      if (!tsFacet.entries.isEmpty()) {
        List<LongEntry> entries=tsFacet.mutableList();
        Collections.sort(entries,comparatorType.comparator());
      }
    }
    return facets.get(0);
  }
  int missing=0;
  THashMap<String,LongEntry> map=aggregateCache.get().get();
  map.clear();
  for (  Facet facet : facets) {
    InternalTermsStatsLongFacet tsFacet=(InternalTermsStatsLongFacet)facet;
    missing+=tsFacet.missing;
    for (    Entry entry : tsFacet) {
      LongEntry longEntry=(LongEntry)entry;
      LongEntry current=map.get(longEntry.term());
      if (current != null) {
        current.count+=longEntry.count;
        current.total+=longEntry.total;
      }
 else {
        map.put(longEntry.term(),longEntry);
      }
    }
  }
  if (requiredSize == 0) {
    LongEntry[] entries1=map.values().toArray(new LongEntry[map.size()]);
    Arrays.sort(entries1,comparatorType.comparator());
    return new InternalTermsStatsLongFacet(name,comparatorType,requiredSize,Arrays.asList(entries1),missing);
  }
 else {
    TreeSet<LongEntry> ordered=new BoundedTreeSet<LongEntry>(comparatorType.comparator(),requiredSize);
    ordered.addAll(map.values());
    return new InternalTermsStatsLongFacet(name,comparatorType,requiredSize,ordered,missing);
  }
}
