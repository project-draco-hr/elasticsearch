{
  if ("sort".equals(fieldName)) {
    sortParseElement.parse(parser,subSearchContext);
  }
 else   if ("_source".equals(fieldName)) {
    sourceParseElement.parse(parser,subSearchContext);
  }
 else   if (token == XContentParser.Token.START_OBJECT) {
switch (fieldName) {
case "highlight":
      highlighterParseElement.parse(parser,subSearchContext);
    break;
case "scriptFields":
case "script_fields":
  scriptFieldsParseElement.parse(parser,subSearchContext);
break;
default :
throw new IllegalArgumentException("Unknown key for a " + token + " for nested query: ["+ fieldName+ "].");
}
}
 else if (token == XContentParser.Token.START_ARRAY) {
switch (fieldName) {
case "fielddataFields":
case "fielddata_fields":
fieldDataFieldsParseElement.parse(parser,subSearchContext);
break;
case "fields":
boolean added=false;
while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
String name=parser.text();
added=true;
subSearchContext.fieldNames().add(name);
}
if (!added) {
subSearchContext.emptyFieldNames();
}
break;
default :
throw new IllegalArgumentException("Unknown key for a " + token + " for nested query: ["+ fieldName+ "].");
}
}
 else if (token.isValue()) {
switch (fieldName) {
case "from":
subSearchContext.from(parser.intValue());
break;
case "size":
subSearchContext.size(parser.intValue());
break;
case "track_scores":
case "trackScores":
subSearchContext.trackScores(parser.booleanValue());
break;
case "version":
subSearchContext.version(parser.booleanValue());
break;
case "explain":
subSearchContext.explain(parser.booleanValue());
break;
case "fields":
subSearchContext.fieldNames().add(parser.text());
break;
default :
throw new IllegalArgumentException("Unknown key for a " + token + " for nested query: ["+ fieldName+ "].");
}
}
}
