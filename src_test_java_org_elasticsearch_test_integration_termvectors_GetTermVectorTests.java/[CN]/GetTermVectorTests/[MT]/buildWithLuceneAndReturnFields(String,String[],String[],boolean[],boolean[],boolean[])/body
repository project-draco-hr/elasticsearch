{
  assert(fields.length == withPayloads.length);
  assert(content.length == withPayloads.length);
  assert(withPositions.length == withPayloads.length);
  assert(withOffsets.length == withPayloads.length);
  Map<String,Analyzer> mapping=new HashMap<String,Analyzer>();
  for (int i=0; i < withPayloads.length; i++) {
    if (withPayloads[i]) {
      mapping.put(fields[i],new Analyzer(){
        @Override protected TokenStreamComponents createComponents(        String fieldName,        Reader reader){
          Tokenizer tokenizer=new StandardTokenizer(Version.LUCENE_42,reader);
          TokenFilter filter=new LowerCaseFilter(Version.LUCENE_42,tokenizer);
          filter=new TypeAsPayloadTokenFilter(filter);
          return new TokenStreamComponents(tokenizer,filter);
        }
      }
);
    }
  }
  PerFieldAnalyzerWrapper wrapper=new PerFieldAnalyzerWrapper(new StandardAnalyzer(Version.LUCENE_42),mapping);
  Directory dir=FSDirectory.open(new File("/tmp/foo"));
  IndexWriterConfig conf=new IndexWriterConfig(Version.LUCENE_42,wrapper);
  conf.setOpenMode(OpenMode.CREATE);
  IndexWriter writer=new IndexWriter(dir,conf);
  Document d=new Document();
  for (int i=0; i < fields.length; i++) {
    d.add(new Field("id",docId,StringField.TYPE_STORED));
    FieldType type=new FieldType(TextField.TYPE_STORED);
    type.setStoreTermVectorOffsets(withOffsets[i]);
    type.setStoreTermVectorPayloads(withPayloads[i]);
    type.setStoreTermVectorPositions(withPositions[i] || withOffsets[i] || withPayloads[i]);
    type.setStoreTermVectors(true);
    type.freeze();
    d.add(new Field(fields[i],content[i],type));
    writer.updateDocument(new Term("id",docId),d);
    writer.commit();
  }
  writer.close();
  DirectoryReader dr=DirectoryReader.open(dir);
  IndexSearcher s=new IndexSearcher(dr);
  TopDocs search=s.search(new TermQuery(new Term("id",docId)),1);
  ScoreDoc[] scoreDocs=search.scoreDocs;
  assert(scoreDocs.length == 1);
  int doc=scoreDocs[0].doc;
  Fields returnFields=dr.getTermVectors(doc);
  return returnFields;
}
