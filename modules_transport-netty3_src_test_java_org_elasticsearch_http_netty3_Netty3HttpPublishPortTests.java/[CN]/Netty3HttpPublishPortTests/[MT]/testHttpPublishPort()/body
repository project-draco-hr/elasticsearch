{
  int boundPort=randomIntBetween(9000,9100);
  int otherBoundPort=randomIntBetween(9200,9300);
  int publishPort=resolvePublishPort(Settings.builder().put(HttpTransportSettings.SETTING_HTTP_PUBLISH_PORT.getKey(),9080).build(),randomAddresses(),getByName("127.0.0.2"));
  assertThat("Publish port should be explicitly set to 9080",publishPort,equalTo(9080));
  publishPort=resolvePublishPort(Settings.EMPTY,asList(address("127.0.0.1",boundPort),address("127.0.0.2",otherBoundPort)),getByName("127.0.0.1"));
  assertThat("Publish port should be derived from matched address",publishPort,equalTo(boundPort));
  publishPort=resolvePublishPort(Settings.EMPTY,asList(address("127.0.0.1",boundPort),address("127.0.0.2",boundPort)),getByName("127.0.0.3"));
  assertThat("Publish port should be derived from unique port of bound addresses",publishPort,equalTo(boundPort));
  try {
    resolvePublishPort(Settings.EMPTY,asList(address("127.0.0.1",boundPort),address("127.0.0.2",otherBoundPort)),getByName("127.0.0.3"));
    fail("Expected BindHttpException as publish_port not specified and non-unique port of bound addresses");
  }
 catch (  BindHttpException e) {
    assertThat(e.getMessage(),containsString("Failed to auto-resolve http publish port"));
  }
  publishPort=resolvePublishPort(Settings.EMPTY,asList(address("0.0.0.0",boundPort),address("127.0.0.2",otherBoundPort)),getByName("127.0.0.1"));
  assertThat("Publish port should be derived from matching wildcard address",publishPort,equalTo(boundPort));
  if (NetworkUtils.SUPPORTS_V6) {
    publishPort=resolvePublishPort(Settings.EMPTY,asList(address("0.0.0.0",boundPort),address("127.0.0.2",otherBoundPort)),getByName("::1"));
    assertThat("Publish port should be derived from matching wildcard address",publishPort,equalTo(boundPort));
  }
}
