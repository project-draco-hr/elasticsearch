{
  logger.warn("received shard failed for {}, reason [{}]",shardRouting,reason);
  failedShardQueue.add(shardRouting);
  clusterService.submitStateUpdateTask("shard-failed (" + shardRouting + "), reason ["+ reason+ "]",Priority.HIGH,new ClusterStateUpdateTask(){
    @Override public ClusterState execute(    ClusterState currentState){
      List<ShardRouting> shards=new ArrayList<ShardRouting>();
      failedShardQueue.drainTo(shards);
      RoutingAllocation.Result routingResult=allocationService.applyFailedShards(currentState,shards);
      if (!routingResult.changed()) {
        return currentState;
      }
      return newClusterStateBuilder().state(currentState).routingResult(routingResult).build();
    }
    @Override public void onFailure(    String source,    Throwable t){
      logger.error("unexpected failure during [{}]",t,source);
    }
  }
);
}
