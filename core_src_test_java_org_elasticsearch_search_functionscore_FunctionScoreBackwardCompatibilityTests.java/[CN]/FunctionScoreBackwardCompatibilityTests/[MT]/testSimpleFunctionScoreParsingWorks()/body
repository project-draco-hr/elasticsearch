{
  assertAcked(prepareCreate("test").addMapping("type1",jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("text").field("type","string").endObject().startObject("loc").field("type","geo_point").endObject().endObject().endObject().endObject()));
  ensureYellow();
  int numDocs=10;
  String[] ids=new String[numDocs];
  List<IndexRequestBuilder> indexBuilders=new ArrayList<>();
  for (int i=0; i < numDocs; i++) {
    String id=Integer.toString(i);
    indexBuilders.add(client().prepareIndex().setType("type1").setId(id).setIndex("test").setSource(jsonBuilder().startObject().field("text","value " + (i < 5 ? "boosted" : "")).startObject("loc").field("lat",10 + i).field("lon",20).endObject().endObject()));
    ids[i]=id;
  }
  indexRandom(true,indexBuilders);
  checkFunctionScoreStillWorks(ids);
  logClusterState();
  client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put(EnableAllocationDecider.INDEX_ROUTING_ALLOCATION_ENABLE,"none")).get();
  boolean upgraded;
  int upgradedNodesCounter=1;
  do {
    logger.debug("function_score bwc: upgrading {}st node",upgradedNodesCounter++);
    upgraded=backwardsCluster().upgradeOneNode();
    ensureYellow();
    logClusterState();
    checkFunctionScoreStillWorks(ids);
  }
 while (upgraded);
  client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put(EnableAllocationDecider.INDEX_ROUTING_ALLOCATION_ENABLE,"all")).get();
  logger.debug("done function_score while upgrading");
}
