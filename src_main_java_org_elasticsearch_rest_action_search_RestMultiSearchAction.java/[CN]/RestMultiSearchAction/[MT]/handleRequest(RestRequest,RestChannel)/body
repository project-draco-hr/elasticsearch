{
  MultiSearchRequest multiSearchRequest=new MultiSearchRequest();
  multiSearchRequest.listenerThreaded(false);
  String[] indices=RestActions.splitIndices(request.param("index"));
  String[] types=RestActions.splitTypes(request.param("type"));
  try {
    multiSearchRequest.add(request.contentByteArray(),request.contentByteArrayOffset(),request.contentLength(),request.contentUnsafe(),indices,types,request.param("search_type"));
  }
 catch (  Exception e) {
    try {
      XContentBuilder builder=restContentBuilder(request);
      channel.sendResponse(new XContentRestResponse(request,BAD_REQUEST,builder.startObject().field("error",e.getMessage()).endObject()));
    }
 catch (    IOException e1) {
      logger.error("Failed to send failure response",e1);
    }
    return;
  }
  client.multiSearch(multiSearchRequest,new ActionListener<MultiSearchResponse>(){
    @Override public void onResponse(    MultiSearchResponse response){
      try {
        XContentBuilder builder=restContentBuilder(request);
        builder.startObject();
        response.toXContent(builder,request);
        builder.endObject();
        channel.sendResponse(new XContentRestResponse(request,OK,builder));
      }
 catch (      Exception e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
