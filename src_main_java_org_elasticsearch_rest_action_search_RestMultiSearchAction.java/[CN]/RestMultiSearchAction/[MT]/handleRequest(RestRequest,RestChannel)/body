{
  MultiSearchRequest multiSearchRequest=new MultiSearchRequest();
  multiSearchRequest.listenerThreaded(false);
  String[] indices=Strings.splitStringByCommaToArray(request.param("index"));
  String[] types=Strings.splitStringByCommaToArray(request.param("type"));
  IndicesOptions indicesOptions=IndicesOptions.fromRequest(request,multiSearchRequest.indicesOptions());
  BytesReference content=null;
  if (request.hasContent()) {
    content=request.content();
  }
 else {
    String source=request.param("source");
    if (source != null) {
      content=new BytesArray(source);
    }
  }
  try {
    multiSearchRequest.add(content,request.contentUnsafe(),indices,types,request.param("search_type"),request.param("routing"),indicesOptions,allowExplicitIndex);
  }
 catch (  Exception e) {
    try {
      XContentBuilder builder=restContentBuilder(request);
      channel.sendResponse(new XContentRestResponse(request,BAD_REQUEST,builder.startObject().field("error",e.getMessage()).endObject()));
    }
 catch (    IOException e1) {
      logger.error("Failed to send failure response",e1);
    }
    return;
  }
  client.multiSearch(multiSearchRequest,new ActionListener<MultiSearchResponse>(){
    @Override public void onResponse(    MultiSearchResponse response){
      try {
        XContentBuilder builder=restContentBuilder(request);
        builder.startObject();
        response.toXContent(builder,request);
        builder.endObject();
        channel.sendResponse(new XContentRestResponse(request,OK,builder));
      }
 catch (      Throwable e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
