{
  IndexService indexService=indicesService.indexServiceSafe(shardRouting.shardId().getIndex());
  IndexShard indexShard=indexService.getShard(shardRouting.shardId().id());
  if (indexShard.routingEntry() == null) {
    throw new ShardNotFoundException(indexShard.shardId());
  }
  CommonStatsFlags flags=new CommonStatsFlags().clear();
  if (request.docs()) {
    flags.set(CommonStatsFlags.Flag.Docs);
  }
  if (request.store()) {
    flags.set(CommonStatsFlags.Flag.Store);
  }
  if (request.indexing()) {
    flags.set(CommonStatsFlags.Flag.Indexing);
    flags.types(request.types());
  }
  if (request.get()) {
    flags.set(CommonStatsFlags.Flag.Get);
  }
  if (request.search()) {
    flags.set(CommonStatsFlags.Flag.Search);
    flags.groups(request.groups());
  }
  if (request.merge()) {
    flags.set(CommonStatsFlags.Flag.Merge);
  }
  if (request.refresh()) {
    flags.set(CommonStatsFlags.Flag.Refresh);
  }
  if (request.flush()) {
    flags.set(CommonStatsFlags.Flag.Flush);
  }
  if (request.warmer()) {
    flags.set(CommonStatsFlags.Flag.Warmer);
  }
  if (request.queryCache()) {
    flags.set(CommonStatsFlags.Flag.QueryCache);
  }
  if (request.fieldData()) {
    flags.set(CommonStatsFlags.Flag.FieldData);
    flags.fieldDataFields(request.fieldDataFields());
  }
  if (request.percolate()) {
    flags.set(CommonStatsFlags.Flag.Percolate);
  }
  if (request.segments()) {
    flags.set(CommonStatsFlags.Flag.Segments);
  }
  if (request.completion()) {
    flags.set(CommonStatsFlags.Flag.Completion);
    flags.completionDataFields(request.completionFields());
  }
  if (request.translog()) {
    flags.set(CommonStatsFlags.Flag.Translog);
  }
  if (request.suggest()) {
    flags.set(CommonStatsFlags.Flag.Suggest);
  }
  if (request.requestCache()) {
    flags.set(CommonStatsFlags.Flag.RequestCache);
  }
  if (request.recovery()) {
    flags.set(CommonStatsFlags.Flag.Recovery);
  }
  return new ShardStats(indexShard.routingEntry(),indexShard.shardPath(),new CommonStats(indexShard,flags),indexShard.commitStats());
}
