{
  int availableProcessors=randomIntBetween(1,64);
  int allocatedProcessors=randomIntBetween(1,availableProcessors);
  long refreshInterval=randomBoolean() ? -1 : randomPositiveLong();
  String name=randomAsciiOfLengthBetween(3,10);
  String arch=randomAsciiOfLengthBetween(3,10);
  String version=randomAsciiOfLengthBetween(3,10);
  OsInfo osInfo=new OsInfo(refreshInterval,availableProcessors,allocatedProcessors,name,arch,version);
  try (BytesStreamOutput out=new BytesStreamOutput()){
    osInfo.writeTo(out);
    try (StreamInput in=out.bytes().streamInput()){
      OsInfo deserializedOsInfo=new OsInfo(in);
      assertEquals(osInfo.getRefreshInterval(),deserializedOsInfo.getRefreshInterval());
      assertEquals(osInfo.getAvailableProcessors(),deserializedOsInfo.getAvailableProcessors());
      assertEquals(osInfo.getAllocatedProcessors(),deserializedOsInfo.getAllocatedProcessors());
      assertEquals(osInfo.getName(),deserializedOsInfo.getName());
      assertEquals(osInfo.getArch(),deserializedOsInfo.getArch());
      assertEquals(osInfo.getVersion(),deserializedOsInfo.getVersion());
    }
   }
 }
