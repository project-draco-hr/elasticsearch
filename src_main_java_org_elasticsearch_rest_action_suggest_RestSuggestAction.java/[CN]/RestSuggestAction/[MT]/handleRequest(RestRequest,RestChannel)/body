{
  SuggestRequest suggestRequest=new SuggestRequest(Strings.splitStringByCommaToArray(request.param("index")));
  suggestRequest.indicesOptions(IndicesOptions.fromRequest(request,suggestRequest.indicesOptions()));
  suggestRequest.listenerThreaded(false);
  try {
    BroadcastOperationThreading operationThreading=BroadcastOperationThreading.fromString(request.param("operation_threading"),BroadcastOperationThreading.THREAD_PER_SHARD);
    if (operationThreading == BroadcastOperationThreading.NO_THREADS) {
      operationThreading=BroadcastOperationThreading.SINGLE_THREAD;
    }
    suggestRequest.operationThreading(operationThreading);
    if (request.hasContent()) {
      suggestRequest.suggest(request.content(),request.contentUnsafe());
    }
 else {
      String source=request.param("source");
      if (source != null) {
        suggestRequest.suggest(source);
      }
 else {
        throw new ElasticsearchIllegalArgumentException("no content or source provided to execute suggestion");
      }
    }
    suggestRequest.routing(request.param("routing"));
    suggestRequest.preference(request.param("preference"));
  }
 catch (  Exception e) {
    try {
      XContentBuilder builder=RestXContentBuilder.restContentBuilder(request);
      channel.sendResponse(new XContentRestResponse(request,BAD_REQUEST,builder.startObject().field("error",e.getMessage()).endObject()));
    }
 catch (    IOException e1) {
      logger.error("Failed to send failure response",e1);
    }
    return;
  }
  client.suggest(suggestRequest,new ActionListener<SuggestResponse>(){
    @Override public void onResponse(    SuggestResponse response){
      try {
        XContentBuilder builder=RestXContentBuilder.restContentBuilder(request);
        builder.startObject();
        buildBroadcastShardsHeader(builder,response);
        Suggest suggest=response.getSuggest();
        if (suggest != null) {
          suggest.toXContent(builder,request);
        }
        builder.endObject();
        channel.sendResponse(new XContentRestResponse(request,OK,builder));
      }
 catch (      Throwable e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
