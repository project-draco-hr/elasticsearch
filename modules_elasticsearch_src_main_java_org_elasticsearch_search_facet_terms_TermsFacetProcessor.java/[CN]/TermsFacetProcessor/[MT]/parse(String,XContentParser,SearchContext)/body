{
  String field=null;
  int size=10;
  String[] fieldsNames=null;
  ImmutableSet<String> excluded=ImmutableSet.of();
  String regex=null;
  String regexFlags=null;
  TermsFacet.ComparatorType comparatorType=TermsFacet.ComparatorType.COUNT;
  String scriptLang=null;
  String script=null;
  Map<String,Object> params=null;
  boolean allTerms=false;
  String currentFieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("params".equals(currentFieldName)) {
        params=parser.map();
      }
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if ("exclude".equals(currentFieldName)) {
        ImmutableSet.Builder<String> builder=ImmutableSet.builder();
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          builder.add(parser.text());
        }
        excluded=builder.build();
      }
 else       if ("fields".equals(currentFieldName)) {
        List<String> fields=Lists.newArrayListWithCapacity(4);
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          fields.add(parser.text());
        }
        fieldsNames=fields.toArray(new String[fields.size()]);
      }
    }
 else     if (token.isValue()) {
      if ("field".equals(currentFieldName)) {
        field=parser.text();
      }
 else       if ("script_field".equals(currentFieldName)) {
        script=parser.text();
      }
 else       if ("size".equals(currentFieldName)) {
        size=parser.intValue();
      }
 else       if ("all_terms".equals(currentFieldName) || "allTerms".equals(currentFieldName)) {
        allTerms=parser.booleanValue();
      }
 else       if ("regex".equals(currentFieldName)) {
        regex=parser.text();
      }
 else       if ("regex_flags".equals(currentFieldName) || "regexFlags".equals(currentFieldName)) {
        regexFlags=parser.text();
      }
 else       if ("order".equals(currentFieldName) || "comparator".equals(currentFieldName)) {
        comparatorType=TermsFacet.ComparatorType.fromString(parser.text());
      }
 else       if ("script".equals(currentFieldName)) {
        script=parser.text();
      }
 else       if ("lang".equals(currentFieldName)) {
        scriptLang=parser.text();
      }
    }
  }
  if ("_index".equals(field)) {
    return new IndexNameFacetCollector(facetName,context.shardTarget().index(),comparatorType,size);
  }
  Pattern pattern=null;
  if (regex != null) {
    pattern=Regex.compile(regex,regexFlags);
  }
  if (fieldsNames != null) {
    return new FieldsTermsStringFacetCollector(facetName,fieldsNames,size,comparatorType,allTerms,context,excluded,pattern,scriptLang,script,params);
  }
  if (field == null && fieldsNames == null && script != null) {
    return new ScriptTermsStringFieldFacetCollector(facetName,size,comparatorType,context,excluded,pattern,scriptLang,script,params);
  }
  FieldMapper fieldMapper=context.mapperService().smartNameFieldMapper(field);
  if (fieldMapper != null) {
    if (fieldMapper instanceof IpFieldMapper) {
      return new TermsIpFacetCollector(facetName,field,size,comparatorType,allTerms,context,scriptLang,script,params);
    }
 else     if (fieldMapper.fieldDataType() == FieldDataType.DefaultTypes.LONG) {
      return new TermsLongFacetCollector(facetName,field,size,comparatorType,allTerms,context,scriptLang,script,params);
    }
 else     if (fieldMapper.fieldDataType() == FieldDataType.DefaultTypes.DOUBLE) {
      return new TermsDoubleFacetCollector(facetName,field,size,comparatorType,allTerms,context,scriptLang,script,params);
    }
 else     if (fieldMapper.fieldDataType() == FieldDataType.DefaultTypes.INT) {
      return new TermsIntFacetCollector(facetName,field,size,comparatorType,allTerms,context,scriptLang,script,params);
    }
 else     if (fieldMapper.fieldDataType() == FieldDataType.DefaultTypes.FLOAT) {
      return new TermsFloatFacetCollector(facetName,field,size,comparatorType,allTerms,context,scriptLang,script,params);
    }
 else     if (fieldMapper.fieldDataType() == FieldDataType.DefaultTypes.SHORT) {
      return new TermsShortFacetCollector(facetName,field,size,comparatorType,allTerms,context,scriptLang,script,params);
    }
 else     if (fieldMapper.fieldDataType() == FieldDataType.DefaultTypes.BYTE) {
      return new TermsByteFacetCollector(facetName,field,size,comparatorType,allTerms,context,scriptLang,script,params);
    }
  }
  return new TermsStringFacetCollector(facetName,field,size,comparatorType,allTerms,context,excluded,pattern,scriptLang,script,params);
}
