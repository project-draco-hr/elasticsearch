{
  long totalQueryTime;
  client.admin().indices().prepareClearCache().setFieldDataCache(true).execute().actionGet();
  System.gc();
  System.out.println("--> Warmup (" + name + ")...");
  for (int j=0; j < QUERY_WARMUP; j++) {
    SearchResponse searchResponse=client.prepareSearch("test").setSearchType(SearchType.COUNT).setQuery(matchAllQuery()).addAggregation(AggregationBuilders.terms(name + "s_value").field("s_value").collectMode(collectionModes[0]).subAggregation(AggregationBuilders.terms(name + "l_value").field("l_value").collectMode(collectionModes[1]).subAggregation(AggregationBuilders.terms(name + "s_value_dv").field("s_value_dv").collectMode(collectionModes[2]).subAggregation(AggregationBuilders.terms(name + "l_value_dv").field("l_value_dv").collectMode(collectionModes[3]))))).execute().actionGet();
    if (j == 0) {
      System.out.println("--> Loading : took: " + searchResponse.getTook());
    }
    if (searchResponse.getHits().totalHits() != COUNT) {
      System.err.println("--> mismatch on hits");
    }
  }
  System.out.println("--> Warmup (" + name + ") DONE");
  System.out.println("--> Running (" + name + ")...");
  totalQueryTime=0;
  for (int j=0; j < QUERY_COUNT; j++) {
    SearchResponse searchResponse=client.prepareSearch("test").setSearchType(SearchType.COUNT).setQuery(matchAllQuery()).addAggregation(AggregationBuilders.terms(name + "s_value").field("s_value").collectMode(collectionModes[0]).subAggregation(AggregationBuilders.terms(name + "l_value").field("l_value").collectMode(collectionModes[1]).subAggregation(AggregationBuilders.terms(name + "s_value_dv").field("s_value_dv").collectMode(collectionModes[2]).subAggregation(AggregationBuilders.terms(name + "l_value_dv").field("l_value_dv").collectMode(collectionModes[3]))))).execute().actionGet();
    if (searchResponse.getHits().totalHits() != COUNT) {
      System.err.println("--> mismatch on hits");
    }
    totalQueryTime+=searchResponse.getTookInMillis();
  }
  System.out.println("--> Terms Agg (" + name + "): "+ (totalQueryTime / QUERY_COUNT)+ "ms");
  String[] nodeIds=new String[nodes.length];
  for (int i=0; i < nodeIds.length; i++) {
    nodeIds[i]=nodes[i].injector().getInstance(Discovery.class).localNode().getId();
  }
  ClusterStatsResponse clusterStateResponse=client.admin().cluster().prepareClusterStats().setNodesIds(nodeIds).get();
  ByteSizeValue heapUsed=clusterStateResponse.getNodesStats().getJvm().getHeapUsed();
  System.out.println("--> Heap used: " + heapUsed);
  ByteSizeValue fieldDataMemoryUsed=clusterStateResponse.getIndicesStats().getFieldData().getMemorySize();
  System.out.println("--> Fielddata memory size: " + fieldDataMemoryUsed);
  return new StatsResult(name,totalQueryTime,fieldDataMemoryUsed,heapUsed);
}
