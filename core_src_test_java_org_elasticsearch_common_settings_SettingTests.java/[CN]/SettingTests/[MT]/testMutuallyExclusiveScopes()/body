{
  Setting<String> setting=Setting.simpleString("foo.bar",SettingsProperty.ClusterScope);
  assertThat(setting.hasClusterScope(),is(true));
  assertThat(setting.hasNodeScope(),is(false));
  assertThat(setting.hasIndexScope(),is(false));
  setting=Setting.simpleString("foo.bar",SettingsProperty.NodeScope);
  assertThat(setting.hasNodeScope(),is(true));
  assertThat(setting.hasIndexScope(),is(false));
  assertThat(setting.hasClusterScope(),is(false));
  setting=Setting.simpleString("foo.bar",SettingsProperty.IndexScope);
  assertThat(setting.hasIndexScope(),is(true));
  assertThat(setting.hasNodeScope(),is(false));
  assertThat(setting.hasClusterScope(),is(false));
  setting=Setting.simpleString("foo.bar");
  assertThat(setting.hasNodeScope(),is(true));
  assertThat(setting.hasIndexScope(),is(false));
  assertThat(setting.hasClusterScope(),is(false));
  try {
    Setting.simpleString("foo.bar",SettingsProperty.IndexScope,SettingsProperty.ClusterScope);
    fail("Multiple scopes should fail");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage(),containsString("More than one scope has been added to the setting"));
  }
  try {
    Setting.simpleString("foo.bar",SettingsProperty.IndexScope,SettingsProperty.NodeScope);
    fail("Multiple scopes should fail");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage(),containsString("More than one scope has been added to the setting"));
  }
  try {
    Setting.simpleString("foo.bar",SettingsProperty.ClusterScope,SettingsProperty.NodeScope);
    fail("Multiple scopes should fail");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage(),containsString("More than one scope has been added to the setting"));
  }
  try {
    Setting.simpleString("foo.bar",SettingsProperty.IndexScope,SettingsProperty.ClusterScope,SettingsProperty.NodeScope);
    fail("Multiple scopes should fail");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage(),containsString("More than one scope has been added to the setting"));
  }
}
