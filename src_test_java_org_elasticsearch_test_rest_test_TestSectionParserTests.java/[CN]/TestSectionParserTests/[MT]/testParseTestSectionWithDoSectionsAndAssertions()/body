{
  parser=YamlXContent.yamlXContent.createParser("\"Basic\":\n" + "\n" + "  - do:\n"+ "      index:\n"+ "        index: test_1\n"+ "        type:  test\n"+ "        id:    ??????\n"+ "        body:  { \"foo\": \"Hello: ??????\" }\n"+ "\n"+ "  - do:\n"+ "      get:\n"+ "        index: test_1\n"+ "        type:  test\n"+ "        id:    ??????\n"+ "\n"+ "  - match: { _index:   test_1 }\n"+ "  - is_true: _source\n"+ "  - match: { _source:  { foo: \"Hello: ??????\" } }\n"+ "\n"+ "  - do:\n"+ "      get:\n"+ "        index: test_1\n"+ "        id:    ??????\n"+ "\n"+ "  - length: { _index:   6 }\n"+ "  - is_false: whatever\n"+ "  - gt: { size: 5      }\n"+ "  - lt: { size: 10      }");
  RestTestSectionParser testSectionParser=new RestTestSectionParser();
  TestSection testSection=testSectionParser.parse(new RestTestSuiteParseContext("api","suite",parser,"0.90.5"));
  assertThat(testSection,notNullValue());
  assertThat(testSection.getName(),equalTo("Basic"));
  assertThat(testSection.getSkipSection(),equalTo(SkipSection.EMPTY));
  assertThat(testSection.getExecutableSections().size(),equalTo(10));
  DoSection doSection=(DoSection)testSection.getExecutableSections().get(0);
  assertThat(doSection.getCatch(),nullValue());
  assertThat(doSection.getApiCallSection(),notNullValue());
  assertThat(doSection.getApiCallSection().getApi(),equalTo("index"));
  assertThat(doSection.getApiCallSection().getParams().size(),equalTo(3));
  assertThat(doSection.getApiCallSection().hasBody(),equalTo(true));
  doSection=(DoSection)testSection.getExecutableSections().get(1);
  assertThat(doSection.getCatch(),nullValue());
  assertThat(doSection.getApiCallSection(),notNullValue());
  assertThat(doSection.getApiCallSection().getApi(),equalTo("get"));
  assertThat(doSection.getApiCallSection().getParams().size(),equalTo(3));
  assertThat(doSection.getApiCallSection().hasBody(),equalTo(false));
  MatchAssertion matchAssertion=(MatchAssertion)testSection.getExecutableSections().get(2);
  assertThat(matchAssertion.getField(),equalTo("_index"));
  assertThat(matchAssertion.getExpectedValue().toString(),equalTo("test_1"));
  IsTrueAssertion trueAssertion=(IsTrueAssertion)testSection.getExecutableSections().get(3);
  assertThat(trueAssertion.getField(),equalTo("_source"));
  matchAssertion=(MatchAssertion)testSection.getExecutableSections().get(4);
  assertThat(matchAssertion.getField(),equalTo("_source"));
  assertThat(matchAssertion.getExpectedValue(),instanceOf(Map.class));
  Map map=(Map)matchAssertion.getExpectedValue();
  assertThat(map.size(),equalTo(1));
  assertThat(map.get("foo").toString(),equalTo("Hello: ??????"));
  doSection=(DoSection)testSection.getExecutableSections().get(5);
  assertThat(doSection.getCatch(),nullValue());
  assertThat(doSection.getApiCallSection(),notNullValue());
  assertThat(doSection.getApiCallSection().getApi(),equalTo("get"));
  assertThat(doSection.getApiCallSection().getParams().size(),equalTo(2));
  assertThat(doSection.getApiCallSection().hasBody(),equalTo(false));
  LengthAssertion lengthAssertion=(LengthAssertion)testSection.getExecutableSections().get(6);
  assertThat(lengthAssertion.getField(),equalTo("_index"));
  assertThat(lengthAssertion.getExpectedValue(),instanceOf(Integer.class));
  assertThat((Integer)lengthAssertion.getExpectedValue(),equalTo(6));
  IsFalseAssertion falseAssertion=(IsFalseAssertion)testSection.getExecutableSections().get(7);
  assertThat(falseAssertion.getField(),equalTo("whatever"));
  GreaterThanAssertion greaterThanAssertion=(GreaterThanAssertion)testSection.getExecutableSections().get(8);
  assertThat(greaterThanAssertion.getField(),equalTo("size"));
  assertThat(greaterThanAssertion.getExpectedValue(),instanceOf(Integer.class));
  assertThat((Integer)greaterThanAssertion.getExpectedValue(),equalTo(5));
  LessThanAssertion lessThanAssertion=(LessThanAssertion)testSection.getExecutableSections().get(9);
  assertThat(lessThanAssertion.getField(),equalTo("size"));
  assertThat(lessThanAssertion.getExpectedValue(),instanceOf(Integer.class));
  assertThat((Integer)lessThanAssertion.getExpectedValue(),equalTo(10));
}
