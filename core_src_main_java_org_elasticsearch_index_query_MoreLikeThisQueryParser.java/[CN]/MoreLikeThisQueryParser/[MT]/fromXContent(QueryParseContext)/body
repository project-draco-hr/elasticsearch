{
  XContentParser parser=parseContext.parser();
  List<String> fields=null;
  List<String> likeTexts=new ArrayList<>();
  List<String> unlikeTexts=new ArrayList<>();
  List<Item> likeItems=new ArrayList<>();
  List<Item> unlikeItems=new ArrayList<>();
  int maxQueryTerms=MoreLikeThisQueryBuilder.DEFAULT_MAX_QUERY_TERMS;
  int minTermFreq=MoreLikeThisQueryBuilder.DEFAULT_MIN_TERM_FREQ;
  int minDocFreq=MoreLikeThisQueryBuilder.DEFAULT_MIN_DOC_FREQ;
  int maxDocFreq=MoreLikeThisQueryBuilder.DEFAULT_MAX_DOC_FREQ;
  int minWordLength=MoreLikeThisQueryBuilder.DEFAULT_MIN_WORD_LENGTH;
  int maxWordLength=MoreLikeThisQueryBuilder.DEFAULT_MAX_WORD_LENGTH;
  List<String> stopWords=null;
  String analyzer=null;
  String minimumShouldMatch=MoreLikeThisQueryBuilder.DEFAULT_MINIMUM_SHOULD_MATCH;
  float boostTerms=MoreLikeThisQueryBuilder.DEFAULT_BOOST_TERMS;
  boolean include=MoreLikeThisQueryBuilder.DEFAULT_INCLUDE;
  boolean failOnUnsupportedField=MoreLikeThisQueryBuilder.DEFAULT_FAIL_ON_UNSUPPORTED_FIELDS;
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  String queryName=null;
  XContentParser.Token token;
  String currentFieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token.isValue()) {
      if (parseContext.parseFieldMatcher().match(currentFieldName,Field.LIKE)) {
        parseLikeField(parseContext,likeTexts,likeItems);
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,Field.UNLIKE)) {
        parseLikeField(parseContext,unlikeTexts,unlikeItems);
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,Field.LIKE_TEXT)) {
        likeTexts.add(parser.text());
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,Field.MAX_QUERY_TERMS)) {
        maxQueryTerms=parser.intValue();
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,Field.MIN_TERM_FREQ)) {
        minTermFreq=parser.intValue();
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,Field.MIN_DOC_FREQ)) {
        minDocFreq=parser.intValue();
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,Field.MAX_DOC_FREQ)) {
        maxDocFreq=parser.intValue();
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,Field.MIN_WORD_LENGTH)) {
        minWordLength=parser.intValue();
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,Field.MAX_WORD_LENGTH)) {
        maxWordLength=parser.intValue();
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,Field.ANALYZER)) {
        analyzer=parser.text();
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,Field.MINIMUM_SHOULD_MATCH)) {
        minimumShouldMatch=parser.text();
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,Field.BOOST_TERMS)) {
        boostTerms=parser.floatValue();
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,Field.INCLUDE)) {
        include=parser.booleanValue();
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,Field.FAIL_ON_UNSUPPORTED_FIELD)) {
        failOnUnsupportedField=parser.booleanValue();
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=parser.floatValue();
      }
 else       if ("_name".equals(currentFieldName)) {
        queryName=parser.text();
      }
 else {
        throw new QueryParsingException(parseContext,"[mlt] query does not support [" + currentFieldName + "]");
      }
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if (parseContext.parseFieldMatcher().match(currentFieldName,Field.FIELDS)) {
        fields=new ArrayList<>();
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          fields.add(parser.text());
        }
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,Field.LIKE)) {
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          parseLikeField(parseContext,likeTexts,likeItems);
        }
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,Field.UNLIKE)) {
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          parseLikeField(parseContext,unlikeTexts,unlikeItems);
        }
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,Field.IDS)) {
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          if (!token.isValue()) {
            throw new IllegalArgumentException("ids array element should only contain ids");
          }
          likeItems.add(new Item(null,null,parser.text()));
        }
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,Field.DOCS)) {
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          if (token != XContentParser.Token.START_OBJECT) {
            throw new IllegalArgumentException("docs array element should include an object");
          }
          likeItems.add(Item.parse(parser,parseContext.parseFieldMatcher(),new Item()));
        }
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,Field.STOP_WORDS)) {
        stopWords=new ArrayList<>();
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          stopWords.add(parser.text());
        }
      }
 else {
        throw new QueryParsingException(parseContext,"[mlt] query does not support [" + currentFieldName + "]");
      }
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if (parseContext.parseFieldMatcher().match(currentFieldName,Field.LIKE)) {
        parseLikeField(parseContext,likeTexts,likeItems);
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,Field.UNLIKE)) {
        parseLikeField(parseContext,unlikeTexts,unlikeItems);
      }
 else {
        throw new QueryParsingException(parseContext,"[mlt] query does not support [" + currentFieldName + "]");
      }
    }
  }
  if (likeTexts.isEmpty() && likeItems.isEmpty()) {
    throw new QueryParsingException(parseContext,"more_like_this requires 'like' to be specified");
  }
  if (fields != null && fields.isEmpty()) {
    throw new QueryParsingException(parseContext,"more_like_this requires 'fields' to be non-empty");
  }
  MoreLikeThisQueryBuilder moreLikeThisQueryBuilder=new MoreLikeThisQueryBuilder(fields).like(likeTexts.toArray(new String[likeTexts.size()])).unlike(unlikeTexts.toArray(new String[unlikeTexts.size()])).like(likeItems.toArray(new Item[likeItems.size()])).unlike(unlikeItems.toArray(new Item[unlikeItems.size()])).maxQueryTerms(maxQueryTerms).minTermFreq(minTermFreq).minDocFreq(minDocFreq).maxDocFreq(maxDocFreq).minWordLength(minWordLength).maxWordLength(maxWordLength).analyzer(analyzer).minimumShouldMatch(minimumShouldMatch).boostTerms(boostTerms).include(include).failOnUnsupportedField(failOnUnsupportedField).boost(boost).queryName(queryName);
  if (stopWords != null) {
    moreLikeThisQueryBuilder.stopWords(stopWords);
  }
  return moreLikeThisQueryBuilder;
}
