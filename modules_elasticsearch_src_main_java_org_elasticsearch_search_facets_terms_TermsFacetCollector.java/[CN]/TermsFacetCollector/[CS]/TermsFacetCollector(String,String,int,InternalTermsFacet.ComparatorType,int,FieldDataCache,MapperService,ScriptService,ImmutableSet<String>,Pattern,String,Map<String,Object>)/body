{
  super(facetName);
  this.fieldDataCache=fieldDataCache;
  this.size=size;
  this.comparatorType=comparatorType;
  this.numberOfShards=numberOfShards;
  this.excluded=excluded;
  this.pattern=pattern;
  FieldMapper mapper=mapperService.smartNameFieldMapper(fieldName);
  this.fieldName=fieldName;
  if (mapper != null) {
    this.indexFieldName=mapper.names().indexName();
    this.fieldDataType=mapper.fieldDataType();
  }
 else {
    this.indexFieldName=fieldName;
    this.fieldDataType=FieldData.Type.STRING;
  }
  if (script != null) {
    scriptFunction=new ScriptFieldsFunction(script,scriptService,mapperService,fieldDataCache);
    if (params == null) {
      this.params=Maps.newHashMapWithExpectedSize(1);
    }
 else {
      this.params=params;
    }
  }
 else {
    this.params=null;
    scriptFunction=null;
  }
  if (excluded.isEmpty() && pattern == null && scriptFunction == null) {
    aggregator=new StaticAggregatorValueProc(popFacets());
  }
 else {
    aggregator=new AggregatorValueProc(popFacets(),excluded,pattern,scriptFunction,params);
  }
}
