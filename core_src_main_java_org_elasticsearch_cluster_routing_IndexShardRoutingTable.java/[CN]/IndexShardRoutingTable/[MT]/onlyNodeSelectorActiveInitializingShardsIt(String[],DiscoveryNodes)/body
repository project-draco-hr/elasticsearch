{
  ArrayList<ShardRouting> ordered=new ArrayList<>(activeShards.size() + allInitializingShards.size());
  Set<String> selectedNodes=Sets.newHashSet(discoveryNodes.resolveNodesIds(nodeAttributes));
  int seed=shuffler.nextSeed();
  for (  ShardRouting shardRouting : shuffler.shuffle(activeShards,seed)) {
    if (selectedNodes.contains(shardRouting.currentNodeId())) {
      ordered.add(shardRouting);
    }
  }
  for (  ShardRouting shardRouting : shuffler.shuffle(allInitializingShards,seed)) {
    if (selectedNodes.contains(shardRouting.currentNodeId())) {
      ordered.add(shardRouting);
    }
  }
  if (ordered.isEmpty()) {
    final String message=String.format(Locale.ROOT,"no data nodes with %s [%s] found for shard: %s",nodeAttributes.length == 1 ? "criteria" : "criterion",String.join(",",nodeAttributes),shardId());
    throw new IllegalArgumentException(message);
  }
  return new PlainShardIterator(shardId,ordered);
}
