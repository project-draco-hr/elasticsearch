{
  this.shardId=shardId;
  this.shuffler=new RotationShardShuffler(Randomness.get().nextInt());
  this.shards=Collections.unmodifiableList(shards);
  ShardRouting primary=null;
  List<ShardRouting> replicas=new ArrayList<>();
  List<ShardRouting> activeShards=new ArrayList<>();
  List<ShardRouting> assignedShards=new ArrayList<>();
  List<ShardRouting> allInitializingShards=new ArrayList<>();
  boolean allShardsStarted=true;
  for (  ShardRouting shard : shards) {
    if (shard.primary()) {
      primary=shard;
    }
 else {
      replicas.add(shard);
    }
    if (shard.active()) {
      activeShards.add(shard);
    }
    if (shard.initializing()) {
      allInitializingShards.add(shard);
    }
    if (shard.relocating()) {
      allInitializingShards.add(shard.getTargetRelocatingShard());
    }
    if (shard.assignedToNode()) {
      assignedShards.add(shard);
    }
    if (shard.state() != ShardRoutingState.STARTED) {
      allShardsStarted=false;
    }
  }
  this.allShardsStarted=allShardsStarted;
  this.primary=primary;
  if (primary != null) {
    this.primaryAsList=Collections.singletonList(primary);
  }
 else {
    this.primaryAsList=Collections.emptyList();
  }
  this.replicas=Collections.unmodifiableList(replicas);
  this.activeShards=Collections.unmodifiableList(activeShards);
  this.assignedShards=Collections.unmodifiableList(assignedShards);
  this.allInitializingShards=Collections.unmodifiableList(allInitializingShards);
}
