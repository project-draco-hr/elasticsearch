{
  final IndexService service=createIndex("foo");
  InternalEngine engine=((InternalEngine)EngineAccess.engine(service.shard(0)));
  assertThat(engine.getCurrentIndexWriterConfig().getUseCompoundFile(),is(true));
  client().admin().indices().prepareUpdateSettings("foo").setSettings(Settings.builder().put(EngineConfig.INDEX_COMPOUND_ON_FLUSH,false).build()).get();
  assertThat(engine.getCurrentIndexWriterConfig().getUseCompoundFile(),is(false));
  client().admin().indices().prepareUpdateSettings("foo").setSettings(Settings.builder().put(EngineConfig.INDEX_COMPOUND_ON_FLUSH,true).build()).get();
  assertThat(engine.getCurrentIndexWriterConfig().getUseCompoundFile(),is(true));
  long indexBufferSize=engine.config().getIndexingBufferSize().bytes();
  long versionMapSize=engine.config().getVersionMapSize().bytes();
  assertThat(versionMapSize,equalTo((long)(indexBufferSize * 0.25)));
  final int iters=between(1,20);
  for (int i=0; i < iters; i++) {
    boolean compoundOnFlush=randomBoolean();
    long gcDeletes=random().nextLong() & (Long.MAX_VALUE >> 11);
    boolean versionMapAsPercent=randomBoolean();
    double versionMapPercent=randomIntBetween(0,100);
    long versionMapSizeInMB=randomIntBetween(10,20);
    String versionMapString=versionMapAsPercent ? versionMapPercent + "%" : versionMapSizeInMB + "mb";
    Settings build=Settings.builder().put(EngineConfig.INDEX_COMPOUND_ON_FLUSH,compoundOnFlush).put(EngineConfig.INDEX_GC_DELETES_SETTING,gcDeletes,TimeUnit.MILLISECONDS).put(EngineConfig.INDEX_VERSION_MAP_SIZE,versionMapString).build();
    assertEquals(gcDeletes,build.getAsTime(EngineConfig.INDEX_GC_DELETES_SETTING,null).millis());
    client().admin().indices().prepareUpdateSettings("foo").setSettings(build).get();
    LiveIndexWriterConfig currentIndexWriterConfig=engine.getCurrentIndexWriterConfig();
    assertEquals(engine.config().isCompoundOnFlush(),compoundOnFlush);
    assertEquals(currentIndexWriterConfig.getUseCompoundFile(),compoundOnFlush);
    assertEquals(engine.config().getGcDeletesInMillis(),gcDeletes);
    assertEquals(engine.getGcDeletesInMillis(),gcDeletes);
    indexBufferSize=engine.config().getIndexingBufferSize().bytes();
    versionMapSize=engine.config().getVersionMapSize().bytes();
    if (versionMapAsPercent) {
      assertThat(versionMapSize,equalTo((long)(indexBufferSize * (versionMapPercent / 100))));
    }
 else {
      assertThat(versionMapSize,equalTo(1024 * 1024 * versionMapSizeInMB));
    }
  }
  Settings settings=Settings.builder().put(EngineConfig.INDEX_GC_DELETES_SETTING,1000,TimeUnit.MILLISECONDS).build();
  client().admin().indices().prepareUpdateSettings("foo").setSettings(settings).get();
  assertEquals(engine.getGcDeletesInMillis(),1000);
  assertTrue(engine.config().isEnableGcDeletes());
  settings=Settings.builder().put(EngineConfig.INDEX_GC_DELETES_SETTING,"0ms").build();
  client().admin().indices().prepareUpdateSettings("foo").setSettings(settings).get();
  assertEquals(engine.getGcDeletesInMillis(),0);
  assertTrue(engine.config().isEnableGcDeletes());
  settings=Settings.builder().put(EngineConfig.INDEX_GC_DELETES_SETTING,1000,TimeUnit.MILLISECONDS).build();
  client().admin().indices().prepareUpdateSettings("foo").setSettings(settings).get();
  assertEquals(engine.getGcDeletesInMillis(),1000);
  assertTrue(engine.config().isEnableGcDeletes());
  settings=Settings.builder().put(EngineConfig.INDEX_VERSION_MAP_SIZE,"sdfasfd").build();
  try {
    client().admin().indices().prepareUpdateSettings("foo").setSettings(settings).get();
    fail("settings update didn't fail, but should have");
  }
 catch (  IllegalArgumentException e) {
  }
  settings=Settings.builder().put(EngineConfig.INDEX_VERSION_MAP_SIZE,"-12%").build();
  try {
    client().admin().indices().prepareUpdateSettings("foo").setSettings(settings).get();
    fail("settings update didn't fail, but should have");
  }
 catch (  IllegalArgumentException e) {
  }
  settings=Settings.builder().put(EngineConfig.INDEX_VERSION_MAP_SIZE,"130%").build();
  try {
    client().admin().indices().prepareUpdateSettings("foo").setSettings(settings).get();
    fail("settings update didn't fail, but should have");
  }
 catch (  IllegalArgumentException e) {
  }
}
