{
  this.parentDocs=cacheRecycler.hashMap(-1);
  searchContext.idCache().refresh(searchContext.searcher().getTopReaderContext().leaves());
  int parentHitsResolved;
  int numChildDocs=(searchContext.from() + searchContext.size());
  if (numChildDocs == 0) {
    numChildDocs=1;
  }
  numChildDocs*=factor;
  Query childQuery;
  if (rewrittenChildQuery == null) {
    childQuery=rewrittenChildQuery=searchContext.searcher().rewrite(originalChildQuery);
  }
 else {
    childQuery=rewrittenChildQuery;
  }
  while (true) {
    parentDocs.v().clear();
    TopDocs topChildDocs=searchContext.searcher().search(childQuery,numChildDocs);
    parentHitsResolved=resolveParentDocuments(topChildDocs,searchContext);
    if (parentHitsResolved >= (searchContext.from() + searchContext.size())) {
      break;
    }
    if (topChildDocs.totalHits <= numChildDocs) {
      break;
    }
    numChildDocs*=incrementalFactor;
    if (numChildDocs > topChildDocs.totalHits) {
      numChildDocs=topChildDocs.totalHits;
    }
  }
}
