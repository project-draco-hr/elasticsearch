{
  Map<Object,TIntObjectHashMap<ParentDoc>> parentDocsPerReader=new HashMap<Object,TIntObjectHashMap<ParentDoc>>();
  for (  ScoreDoc scoreDoc : topDocs.scoreDocs) {
    int readerIndex=ReaderUtil.subIndex(scoreDoc.doc,context.searcher().getIndexReader().leaves());
    AtomicReaderContext subContext=context.searcher().getIndexReader().leaves().get(readerIndex);
    int subDoc=scoreDoc.doc - subContext.docBase;
    HashedBytesArray parentId=context.idCache().reader(subContext.reader()).parentIdByDoc(parentType,subDoc);
    if (parentId == null) {
      continue;
    }
    for (    AtomicReaderContext atomicReaderContext : context.searcher().getIndexReader().leaves()) {
      AtomicReader indexReader=atomicReaderContext.reader();
      int parentDocId=context.idCache().reader(indexReader).docById(parentType,parentId);
      if (parentDocId != -1 && indexReader.getLiveDocs().get(parentDocId)) {
        TIntObjectHashMap<ParentDoc> readerParentDocs=parentDocsPerReader.get(indexReader.getCoreCacheKey());
        if (readerParentDocs == null) {
          readerParentDocs=new TIntObjectHashMap<ParentDoc>();
          parentDocsPerReader.put(indexReader.getCoreCacheKey(),readerParentDocs);
        }
        ParentDoc parentDoc=readerParentDocs.get(parentDocId);
        if (parentDoc == null) {
          numHits++;
          parentDoc=new ParentDoc();
          parentDoc.docId=parentDocId;
          parentDoc.count=1;
          parentDoc.maxScore=scoreDoc.score;
          parentDoc.sumScores=scoreDoc.score;
          readerParentDocs.put(parentDocId,parentDoc);
        }
 else {
          parentDoc.count++;
          parentDoc.sumScores+=scoreDoc.score;
          if (scoreDoc.score > parentDoc.maxScore) {
            parentDoc.maxScore=scoreDoc.score;
          }
        }
      }
    }
  }
  this.parentDocs=new HashMap<Object,ParentDoc[]>();
  for (  Map.Entry<Object,TIntObjectHashMap<ParentDoc>> entry : parentDocsPerReader.entrySet()) {
    ParentDoc[] values=entry.getValue().values(new ParentDoc[entry.getValue().size()]);
    Arrays.sort(values,PARENT_DOC_COMP);
    parentDocs.put(entry.getKey(),values);
  }
}
