{
  super(store);
  Preconditions.checkNotNull(store,"Store must be provided to merge policy");
  this.indexSettingsService=indexSettingsService;
  int minMergeDocs=componentSettings.getAsInt("min_merge_docs",LogDocMergePolicy.DEFAULT_MIN_MERGE_DOCS);
  int maxMergeDocs=componentSettings.getAsInt("max_merge_docs",LogDocMergePolicy.DEFAULT_MAX_MERGE_DOCS);
  int mergeFactor=componentSettings.getAsInt("merge_factor",LogDocMergePolicy.DEFAULT_MERGE_FACTOR);
  boolean calibrateSizeByDeletes=componentSettings.getAsBoolean("calibrate_size_by_deletes",true);
  mergePolicy.setMinMergeDocs(minMergeDocs);
  mergePolicy.setMaxMergeDocs(maxMergeDocs);
  mergePolicy.setMergeFactor(mergeFactor);
  mergePolicy.setCalibrateSizeByDeletes(calibrateSizeByDeletes);
  mergePolicy.setNoCFSRatio(noCFSRatio);
  logger.debug("using [log_doc] merge policy with merge_factor[{}], min_merge_docs[{}], max_merge_docs[{}], calibrate_size_by_deletes[{}]",mergeFactor,minMergeDocs,maxMergeDocs,calibrateSizeByDeletes);
  indexSettingsService.addListener(applySettings);
}
