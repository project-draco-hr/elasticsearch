{
  int minMergeDocs=settings.getAsInt(INDEX_MERGE_POLICY_MIN_MERGE_DOCS,LogDocMergePolicyProvider.this.minMergeDocs);
  if (minMergeDocs != LogDocMergePolicyProvider.this.minMergeDocs) {
    logger.info("updating min_merge_docs from [{}] to [{}]",LogDocMergePolicyProvider.this.minMergeDocs,minMergeDocs);
    LogDocMergePolicyProvider.this.minMergeDocs=minMergeDocs;
    for (    CustomLogDocMergePolicy policy : policies) {
      policy.setMinMergeDocs(minMergeDocs);
    }
  }
  int maxMergeDocs=settings.getAsInt(INDEX_MERGE_POLICY_MAX_MERGE_DOCS,LogDocMergePolicyProvider.this.maxMergeDocs);
  if (maxMergeDocs != LogDocMergePolicyProvider.this.maxMergeDocs) {
    logger.info("updating max_merge_docs from [{}] to [{}]",LogDocMergePolicyProvider.this.maxMergeDocs,maxMergeDocs);
    LogDocMergePolicyProvider.this.maxMergeDocs=maxMergeDocs;
    for (    CustomLogDocMergePolicy policy : policies) {
      policy.setMaxMergeDocs(maxMergeDocs);
    }
  }
  int mergeFactor=settings.getAsInt(INDEX_MERGE_POLICY_MERGE_FACTOR,LogDocMergePolicyProvider.this.mergeFactor);
  if (mergeFactor != LogDocMergePolicyProvider.this.mergeFactor) {
    logger.info("updating merge_factor from [{}] to [{}]",LogDocMergePolicyProvider.this.mergeFactor,mergeFactor);
    LogDocMergePolicyProvider.this.mergeFactor=mergeFactor;
    for (    CustomLogDocMergePolicy policy : policies) {
      policy.setMergeFactor(mergeFactor);
    }
  }
  final double noCFSRatio=parseNoCFSRatio(settings.get(INDEX_COMPOUND_FORMAT,Double.toString(LogDocMergePolicyProvider.this.noCFSRatio)));
  final boolean compoundFormat=noCFSRatio != 0.0;
  if (noCFSRatio != LogDocMergePolicyProvider.this.noCFSRatio) {
    logger.info("updating index.compound_format from [{}] to [{}]",formatNoCFSRatio(LogDocMergePolicyProvider.this.noCFSRatio),formatNoCFSRatio(noCFSRatio));
    LogDocMergePolicyProvider.this.noCFSRatio=noCFSRatio;
    for (    CustomLogDocMergePolicy policy : policies) {
      policy.setNoCFSRatio(noCFSRatio);
    }
  }
}
