{
  File tempDir=newTempDir(LifecycleScope.TEST);
  RecordingChangeListener changes=new RecordingChangeListener(tempDir);
  File testDir=new File(tempDir,"test-dir");
  testDir.mkdir();
  File subDir=new File(testDir,"sub-dir");
  subDir.mkdir();
  touch(new File(subDir,"test0.txt"));
  touch(new File(subDir,"test1.txt"));
  FileWatcher fileWatcher=new FileWatcher(testDir);
  fileWatcher.addListener(changes);
  fileWatcher.init();
  assertThat(changes.notifications(),contains(equalTo("onDirectoryInit: test-dir/"),equalTo("onDirectoryInit: test-dir/sub-dir/"),equalTo("onFileInit: test-dir/sub-dir/test0.txt"),equalTo("onFileInit: test-dir/sub-dir/test1.txt")));
  changes.notifications().clear();
  deleteRecursively(subDir);
  touch(subDir);
  fileWatcher.checkAndNotify();
  assertThat(changes.notifications(),contains(equalTo("onFileDeleted: test-dir/sub-dir/test0.txt"),equalTo("onFileDeleted: test-dir/sub-dir/test1.txt"),equalTo("onDirectoryDeleted: test-dir/sub-dir"),equalTo("onFileCreated: test-dir/sub-dir")));
  changes.notifications().clear();
  subDir.delete();
  subDir.mkdir();
  fileWatcher.checkAndNotify();
  assertThat(changes.notifications(),contains(equalTo("onFileDeleted: test-dir/sub-dir/"),equalTo("onDirectoryCreated: test-dir/sub-dir/")));
}
