{
  Path tempDir=createTempDir();
  RecordingChangeListener changes=new RecordingChangeListener(tempDir);
  Path testDir=tempDir.resolve("test-dir");
  Files.createDirectories(testDir);
  Path subDir=testDir.resolve("sub-dir");
  Files.createDirectories(subDir);
  touch(subDir.resolve("test0.txt"));
  touch(subDir.resolve("test1.txt"));
  FileWatcher fileWatcher=new FileWatcher(testDir);
  fileWatcher.addListener(changes);
  fileWatcher.init();
  assertThat(changes.notifications(),contains(equalTo("onDirectoryInit: test-dir/"),equalTo("onDirectoryInit: test-dir/sub-dir/"),equalTo("onFileInit: test-dir/sub-dir/test0.txt"),equalTo("onFileInit: test-dir/sub-dir/test1.txt")));
  changes.notifications().clear();
  if (Files.exists(subDir)) {
    IOUtils.rm(subDir);
  }
  touch(subDir);
  fileWatcher.checkAndNotify();
  assertThat(changes.notifications(),contains(equalTo("onFileDeleted: test-dir/sub-dir/test0.txt"),equalTo("onFileDeleted: test-dir/sub-dir/test1.txt"),equalTo("onDirectoryDeleted: test-dir/sub-dir"),equalTo("onFileCreated: test-dir/sub-dir")));
  changes.notifications().clear();
  Files.delete(subDir);
  Files.createDirectories(subDir);
  fileWatcher.checkAndNotify();
  assertThat(changes.notifications(),contains(equalTo("onFileDeleted: test-dir/sub-dir/"),equalTo("onDirectoryCreated: test-dir/sub-dir/")));
}
