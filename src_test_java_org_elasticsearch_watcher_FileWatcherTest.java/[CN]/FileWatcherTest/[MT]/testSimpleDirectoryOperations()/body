{
  Path tempDir=newTempDirPath(LifecycleScope.TEST);
  RecordingChangeListener changes=new RecordingChangeListener(tempDir);
  Path testDir=tempDir.resolve("test-dir");
  Files.createDirectories(testDir);
  touch(testDir.resolve("test.txt"));
  touch(testDir.resolve("test0.txt"));
  FileWatcher fileWatcher=new FileWatcher(testDir);
  fileWatcher.addListener(changes);
  fileWatcher.init();
  assertThat(changes.notifications(),contains(equalTo("onDirectoryInit: test-dir/"),equalTo("onFileInit: test-dir/test.txt"),equalTo("onFileInit: test-dir/test0.txt")));
  changes.notifications().clear();
  fileWatcher.checkAndNotify();
  assertThat(changes.notifications(),hasSize(0));
  for (int i=0; i < 4; i++) {
    touch(testDir.resolve("test" + i + ".txt"));
  }
  append("Test",testDir.resolve("test0.txt"),Charset.defaultCharset());
  fileWatcher.checkAndNotify();
  assertThat(changes.notifications(),contains(equalTo("onFileChanged: test-dir/test0.txt"),equalTo("onFileCreated: test-dir/test1.txt"),equalTo("onFileCreated: test-dir/test2.txt"),equalTo("onFileCreated: test-dir/test3.txt")));
  changes.notifications().clear();
  fileWatcher.checkAndNotify();
  assertThat(changes.notifications(),hasSize(0));
  Files.delete(testDir.resolve("test1.txt"));
  Files.delete(testDir.resolve("test2.txt"));
  fileWatcher.checkAndNotify();
  assertThat(changes.notifications(),contains(equalTo("onFileDeleted: test-dir/test1.txt"),equalTo("onFileDeleted: test-dir/test2.txt")));
  changes.notifications().clear();
  fileWatcher.checkAndNotify();
  assertThat(changes.notifications(),hasSize(0));
  Files.delete(testDir.resolve("test0.txt"));
  touch(testDir.resolve("test2.txt"));
  touch(testDir.resolve("test4.txt"));
  fileWatcher.checkAndNotify();
  assertThat(changes.notifications(),contains(equalTo("onFileDeleted: test-dir/test0.txt"),equalTo("onFileCreated: test-dir/test2.txt"),equalTo("onFileCreated: test-dir/test4.txt")));
  changes.notifications().clear();
  Files.delete(testDir.resolve("test3.txt"));
  Files.delete(testDir.resolve("test4.txt"));
  fileWatcher.checkAndNotify();
  assertThat(changes.notifications(),contains(equalTo("onFileDeleted: test-dir/test3.txt"),equalTo("onFileDeleted: test-dir/test4.txt")));
  changes.notifications().clear();
  if (Files.exists(testDir)) {
    IOUtils.rm(testDir);
  }
  fileWatcher.checkAndNotify();
  assertThat(changes.notifications(),contains(equalTo("onFileDeleted: test-dir/test.txt"),equalTo("onFileDeleted: test-dir/test2.txt"),equalTo("onDirectoryDeleted: test-dir")));
}
