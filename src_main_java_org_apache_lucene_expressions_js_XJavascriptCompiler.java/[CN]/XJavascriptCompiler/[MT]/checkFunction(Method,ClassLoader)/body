{
  final ClassLoader functionClassloader=method.getDeclaringClass().getClassLoader();
  if (functionClassloader != null) {
    boolean found=false;
    while (parent != null) {
      if (parent == functionClassloader) {
        found=true;
        break;
      }
      parent=parent.getParent();
    }
    if (!found) {
      throw new IllegalArgumentException(method + " is not declared by a class which is accessible by the given parent ClassLoader.");
    }
  }
  if (!Modifier.isStatic(method.getModifiers())) {
    throw new IllegalArgumentException(method + " is not static.");
  }
  if (!Modifier.isPublic(method.getModifiers())) {
    throw new IllegalArgumentException(method + " is not public.");
  }
  if (!Modifier.isPublic(method.getDeclaringClass().getModifiers())) {
    throw new IllegalArgumentException(method.getDeclaringClass().getName() + " is not public.");
  }
  for (  Class<?> clazz : method.getParameterTypes()) {
    if (!clazz.equals(double.class)) {
      throw new IllegalArgumentException(method + " must take only double parameters");
    }
  }
  if (method.getReturnType() != double.class) {
    throw new IllegalArgumentException(method + " does not return a double.");
  }
}
