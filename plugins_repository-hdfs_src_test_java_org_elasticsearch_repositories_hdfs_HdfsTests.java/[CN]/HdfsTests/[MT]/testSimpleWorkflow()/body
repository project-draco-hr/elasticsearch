{
  Client client=client();
  PutRepositoryResponse putRepositoryResponse=client.admin().cluster().preparePutRepository("test-repo").setType("hdfs").setSettings(Settings.builder().put("uri","hdfs:///").put("conf.fs.AbstractFileSystem.hdfs.impl",TestingFs.class.getName()).put("path","foo").put("chunk_size",randomIntBetween(100,1000) + "k").put("compress",randomBoolean())).get();
  assertThat(putRepositoryResponse.isAcknowledged(),equalTo(true));
  createIndex("test-idx-1");
  createIndex("test-idx-2");
  createIndex("test-idx-3");
  ensureGreen();
  logger.info("--> indexing some data");
  for (int i=0; i < 100; i++) {
    client().prepareIndex("test-idx-1","doc",Integer.toString(i)).setSource("foo","bar" + i).get();
    client().prepareIndex("test-idx-2","doc",Integer.toString(i)).setSource("foo","bar" + i).get();
    client().prepareIndex("test-idx-3","doc",Integer.toString(i)).setSource("foo","bar" + i).get();
  }
  client().admin().indices().prepareRefresh().get();
  assertThat(count(client,"test-idx-1"),equalTo(100L));
  assertThat(count(client,"test-idx-2"),equalTo(100L));
  assertThat(count(client,"test-idx-3"),equalTo(100L));
  logger.info("--> snapshot");
  CreateSnapshotResponse createSnapshotResponse=client.admin().cluster().prepareCreateSnapshot("test-repo","test-snap").setWaitForCompletion(true).setIndices("test-idx-*","-test-idx-3").get();
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),greaterThan(0));
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));
  assertThat(client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").get().getSnapshots().get(0).state(),equalTo(SnapshotState.SUCCESS));
  logger.info("--> delete some data");
  for (int i=0; i < 50; i++) {
    client.prepareDelete("test-idx-1","doc",Integer.toString(i)).get();
  }
  for (int i=50; i < 100; i++) {
    client.prepareDelete("test-idx-2","doc",Integer.toString(i)).get();
  }
  for (int i=0; i < 100; i+=2) {
    client.prepareDelete("test-idx-3","doc",Integer.toString(i)).get();
  }
  client().admin().indices().prepareRefresh().get();
  assertThat(count(client,"test-idx-1"),equalTo(50L));
  assertThat(count(client,"test-idx-2"),equalTo(50L));
  assertThat(count(client,"test-idx-3"),equalTo(50L));
  logger.info("--> close indices");
  client.admin().indices().prepareClose("test-idx-1","test-idx-2").get();
  logger.info("--> restore all indices from the snapshot");
  RestoreSnapshotResponse restoreSnapshotResponse=client.admin().cluster().prepareRestoreSnapshot("test-repo","test-snap").setWaitForCompletion(true).execute().actionGet();
  assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(),greaterThan(0));
  ensureGreen();
  assertThat(count(client,"test-idx-1"),equalTo(100L));
  assertThat(count(client,"test-idx-2"),equalTo(100L));
  assertThat(count(client,"test-idx-3"),equalTo(50L));
  logger.info("--> delete indices");
  client().admin().indices().prepareDelete("test-idx-1","test-idx-2").get();
  logger.info("--> restore one index after deletion");
  restoreSnapshotResponse=client.admin().cluster().prepareRestoreSnapshot("test-repo","test-snap").setWaitForCompletion(true).setIndices("test-idx-*","-test-idx-2").execute().actionGet();
  assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(),greaterThan(0));
  ensureGreen();
  assertThat(count(client,"test-idx-1"),equalTo(100L));
  ClusterState clusterState=client.admin().cluster().prepareState().get().getState();
  assertThat(clusterState.getMetaData().hasIndex("test-idx-1"),equalTo(true));
  assertThat(clusterState.getMetaData().hasIndex("test-idx-2"),equalTo(false));
}
