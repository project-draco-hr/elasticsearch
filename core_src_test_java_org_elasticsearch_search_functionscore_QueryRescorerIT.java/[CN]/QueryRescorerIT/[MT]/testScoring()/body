{
  int numDocs=indexRandomNumbers("keyword");
  String[] scoreModes=new String[]{"max","min","avg","total","multiply",""};
  float primaryWeight=1.1f;
  float secondaryWeight=1.6f;
  for (  String scoreMode : scoreModes) {
    for (int i=0; i < numDocs - 4; i++) {
      String[] intToEnglish=new String[]{English.intToEnglish(i),English.intToEnglish(i + 1),English.intToEnglish(i + 2),English.intToEnglish(i + 3)};
      QueryBuilder<?> query=boolQuery().disableCoord(true).should(functionScoreQuery(termQuery("field1",intToEnglish[0]),weightFactorFunction(2.0f)).boostMode(REPLACE)).should(functionScoreQuery(termQuery("field1",intToEnglish[1]),weightFactorFunction(3.0f)).boostMode(REPLACE)).should(functionScoreQuery(termQuery("field1",intToEnglish[2]),weightFactorFunction(5.0f)).boostMode(REPLACE)).should(functionScoreQuery(termQuery("field1",intToEnglish[3]),weightFactorFunction(0.2f)).boostMode(REPLACE));
      QueryRescorerBuilder rescoreQuery=queryRescorer(boolQuery().disableCoord(true).should(functionScoreQuery(termQuery("field1",intToEnglish[0]),weightFactorFunction(5.0f)).boostMode(REPLACE)).should(functionScoreQuery(termQuery("field1",intToEnglish[1]),weightFactorFunction(7.0f)).boostMode(REPLACE)).should(functionScoreQuery(termQuery("field1",intToEnglish[3]),weightFactorFunction(0.0f)).boostMode(REPLACE)));
      rescoreQuery.setQueryWeight(primaryWeight).setRescoreQueryWeight(secondaryWeight);
      if (!"".equals(scoreMode)) {
        rescoreQuery.setScoreMode(QueryRescoreMode.fromString(scoreMode));
      }
      SearchResponse rescored=client().prepareSearch().setPreference("test").setFrom(0).setSize(10).setQuery(query).setRescorer(rescoreQuery,50).get();
      assertHitCount(rescored,4);
      if ("total".equals(scoreMode) || "".equals(scoreMode)) {
        assertFirstHit(rescored,hasId(String.valueOf(i + 1)));
        assertSecondHit(rescored,hasId(String.valueOf(i)));
        assertThirdHit(rescored,hasId(String.valueOf(i + 2)));
        assertThat(rescored.getHits().getHits()[0].getScore(),equalTo(3.0f * primaryWeight + 7.0f * secondaryWeight));
        assertThat(rescored.getHits().getHits()[1].getScore(),equalTo(2.0f * primaryWeight + 5.0f * secondaryWeight));
        assertThat(rescored.getHits().getHits()[2].getScore(),equalTo(5.0f * primaryWeight));
        assertThat(rescored.getHits().getHits()[3].getScore(),equalTo(0.2f * primaryWeight + 0.0f * secondaryWeight));
      }
 else       if ("max".equals(scoreMode)) {
        assertFirstHit(rescored,hasId(String.valueOf(i + 1)));
        assertSecondHit(rescored,hasId(String.valueOf(i)));
        assertThirdHit(rescored,hasId(String.valueOf(i + 2)));
        assertThat(rescored.getHits().getHits()[0].getScore(),equalTo(7.0f * secondaryWeight));
        assertThat(rescored.getHits().getHits()[1].getScore(),equalTo(5.0f * secondaryWeight));
        assertThat(rescored.getHits().getHits()[2].getScore(),equalTo(5.0f * primaryWeight));
        assertThat(rescored.getHits().getHits()[3].getScore(),equalTo(0.2f * primaryWeight));
      }
 else       if ("min".equals(scoreMode)) {
        assertFirstHit(rescored,hasId(String.valueOf(i + 2)));
        assertSecondHit(rescored,hasId(String.valueOf(i + 1)));
        assertThirdHit(rescored,hasId(String.valueOf(i)));
        assertThat(rescored.getHits().getHits()[0].getScore(),equalTo(5.0f * primaryWeight));
        assertThat(rescored.getHits().getHits()[1].getScore(),equalTo(3.0f * primaryWeight));
        assertThat(rescored.getHits().getHits()[2].getScore(),equalTo(2.0f * primaryWeight));
        assertThat(rescored.getHits().getHits()[3].getScore(),equalTo(0.0f * secondaryWeight));
      }
 else       if ("avg".equals(scoreMode)) {
        assertFirstHit(rescored,hasId(String.valueOf(i + 1)));
        assertSecondHit(rescored,hasId(String.valueOf(i + 2)));
        assertThirdHit(rescored,hasId(String.valueOf(i)));
        assertThat(rescored.getHits().getHits()[0].getScore(),equalTo((3.0f * primaryWeight + 7.0f * secondaryWeight) / 2.0f));
        assertThat(rescored.getHits().getHits()[1].getScore(),equalTo(5.0f * primaryWeight));
        assertThat(rescored.getHits().getHits()[2].getScore(),equalTo((2.0f * primaryWeight + 5.0f * secondaryWeight) / 2.0f));
        assertThat(rescored.getHits().getHits()[3].getScore(),equalTo((0.2f * primaryWeight) / 2.0f));
      }
 else       if ("multiply".equals(scoreMode)) {
        assertFirstHit(rescored,hasId(String.valueOf(i + 1)));
        assertSecondHit(rescored,hasId(String.valueOf(i)));
        assertThirdHit(rescored,hasId(String.valueOf(i + 2)));
        assertThat(rescored.getHits().getHits()[0].getScore(),equalTo(3.0f * primaryWeight * 7.0f* secondaryWeight));
        assertThat(rescored.getHits().getHits()[1].getScore(),equalTo(2.0f * primaryWeight * 5.0f* secondaryWeight));
        assertThat(rescored.getHits().getHits()[2].getScore(),equalTo(5.0f * primaryWeight));
        assertThat(rescored.getHits().getHits()[3].getScore(),equalTo(0.2f * primaryWeight * 0.0f* secondaryWeight));
      }
    }
  }
}
