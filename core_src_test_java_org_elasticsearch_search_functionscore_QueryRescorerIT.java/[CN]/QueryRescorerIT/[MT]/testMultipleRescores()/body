{
  int numDocs=indexRandomNumbers("keyword",1,true);
  QueryRescorerBuilder eightIsGreat=RescoreBaseBuilder.queryRescorer(QueryBuilders.functionScoreQuery(QueryBuilders.termQuery("field1",English.intToEnglish(8)),ScoreFunctionBuilders.weightFactorFunction(1000.0f)).boostMode(CombineFunction.REPLACE)).setScoreMode(QueryRescoreMode.Total);
  QueryRescorerBuilder sevenIsBetter=RescoreBaseBuilder.queryRescorer(QueryBuilders.functionScoreQuery(QueryBuilders.termQuery("field1",English.intToEnglish(7)),ScoreFunctionBuilders.weightFactorFunction(10000.0f)).boostMode(CombineFunction.REPLACE)).setScoreMode(QueryRescoreMode.Total);
  SearchRequestBuilder request=client().prepareSearch();
  request.addRescorer(eightIsGreat,numDocs).addRescorer(sevenIsBetter,numDocs);
  SearchResponse response=request.get();
  assertFirstHit(response,hasId("7"));
  assertSecondHit(response,hasId("8"));
  response=request.setSize(1).clearRescorers().addRescorer(eightIsGreat,numDocs).addRescorer(sevenIsBetter,1).get();
  assertFirstHit(response,hasId("8"));
  QueryRescorerBuilder ninetyIsGood=RescoreBaseBuilder.queryRescorer(QueryBuilders.functionScoreQuery(QueryBuilders.queryStringQuery("*ninety*"),ScoreFunctionBuilders.weightFactorFunction(1000.0f)).boostMode(CombineFunction.REPLACE)).setScoreMode(QueryRescoreMode.Total);
  QueryRescorerBuilder oneToo=RescoreBaseBuilder.queryRescorer(QueryBuilders.functionScoreQuery(QueryBuilders.queryStringQuery("*one*"),ScoreFunctionBuilders.weightFactorFunction(1000.0f)).boostMode(CombineFunction.REPLACE)).setScoreMode(QueryRescoreMode.Total);
  request.clearRescorers().addRescorer(ninetyIsGood,numDocs).addRescorer(oneToo,10);
  response=request.setSize(2).get();
  assertFirstHit(response,hasId("91"));
  assertFirstHit(response,hasScore(2001.0f));
  assertSecondHit(response,hasScore(1001.0f));
}
