{
  InternalEngine engine=(InternalEngine)this.engine;
  CodecService codecService=new CodecService(shardId.index());
  LiveIndexWriterConfig currentIndexWriterConfig=engine.getCurrentIndexWriterConfig();
  assertEquals(engine.config().getCodec().getName(),codecService.codec(codecName).getName());
  assertEquals(currentIndexWriterConfig.getCodec().getName(),codecService.codec(codecName).getName());
  assertEquals(engine.config().getIndexConcurrency(),indexConcurrency);
  assertEquals(currentIndexWriterConfig.getMaxThreadStates(),indexConcurrency);
  IndexDynamicSettingsModule settings=new IndexDynamicSettingsModule();
  assertTrue(settings.containsSetting(EngineConfig.INDEX_FAIL_ON_CORRUPTION_SETTING));
  assertTrue(settings.containsSetting(EngineConfig.INDEX_COMPOUND_ON_FLUSH));
  assertTrue(settings.containsSetting(EngineConfig.INDEX_GC_DELETES_SETTING));
  assertTrue(settings.containsSetting(EngineConfig.INDEX_FAIL_ON_MERGE_FAILURE_SETTING));
  final int iters=between(1,20);
  for (int i=0; i < iters; i++) {
    boolean compoundOnFlush=randomBoolean();
    boolean failOnCorruption=randomBoolean();
    boolean failOnMerge=randomBoolean();
    long gcDeletes=Math.max(0,randomLong());
    Settings build=ImmutableSettings.builder().put(EngineConfig.INDEX_FAIL_ON_CORRUPTION_SETTING,failOnCorruption).put(EngineConfig.INDEX_COMPOUND_ON_FLUSH,compoundOnFlush).put(EngineConfig.INDEX_GC_DELETES_SETTING,gcDeletes).put(EngineConfig.INDEX_FAIL_ON_MERGE_FAILURE_SETTING,failOnMerge).build();
    engineSettingsService.refreshSettings(build);
    currentIndexWriterConfig=engine.getCurrentIndexWriterConfig();
    assertEquals(engine.config().isCompoundOnFlush(),compoundOnFlush);
    assertEquals(currentIndexWriterConfig.getUseCompoundFile(),compoundOnFlush);
    assertEquals(engine.config().getGcDeletesInMillis(),gcDeletes);
    assertEquals(engine.getGcDeletesInMillis(),gcDeletes);
    assertEquals(engine.config().isFailEngineOnCorruption(),failOnCorruption);
    assertEquals(engine.config().isFailOnMergeFailure(),failOnMerge);
  }
}
