{
  final ParsedDocument doc=testParsedDocument("1","1","test",null,-1,-1,testDocumentWithTextField(),B_1,false);
  engine.create(new Engine.Create(null,analyzer,newUid("1"),doc));
  engine.flush(Engine.FlushType.COMMIT_TRANSLOG,false,false);
  engine.recover(new Engine.RecoveryHandler(){
    @Override public void phase1(    SnapshotIndexCommit snapshot) throws EngineException {
      try {
        engine.flush(Engine.FlushType.COMMIT_TRANSLOG,false,false);
        assertThat("flush is not allowed in phase 1",false,equalTo(true));
      }
 catch (      FlushNotAllowedEngineException e) {
      }
    }
    @Override public void phase2(    Translog.Snapshot snapshot) throws EngineException {
      MatcherAssert.assertThat(snapshot,TranslogSizeMatcher.translogSize(0));
      try {
        engine.flush(Engine.FlushType.COMMIT_TRANSLOG,false,false);
        assertThat("flush is not allowed in phase 2",false,equalTo(true));
      }
 catch (      FlushNotAllowedEngineException e) {
      }
      engine.index(new Engine.Index(null,analyzer,newUid("1"),doc));
    }
    @Override public void phase3(    Translog.Snapshot snapshot) throws EngineException {
      MatcherAssert.assertThat(snapshot,TranslogSizeMatcher.translogSize(1));
      try {
        engine.flush(Engine.FlushType.COMMIT_TRANSLOG,false,false);
        assertThat("flush is not allowed in phase 3",false,equalTo(true));
      }
 catch (      FlushNotAllowedEngineException e) {
      }
    }
  }
);
  MatcherAssert.assertThat(translog.snapshot(),TranslogSizeMatcher.translogSize(0));
  engine.flush(Engine.FlushType.COMMIT_TRANSLOG,false,false);
  engine.close();
}
