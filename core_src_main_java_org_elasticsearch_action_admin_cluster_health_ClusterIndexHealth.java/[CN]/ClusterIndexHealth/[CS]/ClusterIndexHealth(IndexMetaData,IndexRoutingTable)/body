{
  this.index=indexMetaData.index();
  this.numberOfShards=indexMetaData.getNumberOfShards();
  this.numberOfReplicas=indexMetaData.getNumberOfReplicas();
  this.validationFailures=indexRoutingTable.validate(indexMetaData);
  for (  IndexShardRoutingTable shardRoutingTable : indexRoutingTable) {
    ClusterShardHealth shardHealth=new ClusterShardHealth(shardRoutingTable.shardId().id());
    for (    ShardRouting shardRouting : shardRoutingTable) {
      if (shardRouting.active()) {
        shardHealth.activeShards++;
        if (shardRouting.relocating()) {
          shardHealth.relocatingShards++;
        }
        if (shardRouting.primary()) {
          shardHealth.primaryActive=true;
        }
      }
 else       if (shardRouting.initializing()) {
        shardHealth.initializingShards++;
      }
 else       if (shardRouting.unassigned()) {
        shardHealth.unassignedShards++;
      }
    }
    if (shardHealth.primaryActive) {
      if (shardHealth.activeShards == shardRoutingTable.size()) {
        shardHealth.status=ClusterHealthStatus.GREEN;
      }
 else {
        shardHealth.status=ClusterHealthStatus.YELLOW;
      }
    }
 else {
      shardHealth.status=ClusterHealthStatus.RED;
    }
    shards.put(shardHealth.getId(),shardHealth);
  }
  status=ClusterHealthStatus.GREEN;
  for (  ClusterShardHealth shardHealth : shards.values()) {
    if (shardHealth.isPrimaryActive()) {
      activePrimaryShards++;
    }
    activeShards+=shardHealth.activeShards;
    relocatingShards+=shardHealth.relocatingShards;
    initializingShards+=shardHealth.initializingShards;
    unassignedShards+=shardHealth.unassignedShards;
    if (shardHealth.getStatus() == ClusterHealthStatus.RED) {
      status=ClusterHealthStatus.RED;
    }
 else     if (shardHealth.getStatus() == ClusterHealthStatus.YELLOW && status != ClusterHealthStatus.RED) {
      status=ClusterHealthStatus.YELLOW;
    }
  }
  if (!validationFailures.isEmpty()) {
    status=ClusterHealthStatus.RED;
  }
 else   if (shards.isEmpty()) {
    status=ClusterHealthStatus.RED;
  }
}
