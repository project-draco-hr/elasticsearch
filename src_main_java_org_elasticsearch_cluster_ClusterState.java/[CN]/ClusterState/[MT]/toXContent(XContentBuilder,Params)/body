{
  Set<String> metrics=Strings.splitStringByCommaToSet(params.param("metric","_all"));
  boolean isAllMetricsOnly=metrics.size() == 1 && metrics.contains("_all");
  if (isAllMetricsOnly || metrics.contains("version")) {
    builder.field("version",version);
  }
  if (isAllMetricsOnly || metrics.contains("master_node")) {
    builder.field("master_node",nodes().masterNodeId());
  }
  if (isAllMetricsOnly || metrics.contains("blocks")) {
    builder.startObject("blocks");
    if (!blocks().global().isEmpty()) {
      builder.startObject("global");
      for (      ClusterBlock block : blocks().global()) {
        block.toXContent(builder,params);
      }
      builder.endObject();
    }
    if (!blocks().indices().isEmpty()) {
      builder.startObject("indices");
      for (      Map.Entry<String,ImmutableSet<ClusterBlock>> entry : blocks().indices().entrySet()) {
        builder.startObject(entry.getKey());
        for (        ClusterBlock block : entry.getValue()) {
          block.toXContent(builder,params);
        }
        builder.endObject();
      }
      builder.endObject();
    }
    builder.endObject();
  }
  if (isAllMetricsOnly || metrics.contains("nodes")) {
    builder.startObject("nodes");
    for (    DiscoveryNode node : nodes()) {
      builder.startObject(node.id(),XContentBuilder.FieldCaseConversion.NONE);
      builder.field("name",node.name());
      builder.field("transport_address",node.address().toString());
      builder.startObject("attributes");
      for (      Map.Entry<String,String> attr : node.attributes().entrySet()) {
        builder.field(attr.getKey(),attr.getValue());
      }
      builder.endObject();
      builder.endObject();
    }
    builder.endObject();
  }
  if (isAllMetricsOnly || metrics.contains("metadata")) {
    builder.startObject("metadata");
    builder.startObject("templates");
    for (    ObjectCursor<IndexTemplateMetaData> cursor : metaData().templates().values()) {
      IndexTemplateMetaData templateMetaData=cursor.value;
      builder.startObject(templateMetaData.name(),XContentBuilder.FieldCaseConversion.NONE);
      builder.field("template",templateMetaData.template());
      builder.field("order",templateMetaData.order());
      builder.startObject("settings");
      Settings settings=templateMetaData.settings();
      if (settingsFilter != null) {
        settings=settingsFilter.filterSettings(settings);
      }
      settings.toXContent(builder,params);
      builder.endObject();
      builder.startObject("mappings");
      for (      ObjectObjectCursor<String,CompressedString> cursor1 : templateMetaData.mappings()) {
        byte[] mappingSource=cursor1.value.uncompressed();
        XContentParser parser=XContentFactory.xContent(mappingSource).createParser(mappingSource);
        Map<String,Object> mapping=parser.map();
        if (mapping.size() == 1 && mapping.containsKey(cursor1.key)) {
          mapping=(Map<String,Object>)mapping.get(cursor1.key);
        }
        builder.field(cursor1.key);
        builder.map(mapping);
      }
      builder.endObject();
      builder.endObject();
    }
    builder.endObject();
    builder.startObject("indices");
    for (    IndexMetaData indexMetaData : metaData()) {
      builder.startObject(indexMetaData.index(),XContentBuilder.FieldCaseConversion.NONE);
      builder.field("state",indexMetaData.state().toString().toLowerCase(Locale.ENGLISH));
      builder.startObject("settings");
      Settings settings=indexMetaData.settings();
      if (settingsFilter != null) {
        settings=settingsFilter.filterSettings(settings);
      }
      settings.toXContent(builder,params);
      builder.endObject();
      builder.startObject("mappings");
      for (      ObjectObjectCursor<String,MappingMetaData> cursor : indexMetaData.mappings()) {
        byte[] mappingSource=cursor.value.source().uncompressed();
        XContentParser parser=XContentFactory.xContent(mappingSource).createParser(mappingSource);
        Map<String,Object> mapping=parser.map();
        if (mapping.size() == 1 && mapping.containsKey(cursor.key)) {
          mapping=(Map<String,Object>)mapping.get(cursor.key);
        }
        builder.field(cursor.key);
        builder.map(mapping);
      }
      builder.endObject();
      builder.startArray("aliases");
      for (      ObjectCursor<String> cursor : indexMetaData.aliases().keys()) {
        builder.value(cursor.value);
      }
      builder.endArray();
      builder.endObject();
    }
    builder.endObject();
    for (    ObjectObjectCursor<String,MetaData.Custom> cursor : metaData.customs()) {
      builder.startObject(cursor.key);
      MetaData.lookupFactorySafe(cursor.key).toXContent(cursor.value,builder,params);
      builder.endObject();
    }
    builder.endObject();
  }
  if (isAllMetricsOnly || metrics.contains("routing_table")) {
    builder.startObject("routing_table");
    builder.startObject("indices");
    for (    IndexRoutingTable indexRoutingTable : routingTable()) {
      builder.startObject(indexRoutingTable.index(),XContentBuilder.FieldCaseConversion.NONE);
      builder.startObject("shards");
      for (      IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {
        builder.startArray(Integer.toString(indexShardRoutingTable.shardId().id()));
        for (        ShardRouting shardRouting : indexShardRoutingTable) {
          shardRouting.toXContent(builder,params);
        }
        builder.endArray();
      }
      builder.endObject();
      builder.endObject();
    }
    builder.endObject();
    builder.endObject();
  }
  if (isAllMetricsOnly || metrics.contains("routing_table")) {
    builder.startObject("routing_nodes");
    builder.startArray("unassigned");
    for (    ShardRouting shardRouting : readOnlyRoutingNodes().unassigned()) {
      shardRouting.toXContent(builder,params);
    }
    builder.endArray();
    builder.startObject("nodes");
    for (    RoutingNode routingNode : readOnlyRoutingNodes()) {
      builder.startArray(routingNode.nodeId(),XContentBuilder.FieldCaseConversion.NONE);
      for (      ShardRouting shardRouting : routingNode) {
        shardRouting.toXContent(builder,params);
      }
      builder.endArray();
    }
    builder.endObject();
    builder.endObject();
  }
  if (isAllMetricsOnly || metrics.contains("customs")) {
    for (    ObjectObjectCursor<String,Custom> cursor : customs) {
      builder.startObject(cursor.key);
      lookupFactorySafe(cursor.key).toXContent(cursor.value,builder,params);
      builder.endObject();
    }
  }
  return builder;
}
