{
  final String action=stream.readString();
  final LocalTransportChannel transportChannel=new LocalTransportChannel(this,sourceTransport,action,requestId,version);
  try {
    final TransportRequestHandler handler=transportServiceAdapter.handler(action,version);
    if (handler == null) {
      throw new ActionNotFoundTransportException("Action [" + action + "] not found");
    }
    final TransportRequest request=handler.newInstance();
    request.remoteAddress(sourceTransport.boundAddress.publishAddress());
    request.readFrom(stream);
    if (handler.executor() == ThreadPool.Names.SAME) {
      handler.messageReceived(request,transportChannel);
    }
 else {
      threadPool.executor(handler.executor()).execute(new AbstractRunnable(){
        @Override protected void doRun() throws Exception {
          handler.messageReceived(request,transportChannel);
        }
        @Override public boolean isForceExecution(){
          return handler.isForceExecution();
        }
        @Override public void onFailure(        Throwable e){
          if (lifecycleState() == Lifecycle.State.STARTED) {
            try {
              transportChannel.sendResponse(e);
            }
 catch (            Throwable e1) {
              logger.warn("Failed to send error message back to client for action [" + action + "]",e1);
              logger.warn("Actual Exception",e);
            }
          }
        }
      }
);
    }
  }
 catch (  Throwable e) {
    try {
      transportChannel.sendResponse(e);
    }
 catch (    Throwable e1) {
      logger.warn("Failed to send error message back to client for action [" + action + "]",e);
      logger.warn("Actual Exception",e1);
    }
  }
}
