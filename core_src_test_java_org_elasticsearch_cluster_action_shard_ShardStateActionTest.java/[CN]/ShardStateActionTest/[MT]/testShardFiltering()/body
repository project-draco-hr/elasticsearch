{
  final IndexMetaData indexMetaData=IndexMetaData.builder("test").settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED,Version.CURRENT).put(IndexMetaData.SETTING_INDEX_UUID,"test_uuid")).numberOfShards(2).numberOfReplicas(0).build();
  ClusterState.Builder stateBuilder=ClusterState.builder(ClusterName.DEFAULT).nodes(DiscoveryNodes.builder().put(new DiscoveryNode("node1",DummyTransportAddress.INSTANCE,Version.CURRENT)).masterNodeId("node1").put(new DiscoveryNode("node2",DummyTransportAddress.INSTANCE,Version.CURRENT))).metaData(MetaData.builder().put(indexMetaData,false));
  final ShardRouting initShard=TestShardRouting.newShardRouting("test",0,"node1",randomBoolean(),ShardRoutingState.INITIALIZING,1);
  final ShardRouting startedShard=TestShardRouting.newShardRouting("test",1,"node2",randomBoolean(),ShardRoutingState.STARTED,1);
  final ShardRouting relocatingShard=TestShardRouting.newShardRouting("test",2,"node1","node2",randomBoolean(),ShardRoutingState.RELOCATING,1);
  stateBuilder.routingTable(RoutingTable.builder().add(IndexRoutingTable.builder("test").addIndexShard(new IndexShardRoutingTable.Builder(initShard.shardId(),true).addShard(initShard).build()).addIndexShard(new IndexShardRoutingTable.Builder(startedShard.shardId(),true).addShard(startedShard).build()).addIndexShard(new IndexShardRoutingTable.Builder(relocatingShard.shardId(),true).addShard(relocatingShard).build())));
  ClusterState state=stateBuilder.build();
  ArrayList<ShardStateAction.ShardRoutingEntry> listToFilter=new ArrayList<>();
  ArrayList<ShardStateAction.ShardRoutingEntry> expectedToBeApplied=new ArrayList<>();
  listToFilter.add(new ShardStateAction.ShardRoutingEntry(initShard,indexMetaData.indexUUID() + "_suffix","wrong_uuid",null));
  listToFilter.add(new ShardStateAction.ShardRoutingEntry(relocatingShard.buildTargetRelocatingShard(),indexMetaData.indexUUID(),"relocating_to_node",null));
  expectedToBeApplied.add(listToFilter.get(listToFilter.size() - 1));
  listToFilter.add(new ShardStateAction.ShardRoutingEntry(startedShard,indexMetaData.indexUUID(),"started shard",null));
  expectedToBeApplied.add(listToFilter.get(listToFilter.size() - 1));
  listToFilter.add(new ShardStateAction.ShardRoutingEntry(TestShardRouting.newShardRouting(initShard.index() + "_NA",initShard.id(),initShard.currentNodeId(),initShard.primary(),initShard.state(),initShard.version()),indexMetaData.indexUUID(),"wrong_uuid",null));
  List<ShardStateAction.ShardRoutingEntry> toBeApplied=ShardStateAction.extractShardsToBeApplied(listToFilter,"for testing",state.metaData(),logger);
  if (toBeApplied.size() != expectedToBeApplied.size()) {
    fail("size mismatch.\n Got: \n [" + toBeApplied + "], \n expected: \n ["+ expectedToBeApplied+ "]");
  }
  for (int i=0; i < toBeApplied.size(); i++) {
    final ShardStateAction.ShardRoutingEntry found=toBeApplied.get(i);
    final ShardStateAction.ShardRoutingEntry expected=expectedToBeApplied.get(i);
    assertThat(found,equalTo(expected));
  }
}
