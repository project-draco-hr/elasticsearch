{
  this.logger=logger;
  this.queries=context.percolateQueries();
  this.searcher=context.docSearcher();
  final FieldMapper<?> idMapper=context.mapperService().smartNameFieldMapper(IdFieldMapper.NAME);
  this.idFieldData=context.fieldData().getForField(idMapper);
  if (context.facets() != null) {
    for (    SearchContextFacets.Entry entry : context.facets().entries()) {
      if (entry.isGlobal()) {
        continue;
      }
      Collector collector=entry.getFacetExecutor().collector();
      if (entry.getFilter() != null) {
        if (collector instanceof NestedFacetExecutor.Collector) {
          collector=new NestedFacetExecutor.Collector((NestedFacetExecutor.Collector)collector,entry.getFilter());
        }
 else {
          collector=new FilteredCollector(collector,entry.getFilter());
        }
      }
      facetCollectors.add(collector);
    }
  }
  facetCollector=facetCollectors.isEmpty() ? null : MultiCollector.wrap(facetCollectors.toArray(new Collector[facetCollectors.size()]));
}
