{
  FieldsVisitor fieldsVisitor;
  Set<String> fieldNames=null;
  List<String> fieldNamePatterns=null;
  if (!context.hasFieldNames()) {
    if (!context.hasScriptFields() && !context.hasFetchSourceContext()) {
      context.fetchSourceContext(new FetchSourceContext(true));
    }
    fieldsVisitor=new FieldsVisitor(context.sourceRequested());
  }
 else   if (context.fieldNames().isEmpty()) {
    fieldsVisitor=new FieldsVisitor(context.sourceRequested());
  }
 else {
    for (    String fieldName : context.fieldNames()) {
      if (fieldName.equals(SourceFieldMapper.NAME)) {
        if (context.hasFetchSourceContext()) {
          context.fetchSourceContext().fetchSource(true);
        }
 else {
          context.fetchSourceContext(new FetchSourceContext(true));
        }
        continue;
      }
      if (Regex.isSimpleMatchPattern(fieldName)) {
        if (fieldNamePatterns == null) {
          fieldNamePatterns=new ArrayList<>();
        }
        fieldNamePatterns.add(fieldName);
      }
 else {
        MappedFieldType fieldType=context.smartNameFieldType(fieldName);
        if (fieldType == null) {
          if (context.getObjectMapper(fieldName) != null) {
            throw new IllegalArgumentException("field [" + fieldName + "] isn't a leaf field");
          }
        }
        if (fieldNames == null) {
          fieldNames=new HashSet<>();
        }
        fieldNames.add(fieldName);
      }
    }
    boolean loadSource=context.sourceRequested();
    fieldsVisitor=new CustomFieldsVisitor(fieldNames == null ? Collections.emptySet() : fieldNames,fieldNamePatterns == null ? Collections.emptyList() : fieldNamePatterns,loadSource);
  }
  InternalSearchHit[] hits=new InternalSearchHit[context.docIdsToLoadSize()];
  FetchSubPhase.HitContext hitContext=new FetchSubPhase.HitContext();
  for (int index=0; index < context.docIdsToLoadSize(); index++) {
    int docId=context.docIdsToLoad()[context.docIdsToLoadFrom() + index];
    int readerIndex=ReaderUtil.subIndex(docId,context.searcher().getIndexReader().leaves());
    LeafReaderContext subReaderContext=context.searcher().getIndexReader().leaves().get(readerIndex);
    int subDocId=docId - subReaderContext.docBase;
    final InternalSearchHit searchHit;
    try {
      int rootDocId=findRootDocumentIfNested(context,subReaderContext,subDocId);
      if (rootDocId != -1) {
        searchHit=createNestedSearchHit(context,docId,subDocId,rootDocId,fieldNames,fieldNamePatterns,subReaderContext);
      }
 else {
        searchHit=createSearchHit(context,fieldsVisitor,docId,subDocId,subReaderContext);
      }
    }
 catch (    IOException e) {
      throw ExceptionsHelper.convertToElastic(e);
    }
    hits[index]=searchHit;
    hitContext.reset(searchHit,subReaderContext,subDocId,context.searcher());
    for (    FetchSubPhase fetchSubPhase : fetchSubPhases) {
      fetchSubPhase.hitExecute(context,hitContext);
    }
  }
  for (  FetchSubPhase fetchSubPhase : fetchSubPhases) {
    fetchSubPhase.hitsExecute(context,hits);
  }
  context.fetchResult().hits(new InternalSearchHits(hits,context.queryResult().topDocs().totalHits,context.queryResult().topDocs().getMaxScore()));
}
