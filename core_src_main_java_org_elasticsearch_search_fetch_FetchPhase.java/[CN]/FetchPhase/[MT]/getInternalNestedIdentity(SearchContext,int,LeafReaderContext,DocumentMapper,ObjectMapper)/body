{
  int currentParent=nestedSubDocId;
  ObjectMapper nestedParentObjectMapper;
  ObjectMapper current=nestedObjectMapper;
  String originalName=nestedObjectMapper.name();
  InternalSearchHit.InternalNestedIdentity nestedIdentity=null;
  do {
    Query parentFilter;
    nestedParentObjectMapper=documentMapper.findParentObjectMapper(current);
    if (nestedParentObjectMapper != null) {
      if (nestedParentObjectMapper.nested().isNested() == false) {
        current=nestedParentObjectMapper;
        continue;
      }
      parentFilter=nestedParentObjectMapper.nestedTypeFilter();
    }
 else {
      parentFilter=Queries.newNonNestedFilter();
    }
    Query childFilter=nestedObjectMapper.nestedTypeFilter();
    if (childFilter == null) {
      current=nestedParentObjectMapper;
      continue;
    }
    final Weight childWeight=context.searcher().createNormalizedWeight(childFilter,false);
    Scorer childScorer=childWeight.scorer(subReaderContext);
    if (childScorer == null) {
      current=nestedParentObjectMapper;
      continue;
    }
    DocIdSetIterator childIter=childScorer.iterator();
    BitSet parentBits=context.bitsetFilterCache().getBitSetProducer(parentFilter).getBitSet(subReaderContext);
    int offset=0;
    int nextParent=parentBits.nextSetBit(currentParent);
    for (int docId=childIter.advance(currentParent + 1); docId < nextParent && docId != DocIdSetIterator.NO_MORE_DOCS; docId=childIter.nextDoc()) {
      offset++;
    }
    currentParent=nextParent;
    current=nestedObjectMapper=nestedParentObjectMapper;
    int currentPrefix=current == null ? 0 : current.name().length() + 1;
    nestedIdentity=new InternalSearchHit.InternalNestedIdentity(originalName.substring(currentPrefix),offset,nestedIdentity);
    if (current != null) {
      originalName=current.name();
    }
  }
 while (current != null);
  return nestedIdentity;
}
