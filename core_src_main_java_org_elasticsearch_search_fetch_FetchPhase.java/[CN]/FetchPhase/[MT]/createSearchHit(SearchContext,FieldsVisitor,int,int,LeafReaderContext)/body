{
  loadStoredFields(context,subReaderContext,fieldsVisitor,subDocId);
  fieldsVisitor.postProcess(context.mapperService());
  Map<String,SearchHitField> searchFields=null;
  if (!fieldsVisitor.fields().isEmpty()) {
    searchFields=new HashMap<>(fieldsVisitor.fields().size());
    for (    Map.Entry<String,List<Object>> entry : fieldsVisitor.fields().entrySet()) {
      searchFields.put(entry.getKey(),new InternalSearchHitField(entry.getKey(),entry.getValue()));
    }
  }
  DocumentMapper documentMapper=context.mapperService().documentMapper(fieldsVisitor.uid().type());
  Text typeText;
  if (documentMapper == null) {
    typeText=new Text(fieldsVisitor.uid().type());
  }
 else {
    typeText=documentMapper.typeText();
  }
  InternalSearchHit searchHit=new InternalSearchHit(docId,fieldsVisitor.uid().id(),typeText,searchFields);
  SourceLookup sourceLookup=context.lookup().source();
  sourceLookup.setSegmentAndDocument(subReaderContext,subDocId);
  if (fieldsVisitor.source() != null) {
    sourceLookup.setSource(fieldsVisitor.source());
  }
  return searchHit;
}
