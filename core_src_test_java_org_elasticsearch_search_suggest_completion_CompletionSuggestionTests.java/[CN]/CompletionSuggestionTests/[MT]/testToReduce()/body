{
  List<Suggest.Suggestion<CompletionSuggestion.Entry>> shardSuggestions=new ArrayList<>();
  int nShards=randomIntBetween(1,10);
  String name=randomAsciiOfLength(10);
  int size=randomIntBetween(3,5);
  for (int i=0; i < nShards; i++) {
    CompletionSuggestion suggestion=new CompletionSuggestion(name,size);
    suggestion.addTerm(new CompletionSuggestion.Entry(new Text(""),0,0));
    shardSuggestions.add(suggestion);
  }
  int totalResults=randomIntBetween(0,5) * nShards;
  float maxScore=randomIntBetween(totalResults,totalResults * 2);
  for (int i=0; i < totalResults; i++) {
    Suggest.Suggestion<CompletionSuggestion.Entry> suggestion=randomFrom(shardSuggestions);
    suggestion.getEntries().get(0).addOption(new CompletionSuggestion.Entry.Option(i,new Text(""),maxScore - i,Collections.emptyMap(),Collections.emptyMap()));
  }
  CompletionSuggestion reducedSuggestion=CompletionSuggestion.reduceTo(shardSuggestions);
  assertNotNull(reducedSuggestion);
  assertThat(reducedSuggestion.getOptions().size(),lessThanOrEqualTo(size));
  int count=0;
  for (  CompletionSuggestion.Entry.Option option : reducedSuggestion.getOptions()) {
    assertThat(option.getDoc().doc,equalTo(count));
    count++;
  }
}
