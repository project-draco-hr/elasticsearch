{
  assertAcked(prepareCreate("test").addMapping("type1","field1","type=string"));
  ensureGreen();
  logger.info("--> register a query 1");
  client().prepareIndex("test",PercolatorService.TYPE_NAME,"kuku").setSource(jsonBuilder().startObject().field("color","blue").field("query",termQuery("field1","value1")).endObject()).setRefresh(true).execute().actionGet();
  logger.info("--> register a query 2");
  client().prepareIndex("test",PercolatorService.TYPE_NAME,"bubu").setSource(jsonBuilder().startObject().field("color","green").field("query",termQuery("field1","value2")).endObject()).setRefresh(true).execute().actionGet();
  PercolateResponse percolate=client().preparePercolate().setIndices("test").setDocumentType("type1").setSource(jsonBuilder().startObject().startObject("doc").field("field1","value1").endObject().endObject()).execute().actionGet();
  assertMatchCount(percolate,1L);
  assertThat(percolate.getMatches(),arrayWithSize(1));
  assertThat(convertFromTextArray(percolate.getMatches(),"test"),arrayContaining("kuku"));
  percolate=client().preparePercolate().setIndices("test").setDocumentType("type1").setSource(jsonBuilder().startObject().startObject("doc").field("field1","value2").endObject().endObject()).execute().actionGet();
  assertMatchCount(percolate,1L);
  assertThat(percolate.getMatches(),arrayWithSize(1));
  assertThat(convertFromTextArray(percolate.getMatches(),"test"),arrayContaining("bubu"));
}
