{
  client().admin().indices().prepareCreate("test").execute().actionGet();
  ensureGreen();
  logger.info("--> Adding docs");
  client().prepareIndex("test","type","1").setSource("field1","b").execute().actionGet();
  client().prepareIndex("test","type","2").setSource("field1","c").execute().actionGet();
  client().prepareIndex("test","type","3").setSource("field1","b c").execute().actionGet();
  client().prepareIndex("test","type","4").setSource("field1","d").execute().actionGet();
  logger.info("--> register a queries");
  client().prepareIndex("test",PercolatorService.TYPE_NAME,"1").setSource(jsonBuilder().startObject().field("query",matchQuery("field1","b")).field("a","b").endObject()).execute().actionGet();
  client().prepareIndex("test",PercolatorService.TYPE_NAME,"2").setSource(jsonBuilder().startObject().field("query",matchQuery("field1","c")).endObject()).execute().actionGet();
  client().prepareIndex("test",PercolatorService.TYPE_NAME,"3").setSource(jsonBuilder().startObject().field("query",boolQuery().must(matchQuery("field1","b")).must(matchQuery("field1","c"))).endObject()).execute().actionGet();
  client().prepareIndex("test",PercolatorService.TYPE_NAME,"4").setSource(jsonBuilder().startObject().field("query",matchAllQuery()).endObject()).execute().actionGet();
  client().admin().indices().prepareRefresh("test").execute().actionGet();
  logger.info("--> Percolate existing doc with id 1");
  PercolateResponse response=client().preparePercolate().setIndices("test").setDocumentType("type").setGetRequest(Requests.getRequest("test").type("type").id("1")).execute().actionGet();
  assertMatchCount(response,2l);
  assertThat(response.getMatches(),arrayWithSize(2));
  assertThat(convertFromTextArray(response.getMatches(),"test"),arrayContainingInAnyOrder("1","4"));
  logger.info("--> Percolate existing doc with id 2");
  response=client().preparePercolate().setIndices("test").setDocumentType("type").setGetRequest(Requests.getRequest("test").type("type").id("2")).execute().actionGet();
  assertMatchCount(response,2l);
  assertThat(response.getMatches(),arrayWithSize(2));
  assertThat(convertFromTextArray(response.getMatches(),"test"),arrayContainingInAnyOrder("2","4"));
  logger.info("--> Percolate existing doc with id 3");
  response=client().preparePercolate().setIndices("test").setDocumentType("type").setGetRequest(Requests.getRequest("test").type("type").id("3")).execute().actionGet();
  assertMatchCount(response,4l);
  assertThat(response.getMatches(),arrayWithSize(4));
  assertThat(convertFromTextArray(response.getMatches(),"test"),arrayContainingInAnyOrder("1","2","3","4"));
  logger.info("--> Percolate existing doc with id 4");
  response=client().preparePercolate().setIndices("test").setDocumentType("type").setGetRequest(Requests.getRequest("test").type("type").id("4")).execute().actionGet();
  assertMatchCount(response,1l);
  assertThat(response.getMatches(),arrayWithSize(1));
  assertThat(convertFromTextArray(response.getMatches(),"test"),arrayContaining("4"));
  logger.info("--> Search normals docs, percolate queries must not be included");
  SearchResponse searchResponse=client().prepareSearch("test").execute().actionGet();
  assertThat(searchResponse.getHits().totalHits(),equalTo(4L));
  assertThat(searchResponse.getHits().getAt(0).type(),equalTo("type"));
  assertThat(searchResponse.getHits().getAt(1).type(),equalTo("type"));
  assertThat(searchResponse.getHits().getAt(2).type(),equalTo("type"));
  assertThat(searchResponse.getHits().getAt(3).type(),equalTo("type"));
}
