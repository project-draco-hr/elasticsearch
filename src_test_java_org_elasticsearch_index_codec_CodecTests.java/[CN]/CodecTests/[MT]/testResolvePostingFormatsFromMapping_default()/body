{
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field1").field("type","string").field("postings_format","default").endObject().startObject("field2").field("type","string").field("postings_format","my_format1").endObject().endObject().endObject().endObject().string();
  Settings indexSettings=ImmutableSettings.settingsBuilder().put("index.codec.postings_format.my_format1.type","default").put("index.codec.postings_format.my_format1.min_block_size",16).put("index.codec.postings_format.my_format1.max_block_size",64).build();
  CodecService codecService=createCodecService(indexSettings);
  DocumentMapper documentMapper=codecService.mapperService().documentMapperParser().parse(mapping);
  assertThat(documentMapper.mappers().name("field1").mapper().postingsFormatProvider(),instanceOf(PreBuiltPostingsFormatProvider.class));
  assertThat(documentMapper.mappers().name("field1").mapper().postingsFormatProvider().get(),instanceOf(ElasticSearch090PostingsFormat.class));
  assertThat(documentMapper.mappers().name("field2").mapper().postingsFormatProvider(),instanceOf(DefaultPostingsFormatProvider.class));
  DefaultPostingsFormatProvider provider=(DefaultPostingsFormatProvider)documentMapper.mappers().name("field2").mapper().postingsFormatProvider();
  assertThat(provider.minBlockSize(),equalTo(16));
  assertThat(provider.maxBlockSize(),equalTo(64));
}
