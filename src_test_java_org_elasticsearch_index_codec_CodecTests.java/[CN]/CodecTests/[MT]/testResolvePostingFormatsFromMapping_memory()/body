{
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field1").field("type","string").field("postings_format","memory").endObject().startObject("field2").field("type","string").field("postings_format","my_format1").endObject().endObject().endObject().endObject().string();
  Settings indexSettings=ImmutableSettings.settingsBuilder().put("index.codec.postings_format.my_format1.type","memory").put("index.codec.postings_format.my_format1.pack_fst",true).put("index.codec.postings_format.my_format1.acceptable_overhead_ratio",0.3f).build();
  CodecService codecService=createCodecService(indexSettings);
  DocumentMapper documentMapper=codecService.mapperService().documentMapperParser().parse(mapping);
  assertThat(documentMapper.mappers().name("field1").mapper().postingsFormatProvider(),instanceOf(PreBuiltPostingsFormatProvider.class));
  assertThat(documentMapper.mappers().name("field1").mapper().postingsFormatProvider().get(),instanceOf(MemoryPostingsFormat.class));
  assertThat(documentMapper.mappers().name("field2").mapper().postingsFormatProvider(),instanceOf(MemoryPostingsFormatProvider.class));
  MemoryPostingsFormatProvider provider=(MemoryPostingsFormatProvider)documentMapper.mappers().name("field2").mapper().postingsFormatProvider();
  assertThat(provider.packFst(),equalTo(true));
  assertThat(provider.acceptableOverheadRatio(),equalTo(0.3f));
}
