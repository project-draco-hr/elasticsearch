{
  DiscoveryNode fromDiscoNode=allocation.nodes().resolveNode(fromNode);
  DiscoveryNode toDiscoNode=allocation.nodes().resolveNode(toNode);
  boolean found=false;
  for (  MutableShardRouting shardRouting : allocation.routingNodes().node(fromDiscoNode.id())) {
    if (!shardRouting.shardId().equals(shardId)) {
      continue;
    }
    found=true;
    if (!shardRouting.started()) {
      throw new ElasticSearchIllegalArgumentException("[move_allocation] can't move " + shardId + ", shard is not started (state = "+ shardRouting.state()+ "]");
    }
    RoutingNode toRoutingNode=allocation.routingNodes().node(toDiscoNode.id());
    Decision decision=allocation.deciders().canAllocate(shardRouting,toRoutingNode,allocation);
    if (decision.type() == Decision.Type.NO) {
      throw new ElasticSearchIllegalArgumentException("[move_allocation] can't move " + shardId + ", from "+ fromDiscoNode+ ", to "+ toDiscoNode+ ", since its not allowed, reason: "+ decision);
    }
    if (decision.type() == Decision.Type.THROTTLE) {
    }
    toRoutingNode.add(new MutableShardRouting(shardRouting.index(),shardRouting.id(),toRoutingNode.nodeId(),shardRouting.currentNodeId(),shardRouting.restoreSource(),shardRouting.primary(),ShardRoutingState.INITIALIZING,shardRouting.version() + 1));
    shardRouting.relocate(toRoutingNode.nodeId());
  }
  if (!found) {
    throw new ElasticSearchIllegalArgumentException("[move_allocation] can't move " + shardId + ", failed to find it on node "+ fromDiscoNode);
  }
}
