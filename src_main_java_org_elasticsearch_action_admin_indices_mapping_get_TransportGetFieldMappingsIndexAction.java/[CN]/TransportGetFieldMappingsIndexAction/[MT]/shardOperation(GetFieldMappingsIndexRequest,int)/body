{
  IndexService indexService=indicesService.indexServiceSafe(request.index());
  Collection<String> typeIntersection;
  if (request.types().length == 0) {
    typeIntersection=indexService.mapperService().types();
  }
 else {
    typeIntersection=Collections2.filter(indexService.mapperService().types(),new Predicate<String>(){
      @Override public boolean apply(      String type){
        return Regex.simpleMatch(request.types(),type);
      }
    }
);
    if (typeIntersection.isEmpty()) {
      throw new TypeMissingException(new Index(request.index()),request.types());
    }
  }
  MapBuilder<String,ImmutableMap<String,FieldMappingMetaData>> typeMappings=new MapBuilder<>();
  for (  String type : typeIntersection) {
    DocumentMapper documentMapper=indexService.mapperService().documentMapper(type);
    ImmutableMap<String,FieldMappingMetaData> fieldMapping=findFieldMappingsByType(documentMapper,request);
    if (!fieldMapping.isEmpty()) {
      typeMappings.put(type,fieldMapping);
    }
  }
  return new GetFieldMappingsResponse(ImmutableMap.of(request.index(),typeMappings.immutableMap()));
}
