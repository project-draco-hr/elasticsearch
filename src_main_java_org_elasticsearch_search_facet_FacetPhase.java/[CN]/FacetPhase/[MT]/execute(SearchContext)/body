{
  if (context.facets() == null) {
    return;
  }
  if (context.queryResult().facets() != null) {
    return;
  }
  Map<Filter,List<Collector>> filtersByCollector=null;
  List<ContextDocIdSet> globalDocSets=null;
  for (  SearchContextFacets.Entry entry : context.facets().entries()) {
    if (!entry.isGlobal()) {
      if (entry.getMode() == FacetExecutor.Mode.POST) {
        FacetExecutor.Post post=entry.getFacetExecutor().post();
        if (entry.getFilter() != null) {
          if (post instanceof NestedFacetExecutor.Post) {
            post=new NestedFacetExecutor.Post((NestedFacetExecutor.Post)post,entry.getFilter());
          }
 else {
            post=new FacetExecutor.Post.Filtered(post,entry.getFilter());
          }
        }
        try {
          post.executePost(context.searcher().mainDocIdSetCollector().docSets());
        }
 catch (        Exception e) {
          throw new QueryPhaseExecutionException(context,"failed to execute facet [" + entry.getFacetName() + "]",e);
        }
      }
    }
 else {
      if (entry.getMode() == FacetExecutor.Mode.POST) {
        if (globalDocSets == null) {
          List<AtomicReaderContext> leaves=context.searcher().getIndexReader().leaves();
          globalDocSets=new ArrayList<ContextDocIdSet>(leaves.size());
          for (          AtomicReaderContext leaf : leaves) {
            globalDocSets.add(new ContextDocIdSet(leaf,BitsFilteredDocIdSet.wrap(new AllDocIdSet(leaf.reader().maxDoc()),leaf.reader().getLiveDocs())));
          }
        }
        try {
          FacetExecutor.Post post=entry.getFacetExecutor().post();
          if (entry.getFilter() != null) {
            if (post instanceof NestedFacetExecutor.Post) {
              post=new NestedFacetExecutor.Post((NestedFacetExecutor.Post)post,entry.getFilter());
            }
 else {
              post=new FacetExecutor.Post.Filtered(post,entry.getFilter());
            }
          }
          post.executePost(globalDocSets);
        }
 catch (        Exception e) {
          throw new QueryPhaseExecutionException(context,"Failed to execute facet [" + entry.getFacetName() + "]",e);
        }
      }
 else       if (entry.getMode() == FacetExecutor.Mode.COLLECTOR) {
        Filter filter=Queries.MATCH_ALL_FILTER;
        Collector collector=entry.getFacetExecutor().collector();
        if (entry.getFilter() != null) {
          if (collector instanceof NestedFacetExecutor.Collector) {
            collector=new NestedFacetExecutor.Collector((NestedFacetExecutor.Collector)collector,entry.getFilter());
          }
 else {
            collector=new FilteredCollector(collector,entry.getFilter());
          }
        }
        if (filtersByCollector == null) {
          filtersByCollector=Maps.newHashMap();
        }
        List<Collector> list=filtersByCollector.get(filter);
        if (list == null) {
          list=new ArrayList<Collector>();
          filtersByCollector.put(filter,list);
        }
        list.add(collector);
      }
    }
  }
  if (filtersByCollector != null) {
    for (    Map.Entry<Filter,List<Collector>> entry : filtersByCollector.entrySet()) {
      Filter filter=entry.getKey();
      Query query=new XConstantScoreQuery(filter);
      Filter searchFilter=context.searchFilter(context.types());
      if (searchFilter != null) {
        query=new XFilteredQuery(query,searchFilter);
      }
      try {
        context.searcher().search(query,MultiCollector.wrap(entry.getValue().toArray(new Collector[entry.getValue().size()])));
      }
 catch (      Exception e) {
        throw new QueryPhaseExecutionException(context,"Failed to execute global facets",e);
      }
      for (      Collector collector : entry.getValue()) {
        if (collector instanceof XCollector) {
          ((XCollector)collector).postCollection();
        }
      }
    }
  }
  List<Facet> facets=new ArrayList<Facet>(context.facets().entries().size());
  for (  SearchContextFacets.Entry entry : context.facets().entries()) {
    facets.add(entry.getFacetExecutor().buildFacet(entry.getFacetName()));
  }
  context.queryResult().facets(new InternalFacets(facets));
}
