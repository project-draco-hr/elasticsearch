{
  if (context.facets() == null || context.facets().facetCollectors() == null) {
    return;
  }
  if (context.queryResult().facets() != null) {
    return;
  }
  List<Collector> collectors=context.searcher().removeCollectors(ContextIndexSearcher.Scopes.GLOBAL);
  if (collectors != null && !collectors.isEmpty()) {
    Map<Filter,List<Collector>> filtersByCollector=Maps.newHashMap();
    for (    Collector collector : collectors) {
      if (collector instanceof OptimizeGlobalFacetCollector) {
        try {
          ((OptimizeGlobalFacetCollector)collector).optimizedGlobalExecution(context);
        }
 catch (        IOException e) {
          throw new QueryPhaseExecutionException(context,"Failed to execute global facets",e);
        }
      }
 else {
        Filter filter=Queries.MATCH_ALL_FILTER;
        if (collector instanceof AbstractFacetCollector) {
          AbstractFacetCollector facetCollector=(AbstractFacetCollector)collector;
          if (facetCollector.getFilter() != null) {
            filter=facetCollector.getAndClearFilter();
          }
        }
        List<Collector> list=filtersByCollector.get(filter);
        if (list == null) {
          list=new ArrayList<Collector>();
          filtersByCollector.put(filter,list);
        }
        list.add(collector);
      }
    }
    for (    Map.Entry<Filter,List<Collector>> entry : filtersByCollector.entrySet()) {
      Filter filter=entry.getKey();
      Query query=new XConstantScoreQuery(filter);
      Filter searchFilter=context.mapperService().searchFilter(context.types());
      if (searchFilter != null) {
        query=new XFilteredQuery(query,context.filterCache().cache(searchFilter));
      }
      try {
        context.searcher().search(query,MultiCollector.wrap(entry.getValue().toArray(new Collector[entry.getValue().size()])));
      }
 catch (      IOException e) {
        throw new QueryPhaseExecutionException(context,"Failed to execute global facets",e);
      }
    }
  }
  SearchContextFacets contextFacets=context.facets();
  List<Facet> facets=Lists.newArrayListWithCapacity(2);
  if (contextFacets.facetCollectors() != null) {
    for (    FacetCollector facetCollector : contextFacets.facetCollectors()) {
      facets.add(facetCollector.facet());
    }
  }
  context.queryResult().facets(new InternalFacets(facets));
}
