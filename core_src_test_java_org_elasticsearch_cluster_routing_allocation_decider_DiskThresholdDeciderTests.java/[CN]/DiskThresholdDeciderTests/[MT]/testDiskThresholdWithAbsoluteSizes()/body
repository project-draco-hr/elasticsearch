{
  Settings diskSettings=Settings.builder().put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(),true).put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(),"30b").put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(),"9b").build();
  ImmutableOpenMap.Builder<String,DiskUsage> usagesBuilder=ImmutableOpenMap.builder();
  usagesBuilder.put("node1",new DiskUsage("node1","n1","/dev/null",100,10));
  usagesBuilder.put("node2",new DiskUsage("node2","n2","/dev/null",100,10));
  usagesBuilder.put("node3",new DiskUsage("node3","n3","/dev/null",100,60));
  usagesBuilder.put("node4",new DiskUsage("node4","n4","/dev/null",100,80));
  usagesBuilder.put("node5",new DiskUsage("node5","n5","/dev/null",100,85));
  ImmutableOpenMap<String,DiskUsage> usages=usagesBuilder.build();
  ImmutableOpenMap.Builder<String,Long> shardSizesBuilder=ImmutableOpenMap.builder();
  shardSizesBuilder.put("[test][0][p]",10L);
  shardSizesBuilder.put("[test][0][r]",10L);
  ImmutableOpenMap<String,Long> shardSizes=shardSizesBuilder.build();
  final ClusterInfo clusterInfo=new DevNullClusterInfo(usages,usages,shardSizes);
  AllocationDeciders deciders=new AllocationDeciders(Settings.EMPTY,new HashSet<>(Arrays.asList(new SameShardAllocationDecider(Settings.EMPTY),makeDecider(diskSettings))));
  ClusterInfoService cis=new ClusterInfoService(){
    @Override public ClusterInfo getClusterInfo(){
      logger.info("--> calling fake getClusterInfo");
      return clusterInfo;
    }
    @Override public void addListener(    Listener listener){
    }
  }
;
  AllocationService strategy=new AllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries",10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),"always").put("cluster.routing.allocation.cluster_concurrent_rebalance",-1).build(),deciders,NoopGatewayAllocator.INSTANCE,new BalancedShardsAllocator(Settings.EMPTY),cis);
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(2)).build();
  RoutingTable initialRoutingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();
  logger.info("--> adding node1 and node2 node");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2"))).build();
  clusterState=strategy.reroute(clusterState,"reroute");
  logShardStates(clusterState);
  assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(),equalTo(1));
  String nodeWithPrimary, nodeWithoutPrimary;
  if (clusterState.getRoutingNodes().node("node1").size() == 1) {
    nodeWithPrimary="node1";
    nodeWithoutPrimary="node2";
  }
 else {
    nodeWithPrimary="node2";
    nodeWithoutPrimary="node1";
  }
  logger.info("--> nodeWithPrimary: {}",nodeWithPrimary);
  logger.info("--> nodeWithoutPrimary: {}",nodeWithoutPrimary);
  usagesBuilder=ImmutableOpenMap.builder(usages);
  usagesBuilder.put(nodeWithoutPrimary,new DiskUsage(nodeWithoutPrimary,"","/dev/null",100,35));
  usages=usagesBuilder.build();
  final ClusterInfo clusterInfo2=new DevNullClusterInfo(usages,usages,shardSizes);
  cis=new ClusterInfoService(){
    @Override public ClusterInfo getClusterInfo(){
      logger.info("--> calling fake getClusterInfo");
      return clusterInfo2;
    }
    @Override public void addListener(    Listener listener){
    }
  }
;
  strategy=new AllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries",10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),"always").put("cluster.routing.allocation.cluster_concurrent_rebalance",-1).build(),deciders,NoopGatewayAllocator.INSTANCE,new BalancedShardsAllocator(Settings.EMPTY),cis);
  clusterState=strategy.reroute(clusterState,"reroute");
  logShardStates(clusterState);
  assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(),equalTo(2));
  logger.info("--> start the shards (primaries)");
  clusterState=strategy.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING));
  logShardStates(clusterState);
  assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(),equalTo(2));
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(1));
  logger.info("--> adding node3");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode("node3"))).build();
  clusterState=strategy.reroute(clusterState,"reroute");
  logShardStates(clusterState);
  assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(),equalTo(2));
  assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(),equalTo(1));
  logger.info("--> start the shards (replicas)");
  clusterState=strategy.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING));
  logShardStates(clusterState);
  assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(),equalTo(3));
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node3").size(),equalTo(1));
  logger.info("--> changing decider settings");
  diskSettings=Settings.builder().put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(),true).put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(),"40b").put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(),"30b").build();
  deciders=new AllocationDeciders(Settings.EMPTY,new HashSet<>(Arrays.asList(new SameShardAllocationDecider(Settings.EMPTY),makeDecider(diskSettings))));
  strategy=new AllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries",10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),"always").put("cluster.routing.allocation.cluster_concurrent_rebalance",-1).build(),deciders,NoopGatewayAllocator.INSTANCE,new BalancedShardsAllocator(Settings.EMPTY),cis);
  clusterState=strategy.reroute(clusterState,"reroute");
  logShardStates(clusterState);
  assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(),equalTo(3));
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node3").size(),equalTo(1));
  logger.info("--> changing settings again");
  diskSettings=Settings.builder().put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(),true).put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(),"50b").put(DiskThresholdSettings.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(),"40b").build();
  deciders=new AllocationDeciders(Settings.EMPTY,new HashSet<>(Arrays.asList(new SameShardAllocationDecider(Settings.EMPTY),makeDecider(diskSettings))));
  strategy=new AllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries",10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),"always").put("cluster.routing.allocation.cluster_concurrent_rebalance",-1).build(),deciders,NoopGatewayAllocator.INSTANCE,new BalancedShardsAllocator(Settings.EMPTY),cis);
  clusterState=strategy.reroute(clusterState,"reroute");
  logShardStates(clusterState);
  assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(),equalTo(3));
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node3").size(),equalTo(1));
  logger.info("--> adding node4");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode("node4"))).build();
  clusterState=strategy.reroute(clusterState,"reroute");
  logShardStates(clusterState);
  assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(),equalTo(2));
  assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(),equalTo(1));
  logger.info("--> apply INITIALIZING shards");
  clusterState=strategy.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING));
  logShardStates(clusterState);
  assertThat(clusterState.getRoutingNodes().node(nodeWithPrimary).size(),equalTo(0));
  assertThat(clusterState.getRoutingNodes().node(nodeWithoutPrimary).size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node3").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node4").size(),equalTo(1));
  logger.info("--> adding node5");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode("node5"))).build();
  clusterState=strategy.reroute(clusterState,"reroute");
  logShardStates(clusterState);
  assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(),equalTo(2));
  assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(),equalTo(1));
  logger.info("--> apply INITIALIZING shards");
  clusterState=strategy.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING));
  logger.info("--> final cluster state:");
  logShardStates(clusterState);
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(0));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(0));
  assertThat(clusterState.getRoutingNodes().node("node3").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node4").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node5").size(),equalTo(1));
}
