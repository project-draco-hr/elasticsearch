{
  Settings diskSettings=settingsBuilder().put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_DISK_THRESHOLD_ENABLED_SETTING.getKey(),true).put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING.getKey(),0.7).put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING.getKey(),"71%").build();
  ImmutableOpenMap.Builder<String,DiskUsage> usagesBuilder=ImmutableOpenMap.builder();
  usagesBuilder.put("node1",new DiskUsage("node1","n1","/dev/null",100,31));
  usagesBuilder.put("node2",new DiskUsage("node2","n2","/dev/null",100,1));
  ImmutableOpenMap<String,DiskUsage> usages=usagesBuilder.build();
  ImmutableOpenMap.Builder<String,Long> shardSizesBuilder=ImmutableOpenMap.builder();
  shardSizesBuilder.put("[test][0][p]",10L);
  ImmutableOpenMap<String,Long> shardSizes=shardSizesBuilder.build();
  final ClusterInfo clusterInfo=new DevNullClusterInfo(usages,usages,shardSizes);
  AllocationDeciders deciders=new AllocationDeciders(Settings.EMPTY,new HashSet<>(Arrays.asList(new SameShardAllocationDecider(Settings.EMPTY),new DiskThresholdDecider(diskSettings))));
  ClusterInfoService cis=new ClusterInfoService(){
    @Override public ClusterInfo getClusterInfo(){
      logger.info("--> calling fake getClusterInfo");
      return clusterInfo;
    }
    @Override public void addListener(    Listener listener){
    }
  }
;
  AllocationService strategy=new AllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries",10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),"always").put("cluster.routing.allocation.cluster_concurrent_rebalance",-1).build(),deciders,makeShardsAllocators(),cis);
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build();
  logger.info("--> adding node1");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1")).put(newNode("node2"))).build();
  routingTable=strategy.reroute(clusterState,"reroute").routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  logger.info("--> start the shards (primaries)");
  routingTable=strategy.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  logShardStates(clusterState);
  assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(),equalTo(0));
  assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(),equalTo(0));
}
