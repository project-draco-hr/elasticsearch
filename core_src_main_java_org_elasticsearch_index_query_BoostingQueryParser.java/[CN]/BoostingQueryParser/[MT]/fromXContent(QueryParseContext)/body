{
  XContentParser parser=parseContext.parser();
  QueryBuilder positiveQuery=null;
  boolean positiveQueryFound=false;
  QueryBuilder negativeQuery=null;
  boolean negativeQueryFound=false;
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  float negativeBoost=-1;
  String queryName=null;
  String currentFieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if (parseContext.parseFieldMatcher().match(currentFieldName,POSITIVE_FIELD)) {
        positiveQuery=parseContext.parseInnerQueryBuilder();
        positiveQueryFound=true;
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,NEGATIVE_FIELD)) {
        negativeQuery=parseContext.parseInnerQueryBuilder();
        negativeQueryFound=true;
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"[boosting] query does not support [" + currentFieldName + "]");
      }
    }
 else     if (token.isValue()) {
      if (parseContext.parseFieldMatcher().match(currentFieldName,NEGATIVE_BOOST_FIELD)) {
        negativeBoost=parser.floatValue();
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.NAME_FIELD)) {
        queryName=parser.text();
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.BOOST_FIELD)) {
        boost=parser.floatValue();
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"[boosting] query does not support [" + currentFieldName + "]");
      }
    }
  }
  if (!positiveQueryFound) {
    throw new ParsingException(parser.getTokenLocation(),"[boosting] query requires 'positive' query to be set'");
  }
  if (!negativeQueryFound) {
    throw new ParsingException(parser.getTokenLocation(),"[boosting] query requires 'negative' query to be set'");
  }
  if (negativeBoost < 0) {
    throw new ParsingException(parser.getTokenLocation(),"[boosting] query requires 'negative_boost' to be set to be a positive value'");
  }
  BoostingQueryBuilder boostingQuery=new BoostingQueryBuilder(positiveQuery,negativeQuery);
  boostingQuery.negativeBoost(negativeBoost);
  boostingQuery.boost(boost);
  boostingQuery.queryName(queryName);
  return boostingQuery;
}
