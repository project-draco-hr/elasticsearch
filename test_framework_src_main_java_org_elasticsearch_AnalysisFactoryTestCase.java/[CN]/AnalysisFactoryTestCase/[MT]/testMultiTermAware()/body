{
  Collection<Class<?>> expected=new HashSet<>();
  for (  Map.Entry<String,Class<?>> entry : getTokenizers().entrySet()) {
    if (org.apache.lucene.analysis.util.MultiTermAwareComponent.class.isAssignableFrom(org.apache.lucene.analysis.util.TokenizerFactory.lookupClass(entry.getKey()))) {
      expected.add(entry.getValue());
    }
  }
  for (  Map.Entry<String,Class<?>> entry : getTokenFilters().entrySet()) {
    if (org.apache.lucene.analysis.util.MultiTermAwareComponent.class.isAssignableFrom(org.apache.lucene.analysis.util.TokenFilterFactory.lookupClass(entry.getKey()))) {
      expected.add(entry.getValue());
    }
  }
  for (  Map.Entry<String,Class<?>> entry : getCharFilters().entrySet()) {
    if (org.apache.lucene.analysis.util.MultiTermAwareComponent.class.isAssignableFrom(org.apache.lucene.analysis.util.CharFilterFactory.lookupClass(entry.getKey()))) {
      expected.add(entry.getValue());
    }
  }
  expected.remove(Void.class);
  expected.remove(Deprecated.class);
  Collection<Class<?>> actual=new HashSet<>();
  for (  Class<?> clazz : getTokenizers().values()) {
    if (MultiTermAwareComponent.class.isAssignableFrom(clazz)) {
      actual.add(clazz);
    }
  }
  for (  Class<?> clazz : getTokenFilters().values()) {
    if (MultiTermAwareComponent.class.isAssignableFrom(clazz)) {
      actual.add(clazz);
    }
  }
  for (  Class<?> clazz : getCharFilters().values()) {
    if (MultiTermAwareComponent.class.isAssignableFrom(clazz)) {
      actual.add(clazz);
    }
  }
  Set<Class<?>> classesMissingMultiTermSupport=new HashSet<>(expected);
  classesMissingMultiTermSupport.removeAll(actual);
  assertTrue("Classes are missing multi-term support: " + classesMissingMultiTermSupport,classesMissingMultiTermSupport.isEmpty());
  Set<Class<?>> classesThatShouldNotHaveMultiTermSupport=new HashSet<>(actual);
  classesThatShouldNotHaveMultiTermSupport.removeAll(expected);
  assertTrue("Classes should not have multi-term support: " + classesThatShouldNotHaveMultiTermSupport,classesThatShouldNotHaveMultiTermSupport.isEmpty());
}
