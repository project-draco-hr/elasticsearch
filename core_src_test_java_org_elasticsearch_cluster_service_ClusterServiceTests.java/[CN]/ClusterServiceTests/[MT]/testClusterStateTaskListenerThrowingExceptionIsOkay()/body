{
  final CountDownLatch latch=new CountDownLatch(1);
  AtomicBoolean published=new AtomicBoolean();
  clusterService.submitStateUpdateTask("testClusterStateTaskListenerThrowingExceptionIsOkay",new Object(),ClusterStateTaskConfig.build(Priority.NORMAL),new ClusterStateTaskExecutor<Object>(){
    @Override public boolean runOnlyOnMaster(){
      return false;
    }
    @Override public BatchResult<Object> execute(    ClusterState currentState,    List<Object> tasks) throws Exception {
      ClusterState newClusterState=ClusterState.builder(currentState).build();
      return BatchResult.builder().successes(tasks).build(newClusterState);
    }
    @Override public void clusterStatePublished(    ClusterChangedEvent clusterChangedEvent){
      published.set(true);
      latch.countDown();
    }
  }
,new ClusterStateTaskListener(){
    @Override public void clusterStateProcessed(    String source,    ClusterState oldState,    ClusterState newState){
      throw new IllegalStateException(source);
    }
    @Override public void onFailure(    String source,    Exception e){
    }
  }
);
  latch.await();
  assertTrue(published.get());
}
