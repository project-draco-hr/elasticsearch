{
  ClusterService nonMaster=createClusterService(false);
  final boolean[] taskFailed={false};
  final CountDownLatch latch1=new CountDownLatch(1);
  nonMaster.submitStateUpdateTask("test",new ClusterStateUpdateTask(){
    @Override public ClusterState execute(    ClusterState currentState) throws Exception {
      latch1.countDown();
      return currentState;
    }
    @Override public void onFailure(    String source,    Throwable t){
      taskFailed[0]=true;
      latch1.countDown();
    }
  }
);
  latch1.await();
  assertTrue("cluster state update task was executed on a non-master",taskFailed[0]);
  taskFailed[0]=true;
  final CountDownLatch latch2=new CountDownLatch(1);
  nonMaster.submitStateUpdateTask("test",new ClusterStateUpdateTask(){
    @Override public boolean runOnlyOnMaster(){
      return false;
    }
    @Override public ClusterState execute(    ClusterState currentState) throws Exception {
      taskFailed[0]=false;
      latch2.countDown();
      return currentState;
    }
    @Override public void onFailure(    String source,    Throwable t){
      taskFailed[0]=true;
      latch2.countDown();
    }
  }
);
  latch2.await();
  assertFalse("non-master cluster state update task was not executed",taskFailed[0]);
  nonMaster.close();
}
