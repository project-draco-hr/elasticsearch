{
  int hash, probe, index, length;
  final byte[] states=_states;
  final float[] set=_set;
  length=states.length;
  hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;
  index=hash % length;
  if (states[index] == FREE) {
    return index;
  }
 else   if (states[index] == FULL && set[index] == val) {
    return -index - 1;
  }
 else {
    probe=1 + (hash % (length - 2));
    if (states[index] != REMOVED) {
      do {
        index-=probe;
        if (index < 0) {
          index+=length;
        }
      }
 while (states[index] == FULL && set[index] != val);
    }
    if (states[index] == REMOVED) {
      int firstRemoved=index;
      while (states[index] != FREE && (states[index] == REMOVED || set[index] != val)) {
        index-=probe;
        if (index < 0) {
          index+=length;
        }
      }
      return states[index] == FULL ? -index - 1 : firstRemoved;
    }
    return states[index] == FULL ? -index - 1 : index;
  }
}
