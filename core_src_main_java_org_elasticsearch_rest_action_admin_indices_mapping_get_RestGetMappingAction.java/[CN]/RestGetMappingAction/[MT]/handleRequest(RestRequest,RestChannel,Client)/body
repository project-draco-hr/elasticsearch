{
  final String[] indices=Strings.splitStringByCommaToArray(request.param("index"));
  final String[] types=request.paramAsStringArrayOrEmptyIfAll("type");
  GetMappingsRequest getMappingsRequest=new GetMappingsRequest();
  getMappingsRequest.indices(indices).types(types);
  getMappingsRequest.indicesOptions(IndicesOptions.fromRequest(request,getMappingsRequest.indicesOptions()));
  getMappingsRequest.local(request.paramAsBoolean("local",getMappingsRequest.local()));
  client.admin().indices().getMappings(getMappingsRequest,new RestBuilderListener<GetMappingsResponse>(channel){
    @Override public RestResponse buildResponse(    GetMappingsResponse response,    XContentBuilder builder) throws Exception {
      builder.startObject();
      ImmutableOpenMap<String,ImmutableOpenMap<String,MappingMetaData>> mappingsByIndex=response.getMappings();
      if (mappingsByIndex.isEmpty()) {
        if (indices.length != 0 && types.length != 0) {
          return new BytesRestResponse(OK,builder.endObject());
        }
 else         if (indices.length != 0) {
          return new BytesRestResponse(channel,new IndexNotFoundException(indices[0]));
        }
 else         if (types.length != 0) {
          return new BytesRestResponse(channel,new TypeMissingException(new Index("_all"),types[0]));
        }
 else {
          return new BytesRestResponse(OK,builder.endObject());
        }
      }
      for (      ObjectObjectCursor<String,ImmutableOpenMap<String,MappingMetaData>> indexEntry : mappingsByIndex) {
        if (indexEntry.value.isEmpty()) {
          continue;
        }
        builder.startObject(indexEntry.key,XContentBuilder.FieldCaseConversion.NONE);
        builder.startObject(Fields.MAPPINGS);
        for (        ObjectObjectCursor<String,MappingMetaData> typeEntry : indexEntry.value) {
          builder.field(typeEntry.key);
          builder.map(typeEntry.value.sourceAsMap());
        }
        builder.endObject();
        builder.endObject();
      }
      builder.endObject();
      return new BytesRestResponse(OK,builder);
    }
  }
);
}
