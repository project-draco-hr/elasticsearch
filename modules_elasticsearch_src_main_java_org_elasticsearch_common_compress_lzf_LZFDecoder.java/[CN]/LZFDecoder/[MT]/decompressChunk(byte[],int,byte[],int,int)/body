{
  do {
    int ctrl=in[inPos++] & 255;
    if (ctrl < LZFChunk.MAX_LITERAL) {
switch (ctrl) {
case 31:
        out[outPos++]=in[inPos++];
case 30:
      out[outPos++]=in[inPos++];
case 29:
    out[outPos++]=in[inPos++];
case 28:
  out[outPos++]=in[inPos++];
case 27:
out[outPos++]=in[inPos++];
case 26:
out[outPos++]=in[inPos++];
case 25:
out[outPos++]=in[inPos++];
case 24:
out[outPos++]=in[inPos++];
case 23:
out[outPos++]=in[inPos++];
case 22:
out[outPos++]=in[inPos++];
case 21:
out[outPos++]=in[inPos++];
case 20:
out[outPos++]=in[inPos++];
case 19:
out[outPos++]=in[inPos++];
case 18:
out[outPos++]=in[inPos++];
case 17:
out[outPos++]=in[inPos++];
case 16:
out[outPos++]=in[inPos++];
case 15:
out[outPos++]=in[inPos++];
case 14:
out[outPos++]=in[inPos++];
case 13:
out[outPos++]=in[inPos++];
case 12:
out[outPos++]=in[inPos++];
case 11:
out[outPos++]=in[inPos++];
case 10:
out[outPos++]=in[inPos++];
case 9:
out[outPos++]=in[inPos++];
case 8:
out[outPos++]=in[inPos++];
case 7:
out[outPos++]=in[inPos++];
case 6:
out[outPos++]=in[inPos++];
case 5:
out[outPos++]=in[inPos++];
case 4:
out[outPos++]=in[inPos++];
case 3:
out[outPos++]=in[inPos++];
case 2:
out[outPos++]=in[inPos++];
case 1:
out[outPos++]=in[inPos++];
case 0:
out[outPos++]=in[inPos++];
}
continue;
}
int len=ctrl >> 5;
ctrl=-((ctrl & 0x1f) << 8) - 1;
if (len < 7) {
ctrl-=in[inPos++] & 255;
out[outPos]=out[outPos++ + ctrl];
out[outPos]=out[outPos++ + ctrl];
switch (len) {
case 6:
out[outPos]=out[outPos++ + ctrl];
case 5:
out[outPos]=out[outPos++ + ctrl];
case 4:
out[outPos]=out[outPos++ + ctrl];
case 3:
out[outPos]=out[outPos++ + ctrl];
case 2:
out[outPos]=out[outPos++ + ctrl];
case 1:
out[outPos]=out[outPos++ + ctrl];
}
continue;
}
len=in[inPos++] & 255;
ctrl-=in[inPos++] & 255;
if ((ctrl + len) < -9) {
len+=9;
System.arraycopy(out,outPos + ctrl,out,outPos,len);
outPos+=len;
continue;
}
out[outPos]=out[outPos++ + ctrl];
out[outPos]=out[outPos++ + ctrl];
out[outPos]=out[outPos++ + ctrl];
out[outPos]=out[outPos++ + ctrl];
out[outPos]=out[outPos++ + ctrl];
out[outPos]=out[outPos++ + ctrl];
out[outPos]=out[outPos++ + ctrl];
out[outPos]=out[outPos++ + ctrl];
out[outPos]=out[outPos++ + ctrl];
len+=outPos;
final int end=len - 3;
while (outPos < end) {
out[outPos]=out[outPos++ + ctrl];
out[outPos]=out[outPos++ + ctrl];
out[outPos]=out[outPos++ + ctrl];
out[outPos]=out[outPos++ + ctrl];
}
switch (len - outPos) {
case 3:
out[outPos]=out[outPos++ + ctrl];
case 2:
out[outPos]=out[outPos++ + ctrl];
case 1:
out[outPos]=out[outPos++ + ctrl];
}
}
 while (outPos < outEnd);
if (outPos != outEnd) throw new IOException("Corrupt data: overrun in decompress, input offset " + inPos + ", output offset "+ outPos);
}
