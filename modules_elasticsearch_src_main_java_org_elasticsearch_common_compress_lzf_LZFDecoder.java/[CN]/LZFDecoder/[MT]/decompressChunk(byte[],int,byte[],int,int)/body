{
  do {
    int ctrl=in[inPos++] & 255;
    if (ctrl < LZFChunk.MAX_LITERAL) {
      ctrl+=inPos;
      do {
        out[outPos++]=in[inPos];
      }
 while (inPos++ < ctrl);
      continue;
    }
    int len=ctrl >> 5;
    ctrl=-((ctrl & 0x1f) << 8) - 1;
    if (len == 7) {
      len+=in[inPos++] & 255;
    }
    ctrl-=in[inPos++] & 255;
    len+=outPos + 2;
    out[outPos]=out[outPos++ + ctrl];
    out[outPos]=out[outPos++ + ctrl];
    final int end=len - 3;
    while (outPos < end) {
      out[outPos]=out[outPos++ + ctrl];
      out[outPos]=out[outPos++ + ctrl];
      out[outPos]=out[outPos++ + ctrl];
      out[outPos]=out[outPos++ + ctrl];
    }
    if (outPos < len) {
      out[outPos]=out[outPos++ + ctrl];
      if (outPos < len) {
        out[outPos]=out[outPos++ + ctrl];
        if (outPos < len) {
          out[outPos]=out[outPos++ + ctrl];
        }
      }
    }
  }
 while (outPos < outEnd);
  if (outPos != outEnd)   throw new IOException("Corrupt data: overrun in decompress, input offset " + inPos + ", output offset "+ outPos);
}
