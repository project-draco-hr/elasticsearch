{
  GroupTree tree1=new GroupTree();
  GroupRedBlackTree tree2=new GroupRedBlackTree(randomInt(100));
  final int elements=atLeast(100);
  for (int i=0; i < elements; ++i) {
    final double centroid=randomDouble();
    final int count=randomIntBetween(1,5);
    Group g=new Group(centroid,i);
    g.add(centroid,count - 1);
    tree1.add(g);
    tree2.addGroup(centroid,count,i);
  }
  assertEquals(tree1,tree2);
  List<Group> toRemove=Lists.newArrayList();
  for (  Group group : tree1) {
    if (randomBoolean()) {
      toRemove.add(group);
    }
  }
  Collections.shuffle(toRemove,getRandom());
  for (  Group group : toRemove) {
    tree1.remove(group);
    final boolean removed=tree2.removeGroup(group.mean(),group.id());
    assertTrue(removed);
  }
  assertEquals(tree1,tree2);
}
