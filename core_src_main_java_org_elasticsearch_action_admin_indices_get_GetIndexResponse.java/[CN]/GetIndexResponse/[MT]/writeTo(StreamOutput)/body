{
  super.writeTo(out);
  out.writeStringArray(indices);
  out.writeVInt(warmers.size());
  for (  ObjectObjectCursor<String,List<IndexWarmersMetaData.Entry>> indexEntry : warmers) {
    out.writeString(indexEntry.key);
    out.writeVInt(indexEntry.value.size());
    for (    IndexWarmersMetaData.Entry warmerEntry : indexEntry.value) {
      out.writeString(warmerEntry.name());
      out.writeStringArray(warmerEntry.types());
      out.writeOptionalBoolean(warmerEntry.requestCache());
      boolean hasSource=warmerEntry.source() != null;
      out.writeBoolean(hasSource);
      if (hasSource) {
        warmerEntry.source().writeTo(out);
      }
    }
  }
  out.writeVInt(mappings.size());
  for (  ObjectObjectCursor<String,ImmutableOpenMap<String,MappingMetaData>> indexEntry : mappings) {
    out.writeString(indexEntry.key);
    out.writeVInt(indexEntry.value.size());
    for (    ObjectObjectCursor<String,MappingMetaData> mappingEntry : indexEntry.value) {
      out.writeString(mappingEntry.key);
      mappingEntry.value.writeTo(out);
    }
  }
  out.writeVInt(aliases.size());
  for (  ObjectObjectCursor<String,List<AliasMetaData>> indexEntry : aliases) {
    out.writeString(indexEntry.key);
    out.writeVInt(indexEntry.value.size());
    for (    AliasMetaData aliasEntry : indexEntry.value) {
      aliasEntry.writeTo(out);
    }
  }
  out.writeVInt(settings.size());
  for (  ObjectObjectCursor<String,Settings> indexEntry : settings) {
    out.writeString(indexEntry.key);
    Settings.writeSettingsToStream(indexEntry.value,out);
  }
}
