{
  int id=-1;
  DiscoveryNode requestingNodeX=null;
  ClusterName clusterName=null;
  Map<String,Object> externalPingData=null;
  XContentType xContentType=null;
  try {
    boolean internal=false;
    if (data.length() > 4) {
      int counter=0;
      for (; counter < INTERNAL_HEADER.length; counter++) {
        if (data.get(counter) != INTERNAL_HEADER[counter]) {
          break;
        }
      }
      if (counter == INTERNAL_HEADER.length) {
        internal=true;
      }
    }
    if (internal) {
      StreamInput input=new BytesStreamInput(new BytesArray(data.toBytes(),INTERNAL_HEADER.length,data.length() - INTERNAL_HEADER.length));
      Version version=Version.readVersion(input);
      input.setVersion(version);
      id=input.readInt();
      clusterName=ClusterName.readClusterName(input);
      requestingNodeX=readNode(input);
    }
 else {
      xContentType=XContentFactory.xContentType(data);
      if (xContentType != null) {
        externalPingData=XContentFactory.xContent(xContentType).createParser(data).mapAndClose();
      }
 else {
        throw new IllegalStateException("failed multicast message, probably message from previous version");
      }
    }
    if (externalPingData != null) {
      handleExternalPingRequest(externalPingData,xContentType,address);
    }
 else {
      handleNodePingRequest(id,requestingNodeX,clusterName);
    }
  }
 catch (  Exception e) {
    if (!lifecycle.started() || (e instanceof EsRejectedExecutionException)) {
      logger.debug("failed to read requesting data from {}",e,address);
    }
 else {
      logger.warn("failed to read requesting data from {}",e,address);
    }
  }
}
