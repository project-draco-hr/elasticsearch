{
  while (running) {
    try {
      int id=-1;
      DiscoveryNode requestingNodeX=null;
      ClusterName clusterName=null;
      Map<String,Object> externalPingData=null;
      XContentType xContentType;
synchronized (receiveMutex) {
        try {
          multicastSocket.receive(datagramPacketReceive);
        }
 catch (        SocketTimeoutException ignore) {
          continue;
        }
catch (        Exception e) {
          if (running) {
            logger.warn("failed to receive packet",e);
          }
          continue;
        }
        try {
          xContentType=XContentFactory.xContentType(datagramPacketReceive.getData(),datagramPacketReceive.getOffset(),datagramPacketReceive.getLength());
          if (xContentType != null) {
            externalPingData=XContentFactory.xContent(xContentType).createParser(datagramPacketReceive.getData(),datagramPacketReceive.getOffset(),datagramPacketReceive.getLength()).mapAndClose();
          }
 else {
            StreamInput input=CachedStreamInput.cachedHandles(new BytesStreamInput(datagramPacketReceive.getData(),datagramPacketReceive.getOffset(),datagramPacketReceive.getLength()));
            id=input.readInt();
            clusterName=ClusterName.readClusterName(input);
            requestingNodeX=readNode(input);
          }
        }
 catch (        Exception e) {
          logger.warn("failed to read requesting data from {}",e,datagramPacketReceive.getSocketAddress());
          continue;
        }
      }
      if (externalPingData != null) {
        handleExternalPingRequest(externalPingData,xContentType,datagramPacketReceive.getSocketAddress());
      }
 else {
        handleNodePingRequest(id,requestingNodeX,clusterName);
      }
    }
 catch (    Exception e) {
      logger.warn("unexpected exception in multicast receiver",e);
    }
  }
}
