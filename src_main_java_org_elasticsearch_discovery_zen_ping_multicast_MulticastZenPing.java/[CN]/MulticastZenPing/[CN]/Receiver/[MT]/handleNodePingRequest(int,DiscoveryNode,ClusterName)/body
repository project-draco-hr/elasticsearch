{
  if (!pingEnabled || multicastChannel == null) {
    return;
  }
  final DiscoveryNodes discoveryNodes=contextProvider.nodes();
  final DiscoveryNode requestingNode=requestingNodeX;
  if (requestingNode.id().equals(discoveryNodes.localNodeId())) {
    return;
  }
  if (!requestClusterName.equals(clusterName)) {
    if (logger.isTraceEnabled()) {
      logger.trace("[{}] received ping_request from [{}], but wrong cluster_name [{}], expected [{}], ignoring",id,requestingNode,requestClusterName.value(),clusterName.value());
    }
    return;
  }
  if (!discoveryNodes.localNode().shouldConnectTo(requestingNode)) {
    if (logger.isTraceEnabled()) {
      logger.trace("[{}] received ping_request from [{}], both are client nodes, ignoring",id,requestingNode,requestClusterName);
    }
    return;
  }
  final MulticastPingResponse multicastPingResponse=new MulticastPingResponse();
  multicastPingResponse.id=id;
  multicastPingResponse.pingResponse=new PingResponse(discoveryNodes.localNode(),discoveryNodes.masterNode(),clusterName,contextProvider.nodeHasJoinedClusterOnce());
  if (logger.isTraceEnabled()) {
    logger.trace("[{}] received ping_request from [{}], sending {}",id,requestingNode,multicastPingResponse.pingResponse);
  }
  if (!transportService.nodeConnected(requestingNode)) {
    threadPool.generic().execute(new Runnable(){
      @Override public void run(){
        try {
          transportService.connectToNode(requestingNode);
          transportService.sendRequest(requestingNode,ACTION_NAME,multicastPingResponse,new EmptyTransportResponseHandler(ThreadPool.Names.SAME){
            @Override public void handleException(            TransportException exp){
              logger.warn("failed to receive confirmation on sent ping response to [{}]",exp,requestingNode);
            }
          }
);
        }
 catch (        Exception e) {
          if (lifecycle.started()) {
            logger.warn("failed to connect to requesting node {}",e,requestingNode);
          }
        }
      }
    }
);
  }
 else {
    transportService.sendRequest(requestingNode,ACTION_NAME,multicastPingResponse,new EmptyTransportResponseHandler(ThreadPool.Names.SAME){
      @Override public void handleException(      TransportException exp){
        if (lifecycle.started()) {
          logger.warn("failed to receive confirmation on sent ping response to [{}]",exp,requestingNode);
        }
      }
    }
);
  }
}
