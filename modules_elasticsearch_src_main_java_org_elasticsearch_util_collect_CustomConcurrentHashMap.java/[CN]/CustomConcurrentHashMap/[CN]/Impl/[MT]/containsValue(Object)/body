{
  if (value == null) {
    throw new NullPointerException("value");
  }
  final Segment[] segments=this.segments;
  int[] mc=new int[segments.length];
  for (int k=0; k < RETRIES_BEFORE_LOCK; ++k) {
    int mcsum=0;
    for (int i=0; i < segments.length; ++i) {
      @SuppressWarnings("UnusedDeclaration") int c=segments[i].count;
      mcsum+=mc[i]=segments[i].modCount;
      if (segments[i].containsValue(value)) {
        return true;
      }
    }
    boolean cleanSweep=true;
    if (mcsum != 0) {
      for (int i=0; i < segments.length; ++i) {
        @SuppressWarnings("UnusedDeclaration") int c=segments[i].count;
        if (mc[i] != segments[i].modCount) {
          cleanSweep=false;
          break;
        }
      }
    }
    if (cleanSweep) {
      return false;
    }
  }
  for (  Segment segment : segments) {
    segment.lock();
  }
  boolean found=false;
  try {
    for (    Segment segment : segments) {
      if (segment.containsValue(value)) {
        found=true;
        break;
      }
    }
  }
  finally {
    for (    Segment segment : segments) {
      segment.unlock();
    }
  }
  return found;
}
