{
  XContentParser.Token token=parser.nextToken();
  if (token != XContentParser.Token.FIELD_NAME) {
    throw new IllegalArgumentException("Unexpected token " + token + " inside inner hit definition. Either specify [path] or [type] object");
  }
  String fieldName=parser.currentName();
  token=parser.nextToken();
  if (token != XContentParser.Token.START_OBJECT) {
    throw new IllegalArgumentException("Inner hit definition for [" + innerHitName + " starts with a ["+ token+ "], expected a ["+ XContentParser.Token.START_OBJECT+ "].");
  }
  String nestedPath=null;
  String type=null;
switch (fieldName) {
case "path":
    nestedPath=parser.currentName();
  break;
case "type":
type=parser.currentName();
break;
default :
throw new IllegalArgumentException("Either path or type object must be defined");
}
token=parser.nextToken();
if (token != XContentParser.Token.FIELD_NAME) {
throw new IllegalArgumentException("Unexpected token " + token + " inside inner hit definition. Either specify [path] or [type] object");
}
fieldName=parser.currentName();
token=parser.nextToken();
if (token != XContentParser.Token.START_OBJECT) {
throw new IllegalArgumentException("Inner hit definition for [" + innerHitName + " starts with a ["+ token+ "], expected a ["+ XContentParser.Token.START_OBJECT+ "].");
}
final InnerHitsContext.BaseInnerHits innerHits;
if (nestedPath != null) {
innerHits=parseNested(parser,parseContext,searchContext,fieldName);
}
 else if (type != null) {
innerHits=parseParentChild(parser,parseContext,searchContext,fieldName);
}
 else {
throw new IllegalArgumentException("Either [path] or [type] must be defined");
}
token=parser.nextToken();
if (token != XContentParser.Token.END_OBJECT) {
throw new IllegalArgumentException("Expected [" + XContentParser.Token.END_OBJECT + "] token, but got a ["+ token+ "] token.");
}
token=parser.nextToken();
if (token != XContentParser.Token.END_OBJECT) {
throw new IllegalArgumentException("Expected [" + XContentParser.Token.END_OBJECT + "] token, but got a ["+ token+ "] token.");
}
return innerHits;
}
