{
  internalCluster().startNode();
  internalCluster().startNode();
  assertAcked(prepareCreate("test").setSettings(ImmutableSettings.builder().put(indexSettings()).put(ShardsLimitAllocationDecider.INDEX_TOTAL_SHARDS_PER_NODE,1)));
  List<IndexRequestBuilder> writes=new ArrayList<>();
  for (int i=0; i < 100; i++) {
    writes.add(client().prepareIndex("test","type1").setSource(jsonBuilder().startObject().field("field",i).endObject()));
  }
  indexRandom(false,writes);
  refresh();
  SearchResponse searchResponse=client().prepareSearch().setQuery(matchAllQuery()).setSize(10).setScroll(TimeValue.timeValueMinutes(1)).get();
  assertAllSuccessful(searchResponse);
  long numHits=0;
  do {
    numHits+=searchResponse.getHits().hits().length;
    searchResponse=client().prepareSearchScroll(searchResponse.getScrollId()).setScroll(TimeValue.timeValueMinutes(1)).get();
    assertAllSuccessful(searchResponse);
  }
 while (searchResponse.getHits().hits().length > 0);
  assertThat(numHits,equalTo(100l));
  clearScroll("_all");
  internalCluster().stopRandomNonMasterNode();
  searchResponse=client().prepareSearch().setQuery(matchAllQuery()).setSize(10).setScroll(TimeValue.timeValueMinutes(1)).get();
  assertThat(searchResponse.getSuccessfulShards(),lessThan(searchResponse.getTotalShards()));
  numHits=0;
  int numberOfSuccessfulShards=searchResponse.getSuccessfulShards();
  do {
    numHits+=searchResponse.getHits().hits().length;
    searchResponse=client().prepareSearchScroll(searchResponse.getScrollId()).setScroll(TimeValue.timeValueMinutes(1)).get();
    assertThat(searchResponse.getSuccessfulShards(),equalTo(numberOfSuccessfulShards));
  }
 while (searchResponse.getHits().hits().length > 0);
  assertThat(numHits,greaterThan(0l));
}
