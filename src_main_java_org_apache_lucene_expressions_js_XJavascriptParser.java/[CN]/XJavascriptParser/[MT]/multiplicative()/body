{
  XJavascriptParser.multiplicative_return retval=new XJavascriptParser.multiplicative_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token set36=null;
  ParserRuleReturnScope unary35=null;
  ParserRuleReturnScope unary37=null;
  CommonTree set36_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      pushFollow(FOLLOW_unary_in_multiplicative1049);
      unary35=unary();
      state._fsp--;
      adaptor.addChild(root_0,unary35.getTree());
      loop11:       while (true) {
        int alt11=2;
        int LA11_0=input.LA(1);
        if ((LA11_0 == AT_DIVIDE || (LA11_0 >= AT_MODULO && LA11_0 <= AT_MULTIPLY))) {
          alt11=1;
        }
switch (alt11) {
case 1:
{
            set36=input.LT(1);
            set36=input.LT(1);
            if (input.LA(1) == AT_DIVIDE || (input.LA(1) >= AT_MODULO && input.LA(1) <= AT_MULTIPLY)) {
              input.consume();
              root_0=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set36),root_0);
              state.errorRecovery=false;
            }
 else {
              MismatchedSetException mse=new MismatchedSetException(null,input);
              throw mse;
            }
            pushFollow(FOLLOW_unary_in_multiplicative1065);
            unary37=unary();
            state._fsp--;
            adaptor.addChild(root_0,unary37.getTree());
          }
        break;
default :
      break loop11;
  }
}
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
