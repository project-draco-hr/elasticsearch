{
  XJavascriptParser.bitwise_or_return retval=new XJavascriptParser.bitwise_or_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token AT_BIT_OR15=null;
  ParserRuleReturnScope bitwise_xor14=null;
  ParserRuleReturnScope bitwise_xor16=null;
  CommonTree AT_BIT_OR15_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      pushFollow(FOLLOW_bitwise_xor_in_bitwise_or837);
      bitwise_xor14=bitwise_xor();
      state._fsp--;
      adaptor.addChild(root_0,bitwise_xor14.getTree());
      loop4:       while (true) {
        int alt4=2;
        int LA4_0=input.LA(1);
        if ((LA4_0 == AT_BIT_OR)) {
          alt4=1;
        }
switch (alt4) {
case 1:
{
            AT_BIT_OR15=(Token)match(input,AT_BIT_OR,FOLLOW_AT_BIT_OR_in_bitwise_or840);
            AT_BIT_OR15_tree=(CommonTree)adaptor.create(AT_BIT_OR15);
            root_0=(CommonTree)adaptor.becomeRoot(AT_BIT_OR15_tree,root_0);
            pushFollow(FOLLOW_bitwise_xor_in_bitwise_or843);
            bitwise_xor16=bitwise_xor();
            state._fsp--;
            adaptor.addChild(root_0,bitwise_xor16.getTree());
          }
        break;
default :
      break loop4;
  }
}
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
