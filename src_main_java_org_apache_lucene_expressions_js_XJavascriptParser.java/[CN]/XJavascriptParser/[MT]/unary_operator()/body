{
  XJavascriptParser.unary_operator_return retval=new XJavascriptParser.unary_operator_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token AT_SUBTRACT43=null;
  Token AT_BIT_NOT44=null;
  Token AT_BOOL_NOT45=null;
  CommonTree AT_SUBTRACT43_tree=null;
  CommonTree AT_BIT_NOT44_tree=null;
  CommonTree AT_BOOL_NOT45_tree=null;
  RewriteRuleTokenStream stream_AT_SUBTRACT=new RewriteRuleTokenStream(adaptor,"token AT_SUBTRACT");
  try {
    int alt13=3;
switch (input.LA(1)) {
case AT_SUBTRACT:
{
        alt13=1;
      }
    break;
case AT_BIT_NOT:
{
    alt13=2;
  }
break;
case AT_BOOL_NOT:
{
alt13=3;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",13,0,input);
throw nvae;
}
switch (alt13) {
case 1:
{
AT_SUBTRACT43=(Token)match(input,AT_SUBTRACT,FOLLOW_AT_SUBTRACT_in_unary_operator1123);
stream_AT_SUBTRACT.add(AT_SUBTRACT43);
retval.tree=root_0;
RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.getTree() : null);
root_0=(CommonTree)adaptor.nil();
{
adaptor.addChild(root_0,(CommonTree)adaptor.create(AT_NEGATE,"AT_NEGATE"));
}
retval.tree=root_0;
}
break;
case 2:
{
root_0=(CommonTree)adaptor.nil();
AT_BIT_NOT44=(Token)match(input,AT_BIT_NOT,FOLLOW_AT_BIT_NOT_in_unary_operator1135);
AT_BIT_NOT44_tree=(CommonTree)adaptor.create(AT_BIT_NOT44);
adaptor.addChild(root_0,AT_BIT_NOT44_tree);
}
break;
case 3:
{
root_0=(CommonTree)adaptor.nil();
AT_BOOL_NOT45=(Token)match(input,AT_BOOL_NOT,FOLLOW_AT_BOOL_NOT_in_unary_operator1143);
AT_BOOL_NOT45_tree=(CommonTree)adaptor.create(AT_BOOL_NOT45);
adaptor.addChild(root_0,AT_BOOL_NOT45_tree);
}
break;
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
