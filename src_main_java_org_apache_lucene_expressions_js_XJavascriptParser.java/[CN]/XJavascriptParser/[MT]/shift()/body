{
  XJavascriptParser.shift_return retval=new XJavascriptParser.shift_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token set30=null;
  ParserRuleReturnScope additive29=null;
  ParserRuleReturnScope additive31=null;
  CommonTree set30_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      pushFollow(FOLLOW_additive_in_shift983);
      additive29=additive();
      state._fsp--;
      adaptor.addChild(root_0,additive29.getTree());
      loop9:       while (true) {
        int alt9=2;
        int LA9_0=input.LA(1);
        if (((LA9_0 >= AT_BIT_SHL && LA9_0 <= AT_BIT_SHU))) {
          alt9=1;
        }
switch (alt9) {
case 1:
{
            set30=input.LT(1);
            set30=input.LT(1);
            if ((input.LA(1) >= AT_BIT_SHL && input.LA(1) <= AT_BIT_SHU)) {
              input.consume();
              root_0=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set30),root_0);
              state.errorRecovery=false;
            }
 else {
              MismatchedSetException mse=new MismatchedSetException(null,input);
              throw mse;
            }
            pushFollow(FOLLOW_additive_in_shift999);
            additive31=additive();
            state._fsp--;
            adaptor.addChild(root_0,additive31.getTree());
          }
        break;
default :
      break loop9;
  }
}
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
