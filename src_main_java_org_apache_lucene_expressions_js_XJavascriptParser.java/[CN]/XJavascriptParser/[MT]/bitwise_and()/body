{
  XJavascriptParser.bitwise_and_return retval=new XJavascriptParser.bitwise_and_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token AT_BIT_AND21=null;
  ParserRuleReturnScope equality20=null;
  ParserRuleReturnScope equality22=null;
  CommonTree AT_BIT_AND21_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      pushFollow(FOLLOW_equality_in_bitwise_and888);
      equality20=equality();
      state._fsp--;
      adaptor.addChild(root_0,equality20.getTree());
      loop6:       while (true) {
        int alt6=2;
        int LA6_0=input.LA(1);
        if ((LA6_0 == AT_BIT_AND)) {
          alt6=1;
        }
switch (alt6) {
case 1:
{
            AT_BIT_AND21=(Token)match(input,AT_BIT_AND,FOLLOW_AT_BIT_AND_in_bitwise_and891);
            AT_BIT_AND21_tree=(CommonTree)adaptor.create(AT_BIT_AND21);
            root_0=(CommonTree)adaptor.becomeRoot(AT_BIT_AND21_tree,root_0);
            pushFollow(FOLLOW_equality_in_bitwise_and894);
            equality22=equality();
            state._fsp--;
            adaptor.addChild(root_0,equality22.getTree());
          }
        break;
default :
      break loop6;
  }
}
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
