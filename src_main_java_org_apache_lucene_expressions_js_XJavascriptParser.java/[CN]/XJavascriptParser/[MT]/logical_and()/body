{
  XJavascriptParser.logical_and_return retval=new XJavascriptParser.logical_and_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token AT_BOOL_AND12=null;
  ParserRuleReturnScope bitwise_or11=null;
  ParserRuleReturnScope bitwise_or13=null;
  CommonTree AT_BOOL_AND12_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      pushFollow(FOLLOW_bitwise_or_in_logical_and812);
      bitwise_or11=bitwise_or();
      state._fsp--;
      adaptor.addChild(root_0,bitwise_or11.getTree());
      loop3:       while (true) {
        int alt3=2;
        int LA3_0=input.LA(1);
        if ((LA3_0 == AT_BOOL_AND)) {
          alt3=1;
        }
switch (alt3) {
case 1:
{
            AT_BOOL_AND12=(Token)match(input,AT_BOOL_AND,FOLLOW_AT_BOOL_AND_in_logical_and815);
            AT_BOOL_AND12_tree=(CommonTree)adaptor.create(AT_BOOL_AND12);
            root_0=(CommonTree)adaptor.becomeRoot(AT_BOOL_AND12_tree,root_0);
            pushFollow(FOLLOW_bitwise_or_in_logical_and818);
            bitwise_or13=bitwise_or();
            state._fsp--;
            adaptor.addChild(root_0,bitwise_or13.getTree());
          }
        break;
default :
      break loop3;
  }
}
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
