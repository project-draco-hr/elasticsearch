{
  XJavascriptParser.additive_return retval=new XJavascriptParser.additive_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token set33=null;
  ParserRuleReturnScope multiplicative32=null;
  ParserRuleReturnScope multiplicative34=null;
  CommonTree set33_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      pushFollow(FOLLOW_multiplicative_in_additive1018);
      multiplicative32=multiplicative();
      state._fsp--;
      adaptor.addChild(root_0,multiplicative32.getTree());
      loop10:       while (true) {
        int alt10=2;
        int LA10_0=input.LA(1);
        if ((LA10_0 == AT_ADD || LA10_0 == AT_SUBTRACT)) {
          alt10=1;
        }
switch (alt10) {
case 1:
{
            set33=input.LT(1);
            set33=input.LT(1);
            if (input.LA(1) == AT_ADD || input.LA(1) == AT_SUBTRACT) {
              input.consume();
              root_0=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set33),root_0);
              state.errorRecovery=false;
            }
 else {
              MismatchedSetException mse=new MismatchedSetException(null,input);
              throw mse;
            }
            pushFollow(FOLLOW_multiplicative_in_additive1030);
            multiplicative34=multiplicative();
            state._fsp--;
            adaptor.addChild(root_0,multiplicative34.getTree());
          }
        break;
default :
      break loop10;
  }
}
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
