{
  XJavascriptParser.equality_return retval=new XJavascriptParser.equality_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token set24=null;
  ParserRuleReturnScope relational23=null;
  ParserRuleReturnScope relational25=null;
  CommonTree set24_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      pushFollow(FOLLOW_relational_in_equality913);
      relational23=relational();
      state._fsp--;
      adaptor.addChild(root_0,relational23.getTree());
      loop7:       while (true) {
        int alt7=2;
        int LA7_0=input.LA(1);
        if ((LA7_0 == AT_COMP_EQ || LA7_0 == AT_COMP_NEQ)) {
          alt7=1;
        }
switch (alt7) {
case 1:
{
            set24=input.LT(1);
            set24=input.LT(1);
            if (input.LA(1) == AT_COMP_EQ || input.LA(1) == AT_COMP_NEQ) {
              input.consume();
              root_0=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set24),root_0);
              state.errorRecovery=false;
            }
 else {
              MismatchedSetException mse=new MismatchedSetException(null,input);
              throw mse;
            }
            pushFollow(FOLLOW_relational_in_equality925);
            relational25=relational();
            state._fsp--;
            adaptor.addChild(root_0,relational25.getTree());
          }
        break;
default :
      break loop7;
  }
}
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
