{
  XJavascriptParser.unary_return retval=new XJavascriptParser.unary_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token AT_ADD39=null;
  ParserRuleReturnScope postfix38=null;
  ParserRuleReturnScope unary40=null;
  ParserRuleReturnScope unary_operator41=null;
  ParserRuleReturnScope unary42=null;
  CommonTree AT_ADD39_tree=null;
  try {
    int alt12=3;
switch (input.LA(1)) {
case AT_LPAREN:
case DECIMAL:
case HEX:
case OCTAL:
case VARIABLE:
{
        alt12=1;
      }
    break;
case AT_ADD:
{
    alt12=2;
  }
break;
case AT_BIT_NOT:
case AT_BOOL_NOT:
case AT_SUBTRACT:
{
alt12=3;
}
break;
default :
NoViableAltException nvae=new NoViableAltException("",12,0,input);
throw nvae;
}
switch (alt12) {
case 1:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_postfix_in_unary1084);
postfix38=postfix();
state._fsp--;
adaptor.addChild(root_0,postfix38.getTree());
}
break;
case 2:
{
root_0=(CommonTree)adaptor.nil();
AT_ADD39=(Token)match(input,AT_ADD,FOLLOW_AT_ADD_in_unary1092);
pushFollow(FOLLOW_unary_in_unary1095);
unary40=unary();
state._fsp--;
adaptor.addChild(root_0,unary40.getTree());
}
break;
case 3:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_unary_operator_in_unary1103);
unary_operator41=unary_operator();
state._fsp--;
root_0=(CommonTree)adaptor.becomeRoot(unary_operator41.getTree(),root_0);
pushFollow(FOLLOW_unary_in_unary1106);
unary42=unary();
state._fsp--;
adaptor.addChild(root_0,unary42.getTree());
}
break;
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
