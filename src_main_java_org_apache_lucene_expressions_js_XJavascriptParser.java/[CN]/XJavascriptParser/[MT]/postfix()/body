{
  XJavascriptParser.postfix_return retval=new XJavascriptParser.postfix_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token VARIABLE47=null;
  ParserRuleReturnScope primary46=null;
  ParserRuleReturnScope arguments48=null;
  CommonTree VARIABLE47_tree=null;
  RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
  RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
  try {
    int alt14=2;
    int LA14_0=input.LA(1);
    if ((LA14_0 == VARIABLE)) {
      int LA14_1=input.LA(2);
      if ((LA14_1 == EOF || (LA14_1 >= AT_ADD && LA14_1 <= AT_BIT_AND) || (LA14_1 >= AT_BIT_OR && LA14_1 <= AT_BOOL_AND) || LA14_1 == AT_BOOL_OR || (LA14_1 >= AT_COLON && LA14_1 <= AT_DIVIDE) || (LA14_1 >= AT_MODULO && LA14_1 <= AT_MULTIPLY) || (LA14_1 >= AT_RPAREN && LA14_1 <= AT_SUBTRACT))) {
        alt14=1;
      }
 else       if ((LA14_1 == AT_LPAREN)) {
        alt14=2;
      }
 else {
        int nvaeMark=input.mark();
        try {
          input.consume();
          NoViableAltException nvae=new NoViableAltException("",14,1,input);
          throw nvae;
        }
  finally {
          input.rewind(nvaeMark);
        }
      }
    }
 else     if ((LA14_0 == AT_LPAREN || LA14_0 == DECIMAL || LA14_0 == HEX || LA14_0 == OCTAL)) {
      alt14=1;
    }
 else {
      NoViableAltException nvae=new NoViableAltException("",14,0,input);
      throw nvae;
    }
switch (alt14) {
case 1:
{
        root_0=(CommonTree)adaptor.nil();
        pushFollow(FOLLOW_primary_in_postfix1160);
        primary46=primary();
        state._fsp--;
        adaptor.addChild(root_0,primary46.getTree());
      }
    break;
case 2:
{
    VARIABLE47=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_postfix1168);
    stream_VARIABLE.add(VARIABLE47);
    pushFollow(FOLLOW_arguments_in_postfix1170);
    arguments48=arguments();
    state._fsp--;
    stream_arguments.add(arguments48.getTree());
    retval.tree=root_0;
    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval != null ? retval.getTree() : null);
    root_0=(CommonTree)adaptor.nil();
{
{
        CommonTree root_1=(CommonTree)adaptor.nil();
        root_1=(CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AT_CALL,"AT_CALL"),root_1);
        adaptor.addChild(root_1,stream_VARIABLE.nextNode());
        if (stream_arguments.hasNext()) {
          adaptor.addChild(root_1,stream_arguments.nextTree());
        }
        stream_arguments.reset();
        adaptor.addChild(root_0,root_1);
      }
    }
    retval.tree=root_0;
  }
break;
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
