{
  XJavascriptParser.bitwise_xor_return retval=new XJavascriptParser.bitwise_xor_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token AT_BIT_XOR18=null;
  ParserRuleReturnScope bitwise_and17=null;
  ParserRuleReturnScope bitwise_and19=null;
  CommonTree AT_BIT_XOR18_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      pushFollow(FOLLOW_bitwise_and_in_bitwise_xor862);
      bitwise_and17=bitwise_and();
      state._fsp--;
      adaptor.addChild(root_0,bitwise_and17.getTree());
      loop5:       while (true) {
        int alt5=2;
        int LA5_0=input.LA(1);
        if ((LA5_0 == AT_BIT_XOR)) {
          alt5=1;
        }
switch (alt5) {
case 1:
{
            AT_BIT_XOR18=(Token)match(input,AT_BIT_XOR,FOLLOW_AT_BIT_XOR_in_bitwise_xor865);
            AT_BIT_XOR18_tree=(CommonTree)adaptor.create(AT_BIT_XOR18);
            root_0=(CommonTree)adaptor.becomeRoot(AT_BIT_XOR18_tree,root_0);
            pushFollow(FOLLOW_bitwise_and_in_bitwise_xor868);
            bitwise_and19=bitwise_and();
            state._fsp--;
            adaptor.addChild(root_0,bitwise_and19.getTree());
          }
        break;
default :
      break loop5;
  }
}
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
