{
  XJavascriptParser.logical_or_return retval=new XJavascriptParser.logical_or_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token AT_BOOL_OR9=null;
  ParserRuleReturnScope logical_and8=null;
  ParserRuleReturnScope logical_and10=null;
  CommonTree AT_BOOL_OR9_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      pushFollow(FOLLOW_logical_and_in_logical_or787);
      logical_and8=logical_and();
      state._fsp--;
      adaptor.addChild(root_0,logical_and8.getTree());
      loop2:       while (true) {
        int alt2=2;
        int LA2_0=input.LA(1);
        if ((LA2_0 == AT_BOOL_OR)) {
          alt2=1;
        }
switch (alt2) {
case 1:
{
            AT_BOOL_OR9=(Token)match(input,AT_BOOL_OR,FOLLOW_AT_BOOL_OR_in_logical_or790);
            AT_BOOL_OR9_tree=(CommonTree)adaptor.create(AT_BOOL_OR9);
            root_0=(CommonTree)adaptor.becomeRoot(AT_BOOL_OR9_tree,root_0);
            pushFollow(FOLLOW_logical_and_in_logical_or793);
            logical_and10=logical_and();
            state._fsp--;
            adaptor.addChild(root_0,logical_and10.getTree());
          }
        break;
default :
      break loop2;
  }
}
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
