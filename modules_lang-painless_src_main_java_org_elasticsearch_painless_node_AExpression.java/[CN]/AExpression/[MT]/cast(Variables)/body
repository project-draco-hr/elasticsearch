{
  final Cast cast=AnalyzerCaster.getLegalCast(location,actual,expected,explicit,internal);
  if (cast == null) {
    if (constant == null || this instanceof EConstant) {
      return this;
    }
 else {
      EConstant econstant=new EConstant(line,offset,location,constant);
      econstant.analyze(variables);
      if (!expected.equals(econstant.actual)) {
        throw new IllegalStateException(error("Illegal tree structure."));
      }
      return econstant;
    }
  }
 else {
    if (constant == null) {
      ECast ecast=new ECast(line,offset,location,this,cast);
      ecast.statement=statement;
      ecast.actual=expected;
      ecast.isNull=isNull;
      return ecast;
    }
 else {
      if (expected.sort.constant) {
        constant=AnalyzerCaster.constCast(location,constant,cast);
        EConstant econstant=new EConstant(line,offset,location,constant);
        econstant.analyze(variables);
        if (!expected.equals(econstant.actual)) {
          throw new IllegalStateException(error("Illegal tree structure."));
        }
        return econstant;
      }
 else       if (this instanceof EConstant) {
        ECast ecast=new ECast(line,offset,location,this,cast);
        ecast.actual=expected;
        return ecast;
      }
 else {
        EConstant econstant=new EConstant(line,offset,location,constant);
        econstant.analyze(variables);
        if (!actual.equals(econstant.actual)) {
          throw new IllegalStateException(error("Illegal tree structure."));
        }
        ECast ecast=new ECast(line,offset,location,econstant,cast);
        ecast.actual=expected;
        return ecast;
      }
    }
  }
}
