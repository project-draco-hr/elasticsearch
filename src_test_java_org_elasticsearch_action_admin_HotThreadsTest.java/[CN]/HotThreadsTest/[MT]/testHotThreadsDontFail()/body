{
  createIndex("test");
  final int iters=atLeast(2);
  for (int i=0; i < iters; i++) {
    final String type;
    NodesHotThreadsRequestBuilder nodesHotThreadsRequestBuilder=client().admin().cluster().prepareNodesHotThreads();
    if (randomBoolean()) {
      TimeValue timeValue=new TimeValue(rarely() ? randomIntBetween(500,5000) : randomIntBetween(20,500));
      nodesHotThreadsRequestBuilder.setInterval(timeValue);
    }
    if (randomBoolean()) {
      nodesHotThreadsRequestBuilder.setThreads(randomIntBetween(1,100));
    }
    if (randomBoolean()) {
switch (randomIntBetween(0,2)) {
case 2:
        type="cpu";
      break;
case 1:
    type="wait";
  break;
default :
type="block";
break;
}
assertThat(type,notNullValue());
nodesHotThreadsRequestBuilder.setType(type);
}
 else {
type=null;
}
final CountDownLatch latch=new CountDownLatch(1);
nodesHotThreadsRequestBuilder.execute(new ActionListener<NodesHotThreadsResponse>(){
@Override public void onResponse(NodesHotThreadsResponse nodeHotThreads){
try {
assertThat(nodeHotThreads,notNullValue());
Map<String,NodeHotThreads> nodesMap=nodeHotThreads.getNodesMap();
assertThat(nodesMap.size(),equalTo(cluster().size()));
for (NodeHotThreads ht : nodeHotThreads) {
assertNotNull(ht.getHotThreads());
}
}
  finally {
latch.countDown();
}
}
@Override public void onFailure(Throwable e){
logger.error("FAILED",e);
latch.countDown();
fail();
}
}
);
indexRandom(true,client().prepareIndex("test","type1","1").setSource("field1","value1"),client().prepareIndex("test","type1","2").setSource("field1","value2"),client().prepareIndex("test","type1","3").setSource("field1","value3"));
ensureSearchable();
if (randomBoolean()) {
optimize();
}
while (latch.getCount() > 0) {
assertHitCount(client().prepareSearch().setQuery(matchAllQuery()).setPostFilter(andFilter(queryFilter(matchAllQuery()),notFilter(andFilter(queryFilter(termQuery("field1","value1")),queryFilter(termQuery("field1","value2")))))).get(),3l);
}
latch.await();
}
}
