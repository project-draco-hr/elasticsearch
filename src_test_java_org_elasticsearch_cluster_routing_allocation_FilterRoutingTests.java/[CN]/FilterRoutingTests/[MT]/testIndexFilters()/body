{
  AllocationService strategy=createAllocationService(settingsBuilder().build());
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settingsBuilder().put("index.number_of_shards",2).put("index.number_of_replicas",1).put("index.routing.allocation.include.tag1","value1,value2").put("index.routing.allocation.exclude.tag1","value3,value4").build())).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder().metaData(metaData).routingTable(routingTable).build();
  logger.info("--> adding two nodes and performing rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1",ImmutableMap.of("tag1","value1"))).put(newNode("node2",ImmutableMap.of("tag1","value2"))).put(newNode("node3",ImmutableMap.of("tag1","value3"))).put(newNode("node4",ImmutableMap.of("tag1","value4")))).build();
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.routingNodes().shardsWithState(INITIALIZING).size(),equalTo(2));
  logger.info("--> start the shards (primaries)");
  routingTable=strategy.applyStartedShards(clusterState,clusterState.routingNodes().shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  logger.info("--> start the shards (replicas)");
  routingTable=strategy.applyStartedShards(clusterState,clusterState.routingNodes().shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  logger.info("--> make sure shards are only allocated on tag1 with value1 and value2");
  List<MutableShardRouting> startedShards=clusterState.routingNodes().shardsWithState(ShardRoutingState.STARTED);
  assertThat(startedShards.size(),equalTo(4));
  for (  MutableShardRouting startedShard : startedShards) {
    assertThat(startedShard.currentNodeId(),Matchers.anyOf(equalTo("node1"),equalTo("node2")));
  }
  logger.info("--> switch between value2 and value4, shards should be relocating");
  metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settingsBuilder().put("index.number_of_shards",2).put("index.number_of_replicas",1).put("index.routing.allocation.include.tag1","value1,value4").put("index.routing.allocation.exclude.tag1","value2,value3").build())).build();
  clusterState=ClusterState.builder(clusterState).metaData(metaData).build();
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.routingNodes().shardsWithState(ShardRoutingState.STARTED).size(),equalTo(2));
  assertThat(clusterState.routingNodes().shardsWithState(ShardRoutingState.RELOCATING).size(),equalTo(2));
  logger.info("--> finish relocation");
  routingTable=strategy.applyStartedShards(clusterState,clusterState.routingNodes().shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  startedShards=clusterState.routingNodes().shardsWithState(ShardRoutingState.STARTED);
  assertThat(startedShards.size(),equalTo(4));
  for (  MutableShardRouting startedShard : startedShards) {
    assertThat(startedShard.currentNodeId(),Matchers.anyOf(equalTo("node1"),equalTo("node4")));
  }
}
