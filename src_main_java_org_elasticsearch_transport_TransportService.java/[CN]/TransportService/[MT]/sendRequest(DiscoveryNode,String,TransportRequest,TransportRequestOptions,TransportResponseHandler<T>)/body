{
  if (node == null) {
    throw new ElasticsearchIllegalStateException("can't send request to a null node");
  }
  final long requestId=newRequestId();
  TimeoutHandler timeoutHandler=null;
  try {
    clientHandlers.put(requestId,new RequestHolder<>(handler,node,action,timeoutHandler));
    if (started.get() == false) {
      throw new TransportException("TransportService is closed stopped can't send request");
    }
    if (options.timeout() != null) {
      timeoutHandler=new TimeoutHandler(requestId);
      timeoutHandler.future=threadPool.schedule(options.timeout(),ThreadPool.Names.GENERIC,timeoutHandler);
    }
    transport.sendRequest(node,requestId,action,request,options);
  }
 catch (  final Throwable e) {
    final RequestHolder holderToNotify=clientHandlers.remove(requestId);
    if (timeoutHandler != null && timeoutHandler.future != null) {
      timeoutHandler.future.cancel(false);
    }
    if (holderToNotify != null) {
      final SendRequestTransportException sendRequestException=new SendRequestTransportException(node,action,e);
      threadPool.executor(ThreadPool.Names.GENERIC).execute(new Runnable(){
        @Override public void run(){
          holderToNotify.handler().handleException(sendRequestException);
        }
      }
);
    }
  }
}
