def parse_config():
    parser = argparse.ArgumentParser(description='Builds an elasticsearch index for backwards compatibility tests')
    required = parser.add_mutually_exclusive_group(required=True)
    required.add_argument('versions', metavar='X.Y.Z', nargs='*', default=[], help='The elasticsearch version to build an index for')
    required.add_argument('--all', action='store_true', default=False, help='Recreate all existing backwards compatibility indexes')
    parser.add_argument('--releases-dir', '-d', default='backwards', metavar='DIR', help='The directory containing elasticsearch releases')
    parser.add_argument('--output-dir', '-o', default='core/src/test/resources/indices/bwc', help='The directory to write the zipped index into')
    parser.add_argument('--tcp-port', default=DEFAULT_TRANSPORT_TCP_PORT, type=int, help='The port to use as the minimum port for TCP communication')
    parser.add_argument('--http-port', default=DEFAULT_HTTP_TCP_PORT, type=int, help='The port to use as the minimum port for HTTP communication')
    cfg = parser.parse_args()
    if (not os.path.exists(cfg.output_dir)):
        parser.error(('Output directory does not exist: %s' % cfg.output_dir))
    if (not cfg.versions):
        for bwc_index in glob.glob(os.path.join(cfg.output_dir, 'index-*.zip')):
            version = os.path.basename(bwc_index)[len('index-'):(- len('.zip'))]
            cfg.versions.append(version)
    return cfg
