{
  super(0);
  Settings.Builder clientSettingsBuilder=Settings.builder().put(additionalSettings).put("node.name",InternalTestCluster.TRANSPORT_CLIENT_PREFIX + EXTERNAL_CLUSTER_PREFIX + counter.getAndIncrement()).put("client.transport.ignore_cluster_name",true).put(Environment.PATH_HOME_SETTING.getKey(),tempDir);
  TransportClient.Builder transportClientBuilder=TransportClient.builder();
  boolean addMockTcpTransport=additionalSettings.get(NetworkModule.TRANSPORT_TYPE_KEY) == null;
  if (addMockTcpTransport) {
    clientSettingsBuilder.put(NetworkModule.TRANSPORT_TYPE_KEY,MockTcpTransportPlugin.MOCK_TCP_TRANSPORT_NAME);
    if (pluginClasses.contains(MockTcpTransportPlugin.class) == false) {
      transportClientBuilder.addPlugin(MockTcpTransportPlugin.class);
    }
  }
  Settings clientSettings=clientSettingsBuilder.build();
  transportClientBuilder.settings(clientSettings);
  for (  Class<? extends Plugin> pluginClass : pluginClasses) {
    transportClientBuilder.addPlugin(pluginClass);
  }
  TransportClient client=transportClientBuilder.build();
  try {
    client.addTransportAddresses(transportAddresses);
    NodesInfoResponse nodeInfos=client.admin().cluster().prepareNodesInfo().clear().setSettings(true).setHttp(true).get();
    httpAddresses=new InetSocketAddress[nodeInfos.getNodes().size()];
    this.clusterName=nodeInfos.getClusterName().value();
    int dataNodes=0;
    int masterAndDataNodes=0;
    for (int i=0; i < nodeInfos.getNodes().size(); i++) {
      NodeInfo nodeInfo=nodeInfos.getNodes().get(i);
      httpAddresses[i]=((InetSocketTransportAddress)nodeInfo.getHttp().address().publishAddress()).address();
      if (DiscoveryNode.isDataNode(nodeInfo.getSettings())) {
        dataNodes++;
        masterAndDataNodes++;
      }
 else       if (DiscoveryNode.isMasterNode(nodeInfo.getSettings())) {
        masterAndDataNodes++;
      }
    }
    this.numDataNodes=dataNodes;
    this.numMasterAndDataNodes=masterAndDataNodes;
    this.client=client;
    logger.info("Setup ExternalTestCluster [{}] made of [{}] nodes",nodeInfos.getClusterName().value(),size());
  }
 catch (  Exception e) {
    client.close();
    throw e;
  }
}
