{
  logger.info("Running Cluster Health");
  ClusterHealthResponse clusterHealth=client1.admin().cluster().health(clusterHealth().waitForGreenStatus()).actionGet();
  logger.info("Done Cluster Health, status " + clusterHealth.status());
  assertThat(clusterHealth.timedOut(),equalTo(false));
  assertThat(clusterHealth.status(),equalTo(ClusterHealthStatus.GREEN));
  logger.info("Indexing [type1/1]");
  IndexResponse indexResponse=client1.index(indexRequest("test").type("type1").id("1").source(source("1","test"))).actionGet();
  assertThat(indexResponse.index(),equalTo(getConcreteIndexName()));
  assertThat(indexResponse.id(),equalTo("1"));
  assertThat(indexResponse.type(),equalTo("type1"));
  logger.info("Refreshing");
  RefreshResponse refreshResponse=client1.admin().indices().refresh(refreshRequest("test")).actionGet();
  assertThat(refreshResponse.successfulShards(),equalTo(10));
  assertThat(refreshResponse.failedShards(),equalTo(0));
  logger.info("Clearing cache");
  ClearIndicesCacheResponse clearIndicesCacheResponse=client1.admin().indices().clearCache(clearIndicesCache("test")).actionGet();
  assertThat(clearIndicesCacheResponse.successfulShards(),equalTo(10));
  assertThat(clearIndicesCacheResponse.failedShards(),equalTo(0));
  logger.info("Optimizing");
  OptimizeResponse optimizeResponse=client1.admin().indices().optimize(optimizeRequest("test")).actionGet();
  assertThat(optimizeResponse.successfulShards(),equalTo(10));
  assertThat(optimizeResponse.failedShards(),equalTo(0));
  GetResponse getResult;
  logger.info("Get [type1/1]");
  for (int i=0; i < 5; i++) {
    getResult=client1.get(getRequest("test").type("type1").id("1").operationThreaded(false)).actionGet();
    assertThat(getResult.index(),equalTo(getConcreteIndexName()));
    assertThat("cycle #" + i,getResult.sourceAsString(),equalTo(source("1","test")));
    assertThat("cycle(map) #" + i,(String)((Map)getResult.sourceAsMap().get("type1")).get("name"),equalTo("test"));
    getResult=client1.get(getRequest("test").type("type1").id("1").operationThreaded(true)).actionGet();
    assertThat("cycle #" + i,getResult.sourceAsString(),equalTo(source("1","test")));
    assertThat(getResult.index(),equalTo(getConcreteIndexName()));
  }
  logger.info("Get [type1/2] (should be empty)");
  for (int i=0; i < 5; i++) {
    getResult=client1.get(getRequest("test").type("type1").id("2")).actionGet();
    assertThat(getResult.exists(),equalTo(false));
  }
  logger.info("Delete [type1/1]");
  DeleteResponse deleteResponse=client1.delete(deleteRequest("test").type("type1").id("1").replicationType(ReplicationType.ASYNC)).actionGet();
  assertThat(deleteResponse.index(),equalTo(getConcreteIndexName()));
  assertThat(deleteResponse.id(),equalTo("1"));
  assertThat(deleteResponse.type(),equalTo("type1"));
  logger.info("Refreshing");
  client1.admin().indices().refresh(refreshRequest("test")).actionGet();
  logger.info("Get [type1/1] (should be empty)");
  for (int i=0; i < 5; i++) {
    getResult=client1.get(getRequest("test").type("type1").id("1")).actionGet();
    assertThat(getResult.exists(),equalTo(false));
  }
  logger.info("Index [type1/1]");
  client1.index(indexRequest("test").type("type1").id("1").source(source("1","test"))).actionGet();
  logger.info("Index [type1/2]");
  client1.index(indexRequest("test").type("type1").id("2").source(source("2","test2"))).actionGet();
  logger.info("Flushing");
  FlushResponse flushResult=client1.admin().indices().flush(flushRequest("test")).actionGet();
  assertThat(flushResult.successfulShards(),equalTo(10));
  assertThat(flushResult.failedShards(),equalTo(0));
  logger.info("Refreshing");
  client1.admin().indices().refresh(refreshRequest("test")).actionGet();
  logger.info("Get [type1/1] and [type1/2]");
  for (int i=0; i < 5; i++) {
    getResult=client1.get(getRequest("test").type("type1").id("1")).actionGet();
    assertThat(getResult.index(),equalTo(getConcreteIndexName()));
    assertThat("cycle #" + i,getResult.sourceAsString(),equalTo(source("1","test")));
    getResult=client1.get(getRequest("test").type("type1").id("2")).actionGet();
    assertThat("cycle #" + i,getResult.sourceAsString(),equalTo(source("2","test2")));
    assertThat(getResult.index(),equalTo(getConcreteIndexName()));
  }
  logger.info("Count");
  for (int i=0; i < 5; i++) {
    CountResponse countResponse=client1.count(countRequest("test").query(termQuery("_type","type1")).operationThreading(BroadcastOperationThreading.NO_THREADS)).actionGet();
    assertThat(countResponse.count(),equalTo(2l));
    assertThat(countResponse.successfulShards(),equalTo(5));
    assertThat(countResponse.failedShards(),equalTo(0));
    countResponse=client1.count(countRequest("test").query(termQuery("_type","type1")).operationThreading(BroadcastOperationThreading.SINGLE_THREAD)).actionGet();
    assertThat(countResponse.count(),equalTo(2l));
    assertThat(countResponse.successfulShards(),equalTo(5));
    assertThat(countResponse.failedShards(),equalTo(0));
    countResponse=client1.count(countRequest("test").query(termQuery("_type","type1")).operationThreading(BroadcastOperationThreading.THREAD_PER_SHARD)).actionGet();
    assertThat(countResponse.count(),equalTo(2l));
    assertThat(countResponse.successfulShards(),equalTo(5));
    assertThat(countResponse.failedShards(),equalTo(0));
    countResponse=client1.count(countRequest("test").query(Unicode.fromStringAsBytes("{ term : { _type : \"type1 } }"))).actionGet();
    assertThat(countResponse.count(),equalTo(0l));
    assertThat(countResponse.successfulShards(),equalTo(0));
    assertThat(countResponse.failedShards(),equalTo(5));
  }
  logger.info("Delete by query");
  DeleteByQueryResponse queryResponse=client2.deleteByQuery(deleteByQueryRequest("test").query(termQuery("name","test2"))).actionGet();
  assertThat(queryResponse.index(getConcreteIndexName()).successfulShards(),equalTo(5));
  assertThat(queryResponse.index(getConcreteIndexName()).failedShards(),equalTo(0));
  client1.admin().indices().refresh(refreshRequest("test")).actionGet();
  logger.info("Get [type1/1] and [type1/2], should be empty");
  for (int i=0; i < 5; i++) {
    getResult=client1.get(getRequest("test").type("type1").id("1")).actionGet();
    assertThat(getResult.index(),equalTo(getConcreteIndexName()));
    assertThat("cycle #" + i,getResult.sourceAsString(),equalTo(source("1","test")));
    getResult=client1.get(getRequest("test").type("type1").id("2")).actionGet();
    assertThat("cycle #" + i,getResult.exists(),equalTo(false));
    assertThat(getResult.index(),equalTo(getConcreteIndexName()));
  }
}
