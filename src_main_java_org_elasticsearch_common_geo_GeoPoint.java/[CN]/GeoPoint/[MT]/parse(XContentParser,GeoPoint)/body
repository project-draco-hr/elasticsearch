{
  if (parser.currentToken() == Token.START_OBJECT) {
    while (parser.nextToken() != Token.END_OBJECT) {
      if (parser.currentToken() == Token.FIELD_NAME) {
        String field=parser.text();
        if (LATITUDE.equals(field)) {
          if (parser.nextToken() == Token.VALUE_NUMBER) {
            point.resetLat(parser.doubleValue());
          }
 else {
            throw new ElasticSearchParseException("latitude must be a number");
          }
        }
 else         if (LONGITUDE.equals(field)) {
          if (parser.nextToken() == Token.VALUE_NUMBER) {
            point.resetLon(parser.doubleValue());
          }
 else {
            throw new ElasticSearchParseException("latitude must be a number");
          }
        }
 else         if (GEOHASH.equals(field)) {
          if (parser.nextToken() == Token.VALUE_STRING) {
            point.resetFromGeoHash(parser.text());
          }
 else {
            throw new ElasticSearchParseException("geohash must be a string");
          }
        }
 else {
          throw new ElasticSearchParseException("field must be either '" + LATITUDE + "', '"+ LONGITUDE+ "' or '"+ GEOHASH+ "'");
        }
      }
 else {
        throw new ElasticSearchParseException("Token '" + parser.currentToken() + "' not allowed");
      }
    }
    return point;
  }
 else   if (parser.currentToken() == Token.START_ARRAY) {
    int element=0;
    while (parser.nextToken() != Token.END_ARRAY) {
      if (parser.currentToken() == Token.VALUE_NUMBER) {
        element++;
        if (element == 1) {
          point.resetLon(parser.doubleValue());
        }
 else         if (element == 2) {
          point.resetLat(parser.doubleValue());
        }
 else {
          throw new ElasticSearchParseException("only two values allowed");
        }
      }
 else {
        throw new ElasticSearchParseException("Numeric value expected");
      }
    }
    return point;
  }
 else   if (parser.currentToken() == Token.VALUE_STRING) {
    String data=parser.text();
    int comma=data.indexOf(',');
    if (comma > 0) {
      double lat=Double.parseDouble(data.substring(0,comma).trim());
      double lon=Double.parseDouble(data.substring(comma + 1).trim());
      return point.reset(lat,lon);
    }
 else {
      point.resetFromGeoHash(data);
      return point;
    }
  }
 else {
    throw new ElasticSearchParseException("geo_point expected");
  }
}
