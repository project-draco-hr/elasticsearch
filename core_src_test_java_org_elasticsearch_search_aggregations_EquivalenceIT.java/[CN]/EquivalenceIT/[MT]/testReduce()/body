{
  createIndex("idx");
  final int value=randomIntBetween(0,10);
  indexRandom(true,client().prepareIndex("idx","type").setSource("f",value));
  ensureYellow("idx");
  SearchResponse response=client().prepareSearch("idx").addAggregation(filter("filter",QueryBuilders.matchAllQuery()).subAggregation(range("range").field("f").addUnboundedTo(6).addUnboundedFrom(6).subAggregation(sum("sum").field("f")))).execute().actionGet();
  assertSearchResponse(response);
  Filter filter=response.getAggregations().get("filter");
  assertNotNull(filter);
  assertEquals(1,filter.getDocCount());
  Range range=filter.getAggregations().get("range");
  assertThat(range,notNullValue());
  assertThat(range.getName(),equalTo("range"));
  List<? extends Bucket> buckets=range.getBuckets();
  assertThat(buckets.size(),equalTo(2));
  Range.Bucket bucket=buckets.get(0);
  assertThat(bucket,notNullValue());
  assertThat((String)bucket.getKey(),equalTo("*-6.0"));
  assertThat(((Number)bucket.getFrom()).doubleValue(),equalTo(Double.NEGATIVE_INFINITY));
  assertThat(((Number)bucket.getTo()).doubleValue(),equalTo(6.0));
  assertThat(bucket.getDocCount(),equalTo(value < 6 ? 1L : 0L));
  Sum sum=bucket.getAggregations().get("sum");
  assertEquals(value < 6 ? value : 0,sum.getValue(),0d);
  bucket=buckets.get(1);
  assertThat(bucket,notNullValue());
  assertThat((String)bucket.getKey(),equalTo("6.0-*"));
  assertThat(((Number)bucket.getFrom()).doubleValue(),equalTo(6.0));
  assertThat(((Number)bucket.getTo()).doubleValue(),equalTo(Double.POSITIVE_INFINITY));
  assertThat(bucket.getDocCount(),equalTo(value >= 6 ? 1L : 0L));
  sum=bucket.getAggregations().get("sum");
  assertEquals(value >= 6 ? value : 0,sum.getValue(),0d);
}
