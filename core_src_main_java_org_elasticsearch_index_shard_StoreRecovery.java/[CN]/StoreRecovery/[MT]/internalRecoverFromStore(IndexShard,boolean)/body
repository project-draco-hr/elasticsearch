{
  final RecoveryState recoveryState=indexShard.recoveryState();
  indexShard.prepareForIndexRecovery();
  long version=-1;
  SegmentInfos si=null;
  final Store store=indexShard.store();
  store.incRef();
  try {
    try {
      store.failIfCorrupted();
      try {
        si=store.readLastCommittedSegmentsInfo();
      }
 catch (      Throwable e) {
        String files="_unknown_";
        try {
          files=Arrays.toString(store.directory().listAll());
        }
 catch (        Throwable e1) {
          files+=" (failure=" + ExceptionsHelper.detailedMessage(e1) + ")";
        }
        if (indexShouldExists) {
          throw new IndexShardRecoveryException(shardId,"shard allocated for local recovery (post api), should exist, but doesn't, current files: " + files,e);
        }
      }
      if (si != null) {
        if (indexShouldExists) {
          version=si.getVersion();
        }
 else {
          logger.trace("cleaning existing shard, shouldn't exists");
          Lucene.cleanLuceneIndex(store.directory());
        }
      }
    }
 catch (    Throwable e) {
      throw new IndexShardRecoveryException(shardId,"failed to fetch index version after copying it over",e);
    }
    recoveryState.getIndex().updateVersion(version);
    try {
      final RecoveryState.Index index=recoveryState.getIndex();
      if (si != null && recoveryState.getType() == RecoveryState.Type.STORE) {
        addRecoveredFileDetails(si,store,index);
      }
    }
 catch (    IOException e) {
      logger.debug("failed to list file details",e);
    }
    if (recoveryState.getType() == RecoveryState.Type.LOCAL_SHARDS) {
      assert indexShouldExists;
      indexShard.skipTranslogRecovery();
    }
 else {
      indexShard.performTranslogRecovery(indexShouldExists);
    }
    indexShard.finalizeRecovery();
    indexShard.postRecovery("post recovery from shard_store");
  }
 catch (  EngineException|IOException e) {
    throw new IndexShardRecoveryException(shardId,"failed to recovery from gateway",e);
  }
 finally {
    store.decRef();
  }
}
