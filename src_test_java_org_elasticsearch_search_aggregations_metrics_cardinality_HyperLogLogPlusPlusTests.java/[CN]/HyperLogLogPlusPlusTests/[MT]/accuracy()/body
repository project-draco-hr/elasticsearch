{
  final long bucket=randomInt(20);
  final int numValues=randomIntBetween(1,100000);
  final int maxValue=randomIntBetween(1,randomBoolean() ? 1000 : 100000);
  final int p=randomIntBetween(14,MAX_PRECISION);
  IntOpenHashSet set=new IntOpenHashSet();
  HyperLogLogPlusPlus e=new HyperLogLogPlusPlus(p,BigArrays.NON_RECYCLING_INSTANCE,1);
  for (int i=0; i < numValues; ++i) {
    final int n=randomInt(maxValue);
    set.add(n);
    final long hash=MurmurHash3.hash((long)n);
    e.collect(bucket,hash);
    if (randomInt(100) == 0) {
      assertThat((double)e.cardinality(bucket),closeTo(set.size(),0.1 * set.size()));
    }
  }
  assertThat((double)e.cardinality(bucket),closeTo(set.size(),0.1 * set.size()));
}
