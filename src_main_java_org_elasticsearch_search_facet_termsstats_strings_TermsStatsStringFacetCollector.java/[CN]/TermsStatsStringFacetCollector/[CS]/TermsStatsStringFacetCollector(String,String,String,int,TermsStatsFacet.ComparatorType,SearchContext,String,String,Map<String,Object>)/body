{
  super(facetName);
  this.fieldDataCache=context.fieldDataCache();
  this.size=size;
  this.comparatorType=comparatorType;
  this.numberOfShards=context.numberOfShards();
  MapperService.SmartNameFieldMappers smartMappers=context.smartFieldMappers(keyFieldName);
  if (smartMappers == null || !smartMappers.hasMapper()) {
    this.keyFieldName=keyFieldName;
    this.keyFieldDataType=FieldDataType.DefaultTypes.STRING;
  }
 else {
    if (smartMappers.explicitTypeInNameWithDocMapper()) {
      setFilter(context.filterCache().cache(smartMappers.docMapper().typeFilter()));
    }
    this.keyFieldName=smartMappers.mapper().names().indexName();
    this.keyFieldDataType=smartMappers.mapper().fieldDataType();
  }
  if (script == null) {
    smartMappers=context.smartFieldMappers(valueFieldName);
    if (smartMappers == null || !smartMappers.hasMapper()) {
      throw new ElasticSearchIllegalArgumentException("failed to find mappings for [" + valueFieldName + "]");
    }
    this.valueFieldName=smartMappers.mapper().names().indexName();
    this.valueFieldDataType=smartMappers.mapper().fieldDataType();
    this.script=null;
    this.aggregator=new Aggregator();
  }
 else {
    this.valueFieldName=null;
    this.valueFieldDataType=null;
    this.script=context.scriptService().search(context.lookup(),scriptLang,script,params);
    this.aggregator=new ScriptAggregator(this.script);
  }
}
