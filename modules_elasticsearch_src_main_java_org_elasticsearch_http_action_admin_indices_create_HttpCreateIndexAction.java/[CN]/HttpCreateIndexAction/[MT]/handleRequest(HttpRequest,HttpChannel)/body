{
  String bodySettings=request.contentAsString();
  Settings indexSettings=ImmutableSettings.Builder.EMPTY_SETTINGS;
  if (Strings.hasText(bodySettings)) {
    try {
      indexSettings=ImmutableSettings.settingsBuilder().loadFromSource(bodySettings).build();
    }
 catch (    Exception e) {
      try {
        channel.sendResponse(new JsonThrowableHttpResponse(request,BAD_REQUEST,new SettingsException("Failed to parse index settings",e)));
      }
 catch (      IOException e1) {
        logger.warn("Failed to send response",e1);
        return;
      }
    }
  }
  CreateIndexRequest createIndexRequest=new CreateIndexRequest(request.param("index"),indexSettings);
  createIndexRequest.timeout(TimeValue.parseTimeValue(request.param("timeout"),timeValueSeconds(10)));
  client.admin().indices().execCreate(createIndexRequest,new ActionListener<CreateIndexResponse>(){
    @Override public void onResponse(    CreateIndexResponse result){
      try {
        JsonBuilder builder=HttpJsonBuilder.cached(request);
        builder.startObject().field("ok",true).endObject();
        channel.sendResponse(new JsonHttpResponse(request,OK,builder));
      }
 catch (      Exception e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        Throwable t=unwrapCause(e);
        if (t instanceof IndexAlreadyExistsException || t instanceof InvalidIndexNameException) {
          channel.sendResponse(new JsonHttpResponse(request,BAD_REQUEST,JsonBuilder.jsonBuilder().startObject().field("error",t.getMessage()).endObject()));
        }
 else {
          channel.sendResponse(new JsonThrowableHttpResponse(request,e));
        }
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
