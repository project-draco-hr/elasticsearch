{
  InternalTestCluster.Async<String> masterFuture=internalCluster().startNodeAsync(Settings.builder().put(Node.NODE_MASTER_SETTING.getKey(),true,Node.NODE_DATA_SETTING.getKey(),false).build());
  InternalTestCluster.Async<List<String>> nodesFutures=internalCluster().startNodesAsync(4,Settings.builder().put(Node.NODE_MASTER_SETTING.getKey(),false,Node.NODE_DATA_SETTING.getKey(),true).build());
  final String masterNode=masterFuture.get();
  final String node1=nodesFutures.get().get(0);
  final String node2=nodesFutures.get().get(1);
  final String node3=nodesFutures.get().get(2);
  final String node4=nodesFutures.get().get(3);
  assertAcked(prepareCreate("test").setSettings(Settings.builder().put(indexSettings()).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,3).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,1).put(IndexMetaData.INDEX_ROUTING_EXCLUDE_GROUP_SETTING.getKey() + "_name",node4)));
  assertFalse(client().admin().cluster().prepareHealth().setWaitForNoRelocatingShards(true).setWaitForGreenStatus().setWaitForNodes("5").get().isTimedOut());
  assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().put(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE_SETTING.getKey(),"none")));
  logger.debug("--> shutting down two random nodes");
  internalCluster().stopRandomNode(InternalTestCluster.nameFilter(node1,node2,node3));
  internalCluster().stopRandomNode(InternalTestCluster.nameFilter(node1,node2,node3));
  logger.debug("--> verifying index is red");
  ClusterHealthResponse health=client().admin().cluster().prepareHealth().setWaitForNodes("3").get();
  if (health.getStatus() != ClusterHealthStatus.RED) {
    logClusterState();
    fail("cluster didn't become red, despite of shutting 2 of 3 nodes");
  }
  logger.debug("--> allowing index to be assigned to node [{}]",node4);
  assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put(IndexMetaData.INDEX_ROUTING_EXCLUDE_GROUP_SETTING.getKey() + "_name","NONE")));
  assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().put(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE_SETTING.getKey(),"all")));
  logger.debug("--> waiting for shards to recover on [{}]",node4);
  Index index=resolveIndex("test");
  assertBusy(new Runnable(){
    @Override public void run(){
      assertTrue(internalCluster().getInstance(IndicesService.class,node4).hasIndex(index));
    }
  }
);
  assertFalse(client().admin().cluster().prepareHealth().setWaitForActiveShards(4).get().isTimedOut());
  assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().put(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE_SETTING.getKey(),"none")));
  logger.debug("--> starting the two old nodes back");
  internalCluster().startNodesAsync(2,Settings.builder().put(Node.NODE_MASTER_SETTING.getKey(),false,Node.NODE_DATA_SETTING.getKey(),true).build());
  assertFalse(client().admin().cluster().prepareHealth().setWaitForNodes("5").get().isTimedOut());
  assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().put(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE_SETTING.getKey(),"all")));
  logger.debug("--> waiting for the lost shard to be recovered");
  ensureGreen("test");
}
