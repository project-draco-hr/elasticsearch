{
  final String term;
  final String field;
  if (documentMapper.parentFieldMapper().active()) {
    field=ParentFieldMapper.NAME;
    term=Uid.createUid(hitContext.hit().type(),hitContext.hit().id());
  }
 else {
    field=UidFieldMapper.NAME;
    SearchHitField parentField=hitContext.hit().field(ParentFieldMapper.NAME);
    if (parentField != null) {
      term=parentField.getValue();
    }
 else {
      SingleFieldsVisitor fieldsVisitor=new SingleFieldsVisitor(ParentFieldMapper.NAME);
      hitContext.reader().document(hitContext.docId(),fieldsVisitor);
      if (fieldsVisitor.fields().isEmpty()) {
        return Lucene.EMPTY_TOP_DOCS;
      }
      term=(String)fieldsVisitor.fields().get(ParentFieldMapper.NAME).get(0);
    }
  }
  Filter filter=new QueryWrapperFilter(new TermQuery(new Term(field,term)));
  Query typeFilter=documentMapper.typeFilter();
  BooleanQuery filteredQuery=new BooleanQuery();
  filteredQuery.add(query,Occur.MUST);
  filteredQuery.add(filter,Occur.FILTER);
  filteredQuery.add(typeFilter,Occur.FILTER);
  if (size() == 0) {
    final int count=context.searcher().count(filteredQuery);
    return new TopDocs(count,Lucene.EMPTY_SCORE_DOCS,0);
  }
 else {
    int topN=from() + size();
    TopDocsCollector topDocsCollector;
    if (sort() != null) {
      topDocsCollector=TopFieldCollector.create(sort(),topN,true,trackScores(),trackScores());
    }
 else {
      topDocsCollector=TopScoreDocCollector.create(topN);
    }
    context.searcher().search(filteredQuery,topDocsCollector);
    return topDocsCollector.topDocs(from(),size());
  }
}
