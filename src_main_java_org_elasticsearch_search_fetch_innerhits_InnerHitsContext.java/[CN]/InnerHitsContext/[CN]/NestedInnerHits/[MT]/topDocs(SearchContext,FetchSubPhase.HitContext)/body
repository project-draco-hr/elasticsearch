{
  Filter rawParentFilter;
  if (parentObjectMapper == null) {
    rawParentFilter=NonNestedDocsFilter.INSTANCE;
  }
 else {
    rawParentFilter=parentObjectMapper.nestedTypeFilter();
  }
  BitDocIdSetFilter parentFilter=context.bitsetFilterCache().getBitDocIdSetFilter(rawParentFilter);
  Filter childFilter=context.filterCache().cache(childObjectMapper.nestedTypeFilter(),null,context.queryParserService().autoFilterCachePolicy());
  Query q=new FilteredQuery(query,new NestedChildrenFilter(parentFilter,childFilter,hitContext));
  if (size() == 0) {
    return new TopDocs(context.searcher().count(q),Lucene.EMPTY_SCORE_DOCS,0);
  }
 else {
    int topN=from() + size();
    TopDocsCollector topDocsCollector;
    if (sort() != null) {
      try {
        topDocsCollector=TopFieldCollector.create(sort(),topN,true,trackScores(),trackScores());
      }
 catch (      IOException e) {
        throw ExceptionsHelper.convertToElastic(e);
      }
    }
 else {
      topDocsCollector=TopScoreDocCollector.create(topN);
    }
    context.searcher().search(q,topDocsCollector);
    return topDocsCollector.topDocs(from(),size());
  }
}
