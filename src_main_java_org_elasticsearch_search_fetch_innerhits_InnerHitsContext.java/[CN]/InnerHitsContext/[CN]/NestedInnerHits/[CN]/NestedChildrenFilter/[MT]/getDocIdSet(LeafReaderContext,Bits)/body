{
  if (!context.reader().getCoreCacheKey().equals(this.atomicReader.getCoreCacheKey())) {
    return null;
  }
  if (docId == 0) {
    return null;
  }
  final BitSet parents=parentFilter.getDocIdSet(context).bits();
  final int firstChildDocId=parents.prevSetBit(docId - 1) + 1;
  if (firstChildDocId == docId) {
    return null;
  }
  final DocIdSet children=childFilter.getDocIdSet(context,acceptDocs);
  if (children == null) {
    return null;
  }
  final DocIdSetIterator childrenIterator=children.iterator();
  if (childrenIterator == null) {
    return null;
  }
  return new DocIdSet(){
    @Override public long ramBytesUsed(){
      return parents.ramBytesUsed() + children.ramBytesUsed();
    }
    @Override public DocIdSetIterator iterator() throws IOException {
      return new DocIdSetIterator(){
        int currentDocId=-1;
        @Override public int docID(){
          return currentDocId;
        }
        @Override public int nextDoc() throws IOException {
          return advance(currentDocId + 1);
        }
        @Override public int advance(        int target) throws IOException {
          target=Math.max(firstChildDocId,target);
          if (target >= docId) {
            return currentDocId=NO_MORE_DOCS;
          }
 else {
            int advanced=childrenIterator.advance(target);
            if (advanced >= docId) {
              return currentDocId=NO_MORE_DOCS;
            }
 else {
              return currentDocId=advanced;
            }
          }
        }
        @Override public long cost(){
          return childrenIterator.cost();
        }
      }
;
    }
  }
;
}
