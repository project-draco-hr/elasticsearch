{
  ClusterState clusterState=createOnePrimaryOneReplicaClusterState(allocation);
  Set<String> inSyncSet=clusterState.metaData().index("test").inSyncAllocationIds(0);
  assertThat(inSyncSet.size(),equalTo(2));
  IndexShardRoutingTable shardRoutingTable=clusterState.routingTable().index("test").shard(0);
  ShardRouting primaryShard=shardRoutingTable.primaryShard();
  ShardRouting replicaShard=shardRoutingTable.replicaShards().get(0);
  logger.info("remove a node");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove(replicaShard.currentNodeId())).build();
  clusterState=allocation.deassociateDeadNodes(clusterState,true,"reroute");
  assertEquals(inSyncSet,clusterState.metaData().index("test").inSyncAllocationIds(0));
  for (int i=0; i < 5; i++) {
    logger.info("add back node");
    clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode(replicaShard.currentNodeId()))).build();
    clusterState=allocation.reroute(clusterState,"reroute");
    logger.info("start replica shards");
    clusterState=allocation.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING));
    logger.info("remove the node");
    clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove(replicaShard.currentNodeId())).build();
    clusterState=allocation.deassociateDeadNodes(clusterState,true,"reroute");
  }
  Set<String> newInSyncSet=clusterState.metaData().index("test").inSyncAllocationIds(0);
  assertThat(newInSyncSet.size(),equalTo(2));
  assertFalse(Sets.haveEmptyIntersection(inSyncSet,newInSyncSet));
  assertThat(newInSyncSet,hasItem(primaryShard.allocationId().getId()));
}
