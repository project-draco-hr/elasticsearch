{
  RAMDirectory dir=new RAMDirectory();
  Map<String,Analyzer> mapping=new HashMap<String,Analyzer>();
  mapping.put("body_ngram",new Analyzer(){
    @Override protected TokenStreamComponents createComponents(    String fieldName,    Reader reader){
      Tokenizer t=new StandardTokenizer(Version.LUCENE_41,reader);
      ShingleFilter tf=new ShingleFilter(t,2,3);
      tf.setOutputUnigrams(false);
      return new TokenStreamComponents(t,new LowerCaseFilter(Version.LUCENE_41,tf));
    }
  }
);
  mapping.put("body",new Analyzer(){
    @Override protected TokenStreamComponents createComponents(    String fieldName,    Reader reader){
      Tokenizer t=new StandardTokenizer(Version.LUCENE_41,reader);
      return new TokenStreamComponents(t,new LowerCaseFilter(Version.LUCENE_41,t));
    }
  }
);
  PerFieldAnalyzerWrapper wrapper=new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(Version.LUCENE_41),mapping);
  IndexWriterConfig conf=new IndexWriterConfig(Version.LUCENE_41,wrapper);
  IndexWriter writer=new IndexWriter(dir,conf);
  BufferedReader reader=new BufferedReader(new InputStreamReader(NoisyChannelSpellCheckerTests.class.getResourceAsStream("/config/names.txt")));
  String line=null;
  while ((line=reader.readLine()) != null) {
    Document doc=new Document();
    doc.add(new Field("body",line,TextField.TYPE_NOT_STORED));
    doc.add(new Field("body_ngram",line,TextField.TYPE_NOT_STORED));
    writer.addDocument(doc);
  }
  DirectoryReader ir=DirectoryReader.open(writer,false);
  WordScorer wordScorer=new LinearInterpoatingScorer(ir,"body_ngram",0.85d,new BytesRef(" "),0.5,0.4,0.1);
  NoisyChannelSpellChecker suggester=new NoisyChannelSpellChecker();
  DirectSpellChecker spellchecker=new DirectSpellChecker();
  spellchecker.setMinQueryLength(1);
  DirectCandidateGenerator generator=new DirectCandidateGenerator(spellchecker,"body",SuggestMode.SUGGEST_MORE_POPULAR,ir,0.95,5);
  Correction[] corrections=suggester.getCorrections(wrapper,new BytesRef("american ame"),generator,1,1,ir,"body",wordScorer,1,3);
  assertThat(corrections.length,equalTo(1));
  assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(),equalTo("american ace"));
  corrections=suggester.getCorrections(wrapper,new BytesRef("american ame"),generator,1,1,ir,"body",wordScorer,1,1);
  assertThat(corrections.length,equalTo(0));
  wordScorer=new LinearInterpoatingScorer(ir,"body_ngram",0.85d,new BytesRef(" "),0.5,0.4,0.1);
  corrections=suggester.getCorrections(wrapper,new BytesRef("Xor the Got-Jewel"),generator,0.5f,4,ir,"body",wordScorer,0,3);
  assertThat(corrections.length,equalTo(4));
  assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(),equalTo("xorr the god jewel"));
  assertThat(corrections[1].join(new BytesRef(" ")).utf8ToString(),equalTo("xor the god jewel"));
  assertThat(corrections[2].join(new BytesRef(" ")).utf8ToString(),equalTo("xorn the god jewel"));
  assertThat(corrections[3].join(new BytesRef(" ")).utf8ToString(),equalTo("xorr the got jewel"));
  corrections=suggester.getCorrections(wrapper,new BytesRef("Xor the Got-Jewel"),generator,0.5f,4,ir,"body",wordScorer,1,3);
  assertThat(corrections.length,equalTo(4));
  assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(),equalTo("xorr the god jewel"));
  assertThat(corrections[1].join(new BytesRef(" ")).utf8ToString(),equalTo("xor the god jewel"));
  assertThat(corrections[2].join(new BytesRef(" ")).utf8ToString(),equalTo("xorn the god jewel"));
  assertThat(corrections[3].join(new BytesRef(" ")).utf8ToString(),equalTo("xorr the got jewel"));
  corrections=suggester.getCorrections(wrapper,new BytesRef("Xor the Got-Jewel"),generator,0.5f,1,ir,"body",wordScorer,100,3);
  assertThat(corrections.length,equalTo(1));
  assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(),equalTo("xorr the god jewel"));
  Analyzer analyzer=new Analyzer(){
    @Override protected TokenStreamComponents createComponents(    String fieldName,    Reader reader){
      Tokenizer t=new StandardTokenizer(Version.LUCENE_41,reader);
      TokenFilter filter=new LowerCaseFilter(Version.LUCENE_41,t);
      try {
        SolrSynonymParser parser=new SolrSynonymParser(true,false,new WhitespaceAnalyzer(Version.LUCENE_41));
        ((SolrSynonymParser)parser).add(new StringReader("usa => usa, america, american\nursa => usa, america, american"));
        filter=new SynonymFilter(filter,parser.build(),true);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
      return new TokenStreamComponents(t,filter);
    }
  }
;
  spellchecker.setAccuracy(0.0f);
  spellchecker.setMinPrefix(1);
  spellchecker.setMinQueryLength(1);
  suggester=new NoisyChannelSpellChecker(0.95);
  wordScorer=new LinearInterpoatingScorer(ir,"body_ngram",0.95d,new BytesRef(" "),0.5,0.4,0.1);
  corrections=suggester.getCorrections(analyzer,new BytesRef("captian usa"),generator,2,4,ir,"body",wordScorer,1,3);
  assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(),equalTo("captain america"));
  generator=new DirectCandidateGenerator(spellchecker,"body",SuggestMode.SUGGEST_MORE_POPULAR,ir,0.95,10,null,analyzer);
  corrections=suggester.getCorrections(analyzer,new BytesRef("captian usw"),generator,2,4,ir,"body",wordScorer,1,3);
  assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(),equalTo("captain america"));
  wordScorer=new StupidBackoffScorer(ir,"body_ngram",0.85d,new BytesRef(" "),0.4);
  corrections=suggester.getCorrections(wrapper,new BytesRef("Xor the Got-Jewel"),generator,0.5f,2,ir,"body",wordScorer,0,3);
  assertThat(corrections.length,equalTo(2));
  assertThat(corrections[0].join(new BytesRef(" ")).utf8ToString(),equalTo("xorr the god jewel"));
  assertThat(corrections[1].join(new BytesRef(" ")).utf8ToString(),equalTo("xor the god jewel"));
}
