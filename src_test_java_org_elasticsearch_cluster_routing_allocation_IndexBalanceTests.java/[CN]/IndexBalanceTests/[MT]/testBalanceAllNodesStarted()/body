{
  AllocationService strategy=new AllocationService(settingsBuilder().put("cluster.routing.allocation.node_concurrent_recoveries",10).put("cluster.routing.allocation.node_initial_primaries_recoveries",10).put("cluster.routing.allocation.allow_rebalance","always").put("cluster.routing.allocation.cluster_concurrent_rebalance",-1).build());
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(newIndexMetaDataBuilder("test").numberOfShards(3).numberOfReplicas(1)).put(newIndexMetaDataBuilder("test1").numberOfShards(3).numberOfReplicas(1)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test")).addAsNew(metaData.index("test1")).build();
  ClusterState clusterState=newClusterStateBuilder().metaData(metaData).routingTable(routingTable).build();
  assertThat(routingTable.index("test").shards().size(),equalTo(3));
  for (int i=0; i < routingTable.index("test").shards().size(); i++) {
    assertThat(routingTable.index("test").shard(i).size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).shards().size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).shards().get(0).state(),equalTo(UNASSIGNED));
    assertThat(routingTable.index("test").shard(i).shards().get(1).state(),equalTo(UNASSIGNED));
    assertThat(routingTable.index("test").shard(i).shards().get(0).currentNodeId(),nullValue());
    assertThat(routingTable.index("test").shard(i).shards().get(1).currentNodeId(),nullValue());
  }
  assertThat(routingTable.index("test1").shards().size(),equalTo(3));
  for (int i=0; i < routingTable.index("test1").shards().size(); i++) {
    assertThat(routingTable.index("test1").shard(i).size(),equalTo(2));
    assertThat(routingTable.index("test1").shard(i).shards().size(),equalTo(2));
    assertThat(routingTable.index("test1").shard(i).shards().get(0).state(),equalTo(UNASSIGNED));
    assertThat(routingTable.index("test1").shard(i).shards().get(1).state(),equalTo(UNASSIGNED));
    assertThat(routingTable.index("test1").shard(i).shards().get(0).currentNodeId(),nullValue());
    assertThat(routingTable.index("test1").shard(i).shards().get(1).currentNodeId(),nullValue());
  }
  logger.info("Adding three node and performing rerouting");
  clusterState=newClusterStateBuilder().state(clusterState).nodes(newNodesBuilder().put(newNode("node1")).put(newNode("node2")).put(newNode("node3"))).build();
  RoutingTable prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(3));
  for (int i=0; i < routingTable.index("test").shards().size(); i++) {
    assertThat(routingTable.index("test").shard(i).size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).shards().size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).primaryShard().state(),equalTo(INITIALIZING));
    assertThat(routingTable.index("test").shard(i).replicaShards().size(),equalTo(1));
    assertThat(routingTable.index("test").shard(i).replicaShards().get(0).state(),equalTo(UNASSIGNED));
    assertThat(routingTable.index("test").shard(i).replicaShards().get(0).currentNodeId(),nullValue());
  }
  logger.info("Another round of rebalancing");
  clusterState=newClusterStateBuilder().state(clusterState).nodes(newNodesBuilder().putAll(clusterState.nodes())).build();
  prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable == routingTable,equalTo(true));
  RoutingNodes routingNodes=clusterState.routingNodes();
  prevRoutingTable=routingTable;
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(3));
  for (int i=0; i < routingTable.index("test").shards().size(); i++) {
    assertThat(routingTable.index("test").shard(i).size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).shards().size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).primaryShard().state(),equalTo(STARTED));
    assertThat(routingTable.index("test").shard(i).replicaShards().size(),equalTo(1));
    assertThat(routingTable.index("test").shard(i).replicaShards().get(0).state(),equalTo(INITIALIZING));
  }
  logger.info("Reroute, nothing should change");
  prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState).routingTable();
  assertThat(prevRoutingTable == routingTable,equalTo(true));
  logger.info("Start the more shards");
  routingNodes=clusterState.routingNodes();
  prevRoutingTable=routingTable;
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  routingNodes=clusterState.routingNodes();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(3));
  for (int i=0; i < routingTable.index("test").shards().size(); i++) {
    assertThat(routingTable.index("test").shard(i).size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).shards().size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).primaryShard().state(),equalTo(STARTED));
    assertThat(routingTable.index("test").shard(i).replicaShards().size(),equalTo(1));
    assertThat(routingTable.index("test").shard(i).replicaShards().get(0).state(),equalTo(STARTED));
  }
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  routingNodes=clusterState.routingNodes();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test1").shards().size(),equalTo(3));
  for (int i=0; i < routingTable.index("test1").shards().size(); i++) {
    assertThat(routingTable.index("test1").shard(i).size(),equalTo(2));
    assertThat(routingTable.index("test1").shard(i).shards().size(),equalTo(2));
    assertThat(routingTable.index("test1").shard(i).primaryShard().state(),equalTo(STARTED));
    assertThat(routingTable.index("test1").shard(i).replicaShards().size(),equalTo(1));
    assertThat(routingTable.index("test1").shard(i).replicaShards().get(0).state(),equalTo(STARTED));
  }
  assertThat(routingNodes.node("node1").numberOfShardsWithState(STARTED),equalTo(4));
  assertThat(routingNodes.node("node2").numberOfShardsWithState(STARTED),equalTo(4));
  assertThat(routingNodes.node("node3").numberOfShardsWithState(STARTED),equalTo(4));
  assertThat(routingNodes.node("node1").shardsWithState("test",STARTED).size(),equalTo(2));
  assertThat(routingNodes.node("node2").shardsWithState("test",STARTED).size(),equalTo(2));
  assertThat(routingNodes.node("node3").shardsWithState("test",STARTED).size(),equalTo(2));
  assertThat(routingNodes.node("node1").shardsWithState("test1",STARTED).size(),equalTo(2));
  assertThat(routingNodes.node("node2").shardsWithState("test1",STARTED).size(),equalTo(2));
  assertThat(routingNodes.node("node3").shardsWithState("test1",STARTED).size(),equalTo(2));
}
