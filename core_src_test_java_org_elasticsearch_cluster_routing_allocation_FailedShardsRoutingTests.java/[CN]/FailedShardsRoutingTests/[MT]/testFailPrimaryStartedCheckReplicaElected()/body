{
  AllocationService strategy=createAllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries",10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),"always").build());
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)).build();
  RoutingTable initialRoutingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();
  logger.info("Adding two nodes and performing rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2"))).build();
  clusterState=strategy.reroute(clusterState,"reroute");
  logger.info("Start the shards (primaries)");
  RoutingNodes routingNodes=clusterState.getRoutingNodes();
  ClusterState newState=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  assertThat(newState,not(equalTo(clusterState)));
  clusterState=newState;
  assertThat(clusterState.routingTable().index("test").shards().size(),equalTo(1));
  for (int i=0; i < clusterState.routingTable().index("test").shards().size(); i++) {
    assertThat(clusterState.routingTable().index("test").shard(i).size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test").shard(i).size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test").shard(i).primaryShard().state(),equalTo(STARTED));
    assertThat(clusterState.routingTable().index("test").shard(i).primaryShard().currentNodeId(),anyOf(equalTo("node1"),equalTo("node2")));
    assertThat(clusterState.routingTable().index("test").shard(i).replicaShards().size(),equalTo(1));
    assertThat(clusterState.routingTable().index("test").shard(i).replicaShards().get(0).state(),equalTo(INITIALIZING));
    assertThat(clusterState.routingTable().index("test").shard(i).replicaShards().get(0).currentNodeId(),anyOf(equalTo("node2"),equalTo("node1")));
  }
  logger.info("Start the shards (backups)");
  routingNodes=clusterState.getRoutingNodes();
  newState=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  assertThat(newState,not(equalTo(clusterState)));
  clusterState=newState;
  assertThat(clusterState.routingTable().index("test").shards().size(),equalTo(1));
  for (int i=0; i < clusterState.routingTable().index("test").shards().size(); i++) {
    assertThat(clusterState.routingTable().index("test").shard(i).size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test").shard(i).size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test").shard(i).primaryShard().state(),equalTo(STARTED));
    assertThat(clusterState.routingTable().index("test").shard(i).primaryShard().currentNodeId(),anyOf(equalTo("node1"),equalTo("node2")));
    assertThat(clusterState.routingTable().index("test").shard(i).replicaShards().size(),equalTo(1));
    assertThat(clusterState.routingTable().index("test").shard(i).replicaShards().get(0).state(),equalTo(STARTED));
    assertThat(clusterState.routingTable().index("test").shard(i).replicaShards().get(0).currentNodeId(),anyOf(equalTo("node2"),equalTo("node1")));
  }
  logger.info("fail the primary shard, will have no place to be rerouted to (single node), so stays unassigned");
  ShardRouting shardToFail=clusterState.routingTable().index("test").shard(0).primaryShard();
  newState=strategy.applyFailedShard(clusterState,shardToFail);
  assertThat(newState,not(equalTo(clusterState)));
  clusterState=newState;
  assertThat(clusterState.routingTable().index("test").shard(0).size(),equalTo(2));
  assertThat(clusterState.routingTable().index("test").shard(0).size(),equalTo(2));
  assertThat(clusterState.routingTable().index("test").shard(0).primaryShard().currentNodeId(),not(equalTo(shardToFail.currentNodeId())));
  assertThat(clusterState.routingTable().index("test").shard(0).primaryShard().state(),equalTo(STARTED));
  assertThat(clusterState.routingTable().index("test").shard(0).primaryShard().currentNodeId(),anyOf(equalTo("node1"),equalTo("node2")));
  assertThat(clusterState.routingTable().index("test").shard(0).replicaShards().size(),equalTo(1));
  assertThat(clusterState.routingTable().index("test").shard(0).replicaShards().get(0).state(),equalTo(UNASSIGNED));
}
