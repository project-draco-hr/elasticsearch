{
  AllocationService strategy=createAllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries",10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),"always").build());
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)).build();
  RoutingTable initialRoutingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();
  logger.info("Adding two nodes and performing rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2"))).build();
  ClusterState newState=strategy.reroute(clusterState,"reroute");
  assertThat(newState,not(clusterState));
  clusterState=newState;
  final String nodeHoldingPrimary=clusterState.routingTable().index("test").shard(0).primaryShard().currentNodeId();
  assertThat(clusterState.routingTable().index("test").shards().size(),equalTo(1));
  for (int i=0; i < clusterState.routingTable().index("test").shards().size(); i++) {
    assertThat(clusterState.routingTable().index("test").shard(i).size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test").shard(i).shards().size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test").shard(i).primaryShard().state(),equalTo(INITIALIZING));
    assertThat(clusterState.routingTable().index("test").shard(i).primaryShard().currentNodeId(),equalTo(nodeHoldingPrimary));
    assertThat(clusterState.routingTable().index("test").shard(i).replicaShards().size(),equalTo(1));
    assertThat(clusterState.routingTable().index("test").shard(i).replicaShards().get(0).state(),equalTo(UNASSIGNED));
  }
  logger.info("fail the first shard, will start INITIALIZING on the second node");
  final ShardRouting firstShard=clusterState.getRoutingNodes().node(nodeHoldingPrimary).iterator().next();
  newState=strategy.applyFailedShard(clusterState,firstShard);
  assertThat(newState,not(equalTo(clusterState)));
  clusterState=newState;
  final String nodeHoldingPrimary2=clusterState.routingTable().index("test").shard(0).primaryShard().currentNodeId();
  assertThat(nodeHoldingPrimary2,not(equalTo(nodeHoldingPrimary)));
  assertThat(clusterState.routingTable().index("test").shards().size(),equalTo(1));
  for (int i=0; i < clusterState.routingTable().index("test").shards().size(); i++) {
    assertThat(clusterState.routingTable().index("test").shard(i).size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test").shard(i).shards().size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test").shard(i).primaryShard().state(),equalTo(INITIALIZING));
    assertThat(clusterState.routingTable().index("test").shard(i).primaryShard().currentNodeId(),not(equalTo(nodeHoldingPrimary)));
    assertThat(clusterState.routingTable().index("test").shard(i).replicaShards().size(),equalTo(1));
    assertThat(clusterState.routingTable().index("test").shard(i).replicaShards().get(0).state(),equalTo(UNASSIGNED));
  }
}
