{
  AllocationService strategy=createAllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries",10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),"always").build());
  logger.info("Building initial routing table");
  int numberOfReplicas=scaledRandomIntBetween(2,10);
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(numberOfReplicas)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build();
  logger.info("Adding {} nodes and performing rerouting",numberOfReplicas + 1);
  DiscoveryNodes.Builder nodeBuilder=DiscoveryNodes.builder();
  for (int i=0; i < numberOfReplicas + 1; i++) {
    nodeBuilder.add(newNode("node" + Integer.toString(i)));
  }
  clusterState=ClusterState.builder(clusterState).nodes(nodeBuilder).build();
  while (!clusterState.routingTable().shardsWithState(UNASSIGNED).isEmpty()) {
    clusterState=ClusterState.builder(clusterState).routingTable(strategy.applyStartedShards(clusterState,clusterState.routingTable().shardsWithState(INITIALIZING)).routingTable()).build();
    clusterState=ClusterState.builder(clusterState).routingTable(strategy.reroute(clusterState,"reroute").routingTable()).build();
  }
  int shardsToFail=randomIntBetween(1,numberOfReplicas);
  ArrayList<FailedRerouteAllocation.FailedShard> failedShards=new ArrayList<>();
  RoutingNodes routingNodes=clusterState.getRoutingNodes();
  Set<String> failedNodes=new HashSet<>();
  Set<ShardRouting> shardRoutingsToFail=new HashSet<>();
  for (int i=0; i < shardsToFail; i++) {
    String failedNode="node" + Integer.toString(randomInt(numberOfReplicas));
    logger.info("failing shard on node [{}]",failedNode);
    ShardRouting shardToFail=routingNodes.node(failedNode).iterator().next();
    if (shardRoutingsToFail.contains(shardToFail) == false) {
      failedShards.add(new FailedRerouteAllocation.FailedShard(shardToFail,null,null));
      failedNodes.add(failedNode);
      shardRoutingsToFail.add(shardToFail);
    }
  }
  routingTable=strategy.applyFailedShards(clusterState,failedShards).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  routingNodes=clusterState.getRoutingNodes();
  for (  FailedRerouteAllocation.FailedShard failedShard : failedShards) {
    if (routingNodes.getByAllocationId(failedShard.routingEntry.shardId(),failedShard.routingEntry.allocationId().getId()) != null) {
      fail("shard " + failedShard + " was not failed");
    }
  }
  for (  String failedNode : failedNodes) {
    if (!routingNodes.node(failedNode).isEmpty()) {
      fail("shard was re-assigned to failed node " + failedNode);
    }
  }
}
