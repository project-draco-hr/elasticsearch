{
  final IndexWriterConfig iwConf=new IndexWriterConfig(Lucene.VERSION,new KeywordAnalyzer());
  iwConf.setMergePolicy(new ElasticsearchMergePolicy(iwConf.getMergePolicy()));
  final Directory dir=newDirectory();
  final IndexWriter iw=new IndexWriter(dir,iwConf);
  Document document=new Document();
  document.add(new StringField("a","b",Store.NO));
  StringField uid=new StringField(UidFieldMapper.NAME,"1",Store.YES);
  document.add(uid);
  iw.addDocument(document);
  uid.setStringValue("2");
  iw.addDocument(document);
  iw.commit();
  document=new Document();
  UidField uidAndVersion=new UidField("3",3L);
  document.add(uidAndVersion);
  iw.addDocument(document);
  uidAndVersion.uid="4";
  uidAndVersion.version=4L;
  iw.addDocument(document);
  iw.commit();
  document=new Document();
  uid.setStringValue("5");
  Field version=new NumericDocValuesField(VersionFieldMapper.NAME,5L);
  document.add(uid);
  document.add(version);
  iw.addDocument(document);
  uid.setStringValue("6");
  version.setLongValue(6L);
  iw.addDocument(document);
  iw.commit();
  final Map<String,Long> expectedVersions=ImmutableMap.<String,Long>builder().put("1",0L).put("2",0L).put("3",0L).put("4",4L).put("5",5L).put("6",6L).build();
  Merges.forceMerge(iw,1);
  final AtomicReader ir=SlowCompositeReaderWrapper.wrap(DirectoryReader.open(iw.getDirectory()));
  final NumericDocValues versions=ir.getNumericDocValues(VersionFieldMapper.NAME);
  assertThat(versions,notNullValue());
  for (int i=0; i < ir.maxDoc(); ++i) {
    final String uidValue=ir.document(i).get(UidFieldMapper.NAME);
    final long expectedVersion=expectedVersions.get(uidValue);
    assertThat(versions.get(i),equalTo(expectedVersion));
  }
  iw.close();
  assertThat(IndexWriter.isLocked(iw.getDirectory()),is(false));
  ir.close();
  dir.close();
}
