{
  if (isDynamic() == false) {
    throw new IllegalStateException("setting [" + getKey() + "] is not dynamic");
  }
  final Setting<?> setting=this;
  return new SettingsService.SettingUpdater(){
    private Settings pendingSettings;
    private Settings committedSettings=get(settings);
    @Override public boolean prepareApply(    Settings settings){
      Settings currentSettings=get(settings);
      if (currentSettings.equals(committedSettings) == false) {
        if (accept.test(currentSettings) == false) {
          throw new IllegalArgumentException("illegal value can't update [" + key + "] from ["+ committedSettings.getAsMap()+ "] to ["+ currentSettings.getAsMap()+ "]");
        }
        pendingSettings=currentSettings;
        return true;
      }
 else {
        return false;
      }
    }
    @Override public void apply(){
      if (pendingSettings != null) {
        consumer.accept(pendingSettings);
        committedSettings=pendingSettings;
      }
      pendingSettings=null;
    }
    @Override public void rollback(){
      pendingSettings=null;
    }
    @Override public String toString(){
      return "Updater for: " + setting.toString();
    }
  }
;
}
