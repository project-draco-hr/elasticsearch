{
  return new Setting<T>(key,defaultValue,parser,dynamic,scope){
    @Override boolean isGroupSetting(){
      return true;
    }
    @Override public boolean match(    String toTest){
      return toTest.startsWith(getKey());
    }
    @Override AbstractScopedSettings.SettingUpdater<T> newUpdater(    Consumer<T> consumer,    ESLogger logger,    Consumer<T> validator){
      throw new UnsupportedOperationException("dynamic settings can't be updated use #getConcreteSetting for updating");
    }
    @Override public Setting<T> getConcreteSetting(    String key){
      if (match(key)) {
        return new Setting<>(key,defaultValue,parser,dynamic,scope);
      }
 else {
        throw new IllegalArgumentException("key must match setting but didn't [" + key + "]");
      }
    }
  }
;
}
