{
  final AbstractScopedSettings.SettingUpdater<A> aSettingUpdater=aSettting.newUpdater(null,logger);
  final AbstractScopedSettings.SettingUpdater<B> bSettingUpdater=bSetting.newUpdater(null,logger);
  return new AbstractScopedSettings.SettingUpdater<Tuple<A,B>>(){
    @Override public boolean hasChanged(    Settings current,    Settings previous){
      return aSettingUpdater.hasChanged(current,previous) || bSettingUpdater.hasChanged(current,previous);
    }
    @Override public Tuple<A,B> getValue(    Settings current,    Settings previous){
      return new Tuple<>(aSettingUpdater.getValue(current,previous),bSettingUpdater.getValue(current,previous));
    }
    @Override public void apply(    Tuple<A,B> value,    Settings current,    Settings previous){
      consumer.accept(value.v1(),value.v2());
    }
    @Override public String toString(){
      return "CompoundUpdater for: " + aSettingUpdater + " and "+ bSettingUpdater;
    }
  }
;
}
