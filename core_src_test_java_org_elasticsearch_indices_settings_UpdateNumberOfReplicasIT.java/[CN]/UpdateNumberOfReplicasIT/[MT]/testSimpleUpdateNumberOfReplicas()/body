{
  logger.info("Creating index test");
  assertAcked(prepareCreate("test",2));
  logger.info("Running Cluster Health");
  ClusterHealthResponse clusterHealth=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();
  logger.info("Done Cluster Health, status " + clusterHealth.getStatus());
  NumShards numShards=getNumShards("test");
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.GREEN));
  assertThat(clusterHealth.getIndices().get("test").getActivePrimaryShards(),equalTo(numShards.numPrimaries));
  assertThat(clusterHealth.getIndices().get("test").getNumberOfReplicas(),equalTo(numShards.numReplicas));
  assertThat(clusterHealth.getIndices().get("test").getActiveShards(),equalTo(numShards.totalNumShards));
  for (int i=0; i < 10; i++) {
    client().prepareIndex("test","type1",Integer.toString(i)).setSource(jsonBuilder().startObject().field("value","test" + i).endObject()).get();
  }
  refresh();
  for (int i=0; i < 10; i++) {
    SearchResponse countResponse=client().prepareSearch().setSize(0).setQuery(matchAllQuery()).get();
    assertHitCount(countResponse,10L);
  }
  logger.info("Increasing the number of replicas from 1 to 2");
  assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(settingsBuilder().put("index.number_of_replicas",2)).execute().actionGet());
  logger.info("Running Cluster Health");
  clusterHealth=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForYellowStatus().setWaitForActiveShards(numShards.numPrimaries * 2).execute().actionGet();
  logger.info("Done Cluster Health, status " + clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.YELLOW));
  assertThat(clusterHealth.getIndices().get("test").getActivePrimaryShards(),equalTo(numShards.numPrimaries));
  assertThat(clusterHealth.getIndices().get("test").getNumberOfReplicas(),equalTo(2));
  assertThat(clusterHealth.getIndices().get("test").getActiveShards(),equalTo(numShards.numPrimaries * 2));
  logger.info("starting another node to new replicas will be allocated to it");
  allowNodes("test",3);
  logger.info("Running Cluster Health");
  clusterHealth=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().setWaitForRelocatingShards(0).setWaitForNodes(">=3").execute().actionGet();
  logger.info("Done Cluster Health, status " + clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.GREEN));
  assertThat(clusterHealth.getIndices().get("test").getActivePrimaryShards(),equalTo(numShards.numPrimaries));
  assertThat(clusterHealth.getIndices().get("test").getNumberOfReplicas(),equalTo(2));
  assertThat(clusterHealth.getIndices().get("test").getActiveShards(),equalTo(numShards.numPrimaries * 3));
  for (int i=0; i < 10; i++) {
    SearchResponse countResponse=client().prepareSearch().setSize(0).setQuery(matchAllQuery()).get();
    assertHitCount(countResponse,10L);
  }
  logger.info("Decreasing number of replicas from 2 to 0");
  assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(settingsBuilder().put("index.number_of_replicas",0)).get());
  logger.info("Running Cluster Health");
  clusterHealth=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().setWaitForRelocatingShards(0).setWaitForNodes(">=3").execute().actionGet();
  logger.info("Done Cluster Health, status " + clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.GREEN));
  assertThat(clusterHealth.getIndices().get("test").getActivePrimaryShards(),equalTo(numShards.numPrimaries));
  assertThat(clusterHealth.getIndices().get("test").getNumberOfReplicas(),equalTo(0));
  assertThat(clusterHealth.getIndices().get("test").getActiveShards(),equalTo(numShards.numPrimaries));
  for (int i=0; i < 10; i++) {
    assertHitCount(client().prepareSearch().setQuery(matchAllQuery()).get(),10);
  }
}
