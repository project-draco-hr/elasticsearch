{
  internalCluster().ensureAtMostNumDataNodes(2);
  logger.info("--> creating index test with auto expand replicas");
  assertAcked(prepareCreate("test",2,settingsBuilder().put("auto_expand_replicas","0-all")));
  NumShards numShards=getNumShards("test");
  logger.info("--> running cluster health");
  ClusterHealthResponse clusterHealth=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().setWaitForActiveShards(numShards.numPrimaries * 2).execute().actionGet();
  logger.info("--> done cluster health, status {}",clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.GREEN));
  assertThat(clusterHealth.getIndices().get("test").getActivePrimaryShards(),equalTo(numShards.numPrimaries));
  assertThat(clusterHealth.getIndices().get("test").getNumberOfReplicas(),equalTo(1));
  assertThat(clusterHealth.getIndices().get("test").getActiveShards(),equalTo(numShards.numPrimaries * 2));
  logger.info("--> add another node, should increase the number of replicas");
  allowNodes("test",3);
  logger.info("--> running cluster health");
  clusterHealth=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().setWaitForActiveShards(numShards.numPrimaries * 3).setWaitForNodes(">=3").execute().actionGet();
  logger.info("--> done cluster health, status {}",clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.GREEN));
  assertThat(clusterHealth.getIndices().get("test").getActivePrimaryShards(),equalTo(numShards.numPrimaries));
  assertThat(clusterHealth.getIndices().get("test").getNumberOfReplicas(),equalTo(2));
  assertThat(clusterHealth.getIndices().get("test").getActiveShards(),equalTo(numShards.numPrimaries * 3));
  logger.info("--> closing one node");
  internalCluster().ensureAtMostNumDataNodes(2);
  allowNodes("test",2);
  logger.info("--> running cluster health");
  clusterHealth=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().setWaitForActiveShards(numShards.numPrimaries * 2).setWaitForNodes(">=2").execute().actionGet();
  logger.info("--> done cluster health, status {}",clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.GREEN));
  assertThat(clusterHealth.getIndices().get("test").getActivePrimaryShards(),equalTo(numShards.numPrimaries));
  assertThat(clusterHealth.getIndices().get("test").getNumberOfReplicas(),equalTo(1));
  assertThat(clusterHealth.getIndices().get("test").getActiveShards(),equalTo(numShards.numPrimaries * 2));
  logger.info("--> closing another node");
  internalCluster().ensureAtMostNumDataNodes(1);
  allowNodes("test",1);
  logger.info("--> running cluster health");
  clusterHealth=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().setWaitForNodes(">=1").setWaitForActiveShards(numShards.numPrimaries).execute().actionGet();
  logger.info("--> done cluster health, status {}",clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.GREEN));
  assertThat(clusterHealth.getIndices().get("test").getActivePrimaryShards(),equalTo(numShards.numPrimaries));
  assertThat(clusterHealth.getIndices().get("test").getNumberOfReplicas(),equalTo(0));
  assertThat(clusterHealth.getIndices().get("test").getActiveShards(),equalTo(numShards.numPrimaries));
}
