{
  Objects.requireNonNull(registrations);
  Map<Class<? extends ScriptEngineService>,String> registeredScriptEngineServices=new HashMap<>();
  Map<String,Class<? extends ScriptEngineService>> registeredLanguages=new HashMap<>();
  Map<String,Boolean> inlineScriptEnableds=new HashMap<>();
  for (  ScriptEngineRegistration registration : registrations) {
    String oldLanguage=registeredScriptEngineServices.putIfAbsent(registration.getScriptEngineService(),registration.getScriptEngineLanguage());
    if (oldLanguage != null) {
      throw new IllegalArgumentException("script engine service [" + registration.getScriptEngineService() + "] already registered for language ["+ oldLanguage+ "]");
    }
    String language=registration.getScriptEngineLanguage();
    Class<? extends ScriptEngineService> scriptEngineServiceClazz=registeredLanguages.putIfAbsent(language,registration.getScriptEngineService());
    if (scriptEngineServiceClazz != null) {
      throw new IllegalArgumentException("scripting language [" + language + "] already registered for script engine service ["+ scriptEngineServiceClazz.getCanonicalName()+ "]");
    }
    inlineScriptEnableds.put(language,registration.getDefaultInlineScriptEnabled());
  }
  this.registeredScriptEngineServices=Collections.unmodifiableMap(registeredScriptEngineServices);
  this.registeredLanguages=Collections.unmodifiableMap(registeredLanguages);
  this.defaultInlineScriptEnableds=Collections.unmodifiableMap(inlineScriptEnableds);
}
