{
  Objects.requireNonNull(registrations);
  Map<Class<? extends ScriptEngineService>,List<String>> registeredScriptEngineServices=new HashMap<>();
  Map<String,Class<? extends ScriptEngineService>> registeredLanguages=new HashMap<>();
  for (  ScriptEngineRegistration registration : registrations) {
    List<String> languages=registeredScriptEngineServices.putIfAbsent(registration.getScriptEngineService(),Collections.unmodifiableList(registration.getScriptEngineLanguages()));
    if (languages != null) {
      throw new IllegalArgumentException("script engine service [" + registration.getScriptEngineService() + "] already registered for languages ["+ String.join(",",languages)+ "]");
    }
    for (    String language : registration.getScriptEngineLanguages()) {
      Class<? extends ScriptEngineService> scriptEngineServiceClazz=registeredLanguages.putIfAbsent(language,registration.getScriptEngineService());
      if (scriptEngineServiceClazz != null) {
        throw new IllegalArgumentException("scripting language [" + language + "] already registered for script engine service ["+ scriptEngineServiceClazz.getCanonicalName()+ "]");
      }
    }
  }
  this.registeredScriptEngineServices=Collections.unmodifiableMap(registeredScriptEngineServices);
  this.registeredLanguages=Collections.unmodifiableMap(registeredLanguages);
}
