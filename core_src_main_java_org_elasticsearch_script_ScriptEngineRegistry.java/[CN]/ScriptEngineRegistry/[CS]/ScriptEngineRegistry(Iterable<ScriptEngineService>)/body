{
  Objects.requireNonNull(registrations);
  Map<Class<? extends ScriptEngineService>,String> registeredScriptEngineServices=new HashMap<>();
  Map<String,ScriptEngineService> registeredLanguages=new HashMap<>();
  Map<String,Boolean> inlineScriptEnableds=new HashMap<>();
  for (  ScriptEngineService service : registrations) {
    String oldLanguage=registeredScriptEngineServices.putIfAbsent(service.getClass(),service.getType());
    if (oldLanguage != null) {
      throw new IllegalArgumentException("script engine service [" + service.getClass() + "] already registered for language ["+ oldLanguage+ "]");
    }
    String language=service.getType();
    ScriptEngineService scriptEngineService=registeredLanguages.putIfAbsent(language,service);
    if (scriptEngineService != null) {
      throw new IllegalArgumentException("scripting language [" + language + "] already registered for script engine service ["+ scriptEngineService.getClass().getCanonicalName()+ "]");
    }
    inlineScriptEnableds.put(language,service.isInlineScriptEnabled());
  }
  this.registeredScriptEngineServices=Collections.unmodifiableMap(registeredScriptEngineServices);
  this.registeredLanguages=Collections.unmodifiableMap(registeredLanguages);
  this.defaultInlineScriptEnableds=Collections.unmodifiableMap(inlineScriptEnableds);
}
