{
  bind(DfsPhase.class).asEagerSingleton();
  bind(QueryPhase.class).asEagerSingleton();
  bind(SearchPhaseController.class).asEagerSingleton();
  bind(FetchPhase.class).asEagerSingleton();
  bind(SearchServiceTransportAction.class).asEagerSingleton();
  bind(MoreLikeThisFetchService.class).asEagerSingleton();
  String impl=settings.get(SEARCH_SERVICE_IMPL);
  if (impl == null) {
    bind(SearchService.class).asEagerSingleton();
  }
 else {
    Class<? extends SearchService> implClass=Classes.loadClass(getClass().getClassLoader(),impl);
    bind(SearchService.class).to(implClass).asEagerSingleton();
  }
  Multibinder<Aggregator.Parser> multibinderAggParser=Multibinder.newSetBinder(binder(),Aggregator.Parser.class);
  multibinderAggParser.addBinding().to(AvgParser.class);
  multibinderAggParser.addBinding().to(SumParser.class);
  multibinderAggParser.addBinding().to(MinParser.class);
  multibinderAggParser.addBinding().to(MaxParser.class);
  multibinderAggParser.addBinding().to(StatsParser.class);
  multibinderAggParser.addBinding().to(ExtendedStatsParser.class);
  multibinderAggParser.addBinding().to(ValueCountParser.class);
  multibinderAggParser.addBinding().to(PercentilesParser.class);
  multibinderAggParser.addBinding().to(PercentileRanksParser.class);
  multibinderAggParser.addBinding().to(CardinalityParser.class);
  multibinderAggParser.addBinding().to(GlobalParser.class);
  multibinderAggParser.addBinding().to(MissingParser.class);
  multibinderAggParser.addBinding().to(FilterParser.class);
  multibinderAggParser.addBinding().to(FiltersParser.class);
  multibinderAggParser.addBinding().to(SamplerParser.class);
  multibinderAggParser.addBinding().to(TermsParser.class);
  multibinderAggParser.addBinding().to(SignificantTermsParser.class);
  multibinderAggParser.addBinding().to(RangeParser.class);
  multibinderAggParser.addBinding().to(DateRangeParser.class);
  multibinderAggParser.addBinding().to(IpRangeParser.class);
  multibinderAggParser.addBinding().to(HistogramParser.class);
  multibinderAggParser.addBinding().to(DateHistogramParser.class);
  multibinderAggParser.addBinding().to(GeoDistanceParser.class);
  multibinderAggParser.addBinding().to(GeoHashGridParser.class);
  multibinderAggParser.addBinding().to(NestedParser.class);
  multibinderAggParser.addBinding().to(ReverseNestedParser.class);
  multibinderAggParser.addBinding().to(TopHitsParser.class);
  multibinderAggParser.addBinding().to(GeoBoundsParser.class);
  multibinderAggParser.addBinding().to(ScriptedMetricParser.class);
  multibinderAggParser.addBinding().to(ChildrenParser.class);
  for (  Class<? extends Aggregator.Parser> parser : aggParsers) {
    multibinderAggParser.addBinding().to(parser);
  }
  Multibinder<PipelineAggregator.Parser> multibinderPipelineAggParser=Multibinder.newSetBinder(binder(),PipelineAggregator.Parser.class);
  multibinderPipelineAggParser.addBinding().to(DerivativeParser.class);
  multibinderPipelineAggParser.addBinding().to(MaxBucketParser.class);
  multibinderPipelineAggParser.addBinding().to(MinBucketParser.class);
  multibinderPipelineAggParser.addBinding().to(AvgBucketParser.class);
  multibinderPipelineAggParser.addBinding().to(SumBucketParser.class);
  multibinderPipelineAggParser.addBinding().to(MovAvgParser.class);
  multibinderPipelineAggParser.addBinding().to(CumulativeSumParser.class);
  multibinderPipelineAggParser.addBinding().to(BucketScriptParser.class);
  multibinderPipelineAggParser.addBinding().to(BucketSelectorParser.class);
  multibinderPipelineAggParser.addBinding().to(SerialDiffParser.class);
  for (  Class<? extends PipelineAggregator.Parser> parser : pipelineAggParsers) {
    multibinderPipelineAggParser.addBinding().to(parser);
  }
  bind(AggregatorParsers.class).asEagerSingleton();
  bind(AggregationParseElement.class).asEagerSingleton();
  bind(AggregationPhase.class).asEagerSingleton();
  Multibinder<SignificanceHeuristicParser> heuristicParserMultibinder=Multibinder.newSetBinder(binder(),SignificanceHeuristicParser.class);
  for (  Class<? extends SignificanceHeuristicParser> clazz : heuristicParsers) {
    heuristicParserMultibinder.addBinding().to(clazz);
  }
  bind(SignificanceHeuristicParserMapper.class);
  Multibinder<MovAvgModel.AbstractModelParser> modelParserMultibinder=Multibinder.newSetBinder(binder(),MovAvgModel.AbstractModelParser.class);
  for (  Class<? extends MovAvgModel.AbstractModelParser> clazz : modelParsers) {
    modelParserMultibinder.addBinding().to(clazz);
  }
  bind(MovAvgModelParserMapper.class);
  Multibinder<Highlighter> multibinder=Multibinder.newSetBinder(binder(),Highlighter.class);
  for (  Class<? extends Highlighter> highlighter : highlighters) {
    multibinder.addBinding().to(highlighter);
  }
  bind(Highlighters.class).asEagerSingleton();
  Multibinder<Suggester> suggesterMultibinder=Multibinder.newSetBinder(binder(),Suggester.class);
  for (  Class<? extends Suggester> clazz : suggesters) {
    suggesterMultibinder.addBinding().to(clazz);
  }
  bind(SuggestParseElement.class).asEagerSingleton();
  bind(SuggestPhase.class).asEagerSingleton();
  bind(Suggesters.class).asEagerSingleton();
  Multibinder<ScoreFunctionParser> parserMapBinder=Multibinder.newSetBinder(binder(),ScoreFunctionParser.class);
  for (  Class<? extends ScoreFunctionParser> clazz : functionScoreParsers) {
    parserMapBinder.addBinding().to(clazz);
  }
  bind(ScoreFunctionParserMapper.class);
  Multibinder<FetchSubPhase> fetchSubPhaseMultibinder=Multibinder.newSetBinder(binder(),FetchSubPhase.class);
  fetchSubPhaseMultibinder.addBinding().to(ExplainFetchSubPhase.class);
  fetchSubPhaseMultibinder.addBinding().to(FieldDataFieldsFetchSubPhase.class);
  fetchSubPhaseMultibinder.addBinding().to(ScriptFieldsFetchSubPhase.class);
  fetchSubPhaseMultibinder.addBinding().to(FetchSourceSubPhase.class);
  fetchSubPhaseMultibinder.addBinding().to(VersionFetchSubPhase.class);
  fetchSubPhaseMultibinder.addBinding().to(MatchedQueriesFetchSubPhase.class);
  fetchSubPhaseMultibinder.addBinding().to(HighlightPhase.class);
  for (  Class<? extends FetchSubPhase> clazz : fetchSubPhases) {
    fetchSubPhaseMultibinder.addBinding().to(clazz);
  }
  bind(InnerHitsFetchSubPhase.class).asEagerSingleton();
}
