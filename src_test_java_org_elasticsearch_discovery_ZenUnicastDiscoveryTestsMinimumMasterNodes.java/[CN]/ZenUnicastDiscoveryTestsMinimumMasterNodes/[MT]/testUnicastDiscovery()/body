{
  final Settings settings=ImmutableSettings.settingsBuilder().put("discovery.zen.ping.multicast.enabled",false).put("discovery.zen.minimum_master_nodes",2).put("discovery.zen.ping.unicast.hosts","localhost").put("transport.tcp.port","25400-25500").build();
  final CountDownLatch latch=new CountDownLatch(3);
  final AtomicArray<String> nodes=new AtomicArray<>(3);
  Runnable r1=new Runnable(){
    @Override public void run(){
      logger.info("--> start first node");
      nodes.set(0,cluster().startNode(settings));
      latch.countDown();
    }
  }
;
  new Thread(r1).start();
  sleep(between(500,3000));
  Runnable r2=new Runnable(){
    @Override public void run(){
      logger.info("--> start second node");
      nodes.set(1,cluster().startNode(settings));
      latch.countDown();
    }
  }
;
  new Thread(r2).start();
  sleep(between(500,3000));
  Runnable r3=new Runnable(){
    @Override public void run(){
      logger.info("--> start third node");
      nodes.set(2,cluster().startNode(settings));
      latch.countDown();
    }
  }
;
  new Thread(r3).start();
  latch.await();
  ClusterHealthResponse clusterHealthResponse=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNodes("3").execute().actionGet();
  assertThat(clusterHealthResponse.isTimedOut(),equalTo(false));
  DiscoveryNode masterDiscoNode=null;
  for (  String node : nodes.toArray(new String[3])) {
    ClusterState state=cluster().client(node).admin().cluster().prepareState().setLocal(true).execute().actionGet().getState();
    assertThat(state.nodes().size(),equalTo(3));
    if (masterDiscoNode == null) {
      masterDiscoNode=state.nodes().masterNode();
    }
 else {
      assertThat(masterDiscoNode.equals(state.nodes().masterNode()),equalTo(true));
    }
  }
}
