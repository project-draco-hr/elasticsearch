{
  Integer maybeNumberOfShards=settings.getAsInt(SETTING_NUMBER_OF_SHARDS,null);
  if (maybeNumberOfShards == null) {
    throw new IllegalArgumentException("must specify numberOfShards for index [" + index + "]");
  }
  int numberOfShards=maybeNumberOfShards;
  if (numberOfShards <= 0) {
    throw new IllegalArgumentException("must specify positive number of shards for index [" + index + "]");
  }
  Integer maybeNumberOfReplicas=settings.getAsInt(SETTING_NUMBER_OF_REPLICAS,null);
  if (maybeNumberOfReplicas == null) {
    throw new IllegalArgumentException("must specify numberOfReplicas for index [" + index + "]");
  }
  int numberOfReplicas=maybeNumberOfReplicas;
  if (numberOfReplicas < 0) {
    throw new IllegalArgumentException("must specify non-negative number of shards for index [" + index + "]");
  }
  this.index=index;
  this.version=version;
  this.state=state;
  this.settings=settings;
  this.mappings=mappings;
  this.customs=customs;
  this.numberOfShards=numberOfShards;
  this.numberOfReplicas=numberOfReplicas;
  this.totalNumberOfShards=numberOfShards * (numberOfReplicas + 1);
  this.aliases=aliases;
  Map<String,String> requireMap=settings.getByPrefix("index.routing.allocation.require.").getAsMap();
  if (requireMap.isEmpty()) {
    requireFilters=null;
  }
 else {
    requireFilters=DiscoveryNodeFilters.buildFromKeyValue(AND,requireMap);
  }
  Map<String,String> includeMap=settings.getByPrefix("index.routing.allocation.include.").getAsMap();
  if (includeMap.isEmpty()) {
    includeFilters=null;
  }
 else {
    includeFilters=DiscoveryNodeFilters.buildFromKeyValue(OR,includeMap);
  }
  Map<String,String> excludeMap=settings.getByPrefix("index.routing.allocation.exclude.").getAsMap();
  if (excludeMap.isEmpty()) {
    excludeFilters=null;
  }
 else {
    excludeFilters=DiscoveryNodeFilters.buildFromKeyValue(OR,excludeMap);
  }
  indexCreatedVersion=Version.indexCreated(settings);
  indexUpgradedVersion=settings.getAsVersion(IndexMetaData.SETTING_VERSION_UPGRADED,indexCreatedVersion);
  String stringLuceneVersion=settings.get(SETTING_VERSION_MINIMUM_COMPATIBLE);
  if (stringLuceneVersion != null) {
    try {
      this.minimumCompatibleLuceneVersion=org.apache.lucene.util.Version.parse(stringLuceneVersion);
    }
 catch (    ParseException ex) {
      throw new IllegalStateException("Cannot parse lucene version [" + stringLuceneVersion + "] in the ["+ SETTING_VERSION_MINIMUM_COMPATIBLE+ "] setting",ex);
    }
  }
 else {
    this.minimumCompatibleLuceneVersion=null;
  }
}
