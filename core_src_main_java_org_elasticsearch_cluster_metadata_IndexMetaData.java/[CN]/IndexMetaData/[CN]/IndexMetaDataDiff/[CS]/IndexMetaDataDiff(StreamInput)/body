{
  index=in.readString();
  routingNumShards=in.readInt();
  version=in.readLong();
  state=State.fromId(in.readByte());
  settings=Settings.readSettingsFromStream(in);
  primaryTerms=in.readVLongArray();
  mappings=DiffableUtils.readImmutableOpenMapDiff(in,DiffableUtils.getStringKeySerializer(),MappingMetaData.PROTO);
  aliases=DiffableUtils.readImmutableOpenMapDiff(in,DiffableUtils.getStringKeySerializer(),AliasMetaData.PROTO);
  customs=DiffableUtils.readImmutableOpenMapDiff(in,DiffableUtils.getStringKeySerializer(),new DiffableUtils.DiffableValueSerializer<String,Custom>(){
    @Override public Custom read(    StreamInput in,    String key) throws IOException {
      return lookupPrototypeSafe(key).readFrom(in);
    }
    @Override public Diff<Custom> readDiff(    StreamInput in,    String key) throws IOException {
      return lookupPrototypeSafe(key).readDiffFrom(in);
    }
  }
);
  inSyncAllocationIds=DiffableUtils.readImmutableOpenIntMapDiff(in,DiffableUtils.getVIntKeySerializer(),DiffableUtils.StringSetValueSerializer.getInstance());
}
