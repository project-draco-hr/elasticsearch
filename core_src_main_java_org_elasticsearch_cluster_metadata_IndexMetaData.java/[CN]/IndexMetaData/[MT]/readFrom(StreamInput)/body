{
  Builder builder=new Builder(in.readString());
  builder.version(in.readLong());
  builder.state(State.fromId(in.readByte()));
  builder.settings(readSettingsFromStream(in));
  builder.primaryTerms(in.readVLongArray());
  int mappingsSize=in.readVInt();
  for (int i=0; i < mappingsSize; i++) {
    MappingMetaData mappingMd=MappingMetaData.PROTO.readFrom(in);
    builder.putMapping(mappingMd);
  }
  int aliasesSize=in.readVInt();
  for (int i=0; i < aliasesSize; i++) {
    AliasMetaData aliasMd=AliasMetaData.Builder.readFrom(in);
    builder.putAlias(aliasMd);
  }
  int customSize=in.readVInt();
  for (int i=0; i < customSize; i++) {
    String type=in.readString();
    Custom customIndexMetaData=lookupPrototypeSafe(type).readFrom(in);
    builder.putCustom(type,customIndexMetaData);
  }
  int activeAllocationIdsSize=in.readVInt();
  for (int i=0; i < activeAllocationIdsSize; i++) {
    int key=in.readVInt();
    Set<String> allocationIds=DiffableUtils.StringSetValueSerializer.getInstance().read(in,key);
    builder.putActiveAllocationIds(key,allocationIds);
  }
  return builder.build();
}
