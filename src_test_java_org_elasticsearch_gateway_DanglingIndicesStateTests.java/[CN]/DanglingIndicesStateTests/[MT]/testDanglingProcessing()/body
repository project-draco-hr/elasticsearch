{
  try (NodeEnvironment env=newNodeEnvironment()){
    MetaStateService metaStateService=new MetaStateService(ImmutableSettings.EMPTY,env);
    DanglingIndicesState danglingState=new DanglingIndicesState(ImmutableSettings.EMPTY,env,metaStateService,null);
    MetaData metaData=MetaData.builder().build();
    IndexMetaData dangledIndex=IndexMetaData.builder("test1").settings(indexSettings).build();
    metaStateService.writeIndex("test_write",dangledIndex,null);
    int numberOfChecks=randomIntBetween(1,10);
    for (int i=0; i < numberOfChecks; i++) {
      Map<String,IndexMetaData> newDanglingIndices=danglingState.findNewDanglingIndices(metaData);
      assertThat(newDanglingIndices.size(),equalTo(1));
      assertThat(newDanglingIndices.keySet(),Matchers.hasItems("test1"));
      assertTrue(danglingState.getDanglingIndices().isEmpty());
    }
    for (int i=0; i < numberOfChecks; i++) {
      danglingState.findNewAndAddDanglingIndices(metaData);
      assertThat(danglingState.getDanglingIndices().size(),equalTo(1));
      assertThat(danglingState.getDanglingIndices().keySet(),Matchers.hasItems("test1"));
    }
    metaData=MetaData.builder(metaData).put(dangledIndex,true).build();
    for (int i=0; i < numberOfChecks; i++) {
      Map<String,IndexMetaData> newDanglingIndices=danglingState.findNewDanglingIndices(metaData);
      assertTrue(newDanglingIndices.isEmpty());
      assertThat(danglingState.getDanglingIndices().size(),equalTo(1));
      assertThat(danglingState.getDanglingIndices().keySet(),Matchers.hasItems("test1"));
    }
    danglingState.cleanupAllocatedDangledIndices(metaData);
    assertTrue(danglingState.getDanglingIndices().isEmpty());
  }
 }
