{
  ThreadPool threadPool=new ThreadPool(settingsBuilder().put("threadpool.search.type","fixed").build(),null);
  assertThat(info(threadPool,Names.SEARCH).rejectSetting(),equalTo("abort"));
  assertThat(info(threadPool,Names.SEARCH).queueType(),equalTo("linked"));
  assertThat(threadPool.executor(Names.SEARCH),instanceOf(EsThreadPoolExecutor.class));
  threadPool.updateSettings(settingsBuilder().put("threadpool.search.type","scaling").put("threadpool.search.keep_alive","10m").put("threadpool.search.min","2").put("threadpool.search.size","15").build());
  assertThat(info(threadPool,Names.SEARCH).type(),equalTo("scaling"));
  assertThat(threadPool.executor(Names.SEARCH),instanceOf(EsThreadPoolExecutor.class));
  assertThat(((EsThreadPoolExecutor)threadPool.executor(Names.SEARCH)).getCorePoolSize(),equalTo(2));
  assertThat(((EsThreadPoolExecutor)threadPool.executor(Names.SEARCH)).getMaximumPoolSize(),equalTo(15));
  assertThat(info(threadPool,Names.SEARCH).min(),equalTo(2));
  assertThat(info(threadPool,Names.SEARCH).max(),equalTo(15));
  assertThat(info(threadPool,Names.SEARCH).keepAlive().minutes(),equalTo(10L));
  assertThat(((EsThreadPoolExecutor)threadPool.executor(Names.SEARCH)).getKeepAliveTime(TimeUnit.MINUTES),equalTo(10L));
  threadPool.updateSettings(settingsBuilder().put("threadpool.search.type","fixed").build());
  assertThat(info(threadPool,Names.SEARCH).type(),equalTo("fixed"));
  assertThat(info(threadPool,Names.SEARCH).keepAlive(),nullValue());
  assertThat(info(threadPool,Names.SEARCH).min(),equalTo(15));
  assertThat(info(threadPool,Names.SEARCH).max(),equalTo(15));
  assertThat(threadPool.executor(Names.SEARCH),instanceOf(EsThreadPoolExecutor.class));
  assertThat(((EsThreadPoolExecutor)threadPool.executor(Names.SEARCH)).getCorePoolSize(),equalTo(15));
  assertThat(((EsThreadPoolExecutor)threadPool.executor(Names.SEARCH)).getMaximumPoolSize(),equalTo(15));
  Executor oldExecutor=threadPool.executor(Names.SEARCH);
  threadPool.updateSettings(settingsBuilder().put("threadpool.search.size","10").build());
  assertThat(info(threadPool,Names.SEARCH).max(),equalTo(10));
  assertThat(info(threadPool,Names.SEARCH).min(),equalTo(10));
  assertThat(((EsThreadPoolExecutor)threadPool.executor(Names.SEARCH)).getMaximumPoolSize(),equalTo(10));
  assertThat(((EsThreadPoolExecutor)threadPool.executor(Names.SEARCH)).getCorePoolSize(),equalTo(10));
  assertThat(info(threadPool,Names.SEARCH).type(),equalTo("fixed"));
  assertThat(threadPool.executor(Names.SEARCH),sameInstance(oldExecutor));
  threadPool.updateSettings(settingsBuilder().put("threadpool.search.queue","500").build());
  assertThat(info(threadPool,Names.SEARCH).queueType(),equalTo("linked"));
  assertThat(((EsThreadPoolExecutor)threadPool.executor(Names.SEARCH)).getQueue(),instanceOf(LinkedBlockingQueue.class));
  threadPool.updateSettings(settingsBuilder().put("threadpool.search.queue_type","array").put("threadpool.search.size","12").build());
  assertThat(info(threadPool,Names.SEARCH).type(),equalTo("fixed"));
  assertThat(info(threadPool,Names.SEARCH).max(),equalTo(12));
  assertThat(((EsThreadPoolExecutor)threadPool.executor(Names.SEARCH)).getCorePoolSize(),equalTo(12));
  assertThat(info(threadPool,Names.SEARCH).queueType(),equalTo("array"));
  assertThat(((EsThreadPoolExecutor)threadPool.executor(Names.SEARCH)).getQueue(),instanceOf(ArrayBlockingQueue.class));
  oldExecutor=threadPool.executor(Names.SEARCH);
  assertThat(info(threadPool,Names.SEARCH).rejectSetting(),equalTo("abort"));
  assertThat(((EsThreadPoolExecutor)threadPool.executor(Names.SEARCH)).getRejectedExecutionHandler(),instanceOf(EsAbortPolicy.class));
  threadPool.updateSettings(settingsBuilder().put("threadpool.search.reject_policy","caller").build());
  assertThat(info(threadPool,Names.SEARCH).rejectSetting(),equalTo("caller"));
  assertThat(((EsThreadPoolExecutor)threadPool.executor(Names.SEARCH)).getRejectedExecutionHandler(),instanceOf(ThreadPoolExecutor.CallerRunsPolicy.class));
  assertThat(threadPool.executor(Names.SEARCH),sameInstance(oldExecutor));
  threadPool.shutdown();
}
