{
  XContentParser parser=parseContext.parser();
  String currentFieldName=null;
  XContentParser.Token token;
  String queryString=null;
  String defaultField=null;
  String analyzer=null;
  String quoteAnalyzer=null;
  String queryName=null;
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  boolean autoGeneratePhraseQueries=QueryStringQueryBuilder.DEFAULT_AUTO_GENERATE_PHRASE_QUERIES;
  int maxDeterminizedStates=QueryStringQueryBuilder.DEFAULT_MAX_DETERMINED_STATES;
  boolean lowercaseExpandedTerms=QueryStringQueryBuilder.DEFAULT_LOWERCASE_EXPANDED_TERMS;
  boolean enablePositionIncrements=QueryStringQueryBuilder.DEFAULT_ENABLE_POSITION_INCREMENTS;
  boolean escape=QueryStringQueryBuilder.DEFAULT_ESCAPE;
  boolean useDisMax=QueryStringQueryBuilder.DEFAULT_USE_DIS_MAX;
  int fuzzyPrefixLength=QueryStringQueryBuilder.DEFAULT_FUZZY_PREFIX_LENGTH;
  int fuzzyMaxExpansions=QueryStringQueryBuilder.DEFAULT_FUZZY_MAX_EXPANSIONS;
  int phraseSlop=QueryStringQueryBuilder.DEFAULT_PHRASE_SLOP;
  float tieBreaker=QueryStringQueryBuilder.DEFAULT_TIE_BREAKER;
  Boolean analyzeWildcard=null;
  Boolean allowLeadingWildcard=null;
  String minimumShouldMatch=null;
  String quoteFieldSuffix=null;
  Boolean lenient=null;
  Operator defaultOperator=QueryStringQueryBuilder.DEFAULT_OPERATOR;
  String timeZone=null;
  Locale locale=QueryStringQueryBuilder.DEFAULT_LOCALE;
  Fuzziness fuzziness=QueryStringQueryBuilder.DEFAULT_FUZZINESS;
  String fuzzyRewrite=null;
  String rewrite=null;
  Map<String,Float> fieldsAndWeights=new HashMap<>();
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if (parseContext.getParseFieldMatcher().match(currentFieldName,FIELDS_FIELD)) {
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          String fField=null;
          float fBoost=AbstractQueryBuilder.DEFAULT_BOOST;
          char[] text=parser.textCharacters();
          int end=parser.textOffset() + parser.textLength();
          for (int i=parser.textOffset(); i < end; i++) {
            if (text[i] == '^') {
              int relativeLocation=i - parser.textOffset();
              fField=new String(text,parser.textOffset(),relativeLocation);
              fBoost=Float.parseFloat(new String(text,i + 1,parser.textLength() - relativeLocation - 1));
              break;
            }
          }
          if (fField == null) {
            fField=parser.text();
          }
          fieldsAndWeights.put(fField,fBoost);
        }
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"[" + QueryStringQueryBuilder.NAME + "] query does not support ["+ currentFieldName+ "]");
      }
    }
 else     if (token.isValue()) {
      if (parseContext.getParseFieldMatcher().match(currentFieldName,QUERY_FIELD)) {
        queryString=parser.text();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,DEFAULT_FIELD_FIELD)) {
        defaultField=parser.text();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,DEFAULT_OPERATOR_FIELD)) {
        defaultOperator=Operator.fromString(parser.text());
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,ANALYZER_FIELD)) {
        analyzer=parser.text();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,QUOTE_ANALYZER_FIELD)) {
        quoteAnalyzer=parser.text();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,ALLOW_LEADING_WILDCARD_FIELD)) {
        allowLeadingWildcard=parser.booleanValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,AUTO_GENERATE_PHRASE_QUERIES_FIELD)) {
        autoGeneratePhraseQueries=parser.booleanValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,MAX_DETERMINED_STATES_FIELD)) {
        maxDeterminizedStates=parser.intValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,LOWERCASE_EXPANDED_TERMS_FIELD)) {
        lowercaseExpandedTerms=parser.booleanValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,ENABLE_POSITION_INCREMENTS_FIELD)) {
        enablePositionIncrements=parser.booleanValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,ESCAPE_FIELD)) {
        escape=parser.booleanValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,USE_DIS_MAX_FIELD)) {
        useDisMax=parser.booleanValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,FUZZY_PREFIX_LENGTH_FIELD)) {
        fuzzyPrefixLength=parser.intValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,FUZZY_MAX_EXPANSIONS_FIELD)) {
        fuzzyMaxExpansions=parser.intValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,FUZZY_REWRITE_FIELD)) {
        fuzzyRewrite=parser.textOrNull();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,PHRASE_SLOP_FIELD)) {
        phraseSlop=parser.intValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,Fuzziness.FIELD)) {
        fuzziness=Fuzziness.parse(parser);
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.BOOST_FIELD)) {
        boost=parser.floatValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,TIE_BREAKER_FIELD)) {
        tieBreaker=parser.floatValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,ANALYZE_WILDCARD_FIELD)) {
        analyzeWildcard=parser.booleanValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,REWRITE_FIELD)) {
        rewrite=parser.textOrNull();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,MINIMUM_SHOULD_MATCH_FIELD)) {
        minimumShouldMatch=parser.textOrNull();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,QUOTE_FIELD_SUFFIX_FIELD)) {
        quoteFieldSuffix=parser.textOrNull();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,LENIENT_FIELD)) {
        lenient=parser.booleanValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,LOCALE_FIELD)) {
        String localeStr=parser.text();
        locale=Locale.forLanguageTag(localeStr);
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,TIME_ZONE_FIELD)) {
        try {
          timeZone=parser.text();
        }
 catch (        IllegalArgumentException e) {
          throw new ParsingException(parser.getTokenLocation(),"[" + QueryStringQueryBuilder.NAME + "] time_zone ["+ parser.text()+ "] is unknown");
        }
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.NAME_FIELD)) {
        queryName=parser.text();
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"[" + QueryStringQueryBuilder.NAME + "] query does not support ["+ currentFieldName+ "]");
      }
    }
 else {
      throw new ParsingException(parser.getTokenLocation(),"[" + QueryStringQueryBuilder.NAME + "] unknown token ["+ token+ "] after ["+ currentFieldName+ "]");
    }
  }
  if (queryString == null) {
    throw new ParsingException(parser.getTokenLocation(),"[" + QueryStringQueryBuilder.NAME + "] must be provided with a [query]");
  }
  QueryStringQueryBuilder queryStringQuery=new QueryStringQueryBuilder(queryString);
  queryStringQuery.fields(fieldsAndWeights);
  queryStringQuery.defaultField(defaultField);
  queryStringQuery.defaultOperator(defaultOperator);
  queryStringQuery.analyzer(analyzer);
  queryStringQuery.quoteAnalyzer(quoteAnalyzer);
  queryStringQuery.allowLeadingWildcard(allowLeadingWildcard);
  queryStringQuery.autoGeneratePhraseQueries(autoGeneratePhraseQueries);
  queryStringQuery.maxDeterminizedStates(maxDeterminizedStates);
  queryStringQuery.lowercaseExpandedTerms(lowercaseExpandedTerms);
  queryStringQuery.enablePositionIncrements(enablePositionIncrements);
  queryStringQuery.escape(escape);
  queryStringQuery.useDisMax(useDisMax);
  queryStringQuery.fuzzyPrefixLength(fuzzyPrefixLength);
  queryStringQuery.fuzzyMaxExpansions(fuzzyMaxExpansions);
  queryStringQuery.fuzzyRewrite(fuzzyRewrite);
  queryStringQuery.phraseSlop(phraseSlop);
  queryStringQuery.fuzziness(fuzziness);
  queryStringQuery.tieBreaker(tieBreaker);
  queryStringQuery.analyzeWildcard(analyzeWildcard);
  queryStringQuery.rewrite(rewrite);
  queryStringQuery.minimumShouldMatch(minimumShouldMatch);
  queryStringQuery.quoteFieldSuffix(quoteFieldSuffix);
  queryStringQuery.lenient(lenient);
  queryStringQuery.timeZone(timeZone);
  queryStringQuery.locale(locale);
  queryStringQuery.boost(boost);
  queryStringQuery.queryName(queryName);
  return Optional.of(queryStringQuery);
}
