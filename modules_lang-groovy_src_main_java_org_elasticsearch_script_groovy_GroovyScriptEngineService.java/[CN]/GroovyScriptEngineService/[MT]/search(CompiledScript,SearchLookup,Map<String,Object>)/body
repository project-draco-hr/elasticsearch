{
  deprecationLogger.deprecated("[groovy] scripts are deprecated, use [painless] scripts instead");
  return new SearchScript(){
    @Override public LeafSearchScript getLeafSearchScript(    LeafReaderContext context) throws IOException {
      final LeafSearchLookup leafLookup=lookup.getLeafSearchLookup(context);
      Map<String,Object> allVars=new HashMap<>();
      allVars.putAll(leafLookup.asMap());
      if (vars != null) {
        allVars.putAll(vars);
      }
      Script scriptObject;
      try {
        scriptObject=createScript(compiledScript.compiled(),allVars);
      }
 catch (      ReflectiveOperationException e) {
        throw convertToScriptException("Failed to build search script",compiledScript.name(),e);
      }
      return new GroovyScript(compiledScript,scriptObject,leafLookup,logger);
    }
    @Override public boolean needsScores(){
      return true;
    }
  }
;
}
