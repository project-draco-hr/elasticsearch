{
  super(store.shardId(),store.indexSettings());
  Preconditions.checkNotNull(store,"Store must be provided to merge policy");
  this.minMergeSize=componentSettings.getAsSize("minMergeSize",new SizeValue((long)LogByteSizeMergePolicy.DEFAULT_MIN_MERGE_MB * 1024 * 1024,SizeUnit.BYTES));
  this.maxMergeSize=componentSettings.getAsSize("maxMergeSize",new SizeValue((long)LogByteSizeMergePolicy.DEFAULT_MAX_MERGE_MB,SizeUnit.MB));
  this.mergeFactor=componentSettings.getAsInt("mergeFactor",LogByteSizeMergePolicy.DEFAULT_MERGE_FACTOR);
  this.maxMergeDocs=componentSettings.getAsInt("maxMergeDocs",LogByteSizeMergePolicy.DEFAULT_MAX_MERGE_DOCS);
  this.numLargeSegments=componentSettings.getAsInt("numLargeSegments",BalancedSegmentMergePolicy.DEFAULT_NUM_LARGE_SEGMENTS);
  this.maxSmallSegments=componentSettings.getAsInt("maxSmallSegments",2 * LogMergePolicy.DEFAULT_MERGE_FACTOR);
  this.useCompoundFile=componentSettings.getAsBoolean("useCompoundFile",store == null || store.suggestUseCompoundFile());
  logger.debug("Using [Balanced] merge policy with mergeFactor[{}], minMergeSize[{}], maxMergeSize[{}], maxMergeDocs[{}] useCompoundFile[{}]",new Object[]{mergeFactor,minMergeSize,maxMergeSize,maxMergeDocs,useCompoundFile});
}
