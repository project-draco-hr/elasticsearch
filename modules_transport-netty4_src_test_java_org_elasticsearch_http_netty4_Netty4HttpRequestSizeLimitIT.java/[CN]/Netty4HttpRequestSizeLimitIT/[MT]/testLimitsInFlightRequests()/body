{
  ensureGreen();
  int numRequests=LIMIT.bytesAsInt() / 100;
  StringBuilder bulkRequest=new StringBuilder();
  for (int i=0; i < numRequests; i++) {
    bulkRequest.append("{\"index\": {}}");
    bulkRequest.append(System.lineSeparator());
    bulkRequest.append("{ \"field\" : \"value\" }");
    bulkRequest.append(System.lineSeparator());
  }
  @SuppressWarnings("unchecked") Tuple<String,CharSequence>[] requests=new Tuple[150];
  for (int i=0; i < requests.length; i++) {
    requests[i]=Tuple.tuple("/index/type/_bulk",bulkRequest);
  }
  HttpServerTransport httpServerTransport=internalCluster().getInstance(HttpServerTransport.class);
  InetSocketTransportAddress inetSocketTransportAddress=(InetSocketTransportAddress)randomFrom(httpServerTransport.boundAddress().boundAddresses());
  try (Netty4HttpClient nettyHttpClient=new Netty4HttpClient()){
    Collection<FullHttpResponse> singleResponse=nettyHttpClient.post(inetSocketTransportAddress.address(),requests[0]);
    assertThat(singleResponse,hasSize(1));
    assertAtLeastOnceExpectedStatus(singleResponse,HttpResponseStatus.OK);
    Collection<FullHttpResponse> multipleResponses=nettyHttpClient.post(inetSocketTransportAddress.address(),requests);
    assertThat(multipleResponses,hasSize(requests.length));
    assertAtLeastOnceExpectedStatus(multipleResponses,HttpResponseStatus.SERVICE_UNAVAILABLE);
  }
 }
