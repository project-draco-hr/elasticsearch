{
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("company").startObject("properties").startObject("name").field("type","string").endObject().startObject("branches").field("type","nested").startObject("properties").startObject("name").field("type","string").endObject().startObject("location").field("type","geo_point").field("lat_lon",true).startObject("fielddata").field("format",randomFieldDataFormat()).endObject().endObject().endObject().endObject().endObject().endObject().endObject().string();
  client().admin().indices().prepareCreate("companies").setSettings(settingsBuilder().put("index.number_of_shards",1).put("index.number_of_replicas",0)).addMapping("company",mapping).execute().actionGet();
  client().admin().cluster().prepareHealth("companies").setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();
  indexRandom(true,client().prepareIndex("companies","company","1").setSource(jsonBuilder().startObject().field("name","company 1").startArray("branches").startObject().field("name","New York").startObject("location").field("lat",40.7143528).field("lon",-74.0059731).endObject().endObject().endArray().endObject()),client().prepareIndex("companies","company","2").setSource(jsonBuilder().startObject().field("name","company 2").startArray("branches").startObject().field("name","Times Square").startObject("location").field("lat",40.759011).field("lon",-73.9844722).endObject().endObject().startObject().field("name","Tribeca").startObject("location").field("lat",40.718266).field("lon",-74.007819).endObject().endObject().endArray().endObject()),client().prepareIndex("companies","company","3").setSource(jsonBuilder().startObject().field("name","company 3").startArray("branches").startObject().field("name","Wall Street").startObject("location").field("lat",40.7051157).field("lon",-74.0088305).endObject().endObject().startObject().field("name","Soho").startObject("location").field("lat",40.7247222).field("lon",-74).endObject().endObject().endArray().endObject()),client().prepareIndex("companies","company","4").setSource(jsonBuilder().startObject().field("name","company 4").startArray("branches").startObject().field("name","Greenwich Village").startObject("location").field("lat",40.731033).field("lon",-73.9962255).endObject().endObject().startObject().field("name","Brooklyn").startObject("location").field("lat",40.65).field("lon",-73.95).endObject().endObject().endArray().endObject()));
  SearchResponse searchResponse=client().prepareSearch("companies").setQuery(matchAllQuery()).addSort(SortBuilders.geoDistanceSort("branches.location").point(40.7143528,-74.0059731).order(SortOrder.ASC)).execute().actionGet();
  assertHitCount(searchResponse,4);
  assertOrderedSearchHits(searchResponse,"1","2","3","4");
  assertThat(((Number)searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(),closeTo(0d,0.01d));
  assertThat(((Number)searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(),closeTo(0.4621d,0.01d));
  assertThat(((Number)searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(),closeTo(1.055d,0.01d));
  assertThat(((Number)searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(),closeTo(2.029d,0.01d));
  searchResponse=client().prepareSearch("companies").setQuery(matchAllQuery()).addSort(SortBuilders.geoDistanceSort("branches.location").point(40.7143528,-74.0059731).order(SortOrder.ASC).sortMode("max")).execute().actionGet();
  assertHitCount(searchResponse,4);
  assertOrderedSearchHits(searchResponse,"1","3","2","4");
  assertThat(((Number)searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(),closeTo(0d,0.01d));
  assertThat(((Number)searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(),closeTo(1.258d,0.01d));
  assertThat(((Number)searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(),closeTo(5.286d,0.01d));
  assertThat(((Number)searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(),closeTo(8.572d,0.01d));
  searchResponse=client().prepareSearch("companies").setQuery(matchAllQuery()).addSort(SortBuilders.geoDistanceSort("branches.location").point(40.7143528,-74.0059731).order(SortOrder.DESC)).execute().actionGet();
  assertHitCount(searchResponse,4);
  assertOrderedSearchHits(searchResponse,"4","2","3","1");
  assertThat(((Number)searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(),closeTo(8.572d,0.01d));
  assertThat(((Number)searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(),closeTo(5.286d,0.01d));
  assertThat(((Number)searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(),closeTo(1.258d,0.01d));
  assertThat(((Number)searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(),closeTo(0d,0.01d));
  searchResponse=client().prepareSearch("companies").setQuery(matchAllQuery()).addSort(SortBuilders.geoDistanceSort("branches.location").point(40.7143528,-74.0059731).order(SortOrder.DESC).sortMode("min")).execute().actionGet();
  assertHitCount(searchResponse,4);
  assertOrderedSearchHits(searchResponse,"4","3","2","1");
  assertThat(((Number)searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(),closeTo(2.029d,0.01d));
  assertThat(((Number)searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(),closeTo(1.055d,0.01d));
  assertThat(((Number)searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(),closeTo(0.4621d,0.01d));
  assertThat(((Number)searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(),closeTo(0d,0.01d));
  searchResponse=client().prepareSearch("companies").setQuery(matchAllQuery()).addSort(SortBuilders.geoDistanceSort("branches.location").point(40.7143528,-74.0059731).sortMode("avg").order(SortOrder.ASC)).execute().actionGet();
  assertHitCount(searchResponse,4);
  assertOrderedSearchHits(searchResponse,"1","3","2","4");
  assertThat(((Number)searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(),closeTo(0d,0.01d));
  assertThat(((Number)searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(),closeTo(1.157d,0.01d));
  assertThat(((Number)searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(),closeTo(2.874d,0.01d));
  assertThat(((Number)searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(),closeTo(5.301d,0.01d));
  searchResponse=client().prepareSearch("companies").setQuery(matchAllQuery()).addSort(SortBuilders.geoDistanceSort("branches.location").setNestedPath("branches").point(40.7143528,-74.0059731).sortMode("avg").order(SortOrder.DESC)).execute().actionGet();
  assertHitCount(searchResponse,4);
  assertOrderedSearchHits(searchResponse,"4","2","3","1");
  assertThat(((Number)searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(),closeTo(5.301d,0.01d));
  assertThat(((Number)searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(),closeTo(2.874d,0.01d));
  assertThat(((Number)searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(),closeTo(1.157d,0.01d));
  assertThat(((Number)searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(),closeTo(0d,0.01d));
  searchResponse=client().prepareSearch("companies").setQuery(matchAllQuery()).addSort(SortBuilders.geoDistanceSort("branches.location").setNestedFilter(termFilter("branches.name","brooklyn")).point(40.7143528,-74.0059731).sortMode("avg").order(SortOrder.ASC)).execute().actionGet();
  assertHitCount(searchResponse,4);
  assertFirstHit(searchResponse,hasId("4"));
  assertSearchHits(searchResponse,"1","2","3","4");
  assertThat(((Number)searchResponse.getHits().getAt(0).sortValues()[0]).doubleValue(),closeTo(8.572d,0.01d));
  assertThat(((Number)searchResponse.getHits().getAt(1).sortValues()[0]).doubleValue(),equalTo(Double.MAX_VALUE));
  assertThat(((Number)searchResponse.getHits().getAt(2).sortValues()[0]).doubleValue(),equalTo(Double.MAX_VALUE));
  assertThat(((Number)searchResponse.getHits().getAt(3).sortValues()[0]).doubleValue(),equalTo(Double.MAX_VALUE));
  try {
    client().prepareSearch("companies").setQuery(matchAllQuery()).addSort(SortBuilders.geoDistanceSort("branches.location").point(40.7143528,-74.0059731).sortMode("sum")).execute().actionGet();
    fail("Expected error");
  }
 catch (  SearchPhaseExecutionException e) {
    assertThat(e.shardFailures()[0].status(),equalTo(RestStatus.BAD_REQUEST));
  }
}
