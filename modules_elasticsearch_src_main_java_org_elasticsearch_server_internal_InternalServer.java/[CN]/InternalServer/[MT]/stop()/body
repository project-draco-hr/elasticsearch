{
  if (!lifecycle.moveToStopped()) {
    return this;
  }
  Logger logger=Loggers.getLogger(Server.class,settings.get("name"));
  logger.info("{{}}: Stopping ...",Version.full());
  if (settings.getAsBoolean("http.enabled",true)) {
    injector.getInstance(HttpServer.class).stop();
  }
  injector.getInstance(RoutingService.class).stop();
  injector.getInstance(ClusterService.class).stop();
  injector.getInstance(DiscoveryService.class).stop();
  injector.getInstance(MonitorService.class).stop();
  injector.getInstance(GatewayService.class).stop();
  injector.getInstance(SearchService.class).stop();
  injector.getInstance(IndicesService.class).stop();
  injector.getInstance(RestController.class).stop();
  injector.getInstance(TransportService.class).stop();
  injector.getInstance(JmxService.class).close();
  for (  Class<? extends LifecycleComponent> plugin : pluginsService.services()) {
    injector.getInstance(plugin).stop();
  }
  try {
    FileSystemUtils.deleteRecursively(new File(new File(environment.workWithClusterFile(),FsStores.DEFAULT_INDICES_LOCATION),injector.getInstance(ClusterService.class).state().nodes().localNodeId()));
  }
 catch (  Exception e) {
  }
  Injectors.close(injector);
  logger.info("{{}}: Stopped",Version.full());
  return this;
}
