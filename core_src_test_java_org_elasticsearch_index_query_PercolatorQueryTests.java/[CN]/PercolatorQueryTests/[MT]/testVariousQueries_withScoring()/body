{
  SpanNearQuery.Builder snp=new SpanNearQuery.Builder("field",true);
  snp.addClause(new SpanTermQuery(new Term("field","jumps")));
  snp.addClause(new SpanTermQuery(new Term("field","lazy")));
  snp.addClause(new SpanTermQuery(new Term("field","dog")));
  snp.setSlop(2);
  addPercolatorQuery("1",snp.build());
  PhraseQuery.Builder pq1=new PhraseQuery.Builder();
  pq1.add(new Term("field","quick"));
  pq1.add(new Term("field","brown"));
  pq1.add(new Term("field","jumps"));
  pq1.setSlop(1);
  addPercolatorQuery("2",pq1.build());
  BooleanQuery.Builder bq1=new BooleanQuery.Builder();
  bq1.add(new TermQuery(new Term("field","quick")),BooleanClause.Occur.MUST);
  bq1.add(new TermQuery(new Term("field","brown")),BooleanClause.Occur.MUST);
  bq1.add(new TermQuery(new Term("field","fox")),BooleanClause.Occur.MUST);
  addPercolatorQuery("3",bq1.build());
  indexWriter.close();
  directoryReader=DirectoryReader.open(directory);
  IndexSearcher shardSearcher=newSearcher(directoryReader);
  MemoryIndex memoryIndex=new MemoryIndex();
  memoryIndex.addField("field","the quick brown fox jumps over the lazy dog",new WhitespaceAnalyzer());
  IndexSearcher percolateSearcher=memoryIndex.createSearcher();
  PercolatorQuery.Builder builder=new PercolatorQuery.Builder("docType",queryRegistry,new BytesArray("{}"),percolateSearcher);
  builder.extractQueryTermsQuery(EXTRACTED_TERMS_FIELD_NAME,UNKNOWN_QUERY_FIELD_NAME);
  Query query=builder.build();
  TopDocs topDocs=shardSearcher.search(query,10);
  assertThat(topDocs.totalHits,equalTo(3));
  assertThat(topDocs.scoreDocs[0].doc,equalTo(2));
  Explanation explanation=shardSearcher.explain(query,2);
  assertThat(explanation.isMatch(),is(true));
  assertThat(explanation.getValue(),equalTo(topDocs.scoreDocs[0].score));
  assertThat(explanation.getDetails(),arrayWithSize(1));
  assertThat(topDocs.scoreDocs[1].doc,equalTo(1));
  explanation=shardSearcher.explain(query,1);
  assertThat(explanation.isMatch(),is(true));
  assertThat(explanation.getValue(),equalTo(topDocs.scoreDocs[1].score));
  assertThat(explanation.getDetails(),arrayWithSize(1));
  assertThat(topDocs.scoreDocs[2].doc,equalTo(0));
  explanation=shardSearcher.explain(query,0);
  assertThat(explanation.isMatch(),is(true));
  assertThat(explanation.getValue(),equalTo(topDocs.scoreDocs[2].score));
  assertThat(explanation.getDetails(),arrayWithSize(1));
}
