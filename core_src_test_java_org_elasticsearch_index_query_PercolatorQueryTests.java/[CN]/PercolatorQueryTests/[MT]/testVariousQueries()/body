{
  addPercolatorQuery("1",new TermQuery(new Term("field","brown")));
  addPercolatorQuery("2",new TermQuery(new Term("field","monkey")));
  addPercolatorQuery("3",new TermQuery(new Term("field","fox")));
  BooleanQuery.Builder bq1=new BooleanQuery.Builder();
  bq1.add(new TermQuery(new Term("field","fox")),BooleanClause.Occur.SHOULD);
  bq1.add(new TermQuery(new Term("field","monkey")),BooleanClause.Occur.SHOULD);
  addPercolatorQuery("4",bq1.build());
  BooleanQuery.Builder bq2=new BooleanQuery.Builder();
  bq2.add(new TermQuery(new Term("field","fox")),BooleanClause.Occur.MUST);
  bq2.add(new TermQuery(new Term("field","monkey")),BooleanClause.Occur.MUST);
  addPercolatorQuery("5",bq2.build());
  BooleanQuery.Builder bq3=new BooleanQuery.Builder();
  bq3.add(new TermQuery(new Term("field","fox")),BooleanClause.Occur.MUST);
  bq3.add(new TermQuery(new Term("field","apes")),BooleanClause.Occur.MUST_NOT);
  addPercolatorQuery("6",bq3.build());
  BooleanQuery.Builder bq4=new BooleanQuery.Builder();
  bq4.add(new TermQuery(new Term("field","fox")),BooleanClause.Occur.MUST_NOT);
  bq4.add(new TermQuery(new Term("field","apes")),BooleanClause.Occur.MUST);
  addPercolatorQuery("7",bq4.build());
  PhraseQuery.Builder pq1=new PhraseQuery.Builder();
  pq1.add(new Term("field","lazy"));
  pq1.add(new Term("field","dog"));
  addPercolatorQuery("8",pq1.build());
  indexWriter.close();
  directoryReader=DirectoryReader.open(directory);
  IndexSearcher shardSearcher=newSearcher(directoryReader);
  MemoryIndex memoryIndex=new MemoryIndex();
  memoryIndex.addField("field","the quick brown fox jumps over the lazy dog",new WhitespaceAnalyzer());
  IndexSearcher percolateSearcher=memoryIndex.createSearcher();
  PercolatorQuery.Builder builder=new PercolatorQuery.Builder("docType",queryRegistry,new BytesArray("{}"),percolateSearcher,new MatchAllDocsQuery());
  builder.extractQueryTermsQuery(EXTRACTED_TERMS_FIELD_NAME,UNKNOWN_QUERY_FIELD_NAME);
  TopDocs topDocs=shardSearcher.search(builder.build(),10);
  assertThat(topDocs.totalHits,equalTo(5));
  assertThat(topDocs.scoreDocs.length,equalTo(5));
  assertThat(topDocs.scoreDocs[0].doc,equalTo(0));
  assertThat(topDocs.scoreDocs[1].doc,equalTo(2));
  assertThat(topDocs.scoreDocs[2].doc,equalTo(3));
  assertThat(topDocs.scoreDocs[3].doc,equalTo(5));
  assertThat(topDocs.scoreDocs[4].doc,equalTo(7));
}
