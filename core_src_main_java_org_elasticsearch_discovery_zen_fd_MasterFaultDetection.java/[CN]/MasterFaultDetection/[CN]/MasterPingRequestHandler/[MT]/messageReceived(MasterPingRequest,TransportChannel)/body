{
  final DiscoveryNodes nodes=clusterService.state().nodes();
  if (!request.masterNodeId.equals(nodes.getLocalNodeId())) {
    throw new ThisIsNotTheMasterYouAreLookingForException();
  }
  if (request.clusterName != null && !request.clusterName.equals(clusterName)) {
    logger.trace("master fault detection ping request is targeted for a different [{}] cluster then us [{}]",request.clusterName,clusterName);
    throw new ThisIsNotTheMasterYouAreLookingForException("master fault detection ping request is targeted for a different [" + request.clusterName + "] cluster then us ["+ clusterName+ "]");
  }
  if (!nodes.isLocalNodeElectedMaster() || !nodes.nodeExists(request.nodeId)) {
    logger.trace("checking ping from [{}] under a cluster state thread",request.nodeId);
    clusterService.submitStateUpdateTask("master ping (from: [" + request.nodeId + "])",new ClusterStateUpdateTask(){
      @Override public ClusterState execute(      ClusterState currentState) throws Exception {
        DiscoveryNodes nodes=currentState.nodes();
        if (!nodes.nodeExists(request.nodeId)) {
          throw new NodeDoesNotExistOnMasterException();
        }
        return currentState;
      }
      @Override public void onNoLongerMaster(      String source){
        onFailure(source,new NotMasterException("local node is not master"));
      }
      @Override public void onFailure(      String source,      @Nullable Throwable t){
        if (t == null) {
          t=new ElasticsearchException("unknown error while processing ping");
        }
        try {
          channel.sendResponse(t);
        }
 catch (        IOException e) {
          logger.warn("error while sending ping response",e);
        }
      }
      @Override public void clusterStateProcessed(      String source,      ClusterState oldState,      ClusterState newState){
        try {
          channel.sendResponse(new MasterPingResponseResponse());
        }
 catch (        IOException e) {
          logger.warn("error while sending ping response",e);
        }
      }
    }
);
  }
 else {
    channel.sendResponse(new MasterPingResponseResponse());
  }
}
