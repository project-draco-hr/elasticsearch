{
  this.index=indexMetaData.getIndex().getName();
  this.numberOfShards=indexMetaData.getNumberOfShards();
  this.numberOfReplicas=indexMetaData.getNumberOfReplicas();
  for (  IndexShardRoutingTable shardRoutingTable : indexRoutingTable) {
    int shardId=shardRoutingTable.shardId().id();
    shards.put(shardId,new ClusterShardHealth(shardId,shardRoutingTable));
  }
  ClusterHealthStatus computeStatus=ClusterHealthStatus.GREEN;
  int computeActivePrimaryShards=0;
  int computeActiveShards=0;
  int computeRelocatingShards=0;
  int computeInitializingShards=0;
  int computeUnassignedShards=0;
  for (  ClusterShardHealth shardHealth : shards.values()) {
    if (shardHealth.isPrimaryActive()) {
      computeActivePrimaryShards++;
    }
    computeActiveShards+=shardHealth.getActiveShards();
    computeRelocatingShards+=shardHealth.getRelocatingShards();
    computeInitializingShards+=shardHealth.getInitializingShards();
    computeUnassignedShards+=shardHealth.getUnassignedShards();
    if (shardHealth.getStatus() == ClusterHealthStatus.RED) {
      computeStatus=ClusterHealthStatus.RED;
    }
 else     if (shardHealth.getStatus() == ClusterHealthStatus.YELLOW && computeStatus != ClusterHealthStatus.RED) {
      computeStatus=ClusterHealthStatus.YELLOW;
    }
  }
  if (shards.isEmpty()) {
    computeStatus=ClusterHealthStatus.RED;
  }
  this.status=computeStatus;
  this.activePrimaryShards=computeActivePrimaryShards;
  this.activeShards=computeActiveShards;
  this.relocatingShards=computeRelocatingShards;
  this.initializingShards=computeInitializingShards;
  this.unassignedShards=computeUnassignedShards;
}
