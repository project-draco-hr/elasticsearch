{
  Settings settings=Settings.builder().build();
  httpServerTransport=new Netty3HttpServerTransport(settings,networkService,bigArrays,threadPool);
  HttpRequest httpRequest=new TestHttpRequest();
  httpRequest.headers().add(HttpHeaders.Names.ORIGIN,"remote");
  WriteCapturingChannel writeCapturingChannel=new WriteCapturingChannel();
  Netty3HttpRequest request=new Netty3HttpRequest(httpRequest,writeCapturingChannel);
  Netty3HttpChannel channel=new Netty3HttpChannel(httpServerTransport,request,null,randomBoolean(),threadPool.getThreadContext());
  TestReponse resp=new TestReponse();
  final String customHeader="custom-header";
  final String customHeaderValue="xyz";
  resp.addHeader(customHeader,customHeaderValue);
  channel.sendResponse(resp);
  List<Object> writtenObjects=writeCapturingChannel.getWrittenObjects();
  assertThat(writtenObjects.size(),is(1));
  HttpResponse response=(HttpResponse)writtenObjects.get(0);
  assertThat(response.headers().get("non-existent-header"),nullValue());
  assertThat(response.headers().get(customHeader),equalTo(customHeaderValue));
  assertThat(response.headers().get(HttpHeaders.Names.CONTENT_LENGTH),equalTo(Integer.toString(resp.content().length())));
  assertThat(response.headers().get(HttpHeaders.Names.CONTENT_TYPE),equalTo(resp.contentType()));
}
