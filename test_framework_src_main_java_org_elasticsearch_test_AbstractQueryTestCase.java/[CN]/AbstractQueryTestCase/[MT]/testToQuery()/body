{
  for (int runs=0; runs < NUMBER_OF_TESTQUERIES; runs++) {
    QueryShardContext context=createShardContext();
    context.setAllowUnmappedFields(true);
    QB firstQuery=createTestQueryBuilder();
    QB controlQuery=copyQuery(firstQuery);
    setSearchContext(randomTypes,context);
    Query firstLuceneQuery=rewriteQuery(firstQuery,context).toQuery(context);
    assertNotNull("toQuery should not return null",firstLuceneQuery);
    assertLuceneQuery(firstQuery,firstLuceneQuery,context);
    SearchContext.removeCurrent();
    assertTrue("query is not equal to its copy after calling toQuery, firstQuery: " + firstQuery + ", secondQuery: "+ controlQuery,firstQuery.equals(controlQuery));
    assertTrue("equals is not symmetric after calling toQuery, firstQuery: " + firstQuery + ", secondQuery: "+ controlQuery,controlQuery.equals(firstQuery));
    assertThat("query copy's hashcode is different from original hashcode after calling toQuery, firstQuery: " + firstQuery + ", secondQuery: "+ controlQuery,controlQuery.hashCode(),equalTo(firstQuery.hashCode()));
    QB secondQuery=copyQuery(firstQuery);
    if (randomBoolean()) {
      secondQuery.queryName(secondQuery.queryName() == null ? randomAsciiOfLengthBetween(1,30) : secondQuery.queryName() + randomAsciiOfLengthBetween(1,10));
    }
    setSearchContext(randomTypes,context);
    Query secondLuceneQuery=rewriteQuery(secondQuery,context).toQuery(context);
    assertNotNull("toQuery should not return null",secondLuceneQuery);
    assertLuceneQuery(secondQuery,secondLuceneQuery,context);
    SearchContext.removeCurrent();
    assertEquals("two equivalent query builders lead to different lucene queries",rewrite(secondLuceneQuery),rewrite(firstLuceneQuery));
    if (supportsBoostAndQueryName()) {
      secondQuery.boost(firstQuery.boost() + 1f + randomFloat());
      setSearchContext(randomTypes,context);
      Query thirdLuceneQuery=rewriteQuery(secondQuery,context).toQuery(context);
      SearchContext.removeCurrent();
      assertNotEquals("modifying the boost doesn't affect the corresponding lucene query",rewrite(firstLuceneQuery),rewrite(thirdLuceneQuery));
    }
    boolean filterFlag=randomBoolean();
    context.setIsFilter(filterFlag);
    rewriteQuery(firstQuery,context).toQuery(context);
    assertEquals("isFilter should be unchanged",filterFlag,context.isFilter());
  }
}
