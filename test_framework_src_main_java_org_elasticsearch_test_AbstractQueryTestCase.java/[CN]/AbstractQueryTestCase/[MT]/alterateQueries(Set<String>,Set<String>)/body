{
  List<Tuple<String,Boolean>> results=new ArrayList<>();
  boolean hasArbitraryContent=(arbitraryMarkers != null && arbitraryMarkers.isEmpty() == false);
  for (  String query : queries) {
    int mutation=0;
    while (true) {
      boolean expectException=true;
      BytesStreamOutput out=new BytesStreamOutput();
      try (XContentGenerator generator=XContentType.JSON.xContent().createGenerator(out);XContentParser parser=XContentHelper.createParser(new BytesArray(query))){
        int objectIndex=-1;
        Deque<String> levels=new LinkedList<>();
        XContentParser.Token token;
        while ((token=parser.nextToken()) != null) {
          if (token == XContentParser.Token.START_OBJECT) {
            objectIndex++;
            levels.addLast(parser.currentName());
            if (objectIndex == mutation) {
              generator.writeStartObject();
              generator.writeFieldName("newField");
              XContentHelper.copyCurrentStructure(generator,parser);
              generator.writeEndObject();
              if (hasArbitraryContent) {
                String h=Arrays.toString(levels.toArray());
                for (                String marker : arbitraryMarkers) {
                  if (levels.contains(marker)) {
                    expectException=false;
                    break;
                  }
                }
              }
              continue;
            }
          }
 else           if (token == XContentParser.Token.END_OBJECT) {
            levels.removeLast();
          }
          XContentHelper.copyCurrentEvent(generator,parser);
        }
        assertThat(token,nullValue());
        if (objectIndex < mutation) {
          break;
        }
 else {
          mutation++;
        }
      }
       results.add(new Tuple<>(out.bytes().utf8ToString(),expectException));
    }
  }
  return results;
}
