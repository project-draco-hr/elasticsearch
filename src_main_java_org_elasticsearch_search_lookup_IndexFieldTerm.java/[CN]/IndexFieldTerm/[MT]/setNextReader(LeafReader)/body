{
  try {
    if (!shouldRetrieveFrequenciesOnly()) {
      postings=getPostings(getLucenePositionsFlags(flags),reader);
    }
    if (postings == null) {
      postings=getPostings(getLuceneFrequencyFlag(flags),reader);
      if (postings != null) {
        final PostingsEnum p=postings;
        postings=new PostingsEnum(){
          @Override public int freq() throws IOException {
            return p.freq();
          }
          @Override public int nextPosition() throws IOException {
            return -1;
          }
          @Override public int startOffset() throws IOException {
            return -1;
          }
          @Override public int endOffset() throws IOException {
            return -1;
          }
          @Override public BytesRef getPayload() throws IOException {
            return null;
          }
          @Override public int docID(){
            return p.docID();
          }
          @Override public int nextDoc() throws IOException {
            return p.nextDoc();
          }
          @Override public int advance(          int target) throws IOException {
            return p.advance(target);
          }
          @Override public long cost(){
            return p.cost();
          }
        }
;
      }
    }
    if (postings == null) {
      postings=EMPTY_SCORER;
    }
  }
 catch (  IOException e) {
    throw new ElasticsearchException("Unable to get posting list for field " + fieldName + " and term "+ term,e);
  }
}
