{
  HttpDownloadHelper downloadHelper=new HttpDownloadHelper();
  if (!environment.pluginsFile().canWrite()) {
    System.out.println();
    throw new IOException("plugin directory " + environment.pluginsFile() + " is read only");
  }
  File pluginFile=new File(environment.pluginsFile(),name + ".zip");
  boolean downloaded=false;
  if (url != null) {
    URL pluginUrl=new URL(url);
    System.out.println("Trying " + pluginUrl.toExternalForm() + "...");
    try {
      downloadHelper.download(pluginUrl,pluginFile,new HttpDownloadHelper.VerboseProgress(System.out));
      downloaded=true;
    }
 catch (    IOException e) {
      if (verbose) {
        System.out.println("Failed: " + ExceptionsHelper.detailedMessage(e));
      }
    }
  }
  if (!downloaded) {
    if (name.indexOf('/') != -1) {
      String[] elements=name.split("/");
      String userName=elements[0];
      String repoName=elements[1];
      String version=null;
      if (elements.length > 2) {
        version=elements[2];
      }
      name=repoName;
      if (name.startsWith("elasticsearch-")) {
        name=name.substring("elasticsearch-".length());
      }
 else       if (name.startsWith("es-")) {
        name=name.substring("es-".length());
      }
      pluginFile=new File(environment.pluginsFile(),name + ".zip");
      if (version != null) {
        URL pluginUrl=new URL("http://download.elasticsearch.org/" + userName + "/"+ repoName+ "/"+ repoName+ "-"+ version+ ".zip");
        System.out.println("Trying " + pluginUrl.toExternalForm() + "...");
        try {
          downloadHelper.download(pluginUrl,pluginFile,new HttpDownloadHelper.VerboseProgress(System.out));
          downloaded=true;
        }
 catch (        Exception e) {
          if (verbose) {
            System.out.println("Failed: " + ExceptionsHelper.detailedMessage(e));
          }
        }
        if (!downloaded) {
          pluginUrl=new URL("http://search.maven.org/remotecontent?filepath=" + userName.replace('.','/') + "/"+ repoName+ "/"+ version+ "/"+ repoName+ "-"+ version+ ".zip");
          System.out.println("Trying " + pluginUrl.toExternalForm() + "...");
          try {
            downloadHelper.download(pluginUrl,pluginFile,new HttpDownloadHelper.VerboseProgress(System.out));
            downloaded=true;
          }
 catch (          Exception e) {
            if (verbose) {
              System.out.println("Failed: " + ExceptionsHelper.detailedMessage(e));
            }
          }
          if (!downloaded) {
            pluginUrl=new URL("https://oss.sonatype.org/service/local/repositories/releases/content/" + userName.replace('.','/') + "/"+ repoName+ "/"+ version+ "/"+ repoName+ "-"+ version+ ".zip");
            System.out.println("Trying " + pluginUrl.toExternalForm() + "...");
            try {
              downloadHelper.download(pluginUrl,pluginFile,new HttpDownloadHelper.VerboseProgress(System.out));
              downloaded=true;
            }
 catch (            Exception e) {
              if (verbose) {
                System.out.println("Failed: " + ExceptionsHelper.detailedMessage(e));
              }
            }
          }
        }
        if (!downloaded) {
          pluginUrl=new URL("https://github.com/" + userName + "/"+ repoName+ "/archive/v"+ version+ ".zip");
          System.out.println("Trying " + pluginUrl.toExternalForm() + "... (assuming site plugin)");
          try {
            downloadHelper.download(pluginUrl,pluginFile,new HttpDownloadHelper.VerboseProgress(System.out));
            downloaded=true;
          }
 catch (          Exception e1) {
            if (verbose) {
              System.out.println("Failed: " + ExceptionsHelper.detailedMessage(e1));
            }
          }
        }
      }
 else {
        URL pluginUrl=new URL("https://github.com/" + userName + "/"+ repoName+ "/archive/master.zip");
        System.out.println("Trying " + pluginUrl.toExternalForm() + "... (assuming site plugin)");
        try {
          downloadHelper.download(pluginUrl,pluginFile,new HttpDownloadHelper.VerboseProgress(System.out));
          downloaded=true;
        }
 catch (        Exception e2) {
          if (verbose) {
            System.out.println("Failed: " + ExceptionsHelper.detailedMessage(e2));
          }
        }
      }
    }
  }
  if (!downloaded) {
    throw new IOException("failed to download out of all possible locations..., use -verbose to get detailed information");
  }
  File extractLocation=new File(environment.pluginsFile(),name);
  if (extractLocation.exists()) {
    throw new IOException("plugin directory " + extractLocation.getAbsolutePath() + " already exists. To update the plugin, uninstall it first using -remove "+ name+ " command");
  }
  ZipFile zipFile=null;
  try {
    zipFile=new ZipFile(pluginFile);
    boolean removeTopLevelDir=topLevelDirInExcess(zipFile);
    Enumeration<? extends ZipEntry> zipEntries=zipFile.entries();
    while (zipEntries.hasMoreElements()) {
      ZipEntry zipEntry=zipEntries.nextElement();
      if (zipEntry.isDirectory()) {
        continue;
      }
      String zipEntryName=zipEntry.getName().replace('\\','/');
      if (removeTopLevelDir) {
        zipEntryName=zipEntryName.substring(zipEntryName.indexOf('/'));
      }
      File target=new File(extractLocation,zipEntryName);
      FileSystemUtils.mkdirs(target.getParentFile());
      Streams.copy(zipFile.getInputStream(zipEntry),new FileOutputStream(target));
    }
    System.out.println("Installed " + name + " into "+ extractLocation.getAbsolutePath());
  }
 catch (  Exception e) {
    System.err.println("failed to extract plugin [" + pluginFile + "]: "+ ExceptionsHelper.detailedMessage(e));
    return;
  }
 finally {
    if (zipFile != null) {
      try {
        zipFile.close();
      }
 catch (      IOException e) {
      }
    }
    pluginFile.delete();
  }
  if (FileSystemUtils.hasExtensions(extractLocation,".java")) {
    System.out.println("Plugin installation assumed to be site plugin, but contains source code, aborting installation...");
    FileSystemUtils.deleteRecursively(extractLocation);
    return;
  }
  File binFile=new File(extractLocation,"bin");
  if (binFile.exists() && binFile.isDirectory()) {
    File toLocation=new File(new File(environment.homeFile(),"bin"),name);
    System.out.println("Found bin, moving to " + toLocation.getAbsolutePath());
    FileSystemUtils.deleteRecursively(toLocation);
    binFile.renameTo(toLocation);
    System.out.println("Installed " + name + " into "+ toLocation.getAbsolutePath());
  }
  if (!new File(extractLocation,"_site").exists()) {
    if (!FileSystemUtils.hasExtensions(extractLocation,".class",".jar")) {
      System.out.println("Identified as a _site plugin, moving to _site structure ...");
      File site=new File(extractLocation,"_site");
      File tmpLocation=new File(environment.pluginsFile(),name + ".tmp");
      extractLocation.renameTo(tmpLocation);
      FileSystemUtils.mkdirs(extractLocation);
      tmpLocation.renameTo(site);
      System.out.println("Installed " + name + " into "+ site.getAbsolutePath());
    }
  }
}
