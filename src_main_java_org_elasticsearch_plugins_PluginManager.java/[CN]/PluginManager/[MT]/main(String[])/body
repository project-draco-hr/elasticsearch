{
  Tuple<Settings,Environment> initialSettings=InternalSettingsPerparer.prepareSettings(EMPTY_SETTINGS,true);
  if (!initialSettings.v2().pluginsFile().exists()) {
    FileSystemUtils.mkdirs(initialSettings.v2().pluginsFile());
  }
  String url=null;
  for (int i=0; i < args.length; i++) {
    if ("url".equals(args[i]) || "-url".equals(args[i])) {
      url=args[i + 1];
      break;
    }
  }
  PluginManager pluginManager=new PluginManager(initialSettings.v2(),url);
  if (args.length < 1) {
    System.out.println("Usage:");
    System.out.println("    -url     [plugins location]  : Set URL to download plugins from");
    System.out.println("    -install [plugin name]       : Downloads and installs listed plugins");
    System.out.println("    -remove  [plugin name]       : Removes listed plugins");
  }
  for (int c=0; c < args.length; c++) {
    String command=args[c];
    if (command.equals("install") || command.equals("-install")) {
      String pluginName=args[++c];
      System.out.println("-> Installing " + pluginName + "...");
      try {
        pluginManager.downloadAndExtract(pluginName);
      }
 catch (      IOException e) {
        System.out.println("Failed to install " + pluginName + ", reason: "+ e.getMessage());
      }
    }
 else     if (command.equals("remove") || command.equals("-remove")) {
      String pluginName=args[++c];
      System.out.println("-> Removing " + pluginName + " ");
      try {
        pluginManager.removePlugin(pluginName);
      }
 catch (      IOException e) {
        System.out.println("Failed to remove " + pluginName + ", reason: "+ e.getMessage());
      }
    }
 else {
      c++;
    }
  }
}
