{
  Tuple<Settings,Environment> initialSettings=InternalSettingsPreparer.prepareSettings(EMPTY_SETTINGS,true);
  try {
    Files.createDirectories(initialSettings.v2().pluginsFile());
  }
 catch (  IOException e) {
    displayHelp("Unable to create plugins dir: " + initialSettings.v2().pluginsFile());
    System.exit(EXIT_CODE_ERROR);
  }
  String url=null;
  OutputMode outputMode=OutputMode.DEFAULT;
  String pluginName=null;
  TimeValue timeout=DEFAULT_TIMEOUT;
  int action=ACTION.NONE;
  if (args.length < 1) {
    displayHelp(null);
  }
  try {
    for (int c=0; c < args.length; c++) {
      String command=args[c];
switch (command) {
case "-u":
case "--url":
case "url":
case "-url":
        url=getCommandValue(args,++c,"--url");
      action=ACTION.INSTALL;
    break;
case "-v":
case "--verbose":
case "verbose":
case "-verbose":
  outputMode=OutputMode.VERBOSE;
break;
case "-s":
case "--silent":
case "silent":
case "-silent":
outputMode=OutputMode.SILENT;
break;
case "-i":
case "--install":
case "install":
case "-install":
pluginName=getCommandValue(args,++c,"--install");
action=ACTION.INSTALL;
break;
case "-r":
case "--remove":
case "remove":
case "-remove":
pluginName=getCommandValue(args,++c,"--remove");
action=ACTION.REMOVE;
break;
case "-t":
case "--timeout":
case "timeout":
case "-timeout":
String timeoutValue=getCommandValue(args,++c,"--timeout");
timeout=TimeValue.parseTimeValue(timeoutValue,DEFAULT_TIMEOUT);
break;
case "-l":
case "--list":
action=ACTION.LIST;
break;
case "-h":
case "--help":
displayHelp(null);
break;
default :
displayHelp("Command [" + command + "] unknown.");
System.exit(EXIT_CODE_CMD_USAGE);
}
}
}
 catch (Throwable e) {
displayHelp("Error while parsing options: " + e.getClass().getSimpleName() + ": "+ e.getMessage());
System.exit(EXIT_CODE_CMD_USAGE);
}
if (action > ACTION.NONE) {
int exitCode=EXIT_CODE_ERROR;
PluginManager pluginManager=new PluginManager(initialSettings.v2(),url,outputMode,timeout);
switch (action) {
case ACTION.INSTALL:
try {
pluginManager.log("-> Installing " + Strings.nullToEmpty(pluginName) + "...");
pluginManager.downloadAndExtract(pluginName);
exitCode=EXIT_CODE_OK;
}
 catch (IOException e) {
exitCode=EXIT_CODE_IO_ERROR;
pluginManager.log("Failed to install " + pluginName + ", reason: "+ e.getMessage());
}
catch (Throwable e) {
exitCode=EXIT_CODE_ERROR;
displayHelp("Error while installing plugin, reason: " + e.getClass().getSimpleName() + ": "+ e.getMessage());
}
break;
case ACTION.REMOVE:
try {
pluginManager.log("-> Removing " + Strings.nullToEmpty(pluginName) + "...");
pluginManager.removePlugin(pluginName);
exitCode=EXIT_CODE_OK;
}
 catch (IllegalArgumentException e) {
exitCode=EXIT_CODE_CMD_USAGE;
pluginManager.log("Failed to remove " + pluginName + ", reason: "+ e.getMessage());
}
catch (IOException e) {
exitCode=EXIT_CODE_IO_ERROR;
pluginManager.log("Failed to remove " + pluginName + ", reason: "+ e.getMessage());
}
catch (Throwable e) {
exitCode=EXIT_CODE_ERROR;
displayHelp("Error while removing plugin, reason: " + e.getClass().getSimpleName() + ": "+ e.getMessage());
}
break;
case ACTION.LIST:
try {
pluginManager.listInstalledPlugins();
exitCode=EXIT_CODE_OK;
}
 catch (Throwable e) {
displayHelp("Error while listing plugins, reason: " + e.getClass().getSimpleName() + ": "+ e.getMessage());
}
break;
default :
pluginManager.log("Unknown Action [" + action + "]");
exitCode=EXIT_CODE_ERROR;
}
System.exit(exitCode);
}
}
