{
  HttpDownloadHelper downloadHelper=new HttpDownloadHelper();
  File pluginFile=new File(url + "/" + name+ "/elasticsearch-"+ name+ "-"+ Version.CURRENT.number()+ ".zip");
  boolean downloaded=false;
  String filterZipName=null;
  if (!pluginFile.exists()) {
    pluginFile=new File(url + "/elasticsearch-" + name+ "-"+ Version.CURRENT.number()+ ".zip");
    if (!pluginFile.exists()) {
      pluginFile=new File(environment.pluginsFile(),name + ".zip");
      if (url != null) {
        URL pluginUrl=new URL(url);
        System.out.println("Trying " + pluginUrl.toExternalForm() + "...");
        try {
          downloadHelper.download(pluginUrl,pluginFile,new HttpDownloadHelper.VerboseProgress(System.out));
          downloaded=true;
        }
 catch (        IOException e) {
        }
      }
 else {
        url="http://elasticsearch.googlecode.com/svn/plugins";
      }
      if (!downloaded) {
        if (name.indexOf('/') != -1) {
          String[] elements=name.split("/");
          String userName=elements[0];
          String repoName=elements[1];
          String version=null;
          if (elements.length > 2) {
            version=elements[2];
          }
          filterZipName=userName + "-" + repoName;
          name=repoName;
          if (name.startsWith("elasticsearch-")) {
            name=name.substring("elasticsearch-".length());
          }
 else           if (name.startsWith("es-")) {
            name=name.substring("es-".length());
          }
          pluginFile=new File(environment.pluginsFile(),name + ".zip");
          if (version == null) {
            URL pluginUrl=new URL("https://github.com/downloads/" + userName + "/"+ repoName+ "/"+ repoName+ "-"+ Version.CURRENT.number()+ ".zip");
            System.out.println("Trying " + pluginUrl.toExternalForm() + "...");
            try {
              downloadHelper.download(pluginUrl,pluginFile,new HttpDownloadHelper.VerboseProgress(System.out));
              downloaded=true;
            }
 catch (            IOException e) {
              pluginUrl=new URL("https://github.com/" + userName + "/"+ repoName+ "/zipball/v"+ Version.CURRENT.number());
              System.out.println("Trying " + pluginUrl.toExternalForm() + "...");
              try {
                downloadHelper.download(pluginUrl,pluginFile,new HttpDownloadHelper.VerboseProgress(System.out));
                downloaded=true;
              }
 catch (              IOException e1) {
                pluginUrl=new URL("https://github.com/" + userName + "/"+ repoName+ "/zipball/master");
                System.out.println("Trying " + pluginUrl.toExternalForm() + "...");
                try {
                  downloadHelper.download(pluginUrl,pluginFile,new HttpDownloadHelper.VerboseProgress(System.out));
                  downloaded=true;
                }
 catch (                IOException e2) {
                }
              }
            }
          }
 else {
            URL pluginUrl=new URL("https://github.com/downloads/" + userName + "/"+ repoName+ "/"+ repoName+ "-"+ version+ ".zip");
            System.out.println("Trying " + pluginUrl.toExternalForm() + "...");
            try {
              downloadHelper.download(pluginUrl,pluginFile,new HttpDownloadHelper.VerboseProgress(System.out));
              downloaded=true;
            }
 catch (            IOException e) {
              pluginUrl=new URL("https://github.com/" + userName + "/"+ repoName+ "/zipball/v"+ version);
              System.out.println("Trying " + pluginUrl.toExternalForm() + "...");
              try {
                downloadHelper.download(pluginUrl,pluginFile,new HttpDownloadHelper.VerboseProgress(System.out));
                downloaded=true;
              }
 catch (              IOException e1) {
              }
            }
          }
        }
 else {
          URL pluginUrl=new URL(url + "/" + name+ "/elasticsearch-"+ name+ "-"+ Version.CURRENT.number()+ ".zip");
          System.out.println("Trying " + pluginUrl.toExternalForm() + "...");
          try {
            downloadHelper.download(pluginUrl,pluginFile,new HttpDownloadHelper.VerboseProgress(System.out));
            downloaded=true;
          }
 catch (          IOException e) {
          }
        }
      }
    }
 else {
      System.out.println("Using plugin from local fs: " + pluginFile.getAbsolutePath());
      downloaded=true;
    }
  }
 else {
    System.out.println("Using plugin from local fs: " + pluginFile.getAbsolutePath());
    downloaded=true;
  }
  if (!downloaded) {
    throw new IOException("failed to download");
  }
  File extractLocation=new File(environment.pluginsFile(),name);
  ZipFile zipFile=null;
  try {
    zipFile=new ZipFile(pluginFile);
    Enumeration<? extends ZipEntry> zipEntries=zipFile.entries();
    while (zipEntries.hasMoreElements()) {
      ZipEntry zipEntry=zipEntries.nextElement();
      if (zipEntry.isDirectory()) {
        continue;
      }
      String zipName=zipEntry.getName().replace('\\','/');
      if (filterZipName != null) {
        if (zipName.startsWith(filterZipName)) {
          zipName=zipName.substring(zipName.indexOf('/'));
        }
      }
      File target=new File(extractLocation,zipName);
      FileSystemUtils.mkdirs(target.getParentFile());
      Streams.copy(zipFile.getInputStream(zipEntry),new FileOutputStream(target));
    }
  }
 catch (  Exception e) {
    System.err.println("failed to extract plugin [" + pluginFile + "]");
  }
 finally {
    if (zipFile != null) {
      try {
        zipFile.close();
      }
 catch (      IOException e) {
      }
    }
    pluginFile.delete();
  }
  File binFile=new File(extractLocation,"bin");
  if (binFile.exists() && binFile.isDirectory()) {
    File toLocation=new File(new File(environment.homeFile(),"bin"),name);
    System.out.println("Found bin, moving to " + toLocation.getAbsolutePath());
    FileSystemUtils.deleteRecursively(toLocation);
    binFile.renameTo(toLocation);
  }
  if (!new File(extractLocation,"_site").exists()) {
    if (!FileSystemUtils.hasExtensions(extractLocation,".class",".jar")) {
      System.out.println("Identified as a _site plugin, moving to _site structure ...");
      File site=new File(extractLocation,"_site");
      File tmpLocation=new File(environment.pluginsFile(),name + ".tmp");
      extractLocation.renameTo(tmpLocation);
      FileSystemUtils.mkdirs(extractLocation);
      tmpLocation.renameTo(site);
    }
  }
  System.out.println("Installed " + name);
}
