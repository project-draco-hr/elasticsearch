{
  client().admin().indices().prepareDelete().execute().actionGet();
  client().admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards",1).put("index.number_of_replicas",0)).execute().actionGet();
  client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();
  client().admin().indices().preparePutMapping("test").setType("child").setSource(jsonBuilder().startObject().startObject("type").startObject("_parent").field("type","parent").endObject().endObject().endObject()).execute().actionGet();
  Map<String,Set<String>> parentToChildren=newHashMap();
  client().prepareIndex("test","parent","p0").setSource("p_field","p0").execute().actionGet();
  parentToChildren.put("p0",new HashSet<String>());
  String previousParentId=null;
  int numChildDocs=32;
  int numChildDocsPerParent=0;
  List<IndexRequestBuilder> builders=new ArrayList<IndexRequestBuilder>();
  for (int i=1; i <= numChildDocs; i++) {
    if (previousParentId == null || i % numChildDocsPerParent == 0) {
      previousParentId="p" + i;
      builders.add(client().prepareIndex("test","parent",previousParentId).setSource("p_field",previousParentId));
      numChildDocsPerParent++;
    }
    String childId="c" + i;
    builders.add(client().prepareIndex("test","child",childId).setSource("c_field",childId).setParent(previousParentId));
    if (!parentToChildren.containsKey(previousParentId)) {
      parentToChildren.put(previousParentId,new HashSet<String>());
    }
    assertThat(parentToChildren.get(previousParentId).add(childId),is(true));
  }
  indexRandom("test",true,builders.toArray(new IndexRequestBuilder[0]));
  assertThat(parentToChildren.isEmpty(),equalTo(false));
  for (  Map.Entry<String,Set<String>> parentToChildrenEntry : parentToChildren.entrySet()) {
    SearchResponse searchResponse=client().prepareSearch("test").setQuery(constantScoreQuery(hasParentFilter("parent",termQuery("p_field",parentToChildrenEntry.getKey())))).setSize(numChildDocsPerParent).execute().actionGet();
    assertThat("Failures " + Arrays.toString(searchResponse.getShardFailures()),searchResponse.getShardFailures().length,equalTo(0));
    assertThat(searchResponse.getFailedShards(),equalTo(0));
    Set<String> childIds=parentToChildrenEntry.getValue();
    assertThat(searchResponse.getHits().totalHits(),equalTo((long)childIds.size()));
    for (int i=0; i < searchResponse.getHits().totalHits(); i++) {
      assertThat(childIds.remove(searchResponse.getHits().getAt(i).id()),is(true));
      assertThat(searchResponse.getHits().getAt(i).score(),is(1.0f));
    }
    assertThat(childIds.size(),is(0));
  }
}
