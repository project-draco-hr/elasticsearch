{
  if (fieldName.equals("date_formats") || fieldName.equals("dynamic_date_formats")) {
    List<FormatDateTimeFormatter> dateTimeFormatters=new ArrayList<>();
    if (fieldNode instanceof List) {
      for (      Object node1 : (List)fieldNode) {
        if (node1.toString().startsWith("epoch_")) {
          throw new MapperParsingException("Epoch [" + node1.toString() + "] is not supported as dynamic date format");
        }
        dateTimeFormatters.add(parseDateTimeFormatter(node1));
      }
    }
 else     if ("none".equals(fieldNode.toString())) {
      dateTimeFormatters=null;
    }
 else {
      dateTimeFormatters.add(parseDateTimeFormatter(fieldNode));
    }
    if (dateTimeFormatters == null) {
      ((Builder)builder).noDynamicDateTimeFormatter();
    }
 else {
      ((Builder)builder).dynamicDateTimeFormatter(dateTimeFormatters);
    }
    return true;
  }
 else   if (fieldName.equals("dynamic_templates")) {
    List tmplNodes=(List)fieldNode;
    for (    Object tmplNode : tmplNodes) {
      Map<String,Object> tmpl=(Map<String,Object>)tmplNode;
      if (tmpl.size() != 1) {
        throw new MapperParsingException("A dynamic template must be defined with a name");
      }
      Map.Entry<String,Object> entry=tmpl.entrySet().iterator().next();
      String templateName=entry.getKey();
      Map<String,Object> templateParams=(Map<String,Object>)entry.getValue();
      DynamicTemplate template=DynamicTemplate.parse(templateName,templateParams,indexVersionCreated);
      ((Builder)builder).add(template);
    }
    return true;
  }
 else   if (fieldName.equals("date_detection")) {
    ((Builder)builder).dateDetection=lenientNodeBooleanValue(fieldNode);
    return true;
  }
 else   if (fieldName.equals("numeric_detection")) {
    ((Builder)builder).numericDetection=lenientNodeBooleanValue(fieldNode);
    return true;
  }
  return false;
}
