{
  XContentParser parser=parseContext.parser();
  boolean cache=false;
  CacheKeyFilter.Key cacheKey=null;
  String fieldName=null;
  List<GeoPoint> shell=Lists.newArrayList();
  boolean normalizeLon=true;
  boolean normalizeLat=true;
  String filterName=null;
  String currentFieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      fieldName=currentFieldName;
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          currentFieldName=parser.currentName();
        }
 else         if (token == XContentParser.Token.START_ARRAY) {
          if (POINTS.equals(currentFieldName)) {
            while ((token=parser.nextToken()) != Token.END_ARRAY) {
              shell.add(GeoUtils.parseGeoPoint(parser));
            }
          }
 else {
            throw new QueryParsingException(parseContext.index(),"[geo_polygon] filter does not support [" + currentFieldName + "]");
          }
        }
 else {
          throw new QueryParsingException(parseContext.index(),"[geo_polygon] filter does not support token type [" + token.name() + "] under ["+ currentFieldName+ "]");
        }
      }
    }
 else     if (token.isValue()) {
      if ("_name".equals(currentFieldName)) {
        filterName=parser.text();
      }
 else       if ("_cache".equals(currentFieldName)) {
        cache=parser.booleanValue();
      }
 else       if ("_cache_key".equals(currentFieldName) || "_cacheKey".equals(currentFieldName)) {
        cacheKey=new CacheKeyFilter.Key(parser.text());
      }
 else       if ("normalize".equals(currentFieldName)) {
        normalizeLat=parser.booleanValue();
        normalizeLon=parser.booleanValue();
      }
 else {
        throw new QueryParsingException(parseContext.index(),"[geo_polygon] filter does not support [" + currentFieldName + "]");
      }
    }
 else {
      throw new QueryParsingException(parseContext.index(),"[geo_polygon] unexpected token type [" + token.name() + "]");
    }
  }
  if (shell.isEmpty()) {
    throw new QueryParsingException(parseContext.index(),"no points defined for geo_polygon filter");
  }
 else {
    if (shell.size() < 3) {
      throw new QueryParsingException(parseContext.index(),"too few points defined for geo_polygon filter");
    }
    GeoPoint start=shell.get(0);
    if (!start.equals(shell.get(shell.size() - 1))) {
      shell.add(start);
    }
    if (shell.size() < 4) {
      throw new QueryParsingException(parseContext.index(),"too few points defined for geo_polygon filter");
    }
  }
  if (normalizeLat || normalizeLon) {
    for (    GeoPoint point : shell) {
      GeoUtils.normalizePoint(point,normalizeLat,normalizeLon);
    }
  }
  MapperService.SmartNameFieldMappers smartMappers=parseContext.smartFieldMappers(fieldName);
  if (smartMappers == null || !smartMappers.hasMapper()) {
    throw new QueryParsingException(parseContext.index(),"failed to find geo_point field [" + fieldName + "]");
  }
  FieldMapper<?> mapper=smartMappers.mapper();
  if (!(mapper instanceof GeoPointFieldMapper)) {
    throw new QueryParsingException(parseContext.index(),"field [" + fieldName + "] is not a geo_point field");
  }
  IndexGeoPointFieldData indexFieldData=parseContext.getForField(mapper);
  Filter filter=new GeoPolygonFilter(indexFieldData,shell.toArray(new GeoPoint[shell.size()]));
  if (cache) {
    filter=parseContext.cacheFilter(filter,cacheKey);
  }
  filter=wrapSmartNameFilter(filter,smartMappers,parseContext);
  if (filterName != null) {
    parseContext.addNamedFilter(filterName,filter);
  }
  return filter;
}
