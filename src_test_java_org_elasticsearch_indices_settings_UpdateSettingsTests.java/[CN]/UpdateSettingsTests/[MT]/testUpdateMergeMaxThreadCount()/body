{
  MockAppender mockAppender=new MockAppender();
  Logger rootLogger=Logger.getRootLogger();
  Level savedLevel=rootLogger.getLevel();
  rootLogger.addAppender(mockAppender);
  rootLogger.setLevel(Level.TRACE);
  try {
    assertAcked(prepareCreate("test").setSettings(ImmutableSettings.builder().put(AbstractIndexStore.INDEX_STORE_THROTTLE_TYPE,"merge").put(AbstractIndexStore.INDEX_STORE_THROTTLE_MAX_BYTES_PER_SEC,"1mb").put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,"1").put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,"0").put(TieredMergePolicyProvider.INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE,"2").put(TieredMergePolicyProvider.INDEX_MERGE_POLICY_SEGMENTS_PER_TIER,"2").put(MergeSchedulerModule.MERGE_SCHEDULER_TYPE_KEY,ConcurrentMergeSchedulerProvider.class).put(ConcurrentMergeSchedulerProvider.MAX_THREAD_COUNT,"10000").put(ConcurrentMergeSchedulerProvider.MAX_MERGE_COUNT,"10000")));
    ensureGreen();
    long termUpto=0;
    for (int i=0; i < 100; i++) {
      StringBuilder sb=new StringBuilder();
      for (int j=0; j < 100; j++) {
        sb.append(' ');
        sb.append(termUpto++);
      }
      client().prepareIndex("test","type","" + termUpto).setSource("field" + (i % 10),sb.toString()).get();
      if (i % 2 == 0) {
        refresh();
      }
    }
    assertTrue(mockAppender.sawFlushDeletes);
    assertFalse(mockAppender.sawMergeThreadPaused);
    mockAppender.sawFlushDeletes=false;
    mockAppender.sawMergeThreadPaused=false;
    assertFalse(mockAppender.sawUpdateSetting);
    client().admin().indices().prepareUpdateSettings("test").setSettings(ImmutableSettings.builder().put(ConcurrentMergeSchedulerProvider.MAX_THREAD_COUNT,"1").put(AbstractIndexStore.INDEX_STORE_THROTTLE_MAX_BYTES_PER_SEC,"10kb")).get();
    assertTrue(mockAppender.sawUpdateSetting);
    int i=0;
    while (true) {
      StringBuilder sb=new StringBuilder();
      for (int j=0; j < 100; j++) {
        sb.append(' ');
        sb.append(termUpto++);
      }
      client().prepareIndex("test","type","" + termUpto).setSource("field" + (i % 10),sb.toString()).get();
      if (i % 2 == 0) {
        refresh();
      }
      if (mockAppender.sawMergeThreadPaused) {
        break;
      }
      i++;
    }
  }
  finally {
    rootLogger.removeAppender(mockAppender);
    rootLogger.setLevel(savedLevel);
  }
}
