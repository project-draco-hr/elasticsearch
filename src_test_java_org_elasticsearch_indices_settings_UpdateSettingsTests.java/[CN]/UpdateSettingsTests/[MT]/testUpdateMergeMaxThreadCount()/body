{
  MockAppender mockAppender=new MockAppender();
  Logger rootLogger=Logger.getRootLogger();
  Level savedLevel=rootLogger.getLevel();
  rootLogger.addAppender(mockAppender);
  rootLogger.setLevel(Level.TRACE);
  try {
    assertAcked(prepareCreate("test").setSettings(ImmutableSettings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,"1").put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,"0").put(TieredMergePolicyProvider.INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE,"2").put(TieredMergePolicyProvider.INDEX_MERGE_POLICY_SEGMENTS_PER_TIER,"2").put(MergeSchedulerModule.MERGE_SCHEDULER_TYPE_KEY,ConcurrentMergeSchedulerProvider.class).put(ConcurrentMergeSchedulerProvider.MAX_THREAD_COUNT,"10000").put(ConcurrentMergeSchedulerProvider.MAX_MERGE_COUNT,"10000")));
    assertFalse(mockAppender.sawUpdateMaxThreadCount);
    client().admin().indices().prepareUpdateSettings("test").setSettings(ImmutableSettings.builder().put(ConcurrentMergeSchedulerProvider.MAX_THREAD_COUNT,"1")).get();
    assertTrue(mockAppender.sawUpdateMaxThreadCount);
    client().admin().indices().prepareUpdateSettings("test").setSettings(ImmutableSettings.builder().put(ConcurrentMergeSchedulerProvider.MAX_THREAD_COUNT,"3")).get();
    client().admin().indices().prepareOptimize("test").setWaitForMerge(true).get();
  }
  finally {
    rootLogger.removeAppender(mockAppender);
    rootLogger.setLevel(savedLevel);
  }
}
