{
  assertAcked(prepareCreate("test").setSettings(ImmutableSettings.builder().put(AbstractIndexStore.INDEX_STORE_THROTTLE_TYPE,"none").put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,"1").put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,"0").put(TieredMergePolicyProvider.INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE,"2").put(TieredMergePolicyProvider.INDEX_MERGE_POLICY_SEGMENTS_PER_TIER,"2").put(ConcurrentMergeSchedulerProvider.MAX_THREAD_COUNT,"1").put(ConcurrentMergeSchedulerProvider.MAX_MERGE_COUNT,"2")));
  ensureGreen();
  long termUpto=0;
  for (int i=0; i < 100; i++) {
    StringBuilder sb=new StringBuilder();
    for (int j=0; j < 100; j++) {
      sb.append(' ');
      sb.append(termUpto++);
    }
    client().prepareIndex("test","type","" + termUpto).setSource("field" + (i % 10),sb.toString()).get();
    if (i % 2 == 0) {
      refresh();
    }
  }
  NodesStatsResponse nodesStats=client().admin().cluster().prepareNodesStats().setIndices(true).get();
  for (  NodeStats stats : nodesStats.getNodes()) {
    assertThat(stats.getIndices().getStore().getThrottleTime().getMillis(),equalTo(0l));
  }
  logger.info("test: set low merge throttling");
  client().admin().indices().prepareUpdateSettings("test").setSettings(ImmutableSettings.builder().put(AbstractIndexStore.INDEX_STORE_THROTTLE_TYPE,"merge").put(AbstractIndexStore.INDEX_STORE_THROTTLE_MAX_BYTES_PER_SEC,"1mb")).get();
  GetSettingsResponse getSettingsResponse=client().admin().indices().prepareGetSettings("test").get();
  assertThat(getSettingsResponse.getSetting("test",AbstractIndexStore.INDEX_STORE_THROTTLE_TYPE),equalTo("merge"));
  boolean done=false;
  while (done == false) {
    for (int i=0; i < 5; i++) {
      StringBuilder sb=new StringBuilder();
      for (int j=0; j < 100; j++) {
        sb.append(' ');
        sb.append(termUpto++);
        sb.append(" some random text that keeps repeating over and over again hambone");
      }
      client().prepareIndex("test","type","" + termUpto).setSource("field" + (i % 10),sb.toString()).get();
    }
    refresh();
    nodesStats=client().admin().cluster().prepareNodesStats().setIndices(true).get();
    for (    NodeStats stats : nodesStats.getNodes()) {
      long throttleMillis=stats.getIndices().getStore().getThrottleTime().getMillis();
      if (throttleMillis > 0) {
        done=true;
        break;
      }
    }
  }
  logger.info("test: disable merge throttling");
  client().admin().indices().prepareUpdateSettings("test").setSettings(ImmutableSettings.builder().put(AbstractIndexStore.INDEX_STORE_THROTTLE_TYPE,"none")).get();
  logger.info("test: optimize");
  client().admin().indices().prepareOptimize("test").get();
  logger.info("test: optimize done");
  long sumThrottleTime=0;
  nodesStats=client().admin().cluster().prepareNodesStats().setIndices(true).get();
  for (  NodeStats stats : nodesStats.getNodes()) {
    sumThrottleTime+=stats.getIndices().getStore().getThrottleTime().getMillis();
  }
  for (int i=0; i < 100; i++) {
    StringBuilder sb=new StringBuilder();
    for (int j=0; j < 100; j++) {
      sb.append(' ');
      sb.append(termUpto++);
    }
    client().prepareIndex("test","type","" + termUpto).setSource("field" + (i % 10),sb.toString()).get();
    if (i % 2 == 0) {
      refresh();
    }
  }
  logger.info("test: done indexing after disabling throttling");
  long newSumThrottleTime=0;
  nodesStats=client().admin().cluster().prepareNodesStats().setIndices(true).get();
  for (  NodeStats stats : nodesStats.getNodes()) {
    newSumThrottleTime+=stats.getIndices().getStore().getThrottleTime().getMillis();
  }
  assertEquals(sumThrottleTime,newSumThrottleTime);
  logger.info("test: test done");
}
