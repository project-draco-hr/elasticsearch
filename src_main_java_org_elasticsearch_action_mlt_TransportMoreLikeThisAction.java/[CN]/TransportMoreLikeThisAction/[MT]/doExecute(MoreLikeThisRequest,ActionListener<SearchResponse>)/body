{
  ClusterState clusterState=clusterService.state();
  final String concreteIndex=clusterState.metaData().concreteIndex(request.index());
  Set<String> getFields=newHashSet();
  if (request.fields() != null) {
    Collections.addAll(getFields,request.fields());
  }
  getFields.add(SourceFieldMapper.NAME);
  GetRequest getRequest=getRequest(concreteIndex).fields(getFields.toArray(new String[getFields.size()])).type(request.type()).id(request.id()).listenerThreaded(true).operationThreaded(true);
  request.beforeLocalFork();
  getAction.execute(getRequest,new ActionListener<GetResponse>(){
    @Override public void onResponse(    GetResponse getResponse){
      if (!getResponse.exists()) {
        listener.onFailure(new ElasticSearchException("document missing"));
        return;
      }
      final BoolQueryBuilder boolBuilder=boolQuery();
      try {
        DocumentMapper docMapper=indicesService.indexServiceSafe(concreteIndex).mapperService().documentMapper(request.type());
        final Set<String> fields=newHashSet();
        if (request.fields() != null) {
          for (          String field : request.fields()) {
            FieldMappers fieldMappers=docMapper.mappers().smartName(field);
            if (fieldMappers != null) {
              fields.add(fieldMappers.mapper().names().indexName());
            }
 else {
              fields.add(field);
            }
          }
        }
        if (!fields.isEmpty()) {
          for (Iterator<String> it=fields.iterator(); it.hasNext(); ) {
            String field=it.next();
            GetField getField=getResponse.field(field);
            if (getField != null) {
              for (              Object value : getField.values()) {
                addMoreLikeThis(request,boolBuilder,getField.name(),value.toString());
              }
              it.remove();
            }
          }
          if (!fields.isEmpty()) {
            parseSource(getResponse,boolBuilder,docMapper,fields,request);
          }
        }
 else {
          parseSource(getResponse,boolBuilder,docMapper,fields,request);
        }
        if (!boolBuilder.hasClauses()) {
          listener.onFailure(new ElasticSearchException("No fields found to fetch the 'likeText' from"));
          return;
        }
        Term uidTerm=docMapper.uidMapper().term(request.type(),request.id());
        boolBuilder.mustNot(termQuery(uidTerm.field(),uidTerm.text()));
      }
 catch (      Exception e) {
        listener.onFailure(e);
        return;
      }
      String[] searchIndices=request.searchIndices();
      if (searchIndices == null) {
        searchIndices=new String[]{request.index()};
      }
      String[] searchTypes=request.searchTypes();
      if (searchTypes == null) {
        searchTypes=new String[]{request.type()};
      }
      int size=request.searchSize() != 0 ? request.searchSize() : 10;
      int from=request.searchFrom() != 0 ? request.searchFrom() : 0;
      SearchRequest searchRequest=searchRequest(searchIndices).types(searchTypes).searchType(request.searchType()).scroll(request.searchScroll()).extraSource(searchSource().query(boolBuilder).from(from).size(size)).listenerThreaded(request.listenerThreaded());
      if (request.searchSource() != null) {
        searchRequest.source(request.searchSource(),request.searchSourceOffset(),request.searchSourceLength(),request.searchSourceUnsafe());
      }
      searchAction.execute(searchRequest,new ActionListener<SearchResponse>(){
        @Override public void onResponse(        SearchResponse response){
          listener.onResponse(response);
        }
        @Override public void onFailure(        Throwable e){
          listener.onFailure(e);
        }
      }
);
    }
    @Override public void onFailure(    Throwable e){
      listener.onFailure(e);
    }
  }
);
}
