{
  ThreadPool threadPool=new ThreadPool(getClass().getName());
  int startPort=11000 + randomIntBetween(0,255);
  int endPort=startPort + 10;
  Settings settings=ImmutableSettings.builder().put(NettyTransport.PING_SCHEDULE,"5ms").put("transport.tcp.port",startPort + "-" + endPort).build();
  final NettyTransport nettyA=new NettyTransport(settings,threadPool,new NetworkService(settings),BigArrays.NON_RECYCLING_INSTANCE,Version.CURRENT);
  MockTransportService serviceA=new MockTransportService(settings,nettyA,threadPool);
  serviceA.start();
  final NettyTransport nettyB=new NettyTransport(settings,threadPool,new NetworkService(settings),BigArrays.NON_RECYCLING_INSTANCE,Version.CURRENT);
  MockTransportService serviceB=new MockTransportService(settings,nettyB,threadPool);
  serviceB.start();
  DiscoveryNode nodeA=new DiscoveryNode("TS_A","TS_A",serviceA.boundAddress().publishAddress(),ImmutableMap.<String,String>of(),Version.CURRENT);
  DiscoveryNode nodeB=new DiscoveryNode("TS_B","TS_B",serviceB.boundAddress().publishAddress(),ImmutableMap.<String,String>of(),Version.CURRENT);
  serviceA.connectToNode(nodeB);
  serviceB.connectToNode(nodeA);
  assertBusy(new Runnable(){
    @Override public void run(){
      assertThat(nettyA.scheduledPing.successfulPings.count(),greaterThan(100l));
      assertThat(nettyB.scheduledPing.successfulPings.count(),greaterThan(100l));
    }
  }
);
  assertThat(nettyA.scheduledPing.failedPings.count(),equalTo(0l));
  assertThat(nettyB.scheduledPing.failedPings.count(),equalTo(0l));
  serviceA.registerRequestHandler("sayHello",TransportRequest.Empty.class,ThreadPool.Names.GENERIC,new TransportRequestHandler<TransportRequest.Empty>(){
    @Override public void messageReceived(    TransportRequest.Empty request,    TransportChannel channel){
      try {
        channel.sendResponse(TransportResponse.Empty.INSTANCE,TransportResponseOptions.options());
      }
 catch (      IOException e) {
        e.printStackTrace();
        assertThat(e.getMessage(),false,equalTo(true));
      }
    }
  }
);
  int rounds=scaledRandomIntBetween(100,5000);
  for (int i=0; i < rounds; i++) {
    serviceB.submitRequest(nodeA,"sayHello",TransportRequest.Empty.INSTANCE,TransportRequestOptions.options().withCompress(randomBoolean()),new BaseTransportResponseHandler<TransportResponse.Empty>(){
      @Override public TransportResponse.Empty newInstance(){
        return TransportResponse.Empty.INSTANCE;
      }
      @Override public String executor(){
        return ThreadPool.Names.GENERIC;
      }
      @Override public void handleResponse(      TransportResponse.Empty response){
      }
      @Override public void handleException(      TransportException exp){
        exp.printStackTrace();
        assertThat("got exception instead of a response: " + exp.getMessage(),false,equalTo(true));
      }
    }
).txGet();
  }
  assertBusy(new Runnable(){
    @Override public void run(){
      assertThat(nettyA.scheduledPing.successfulPings.count(),greaterThan(200l));
      assertThat(nettyB.scheduledPing.successfulPings.count(),greaterThan(200l));
    }
  }
);
  assertThat(nettyA.scheduledPing.failedPings.count(),equalTo(0l));
  assertThat(nettyB.scheduledPing.failedPings.count(),equalTo(0l));
  Releasables.close(serviceA,serviceB);
  terminate(threadPool);
}
