{
  ThreadPool threadPool=new TestThreadPool(getClass().getName());
  int minMasterNodes=randomBoolean() ? 3 : 1;
  Settings settings=Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(),Integer.toString(minMasterNodes)).build();
  Map<String,MockNode> nodes=new HashMap<>();
  ZenDiscovery zenDiscovery=null;
  ClusterService clusterService=null;
  try {
    Set<DiscoveryNode> expectedFDNodes=null;
    MockNode master=createMockNode("master",settings,null,threadPool,logger,nodes).setAsMaster();
    ClusterState state=master.clusterState;
    clusterService=createClusterService(threadPool,master.discoveryNode);
    setState(clusterService,state);
    zenDiscovery=buildZenDiscovery(settings,master,clusterService,threadPool);
    MockNode newNode=createMockNode("new_node",settings,null,threadPool,logger,nodes);
    ClusterState newState=ClusterState.builder(state).incrementVersion().nodes(DiscoveryNodes.builder(state.nodes()).add(newNode.discoveryNode).masterNodeId(master.discoveryNode.getId())).build();
    try {
      ClusterChangedEvent clusterChangedEvent=new ClusterChangedEvent("testing",newState,state);
      AssertingAckListener listener=new AssertingAckListener(newState.nodes().getSize() - 1);
      expectedFDNodes=zenDiscovery.getFaultDetectionNodes();
      zenDiscovery.publish(clusterChangedEvent,listener);
      listener.await(1,TimeUnit.HOURS);
      expectedFDNodes=fdNodesForState(newState,master.discoveryNode);
    }
 catch (    Discovery.FailedToCommitClusterStateException e) {
      assertEquals(3,minMasterNodes);
    }
    assertEquals(expectedFDNodes,zenDiscovery.getFaultDetectionNodes());
  }
  finally {
    zenDiscovery.close();
    clusterService.close();
    for (    MockNode curNode : nodes.values()) {
      curNode.action.close();
      curNode.service.close();
    }
    terminate(threadPool);
  }
}
