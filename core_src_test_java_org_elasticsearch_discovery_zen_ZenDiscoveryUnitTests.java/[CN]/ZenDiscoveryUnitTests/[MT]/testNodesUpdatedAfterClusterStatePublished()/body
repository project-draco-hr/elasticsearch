{
  ThreadPool threadPool=new TestThreadPool(getClass().getName());
  int minMasterNodes=randomBoolean() ? 3 : 1;
  Settings settings=Settings.builder().put(DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(),Integer.toString(minMasterNodes)).build();
  ArrayList<Closeable> toClose=new ArrayList<>();
  try {
    Set<DiscoveryNode> expectedFDNodes=null;
    final MockTransportService masterTransport=MockTransportService.local(settings,Version.CURRENT,threadPool);
    masterTransport.start();
    DiscoveryNode masterNode=new DiscoveryNode("master",masterTransport.boundAddress().publishAddress(),Version.CURRENT);
    toClose.add(masterTransport);
    masterTransport.setLocalNode(masterNode);
    ClusterState state=ClusterStateCreationUtils.state(masterNode,masterNode,masterNode);
    ClusterService masterClusterService=createClusterService(threadPool,masterNode);
    toClose.add(masterClusterService);
    state=ClusterState.builder(masterClusterService.getClusterName()).nodes(state.nodes()).build();
    setState(masterClusterService,state);
    ZenDiscovery masterZen=buildZenDiscovery(settings,masterTransport,masterClusterService,threadPool);
    toClose.add(masterZen);
    masterTransport.acceptIncomingRequests();
    final MockTransportService otherTransport=MockTransportService.local(settings,Version.CURRENT,threadPool);
    otherTransport.start();
    toClose.add(otherTransport);
    DiscoveryNode otherNode=new DiscoveryNode("other",otherTransport.boundAddress().publishAddress(),Version.CURRENT);
    otherTransport.setLocalNode(otherNode);
    final ClusterState otherState=ClusterState.builder(masterClusterService.getClusterName()).nodes(DiscoveryNodes.builder().add(otherNode).localNodeId(otherNode.getId())).build();
    ClusterService otherClusterService=createClusterService(threadPool,masterNode);
    toClose.add(otherClusterService);
    setState(otherClusterService,otherState);
    ZenDiscovery otherZen=buildZenDiscovery(settings,otherTransport,otherClusterService,threadPool);
    toClose.add(otherZen);
    otherTransport.acceptIncomingRequests();
    masterTransport.connectToNode(otherNode);
    otherTransport.connectToNode(masterNode);
    ClusterState newState=ClusterState.builder(masterClusterService.state()).incrementVersion().nodes(DiscoveryNodes.builder(state.nodes()).add(otherNode).masterNodeId(masterNode.getId())).build();
    try {
      ClusterChangedEvent clusterChangedEvent=new ClusterChangedEvent("testing",newState,state);
      AssertingAckListener listener=new AssertingAckListener(newState.nodes().getSize() - 1);
      expectedFDNodes=masterZen.getFaultDetectionNodes();
      masterZen.publish(clusterChangedEvent,listener);
      listener.await(1,TimeUnit.HOURS);
      expectedFDNodes=fdNodesForState(newState,masterNode);
    }
 catch (    Discovery.FailedToCommitClusterStateException e) {
      assertEquals(3,minMasterNodes);
    }
    assertEquals(expectedFDNodes,masterZen.getFaultDetectionNodes());
  }
  finally {
    IOUtils.close(toClose);
    terminate(threadPool);
  }
}
