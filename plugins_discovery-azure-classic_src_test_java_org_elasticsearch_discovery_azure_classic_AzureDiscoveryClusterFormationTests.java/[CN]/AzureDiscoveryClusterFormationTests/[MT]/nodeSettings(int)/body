{
  Path resolve=logDir.resolve(Integer.toString(nodeOrdinal));
  try {
    Files.createDirectory(resolve);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  return Settings.builder().put(super.nodeSettings(nodeOrdinal)).put(DiscoveryModule.DISCOVERY_TYPE_SETTING.getKey(),AzureDiscoveryPlugin.AZURE).put(Environment.PATH_LOGS_SETTING.getKey(),resolve).put(TransportSettings.PORT.getKey(),0).put(Node.WRITE_PORTS_FIELD_SETTING.getKey(),"true").put(AzureComputeService.Management.ENDPOINT_SETTING.getKey(),"https://" + InetAddress.getLoopbackAddress().getHostAddress() + ":"+ httpsServer.getAddress().getPort()).put(Environment.PATH_CONF_SETTING.getKey(),keyStoreFile.getParent().toAbsolutePath()).put(AzureComputeService.Management.KEYSTORE_PATH_SETTING.getKey(),keyStoreFile.toAbsolutePath()).put(AzureComputeService.Discovery.HOST_TYPE_SETTING.getKey(),AzureUnicastHostsProvider.HostType.PUBLIC_IP.name()).put(AzureComputeService.Management.KEYSTORE_PASSWORD_SETTING.getKey(),"keypass").put(AzureComputeService.Management.KEYSTORE_TYPE_SETTING.getKey(),"jks").put(AzureComputeService.Management.SERVICE_NAME_SETTING.getKey(),"myservice").put(AzureComputeService.Management.SUBSCRIPTION_ID_SETTING.getKey(),"subscription").put(AzureComputeService.Discovery.DEPLOYMENT_NAME_SETTING.getKey(),"mydeployment").put(AzureComputeService.Discovery.ENDPOINT_NAME_SETTING.getKey(),"myendpoint").put(AzureComputeService.Discovery.DEPLOYMENT_SLOT_SETTING.getKey(),AzureUnicastHostsProvider.Deployment.PRODUCTION.name()).build();
}
