{
  final int totalMessageSize=messageLengthBytes + TcpHeader.MARKER_BYTES_SIZE + TcpHeader.MESSAGE_LENGTH_SIZE;
  transportServiceAdapter.received(totalMessageSize);
  boolean hasMessageBytesToRead=(totalMessageSize - TcpHeader.HEADER_SIZE) > 0;
  StreamInput streamIn=reference.streamInput();
  boolean success=false;
  try (ThreadContext.StoredContext tCtx=threadPool.getThreadContext().stashContext()){
    long requestId=streamIn.readLong();
    byte status=streamIn.readByte();
    Version version=Version.fromId(streamIn.readInt());
    if (TransportStatus.isCompress(status) && hasMessageBytesToRead && streamIn.available() > 0) {
      Compressor compressor;
      try {
        final int bytesConsumed=TcpHeader.REQUEST_ID_SIZE + TcpHeader.STATUS_SIZE + TcpHeader.VERSION_ID_SIZE;
        compressor=CompressorFactory.compressor(reference.slice(bytesConsumed,reference.length() - bytesConsumed));
      }
 catch (      NotCompressedException ex) {
        int maxToRead=Math.min(reference.length(),10);
        StringBuilder sb=new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead).append("] content bytes out of [").append(reference.length()).append("] readable bytes with message size [").append(messageLengthBytes).append("] ").append("] are [");
        for (int i=0; i < maxToRead; i++) {
          sb.append(reference.get(i)).append(",");
        }
        sb.append("]");
        throw new IllegalStateException(sb.toString());
      }
      streamIn=compressor.streamInput(streamIn);
    }
    if (version.onOrAfter(Version.CURRENT.minimumCompatibilityVersion()) == false || version.major != Version.CURRENT.major) {
      throw new IllegalStateException("Received message from unsupported version: [" + version + "] minimal compatible version is: ["+ Version.CURRENT.minimumCompatibilityVersion()+ "]");
    }
    streamIn=new NamedWriteableAwareStreamInput(streamIn,namedWriteableRegistry);
    streamIn.setVersion(version);
    threadPool.getThreadContext().readHeaders(streamIn);
    if (TransportStatus.isRequest(status)) {
      handleRequest(channel,profileName,streamIn,requestId,messageLengthBytes,version,remoteAddress);
    }
 else {
      final TransportResponseHandler<?> handler=transportServiceAdapter.onResponseReceived(requestId);
      if (handler != null) {
        if (TransportStatus.isError(status)) {
          handlerResponseError(streamIn,handler);
        }
 else {
          handleResponse(remoteAddress,streamIn,handler);
        }
        final int nextByte=streamIn.read();
        if (nextByte != -1) {
          throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["+ handler+ "], error ["+ TransportStatus.isError(status)+ "]; resetting");
        }
      }
    }
    success=true;
  }
  finally {
    if (success) {
      IOUtils.close(streamIn);
    }
 else {
      IOUtils.closeWhileHandlingException(streamIn);
    }
  }
}
