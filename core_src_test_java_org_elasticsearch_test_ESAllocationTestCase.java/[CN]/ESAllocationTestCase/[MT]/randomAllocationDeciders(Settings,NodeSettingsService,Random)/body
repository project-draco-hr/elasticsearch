{
  final ImmutableSet<Class<? extends AllocationDecider>> defaultAllocationDeciders=AllocationDecidersModule.DEFAULT_ALLOCATION_DECIDERS;
  final List<AllocationDecider> list=new ArrayList<>();
  for (  Class<? extends AllocationDecider> deciderClass : defaultAllocationDeciders) {
    try {
      try {
        Constructor<? extends AllocationDecider> constructor=deciderClass.getConstructor(Settings.class,NodeSettingsService.class);
        list.add(constructor.newInstance(settings,nodeSettingsService));
      }
 catch (      NoSuchMethodException e) {
        Constructor<? extends AllocationDecider> constructor=null;
        constructor=deciderClass.getConstructor(Settings.class);
        list.add(constructor.newInstance(settings));
      }
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex);
    }
  }
  assertThat(list.size(),equalTo(defaultAllocationDeciders.size()));
  for (  AllocationDecider d : list) {
    assertThat(defaultAllocationDeciders.contains(d.getClass()),is(true));
  }
  Collections.shuffle(list,random);
  return new AllocationDeciders(settings,list.toArray(new AllocationDecider[0]));
}
