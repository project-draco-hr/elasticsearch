{
  FlushRequest flushRequest=new FlushRequest(HttpActions.splitIndices(request.param("index")));
  flushRequest.listenerThreaded(false);
  flushRequest.timeout(TimeValue.parseTimeValue(request.param("timeout"),ShardReplicationOperationRequest.DEFAULT_TIMEOUT));
  client.admin().indices().execFlush(flushRequest,new ActionListener<FlushResponse>(){
    @Override public void onResponse(    FlushResponse result){
      try {
        JsonBuilder builder=HttpJsonBuilder.cached(request);
        builder.startObject();
        builder.field("ok",true);
        builder.startObject("indices");
        for (        IndexFlushResponse indexFlushResponse : result.indices().values()) {
          builder.startObject(indexFlushResponse.index()).field("ok",true).field("totalShards",indexFlushResponse.totalShards()).field("successfulShards",indexFlushResponse.successfulShards()).field("failedShards",indexFlushResponse.failedShards()).endObject();
        }
        builder.endObject();
        builder.endObject();
        channel.sendResponse(new JsonHttpResponse(request,OK,builder));
      }
 catch (      Exception e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new JsonThrowableHttpResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
