{
  SearchResponse response=client().prepareSearch("neg_idx").setTypes("type").addAggregation(histogram("histo").field(INTERVAL_FIELD).interval(1).subAggregation(avg("avg").field(VALUE_FIELD)).subAggregation(movingAvg("movavg_values").window(windowSize).modelBuilder(new SimpleModel.SimpleModelBuilder()).gapPolicy(gapPolicy).predict(5).setBucketsPaths("avg"))).execute().actionGet();
  assertSearchResponse(response);
  InternalHistogram<Bucket> histo=response.getAggregations().get("histo");
  assertThat(histo,notNullValue());
  assertThat(histo.getName(),equalTo("histo"));
  List<? extends Bucket> buckets=histo.getBuckets();
  assertThat("Size of buckets array is not correct.",buckets.size(),equalTo(25));
  SimpleValue current=buckets.get(0).getAggregations().get("movavg_values");
  assertThat(current,nullValue());
  for (int i=1; i < 20; i++) {
    Bucket bucket=buckets.get(i);
    assertThat(bucket,notNullValue());
    assertThat((long)bucket.getKey(),equalTo((long)i - 10));
    assertThat(bucket.getDocCount(),equalTo(1L));
    Avg avgAgg=bucket.getAggregations().get("avg");
    assertThat(avgAgg,notNullValue());
    assertThat(avgAgg.value(),equalTo(10d));
    SimpleValue movAvgAgg=bucket.getAggregations().get("movavg_values");
    assertThat(movAvgAgg,notNullValue());
    assertThat(movAvgAgg.value(),equalTo(10d));
  }
  for (int i=20; i < 25; i++) {
    Bucket bucket=buckets.get(i);
    assertThat(bucket,notNullValue());
    assertThat((long)bucket.getKey(),equalTo((long)i - 10));
    assertThat(bucket.getDocCount(),equalTo(0L));
    Avg avgAgg=bucket.getAggregations().get("avg");
    assertThat(avgAgg,nullValue());
    SimpleValue movAvgAgg=bucket.getAggregations().get("movavg_values");
    assertThat(movAvgAgg,notNullValue());
    assertThat(movAvgAgg.value(),equalTo(10d));
  }
}
