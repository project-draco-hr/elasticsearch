{
  SearchResponse response=client().prepareSearch("idx").setTypes("type").addAggregation(histogram("histo").field(INTERVAL_FIELD).interval(interval).extendedBounds(new ExtendedBounds(0L,(long)(interval * (numBuckets - 1)))).subAggregation(metric).subAggregation(movingAvg("movavg_counts","_count").window(windowSize).modelBuilder(new HoltWintersModel.HoltWintersModelBuilder().period(period).seasonalityType(seasonalityType)).gapPolicy(gapPolicy).minimize(true)).subAggregation(movingAvg("movavg_values","the_metric").window(windowSize).modelBuilder(new HoltWintersModel.HoltWintersModelBuilder().period(period).seasonalityType(seasonalityType)).gapPolicy(gapPolicy).minimize(true))).execute().actionGet();
  assertSearchResponse(response);
  InternalHistogram<Bucket> histo=response.getAggregations().get("histo");
  assertThat(histo,notNullValue());
  assertThat(histo.getName(),equalTo("histo"));
  List<? extends Bucket> buckets=histo.getBuckets();
  assertThat("Size of buckets array is not correct.",buckets.size(),equalTo(mockHisto.size()));
  List<Double> expectedCounts=testValues.get(MovAvgType.HOLT_WINTERS.name() + "_" + MetricTarget.COUNT.name());
  List<Double> expectedValues=testValues.get(MovAvgType.HOLT_WINTERS.name() + "_" + MetricTarget.VALUE.name());
  Iterator<? extends Histogram.Bucket> actualIter=buckets.iterator();
  Iterator<PipelineAggregationHelperTests.MockBucket> expectedBucketIter=mockHisto.iterator();
  Iterator<Double> expectedCountsIter=expectedCounts.iterator();
  Iterator<Double> expectedValueIter=expectedValues.iterator();
  while (actualIter.hasNext()) {
    Histogram.Bucket actual=actualIter.next();
    PipelineAggregationHelperTests.MockBucket expected=expectedBucketIter.next();
    Double expectedCount=expectedCountsIter.next();
    Double expectedValue=expectedValueIter.next();
    assertThat("keys do not match",((Number)actual.getKey()).longValue(),equalTo(expected.key));
    assertThat("doc counts do not match",actual.getDocCount(),equalTo((long)expected.count));
    SimpleValue countMovAvg=actual.getAggregations().get("movavg_counts");
    SimpleValue valuesMovAvg=actual.getAggregations().get("movavg_values");
    if (expectedCount == null) {
      assertThat(countMovAvg,nullValue());
    }
 else {
      assertThat(countMovAvg,notNullValue());
    }
    if (expectedValue == null) {
      assertThat(valuesMovAvg,nullValue());
    }
 else {
      assertThat(valuesMovAvg,notNullValue());
    }
  }
}
