{
  double s=0;
  double last_s=0;
  double b=0;
  double last_b=0;
  double[] seasonal=new double[window.size()];
  double padding=seasonalityType.equals(HoltWintersModel.SeasonalityType.MULTIPLICATIVE) ? 0.0000000001 : 0;
  int counter=0;
  double[] vs=new double[window.size()];
  for (  double v : window) {
    vs[counter]=v + padding;
    counter+=1;
  }
  for (int i=0; i < period; i++) {
    s+=vs[i];
    b+=(vs[i + period] - vs[i]) / period;
  }
  s/=period;
  b/=period;
  last_s=s;
  if (Double.compare(s,0.0) == 0 || Double.compare(s,-0.0) == 0) {
    Arrays.fill(seasonal,0.0);
  }
 else {
    for (int i=0; i < period; i++) {
      seasonal[i]=vs[i] / s;
    }
  }
  for (int i=period; i < vs.length; i++) {
    if (seasonalityType.equals(HoltWintersModel.SeasonalityType.MULTIPLICATIVE)) {
      s=alpha * (vs[i] / seasonal[i - period]) + (1.0d - alpha) * (last_s + last_b);
    }
 else {
      s=alpha * (vs[i] - seasonal[i - period]) + (1.0d - alpha) * (last_s + last_b);
    }
    b=beta * (s - last_s) + (1 - beta) * last_b;
    if (seasonalityType.equals(HoltWintersModel.SeasonalityType.MULTIPLICATIVE)) {
      seasonal[i]=gamma * (vs[i] / (last_s + last_b)) + (1 - gamma) * seasonal[i - period];
    }
 else {
      seasonal[i]=gamma * (vs[i] - (last_s - last_b)) + (1 - gamma) * seasonal[i - period];
    }
    last_s=s;
    last_b=b;
  }
  int idx=window.size() - period + (0 % period);
  if (seasonalityType.equals(HoltWintersModel.SeasonalityType.MULTIPLICATIVE)) {
    return (s + (1 * b)) * seasonal[idx];
  }
 else {
    return s + (1 * b) + seasonal[idx];
  }
}
