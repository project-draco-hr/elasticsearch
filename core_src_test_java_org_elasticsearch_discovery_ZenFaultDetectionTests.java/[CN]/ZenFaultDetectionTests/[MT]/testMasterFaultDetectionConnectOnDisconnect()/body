{
  Settings.Builder settings=Settings.builder();
  boolean shouldRetry=randomBoolean();
  settings.put(FaultDetection.CONNECT_ON_NETWORK_DISCONNECT_SETTING.getKey(),shouldRetry).put(FaultDetection.PING_INTERVAL_SETTING.getKey(),"5m");
  ClusterName clusterName=new ClusterName(randomAsciiOfLengthBetween(3,20));
  final ClusterState state=ClusterState.builder(clusterName).nodes(buildNodesForA(false)).build();
  MasterFaultDetection masterFD=new MasterFaultDetection(settings.build(),threadPool,serviceA,clusterName,new NoopClusterService(state));
  masterFD.start(nodeB,"test");
  final String[] failureReason=new String[1];
  final DiscoveryNode[] failureNode=new DiscoveryNode[1];
  final CountDownLatch notified=new CountDownLatch(1);
  masterFD.addListener(new MasterFaultDetection.Listener(){
    @Override public void onMasterFailure(    DiscoveryNode masterNode,    Throwable cause,    String reason){
      failureNode[0]=masterNode;
      failureReason[0]=reason;
      notified.countDown();
    }
  }
);
  serviceB.stop();
  notified.await(30,TimeUnit.SECONDS);
  assertEquals(nodeB,failureNode[0]);
  Matcher<String> matcher=Matchers.containsString("verified");
  if (!shouldRetry) {
    matcher=Matchers.not(matcher);
  }
  assertThat(failureReason[0],matcher);
}
