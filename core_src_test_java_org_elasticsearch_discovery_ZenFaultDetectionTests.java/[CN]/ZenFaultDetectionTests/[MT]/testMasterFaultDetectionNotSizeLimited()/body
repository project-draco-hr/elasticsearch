{
  Settings.Builder settings=Settings.builder();
  boolean shouldRetry=randomBoolean();
  settings.put(FaultDetection.CONNECT_ON_NETWORK_DISCONNECT_SETTING.getKey(),shouldRetry).put(FaultDetection.PING_INTERVAL_SETTING.getKey(),"1s");
  ClusterName clusterName=new ClusterName(randomAsciiOfLengthBetween(3,20));
  final ClusterState stateNodeA=ClusterState.builder(clusterName).nodes(buildNodesForA(false)).build();
  setState(clusterServiceA,stateNodeA);
  int minExpectedPings=2;
  PingProbe pingProbeA=new PingProbe(minExpectedPings);
  PingProbe pingProbeB=new PingProbe(minExpectedPings);
  serviceA.addTracer(pingProbeA);
  serviceB.addTracer(pingProbeB);
  MasterFaultDetection masterFDNodeA=new MasterFaultDetection(settings.build(),threadPool,serviceA,clusterName,clusterServiceA);
  masterFDNodeA.start(nodeB,"test");
  final ClusterState stateNodeB=ClusterState.builder(clusterName).nodes(buildNodesForB(true)).build();
  setState(clusterServiceB,stateNodeB);
  MasterFaultDetection masterFDNodeB=new MasterFaultDetection(settings.build(),threadPool,serviceB,clusterName,clusterServiceB);
  masterFDNodeB.start(nodeB,"test");
  pingProbeA.awaitMinCompletedPings();
  pingProbeB.awaitMinCompletedPings();
  CircuitBreaker inFlightRequestsBreaker=circuitBreakerService.getBreaker(CircuitBreaker.IN_FLIGHT_REQUESTS);
  assertThat(inFlightRequestsBreaker.getTrippedCount(),equalTo(0L));
  assertThat(pingProbeA.completedPings(),greaterThanOrEqualTo(minExpectedPings));
  assertThat(pingProbeB.completedPings(),greaterThanOrEqualTo(minExpectedPings));
}
