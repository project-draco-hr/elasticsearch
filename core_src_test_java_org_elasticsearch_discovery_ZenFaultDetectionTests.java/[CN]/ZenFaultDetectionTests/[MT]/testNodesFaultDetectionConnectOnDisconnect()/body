{
  Settings.Builder settings=Settings.builder();
  boolean shouldRetry=randomBoolean();
  settings.put(FaultDetection.CONNECT_ON_NETWORK_DISCONNECT_SETTING.getKey(),shouldRetry).put(FaultDetection.PING_INTERVAL_SETTING.getKey(),"5m");
  ClusterState clusterState=ClusterState.builder(new ClusterName("test")).nodes(buildNodesForA(true)).build();
  NodesFaultDetection nodesFDA=new NodesFaultDetection(settings.build(),threadPool,serviceA,clusterState.getClusterName());
  nodesFDA.setLocalNode(nodeA);
  NodesFaultDetection nodesFDB=new NodesFaultDetection(settings.build(),threadPool,serviceB,clusterState.getClusterName());
  nodesFDB.setLocalNode(nodeB);
  final CountDownLatch pingSent=new CountDownLatch(1);
  nodesFDB.addListener(new NodesFaultDetection.Listener(){
    @Override public void onPingReceived(    NodesFaultDetection.PingRequest pingRequest){
      pingSent.countDown();
    }
  }
);
  nodesFDA.updateNodesAndPing(clusterState);
  pingSent.await(30,TimeUnit.SECONDS);
  final String[] failureReason=new String[1];
  final DiscoveryNode[] failureNode=new DiscoveryNode[1];
  final CountDownLatch notified=new CountDownLatch(1);
  nodesFDA.addListener(new NodesFaultDetection.Listener(){
    @Override public void onNodeFailure(    DiscoveryNode node,    String reason){
      failureNode[0]=node;
      failureReason[0]=reason;
      notified.countDown();
    }
  }
);
  serviceB.stop();
  notified.await(30,TimeUnit.SECONDS);
  assertEquals(nodeB,failureNode[0]);
  Matcher<String> matcher=Matchers.containsString("verified");
  if (!shouldRetry) {
    matcher=Matchers.not(matcher);
  }
  assertThat(failureReason[0],matcher);
}
