{
  for (int i=0; i < 3; i++) {
    System.gc();
    MILLISECONDS.sleep(100);
  }
  long emptyUsed=ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();
  for (  Thread t : readerThreads) {
    t.start();
  }
  for (  Thread t : writerThreads) {
    t.start();
  }
  barrier1.await();
  StopWatch stopWatch=new StopWatch();
  stopWatch.start();
  barrier2.await();
  latch.await();
  stopWatch.stop();
  for (int i=0; i < writerIterations; i++) {
    if (versionedMap.beforeVersion(i,Integer.MAX_VALUE)) {
      System.out.println("Wrong value for [" + i + ']');
    }
  }
  System.out.println("Total:");
  System.out.println("   - [" + readerThreads.length + "] readers with ["+ readerIterations+ "] iterations");
  System.out.println("   - [" + writerThreads.length + "] writers with ["+ writerIterations+ "] iterations");
  System.out.println("   - Took: " + stopWatch.totalTime());
  for (int i=0; i < 3; i++) {
    System.gc();
    MILLISECONDS.sleep(100);
  }
  long bytesTaken=ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed() - emptyUsed;
  System.out.println("Size of [" + writerIterations + "] entries is "+ new ByteSizeValue(bytesTaken));
}
