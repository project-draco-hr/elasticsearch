{
  ensureCanFlush();
  try {
    Translog.TranslogGeneration translogGeneration=translog.getGeneration();
    logger.trace("committing writer with translog id [{}]  and sync id [{}] ",translogGeneration.translogFileGeneration,syncId);
    Map<String,String> commitData=new HashMap<>(2);
    commitData.put(Translog.TRANSLOG_GENERATION_KEY,Long.toString(translogGeneration.translogFileGeneration));
    commitData.put(Translog.TRANSLOG_UUID_KEY,translogGeneration.translogUUID);
    if (syncId != null) {
      commitData.put(Engine.SYNC_COMMIT_ID,syncId);
    }
    indexWriter.setCommitData(commitData);
    writer.commit();
  }
 catch (  Exception ex) {
    try {
      failEngine("lucene commit failed",ex);
    }
 catch (    Exception inner) {
      ex.addSuppressed(inner);
    }
    throw ex;
  }
catch (  AssertionError e) {
    if (ExceptionsHelper.stackTrace(e).contains("org.apache.lucene.index.IndexWriter.filesExist")) {
      EngineException engineException=new EngineException(shardId,"failed to commit engine",e);
      try {
        failEngine("lucene commit failed",engineException);
      }
 catch (      Exception inner) {
        engineException.addSuppressed(inner);
      }
      throw engineException;
    }
 else {
      throw e;
    }
  }
}
