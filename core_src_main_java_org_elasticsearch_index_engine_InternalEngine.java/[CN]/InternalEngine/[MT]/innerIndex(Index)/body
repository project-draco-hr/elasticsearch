{
synchronized (dirtyLock(index.uid())) {
    lastWriteNanos=index.startTime();
    final long currentVersion;
    final boolean deleted;
    VersionValue versionValue=versionMap.getUnderLock(index.uid().bytes());
    if (versionValue == null) {
      currentVersion=loadCurrentVersionFromIndex(index.uid());
      deleted=currentVersion == Versions.NOT_FOUND;
    }
 else {
      deleted=versionValue.delete();
      if (engineConfig.isEnableGcDeletes() && versionValue.delete() && (engineConfig.getThreadPool().estimatedTimeInMillis() - versionValue.time()) > getGcDeletesInMillis()) {
        currentVersion=Versions.NOT_FOUND;
      }
 else {
        currentVersion=versionValue.version();
      }
    }
    long expectedVersion=index.version();
    if (index.versionType().isVersionConflictForWrites(currentVersion,expectedVersion,deleted)) {
      if (index.origin() == Operation.Origin.RECOVERY) {
        return false;
      }
 else {
        throw new VersionConflictEngineException(shardId,index.type(),index.id(),index.versionType().explainConflictForWrites(currentVersion,expectedVersion,deleted));
      }
    }
    long updatedVersion=index.versionType().updateVersion(currentVersion,expectedVersion);
    final boolean created;
    index.updateVersion(updatedVersion);
    if (currentVersion == Versions.NOT_FOUND) {
      created=true;
      if (index.docs().size() > 1) {
        indexWriter.addDocuments(index.docs());
      }
 else {
        indexWriter.addDocument(index.docs().get(0));
      }
    }
 else {
      if (versionValue != null) {
        created=versionValue.delete();
      }
 else {
        created=false;
      }
      if (index.docs().size() > 1) {
        indexWriter.updateDocuments(index.uid(),index.docs());
      }
 else {
        indexWriter.updateDocument(index.uid(),index.docs().get(0));
      }
    }
    Translog.Location translogLocation=translog.add(new Translog.Index(index));
    versionMap.putUnderLock(index.uid().bytes(),new VersionValue(updatedVersion,translogLocation));
    index.setTranslogLocation(translogLocation);
    return created;
  }
}
