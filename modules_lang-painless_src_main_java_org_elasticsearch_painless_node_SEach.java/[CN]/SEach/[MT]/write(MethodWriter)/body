{
  writer.writeStatementOffset(location);
  expression.write(writer);
  if (method == null) {
    Type itr=Definition.getType("Iterator");
    String desc=org.objectweb.asm.Type.getMethodDescriptor(itr.type,Definition.DEF_TYPE.type);
    writer.invokeDynamic("iterator",desc,DEF_BOOTSTRAP_HANDLE,(Object)DefBootstrap.ITERATOR);
  }
 else   if (java.lang.reflect.Modifier.isInterface(method.owner.clazz.getModifiers())) {
    writer.invokeInterface(method.owner.type,method.method);
  }
 else {
    writer.invokeVirtual(method.owner.type,method.method);
  }
  writer.visitVarInsn(iterator.type.type.getOpcode(Opcodes.ISTORE),iterator.slot);
  Label begin=new Label();
  Label end=new Label();
  writer.mark(begin);
  writer.visitVarInsn(iterator.type.type.getOpcode(Opcodes.ILOAD),iterator.slot);
  writer.invokeInterface(hasNext.owner.type,hasNext.method);
  writer.ifZCmp(MethodWriter.EQ,end);
  writer.visitVarInsn(iterator.type.type.getOpcode(Opcodes.ILOAD),iterator.slot);
  writer.invokeInterface(next.owner.type,next.method);
  writer.writeCast(cast);
  writer.visitVarInsn(variable.type.type.getOpcode(Opcodes.ISTORE),variable.slot);
  block.write(writer);
  writer.goTo(begin);
  writer.mark(end);
}
