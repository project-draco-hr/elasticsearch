{
  expression.analyze(locals);
  expression.expected=expression.actual;
  expression=expression.cast(locals);
  final Type type;
  try {
    type=Definition.getType(this.type);
  }
 catch (  IllegalArgumentException exception) {
    throw createError(new IllegalArgumentException("Not a type [" + this.type + "]."));
  }
  locals=Locals.newLocalScope(locals);
  variable=locals.addVariable(location,type,name,true);
  if (expression.actual.sort == Sort.ARRAY) {
    analyzeArray(locals,type);
  }
 else   if (expression.actual.sort == Sort.DEF || Iterable.class.isAssignableFrom(expression.actual.clazz)) {
    analyzeIterable(locals,type);
  }
 else {
    throw createError(new IllegalArgumentException("Illegal for each type [" + expression.actual.name + "]."));
  }
  if (block == null) {
    throw createError(new IllegalArgumentException("Extraneous for each loop."));
  }
  block.beginLoop=true;
  block.inLoop=true;
  block.analyze(locals);
  block.statementCount=Math.max(1,block.statementCount);
  if (block.loopEscape && !block.anyContinue) {
    throw createError(new IllegalArgumentException("Extraneous for loop."));
  }
  statementCount=1;
  if (locals.hasVariable(Locals.LOOP)) {
    loopCounter=locals.getVariable(location,Locals.LOOP);
  }
}
