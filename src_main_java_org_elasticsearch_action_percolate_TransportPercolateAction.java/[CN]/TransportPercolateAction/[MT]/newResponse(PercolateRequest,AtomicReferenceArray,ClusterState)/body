{
  int successfulShards=0;
  int failedShards=0;
  List<PercolateShardResponse> shardResults=null;
  List<ShardOperationFailedException> shardFailures=null;
  byte percolatorTypeId=0x00;
  int nonEmptyResponses=0;
  for (int i=0; i < shardsResponses.length(); i++) {
    Object shardResponse=shardsResponses.get(i);
    if (shardResponse == null) {
    }
 else     if (shardResponse instanceof BroadcastShardOperationFailedException) {
      failedShards++;
      if (shardFailures == null) {
        shardFailures=newArrayList();
      }
      shardFailures.add(new DefaultShardOperationFailedException((BroadcastShardOperationFailedException)shardResponse));
    }
 else {
      PercolateShardResponse percolateShardResponse=(PercolateShardResponse)shardResponse;
      if (shardResults == null) {
        shardResults=newArrayList();
      }
      if (percolateShardResponse.percolatorTypeId() != 0x00) {
        percolatorTypeId=percolateShardResponse.percolatorTypeId();
      }
      if (!percolateShardResponse.isEmpty()) {
        nonEmptyResponses++;
      }
      shardResults.add(percolateShardResponse);
      successfulShards++;
    }
  }
  if (shardResults == null || percolatorTypeId == 0x00 || nonEmptyResponses == 0) {
    long tookInMillis=System.currentTimeMillis() - request.startTime;
    return new PercolateResponse(shardsResponses.length(),successfulShards,failedShards,shardFailures,tookInMillis);
  }
 else {
    PercolatorService.ReduceResult result=percolatorService.reduce(percolatorTypeId,shardResults);
    long tookInMillis=System.currentTimeMillis() - request.startTime;
    return new PercolateResponse(shardsResponses.length(),successfulShards,failedShards,shardFailures,result.matches(),result.count(),tookInMillis);
  }
}
