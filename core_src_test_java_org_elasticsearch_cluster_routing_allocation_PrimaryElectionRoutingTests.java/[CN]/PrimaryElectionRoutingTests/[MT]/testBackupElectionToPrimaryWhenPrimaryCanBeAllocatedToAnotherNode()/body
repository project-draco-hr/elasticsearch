{
  AllocationService strategy=createAllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries",10).build());
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build();
  logger.info("Adding two nodes and performing rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1"))).build();
  RoutingAllocation.Result result=strategy.reroute(clusterState,"reroute");
  clusterState=ClusterState.builder(clusterState).routingResult(result).build();
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode("node2"))).build();
  result=strategy.reroute(clusterState,"reroute");
  clusterState=ClusterState.builder(clusterState).routingResult(result).build();
  logger.info("Start the primary shard (on node1)");
  RoutingNodes routingNodes=clusterState.getRoutingNodes();
  result=strategy.applyStartedShards(clusterState,routingNodes.node("node1").shardsWithState(INITIALIZING));
  clusterState=ClusterState.builder(clusterState).routingResult(result).build();
  logger.info("Start the backup shard (on node2)");
  routingNodes=clusterState.getRoutingNodes();
  result=strategy.applyStartedShards(clusterState,routingNodes.node("node2").shardsWithState(INITIALIZING));
  clusterState=ClusterState.builder(clusterState).routingResult(result).build();
  logger.info("Adding third node and reroute and kill first node");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode("node3")).remove("node1")).build();
  RoutingTable prevRoutingTable=clusterState.routingTable();
  result=strategy.deassociateDeadNodes(clusterState,true,"reroute");
  clusterState=ClusterState.builder(clusterState).routingResult(result).build();
  routingNodes=clusterState.getRoutingNodes();
  routingTable=clusterState.routingTable();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(1));
  assertThat(routingNodes.node("node1"),nullValue());
  assertThat(routingNodes.node("node2").numberOfShardsWithState(STARTED),equalTo(1));
  assertThat(routingNodes.node("node3").numberOfShardsWithState(INITIALIZING),equalTo(1));
  assertThat(routingTable.index("test").shard(0).primaryShard().currentNodeId(),equalTo("node2"));
  assertThat(clusterState.metaData().index("test").primaryTerm(0),equalTo(2L));
  assertThat(routingTable.index("test").shard(0).replicaShards().get(0).currentNodeId(),equalTo("node3"));
}
