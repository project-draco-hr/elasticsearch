{
  AllocationService allocation=createAllocationService(settingsBuilder().put("cluster.routing.allocation.node_concurrent_recoveries",10).build());
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(2).numberOfReplicas(1)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build();
  logger.info("Adding two nodes and performing rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1")).put(newNode("node2"))).build();
  RoutingAllocation.Result rerouteResult=allocation.reroute(clusterState,"reroute");
  clusterState=ClusterState.builder(clusterState).routingTable(rerouteResult.routingTable()).build();
  logger.info("Start the primary shards");
  RoutingNodes routingNodes=clusterState.getRoutingNodes();
  rerouteResult=allocation.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  clusterState=ClusterState.builder(clusterState).routingTable(rerouteResult.routingTable()).build();
  routingNodes=clusterState.getRoutingNodes();
  assertThat(routingNodes.shardsWithState(STARTED).size(),equalTo(2));
  assertThat(routingNodes.shardsWithState(INITIALIZING).size(),equalTo(2));
  logger.info("--> fail node with primary");
  String nodeIdToFail=clusterState.routingTable().index("test").shard(0).primaryShard().currentNodeId();
  String nodeIdRemaining=nodeIdToFail.equals("node1") ? "node2" : "node1";
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode(nodeIdRemaining))).build();
  rerouteResult=allocation.reroute(clusterState,"reroute");
  clusterState=ClusterState.builder(clusterState).routingTable(rerouteResult.routingTable()).build();
  routingNodes=clusterState.getRoutingNodes();
  assertThat(routingNodes.shardsWithState(STARTED).size(),equalTo(1));
  assertThat(routingNodes.shardsWithState(INITIALIZING).size(),equalTo(1));
  assertThat(routingNodes.node(nodeIdRemaining).shardsWithState(INITIALIZING).get(0).primary(),equalTo(true));
}
