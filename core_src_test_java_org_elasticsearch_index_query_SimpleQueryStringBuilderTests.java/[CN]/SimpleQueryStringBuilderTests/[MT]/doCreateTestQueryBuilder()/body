{
  int numberOfTerms=randomIntBetween(1,5);
  queryTerms=new String[numberOfTerms];
  StringBuilder queryString=new StringBuilder();
  for (int i=0; i < numberOfTerms; i++) {
    queryTerms[i]=randomAsciiOfLengthBetween(1,10);
    queryString.append(queryTerms[i] + " ");
  }
  SimpleQueryStringBuilder result=new SimpleQueryStringBuilder(queryString.toString().trim());
  if (randomBoolean()) {
    result.analyzeWildcard(randomBoolean());
  }
  if (randomBoolean()) {
    result.lenient(randomBoolean());
  }
  if (randomBoolean()) {
    result.lowercaseExpandedTerms(randomBoolean());
  }
  if (randomBoolean()) {
    result.locale(randomLocale(getRandom()));
  }
  if (randomBoolean()) {
    result.minimumShouldMatch(randomMinimumShouldMatch());
  }
  if (randomBoolean()) {
    result.analyzer(randomAnalyzer());
  }
  if (randomBoolean()) {
    result.defaultOperator(randomFrom(Operator.values()));
  }
  if (randomBoolean()) {
    Set<SimpleQueryStringFlag> flagSet=new HashSet<>();
    if (numberOfTerms > 1) {
      flagSet.add(SimpleQueryStringFlag.WHITESPACE);
    }
    int size=randomIntBetween(0,SimpleQueryStringFlag.values().length);
    for (int i=0; i < size; i++) {
      SimpleQueryStringFlag randomFlag=randomFrom(SimpleQueryStringFlag.values());
      flagSet.add(randomFlag);
    }
    if (flagSet.size() > 0) {
      result.flags(flagSet.toArray(new SimpleQueryStringFlag[flagSet.size()]));
    }
  }
  int fieldCount=randomIntBetween(0,10);
  Map<String,Float> fields=new HashMap<>();
  for (int i=0; i < fieldCount; i++) {
    if (randomBoolean()) {
      fields.put("f" + i + "_"+ randomAsciiOfLengthBetween(1,10),AbstractQueryBuilder.DEFAULT_BOOST);
    }
 else {
      fields.put(randomBoolean() ? STRING_FIELD_NAME : "f" + i + "_"+ randomAsciiOfLengthBetween(1,10),2.0f / randomIntBetween(1,20));
    }
  }
  result.fields(fields);
  return result;
}
