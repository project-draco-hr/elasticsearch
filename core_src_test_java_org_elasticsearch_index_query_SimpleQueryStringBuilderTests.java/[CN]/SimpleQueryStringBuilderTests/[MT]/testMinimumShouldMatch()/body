{
  QueryShardContext shardContext=createShardContext();
  int numberOfTerms=randomIntBetween(1,4);
  int numberOfFields=randomIntBetween(1,4);
  StringBuilder queryString=new StringBuilder();
  for (int i=0; i < numberOfTerms; i++) {
    queryString.append("t" + i + " ");
  }
  SimpleQueryStringBuilder simpleQueryStringBuilder=new SimpleQueryStringBuilder(queryString.toString().trim());
  if (randomBoolean()) {
    simpleQueryStringBuilder.defaultOperator(Operator.AND);
  }
  for (int i=0; i < numberOfFields; i++) {
    simpleQueryStringBuilder.field("f" + i);
  }
  int percent=randomIntBetween(1,100);
  simpleQueryStringBuilder.minimumShouldMatch(percent + "%");
  BooleanQuery query=(BooleanQuery)simpleQueryStringBuilder.toQuery(shardContext);
  assertEquals("query should have one should clause per term",numberOfTerms,query.clauses().size());
  int expectedMinimumShouldMatch=numberOfTerms * percent / 100;
  if (simpleQueryStringBuilder.defaultOperator().equals(Operator.AND) && numberOfTerms > 1) {
    expectedMinimumShouldMatch=0;
  }
  assertEquals(expectedMinimumShouldMatch,query.getMinimumNumberShouldMatch());
  for (  BooleanClause clause : query.clauses()) {
    if (numberOfFields == 1 && numberOfTerms == 1) {
      assertTrue(clause.getQuery() instanceof TermQuery);
    }
 else {
      assertEquals(numberOfFields,((BooleanQuery)clause.getQuery()).clauses().size());
    }
  }
}
