{
  assertThat(query,notNullValue());
  if ("".equals(queryBuilder.value())) {
    assertThat(query,instanceOf(MatchNoDocsQuery.class));
  }
 else   if (queryBuilder.fields().size() > 1) {
    assertThat(query,instanceOf(BooleanQuery.class));
    BooleanQuery boolQuery=(BooleanQuery)query;
    if (queryBuilder.lowercaseExpandedTerms()) {
      for (      BooleanClause clause : boolQuery.clauses()) {
        if (clause.getQuery() instanceof TermQuery) {
          TermQuery inner=(TermQuery)clause.getQuery();
          assertThat(inner.getTerm().bytes().toString(),is(inner.getTerm().bytes().toString().toLowerCase(Locale.ROOT)));
        }
      }
    }
    assertThat(boolQuery.clauses().size(),equalTo(queryBuilder.fields().size()));
    Iterator<Map.Entry<String,Float>> fieldsIterator=queryBuilder.fields().entrySet().iterator();
    for (    BooleanClause booleanClause : boolQuery) {
      Map.Entry<String,Float> field=fieldsIterator.next();
      assertTermOrBoostQuery(booleanClause.getQuery(),field.getKey(),queryBuilder.value(),field.getValue());
    }
    if (queryBuilder.minimumShouldMatch() != null && !boolQuery.isCoordDisabled()) {
      assertThat(boolQuery.getMinimumNumberShouldMatch(),greaterThan(0));
    }
  }
 else   if (queryBuilder.fields().size() == 1) {
    Map.Entry<String,Float> field=queryBuilder.fields().entrySet().iterator().next();
    assertTermOrBoostQuery(query,field.getKey(),queryBuilder.value(),field.getValue());
  }
 else   if (queryBuilder.fields().size() == 0) {
    assertTermQuery(query,MetaData.ALL,queryBuilder.value());
  }
 else {
    fail("Encountered lucene query type we do not have a validation implementation for in our " + SimpleQueryStringBuilderTests.class.getSimpleName());
  }
}
