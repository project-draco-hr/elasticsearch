{
  assertThat(query,notNullValue());
  if ("".equals(queryBuilder.value())) {
    assertTrue("Query should have been MatchNoDocsQuery but was " + query.getClass().getName(),query instanceof MatchNoDocsQuery);
  }
 else {
    assertTrue("Query should have been BooleanQuery but was " + query.getClass().getName(),query instanceof BooleanQuery);
    BooleanQuery boolQuery=(BooleanQuery)query;
    if (queryBuilder.lowercaseExpandedTerms()) {
      for (      BooleanClause clause : boolQuery.clauses()) {
        if (clause.getQuery() instanceof TermQuery) {
          TermQuery inner=(TermQuery)clause.getQuery();
          assertThat(inner.getTerm().bytes().toString(),is(inner.getTerm().bytes().toString().toLowerCase(Locale.ROOT)));
        }
      }
    }
    assertThat(boolQuery.clauses().size(),equalTo(queryTerms.length));
    Map<String,Float> expectedFields=new TreeMap<String,Float>(queryBuilder.fields());
    if (expectedFields.size() == 0) {
      expectedFields.put(MetaData.ALL,AbstractQueryBuilder.DEFAULT_BOOST);
    }
    for (int i=0; i < queryTerms.length; i++) {
      BooleanClause booleanClause=boolQuery.clauses().get(i);
      Iterator<Entry<String,Float>> fieldsIter=expectedFields.entrySet().iterator();
      if (queryTerms.length == 1 && expectedFields.size() == 1) {
        assertThat(booleanClause.getQuery(),instanceOf(TermQuery.class));
        TermQuery termQuery=(TermQuery)booleanClause.getQuery();
        Entry<String,Float> entry=fieldsIter.next();
        assertThat(termQuery.getTerm().field(),equalTo(entry.getKey()));
        assertThat(termQuery.getBoost(),equalTo(entry.getValue()));
        assertThat(termQuery.getTerm().text().toLowerCase(Locale.ROOT),equalTo(queryTerms[i].toLowerCase(Locale.ROOT)));
      }
 else {
        assertThat(booleanClause.getQuery(),instanceOf(BooleanQuery.class));
        for (        BooleanClause clause : ((BooleanQuery)booleanClause.getQuery()).clauses()) {
          TermQuery termQuery=(TermQuery)clause.getQuery();
          Entry<String,Float> entry=fieldsIter.next();
          assertThat(termQuery.getTerm().field(),equalTo(entry.getKey()));
          assertThat(termQuery.getBoost(),equalTo(entry.getValue()));
          assertThat(termQuery.getTerm().text().toLowerCase(Locale.ROOT),equalTo(queryTerms[i].toLowerCase(Locale.ROOT)));
        }
      }
    }
    if (queryBuilder.minimumShouldMatch() != null) {
      int optionalClauses=queryTerms.length;
      if (queryBuilder.defaultOperator().equals(Operator.AND) && queryTerms.length > 1) {
        optionalClauses=0;
      }
      int expectedMinimumShouldMatch=Queries.calculateMinShouldMatch(optionalClauses,queryBuilder.minimumShouldMatch());
      assertEquals(expectedMinimumShouldMatch,boolQuery.getMinimumNumberShouldMatch());
    }
  }
}
