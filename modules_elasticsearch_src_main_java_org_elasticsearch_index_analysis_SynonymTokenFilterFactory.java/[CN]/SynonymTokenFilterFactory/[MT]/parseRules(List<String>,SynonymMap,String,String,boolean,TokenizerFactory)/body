{
  int count=0;
  for (  String rule : rules) {
    List<String> mapping=Strings.splitSmart(rule,mappingSep,false);
    List<List<String>> source;
    List<List<String>> target;
    if (mapping.size() > 2) {
      throw new RuntimeException("Invalid Synonym Rule:" + rule);
    }
 else     if (mapping.size() == 2) {
      source=getSynList(mapping.get(0),synSep,tokFactory);
      target=getSynList(mapping.get(1),synSep,tokFactory);
    }
 else {
      source=getSynList(mapping.get(0),synSep,tokFactory);
      if (expansion) {
        target=source;
      }
 else {
        target=new ArrayList<List<String>>(1);
        target.add(source.get(0));
      }
    }
    boolean includeOrig=false;
    for (    List<String> fromToks : source) {
      count++;
      for (      List<String> toToks : target) {
        map.add(fromToks,SynonymMap.makeTokens(toToks),includeOrig,true);
      }
    }
  }
}
