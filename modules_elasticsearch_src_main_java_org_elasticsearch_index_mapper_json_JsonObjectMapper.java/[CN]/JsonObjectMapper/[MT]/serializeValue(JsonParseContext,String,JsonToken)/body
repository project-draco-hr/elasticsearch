{
  JsonMapper mapper=mappers.get(currentFieldName);
  if (mapper != null) {
    mapper.parse(jsonContext);
    return;
  }
  if (!dynamic) {
    return;
  }
synchronized (mutex) {
    mapper=mappers.get(currentFieldName);
    if (mapper != null) {
      mapper.parse(jsonContext);
      return;
    }
    BuilderContext builderContext=new BuilderContext(jsonContext.path());
    if (token == JsonToken.VALUE_STRING) {
      boolean isDate=false;
      for (      FormatDateTimeFormatter dateTimeFormatter : dateTimeFormatters) {
        try {
          dateTimeFormatter.parser().parseMillis(jsonContext.jp().getText());
          mapper=dateField(currentFieldName).dateTimeFormatter(dateTimeFormatter).build(builderContext);
          isDate=true;
          break;
        }
 catch (        Exception e) {
        }
      }
      if (!isDate) {
        mapper=stringField(currentFieldName).build(builderContext);
      }
    }
 else     if (token == JsonToken.VALUE_NUMBER_INT) {
      mapper=longField(currentFieldName).build(builderContext);
    }
 else     if (token == JsonToken.VALUE_NUMBER_FLOAT) {
      mapper=doubleField(currentFieldName).build(builderContext);
    }
 else     if (token == JsonToken.VALUE_TRUE) {
      mapper=booleanField(currentFieldName).build(builderContext);
    }
 else     if (token == JsonToken.VALUE_FALSE) {
      mapper=booleanField(currentFieldName).build(builderContext);
    }
 else {
      throw new ElasticSearchIllegalStateException("Can't handle serializing a dynamic type with json token [" + token + "] and field name ["+ currentFieldName+ "]");
    }
    putMapper(mapper);
    jsonContext.docMapper().addFieldMapper((FieldMapper)mapper);
    mapper.parse(jsonContext);
    jsonContext.addedMapper();
  }
}
