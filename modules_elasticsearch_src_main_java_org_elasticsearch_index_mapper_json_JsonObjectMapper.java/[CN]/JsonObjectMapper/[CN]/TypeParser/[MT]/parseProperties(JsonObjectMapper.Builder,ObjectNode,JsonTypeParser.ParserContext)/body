{
  for (Iterator<Map.Entry<String,JsonNode>> propsIt=propsNode.getFields(); propsIt.hasNext(); ) {
    Map.Entry<String,JsonNode> entry=propsIt.next();
    String propName=entry.getKey();
    JsonNode propNode=entry.getValue();
    String type;
    JsonNode typeNode=propNode.get("type");
    if (typeNode != null) {
      type=typeNode.getTextValue();
    }
 else {
      if (propNode.isObject() && propNode.get("properties") != null) {
        type=JsonObjectMapper.JSON_TYPE;
      }
 else       if (propNode.isObject() && propNode.get("fields") != null) {
        type=JsonMultiFieldMapper.JSON_TYPE;
      }
 else {
        throw new MapperParsingException("No type specified for property [" + propName + "]");
      }
    }
    JsonTypeParser typeParser=parserContext.typeParser(type);
    if (typeParser == null) {
      throw new MapperParsingException("No handler for type [" + type + "] declared on field ["+ propName+ "]");
    }
    objBuilder.add(typeParser.parse(propName,propNode,parserContext));
  }
}
