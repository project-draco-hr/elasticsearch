{
  Map<String,Object> objectNode=node;
  JsonObjectMapper.Builder builder=object(name);
  for (  Map.Entry<String,Object> entry : objectNode.entrySet()) {
    String fieldName=Strings.toUnderscoreCase(entry.getKey());
    Object fieldNode=entry.getValue();
    if (fieldName.equals("dynamic")) {
      builder.dynamic(nodeBooleanValue(fieldNode));
    }
 else     if (fieldName.equals("type")) {
      String type=fieldNode.toString();
      if (!type.equals("object")) {
        throw new MapperParsingException("Trying to parse an object but has a different type [" + type + "] for ["+ name+ "]");
      }
    }
 else     if (fieldName.equals("date_formats")) {
      List<FormatDateTimeFormatter> dateTimeFormatters=newArrayList();
      if (fieldNode instanceof List) {
        for (        Object node1 : (List)fieldNode) {
          dateTimeFormatters.add(parseDateTimeFormatter(fieldName,node1));
        }
      }
 else       if ("none".equals(fieldNode.toString())) {
        dateTimeFormatters=null;
      }
 else {
        dateTimeFormatters.add(parseDateTimeFormatter(fieldName,fieldNode));
      }
      if (dateTimeFormatters == null) {
        builder.noDateTimeFormatter();
      }
 else {
        builder.dateTimeFormatter(dateTimeFormatters);
      }
    }
 else     if (fieldName.equals("enabled")) {
      builder.enabled(nodeBooleanValue(fieldNode));
    }
 else     if (fieldName.equals("path")) {
      builder.pathType(parsePathType(name,fieldNode.toString()));
    }
 else     if (fieldName.equals("properties")) {
      parseProperties(builder,(Map<String,Object>)fieldNode,parserContext);
    }
 else     if (fieldName.equals("include_in_all")) {
      builder.includeInAll(nodeBooleanValue(fieldNode));
    }
  }
  return builder;
}
