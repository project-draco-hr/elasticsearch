{
  assumeTrue(ASSERTIONS_ENABLED);
  ObjectOpenHashSet<String> set1=ObjectOpenHashSet.from("1","2","3");
  ObjectOpenHashSet<String> set2=ObjectOpenHashSet.from("1","2","3");
  List<String> values=toList(HppcMaps.intersection(set1,set2));
  assertThat(values.size(),equalTo(3));
  assertThat(values.contains("1"),equalTo(true));
  assertThat(values.contains("2"),equalTo(true));
  assertThat(values.contains("3"),equalTo(true));
  set1=ObjectOpenHashSet.from("1","2","3");
  set2=ObjectOpenHashSet.from("3","4","5");
  values=toList(HppcMaps.intersection(set1,set2));
  assertThat(values.size(),equalTo(1));
  assertThat(values.get(0),equalTo("3"));
  set1=ObjectOpenHashSet.from("1","2","3");
  set2=ObjectOpenHashSet.from("4","5","6");
  values=toList(HppcMaps.intersection(set1,set2));
  assertThat(values.size(),equalTo(0));
  set1=ObjectOpenHashSet.from();
  set2=ObjectOpenHashSet.from("3","4","5");
  values=toList(HppcMaps.intersection(set1,set2));
  assertThat(values.size(),equalTo(0));
  set1=ObjectOpenHashSet.from("1","2","3");
  set2=ObjectOpenHashSet.from();
  values=toList(HppcMaps.intersection(set1,set2));
  assertThat(values.size(),equalTo(0));
  set1=ObjectOpenHashSet.from();
  set2=ObjectOpenHashSet.from();
  values=toList(HppcMaps.intersection(set1,set2));
  assertThat(values.size(),equalTo(0));
  set1=null;
  set2=ObjectOpenHashSet.from();
  try {
    toList(HppcMaps.intersection(set1,set2));
    fail();
  }
 catch (  AssertionError e) {
  }
  set1=ObjectOpenHashSet.from();
  set2=null;
  try {
    toList(HppcMaps.intersection(set1,set2));
    fail();
  }
 catch (  AssertionError e) {
  }
  set1=null;
  set2=null;
  try {
    toList(HppcMaps.intersection(set1,set2));
    fail();
  }
 catch (  AssertionError e) {
  }
}
