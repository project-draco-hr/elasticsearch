{
  StatementContext _localctx=new StatementContext(_ctx,getState());
  enterRule(_localctx,2,RULE_statement);
  int _la;
  try {
    int _alt;
    setState(136);
switch (getInterpreter().adaptivePredict(_input,15,_ctx)) {
case 1:
      _localctx=new IfContext(_localctx);
    enterOuterAlt(_localctx,1);
{
    setState(53);
    match(IF);
    setState(54);
    match(LP);
    setState(55);
    expression(0);
    setState(56);
    match(RP);
    setState(57);
    block();
    setState(60);
switch (getInterpreter().adaptivePredict(_input,1,_ctx)) {
case 1:
{
        setState(58);
        match(ELSE);
        setState(59);
        block();
      }
    break;
}
}
break;
case 2:
_localctx=new WhileContext(_localctx);
enterOuterAlt(_localctx,2);
{
setState(62);
match(WHILE);
setState(63);
match(LP);
setState(64);
expression(0);
setState(65);
match(RP);
setState(68);
switch (_input.LA(1)) {
case LBRACK:
case LP:
case IF:
case WHILE:
case DO:
case FOR:
case CONTINUE:
case BREAK:
case RETURN:
case NEW:
case TRY:
case THROW:
case BOOLNOT:
case BWNOT:
case ADD:
case SUB:
case INCR:
case DECR:
case OCTAL:
case HEX:
case INTEGER:
case DECIMAL:
case STRING:
case CHAR:
case TRUE:
case FALSE:
case NULL:
case TYPE:
case ID:
{
setState(66);
block();
}
break;
case SEMICOLON:
{
setState(67);
empty();
}
break;
default :
throw new NoViableAltException(this);
}
}
break;
case 3:
_localctx=new DoContext(_localctx);
enterOuterAlt(_localctx,3);
{
setState(70);
match(DO);
setState(71);
block();
setState(72);
match(WHILE);
setState(73);
match(LP);
setState(74);
expression(0);
setState(75);
match(RP);
setState(77);
_la=_input.LA(1);
if (_la == SEMICOLON) {
{
setState(76);
match(SEMICOLON);
}
}
}
break;
case 4:
_localctx=new ForContext(_localctx);
enterOuterAlt(_localctx,4);
{
setState(79);
match(FOR);
setState(80);
match(LP);
setState(82);
_la=_input.LA(1);
if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LP) | (1L << NEW) | (1L << BOOLNOT)| (1L << BWNOT)| (1L << ADD)| (1L << SUB)| (1L << INCR)| (1L << DECR))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OCTAL - 64)) | (1L << (HEX - 64)) | (1L << (INTEGER - 64))| (1L << (DECIMAL - 64))| (1L << (STRING - 64))| (1L << (CHAR - 64))| (1L << (TRUE - 64))| (1L << (FALSE - 64))| (1L << (NULL - 64))| (1L << (TYPE - 64))| (1L << (ID - 64)))) != 0)) {
{
setState(81);
initializer();
}
}
setState(84);
match(SEMICOLON);
setState(86);
_la=_input.LA(1);
if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LP) | (1L << NEW) | (1L << BOOLNOT)| (1L << BWNOT)| (1L << ADD)| (1L << SUB)| (1L << INCR)| (1L << DECR))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OCTAL - 64)) | (1L << (HEX - 64)) | (1L << (INTEGER - 64))| (1L << (DECIMAL - 64))| (1L << (STRING - 64))| (1L << (CHAR - 64))| (1L << (TRUE - 64))| (1L << (FALSE - 64))| (1L << (NULL - 64))| (1L << (TYPE - 64))| (1L << (ID - 64)))) != 0)) {
{
setState(85);
expression(0);
}
}
setState(88);
match(SEMICOLON);
setState(90);
_la=_input.LA(1);
if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LP) | (1L << NEW) | (1L << BOOLNOT)| (1L << BWNOT)| (1L << ADD)| (1L << SUB)| (1L << INCR)| (1L << DECR))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OCTAL - 64)) | (1L << (HEX - 64)) | (1L << (INTEGER - 64))| (1L << (DECIMAL - 64))| (1L << (STRING - 64))| (1L << (CHAR - 64))| (1L << (TRUE - 64))| (1L << (FALSE - 64))| (1L << (NULL - 64))| (1L << (TYPE - 64))| (1L << (ID - 64)))) != 0)) {
{
setState(89);
afterthought();
}
}
setState(92);
match(RP);
setState(95);
switch (_input.LA(1)) {
case LBRACK:
case LP:
case IF:
case WHILE:
case DO:
case FOR:
case CONTINUE:
case BREAK:
case RETURN:
case NEW:
case TRY:
case THROW:
case BOOLNOT:
case BWNOT:
case ADD:
case SUB:
case INCR:
case DECR:
case OCTAL:
case HEX:
case INTEGER:
case DECIMAL:
case STRING:
case CHAR:
case TRUE:
case FALSE:
case NULL:
case TYPE:
case ID:
{
setState(93);
block();
}
break;
case SEMICOLON:
{
setState(94);
empty();
}
break;
default :
throw new NoViableAltException(this);
}
}
break;
case 5:
_localctx=new DeclContext(_localctx);
enterOuterAlt(_localctx,5);
{
setState(97);
declaration();
setState(99);
_la=_input.LA(1);
if (_la == SEMICOLON) {
{
setState(98);
match(SEMICOLON);
}
}
}
break;
case 6:
_localctx=new ContinueContext(_localctx);
enterOuterAlt(_localctx,6);
{
setState(101);
match(CONTINUE);
setState(103);
_la=_input.LA(1);
if (_la == SEMICOLON) {
{
setState(102);
match(SEMICOLON);
}
}
}
break;
case 7:
_localctx=new BreakContext(_localctx);
enterOuterAlt(_localctx,7);
{
setState(105);
match(BREAK);
setState(107);
_la=_input.LA(1);
if (_la == SEMICOLON) {
{
setState(106);
match(SEMICOLON);
}
}
}
break;
case 8:
_localctx=new ReturnContext(_localctx);
enterOuterAlt(_localctx,8);
{
setState(109);
match(RETURN);
setState(110);
expression(0);
setState(112);
_la=_input.LA(1);
if (_la == SEMICOLON) {
{
setState(111);
match(SEMICOLON);
}
}
}
break;
case 9:
_localctx=new TryContext(_localctx);
enterOuterAlt(_localctx,9);
{
setState(114);
match(TRY);
setState(115);
block();
setState(123);
_errHandler.sync(this);
_alt=1;
do {
switch (_alt) {
case 1:
{
{
setState(116);
match(CATCH);
setState(117);
match(LP);
{
setState(118);
match(TYPE);
setState(119);
match(ID);
}
setState(121);
match(RP);
setState(122);
block();
}
}
break;
default :
throw new NoViableAltException(this);
}
setState(125);
_errHandler.sync(this);
_alt=getInterpreter().adaptivePredict(_input,12,_ctx);
}
 while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
}
break;
case 10:
_localctx=new ThrowContext(_localctx);
enterOuterAlt(_localctx,10);
{
setState(127);
match(THROW);
setState(128);
expression(0);
setState(130);
_la=_input.LA(1);
if (_la == SEMICOLON) {
{
setState(129);
match(SEMICOLON);
}
}
}
break;
case 11:
_localctx=new ExprContext(_localctx);
enterOuterAlt(_localctx,11);
{
setState(132);
expression(0);
setState(134);
_la=_input.LA(1);
if (_la == SEMICOLON) {
{
setState(133);
match(SEMICOLON);
}
}
}
break;
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}
