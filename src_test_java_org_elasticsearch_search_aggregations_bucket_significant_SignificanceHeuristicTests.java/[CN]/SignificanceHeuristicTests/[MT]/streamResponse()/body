{
  SignificanceHeuristicStreams.registerStream(MutualInformation.STREAM,MutualInformation.STREAM.getName());
  SignificanceHeuristicStreams.registerStream(JLHScore.STREAM,JLHScore.STREAM.getName());
  SignificanceHeuristicStreams.registerStream(PercentageScore.STREAM,PercentageScore.STREAM.getName());
  SignificanceHeuristicStreams.registerStream(GND.STREAM,GND.STREAM.getName());
  SignificanceHeuristicStreams.registerStream(ChiSquare.STREAM,ChiSquare.STREAM.getName());
  SignificanceHeuristicStreams.registerStream(ScriptHeuristic.STREAM,ScriptHeuristic.STREAM.getName());
  Version version=ElasticsearchIntegrationTest.randomVersion();
  InternalSignificantTerms[] sigTerms=getRandomSignificantTerms(getRandomSignificanceheuristic());
  ByteArrayOutputStream outBuffer=new ByteArrayOutputStream();
  OutputStreamStreamOutput out=new OutputStreamStreamOutput(outBuffer);
  out.setVersion(version);
  sigTerms[0].writeTo(out);
  ByteArrayInputStream inBuffer=new ByteArrayInputStream(outBuffer.toByteArray());
  InputStreamStreamInput in=new InputStreamStreamInput(inBuffer);
  in.setVersion(version);
  sigTerms[1].readFrom(in);
  assertTrue(sigTerms[1].significanceHeuristic.equals(sigTerms[0].significanceHeuristic));
}
