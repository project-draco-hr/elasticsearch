{
  MutualInformation mutualInformation=new MutualInformation(true,true);
  try {
    mutualInformation.getScore(2,3,1,4);
    fail();
  }
 catch (  ElasticsearchIllegalArgumentException illegalArgumentException) {
    assertNotNull(illegalArgumentException.getMessage());
    assertTrue(illegalArgumentException.getMessage().contains("subsetFreq > supersetFreq"));
  }
  try {
    mutualInformation.getScore(1,4,2,3);
    fail();
  }
 catch (  ElasticsearchIllegalArgumentException illegalArgumentException) {
    assertNotNull(illegalArgumentException.getMessage());
    assertTrue(illegalArgumentException.getMessage().contains("subsetSize > supersetSize"));
  }
  try {
    mutualInformation.getScore(2,1,3,4);
    fail();
  }
 catch (  ElasticsearchIllegalArgumentException illegalArgumentException) {
    assertNotNull(illegalArgumentException.getMessage());
    assertTrue(illegalArgumentException.getMessage().contains("subsetFreq > subsetSize"));
  }
  try {
    mutualInformation.getScore(1,2,4,3);
    fail();
  }
 catch (  ElasticsearchIllegalArgumentException illegalArgumentException) {
    assertNotNull(illegalArgumentException.getMessage());
    assertTrue(illegalArgumentException.getMessage().contains("supersetFreq > supersetSize"));
  }
  try {
    mutualInformation.getScore(1,3,4,4);
    fail();
  }
 catch (  ElasticsearchIllegalArgumentException assertionError) {
    assertNotNull(assertionError.getMessage());
    assertTrue(assertionError.getMessage().contains("supersetFreq - subsetFreq > supersetSize - subsetSize"));
  }
  try {
    int idx=randomInt(3);
    long[] values={1,2,3,4};
    values[idx]*=-1;
    mutualInformation.getScore(values[0],values[1],values[2],values[3]);
    fail();
  }
 catch (  ElasticsearchIllegalArgumentException illegalArgumentException) {
    assertNotNull(illegalArgumentException.getMessage());
    assertTrue(illegalArgumentException.getMessage().contains("Frequencies of subset and superset must be positive"));
  }
  mutualInformation=new MutualInformation(true,false);
  double score=mutualInformation.getScore(2,3,1,4);
  assertThat(score,greaterThanOrEqualTo(0.0));
  assertThat(score,lessThanOrEqualTo(1.0));
  score=mutualInformation.getScore(1,4,2,3);
  assertThat(score,greaterThanOrEqualTo(0.0));
  assertThat(score,lessThanOrEqualTo(1.0));
  try {
    mutualInformation.getScore(2,1,3,4);
    fail();
  }
 catch (  ElasticsearchIllegalArgumentException illegalArgumentException) {
    assertNotNull(illegalArgumentException.getMessage());
    assertTrue(illegalArgumentException.getMessage().contains("subsetFreq > subsetSize"));
  }
  try {
    mutualInformation.getScore(1,2,4,3);
    fail();
  }
 catch (  ElasticsearchIllegalArgumentException illegalArgumentException) {
    assertNotNull(illegalArgumentException.getMessage());
    assertTrue(illegalArgumentException.getMessage().contains("supersetFreq > supersetSize"));
  }
  score=mutualInformation.getScore(1,3,4,4);
  assertThat(score,greaterThanOrEqualTo(0.0));
  assertThat(score,lessThanOrEqualTo(1.0));
  try {
    int idx=randomInt(3);
    long[] values={1,2,3,4};
    values[idx]*=-1;
    mutualInformation.getScore(values[0],values[1],values[2],values[3]);
    fail();
  }
 catch (  ElasticsearchIllegalArgumentException illegalArgumentException) {
    assertNotNull(illegalArgumentException.getMessage());
    assertTrue(illegalArgumentException.getMessage().contains("Frequencies of subset and superset must be positive"));
  }
  JLHScore jlhScore=JLHScore.INSTANCE;
  try {
    int idx=randomInt(3);
    long[] values={1,2,3,4};
    values[idx]*=-1;
    jlhScore.getScore(values[0],values[1],values[2],values[3]);
    fail();
  }
 catch (  ElasticsearchIllegalArgumentException illegalArgumentException) {
    assertNotNull(illegalArgumentException.getMessage());
    assertTrue(illegalArgumentException.getMessage().contains("Frequencies of subset and superset must be positive"));
  }
  try {
    jlhScore.getScore(1,2,4,3);
    fail();
  }
 catch (  ElasticsearchIllegalArgumentException illegalArgumentException) {
    assertNotNull(illegalArgumentException.getMessage());
    assertTrue(illegalArgumentException.getMessage().contains("supersetFreq > supersetSize"));
  }
  try {
    jlhScore.getScore(2,1,3,4);
    fail();
  }
 catch (  ElasticsearchIllegalArgumentException illegalArgumentException) {
    assertNotNull(illegalArgumentException.getMessage());
    assertTrue(illegalArgumentException.getMessage().contains("subsetFreq > subsetSize"));
  }
}
