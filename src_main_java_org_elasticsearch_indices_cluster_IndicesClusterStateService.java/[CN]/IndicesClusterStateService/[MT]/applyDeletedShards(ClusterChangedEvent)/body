{
  RoutingNodes.RoutingNodeIterator routingNode=event.state().readOnlyRoutingNodes().routingNodeIter(event.state().nodes().localNodeId());
  if (routingNode == null) {
    return;
  }
  IntOpenHashSet newShardIds=new IntOpenHashSet();
  for (  IndexService indexService : indicesService) {
    String index=indexService.index().name();
    IndexMetaData indexMetaData=event.state().metaData().index(index);
    if (indexMetaData == null) {
      continue;
    }
    newShardIds.clear();
    for (    MutableShardRouting shard : routingNode) {
      if (shard.index().equals(index)) {
        newShardIds.add(shard.id());
      }
    }
    for (    Integer existingShardId : indexService.shardIds()) {
      if (!newShardIds.contains(existingShardId)) {
        if (indexMetaData.state() == IndexMetaData.State.CLOSE) {
          if (logger.isDebugEnabled()) {
            logger.debug("[{}][{}] removing shard (index is closed)",index,existingShardId);
          }
          indexService.removeShard(existingShardId,"removing shard (index is closed)");
        }
 else {
          if (logger.isDebugEnabled()) {
            logger.debug("[{}][{}] removing shard (not allocated)",index,existingShardId);
          }
          indexService.removeShard(existingShardId,"removing shard (not allocated)");
        }
      }
    }
  }
}
