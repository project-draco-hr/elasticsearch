{
  if (!indicesService.changesAllowed())   return;
  RoutingTable routingTable=event.state().routingTable();
  RoutingNode routingNodes=event.state().readOnlyRoutingNodes().nodesToShards().get(event.state().nodes().localNodeId());
  if (routingNodes == null) {
    return;
  }
  DiscoveryNodes nodes=event.state().nodes();
  for (  final ShardRouting shardRouting : routingNodes) {
    final IndexService indexService=indicesService.indexService(shardRouting.index());
    if (indexService == null) {
      continue;
    }
    final int shardId=shardRouting.id();
    if (!indexService.hasShard(shardId) && shardRouting.started()) {
      logger.warn("[{}][{}] master [{}] marked shard as started, but shard have not been created, mark shard as failed",shardRouting.index(),shardId,nodes.masterNode());
      shardStateAction.shardFailed(shardRouting,"master " + nodes.masterNode() + " marked shard as started, but shard have not been created, mark shard as failed");
      continue;
    }
    if (indexService.hasShard(shardId)) {
      InternalIndexShard indexShard=(InternalIndexShard)indexService.shard(shardId);
      if (!shardRouting.equals(indexShard.routingEntry())) {
        ShardRouting currentRoutingEntry=indexShard.routingEntry();
        boolean needToDeleteCurrentShard=false;
        if (currentRoutingEntry.initializing() && shardRouting.initializing()) {
          if (currentRoutingEntry.primary() && !shardRouting.primary()) {
            needToDeleteCurrentShard=true;
          }
          if (currentRoutingEntry.relocatingNodeId() != null && shardRouting.relocatingNodeId() != null && !currentRoutingEntry.relocatingNodeId().equals(shardRouting.relocatingNodeId())) {
            needToDeleteCurrentShard=true;
          }
        }
        if (needToDeleteCurrentShard) {
          if (logger.isDebugEnabled()) {
            logger.debug("[{}][{}] removing shard (different instance of it allocated on this node)",shardRouting.index(),shardRouting.id());
          }
          recoveryTarget.cancelRecovery(shardRouting.shardId());
          indexService.removeShard(shardRouting.id(),"removing shard (different instance of it allocated on this node)");
        }
      }
    }
    if (indexService.hasShard(shardId)) {
      InternalIndexShard indexShard=(InternalIndexShard)indexService.shard(shardId);
      if (!shardRouting.equals(indexShard.routingEntry())) {
        indexShard.routingEntry(shardRouting);
        indexService.shardInjector(shardId).getInstance(IndexShardGatewayService.class).routingStateChanged();
      }
    }
    if (shardRouting.initializing()) {
      applyInitializingShard(routingTable,nodes,routingTable.index(shardRouting.index()).shard(shardRouting.id()),shardRouting);
    }
  }
}
