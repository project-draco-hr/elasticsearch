{
  for (  final String index : indicesService.indices().keySet()) {
    if (!event.state().metaData().hasIndex(index)) {
      if (logger.isDebugEnabled()) {
        logger.debug("[{}] cleaning index, no longer part of the metadata",index);
      }
      removeIndex(index,"index no longer part of the metadata",new IndicesService.IndexCloseListener(){
        @Override public void onAllShardsClosed(        Index index,        List<Throwable> failures){
          try {
            nodeEnvironment.deleteIndexDirectorySafe(index);
            logger.debug("deleted index [{}] from filesystem",index);
          }
 catch (          Exception e) {
            logger.debug("failed to deleted index [{}] from filesystem",e,index);
          }
        }
        @Override public void onShardClosed(        ShardId shardId){
          try {
            nodeEnvironment.deleteShardDirectorySafe(shardId);
            logger.debug("deleted shard [{}] from filesystem",shardId);
          }
 catch (          IOException e) {
            logger.warn("Can't delete shard {} ",e,shardId);
          }
        }
        @Override public void onShardCloseFailed(        ShardId shardId,        Throwable t){
        }
      }
);
    }
  }
}
