{
  if (!seenMappings.containsKey(new Tuple<String,String>(index,mappingType))) {
    seenMappings.put(new Tuple<String,String>(index,mappingType),true);
  }
  boolean requiresRefresh=false;
  try {
    if (!mapperService.hasMapping(mappingType)) {
      if (logger.isDebugEnabled()) {
        logger.debug("[{}] adding mapping [{}], source [{}]",index,mappingType,mappingSource.string());
      }
      mapperService.merge(mappingType,mappingSource.string(),false);
      if (!mapperService.documentMapper(mappingType).mappingSource().equals(mappingSource)) {
        logger.debug("[{}] parsed mapping [{}], and got different sources\noriginal:\n{}\nparsed:\n{}",index,mappingType,mappingSource,mapperService.documentMapper(mappingType).mappingSource());
        requiresRefresh=true;
      }
      nodeMappingCreatedAction.nodeMappingCreated(event.state(),new NodeMappingCreatedAction.NodeMappingCreatedResponse(index,mappingType,event.state().nodes().localNodeId(),event.state().version()));
    }
 else {
      DocumentMapper existingMapper=mapperService.documentMapper(mappingType);
      if (!mappingSource.equals(existingMapper.mappingSource())) {
        if (logger.isDebugEnabled()) {
          logger.debug("[{}] updating mapping [{}], source [{}]",index,mappingType,mappingSource.string());
        }
        mapperService.merge(mappingType,mappingSource.string(),false);
        if (!mapperService.documentMapper(mappingType).mappingSource().equals(mappingSource)) {
          requiresRefresh=true;
          logger.debug("[{}] parsed mapping [{}], and got different sources\noriginal:\n{}\nparsed:\n{}",index,mappingType,mappingSource,mapperService.documentMapper(mappingType).mappingSource());
        }
        nodeMappingCreatedAction.nodeMappingCreated(event.state(),new NodeMappingCreatedAction.NodeMappingCreatedResponse(index,mappingType,event.state().nodes().localNodeId(),event.state().version()));
      }
    }
  }
 catch (  Throwable e) {
    logger.warn("[{}] failed to add mapping [{}], source [{}]",e,index,mappingType,mappingSource);
  }
  return requiresRefresh;
}
