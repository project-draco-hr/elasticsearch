{
  final Long[] values=new Long[randomIntBetween(1,100000)];
  for (int i=0; i < values.length; ++i) {
    values[i]=randomLong();
  }
  final LongLongMap valueToId=new LongLongOpenHashMap();
  final long[] idToValue=new long[values.length];
  final float maxLoadFactor=0.6f + randomFloat() * 0.39f;
  final LongHash longHash=new LongHash(randomIntBetween(0,100),maxLoadFactor,BigArraysTests.randomCacheRecycler());
  final int iters=randomInt(1000000);
  for (int i=0; i < iters; ++i) {
    final Long value=randomFrom(values);
    if (valueToId.containsKey(value)) {
      assertEquals(-1 - valueToId.get(value),longHash.add(value));
    }
 else {
      assertEquals(valueToId.size(),longHash.add(value));
      idToValue[valueToId.size()]=value;
      valueToId.put(value,valueToId.size());
    }
  }
  assertEquals(valueToId.size(),longHash.size());
  for (Iterator<LongLongCursor> iterator=valueToId.iterator(); iterator.hasNext(); ) {
    final LongLongCursor next=iterator.next();
    assertEquals(next.value,longHash.find(next.key));
  }
  for (long i=0; i < longHash.capacity(); ++i) {
    final long id=longHash.id(i);
    if (id >= 0) {
      assertEquals(idToValue[(int)id],longHash.key(i));
    }
  }
  longHash.release();
}
