{
  assertAcked(prepareCreate("idx_range").addMapping("type","ip","type=ip","ips","type=ip"));
  IndexRequestBuilder[] builders=new IndexRequestBuilder[4];
  builders[0]=client().prepareIndex("idx_range","type").setSource(jsonBuilder().startObject().field("ip","0.0.0.0").endObject());
  builders[1]=client().prepareIndex("idx_range","type").setSource(jsonBuilder().startObject().field("ip","0.0.0.255").endObject());
  builders[2]=client().prepareIndex("idx_range","type").setSource(jsonBuilder().startObject().field("ip","255.255.255.0").endObject());
  builders[3]=client().prepareIndex("idx_range","type").setSource(jsonBuilder().startObject().field("ip","255.255.255.255").endObject());
  indexRandom(true,builders);
  ensureSearchable();
  SearchResponse response=client().prepareSearch("idx_range").addAggregation(ipRange("range").field("ip").addMaskRange("0.0.0.0/0")).execute().actionGet();
  assertSearchResponse(response);
  Range range=response.getAggregations().get("range");
  assertThat(range,notNullValue());
  assertThat(range.getName(),equalTo("range"));
  List<? extends Bucket> buckets=range.getBuckets();
  assertThat(range.getBuckets().size(),equalTo(1));
  Range.Bucket bucket=buckets.get(0);
  assertEquals(4l,bucket.getDocCount());
}
