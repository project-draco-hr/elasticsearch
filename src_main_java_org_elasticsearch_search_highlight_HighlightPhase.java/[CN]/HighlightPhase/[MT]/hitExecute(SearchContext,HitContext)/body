{
  Map<String,HighlightField> highlightFields=newHashMap();
  for (  SearchContextHighlight.Field field : context.highlight().fields()) {
    Set<String> fieldNamesToHighlight;
    if (Regex.isSimpleMatchPattern(field.field())) {
      DocumentMapper documentMapper=context.mapperService().documentMapper(hitContext.hit().type());
      fieldNamesToHighlight=documentMapper.mappers().simpleMatchToFullName(field.field());
    }
 else {
      fieldNamesToHighlight=ImmutableSet.of(field.field());
    }
    for (    String fieldName : fieldNamesToHighlight) {
      FieldMapper<?> fieldMapper=getMapperForField(fieldName,context,hitContext);
      if (fieldMapper == null) {
        continue;
      }
      if (field.highlighterType() == null) {
        boolean useFastVectorHighlighter=fieldMapper.fieldType().storeTermVectors() && fieldMapper.fieldType().storeTermVectorOffsets() && fieldMapper.fieldType().storeTermVectorPositions();
        field.highlighterType(useFastVectorHighlighter ? "fvh" : "plain");
      }
      Highlighter highlighter=highlighters.get(field.highlighterType());
      if (highlighter == null) {
        throw new ElasticSearchIllegalArgumentException("unknown highlighter type [" + field.highlighterType() + "] for the field ["+ fieldName+ "]");
      }
      Query highlightQuery=field.highlightQuery();
      if (highlightQuery == null) {
        highlightQuery=context.parsedQuery().query();
      }
      HighlighterContext highlighterContext=new HighlighterContext(fieldName,field,fieldMapper,context,hitContext,highlightQuery);
      HighlightField highlightField=highlighter.highlight(highlighterContext);
      if (highlightField != null) {
        highlightFields.put(highlightField.name(),highlightField);
      }
    }
  }
  hitContext.hit().highlightFields(highlightFields);
}
