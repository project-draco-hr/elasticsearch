{
  HighlighterEntry cache=(HighlighterEntry)hitContext.cache().get("highlight");
  if (cache == null) {
    cache=new HighlighterEntry();
    hitContext.cache().put("highlight",cache);
  }
  DocumentMapper documentMapper=context.mapperService().documentMapper(hitContext.hit().type());
  Map<String,HighlightField> highlightFields=newHashMap();
  for (  SearchContextHighlight.Field field : context.highlight().fields()) {
    Encoder encoder;
    if (field.encoder().equals("html")) {
      encoder=Encoders.HTML;
    }
 else {
      encoder=Encoders.DEFAULT;
    }
    FieldMapper mapper=documentMapper.mappers().smartNameFieldMapper(field.field());
    if (mapper == null) {
      MapperService.SmartNameFieldMappers fullMapper=context.mapperService().smartName(field.field());
      if (fullMapper == null || !fullMapper.hasDocMapper()) {
        continue;
      }
      if (!fullMapper.docMapper().type().equals(hitContext.hit().type())) {
        continue;
      }
      mapper=fullMapper.mapper();
      if (mapper == null) {
        continue;
      }
    }
    boolean useFastVectorHighlighter;
    if (field.highlighterType() == null) {
      useFastVectorHighlighter=mapper.storeTermVectors() && mapper.storeTermVectorOffsets() && mapper.storeTermVectorPositions();
    }
 else     if (field.highlighterType().equals("fast-vector-highlighter") || field.highlighterType().equals("fvh")) {
      if (!(mapper.storeTermVectors() && mapper.storeTermVectorOffsets() && mapper.storeTermVectorPositions())) {
        throw new FetchPhaseExecutionException(context,"the field [" + field.field() + "] should be indexed with term vector with position offsets to be used with fast vector highlighter");
      }
      useFastVectorHighlighter=true;
    }
 else     if (field.highlighterType().equals("highlighter") || field.highlighterType().equals("plain")) {
      useFastVectorHighlighter=false;
    }
 else {
      throw new FetchPhaseExecutionException(context,"unknown highlighter type [" + field.highlighterType() + "] for the field ["+ field.field()+ "]");
    }
    if (!useFastVectorHighlighter) {
      MapperHighlightEntry entry=cache.mappers.get(mapper);
      if (entry == null) {
        Query query=context.parsedQuery().query();
        QueryScorer queryScorer=new CustomQueryScorer(query,field.requireFieldMatch() ? mapper.names().indexName() : null);
        queryScorer.setExpandMultiTermQuery(true);
        Fragmenter fragmenter;
        if (field.numberOfFragments() == 0) {
          fragmenter=new NullFragmenter();
        }
 else {
          fragmenter=new SimpleSpanFragmenter(queryScorer,field.fragmentCharSize());
        }
        Formatter formatter=new SimpleHTMLFormatter(field.preTags()[0],field.postTags()[0]);
        entry=new MapperHighlightEntry();
        entry.highlighter=new Highlighter(formatter,encoder,queryScorer);
        entry.highlighter.setTextFragmenter(fragmenter);
        entry.highlighter.setMaxDocCharsToAnalyze(Integer.MAX_VALUE);
        cache.mappers.put(mapper,entry);
      }
      List<Object> textsToHighlight;
      if (mapper.stored()) {
        try {
          SingleFieldVisitor fieldVisitor=new SingleFieldVisitor(mapper.names().indexName());
          hitContext.reader().document(hitContext.docId(),fieldVisitor);
          textsToHighlight=(List)fieldVisitor.values();
        }
 catch (        Exception e) {
          throw new FetchPhaseExecutionException(context,"Failed to highlight field [" + field.field() + "]",e);
        }
      }
 else {
        SearchLookup lookup=context.lookup();
        lookup.setNextReader(hitContext.readerContext());
        lookup.setNextDocId(hitContext.docId());
        textsToHighlight=lookup.source().extractRawValues(mapper.names().sourcePath());
      }
      int numberOfFragments=field.numberOfFragments() == 0 ? 1 : field.numberOfFragments();
      ArrayList<TextFragment> fragsList=new ArrayList<TextFragment>();
      try {
        for (        Object textToHighlight : textsToHighlight) {
          String text=textToHighlight.toString();
          Analyzer analyzer=context.mapperService().documentMapper(hitContext.hit().type()).mappers().indexAnalyzer();
          TokenStream tokenStream=analyzer.tokenStream(mapper.names().indexName(),new FastStringReader(text));
          TextFragment[] bestTextFragments=entry.highlighter.getBestTextFragments(tokenStream,text,false,numberOfFragments);
          for (          TextFragment bestTextFragment : bestTextFragments) {
            if (bestTextFragment != null && bestTextFragment.getScore() > 0) {
              fragsList.add(bestTextFragment);
            }
          }
        }
      }
 catch (      Exception e) {
        throw new FetchPhaseExecutionException(context,"Failed to highlight field [" + field.field() + "]",e);
      }
      if (field.scoreOrdered()) {
        Collections.sort(fragsList,new Comparator<TextFragment>(){
          public int compare(          TextFragment o1,          TextFragment o2){
            return Math.round(o2.getScore() - o1.getScore());
          }
        }
);
      }
      String[] fragments=null;
      if (field.numberOfFragments() == 0 && textsToHighlight.size() > 1 && fragsList.size() > 0) {
        fragments=new String[fragsList.size()];
        for (int i=0; i < fragsList.size(); i++) {
          fragments[i]=fragsList.get(i).toString();
        }
      }
 else {
        numberOfFragments=fragsList.size() < numberOfFragments ? fragsList.size() : numberOfFragments;
        fragments=new String[numberOfFragments];
        for (int i=0; i < fragments.length; i++) {
          fragments[i]=fragsList.get(i).toString();
        }
      }
      if (fragments != null && fragments.length > 0) {
        HighlightField highlightField=new HighlightField(field.field(),StringText.convertFromStringArray(fragments));
        highlightFields.put(highlightField.name(),highlightField);
      }
    }
 else {
      try {
        MapperHighlightEntry entry=cache.mappers.get(mapper);
        FieldQuery fieldQuery=null;
        if (entry == null) {
          FragListBuilder fragListBuilder;
          AbstractFragmentsBuilder fragmentsBuilder;
          BoundaryScanner boundaryScanner=SimpleBoundaryScanner2.DEFAULT;
          if (field.boundaryMaxScan() != SimpleBoundaryScanner2.DEFAULT_MAX_SCAN || field.boundaryChars() != SimpleBoundaryScanner2.DEFAULT_BOUNDARY_CHARS) {
            boundaryScanner=new SimpleBoundaryScanner2(field.boundaryMaxScan(),field.boundaryChars());
          }
          if (field.numberOfFragments() == 0) {
            fragListBuilder=new SingleFragListBuilder();
            if (mapper.stored()) {
              fragmentsBuilder=new XSimpleFragmentsBuilder(field.preTags(),field.postTags(),boundaryScanner);
            }
 else {
              fragmentsBuilder=new SourceSimpleFragmentsBuilder(mapper,context,field.preTags(),field.postTags(),boundaryScanner);
            }
          }
 else {
            if (field.fragmentOffset() == -1)             fragListBuilder=new SimpleFragListBuilder();
 else             fragListBuilder=new SimpleFragListBuilder(field.fragmentOffset());
            if (field.scoreOrdered()) {
              if (mapper.stored()) {
                fragmentsBuilder=new XScoreOrderFragmentsBuilder(field.preTags(),field.postTags(),boundaryScanner);
              }
 else {
                fragmentsBuilder=new SourceScoreOrderFragmentsBuilder(mapper,context,field.preTags(),field.postTags(),boundaryScanner);
              }
            }
 else {
              if (mapper.stored()) {
                fragmentsBuilder=new XSimpleFragmentsBuilder(field.preTags(),field.postTags(),boundaryScanner);
              }
 else {
                fragmentsBuilder=new SourceSimpleFragmentsBuilder(mapper,context,field.preTags(),field.postTags(),boundaryScanner);
              }
            }
          }
          fragmentsBuilder.setDiscreteMultiValueHighlighting(termVectorMultiValue);
          entry=new MapperHighlightEntry();
          entry.fragListBuilder=fragListBuilder;
          entry.fragmentsBuilder=fragmentsBuilder;
          if (cache.fvh == null) {
            cache.fvh=new FastVectorHighlighter();
          }
          CustomFieldQuery.highlightFilters.set(field.highlightFilter());
          if (field.requireFieldMatch()) {
            if (cache.fieldMatchFieldQuery == null) {
              cache.fieldMatchFieldQuery=new CustomFieldQuery(context.parsedQuery().query(),hitContext.topLevelReader(),true,field.requireFieldMatch());
            }
            fieldQuery=cache.fieldMatchFieldQuery;
          }
 else {
            if (cache.noFieldMatchFieldQuery == null) {
              cache.noFieldMatchFieldQuery=new CustomFieldQuery(context.parsedQuery().query(),hitContext.topLevelReader(),true,field.requireFieldMatch());
            }
            fieldQuery=cache.noFieldMatchFieldQuery;
          }
          cache.mappers.put(mapper,entry);
        }
        String[] fragments;
        int numberOfFragments=field.numberOfFragments() == 0 ? 1 : field.numberOfFragments();
        fragments=cache.fvh.getBestFragments(fieldQuery,hitContext.reader(),hitContext.docId(),mapper.names().indexName(),field.fragmentCharSize(),numberOfFragments,entry.fragListBuilder,entry.fragmentsBuilder,field.preTags(),field.postTags(),encoder);
        if (fragments != null && fragments.length > 0) {
          HighlightField highlightField=new HighlightField(field.field(),StringText.convertFromStringArray(fragments));
          highlightFields.put(highlightField.name(),highlightField);
        }
      }
 catch (      Exception e) {
        throw new FetchPhaseExecutionException(context,"Failed to highlight field [" + field.field() + "]",e);
      }
    }
  }
  hitContext.hit().highlightFields(highlightFields);
}
