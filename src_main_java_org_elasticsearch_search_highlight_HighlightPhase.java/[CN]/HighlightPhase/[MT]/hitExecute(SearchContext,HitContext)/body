{
  HighlighterEntry cache=(HighlighterEntry)hitContext.cache().get("highlight");
  if (cache == null) {
    cache=new HighlighterEntry();
    hitContext.cache().put("highlight",cache);
  }
  DocumentMapper documentMapper=context.mapperService().documentMapper(hitContext.hit().type());
  Map<String,HighlightField> highlightFields=newHashMap();
  for (  SearchContextHighlight.Field field : context.highlight().fields()) {
    Encoder encoder;
    if (field.encoder().equals("html")) {
      encoder=Encoders.HTML;
    }
 else {
      encoder=Encoders.DEFAULT;
    }
    Set<String> fieldNamesToHighlight;
    if (Regex.isSimpleMatchPattern(field.field())) {
      fieldNamesToHighlight=documentMapper.mappers().simpleMatchToFullName(field.field());
    }
 else {
      fieldNamesToHighlight=ImmutableSet.of(field.field());
    }
    for (    String fieldName : fieldNamesToHighlight) {
      FieldMapper mapper=documentMapper.mappers().smartNameFieldMapper(fieldName);
      if (mapper == null) {
        MapperService.SmartNameFieldMappers fullMapper=context.mapperService().smartName(fieldName);
        if (fullMapper == null || !fullMapper.hasDocMapper()) {
          continue;
        }
        if (!fullMapper.docMapper().type().equals(hitContext.hit().type())) {
          continue;
        }
        mapper=fullMapper.mapper();
        if (mapper == null) {
          continue;
        }
      }
      boolean useFastVectorHighlighter;
      if (field.highlighterType() == null) {
        useFastVectorHighlighter=mapper.fieldType().storeTermVectors() && mapper.fieldType().storeTermVectorOffsets() && mapper.fieldType().storeTermVectorPositions();
      }
 else       if (field.highlighterType().equals("fast-vector-highlighter") || field.highlighterType().equals("fvh")) {
        if (!(mapper.fieldType().storeTermVectors() && mapper.fieldType().storeTermVectorOffsets() && mapper.fieldType().storeTermVectorPositions())) {
          throw new ElasticSearchIllegalArgumentException("the field [" + fieldName + "] should be indexed with term vector with position offsets to be used with fast vector highlighter");
        }
        useFastVectorHighlighter=true;
      }
 else       if (field.highlighterType().equals("highlighter") || field.highlighterType().equals("plain")) {
        useFastVectorHighlighter=false;
      }
 else {
        throw new ElasticSearchIllegalArgumentException("unknown highlighter type [" + field.highlighterType() + "] for the field ["+ fieldName+ "]");
      }
      if (!useFastVectorHighlighter) {
        MapperHighlightEntry entry=cache.mappers.get(mapper);
        if (entry == null) {
          Query query=context.parsedQuery().query();
          QueryScorer queryScorer=new CustomQueryScorer(query,field.requireFieldMatch() ? mapper.names().indexName() : null);
          queryScorer.setExpandMultiTermQuery(true);
          Fragmenter fragmenter;
          if (field.numberOfFragments() == 0) {
            fragmenter=new NullFragmenter();
          }
 else           if (field.fragmenter() == null) {
            fragmenter=new SimpleSpanFragmenter(queryScorer,field.fragmentCharSize());
          }
 else           if ("simple".equals(field.fragmenter())) {
            fragmenter=new SimpleFragmenter(field.fragmentCharSize());
          }
 else           if ("span".equals(field.fragmenter())) {
            fragmenter=new SimpleSpanFragmenter(queryScorer,field.fragmentCharSize());
          }
 else {
            throw new ElasticSearchIllegalArgumentException("unknown fragmenter option [" + field.fragmenter() + "] for the field ["+ fieldName+ "]");
          }
          Formatter formatter=new SimpleHTMLFormatter(field.preTags()[0],field.postTags()[0]);
          entry=new MapperHighlightEntry();
          entry.highlighter=new Highlighter(formatter,encoder,queryScorer);
          entry.highlighter.setTextFragmenter(fragmenter);
          entry.highlighter.setMaxDocCharsToAnalyze(Integer.MAX_VALUE);
          cache.mappers.put(mapper,entry);
        }
        List<Object> textsToHighlight;
        if (mapper.fieldType().stored()) {
          try {
            CustomFieldsVisitor fieldVisitor=new CustomFieldsVisitor(ImmutableSet.of(mapper.names().indexName()),false);
            hitContext.reader().document(hitContext.docId(),fieldVisitor);
            textsToHighlight=fieldVisitor.fields().get(mapper.names().indexName());
          }
 catch (          Exception e) {
            throw new FetchPhaseExecutionException(context,"Failed to highlight field [" + fieldName + "]",e);
          }
        }
 else {
          SearchLookup lookup=context.lookup();
          lookup.setNextReader(hitContext.readerContext());
          lookup.setNextDocId(hitContext.docId());
          textsToHighlight=lookup.source().extractRawValues(mapper.names().sourcePath());
        }
        int numberOfFragments=field.numberOfFragments() == 0 ? 1 : field.numberOfFragments();
        ArrayList<TextFragment> fragsList=new ArrayList<TextFragment>();
        try {
          for (          Object textToHighlight : textsToHighlight) {
            String text=textToHighlight.toString();
            Analyzer analyzer=context.mapperService().documentMapper(hitContext.hit().type()).mappers().indexAnalyzer();
            TokenStream tokenStream=analyzer.tokenStream(mapper.names().indexName(),new FastStringReader(text));
            TextFragment[] bestTextFragments=entry.highlighter.getBestTextFragments(tokenStream,text,false,numberOfFragments);
            for (            TextFragment bestTextFragment : bestTextFragments) {
              if (bestTextFragment != null && bestTextFragment.getScore() > 0) {
                fragsList.add(bestTextFragment);
              }
            }
          }
        }
 catch (        Exception e) {
          throw new FetchPhaseExecutionException(context,"Failed to highlight field [" + fieldName + "]",e);
        }
        if (field.scoreOrdered()) {
          Collections.sort(fragsList,new Comparator<TextFragment>(){
            public int compare(            TextFragment o1,            TextFragment o2){
              return Math.round(o2.getScore() - o1.getScore());
            }
          }
);
        }
        String[] fragments=null;
        if (field.numberOfFragments() == 0 && textsToHighlight.size() > 1 && fragsList.size() > 0) {
          fragments=new String[fragsList.size()];
          for (int i=0; i < fragsList.size(); i++) {
            fragments[i]=fragsList.get(i).toString();
          }
        }
 else {
          numberOfFragments=fragsList.size() < numberOfFragments ? fragsList.size() : numberOfFragments;
          fragments=new String[numberOfFragments];
          for (int i=0; i < fragments.length; i++) {
            fragments[i]=fragsList.get(i).toString();
          }
        }
        if (fragments != null && fragments.length > 0) {
          HighlightField highlightField=new HighlightField(fieldName,StringText.convertFromStringArray(fragments));
          highlightFields.put(highlightField.name(),highlightField);
        }
      }
 else {
        try {
          MapperHighlightEntry entry=cache.mappers.get(mapper);
          FieldQuery fieldQuery=null;
          if (entry == null) {
            FragListBuilder fragListBuilder;
            AbstractFragmentsBuilder fragmentsBuilder;
            BoundaryScanner boundaryScanner=SimpleBoundaryScanner2.DEFAULT;
            if (field.boundaryMaxScan() != SimpleBoundaryScanner2.DEFAULT_MAX_SCAN || field.boundaryChars() != SimpleBoundaryScanner2.DEFAULT_BOUNDARY_CHARS) {
              boundaryScanner=new SimpleBoundaryScanner2(field.boundaryMaxScan(),field.boundaryChars());
            }
            if (field.numberOfFragments() == 0) {
              fragListBuilder=new SingleFragListBuilder();
              if (mapper.fieldType().stored()) {
                fragmentsBuilder=new XSimpleFragmentsBuilder(field.preTags(),field.postTags(),boundaryScanner);
              }
 else {
                fragmentsBuilder=new SourceSimpleFragmentsBuilder(mapper,context,field.preTags(),field.postTags(),boundaryScanner);
              }
            }
 else {
              if (field.fragmentOffset() == -1)               fragListBuilder=new SimpleFragListBuilder();
 else               fragListBuilder=new SimpleFragListBuilder(field.fragmentOffset());
              if (field.scoreOrdered()) {
                if (mapper.fieldType().stored()) {
                  fragmentsBuilder=new XScoreOrderFragmentsBuilder(field.preTags(),field.postTags(),boundaryScanner);
                }
 else {
                  fragmentsBuilder=new SourceScoreOrderFragmentsBuilder(mapper,context,field.preTags(),field.postTags(),boundaryScanner);
                }
              }
 else {
                if (mapper.fieldType().stored()) {
                  fragmentsBuilder=new XSimpleFragmentsBuilder(field.preTags(),field.postTags(),boundaryScanner);
                }
 else {
                  fragmentsBuilder=new SourceSimpleFragmentsBuilder(mapper,context,field.preTags(),field.postTags(),boundaryScanner);
                }
              }
            }
            fragmentsBuilder.setDiscreteMultiValueHighlighting(termVectorMultiValue);
            entry=new MapperHighlightEntry();
            entry.fragListBuilder=fragListBuilder;
            entry.fragmentsBuilder=fragmentsBuilder;
            if (cache.fvh == null) {
              cache.fvh=new FastVectorHighlighter();
            }
            CustomFieldQuery.highlightFilters.set(field.highlightFilter());
            if (field.requireFieldMatch()) {
              if (cache.fieldMatchFieldQuery == null) {
                cache.fieldMatchFieldQuery=new CustomFieldQuery(context.parsedQuery().query(),hitContext.topLevelReader(),true,field.requireFieldMatch());
              }
              fieldQuery=cache.fieldMatchFieldQuery;
            }
 else {
              if (cache.noFieldMatchFieldQuery == null) {
                cache.noFieldMatchFieldQuery=new CustomFieldQuery(context.parsedQuery().query(),hitContext.topLevelReader(),true,field.requireFieldMatch());
              }
              fieldQuery=cache.noFieldMatchFieldQuery;
            }
            cache.mappers.put(mapper,entry);
          }
          String[] fragments;
          int numberOfFragments=field.numberOfFragments() == 0 ? Integer.MAX_VALUE : field.numberOfFragments();
          int fragmentCharSize=field.numberOfFragments() == 0 ? Integer.MAX_VALUE : field.fragmentCharSize();
          fragments=cache.fvh.getBestFragments(fieldQuery,hitContext.reader(),hitContext.docId(),mapper.names().indexName(),fragmentCharSize,numberOfFragments,entry.fragListBuilder,entry.fragmentsBuilder,field.preTags(),field.postTags(),encoder);
          if (fragments != null && fragments.length > 0) {
            HighlightField highlightField=new HighlightField(fieldName,StringText.convertFromStringArray(fragments));
            highlightFields.put(highlightField.name(),highlightField);
          }
        }
 catch (        Exception e) {
          throw new FetchPhaseExecutionException(context,"Failed to highlight field [" + fieldName + "]",e);
        }
      }
    }
  }
  hitContext.hit().highlightFields(highlightFields);
}
