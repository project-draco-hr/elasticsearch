{
  InternalIndexShard shard=(InternalIndexShard)indicesService.indexServiceSafe(request.shardId().index().name()).shardSafe(request.shardId().id());
  RecoveryStatus onGoingRecovery=onGoingRecoveries.get(shard.shardId());
  if (onGoingRecovery == null) {
    throw new IndexShardClosedException(shard.shardId());
  }
  if (onGoingRecovery.canceled) {
    onGoingRecovery.sentCanceledToSource=true;
    throw new IndexShardClosedException(shard.shardId());
  }
  String prefix="recovery." + onGoingRecovery.startTime + ".";
  Set<String> filesToRename=Sets.newHashSet();
  for (  String existingFile : shard.store().directory().listAll()) {
    if (existingFile.startsWith(prefix)) {
      filesToRename.add(existingFile.substring(prefix.length(),existingFile.length()));
    }
  }
  Exception failureToRename=null;
  if (!filesToRename.isEmpty()) {
    for (    String fileToRename : filesToRename) {
      shard.store().directory().deleteFile(fileToRename);
    }
    for (    String fileToRename : filesToRename) {
      try {
        shard.store().renameFile(prefix + fileToRename,fileToRename);
      }
 catch (      Exception e) {
        failureToRename=e;
        break;
      }
    }
  }
  if (failureToRename != null) {
    throw failureToRename;
  }
  shard.store().writeChecksums(onGoingRecovery.checksums);
  for (  String existingFile : shard.store().directory().listAll()) {
    if (!request.snapshotFiles().contains(existingFile) && !Store.isChecksum(existingFile)) {
      try {
        shard.store().directory().deleteFile(existingFile);
      }
 catch (      Exception e) {
      }
    }
  }
  channel.sendResponse(VoidStreamable.INSTANCE);
}
