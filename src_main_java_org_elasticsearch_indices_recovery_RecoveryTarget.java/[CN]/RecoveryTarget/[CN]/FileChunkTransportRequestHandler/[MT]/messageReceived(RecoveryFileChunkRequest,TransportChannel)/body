{
  RecoveryStatus onGoingRecovery=onGoingRecoveries.get(request.recoveryId());
  if (onGoingRecovery == null) {
    throw new IndexShardClosedException(request.shardId());
  }
  if (onGoingRecovery.canceled) {
    onGoingRecovery.sentCanceledToSource=true;
    throw new IndexShardClosedException(request.shardId());
  }
  Store store=onGoingRecovery.indexShard.store();
  IndexOutput indexOutput;
  if (request.position() == 0) {
    onGoingRecovery.checksums.remove(request.name());
    indexOutput=onGoingRecovery.openIndexOutputs.remove(request.name());
    if (indexOutput != null) {
      try {
        indexOutput.close();
      }
 catch (      IOException e) {
      }
    }
    String name=request.name();
    if (store.directory().fileExists(name)) {
      name="recovery." + onGoingRecovery.startTime + "."+ name;
    }
    indexOutput=store.createOutputRaw(name);
    onGoingRecovery.openIndexOutputs.put(request.name(),indexOutput);
  }
 else {
    indexOutput=onGoingRecovery.openIndexOutputs.get(request.name());
  }
  if (indexOutput == null) {
    throw new IndexShardClosedException(request.shardId());
  }
synchronized (indexOutput) {
    try {
      if (recoverySettings.rateLimiter() != null) {
        recoverySettings.rateLimiter().pause(request.content().length());
      }
      BytesReference content=request.content();
      if (!content.hasArray()) {
        content=content.toBytesArray();
      }
      indexOutput.writeBytes(content.array(),content.arrayOffset(),content.length());
      onGoingRecovery.currentFilesSize.addAndGet(request.length());
      if (indexOutput.getFilePointer() == request.length()) {
        indexOutput.close();
        if (request.checksum() != null) {
          onGoingRecovery.checksums.put(request.name(),request.checksum());
        }
        store.directory().sync(Collections.singleton(request.name()));
        onGoingRecovery.openIndexOutputs.remove(request.name());
      }
    }
 catch (    IOException e) {
      onGoingRecovery.openIndexOutputs.remove(request.name());
      try {
        indexOutput.close();
      }
 catch (      IOException e1) {
      }
      throw e;
    }
  }
  channel.sendResponse(VoidStreamable.INSTANCE);
}
