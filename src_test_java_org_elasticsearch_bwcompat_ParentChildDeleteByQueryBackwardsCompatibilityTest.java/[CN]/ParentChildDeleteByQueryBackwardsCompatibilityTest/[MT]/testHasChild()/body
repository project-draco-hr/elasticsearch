{
  assertAcked(prepareCreate("idx").setSettings(ImmutableSettings.builder().put(indexSettings()).put("index.refresh_interval","-1").put("index.routing.allocation.exclude._name",backwardsCluster().newNodePattern())).addMapping("parent").addMapping("child","_parent","type=parent"));
  List<IndexRequestBuilder> requests=new ArrayList<>();
  requests.add(client().prepareIndex("idx","parent","1").setSource("{}"));
  requests.add(client().prepareIndex("idx","child","1").setParent("1").setSource("{}"));
  indexRandom(true,requests);
  SearchResponse response=client().prepareSearch("idx").setQuery(hasChildQuery("child",matchAllQuery())).get();
  assertNoFailures(response);
  assertHitCount(response,1);
  client().prepareDeleteByQuery("idx").setQuery(hasChildQuery("child",matchAllQuery())).get();
  refresh();
  response=client().prepareSearch("idx").setQuery(hasChildQuery("child",matchAllQuery())).get();
  assertNoFailures(response);
  assertHitCount(response,0);
  client().prepareIndex("idx","type","1").setSource("{}").get();
  assertThat(client().prepareGet("idx","type","1").get().isExists(),is(true));
  backwardsCluster().upgradeAllNodes();
  backwardsCluster().allowOnAllNodes("idx");
  ensureGreen("idx");
  response=client().prepareSearch("idx").setQuery(hasChildQuery("child",matchAllQuery())).get();
  assertNoFailures(response);
  assertHitCount(response,1);
  assertThat(client().prepareGet("idx","type","1").get().isExists(),is(true));
  response=client().prepareSearch("idx").setTypes("type").get();
  assertNoFailures(response);
  assertHitCount(response,1);
}
