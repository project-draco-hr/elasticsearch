{
  String threadPoolName=randomThreadPool(ThreadPool.ThreadPoolType.FIXED);
  ThreadPool threadPool=null;
  try {
    int expectedSize=getExpectedThreadPoolSize(Settings.EMPTY,threadPoolName,15);
    Settings nodeSettings=Settings.builder().put("node.name","testFixedExecutorType").put("thread_pool." + threadPoolName + ".size",expectedSize).build();
    threadPool=new ThreadPool(nodeSettings);
    assertThat(threadPool.executor(threadPoolName),instanceOf(EsThreadPoolExecutor.class));
    assertEquals(info(threadPool,threadPoolName).getThreadPoolType(),ThreadPool.ThreadPoolType.FIXED);
    assertThat(threadPool.executor(threadPoolName),instanceOf(EsThreadPoolExecutor.class));
    assertThat(((EsThreadPoolExecutor)threadPool.executor(threadPoolName)).getCorePoolSize(),equalTo(expectedSize));
    assertThat(((EsThreadPoolExecutor)threadPool.executor(threadPoolName)).getMaximumPoolSize(),equalTo(expectedSize));
    assertThat(info(threadPool,threadPoolName).getMin(),equalTo(expectedSize));
    assertThat(info(threadPool,threadPoolName).getMax(),equalTo(expectedSize));
    assertThat(((EsThreadPoolExecutor)threadPool.executor(threadPoolName)).getKeepAliveTime(TimeUnit.MINUTES),equalTo(0L));
  }
  finally {
    terminateThreadPoolIfNeeded(threadPool);
  }
}
