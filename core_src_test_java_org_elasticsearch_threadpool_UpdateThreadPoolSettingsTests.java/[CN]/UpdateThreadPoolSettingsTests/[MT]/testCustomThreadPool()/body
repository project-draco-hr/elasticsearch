{
  ThreadPool threadPool=null;
  try {
    final ScalingExecutorBuilder scaling=new ScalingExecutorBuilder("my_pool1",1,EsExecutors.boundedNumberOfProcessors(Settings.EMPTY),TimeValue.timeValueMinutes(1));
    final FixedExecutorBuilder fixed=new FixedExecutorBuilder(Settings.EMPTY,"my_pool2",1,1);
    threadPool=new ThreadPool(Settings.builder().put("node.name","testCustomThreadPool").build(),scaling,fixed);
    ThreadPoolInfo groups=threadPool.info();
    boolean foundPool1=false;
    boolean foundPool2=false;
    outer:     for (    ThreadPool.Info info : groups) {
      if ("my_pool1".equals(info.getName())) {
        foundPool1=true;
        assertEquals(info.getThreadPoolType(),ThreadPool.ThreadPoolType.SCALING);
      }
 else       if ("my_pool2".equals(info.getName())) {
        foundPool2=true;
        assertEquals(info.getThreadPoolType(),ThreadPool.ThreadPoolType.FIXED);
        assertThat(info.getMin(),equalTo(1));
        assertThat(info.getMax(),equalTo(1));
        assertThat(info.getQueueSize().singles(),equalTo(1L));
      }
 else {
        for (        Field field : Names.class.getFields()) {
          if (info.getName().equalsIgnoreCase(field.getName())) {
            continue outer;
          }
        }
        fail("Unexpected pool name: " + info.getName());
      }
    }
    assertThat(foundPool1,is(true));
    assertThat(foundPool2,is(true));
  }
  finally {
    terminateThreadPoolIfNeeded(threadPool);
  }
}
