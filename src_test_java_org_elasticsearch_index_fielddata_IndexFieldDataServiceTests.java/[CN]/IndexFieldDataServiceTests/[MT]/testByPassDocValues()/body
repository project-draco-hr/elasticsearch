{
  final IndexFieldDataService ifdService=new IndexFieldDataService(new Index("test"),new NoneCircuitBreakerService());
  MapperService mapperService=MapperTestUtils.newMapperService(ifdService.index(),ImmutableSettings.Builder.EMPTY_SETTINGS);
  ifdService.setIndexService(new StubIndexService(mapperService));
  final BuilderContext ctx=new BuilderContext(null,new ContentPath(1));
  final StringFieldMapper stringMapper=MapperBuilders.stringField("string").tokenized(false).fieldDataSettings(DOC_VALUES_SETTINGS).fieldDataSettings(ImmutableSettings.builder().put("format","fst").build()).build(ctx);
  ifdService.clear();
  IndexFieldData<?> fd=ifdService.getForField(stringMapper);
  assertTrue(fd instanceof FSTBytesIndexFieldData);
  final Settings fdSettings=ImmutableSettings.builder().put("format","array").build();
  for (  FieldMapper<?> mapper : Arrays.asList(new ByteFieldMapper.Builder("int").fieldDataSettings(DOC_VALUES_SETTINGS).fieldDataSettings(fdSettings).build(ctx),new ShortFieldMapper.Builder("int").fieldDataSettings(DOC_VALUES_SETTINGS).fieldDataSettings(fdSettings).build(ctx),new IntegerFieldMapper.Builder("int").fieldDataSettings(DOC_VALUES_SETTINGS).fieldDataSettings(fdSettings).build(ctx),new LongFieldMapper.Builder("long").fieldDataSettings(DOC_VALUES_SETTINGS).fieldDataSettings(fdSettings).build(ctx))) {
    ifdService.clear();
    fd=ifdService.getForField(mapper);
    assertTrue(fd instanceof PackedArrayIndexFieldData);
  }
  final FloatFieldMapper floatMapper=MapperBuilders.floatField("float").fieldDataSettings(DOC_VALUES_SETTINGS).fieldDataSettings(fdSettings).build(ctx);
  ifdService.clear();
  fd=ifdService.getForField(floatMapper);
  assertTrue(fd instanceof FloatArrayIndexFieldData);
  final DoubleFieldMapper doubleMapper=MapperBuilders.doubleField("double").fieldDataSettings(DOC_VALUES_SETTINGS).fieldDataSettings(fdSettings).build(ctx);
  ifdService.clear();
  fd=ifdService.getForField(doubleMapper);
  assertTrue(fd instanceof DoubleArrayIndexFieldData);
}
