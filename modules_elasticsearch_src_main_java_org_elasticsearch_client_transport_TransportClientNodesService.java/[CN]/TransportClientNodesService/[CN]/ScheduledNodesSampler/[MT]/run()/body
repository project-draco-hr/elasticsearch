{
  ImmutableList<TransportAddress> transportAddresses=TransportClientNodesService.this.transportAddresses;
  final CountDownLatch latch=new CountDownLatch(transportAddresses.size());
  final CopyOnWriteArrayList<NodesInfoResponse> nodesInfoResponses=new CopyOnWriteArrayList<NodesInfoResponse>();
  final CopyOnWriteArrayList<DiscoveryNode> tempNodes=new CopyOnWriteArrayList<DiscoveryNode>();
  for (  final TransportAddress transportAddress : transportAddresses) {
    threadPool.execute(new Runnable(){
      @Override public void run(){
        DiscoveryNode tempNode=new DiscoveryNode("#temp#-" + tempNodeIdGenerator.incrementAndGet(),transportAddress);
        tempNodes.add(tempNode);
        try {
          transportService.nodesAdded(ImmutableList.of(tempNode));
          transportService.sendRequest(tempNode,TransportActions.Admin.Cluster.Node.INFO,Requests.nodesInfo("_local"),new BaseTransportResponseHandler<NodesInfoResponse>(){
            @Override public NodesInfoResponse newInstance(){
              return new NodesInfoResponse();
            }
            @Override public void handleResponse(            NodesInfoResponse response){
              nodesInfoResponses.add(response);
              latch.countDown();
            }
            @Override public void handleException(            RemoteTransportException exp){
              logger.debug("Failed to get node info from " + transportAddress + ", removed from nodes list",exp);
              latch.countDown();
            }
          }
);
        }
 catch (        Exception e) {
          logger.debug("Failed to get node info from " + transportAddress + ", removed from nodes list",e);
          latch.countDown();
        }
      }
    }
);
  }
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
    return;
  }
  HashSet<DiscoveryNode> newNodes=new HashSet<DiscoveryNode>();
  for (  NodesInfoResponse nodesInfoResponse : nodesInfoResponses) {
    if (nodesInfoResponse.nodes().length > 0) {
      DiscoveryNode node=nodesInfoResponse.nodes()[0].node();
      if (!clusterName.equals(nodesInfoResponse.clusterName())) {
        logger.warn("Node {} not part of the cluster {}, ignoring...",node,clusterName);
      }
 else {
        newNodes.add(node);
      }
    }
 else {
      logger.debug("No info returned from node...");
    }
  }
  if (discoveredNodes != null) {
    newNodes.addAll(discoveredNodes.nodes().values());
  }
  nodes=new ImmutableList.Builder<DiscoveryNode>().addAll(newNodes).build();
  transportService.nodesRemoved(tempNodes);
}
