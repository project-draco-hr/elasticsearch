{
  SearchResponse response=client().prepareSearch("idx").addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).extendedBounds(new ExtendedBounds((long)minRandomValue,(long)maxRandomValue))).addAggregation(maxBucket("max_bucket","histo>_count")).execute().actionGet();
  assertSearchResponse(response);
  Histogram histo=response.getAggregations().get("histo");
  assertThat(histo,notNullValue());
  assertThat(histo.getName(),equalTo("histo"));
  List<? extends Bucket> buckets=histo.getBuckets();
  assertThat(buckets.size(),equalTo(numValueBuckets));
  List<String> maxKeys=new ArrayList<>();
  double maxValue=Double.NEGATIVE_INFINITY;
  for (int i=0; i < numValueBuckets; ++i) {
    Histogram.Bucket bucket=buckets.get(i);
    assertThat(bucket,notNullValue());
    assertThat(((Number)bucket.getKey()).longValue(),equalTo((long)i * interval));
    assertThat(bucket.getDocCount(),equalTo(valueCounts[i]));
    if (bucket.getDocCount() > maxValue) {
      maxValue=bucket.getDocCount();
      maxKeys=new ArrayList<>();
      maxKeys.add(bucket.getKeyAsString());
    }
 else     if (bucket.getDocCount() == maxValue) {
      maxKeys.add(bucket.getKeyAsString());
    }
  }
  InternalBucketMetricValue maxBucketValue=response.getAggregations().get("max_bucket");
  assertThat(maxBucketValue,notNullValue());
  assertThat(maxBucketValue.getName(),equalTo("max_bucket"));
  assertThat(maxBucketValue.value(),equalTo(maxValue));
  assertThat(maxBucketValue.keys(),equalTo(maxKeys.toArray(new String[maxKeys.size()])));
}
