{
  String[] nodeIds;
  Set<String> metrics;
  if (request.hasParam("nodeId") && !request.hasParam("metrics")) {
    Set<String> metricsOrNodeIds=Strings.splitStringByCommaToSet(request.param("nodeId","_all"));
    boolean isMetricsOnly=ALLOWED_METRICS.containsAll(metricsOrNodeIds);
    if (isMetricsOnly) {
      nodeIds=new String[]{"_all"};
      metrics=metricsOrNodeIds;
    }
 else {
      nodeIds=metricsOrNodeIds.toArray(new String[]{});
      metrics=Sets.newHashSet("_all");
    }
  }
 else {
    nodeIds=Strings.splitStringByCommaToArray(request.param("nodeId","_all"));
    metrics=Strings.splitStringByCommaToSet(request.param("metrics","_all"));
  }
  final NodesInfoRequest nodesInfoRequest=new NodesInfoRequest(nodeIds);
  nodesInfoRequest.timeout(request.param("timeout"));
  if (metrics.size() == 1 && metrics.contains("_all")) {
    nodesInfoRequest.all();
  }
 else {
    nodesInfoRequest.clear();
    nodesInfoRequest.settings(metrics.contains("settings"));
    nodesInfoRequest.os(metrics.contains("os"));
    nodesInfoRequest.process(metrics.contains("process"));
    nodesInfoRequest.jvm(metrics.contains("jvm"));
    nodesInfoRequest.threadPool(metrics.contains("thread_pool"));
    nodesInfoRequest.transport(metrics.contains("transport"));
    nodesInfoRequest.http(metrics.contains("http"));
    nodesInfoRequest.plugins(metrics.contains("plugins"));
  }
  settingsFilter.addFilterSettingParams(request);
  client.admin().cluster().nodesInfo(nodesInfoRequest,new RestBuilderListener<NodesInfoResponse>(channel){
    @Override public RestResponse buildResponse(    NodesInfoResponse response,    XContentBuilder builder) throws Exception {
      builder.startObject();
      response.toXContent(builder,request);
      builder.endObject();
      return new BytesRestResponse(RestStatus.OK,builder);
    }
  }
);
}
