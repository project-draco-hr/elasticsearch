{
  final NumericDoubleValues distance=distance(ctx);
  return new LeafScoreFunction(){
    @Override public double score(    int docId,    float subQueryScore){
      return func.evaluate(distance.get(docId),scale);
    }
    @Override public Explanation explainScore(    int docId,    Explanation subQueryScore) throws IOException {
      ComplexExplanation ce=new ComplexExplanation();
      ce.setValue(CombineFunction.toFloat(score(docId,subQueryScore.getValue())));
      ce.setMatch(true);
      ce.setDescription("Function for field " + getFieldName() + ":");
      ce.addDetail(func.explainFunction(getDistanceString(ctx,docId),distance.get(docId),scale));
      return ce;
    }
  }
;
}
