{
  XContentParser.Token token;
  String parameterName=null;
  String scaleString=null;
  String referenceString=null;
  String offsetString="0d";
  double decay=0.5;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      parameterName=parser.currentName();
    }
 else     if (parameterName.equals(DecayFunctionBuilder.SCALE)) {
      scaleString=parser.text();
    }
 else     if (parameterName.equals(DecayFunctionBuilder.REFERNECE)) {
      referenceString=parser.text();
    }
 else     if (parameterName.equals(DecayFunctionBuilder.DECAY)) {
      decay=parser.doubleValue();
    }
 else     if (parameterName.equals(DecayFunctionBuilder.OFFSET)) {
      offsetString=parser.text();
    }
 else {
      throw new ElasticSearchParseException("Parameter " + parameterName + " not supported!");
    }
  }
  long reference=SearchContext.current().nowInMillis();
  if (referenceString != null) {
    reference=dateFieldMapper.value(referenceString).longValue();
  }
  if (scaleString == null) {
    throw new ElasticSearchParseException(DecayFunctionBuilder.SCALE + "must be set for geo fields.");
  }
  TimeValue val=TimeValue.parseTimeValue(scaleString,TimeValue.timeValueHours(24));
  double scale=val.getMillis();
  val=TimeValue.parseTimeValue(offsetString,TimeValue.timeValueHours(24));
  double offset=val.getMillis();
  IndexNumericFieldData<?> numericFieldData=parseContext.fieldData().getForField(dateFieldMapper);
  return new NumericFieldDataScoreFunction(reference,scale,decay,offset,getDecayFunction(),numericFieldData);
}
