{
  String[] supportedFlags=new String[]{"CASE_INSENSITIVE","MULTILINE","DOTALL","UNICODE_CASE","CANON_EQ","UNIX_LINES","LITERAL","COMMENTS","UNICODE_CHAR_CLASS"};
  int[] flags=new int[]{Pattern.CASE_INSENSITIVE,Pattern.MULTILINE,Pattern.DOTALL,Pattern.UNICODE_CASE,Pattern.CANON_EQ,Pattern.UNIX_LINES,Pattern.LITERAL,Pattern.COMMENTS,Regex.UNICODE_CHARACTER_CLASS};
  long seed=System.currentTimeMillis();
  Random random=new Random(seed);
  int num=10 + random.nextInt(100);
  for (int i=0; i < num; i++) {
    int numFlags=random.nextInt(flags.length + 1);
    int current=0;
    StringBuilder builder=new StringBuilder();
    for (int j=0; j < numFlags; j++) {
      int index=random.nextInt(flags.length);
      current|=flags[index];
      builder.append(supportedFlags[index]);
      if (j < numFlags - 1) {
        builder.append("|");
      }
    }
    String flagsToString=Regex.flagsToString(current);
    assertThat(Regex.flagsFromString(builder.toString()),equalTo(current));
    assertThat(Regex.flagsFromString(builder.toString()),equalTo(Regex.flagsFromString(flagsToString)));
    Pattern.compile("\\w\\d{1,2}",current);
  }
}
