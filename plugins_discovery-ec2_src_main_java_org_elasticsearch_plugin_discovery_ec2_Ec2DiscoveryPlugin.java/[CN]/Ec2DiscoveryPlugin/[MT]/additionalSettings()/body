{
  if (AwsEc2Service.AUTO_ATTRIBUTE_SETTING.get(settings) == false) {
    return Settings.EMPTY;
  }
  Settings.Builder attrs=Settings.builder();
  final URL url;
  final URLConnection urlConnection;
  try {
    url=new URL(AwsEc2ServiceImpl.EC2_METADATA_URL + "placement/availability-zone");
    logger.debug("obtaining ec2 [placement/availability-zone] from ec2 meta-data url {}",url);
    urlConnection=url.openConnection();
    urlConnection.setConnectTimeout(2000);
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
  try (InputStream in=urlConnection.getInputStream();BufferedReader urlReader=new BufferedReader(new InputStreamReader(in,StandardCharsets.UTF_8))){
    String metadataResult=urlReader.readLine();
    if (metadataResult == null || metadataResult.length() == 0) {
      throw new IOException("no ec2 metadata returned from " + url);
    }
 else {
      attrs.put(Node.NODE_ATTRIBUTES.getKey() + "aws_availability_zone",metadataResult);
    }
  }
 catch (  IOException e) {
    logger.error("failed to get metadata for [placement/availability-zone]",e);
  }
  return attrs.build();
}
