{
  final int numDocs=randomIntBetween(100,200);
  final Directory dir=newDirectory();
  final RandomIndexWriter w=new RandomIndexWriter(random(),dir,new KeywordAnalyzer());
  int max=randomIntBetween(2,10);
  int[] sliceCounters=new int[max];
  Set<String> keys=new HashSet<>();
  for (int i=0; i < numDocs; ++i) {
    Document doc=new Document();
    String uuid=UUIDs.base64UUID();
    BytesRef br=new BytesRef(uuid);
    int id=Math.floorMod(br.hashCode(),max);
    sliceCounters[id]++;
    doc.add(new StringField("uuid",uuid,Field.Store.YES));
    w.addDocument(doc);
    keys.add(uuid);
  }
  final IndexReader reader=w.getReader();
  final IndexSearcher searcher=newSearcher(reader);
  for (int id=0; id < max; id++) {
    TermsSliceQuery query1=new TermsSliceQuery("uuid",id,max);
    assertThat(searcher.count(query1),equalTo(sliceCounters[id]));
    searcher.search(query1,new Collector(){
      @Override public LeafCollector getLeafCollector(      LeafReaderContext context) throws IOException {
        return new LeafCollector(){
          @Override public void setScorer(          Scorer scorer) throws IOException {
          }
          @Override public void collect(          int doc) throws IOException {
            Document d=context.reader().document(doc,Collections.singleton("uuid"));
            String uuid=d.get("uuid");
            assertThat(keys.contains(uuid),equalTo(true));
            keys.remove(uuid);
          }
        }
;
      }
      @Override public boolean needsScores(){
        return false;
      }
    }
);
  }
  assertThat(keys.size(),equalTo(0));
  w.close();
  reader.close();
  dir.close();
}
