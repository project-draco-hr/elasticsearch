{
  if (noopBreakerUsed()) {
    logger.info("--> noop breakers used, skipping test");
    return;
  }
  assertAcked(prepareCreate("cb-test",1,Settings.builder().put(SETTING_NUMBER_OF_REPLICAS,between(0,1))).addMapping("type","test","type=text,fielddata=true"));
  Client client=client();
  int docCount=scaledRandomIntBetween(300,1000);
  List<IndexRequestBuilder> reqs=new ArrayList<>();
  for (long id=0; id < docCount; id++) {
    reqs.add(client.prepareIndex("cb-test","type",Long.toString(id)).setSource("test","value" + id));
  }
  indexRandom(true,reqs);
  Settings resetSettings=Settings.builder().put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(),"10b").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING.getKey(),1.0).build();
  assertAcked(client.admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings));
  try {
    client.prepareSearch("cb-test").setQuery(matchAllQuery()).addSort("test",SortOrder.DESC).get();
    fail("should have thrown an exception");
  }
 catch (  Exception e) {
    String errMsg="[fielddata] Data too large, data for [test] would be larger than limit of [10/10b]";
    assertThat("Exception: [" + e.toString() + "] should contain a CircuitBreakingException",e.toString(),containsString(errMsg));
  }
  assertFailures(client.prepareSearch("cb-test").setQuery(matchAllQuery()).addSort("test",SortOrder.DESC),RestStatus.INTERNAL_SERVER_ERROR,containsString("Data too large, data for [test] would be larger than limit of [10/10b]"));
  reset();
  resetSettings=Settings.builder().put(HierarchyCircuitBreakerService.TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(),"500b").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING.getKey(),"90%").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING.getKey(),1.0).build();
  client.admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings).execute().actionGet();
  try {
    SearchResponse searchResponse=client.prepareSearch("cb-test").setQuery(matchAllQuery()).addSort("test",SortOrder.DESC).get();
    if (searchResponse.getShardFailures().length > 0) {
      for (      ShardSearchFailure shardSearchFailure : searchResponse.getShardFailures()) {
        Throwable cause=ExceptionsHelper.unwrap(shardSearchFailure.getCause(),CircuitBreakingException.class);
        assertThat(cause,instanceOf(CircuitBreakingException.class));
        assertEquals(((CircuitBreakingException)cause).getByteLimit(),500L);
      }
    }
 else {
      fail("should have thrown a CircuitBreakingException");
    }
  }
 catch (  Exception e) {
    Throwable cause=ExceptionsHelper.unwrap(e,CircuitBreakingException.class);
    assertThat(cause,instanceOf(CircuitBreakingException.class));
    assertEquals(((CircuitBreakingException)cause).getByteLimit(),500L);
    assertThat("Exception: [" + cause.toString() + "] should be caused by the parent circuit breaker",cause.toString(),startsWith("CircuitBreakingException[[parent] Data too large"));
  }
  reset();
}
