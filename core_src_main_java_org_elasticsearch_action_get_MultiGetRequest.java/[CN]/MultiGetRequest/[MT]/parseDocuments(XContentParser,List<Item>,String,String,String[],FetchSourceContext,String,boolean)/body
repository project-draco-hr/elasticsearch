{
  String currentFieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
    if (token != XContentParser.Token.START_OBJECT) {
      throw new IllegalArgumentException("docs array element should include an object");
    }
    String index=defaultIndex;
    String type=defaultType;
    String id=null;
    String routing=defaultRouting;
    String parent=null;
    List<String> fields=null;
    long version=Versions.MATCH_ANY;
    VersionType versionType=VersionType.INTERNAL;
    FetchSourceContext fetchSourceContext=null;
    while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
      if (token == XContentParser.Token.FIELD_NAME) {
        currentFieldName=parser.currentName();
      }
 else       if (token.isValue()) {
        if ("_index".equals(currentFieldName)) {
          if (!allowExplicitIndex) {
            throw new IllegalArgumentException("explicit index in multi get is not allowed");
          }
          index=parser.text();
        }
 else         if ("_type".equals(currentFieldName)) {
          type=parser.text();
        }
 else         if ("_id".equals(currentFieldName)) {
          id=parser.text();
        }
 else         if ("_routing".equals(currentFieldName) || "routing".equals(currentFieldName)) {
          routing=parser.text();
        }
 else         if ("_parent".equals(currentFieldName) || "parent".equals(currentFieldName)) {
          parent=parser.text();
        }
 else         if ("fields".equals(currentFieldName)) {
          fields=new ArrayList<>();
          fields.add(parser.text());
        }
 else         if ("_version".equals(currentFieldName) || "version".equals(currentFieldName)) {
          version=parser.longValue();
        }
 else         if ("_version_type".equals(currentFieldName) || "_versionType".equals(currentFieldName) || "version_type".equals(currentFieldName)|| "versionType".equals(currentFieldName)) {
          versionType=VersionType.fromString(parser.text());
        }
 else         if ("_source".equals(currentFieldName)) {
          if (parser.isBooleanValue()) {
            fetchSourceContext=new FetchSourceContext(parser.booleanValue());
          }
 else           if (token == XContentParser.Token.VALUE_STRING) {
            fetchSourceContext=new FetchSourceContext(new String[]{parser.text()});
          }
 else {
            throw new ElasticsearchParseException("illegal type for _source: [{}]",token);
          }
        }
      }
 else       if (token == XContentParser.Token.START_ARRAY) {
        if ("fields".equals(currentFieldName)) {
          fields=new ArrayList<>();
          while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
            fields.add(parser.text());
          }
        }
 else         if ("_source".equals(currentFieldName)) {
          ArrayList<String> includes=new ArrayList<>();
          while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
            includes.add(parser.text());
          }
          fetchSourceContext=new FetchSourceContext(includes.toArray(Strings.EMPTY_ARRAY));
        }
      }
 else       if (token == XContentParser.Token.START_OBJECT) {
        if ("_source".equals(currentFieldName)) {
          List<String> currentList=null, includes=null, excludes=null;
          while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
            if (token == XContentParser.Token.FIELD_NAME) {
              currentFieldName=parser.currentName();
              if ("includes".equals(currentFieldName) || "include".equals(currentFieldName)) {
                currentList=includes != null ? includes : (includes=new ArrayList<>(2));
              }
 else               if ("excludes".equals(currentFieldName) || "exclude".equals(currentFieldName)) {
                currentList=excludes != null ? excludes : (excludes=new ArrayList<>(2));
              }
 else {
                throw new ElasticsearchParseException("source definition may not contain [{}]",parser.text());
              }
            }
 else             if (token == XContentParser.Token.START_ARRAY) {
              while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
                currentList.add(parser.text());
              }
            }
 else             if (token.isValue()) {
              currentList.add(parser.text());
            }
 else {
              throw new ElasticsearchParseException("unexpected token while parsing source settings");
            }
          }
          fetchSourceContext=new FetchSourceContext(includes == null ? Strings.EMPTY_ARRAY : includes.toArray(new String[includes.size()]),excludes == null ? Strings.EMPTY_ARRAY : excludes.toArray(new String[excludes.size()]));
        }
      }
    }
    String[] aFields;
    if (fields != null) {
      aFields=fields.toArray(new String[fields.size()]);
    }
 else {
      aFields=defaultFields;
    }
    items.add(new Item(index,type,id).routing(routing).fields(aFields).parent(parent).version(version).versionType(versionType).fetchSourceContext(fetchSourceContext == null ? defaultFetchSource : fetchSourceContext));
  }
}
