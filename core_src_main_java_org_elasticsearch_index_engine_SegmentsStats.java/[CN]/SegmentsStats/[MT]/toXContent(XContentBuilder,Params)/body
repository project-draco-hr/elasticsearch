{
  builder.startObject(Fields.SEGMENTS);
  builder.field(Fields.COUNT,count);
  builder.byteSizeField(Fields.MEMORY_IN_BYTES,Fields.MEMORY,memoryInBytes);
  builder.byteSizeField(Fields.TERMS_MEMORY_IN_BYTES,Fields.TERMS_MEMORY,termsMemoryInBytes);
  builder.byteSizeField(Fields.STORED_FIELDS_MEMORY_IN_BYTES,Fields.STORED_FIELDS_MEMORY,storedFieldsMemoryInBytes);
  builder.byteSizeField(Fields.TERM_VECTORS_MEMORY_IN_BYTES,Fields.TERM_VECTORS_MEMORY,termVectorsMemoryInBytes);
  builder.byteSizeField(Fields.NORMS_MEMORY_IN_BYTES,Fields.NORMS_MEMORY,normsMemoryInBytes);
  builder.byteSizeField(Fields.DOC_VALUES_MEMORY_IN_BYTES,Fields.DOC_VALUES_MEMORY,docValuesMemoryInBytes);
  builder.byteSizeField(Fields.INDEX_WRITER_MEMORY_IN_BYTES,Fields.INDEX_WRITER_MEMORY,indexWriterMemoryInBytes);
  builder.byteSizeField(Fields.INDEX_WRITER_MAX_MEMORY_IN_BYTES,Fields.INDEX_WRITER_MAX_MEMORY,indexWriterMaxMemoryInBytes);
  builder.byteSizeField(Fields.VERSION_MAP_MEMORY_IN_BYTES,Fields.VERSION_MAP_MEMORY,versionMapMemoryInBytes);
  builder.byteSizeField(Fields.FIXED_BIT_SET_MEMORY_IN_BYTES,Fields.FIXED_BIT_SET,bitsetMemoryInBytes);
  builder.startObject(Fields.FILE_SIZES);
  for (Iterator<ObjectObjectCursor<String,Long>> it=fileSizes.iterator(); it.hasNext(); ) {
    ObjectObjectCursor<String,Long> entry=it.next();
    builder.startObject(entry.key);
    builder.byteSizeField(Fields.SIZE_IN_BYTES,Fields.SIZE,entry.value);
    builder.field(Fields.DESCRIPTION,fileDescriptions.getOrDefault(entry.key,"Others"));
    builder.endObject();
  }
  builder.endObject();
  builder.endObject();
  return builder;
}
