{
  super(index,indexSettings);
  Map<String,AnalyzerProvider> analyzerProviders=newHashMap();
  if (analyzerFactoryFactories != null) {
    Map<String,Settings> analyzersSettings=indexSettings.getGroups("index.analysis.analyzer");
    for (    Map.Entry<String,AnalyzerProviderFactory> entry : analyzerFactoryFactories.entrySet()) {
      String analyzerName=entry.getKey();
      AnalyzerProviderFactory analyzerFactoryFactory=entry.getValue();
      Settings analyzerSettings=analyzersSettings.get(analyzerName);
      if (analyzerSettings == null) {
        analyzerSettings=ImmutableSettings.Builder.EMPTY_SETTINGS;
      }
      AnalyzerProvider analyzerFactory=analyzerFactoryFactory.create(analyzerName,analyzerSettings);
      analyzerProviders.put(analyzerName,analyzerFactory);
    }
  }
  if (!analyzerProviders.containsKey("standard")) {
    analyzerProviders.put("standard",new StandardAnalyzerProvider(index,indexSettings,"standard",ImmutableSettings.Builder.EMPTY_SETTINGS));
  }
  if (!analyzerProviders.containsKey("simple")) {
    analyzerProviders.put("simple",new SimpleAnalyzerProvider(index,indexSettings,"simple",ImmutableSettings.Builder.EMPTY_SETTINGS));
  }
  if (!analyzerProviders.containsKey("stop")) {
    analyzerProviders.put("stop",new StopAnalyzerProvider(index,indexSettings,"stop",ImmutableSettings.Builder.EMPTY_SETTINGS));
  }
  if (!analyzerProviders.containsKey("whitespace")) {
    analyzerProviders.put("whitespace",new WhitespaceAnalyzerProvider(index,indexSettings,"whitespace",ImmutableSettings.Builder.EMPTY_SETTINGS));
  }
  if (!analyzerProviders.containsKey("keyword")) {
    analyzerProviders.put("keyword",new KeywordAnalyzerProvider(index,indexSettings,"keyword",ImmutableSettings.Builder.EMPTY_SETTINGS));
  }
  if (!analyzerProviders.containsKey("default")) {
    analyzerProviders.put("default",new StandardAnalyzerProvider(index,indexSettings,"default",ImmutableSettings.Builder.EMPTY_SETTINGS));
  }
  if (!analyzerProviders.containsKey("defaultIndex")) {
    analyzerProviders.put("defaultIndex",analyzerProviders.get("default"));
  }
  if (!analyzerProviders.containsKey("defaultSearch")) {
    analyzerProviders.put("defaultSearch",analyzerProviders.get("default"));
  }
  if (!analyzerProviders.containsKey("arabic")) {
    analyzerProviders.put("arabic",new ArabicAnalyzerProvider(index,indexSettings,"arabic",ImmutableSettings.Builder.EMPTY_SETTINGS));
  }
  if (!analyzerProviders.containsKey("brazilian")) {
    analyzerProviders.put("brazilian",new BrazilianAnalyzerProvider(index,indexSettings,"brazilian",ImmutableSettings.Builder.EMPTY_SETTINGS));
  }
  if (!analyzerProviders.containsKey("chinese")) {
    analyzerProviders.put("chinese",new ChineseAnalyzerProvider(index,indexSettings,"chinese",ImmutableSettings.Builder.EMPTY_SETTINGS));
  }
  if (!analyzerProviders.containsKey("cjk")) {
    analyzerProviders.put("cjk",new ChineseAnalyzerProvider(index,indexSettings,"cjk",ImmutableSettings.Builder.EMPTY_SETTINGS));
  }
  if (!analyzerProviders.containsKey("czech")) {
    analyzerProviders.put("czech",new CzechAnalyzerProvider(index,indexSettings,"czech",ImmutableSettings.Builder.EMPTY_SETTINGS));
  }
  if (!analyzerProviders.containsKey("dutch")) {
    analyzerProviders.put("dutch",new DutchAnalyzerProvider(index,indexSettings,"dutch",ImmutableSettings.Builder.EMPTY_SETTINGS));
  }
  if (!analyzerProviders.containsKey("french")) {
    analyzerProviders.put("french",new FrenchAnalyzerProvider(index,indexSettings,"french",ImmutableSettings.Builder.EMPTY_SETTINGS));
  }
  if (!analyzerProviders.containsKey("german")) {
    analyzerProviders.put("german",new GermanAnalyzerProvider(index,indexSettings,"german",ImmutableSettings.Builder.EMPTY_SETTINGS));
  }
  if (!analyzerProviders.containsKey("greek")) {
    analyzerProviders.put("greek",new GreekAnalyzerProvider(index,indexSettings,"greek",ImmutableSettings.Builder.EMPTY_SETTINGS));
  }
  if (!analyzerProviders.containsKey("persian")) {
    analyzerProviders.put("persian",new PersianAnalyzerProvider(index,indexSettings,"persian",ImmutableSettings.Builder.EMPTY_SETTINGS));
  }
  if (!analyzerProviders.containsKey("russian")) {
    analyzerProviders.put("russian",new RussianAnalyzerProvider(index,indexSettings,"russian",ImmutableSettings.Builder.EMPTY_SETTINGS));
  }
  if (!analyzerProviders.containsKey("thai")) {
    analyzerProviders.put("thai",new ThaiAnalyzerProvider(index,indexSettings,"thai",ImmutableSettings.Builder.EMPTY_SETTINGS));
  }
  this.analyzerProviders=ImmutableMap.copyOf(analyzerProviders);
  Map<String,NamedAnalyzer> analyzers=newHashMap();
  for (  AnalyzerProvider analyzerFactory : analyzerProviders.values()) {
    analyzers.put(analyzerFactory.name(),new NamedAnalyzer(analyzerFactory.name(),analyzerFactory.get()));
  }
  this.analyzers=ImmutableMap.copyOf(analyzers);
  Map<String,TokenizerFactory> tokenizers=newHashMap();
  if (tokenizerFactoryFactories != null) {
    Map<String,Settings> tokenizersSettings=indexSettings.getGroups("index.analysis.tokenizer");
    for (    Map.Entry<String,TokenizerFactoryFactory> entry : tokenizerFactoryFactories.entrySet()) {
      String tokenizerName=entry.getKey();
      TokenizerFactoryFactory tokenizerFactoryFactory=entry.getValue();
      Settings tokenizerSettings=tokenizersSettings.get(tokenizerName);
      if (tokenizerSettings == null) {
        tokenizerSettings=ImmutableSettings.Builder.EMPTY_SETTINGS;
      }
      TokenizerFactory tokenizerFactory=tokenizerFactoryFactory.create(tokenizerName,tokenizerSettings);
      tokenizers.put(tokenizerName,tokenizerFactory);
    }
  }
  this.tokenizers=ImmutableMap.copyOf(tokenizers);
  Map<String,TokenFilterFactory> tokenFilters=newHashMap();
  if (tokenFilterFactoryFactories != null) {
    Map<String,Settings> tokenFiltersSettings=indexSettings.getGroups("index.analysis.filter");
    for (    Map.Entry<String,TokenFilterFactoryFactory> entry : tokenFilterFactoryFactories.entrySet()) {
      String tokenFilterName=entry.getKey();
      TokenFilterFactoryFactory tokenFilterFactoryFactory=entry.getValue();
      Settings tokenFilterSettings=tokenFiltersSettings.get(tokenFilterName);
      if (tokenFilterSettings == null) {
        tokenFilterSettings=ImmutableSettings.Builder.EMPTY_SETTINGS;
      }
      TokenFilterFactory tokenFilterFactory=tokenFilterFactoryFactory.create(tokenFilterName,tokenFilterSettings);
      tokenFilters.put(tokenFilterName,tokenFilterFactory);
    }
  }
  this.tokenFilters=ImmutableMap.copyOf(tokenFilters);
}
