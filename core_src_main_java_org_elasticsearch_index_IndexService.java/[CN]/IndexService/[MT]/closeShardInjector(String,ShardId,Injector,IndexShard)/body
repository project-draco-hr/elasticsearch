{
  final int shardId=sId.id();
  try {
    try {
      indicesLifecycle.beforeIndexShardClosed(sId,indexShard,indexSettings);
    }
  finally {
      for (      Class<? extends Closeable> closeable : pluginsService.shardServices()) {
        try {
          shardInjector.getInstance(closeable).close();
        }
 catch (        Throwable e) {
          logger.debug("[{}] failed to clean plugin shard service [{}]",e,shardId,closeable);
        }
      }
      if (indexShard != null) {
        try {
          final boolean flushEngine=deleted.get() == false && closed.get();
          indexShard.close(reason,flushEngine);
        }
 catch (        Throwable e) {
          logger.debug("[{}] failed to close index shard",e,shardId);
        }
      }
      closeInjectorResource(sId,shardInjector,StoreRecoveryService.class);
      indicesLifecycle.afterIndexShardClosed(sId,indexShard,indexSettings);
    }
  }
  finally {
    try {
      shardInjector.getInstance(Store.class).close();
    }
 catch (    Throwable e) {
      logger.warn("[{}] failed to close store on shard removal (reason: [{}])",e,shardId,reason);
    }
  }
}
