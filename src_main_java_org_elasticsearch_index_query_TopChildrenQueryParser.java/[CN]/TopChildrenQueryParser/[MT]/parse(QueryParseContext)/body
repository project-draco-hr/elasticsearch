{
  XContentParser parser=parseContext.parser();
  boolean queryFound=false;
  float boost=1.0f;
  String childType=null;
  ScoreType scoreType=ScoreType.MAX;
  int factor=5;
  int incrementalFactor=2;
  String queryName=null;
  String currentFieldName=null;
  XContentParser.Token token;
  XContentStructure.InnerQuery iq=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("query".equals(currentFieldName)) {
        iq=new XContentStructure.InnerQuery(parseContext,childType == null ? null : new String[]{childType});
        queryFound=true;
      }
 else {
        throw new QueryParsingException(parseContext,"[top_children] query does not support [" + currentFieldName + "]");
      }
    }
 else     if (token.isValue()) {
      if ("type".equals(currentFieldName)) {
        childType=parser.text();
      }
 else       if ("score".equals(currentFieldName)) {
        scoreType=ScoreType.fromString(parser.text());
      }
 else       if ("score_mode".equals(currentFieldName) || "scoreMode".equals(currentFieldName)) {
        scoreType=ScoreType.fromString(parser.text());
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=parser.floatValue();
      }
 else       if ("factor".equals(currentFieldName)) {
        factor=parser.intValue();
      }
 else       if ("incremental_factor".equals(currentFieldName) || "incrementalFactor".equals(currentFieldName)) {
        incrementalFactor=parser.intValue();
      }
 else       if ("_name".equals(currentFieldName)) {
        queryName=parser.text();
      }
 else {
        throw new QueryParsingException(parseContext,"[top_children] query does not support [" + currentFieldName + "]");
      }
    }
  }
  if (!queryFound) {
    throw new QueryParsingException(parseContext,"[top_children] requires 'query' field");
  }
  if (childType == null) {
    throw new QueryParsingException(parseContext,"[top_children] requires 'type' field");
  }
  Query innerQuery=iq.asQuery(childType);
  if (innerQuery == null) {
    return null;
  }
  DocumentMapper childDocMapper=parseContext.mapperService().documentMapper(childType);
  if (childDocMapper == null) {
    throw new QueryParsingException(parseContext,"No mapping for for type [" + childType + "]");
  }
  ParentFieldMapper parentFieldMapper=childDocMapper.parentFieldMapper();
  if (!parentFieldMapper.active()) {
    throw new QueryParsingException(parseContext,"Type [" + childType + "] does not have parent mapping");
  }
  String parentType=childDocMapper.parentFieldMapper().type();
  BitDocIdSetFilter nonNestedDocsFilter=null;
  if (childDocMapper.hasNestedObjects()) {
    nonNestedDocsFilter=parseContext.bitsetFilter(Queries.newNonNestedFilter());
  }
  innerQuery.setBoost(boost);
  innerQuery=new FilteredQuery(innerQuery,childDocMapper.typeFilter());
  ParentChildIndexFieldData parentChildIndexFieldData=parseContext.getForField(parentFieldMapper);
  TopChildrenQuery query=new TopChildrenQuery(parentChildIndexFieldData,innerQuery,childType,parentType,scoreType,factor,incrementalFactor,nonNestedDocsFilter);
  if (queryName != null) {
    parseContext.addNamedFilter(queryName,new QueryWrapperFilter(query));
  }
  return query;
}
