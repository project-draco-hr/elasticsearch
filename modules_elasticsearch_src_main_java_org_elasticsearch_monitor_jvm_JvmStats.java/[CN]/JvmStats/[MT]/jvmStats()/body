{
  JvmStats stats=new JvmStats(System.currentTimeMillis(),runtimeMXBean.getUptime());
  stats.mem=new Mem();
  MemoryUsage memUsage=memoryMXBean.getHeapMemoryUsage();
  stats.mem.heapUsed=memUsage.getUsed();
  stats.mem.heapCommitted=memUsage.getCommitted();
  memUsage=memoryMXBean.getNonHeapMemoryUsage();
  stats.mem.nonHeapUsed=memUsage.getUsed();
  stats.mem.nonHeapCommitted=memUsage.getCommitted();
  stats.threads=new Threads();
  stats.threads.count=threadMXBean.getThreadCount();
  stats.threads.peakCount=threadMXBean.getPeakThreadCount();
  List<GarbageCollectorMXBean> gcMxBeans=ManagementFactory.getGarbageCollectorMXBeans();
  stats.gc=new GarbageCollectors();
  stats.gc.collectors=new GarbageCollector[gcMxBeans.size()];
  for (int i=0; i < stats.gc.collectors.length; i++) {
    GarbageCollectorMXBean gcMxBean=gcMxBeans.get(i);
    stats.gc.collectors[i]=new GarbageCollector();
    stats.gc.collectors[i].name=gcMxBean.getName();
    stats.gc.collectors[i].collectionCount=gcMxBean.getCollectionCount();
    stats.gc.collectors[i].collectionTime=gcMxBean.getCollectionTime();
    if (sunGc) {
      try {
        Object lastGcInfo=getLastGcInfoMethod.invoke(gcMxBean);
        if (lastGcInfo != null) {
          Map<String,MemoryUsage> usageBeforeGc=(Map<String,MemoryUsage>)getMemoryUsageBeforeGcMethod.invoke(lastGcInfo);
          Map<String,MemoryUsage> usageAfterGc=(Map<String,MemoryUsage>)getMemoryUsageAfterGcMethod.invoke(lastGcInfo);
          long startTime=(Long)getStartTimeMethod.invoke(lastGcInfo);
          long endTime=(Long)getEndTimeMethod.invoke(lastGcInfo);
          long duration=(Long)getDurationMethod.invoke(lastGcInfo);
          long previousMemoryUsed=0;
          long memoryUsed=0;
          long memoryMax=0;
          for (          Map.Entry<String,MemoryUsage> entry : usageBeforeGc.entrySet()) {
            previousMemoryUsed+=entry.getValue().getUsed();
          }
          for (          Map.Entry<String,MemoryUsage> entry : usageAfterGc.entrySet()) {
            MemoryUsage mu=entry.getValue();
            memoryUsed+=mu.getUsed();
            memoryMax+=mu.getMax();
          }
          stats.gc.collectors[i].lastGc=new GarbageCollector.LastGc(startTime,endTime,memoryMax,previousMemoryUsed,memoryUsed,duration);
        }
      }
 catch (      Exception e) {
      }
    }
  }
  return stats;
}
