{
  Settings commonSettings=ImmutableSettings.settingsBuilder().put("cluster.routing.schedule","10ms").put("cluster.routing.allocation.awareness.attributes","rack_id").build();
  logger.info("--> starting 2 nodes on the same rack");
  startNode("node1",ImmutableSettings.settingsBuilder().put(commonSettings).put("node.rack_id","rack_1"));
  startNode("node2",ImmutableSettings.settingsBuilder().put(commonSettings).put("node.rack_id","rack_1"));
  client("node1").admin().indices().prepareCreate("test1").execute().actionGet();
  client("node1").admin().indices().prepareCreate("test2").execute().actionGet();
  ClusterHealthResponse health=client("node1").admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();
  assertThat(health.isTimedOut(),equalTo(false));
  logger.info("--> starting 1 node on a different rack");
  startNode("node3",ImmutableSettings.settingsBuilder().put(commonSettings).put("node.rack_id","rack_2"));
  long start=System.currentTimeMillis();
  TObjectIntHashMap<String> counts;
  do {
    Thread.sleep(100);
    logger.info("--> waiting for no relocation");
    health=client("node1").admin().cluster().prepareHealth().setWaitForGreenStatus().setWaitForNodes("3").setWaitForRelocatingShards(0).execute().actionGet();
    assertThat(health.isTimedOut(),equalTo(false));
    logger.info("--> checking current state");
    ClusterState clusterState=client("node1").admin().cluster().prepareState().execute().actionGet().getState();
    counts=new TObjectIntHashMap<String>();
    for (    IndexRoutingTable indexRoutingTable : clusterState.routingTable()) {
      for (      IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {
        for (        ShardRouting shardRouting : indexShardRoutingTable) {
          counts.adjustOrPutValue(clusterState.nodes().get(shardRouting.currentNodeId()).name(),1,1);
        }
      }
    }
  }
 while (counts.get("node3") != 10 && (System.currentTimeMillis() - start) < 10000);
  assertThat(counts.get("node3"),equalTo(10));
}
