{
  if (!lifecycle.started()) {
    throw new ElasticSearchIllegalStateException("Can't create an index [" + sIndexName + "], node is closed");
  }
  Index index=new Index(sIndexName);
  if (indicesInjectors.containsKey(index.name())) {
    throw new IndexAlreadyExistsException(index);
  }
  indicesLifecycle.beforeIndexCreated(index);
  logger.debug("creating Index [{}], shards [{}]/[{}]",sIndexName,settings.get(SETTING_NUMBER_OF_SHARDS),settings.get(SETTING_NUMBER_OF_REPLICAS));
  Settings indexSettings=settingsBuilder().put(this.settings).put(settings).classLoader(settings.getClassLoader()).build();
  ModulesBuilder modules=new ModulesBuilder();
  modules.add(new IndexNameModule(index));
  modules.add(new LocalNodeIdModule(localNodeId));
  modules.add(new IndexSettingsModule(index,indexSettings));
  modules.add(new IndexPluginsModule(indexSettings,pluginsService));
  modules.add(new IndexStoreModule(indexSettings));
  modules.add(new IndexEngineModule(indexSettings));
  modules.add(new AnalysisModule(indexSettings,indicesAnalysisService));
  modules.add(new SimilarityModule(indexSettings));
  modules.add(new IndexCacheModule(indexSettings));
  modules.add(new IndexQueryParserModule(indexSettings));
  modules.add(new MapperServiceModule());
  modules.add(new IndexAliasesServiceModule());
  modules.add(new IndexGatewayModule(indexSettings,injector.getInstance(Gateway.class)));
  modules.add(new IndexModule(indexSettings));
  modules.add(new PercolatorModule());
  Injector indexInjector;
  try {
    indexInjector=modules.createChildInjector(injector);
  }
 catch (  CreationException e) {
    throw new IndexCreationException(index,Injectors.getFirstErrorFailure(e));
  }
  indicesInjectors.put(index.name(),indexInjector);
  IndexService indexService=indexInjector.getInstance(IndexService.class);
  indicesLifecycle.afterIndexCreated(indexService);
  indices=newMapBuilder(indices).put(index.name(),indexService).immutableMap();
  return indexService;
}
