{
  final BiFun<Map.Entry<K,V>,Map.Entry<K,V>,? extends Map.Entry<K,V>> reducer;
  if ((reducer=this.reducer) != null) {
    for (int i=baseIndex, f, h; batch > 0 && (h=((f=baseLimit) + i) >>> 1) > i; ) {
      addToPendingCount(1);
      (rights=new ReduceEntriesTask<K,V>(this,batch>>>=1,baseLimit=h,f,tab,rights,reducer)).fork();
    }
    Map.Entry<K,V> r=null;
    for (Node<K,V> p; (p=advance()) != null; )     r=(r == null) ? p : reducer.apply(r,p);
    result=r;
    CountedCompleter<?> c;
    for (c=firstComplete(); c != null; c=c.nextComplete()) {
      @SuppressWarnings("unchecked") ReduceEntriesTask<K,V> t=(ReduceEntriesTask<K,V>)c, s=t.rights;
      while (s != null) {
        Map.Entry<K,V> tr, sr;
        if ((sr=s.result) != null)         t.result=(((tr=t.result) == null) ? sr : reducer.apply(tr,sr));
        s=t.rights=s.nextRight;
      }
    }
  }
}
