{
  final Fun<Entry<K,V>,? extends U> searchFunction;
  final AtomicReference<U> result;
  if ((searchFunction=this.searchFunction) != null && (result=this.result) != null) {
    for (int b; ; ) {
      if (result.get() != null)       return;
      if ((b=preSplit()) <= 0)       break;
      new SearchEntriesTask<K,V,U>(map,this,b,searchFunction,result).fork();
    }
    while (result.get() == null) {
      V v;
      U u;
      if ((v=advance()) == null) {
        propagateCompletion();
        break;
      }
      if ((u=searchFunction.apply(entryFor((K)nextKey,v))) != null) {
        if (result.compareAndSet(null,u))         quietlyCompleteRoot();
        return;
      }
    }
  }
}
