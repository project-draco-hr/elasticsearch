{
  Class<?> c=k.getClass();
  TreeNode p=root;
  int dir=0;
  if (p != null) {
    for (; ; ) {
      int ph;
      Object pk;
      Class<?> pc;
      TreeNode r;
      if (h < (ph=p.hash))       dir=-1;
 else       if (h > ph)       dir=1;
 else       if ((pk=p.key) == k || k.equals(pk))       return p;
 else       if (c != (pc=(pk=p.key).getClass()))       dir=c.getName().compareTo(pc.getName());
 else       if (k instanceof Comparable)       dir=((Comparable)k).compareTo((Comparable)pk);
 else       dir=0;
      TreeNode pr=p.right, pl;
      if (dir > 0) {
        if (pr == null)         break;
        p=pr;
      }
 else       if (dir == 0 && pr != null && h >= pr.hash && (r=getTreeNode(h,k,pr)) != null)       return r;
 else       if ((pl=p.left) == null)       break;
 else       p=pl;
    }
  }
  TreeNode f=first;
  TreeNode r=first=new TreeNode(h,k,v,f,p);
  if (p == null)   root=r;
 else {
    if (dir <= 0)     p.left=r;
 else     p.right=r;
    if (f != null)     f.prev=r;
    fixAfterInsertion(r);
  }
  return null;
}
