{
  Class<?> c=k.getClass();
  while (p != null) {
    int dir, ph;
    Object pk;
    Class<?> pc;
    if ((ph=p.hash) == h) {
      if ((pk=p.key) == k || k.equals(pk))       return p;
      if (c != (pc=pk.getClass()) || !(k instanceof Comparable) || (dir=((Comparable)k).compareTo((Comparable)pk)) == 0) {
        if ((dir=(c == pc) ? 0 : c.getName().compareTo(pc.getName())) == 0) {
          TreeNode<V> r=null, pl, pr;
          if ((pr=p.right) != null && h >= pr.hash && (r=getTreeNode(h,k,pr)) != null)           return r;
 else           if ((pl=p.left) != null && h <= pl.hash)           dir=-1;
 else           return null;
        }
      }
    }
 else     dir=(h < ph) ? -1 : 1;
    p=(dir > 0) ? p.right : p.left;
  }
  return null;
}
