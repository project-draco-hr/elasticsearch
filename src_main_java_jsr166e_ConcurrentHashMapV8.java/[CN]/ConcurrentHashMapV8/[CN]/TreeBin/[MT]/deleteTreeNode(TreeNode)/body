{
  TreeNode next=(TreeNode)p.next;
  TreeNode pred=p.prev;
  if (pred == null)   first=next;
 else   pred.next=next;
  if (next != null)   next.prev=pred;
  TreeNode replacement;
  TreeNode pl=p.left;
  TreeNode pr=p.right;
  if (pl != null && pr != null) {
    TreeNode s=pr;
    while (s.left != null)     s=s.left;
    boolean c=s.red;
    s.red=p.red;
    p.red=c;
    TreeNode sr=s.right;
    TreeNode pp=p.parent;
    if (s == pr) {
      p.parent=s;
      s.right=p;
    }
 else {
      TreeNode sp=s.parent;
      if ((p.parent=sp) != null) {
        if (s == sp.left)         sp.left=p;
 else         sp.right=p;
      }
      if ((s.right=pr) != null)       pr.parent=s;
    }
    p.left=null;
    if ((p.right=sr) != null)     sr.parent=p;
    if ((s.left=pl) != null)     pl.parent=s;
    if ((s.parent=pp) == null)     root=s;
 else     if (p == pp.left)     pp.left=s;
 else     pp.right=s;
    replacement=sr;
  }
 else   replacement=(pl != null) ? pl : pr;
  TreeNode pp=p.parent;
  if (replacement == null) {
    if (pp == null) {
      root=null;
      return;
    }
    replacement=p;
  }
 else {
    replacement.parent=pp;
    if (pp == null)     root=replacement;
 else     if (p == pp.left)     pp.left=replacement;
 else     pp.right=replacement;
    p.left=p.right=p.parent=null;
  }
  if (!p.red)   fixAfterDeletion(replacement);
  if (p == replacement && (pp=p.parent) != null) {
    if (p == pp.left)     pp.left=null;
 else     if (p == pp.right)     pp.right=null;
    p.parent=null;
  }
}
