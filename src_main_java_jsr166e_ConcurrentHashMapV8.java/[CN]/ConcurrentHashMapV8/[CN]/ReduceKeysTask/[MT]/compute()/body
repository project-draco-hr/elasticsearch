{
  final BiFun<? super K,? super K,? extends K> reducer;
  if ((reducer=this.reducer) != null) {
    for (int i=baseIndex, f, h; batch > 0 && (h=((f=baseLimit) + i) >>> 1) > i; ) {
      addToPendingCount(1);
      (rights=new ReduceKeysTask<K,V>(this,batch>>>=1,baseLimit=h,f,tab,rights,reducer)).fork();
    }
    K r=null;
    for (Node<K,V> p; (p=advance()) != null; ) {
      K u=p.key;
      r=(r == null) ? u : u == null ? r : reducer.apply(r,u);
    }
    result=r;
    CountedCompleter<?> c;
    for (c=firstComplete(); c != null; c=c.nextComplete()) {
      @SuppressWarnings("unchecked") ReduceKeysTask<K,V> t=(ReduceKeysTask<K,V>)c, s=t.rights;
      while (s != null) {
        K tr, sr;
        if ((sr=s.result) != null)         t.result=(((tr=t.result) == null) ? sr : reducer.apply(tr,sr));
        s=t.rights=s.nextRight;
      }
    }
  }
}
