{
  final BiFun<? super K,? super K,? extends K> reducer;
  if ((reducer=this.reducer) != null) {
    for (int b; (b=preSplit()) > 0; )     (rights=new ReduceKeysTask<K,V>(map,this,b,rights,reducer)).fork();
    K r=null;
    while (advance() != null) {
      K u=(K)nextKey;
      r=(r == null) ? u : reducer.apply(r,u);
    }
    result=r;
    CountedCompleter<?> c;
    for (c=firstComplete(); c != null; c=c.nextComplete()) {
      ReduceKeysTask<K,V> t=(ReduceKeysTask<K,V>)c, s=t.rights;
      while (s != null) {
        K tr, sr;
        if ((sr=s.result) != null)         t.result=(((tr=t.result) == null) ? sr : reducer.apply(tr,sr));
        s=t.rights=s.nextRight;
      }
    }
  }
}
