{
  final BiFun<? super K,? super V,? extends U> transformer;
  final BiFun<? super U,? super U,? extends U> reducer;
  if ((transformer=this.transformer) != null && (reducer=this.reducer) != null) {
    for (int b; (b=preSplit()) > 0; )     (rights=new MapReduceMappingsTask<K,V,U>(map,this,b,rights,transformer,reducer)).fork();
    U r=null, u;
    V v;
    while ((v=advance()) != null) {
      if ((u=transformer.apply((K)nextKey,v)) != null)       r=(r == null) ? u : reducer.apply(r,u);
    }
    result=r;
    CountedCompleter<?> c;
    for (c=firstComplete(); c != null; c=c.nextComplete()) {
      MapReduceMappingsTask<K,V,U> t=(MapReduceMappingsTask<K,V,U>)c, s=t.rights;
      while (s != null) {
        U tr, sr;
        if ((sr=s.result) != null)         t.result=(((tr=t.result) == null) ? sr : reducer.apply(tr,sr));
        s=t.rights=s.nextRight;
      }
    }
  }
}
