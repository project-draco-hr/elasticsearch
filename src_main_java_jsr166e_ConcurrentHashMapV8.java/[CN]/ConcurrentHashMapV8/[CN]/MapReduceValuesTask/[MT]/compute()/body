{
  final Fun<? super V,? extends U> transformer;
  final BiFun<? super U,? super U,? extends U> reducer;
  if ((transformer=this.transformer) != null && (reducer=this.reducer) != null) {
    for (int i=baseIndex, f, h; batch > 0 && (h=((f=baseLimit) + i) >>> 1) > i; ) {
      addToPendingCount(1);
      (rights=new MapReduceValuesTask<K,V,U>(this,batch>>>=1,baseLimit=h,f,tab,rights,transformer,reducer)).fork();
    }
    U r=null;
    for (Node<K,V> p; (p=advance()) != null; ) {
      U u;
      if ((u=transformer.apply(p.val)) != null)       r=(r == null) ? u : reducer.apply(r,u);
    }
    result=r;
    CountedCompleter<?> c;
    for (c=firstComplete(); c != null; c=c.nextComplete()) {
      @SuppressWarnings("unchecked") MapReduceValuesTask<K,V,U> t=(MapReduceValuesTask<K,V,U>)c, s=t.rights;
      while (s != null) {
        U tr, sr;
        if ((sr=s.result) != null)         t.result=(((tr=t.result) == null) ? sr : reducer.apply(tr,sr));
        s=t.rights=s.nextRight;
      }
    }
  }
}
