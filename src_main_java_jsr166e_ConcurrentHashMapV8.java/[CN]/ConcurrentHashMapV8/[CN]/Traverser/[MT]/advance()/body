{
  Node<V> e=next;
  V ev=null;
  outer:   do {
    if (e != null)     e=e.next;
    while (e == null) {
      ConcurrentHashMapV8<K,V> m;
      Node<V>[] t;
      int b, i, n;
      Object ek;
      if ((t=tab) != null)       n=t.length;
 else       if ((m=map) != null && (t=tab=m.table) != null)       n=baseLimit=baseSize=t.length;
 else       break outer;
      if ((b=baseIndex) >= baseLimit || (i=index) < 0 || i >= n)       break outer;
      if ((e=tabAt(t,i)) != null && e.hash < 0) {
        if ((ek=e.key) instanceof TreeBin)         e=((TreeBin<V>)ek).first;
 else {
          tab=(Node<V>[])ek;
          continue;
        }
      }
      index=(i+=baseSize) < n ? i : (baseIndex=b + 1);
    }
    nextKey=e.key;
  }
 while ((ev=e.val) == null);
  next=e;
  return nextVal=ev;
}
