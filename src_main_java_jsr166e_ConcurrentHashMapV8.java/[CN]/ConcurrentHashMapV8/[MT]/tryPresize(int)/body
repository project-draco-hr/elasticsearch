{
  int c=(size >= (MAXIMUM_CAPACITY >>> 1)) ? MAXIMUM_CAPACITY : tableSizeFor(size + (size >>> 1) + 1);
  int sc;
  while ((sc=sizeCtl) >= 0) {
    Node<K,V>[] tab=table;
    int n;
    if (tab == null || (n=tab.length) == 0) {
      n=(sc > c) ? sc : c;
      if (U.compareAndSwapInt(this,SIZECTL,sc,-1)) {
        try {
          if (table == tab) {
            @SuppressWarnings("unchecked") Node<K,V>[] nt=(Node<K,V>[])new Node<?,?>[n];
            table=nt;
            sc=n - (n >>> 2);
          }
        }
  finally {
          sizeCtl=sc;
        }
      }
    }
 else     if (c <= sc || n >= MAXIMUM_CAPACITY)     break;
 else     if (tab == table) {
      int rs=resizeStamp(n);
      if (sc < 0) {
        Node<K,V>[] nt;
        if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 || sc == rs + MAX_RESIZERS || (nt=nextTable) == null || transferIndex <= 0)         break;
        if (U.compareAndSwapInt(this,SIZECTL,sc,sc + 1))         transfer(tab,nt);
      }
 else       if (U.compareAndSwapInt(this,SIZECTL,sc,(rs << RESIZE_STAMP_SHIFT) + 2))       transfer(tab,null);
    }
  }
}
