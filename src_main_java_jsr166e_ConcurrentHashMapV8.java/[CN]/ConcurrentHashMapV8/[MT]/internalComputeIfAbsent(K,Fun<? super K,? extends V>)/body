{
  if (k == null || mf == null)   throw new NullPointerException();
  int h=spread(k.hashCode());
  V val=null;
  int len=0;
  for (Node<V>[] tab=table; ; ) {
    Node<V> f;
    int i;
    Object fk;
    if (tab == null)     tab=initTable();
 else     if ((f=tabAt(tab,i=(tab.length - 1) & h)) == null) {
      Node<V> node=new Node<V>(h,k,null,null);
synchronized (node) {
        if (casTabAt(tab,i,null,node)) {
          len=1;
          try {
            if ((val=mf.apply(k)) != null)             node.val=val;
          }
  finally {
            if (val == null)             setTabAt(tab,i,null);
          }
        }
      }
      if (len != 0)       break;
    }
 else     if (f.hash < 0) {
      if ((fk=f.key) instanceof TreeBin) {
        TreeBin<V> t=(TreeBin<V>)fk;
        boolean added=false;
        t.acquire(0);
        try {
          if (tabAt(tab,i) == f) {
            len=1;
            TreeNode<V> p=t.getTreeNode(h,k,t.root);
            if (p != null)             val=p.val;
 else             if ((val=mf.apply(k)) != null) {
              added=true;
              len=2;
              t.putTreeNode(h,k,val);
            }
          }
        }
  finally {
          t.release(0);
        }
        if (len != 0) {
          if (!added)           return val;
          break;
        }
      }
 else       tab=(Node<V>[])fk;
    }
 else {
      for (Node<V> e=f; e != null; e=e.next) {
        Object ek;
        V ev;
        if (e.hash == h && (ev=e.val) != null && ((ek=e.key) == k || k.equals(ek)))         return ev;
      }
      boolean added=false;
synchronized (f) {
        if (tabAt(tab,i) == f) {
          len=1;
          for (Node<V> e=f; ; ++len) {
            Object ek;
            V ev;
            if (e.hash == h && (ev=e.val) != null && ((ek=e.key) == k || k.equals(ek))) {
              val=ev;
              break;
            }
            Node<V> last=e;
            if ((e=e.next) == null) {
              if ((val=mf.apply(k)) != null) {
                added=true;
                last.next=new Node<V>(h,k,val,null);
                if (len >= TREE_THRESHOLD)                 replaceWithTreeBin(tab,i,k);
              }
              break;
            }
          }
        }
      }
      if (len != 0) {
        if (!added)         return val;
        break;
      }
    }
  }
  if (val != null)   addCount(1L,len);
  return val;
}
