{
  sizeCtl=-1;
  s.defaultReadObject();
  long size=0L;
  Node<K,V> p=null;
  for (; ; ) {
    @SuppressWarnings("unchecked") K k=(K)s.readObject();
    @SuppressWarnings("unchecked") V v=(V)s.readObject();
    if (k != null && v != null) {
      p=new Node<K,V>(spread(k.hashCode()),k,v,p);
      ++size;
    }
 else     break;
  }
  if (size == 0L)   sizeCtl=0;
 else {
    int n;
    if (size >= (long)(MAXIMUM_CAPACITY >>> 1))     n=MAXIMUM_CAPACITY;
 else {
      int sz=(int)size;
      n=tableSizeFor(sz + (sz >>> 1) + 1);
    }
    @SuppressWarnings({"rawtypes","unchecked"}) Node<K,V>[] tab=(Node<K,V>[])new Node[n];
    int mask=n - 1;
    long added=0L;
    while (p != null) {
      boolean insertAtFront;
      Node<K,V> next=p.next, first;
      int h=p.hash, j=h & mask;
      if ((first=tabAt(tab,j)) == null)       insertAtFront=true;
 else {
        K k=p.key;
        if (first.hash < 0) {
          TreeBin<K,V> t=(TreeBin<K,V>)first;
          if (t.putTreeVal(h,k,p.val) == null)           ++added;
          insertAtFront=false;
        }
 else {
          int binCount=0;
          insertAtFront=true;
          Node<K,V> q;
          K qk;
          for (q=first; q != null; q=q.next) {
            if (q.hash == h && ((qk=q.key) == k || (qk != null && k.equals(qk)))) {
              insertAtFront=false;
              break;
            }
            ++binCount;
          }
          if (insertAtFront && binCount >= TREEIFY_THRESHOLD) {
            insertAtFront=false;
            ++added;
            p.next=first;
            TreeNode<K,V> hd=null, tl=null;
            for (q=p; q != null; q=q.next) {
              TreeNode<K,V> t=new TreeNode<K,V>(q.hash,q.key,q.val,null,null);
              if ((t.prev=tl) == null)               hd=t;
 else               tl.next=t;
              tl=t;
            }
            setTabAt(tab,j,new TreeBin<K,V>(hd));
          }
        }
      }
      if (insertAtFront) {
        ++added;
        p.next=first;
        setTabAt(tab,j,p);
      }
      p=next;
    }
    table=tab;
    sizeCtl=n - (n >>> 2);
    baseCount=added;
  }
}
