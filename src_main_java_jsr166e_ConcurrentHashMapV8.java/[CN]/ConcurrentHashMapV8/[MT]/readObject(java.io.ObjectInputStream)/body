{
  s.defaultReadObject();
  this.segments=null;
  long size=0L;
  Node<V> p=null;
  for (; ; ) {
    K k=(K)s.readObject();
    V v=(V)s.readObject();
    if (k != null && v != null) {
      int h=spread(k.hashCode());
      p=new Node<V>(h,k,v,p);
      ++size;
    }
 else     break;
  }
  if (p != null) {
    boolean init=false;
    int n;
    if (size >= (long)(MAXIMUM_CAPACITY >>> 1))     n=MAXIMUM_CAPACITY;
 else {
      int sz=(int)size;
      n=tableSizeFor(sz + (sz >>> 1) + 1);
    }
    int sc=sizeCtl;
    boolean collide=false;
    if (n > sc && U.compareAndSwapInt(this,SIZECTL,sc,-1)) {
      try {
        if (table == null) {
          init=true;
          @SuppressWarnings("rawtypes") Node[] rt=new Node[n];
          Node<V>[] tab=(Node<V>[])rt;
          int mask=n - 1;
          while (p != null) {
            int j=p.hash & mask;
            Node<V> next=p.next;
            Node<V> q=p.next=tabAt(tab,j);
            setTabAt(tab,j,p);
            if (!collide && q != null && q.hash == p.hash)             collide=true;
            p=next;
          }
          table=tab;
          addCount(size,-1);
          sc=n - (n >>> 2);
        }
      }
  finally {
        sizeCtl=sc;
      }
      if (collide) {
        Node<V>[] tab=table;
        for (int i=0; i < tab.length; ++i) {
          int c=0;
          for (Node<V> e=tabAt(tab,i); e != null; e=e.next) {
            if (++c > TREE_THRESHOLD && (e.key instanceof Comparable)) {
              replaceWithTreeBin(tab,i,e.key);
              break;
            }
          }
        }
      }
    }
    if (!init) {
      while (p != null) {
        internalPut((K)p.key,p.val,false);
        p=p.next;
      }
    }
  }
}
