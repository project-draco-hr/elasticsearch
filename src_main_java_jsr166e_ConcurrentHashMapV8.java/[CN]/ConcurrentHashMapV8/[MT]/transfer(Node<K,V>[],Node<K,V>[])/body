{
  int n=tab.length, stride;
  if ((stride=(NCPU > 1) ? (n >>> 3) / NCPU : n) < MIN_TRANSFER_STRIDE)   stride=MIN_TRANSFER_STRIDE;
  if (nextTab == null) {
    try {
      @SuppressWarnings({"rawtypes","unchecked"}) Node<K,V>[] nt=(Node<K,V>[])new Node[n << 1];
      nextTab=nt;
    }
 catch (    Throwable ex) {
      sizeCtl=Integer.MAX_VALUE;
      return;
    }
    nextTable=nextTab;
    transferOrigin=n;
    transferIndex=n;
    ForwardingNode<K,V> rev=new ForwardingNode<K,V>(tab);
    for (int k=n; k > 0; ) {
      int nextk=(k > stride) ? k - stride : 0;
      for (int m=nextk; m < k; ++m)       nextTab[m]=rev;
      for (int m=n + nextk; m < n + k; ++m)       nextTab[m]=rev;
      U.putOrderedInt(this,TRANSFERORIGIN,k=nextk);
    }
  }
  int nextn=nextTab.length;
  ForwardingNode<K,V> fwd=new ForwardingNode<K,V>(nextTab);
  boolean advance=true;
  boolean finishing=false;
  for (int i=0, bound=0; ; ) {
    int nextIndex, nextBound, fh;
    Node<K,V> f;
    while (advance) {
      if (--i >= bound || finishing)       advance=false;
 else       if ((nextIndex=transferIndex) <= transferOrigin) {
        i=-1;
        advance=false;
      }
 else       if (U.compareAndSwapInt(this,TRANSFERINDEX,nextIndex,nextBound=(nextIndex > stride ? nextIndex - stride : 0))) {
        bound=nextBound;
        i=nextIndex - 1;
        advance=false;
      }
    }
    if (i < 0 || i >= n || i + n >= nextn) {
      if (finishing) {
        nextTable=null;
        table=nextTab;
        sizeCtl=(n << 1) - (n >>> 1);
        return;
      }
      for (int sc; ; ) {
        if (U.compareAndSwapInt(this,SIZECTL,sc=sizeCtl,++sc)) {
          if (sc != -1)           return;
          finishing=advance=true;
          i=n;
          break;
        }
      }
    }
 else     if ((f=tabAt(tab,i)) == null) {
      if (casTabAt(tab,i,null,fwd)) {
        setTabAt(nextTab,i,null);
        setTabAt(nextTab,i + n,null);
        advance=true;
      }
    }
 else     if ((fh=f.hash) == MOVED)     advance=true;
 else {
synchronized (f) {
        if (tabAt(tab,i) == f) {
          Node<K,V> ln, hn;
          if (fh >= 0) {
            int runBit=fh & n;
            Node<K,V> lastRun=f;
            for (Node<K,V> p=f.next; p != null; p=p.next) {
              int b=p.hash & n;
              if (b != runBit) {
                runBit=b;
                lastRun=p;
              }
            }
            if (runBit == 0) {
              ln=lastRun;
              hn=null;
            }
 else {
              hn=lastRun;
              ln=null;
            }
            for (Node<K,V> p=f; p != lastRun; p=p.next) {
              int ph=p.hash;
              K pk=p.key;
              V pv=p.val;
              if ((ph & n) == 0)               ln=new Node<K,V>(ph,pk,pv,ln);
 else               hn=new Node<K,V>(ph,pk,pv,hn);
            }
            setTabAt(nextTab,i,ln);
            setTabAt(nextTab,i + n,hn);
            setTabAt(tab,i,fwd);
            advance=true;
          }
 else           if (f instanceof TreeBin) {
            TreeBin<K,V> t=(TreeBin<K,V>)f;
            TreeNode<K,V> lo=null, loTail=null;
            TreeNode<K,V> hi=null, hiTail=null;
            int lc=0, hc=0;
            for (Node<K,V> e=t.first; e != null; e=e.next) {
              int h=e.hash;
              TreeNode<K,V> p=new TreeNode<K,V>(h,e.key,e.val,null,null);
              if ((h & n) == 0) {
                if ((p.prev=loTail) == null)                 lo=p;
 else                 loTail.next=p;
                loTail=p;
                ++lc;
              }
 else {
                if ((p.prev=hiTail) == null)                 hi=p;
 else                 hiTail.next=p;
                hiTail=p;
                ++hc;
              }
            }
            ln=(lc <= UNTREEIFY_THRESHOLD) ? untreeify(lo) : (hc != 0) ? new TreeBin<K,V>(lo) : t;
            hn=(hc <= UNTREEIFY_THRESHOLD) ? untreeify(hi) : (lc != 0) ? new TreeBin<K,V>(hi) : t;
            setTabAt(nextTab,i,ln);
            setTabAt(nextTab,i + n,hn);
            setTabAt(tab,i,fwd);
            advance=true;
          }
        }
      }
    }
  }
}
