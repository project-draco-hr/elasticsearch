{
  if (k == null || v == null || mf == null)   throw new NullPointerException();
  int h=spread(k.hashCode());
  V val=null;
  int delta=0;
  int len=0;
  for (Node<V>[] tab=table; ; ) {
    int i;
    Node<V> f;
    Object fk;
    V fv;
    if (tab == null)     tab=initTable();
 else     if ((f=tabAt(tab,i=(tab.length - 1) & h)) == null) {
      if (casTabAt(tab,i,null,new Node<V>(h,k,v,null))) {
        delta=1;
        val=v;
        break;
      }
    }
 else     if (f.hash < 0) {
      if ((fk=f.key) instanceof TreeBin) {
        TreeBin<V> t=(TreeBin<V>)fk;
        t.acquire(0);
        try {
          if (tabAt(tab,i) == f) {
            len=1;
            TreeNode<V> p=t.getTreeNode(h,k,t.root);
            val=(p == null) ? v : mf.apply(p.val,v);
            if (val != null) {
              if (p != null)               p.val=val;
 else {
                len=2;
                delta=1;
                t.putTreeNode(h,k,val);
              }
            }
 else             if (p != null) {
              delta=-1;
              t.deleteTreeNode(p);
            }
          }
        }
  finally {
          t.release(0);
        }
        if (len != 0)         break;
      }
 else       tab=(Node<V>[])fk;
    }
 else {
synchronized (f) {
        if (tabAt(tab,i) == f) {
          len=1;
          for (Node<V> e=f, pred=null; ; ++len) {
            Object ek;
            V ev;
            if (e.hash == h && (ev=e.val) != null && ((ek=e.key) == k || k.equals(ek))) {
              val=mf.apply(ev,v);
              if (val != null)               e.val=val;
 else {
                delta=-1;
                Node<V> en=e.next;
                if (pred != null)                 pred.next=en;
 else                 setTabAt(tab,i,en);
              }
              break;
            }
            pred=e;
            if ((e=e.next) == null) {
              val=v;
              pred.next=new Node<V>(h,k,val,null);
              delta=1;
              if (len >= TREE_THRESHOLD)               replaceWithTreeBin(tab,i,k);
              break;
            }
          }
        }
      }
      if (len != 0)       break;
    }
  }
  if (delta != 0)   addCount((long)delta,len);
  return val;
}
