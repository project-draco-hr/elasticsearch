{
  if (key == null || value == null || remappingFunction == null)   throw new NullPointerException();
  int h=spread(key.hashCode());
  V val=null;
  int delta=0;
  int binCount=0;
  for (Node<K,V>[] tab=table; ; ) {
    Node<K,V> f;
    int n, i, fh;
    if (tab == null || (n=tab.length) == 0)     tab=initTable();
 else     if ((f=tabAt(tab,i=(n - 1) & h)) == null) {
      if (casTabAt(tab,i,null,new Node<K,V>(h,key,value,null))) {
        delta=1;
        val=value;
        break;
      }
    }
 else     if ((fh=f.hash) == MOVED)     tab=helpTransfer(tab,f);
 else {
synchronized (f) {
        if (tabAt(tab,i) == f) {
          if (fh >= 0) {
            binCount=1;
            for (Node<K,V> e=f, pred=null; ; ++binCount) {
              K ek;
              if (e.hash == h && ((ek=e.key) == key || (ek != null && key.equals(ek)))) {
                val=remappingFunction.apply(e.val,value);
                if (val != null)                 e.val=val;
 else {
                  delta=-1;
                  Node<K,V> en=e.next;
                  if (pred != null)                   pred.next=en;
 else                   setTabAt(tab,i,en);
                }
                break;
              }
              pred=e;
              if ((e=e.next) == null) {
                delta=1;
                val=value;
                pred.next=new Node<K,V>(h,key,val,null);
                break;
              }
            }
          }
 else           if (f instanceof TreeBin) {
            binCount=2;
            TreeBin<K,V> t=(TreeBin<K,V>)f;
            TreeNode<K,V> r=t.root;
            TreeNode<K,V> p=(r == null) ? null : r.findTreeNode(h,key,null);
            val=(p == null) ? value : remappingFunction.apply(p.val,value);
            if (val != null) {
              if (p != null)               p.val=val;
 else {
                delta=1;
                t.putTreeVal(h,key,val);
              }
            }
 else             if (p != null) {
              delta=-1;
              if (t.removeTreeNode(p))               setTabAt(tab,i,untreeify(t.first));
            }
          }
        }
      }
      if (binCount != 0) {
        if (binCount >= TREEIFY_THRESHOLD)         treeifyBin(tab,i);
        break;
      }
    }
  }
  if (delta != 0)   addCount((long)delta,binCount);
  return val;
}
