{
  String childType=null;
  XContentParser.Token token;
  String currentFieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.VALUE_STRING) {
      if ("type".equals(currentFieldName)) {
        childType=parser.text();
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].",parser.getTokenLocation());
      }
    }
 else {
      throw new SearchParseException(context,"Unexpected token " + token + " in ["+ aggregationName+ "].",parser.getTokenLocation());
    }
  }
  if (childType == null) {
    throw new SearchParseException(context,"Missing [child_type] field for children aggregation [" + aggregationName + "]",parser.getTokenLocation());
  }
  ValuesSourceConfig<ValuesSource.Bytes.WithOrdinals.ParentChild> config=new ValuesSourceConfig<>(ValuesSource.Bytes.WithOrdinals.ParentChild.class);
  DocumentMapper childDocMapper=context.mapperService().documentMapper(childType);
  String parentType=null;
  Filter parentFilter=null;
  Filter childFilter=null;
  if (childDocMapper != null) {
    ParentFieldMapper parentFieldMapper=childDocMapper.parentFieldMapper();
    if (!parentFieldMapper.active()) {
      throw new SearchParseException(context,"[children] _parent field not configured",parser.getTokenLocation());
    }
    parentType=parentFieldMapper.type();
    DocumentMapper parentDocMapper=context.mapperService().documentMapper(parentType);
    if (parentDocMapper != null) {
      parentFilter=new QueryWrapperFilter(parentDocMapper.typeFilter());
      childFilter=new QueryWrapperFilter(childDocMapper.typeFilter());
      ParentChildIndexFieldData parentChildIndexFieldData=context.fieldData().getForField(parentFieldMapper);
      config.fieldContext(new FieldContext(parentFieldMapper.fieldType().names().indexName(),parentChildIndexFieldData,parentFieldMapper));
    }
 else {
      config.unmapped(true);
    }
  }
 else {
    config.unmapped(true);
  }
  return new ParentToChildrenAggregator.Factory(aggregationName,config,parentType,parentFilter,childFilter);
}
