{
  PercolateRequest percolateRequest=new PercolateRequest(request.param("index"),request.param("type"));
  percolateRequest.setListenerThreaded(false);
  percolateRequest.setSource(request.content(),request.contentUnsafe());
  percolateRequest.setListenerThreaded(false);
  percolateRequest.setOperationThreaded(true);
  percolateRequest.setPreferLocal(request.paramAsBoolean("prefer_local",percolateRequest.isPreferLocal()));
  client.percolate(percolateRequest,new ActionListener<PercolateResponse>(){
    @Override public void onResponse(    PercolateResponse response){
      try {
        XContentBuilder builder=RestXContentBuilder.restContentBuilder(request);
        builder.startObject();
        builder.field(Fields.OK,true);
        builder.startArray(Fields.MATCHES);
        for (        String match : response) {
          builder.value(match);
        }
        builder.endArray();
        builder.endObject();
        channel.sendResponse(new XContentRestResponse(request,OK,builder));
      }
 catch (      Exception e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
