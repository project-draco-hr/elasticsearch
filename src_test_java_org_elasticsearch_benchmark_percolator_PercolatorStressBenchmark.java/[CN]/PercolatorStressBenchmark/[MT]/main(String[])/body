{
  Settings settings=settingsBuilder().put("cluster.routing.schedule",200,TimeUnit.MILLISECONDS).put("gateway.type","none").put(SETTING_NUMBER_OF_SHARDS,4).put(SETTING_NUMBER_OF_REPLICAS,0).build();
  Node[] nodes=new Node[1];
  for (int i=0; i < nodes.length; i++) {
    nodes[i]=nodeBuilder().settings(settingsBuilder().put(settings).put("name","node" + i)).node();
  }
  Node clientNode=nodeBuilder().settings(settingsBuilder().put(settings).put("name","client")).client(true).node();
  Client client=clientNode.client();
  client.admin().indices().create(createIndexRequest("test")).actionGet();
  ClusterHealthResponse healthResponse=client.admin().cluster().prepareHealth("test").setWaitForGreenStatus().execute().actionGet();
  if (healthResponse.isTimedOut()) {
    System.err.println("Quiting, because cluster health requested timed out...");
    return;
  }
 else   if (healthResponse.getStatus() != ClusterHealthStatus.GREEN) {
    System.err.println("Quiting, because cluster state isn't green...");
    return;
  }
  int COUNT=200000;
  int QUERIES=100;
  int TERM_QUERIES=QUERIES / 2;
  int RANGE_QUERIES=QUERIES - TERM_QUERIES;
  client.prepareIndex("test","type1","1").setSource(jsonBuilder().startObject().field("numeric1",1).endObject()).execute().actionGet();
  int i=0;
  for (; i < TERM_QUERIES; i++) {
    client.prepareIndex("test","_percolator",Integer.toString(i)).setSource(jsonBuilder().startObject().field("query",termQuery("name","value")).endObject()).execute().actionGet();
  }
  int[] numbers=new int[RANGE_QUERIES];
  for (; i < QUERIES; i++) {
    client.prepareIndex("test","_percolator",Integer.toString(i)).setSource(jsonBuilder().startObject().field("query",rangeQuery("numeric1").from(i).to(i)).endObject()).execute().actionGet();
    numbers[i - TERM_QUERIES]=i;
  }
  StopWatch stopWatch=new StopWatch().start();
  System.out.println("Percolating [" + COUNT + "] ...");
  for (i=1; i <= COUNT; i++) {
    XContentBuilder source;
    int expectedMatches;
    if (i % 2 == 0) {
      source=source(Integer.toString(i),"value");
      expectedMatches=TERM_QUERIES;
    }
 else {
      int number=numbers[i % RANGE_QUERIES];
      source=source(Integer.toString(i),number);
      expectedMatches=1;
    }
    PercolateResponse percolate=client.preparePercolate().setIndices("test").setDocumentType("type1").setSource(source).execute().actionGet();
    if (percolate.getMatches().length != expectedMatches) {
      System.err.println("No matching number of queries");
    }
    if ((i % 10000) == 0) {
      System.out.println("Percolated " + i + " took "+ stopWatch.stop().lastTaskTime());
      stopWatch.start();
    }
  }
  System.out.println("Percolation took " + stopWatch.totalTime() + ", TPS "+ (((double)COUNT) / stopWatch.totalTime().secondsFrac()));
  clientNode.close();
  for (  Node node : nodes) {
    node.close();
  }
}
