{
  ShardsAllocation strategy=new ShardsAllocation(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries",10).build());
  logger.info("Building initial routing table");
  MetaData metaData=newMetaDataBuilder().put(newIndexMetaDataBuilder("test").numberOfShards(1).numberOfReplicas(0)).build();
  RoutingTable routingTable=routingTable().add(indexRoutingTable("test").initializeEmpty(metaData.index("test"))).build();
  ClusterState clusterState=newClusterStateBuilder().metaData(metaData).routingTable(routingTable).build();
  assertThat(routingTable.index("test").shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).shards().get(0).state(),equalTo(UNASSIGNED));
  assertThat(routingTable.index("test").shard(0).shards().get(0).currentNodeId(),nullValue());
  logger.info("Adding one node and performing rerouting");
  clusterState=newClusterStateBuilder().state(clusterState).nodes(newNodesBuilder().put(newNode("node1"))).build();
  RoutingTable prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState);
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(routingTable.index("test").shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).shards().get(0).state(),equalTo(INITIALIZING));
  assertThat(routingTable.index("test").shard(0).shards().get(0).currentNodeId(),equalTo("node1"));
  logger.info("Rerouting again, nothing should change");
  prevRoutingTable=routingTable;
  clusterState=newClusterStateBuilder().state(clusterState).build();
  routingTable=strategy.reroute(clusterState);
  assertThat(routingTable == prevRoutingTable,equalTo(true));
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  logger.info("Marking the shard as started");
  RoutingNodes routingNodes=clusterState.routingNodes();
  prevRoutingTable=routingTable;
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.node("node1").shardsWithState(INITIALIZING));
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(routingTable != prevRoutingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).shards().get(0).state(),equalTo(STARTED));
  assertThat(routingTable.index("test").shard(0).shards().get(0).currentNodeId(),equalTo("node1"));
  logger.info("Starting another node and making sure nothing changed");
  clusterState=newClusterStateBuilder().state(clusterState).nodes(newNodesBuilder().putAll(clusterState.nodes()).put(newNode("node2"))).build();
  prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState);
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(routingTable == prevRoutingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).shards().get(0).state(),equalTo(STARTED));
  assertThat(routingTable.index("test").shard(0).shards().get(0).currentNodeId(),equalTo("node1"));
  logger.info("Killing node1 where the shard is, checking the shard is relocated");
  clusterState=newClusterStateBuilder().state(clusterState).nodes(newNodesBuilder().putAll(clusterState.nodes()).remove("node1")).build();
  prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState);
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(routingTable != prevRoutingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).shards().get(0).state(),equalTo(INITIALIZING));
  assertThat(routingTable.index("test").shard(0).shards().get(0).currentNodeId(),equalTo("node2"));
  logger.info("Start another node, make sure that things remain the same (shard is in node2 and initializing)");
  clusterState=newClusterStateBuilder().state(clusterState).nodes(newNodesBuilder().putAll(clusterState.nodes()).put(newNode("node3"))).build();
  prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState);
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(routingTable == prevRoutingTable,equalTo(true));
  logger.info("Start the shard on node 2");
  routingNodes=clusterState.routingNodes();
  prevRoutingTable=routingTable;
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.node("node2").shardsWithState(INITIALIZING));
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(routingTable != prevRoutingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).shards().get(0).state(),equalTo(STARTED));
  assertThat(routingTable.index("test").shard(0).shards().get(0).currentNodeId(),equalTo("node2"));
}
