{
  AnalyzingCompletionLookupProviderV1 providerV1=new AnalyzingCompletionLookupProviderV1(true,false,true,true);
  AnalyzingCompletionLookupProvider currentProvider=new AnalyzingCompletionLookupProvider(true,false,true,true);
  List<Completion090PostingsFormat.CompletionLookupProvider> providers=Lists.newArrayList(providerV1,currentProvider);
  Completion090PostingsFormat.CompletionLookupProvider randomProvider=providers.get(getRandom().nextInt(providers.size()));
  RAMDirectory dir=new RAMDirectory();
  writeData(dir,randomProvider);
  IndexInput input=dir.openInput("foo.txt",IOContext.DEFAULT);
  LookupFactory load=currentProvider.load(input);
  PostingsFormat format=PostingsFormat.forName(Lucene.LATEST_POSTINGS_FORMAT);
  NamedAnalyzer analyzer=new NamedAnalyzer("foo",new StandardAnalyzer());
  Lookup lookup=load.getLookup(new CompletionFieldMapper(new Names("foo"),analyzer,analyzer,format,null,true,true,true,Integer.MAX_VALUE,AbstractFieldMapper.MultiFields.empty(),null,ContextMapping.EMPTY_MAPPING),new CompletionSuggestionContext(null));
  List<LookupResult> result=lookup.lookup("ge",false,10);
  assertThat(result.get(0).key.toString(),equalTo("Generator - Foo Fighters"));
  assertThat(result.get(0).payload.utf8ToString(),equalTo("id:10"));
  dir.close();
}
