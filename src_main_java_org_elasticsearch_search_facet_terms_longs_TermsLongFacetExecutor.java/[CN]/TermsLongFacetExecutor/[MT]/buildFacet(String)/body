{
  if (facets.isEmpty()) {
    cacheRecycler.pushLongIntMap(facets);
    return new InternalLongTermsFacet(facetName,comparatorType,size,ImmutableList.<InternalLongTermsFacet.LongEntry>of(),missing,total);
  }
 else {
    if (size < EntryPriorityQueue.LIMIT) {
      EntryPriorityQueue ordered=new EntryPriorityQueue(size,comparatorType.comparator());
      for (TLongIntIterator it=facets.iterator(); it.hasNext(); ) {
        it.advance();
        ordered.insertWithOverflow(new InternalLongTermsFacet.LongEntry(it.key(),it.value()));
      }
      InternalLongTermsFacet.LongEntry[] list=new InternalLongTermsFacet.LongEntry[ordered.size()];
      for (int i=ordered.size() - 1; i >= 0; i--) {
        list[i]=(InternalLongTermsFacet.LongEntry)ordered.pop();
      }
      cacheRecycler.pushLongIntMap(facets);
      return new InternalLongTermsFacet(facetName,comparatorType,size,Arrays.asList(list),missing,total);
    }
 else {
      BoundedTreeSet<InternalLongTermsFacet.LongEntry> ordered=new BoundedTreeSet<InternalLongTermsFacet.LongEntry>(comparatorType.comparator(),size);
      for (TLongIntIterator it=facets.iterator(); it.hasNext(); ) {
        it.advance();
        ordered.add(new InternalLongTermsFacet.LongEntry(it.key(),it.value()));
      }
      cacheRecycler.pushLongIntMap(facets);
      return new InternalLongTermsFacet(facetName,comparatorType,size,ordered,missing,total);
    }
  }
}
