{
  byte[] content=null;
  String contentType=null;
  int indexedChars=defaultIndexedChars;
  boolean langDetect=defaultLangDetect;
  String name=null;
  String language=null;
  XContentParser parser=context.parser();
  XContentParser.Token token=parser.currentToken();
  if (token == XContentParser.Token.VALUE_STRING) {
    content=parser.binaryValue();
  }
 else {
    String currentFieldName=null;
    while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
      if (token == XContentParser.Token.FIELD_NAME) {
        currentFieldName=parser.currentName();
      }
 else       if (token == XContentParser.Token.VALUE_STRING) {
        if ("_content".equals(currentFieldName)) {
          content=parser.binaryValue();
        }
 else         if ("_content_type".equals(currentFieldName)) {
          contentType=parser.text();
        }
 else         if ("_name".equals(currentFieldName)) {
          name=parser.text();
        }
 else         if ("_language".equals(currentFieldName)) {
          language=parser.text();
        }
      }
 else       if (token == XContentParser.Token.VALUE_NUMBER) {
        if ("_indexed_chars".equals(currentFieldName) || "_indexedChars".equals(currentFieldName)) {
          indexedChars=parser.intValue();
        }
      }
 else       if (token == XContentParser.Token.VALUE_BOOLEAN) {
        if ("_detect_language".equals(currentFieldName) || "_detectLanguage".equals(currentFieldName)) {
          langDetect=parser.booleanValue();
        }
      }
    }
  }
  if (content == null) {
    throw new MapperParsingException("No content is provided.");
  }
  Metadata metadata=new Metadata();
  if (contentType != null) {
    metadata.add(Metadata.CONTENT_TYPE,contentType);
  }
  if (name != null) {
    metadata.add(Metadata.RESOURCE_NAME_KEY,name);
  }
  String parsedContent;
  try {
    parsedContent=parseWithTika(content,metadata,indexedChars);
  }
 catch (  Throwable e) {
    if (!ignoreErrors) {
      logger.trace("exception caught",e);
      throw new MapperParsingException("Failed to extract [" + indexedChars + "] characters of text for ["+ name+ "] : "+ e.getMessage(),e);
    }
 else {
      logger.debug("Failed to extract [{}] characters of text for [{}]: [{}]",indexedChars,name,e.getMessage());
      logger.trace("exception caught",e);
    }
    return null;
  }
  context=context.createExternalValueContext(parsedContent);
  contentMapper.parse(context);
  if (langDetect) {
    try {
      if (language != null) {
        metadata.add(Metadata.CONTENT_LANGUAGE,language);
      }
 else {
        LanguageIdentifier identifier=new LanguageIdentifier(parsedContent);
        language=identifier.getLanguage();
      }
      context=context.createExternalValueContext(language);
      languageMapper.parse(context);
    }
 catch (    Throwable t) {
      logger.debug("Cannot detect language: [{}]",t.getMessage());
    }
  }
  if (name != null) {
    try {
      context=context.createExternalValueContext(name);
      nameMapper.parse(context);
    }
 catch (    MapperParsingException e) {
      if (!ignoreErrors)       throw e;
      if (logger.isDebugEnabled())       logger.debug("Ignoring MapperParsingException catch while parsing name: [{}]",e.getMessage());
    }
  }
  if (metadata.get(Metadata.DATE) != null) {
    try {
      context=context.createExternalValueContext(metadata.get(Metadata.DATE));
      dateMapper.parse(context);
    }
 catch (    MapperParsingException e) {
      if (!ignoreErrors)       throw e;
      if (logger.isDebugEnabled())       logger.debug("Ignoring MapperParsingException catch while parsing date: [{}]: [{}]",e.getMessage(),context.externalValue());
    }
  }
  if (metadata.get(Metadata.TITLE) != null) {
    try {
      context=context.createExternalValueContext(metadata.get(Metadata.TITLE));
      titleMapper.parse(context);
    }
 catch (    MapperParsingException e) {
      if (!ignoreErrors)       throw e;
      if (logger.isDebugEnabled())       logger.debug("Ignoring MapperParsingException catch while parsing title: [{}]: [{}]",e.getMessage(),context.externalValue());
    }
  }
  if (metadata.get(Metadata.AUTHOR) != null) {
    try {
      context=context.createExternalValueContext(metadata.get(Metadata.AUTHOR));
      authorMapper.parse(context);
    }
 catch (    MapperParsingException e) {
      if (!ignoreErrors)       throw e;
      if (logger.isDebugEnabled())       logger.debug("Ignoring MapperParsingException catch while parsing author: [{}]: [{}]",e.getMessage(),context.externalValue());
    }
  }
  if (metadata.get(Metadata.KEYWORDS) != null) {
    try {
      context=context.createExternalValueContext(metadata.get(Metadata.KEYWORDS));
      keywordsMapper.parse(context);
    }
 catch (    MapperParsingException e) {
      if (!ignoreErrors)       throw e;
      if (logger.isDebugEnabled())       logger.debug("Ignoring MapperParsingException catch while parsing keywords: [{}]: [{}]",e.getMessage(),context.externalValue());
    }
  }
  if (contentType == null) {
    contentType=metadata.get(Metadata.CONTENT_TYPE);
  }
  if (contentType != null) {
    try {
      context=context.createExternalValueContext(contentType);
      contentTypeMapper.parse(context);
    }
 catch (    MapperParsingException e) {
      if (!ignoreErrors)       throw e;
      if (logger.isDebugEnabled())       logger.debug("Ignoring MapperParsingException catch while parsing content_type: [{}]: [{}]",e.getMessage(),context.externalValue());
    }
  }
  int length=content.length;
  if (metadata.get(Metadata.CONTENT_LENGTH) != null) {
    length=Integer.parseInt(metadata.get(Metadata.CONTENT_LENGTH));
  }
  try {
    context=context.createExternalValueContext(length);
    contentLengthMapper.parse(context);
  }
 catch (  MapperParsingException e) {
    if (!ignoreErrors)     throw e;
    if (logger.isDebugEnabled())     logger.debug("Ignoring MapperParsingException catch while parsing content_length: [{}]: [{}]",e.getMessage(),context.externalValue());
  }
  return null;
}
