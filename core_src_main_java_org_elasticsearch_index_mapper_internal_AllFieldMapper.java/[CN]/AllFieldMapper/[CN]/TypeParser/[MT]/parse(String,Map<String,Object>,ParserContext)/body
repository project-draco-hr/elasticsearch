{
  Builder builder=new Builder(parserContext.mapperService().fullName(NAME));
  builder.fieldType().setIndexAnalyzer(parserContext.analysisService().defaultIndexAnalyzer());
  builder.fieldType().setSearchAnalyzer(parserContext.analysisService().defaultSearchAnalyzer());
  builder.fieldType().setSearchQuoteAnalyzer(parserContext.analysisService().defaultSearchQuoteAnalyzer());
  Object docValues=node.get("doc_values");
  if (docValues != null && lenientNodeBooleanValue(docValues)) {
    throw new MapperParsingException("Field [" + name + "] is always tokenized and cannot have doc values");
  }
  Object fielddata=node.get("fielddata");
  if (fielddata != null) {
    Map<String,Object> fielddataMap=nodeMapValue(fielddata,"fielddata");
    Object format=fielddataMap.get("format");
    if ("doc_values".equals(format)) {
      throw new MapperParsingException("Field [" + name + "] is always tokenized and cannot have doc values");
    }
  }
  parseTextField(builder,builder.name,node,parserContext);
  for (Iterator<Map.Entry<String,Object>> iterator=node.entrySet().iterator(); iterator.hasNext(); ) {
    Map.Entry<String,Object> entry=iterator.next();
    String fieldName=entry.getKey();
    Object fieldNode=entry.getValue();
    if (fieldName.equals("enabled")) {
      builder.enabled(lenientNodeBooleanValue(fieldNode) ? EnabledAttributeMapper.ENABLED : EnabledAttributeMapper.DISABLED);
      iterator.remove();
    }
  }
  return builder;
}
