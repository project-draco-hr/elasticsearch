{
  Settings settings=settingsBuilder().put("discovery.type","local").build();
  internalCluster().startNode(settings);
  ClusterService clusterService1=internalCluster().getInstance(ClusterService.class);
  final CountDownLatch block=new CountDownLatch(1);
  clusterService1.submitStateUpdateTask("test1",new ClusterStateUpdateTask(){
    @Override public ClusterState execute(    ClusterState currentState){
      try {
        block.await();
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
      return currentState;
    }
    @Override public void onFailure(    String source,    Throwable t){
      throw new RuntimeException(t);
    }
  }
);
  final CountDownLatch timedOut=new CountDownLatch(1);
  final AtomicBoolean executeCalled=new AtomicBoolean();
  clusterService1.submitStateUpdateTask("test2",new TimeoutClusterStateUpdateTask(){
    @Override public TimeValue timeout(){
      return TimeValue.timeValueMillis(2);
    }
    @Override public void onFailure(    String source,    Throwable t){
      timedOut.countDown();
    }
    @Override public ClusterState execute(    ClusterState currentState){
      executeCalled.set(true);
      return currentState;
    }
    @Override public void clusterStateProcessed(    String source,    ClusterState oldState,    ClusterState newState){
    }
  }
);
  timedOut.await();
  block.countDown();
  final CountDownLatch allProcessed=new CountDownLatch(1);
  clusterService1.submitStateUpdateTask("test3",new ClusterStateUpdateTask(){
    @Override public void onFailure(    String source,    Throwable t){
      throw new RuntimeException(t);
    }
    @Override public ClusterState execute(    ClusterState currentState){
      allProcessed.countDown();
      return currentState;
    }
  }
);
  allProcessed.await();
  assertThat(executeCalled.get(),equalTo(false));
}
