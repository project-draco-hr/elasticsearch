{
  Settings settings=settingsBuilder().put("discovery.type","local").build();
  internalCluster().startNode(settings);
  ClusterService clusterService=internalCluster().getInstance(ClusterService.class);
  BlockingTask block=new BlockingTask(Priority.IMMEDIATE);
  clusterService.submitStateUpdateTask("test",block);
  int taskCount=randomIntBetween(5,20);
  Priority[] priorities=Priority.values();
  List<PrioritiezedTask> tasks=new ArrayList<>(taskCount);
  CountDownLatch latch=new CountDownLatch(taskCount);
  for (int i=0; i < taskCount; i++) {
    Priority priority=priorities[randomIntBetween(0,priorities.length - 1)];
    clusterService.submitStateUpdateTask("test",new PrioritiezedTask(priority,latch,tasks));
  }
  block.release();
  latch.await();
  Priority prevPriority=null;
  for (  PrioritiezedTask task : tasks) {
    if (prevPriority == null) {
      prevPriority=task.priority();
    }
 else {
      assertThat(task.priority().sameOrAfter(prevPriority),is(true));
    }
  }
}
