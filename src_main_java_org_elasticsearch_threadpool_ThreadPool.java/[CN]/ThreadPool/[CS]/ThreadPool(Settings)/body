{
  super(settings);
  Map<String,Settings> groupSettings=settings.getGroups("threadpool");
  Map<String,ExecutorHolder> executors=Maps.newHashMap();
  executors.put(Names.GENERIC,build(Names.GENERIC,"cached",groupSettings.get(Names.GENERIC),settingsBuilder().put("keep_alive","30s").build()));
  executors.put(Names.INDEX,build(Names.INDEX,"cached",groupSettings.get(Names.INDEX),ImmutableSettings.Builder.EMPTY_SETTINGS));
  executors.put(Names.BULK,build(Names.BULK,"cached",groupSettings.get(Names.BULK),ImmutableSettings.Builder.EMPTY_SETTINGS));
  executors.put(Names.SEARCH,build(Names.SEARCH,"cached",groupSettings.get(Names.SEARCH),ImmutableSettings.Builder.EMPTY_SETTINGS));
  executors.put(Names.PERCOLATE,build(Names.PERCOLATE,"cached",groupSettings.get(Names.PERCOLATE),ImmutableSettings.Builder.EMPTY_SETTINGS));
  executors.put(Names.MANAGEMENT,build(Names.MANAGEMENT,"scaling",groupSettings.get(Names.MANAGEMENT),settingsBuilder().put("keep_alive","5m").put("size",5).build()));
  executors.put(Names.FLUSH,build(Names.FLUSH,"scaling",groupSettings.get(Names.FLUSH),settingsBuilder().put("keep_alive","5m").put("size",10).build()));
  executors.put(Names.MERGE,build(Names.MERGE,"scaling",groupSettings.get(Names.MERGE),settingsBuilder().put("keep_alive","5m").put("size",20).build()));
  executors.put(Names.REFRESH,build(Names.REFRESH,"cached",groupSettings.get(Names.REFRESH),settingsBuilder().put("keep_alive","1m").build()));
  executors.put(Names.SNAPSHOT,build(Names.SNAPSHOT,"scaling",groupSettings.get(Names.SNAPSHOT),settingsBuilder().put("keep_alive","5m").put("size",5).build()));
  executors.put(Names.SAME,new ExecutorHolder(MoreExecutors.sameThreadExecutor(),new Info(Names.SAME,"same")));
  this.executors=ImmutableMap.copyOf(executors);
  this.scheduler=(ScheduledThreadPoolExecutor)Executors.newScheduledThreadPool(1,EsExecutors.daemonThreadFactory(settings,"[scheduler]"));
  this.scheduler.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
  this.scheduler.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
  TimeValue estimatedTimeInterval=componentSettings.getAsTime("estimated_time_interval",TimeValue.timeValueMillis(200));
  this.estimatedTimeThread=new EstimatedTimeThread(EsExecutors.threadName(settings,"[timer]"),estimatedTimeInterval.millis());
  this.estimatedTimeThread.start();
}
