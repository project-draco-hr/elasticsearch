{
  if (settings == null) {
    settings=ImmutableSettings.Builder.EMPTY_SETTINGS;
  }
  String type=settings.get("type",defaultType);
  ThreadFactory threadFactory=EsExecutors.daemonThreadFactory(settings,"[" + name + "]");
  if ("same".equals(type)) {
    logger.debug("creating thread_pool [{}], type [{}]",name,type);
    return MoreExecutors.sameThreadExecutor();
  }
 else   if ("cached".equals(type)) {
    TimeValue keepAlive=settings.getAsTime("keep_alive",defaultSettings.getAsTime("keep_alive",timeValueMinutes(5)));
    logger.debug("creating thread_pool [{}], type [{}], keep_alive [{}]",name,type,keepAlive);
    return new ThreadPoolExecutor(0,Integer.MAX_VALUE,keepAlive.millis(),TimeUnit.MILLISECONDS,new SynchronousQueue<Runnable>(),threadFactory);
  }
 else   if ("fixed".equals(type)) {
    int size=settings.getAsInt("size",defaultSettings.getAsInt("size",Runtime.getRuntime().availableProcessors() * 5));
    int queueSize=settings.getAsInt("queue_size",defaultSettings.getAsInt("queue_size",-1));
    RejectedExecutionHandler rejectedExecutionHandler;
    String rejectSetting=settings.get("reject_policy",defaultSettings.get("reject_policy","abort"));
    if ("abort".equals(rejectSetting)) {
      rejectedExecutionHandler=new ThreadPoolExecutor.AbortPolicy();
    }
 else     if ("caller".equals(rejectSetting)) {
      rejectedExecutionHandler=new ThreadPoolExecutor.CallerRunsPolicy();
    }
 else {
      throw new ElasticSearchIllegalArgumentException("reject_policy [" + rejectSetting + "] not valid for ["+ name+ "] thread pool");
    }
    logger.debug("creating thread_pool [{}], type [{}], size [{}], queue_size [{}], reject_policy [{}]",name,type,size,queueSize,rejectSetting);
    return new ThreadPoolExecutor(size,size,0L,TimeUnit.MILLISECONDS,queueSize <= 0 ? new LinkedTransferQueue<Runnable>() : new ArrayBlockingQueue<Runnable>(queueSize),threadFactory,rejectedExecutionHandler);
  }
 else   if ("scaling".equals(type)) {
    TimeValue keepAlive=settings.getAsTime("keep_alive",defaultSettings.getAsTime("keep_alive",timeValueMinutes(5)));
    int min=settings.getAsInt("min",defaultSettings.getAsInt("min",1));
    int size=settings.getAsInt("size",defaultSettings.getAsInt("size",Runtime.getRuntime().availableProcessors() * 5));
    logger.debug("creating thread_pool [{}], type [{}], min [{}], size [{}], keep_alive [{}]",name,type,min,size,keepAlive);
    return DynamicExecutors.newScalingThreadPool(min,size,keepAlive.millis(),threadFactory);
  }
 else   if ("blocking".equals(type)) {
    TimeValue keepAlive=settings.getAsTime("keep_alive",defaultSettings.getAsTime("keep_alive",timeValueMinutes(5)));
    int min=settings.getAsInt("min",defaultSettings.getAsInt("min",1));
    int size=settings.getAsInt("size",defaultSettings.getAsInt("size",Runtime.getRuntime().availableProcessors() * 5));
    SizeValue capacity=settings.getAsSize("queue_size",defaultSettings.getAsSize("queue_size",new SizeValue(1000)));
    TimeValue waitTime=settings.getAsTime("wait_time",defaultSettings.getAsTime("wait_time",timeValueSeconds(60)));
    logger.debug("creating thread_pool [{}], type [{}], min [{}], size [{}], queue_size [{}], keep_alive [{}], wait_time [{}]",name,type,min,size,capacity.singles(),keepAlive,waitTime);
    return DynamicExecutors.newBlockingThreadPool(min,size,keepAlive.millis(),(int)capacity.singles(),waitTime.millis(),threadFactory);
  }
  throw new ElasticSearchIllegalArgumentException("No type found [" + type + "], for ["+ name+ "]");
}
