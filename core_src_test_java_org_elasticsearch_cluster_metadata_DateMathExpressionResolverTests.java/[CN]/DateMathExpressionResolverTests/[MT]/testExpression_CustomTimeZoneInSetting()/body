{
  DateTimeZone timeZone;
  int hoursOffset;
  int minutesOffset=0;
  if (randomBoolean()) {
    hoursOffset=randomIntBetween(-12,14);
    timeZone=DateTimeZone.forOffsetHours(hoursOffset);
  }
 else {
    hoursOffset=randomIntBetween(-11,13);
    minutesOffset=randomIntBetween(0,59);
    timeZone=DateTimeZone.forOffsetHoursMinutes(hoursOffset,minutesOffset);
  }
  DateTime now;
  if (hoursOffset >= 0) {
    now=DateTime.now(UTC).plusHours(hoursOffset).plusMinutes(minutesOffset).withHourOfDay(0).withMinuteOfHour(0).withSecondOfMinute(0);
  }
 else {
    now=DateTime.now(UTC).withHourOfDay(0).withMinuteOfHour(0).withSecondOfMinute(0);
  }
  Settings settings=Settings.builder().put("date_math_expression_resolver.default_time_zone",timeZone.getID()).build();
  DateMathExpressionResolver expressionResolver=new DateMathExpressionResolver(settings);
  Context context=new Context(this.context.getState(),this.context.getOptions(),now.getMillis());
  List<String> results=expressionResolver.resolve(context,Arrays.asList("<.marvel-{now/d{YYYY.MM.dd}}>"));
  assertThat(results.size(),equalTo(1));
  logger.info("timezone: [{}], now [{}], name: [{}]",timeZone,now,results.get(0));
  assertThat(results.get(0),equalTo(".marvel-" + DateTimeFormat.forPattern("YYYY.MM.dd").print(now.withZone(timeZone))));
}
