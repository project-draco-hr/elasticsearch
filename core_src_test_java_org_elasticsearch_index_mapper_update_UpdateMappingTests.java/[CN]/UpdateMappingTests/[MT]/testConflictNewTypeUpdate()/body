{
  XContentBuilder mapping1=XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("foo").field("type","long").endObject().endObject().endObject().endObject();
  XContentBuilder mapping2=XContentFactory.jsonBuilder().startObject().startObject("type2").endObject().endObject();
  MapperService mapperService=createIndex("test",Settings.builder().build()).mapperService();
  mapperService.merge("type1",new CompressedXContent(mapping1.string()),MapperService.MergeReason.MAPPING_UPDATE,false);
  mapperService.merge("type2",new CompressedXContent(mapping2.string()),MapperService.MergeReason.MAPPING_UPDATE,false);
  XContentBuilder update=XContentFactory.jsonBuilder().startObject().startObject("type2").startObject("properties").startObject("foo").field("type","double").endObject().endObject().endObject().endObject();
  try {
    mapperService.merge("type2",new CompressedXContent(update.string()),MapperService.MergeReason.MAPPING_UPDATE,false);
    fail();
  }
 catch (  IllegalArgumentException e) {
    assertTrue(e.getMessage(),e.getMessage().contains("mapper [foo] cannot be changed from type [long] to [double]"));
  }
  try {
    mapperService.merge("type2",new CompressedXContent(update.string()),MapperService.MergeReason.MAPPING_UPDATE,false);
    fail();
  }
 catch (  IllegalArgumentException e) {
    assertTrue(e.getMessage(),e.getMessage().contains("mapper [foo] cannot be changed from type [long] to [double]"));
  }
  assertThat(((FieldMapper)mapperService.documentMapper("type1").mapping().root().getMapper("foo")).fieldType().typeName(),equalTo("long"));
  assertNotNull(mapperService.documentMapper("type2"));
  assertNull(mapperService.documentMapper("type2").mapping().root().getMapper("foo"));
}
