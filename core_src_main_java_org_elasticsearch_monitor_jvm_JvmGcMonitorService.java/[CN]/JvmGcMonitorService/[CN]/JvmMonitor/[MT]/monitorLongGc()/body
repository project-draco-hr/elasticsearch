{
  seq++;
  final long currentTime=now();
  JvmStats currentJvmStats=jvmStats();
  final long elapsed=TimeUnit.NANOSECONDS.toMillis(currentTime - lastTime);
  for (int i=0; i < currentJvmStats.getGc().getCollectors().length; i++) {
    GarbageCollector gc=currentJvmStats.getGc().getCollectors()[i];
    GarbageCollector prevGc=lastJvmStats.getGc().getCollectors()[i];
    long collections=gc.getCollectionCount() - prevGc.getCollectionCount();
    if (collections == 0) {
      continue;
    }
    long collectionTime=gc.getCollectionTime().millis() - prevGc.getCollectionTime().millis();
    if (collectionTime == 0) {
      continue;
    }
    GcThreshold gcThreshold=gcThresholds.get(gc.getName());
    if (gcThreshold == null) {
      gcThreshold=gcThresholds.get("default");
    }
    long avgCollectionTime=collectionTime / collections;
    Threshold threshold=null;
    if (avgCollectionTime > gcThreshold.warnThreshold) {
      threshold=Threshold.WARN;
    }
 else     if (avgCollectionTime > gcThreshold.infoThreshold) {
      threshold=Threshold.INFO;
    }
 else     if (avgCollectionTime > gcThreshold.debugThreshold) {
      threshold=Threshold.DEBUG;
    }
    if (threshold != null) {
      onSlowGc(threshold,seq,new SlowGcEvent(gc,collections,TimeValue.timeValueMillis(collectionTime),elapsed,lastJvmStats,currentJvmStats,JvmInfo.jvmInfo().getMem().getHeapMax()));
    }
  }
  lastTime=currentTime;
  lastJvmStats=currentJvmStats;
}
