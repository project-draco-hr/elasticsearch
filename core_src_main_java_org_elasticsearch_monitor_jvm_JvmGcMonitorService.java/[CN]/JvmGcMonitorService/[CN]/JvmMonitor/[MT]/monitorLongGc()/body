{
  seq++;
  JvmStats currentJvmStats=jvmStats();
  for (int i=0; i < currentJvmStats.getGc().getCollectors().length; i++) {
    GarbageCollector gc=currentJvmStats.getGc().getCollectors()[i];
    GarbageCollector prevGc=lastJvmStats.gc.collectors[i];
    long collections=gc.collectionCount - prevGc.collectionCount;
    if (collections == 0) {
      continue;
    }
    long collectionTime=gc.collectionTime - prevGc.collectionTime;
    if (collectionTime == 0) {
      continue;
    }
    GcThreshold gcThreshold=gcThresholds.get(gc.getName());
    if (gcThreshold == null) {
      gcThreshold=gcThresholds.get("default");
    }
    long avgCollectionTime=collectionTime / collections;
    if (avgCollectionTime > gcThreshold.warnThreshold) {
      logger.warn("[gc][{}][{}][{}] duration [{}], collections [{}]/[{}], total [{}]/[{}], memory [{}]->[{}]/[{}], all_pools {}",gc.getName(),seq,gc.getCollectionCount(),TimeValue.timeValueMillis(collectionTime),collections,TimeValue.timeValueMillis(currentJvmStats.getTimestamp() - lastJvmStats.getTimestamp()),TimeValue.timeValueMillis(collectionTime),gc.getCollectionTime(),lastJvmStats.getMem().getHeapUsed(),currentJvmStats.getMem().getHeapUsed(),JvmInfo.jvmInfo().getMem().getHeapMax(),buildPools(lastJvmStats,currentJvmStats));
    }
 else     if (avgCollectionTime > gcThreshold.infoThreshold) {
      logger.info("[gc][{}][{}][{}] duration [{}], collections [{}]/[{}], total [{}]/[{}], memory [{}]->[{}]/[{}], all_pools {}",gc.getName(),seq,gc.getCollectionCount(),TimeValue.timeValueMillis(collectionTime),collections,TimeValue.timeValueMillis(currentJvmStats.getTimestamp() - lastJvmStats.getTimestamp()),TimeValue.timeValueMillis(collectionTime),gc.getCollectionTime(),lastJvmStats.getMem().getHeapUsed(),currentJvmStats.getMem().getHeapUsed(),JvmInfo.jvmInfo().getMem().getHeapMax(),buildPools(lastJvmStats,currentJvmStats));
    }
 else     if (avgCollectionTime > gcThreshold.debugThreshold && logger.isDebugEnabled()) {
      logger.debug("[gc][{}][{}][{}] duration [{}], collections [{}]/[{}], total [{}]/[{}], memory [{}]->[{}]/[{}], all_pools {}",gc.getName(),seq,gc.getCollectionCount(),TimeValue.timeValueMillis(collectionTime),collections,TimeValue.timeValueMillis(currentJvmStats.getTimestamp() - lastJvmStats.getTimestamp()),TimeValue.timeValueMillis(collectionTime),gc.getCollectionTime(),lastJvmStats.getMem().getHeapUsed(),currentJvmStats.getMem().getHeapUsed(),JvmInfo.jvmInfo().getMem().getHeapMax(),buildPools(lastJvmStats,currentJvmStats));
    }
  }
  lastJvmStats=currentJvmStats;
}
