{
  super(settings);
  this.threadPool=threadPool;
  this.enabled=ENABLED_SETTING.get(settings);
  this.interval=REFRESH_INTERVAL_SETTING.get(settings);
  Map<String,GcThreshold> gcThresholds=new HashMap<>();
  Map<String,Settings> gcThresholdGroups=GC_SETTING.get(settings).getAsGroups();
  for (  Map.Entry<String,Settings> entry : gcThresholdGroups.entrySet()) {
    String name=entry.getKey();
    TimeValue warn=getValidThreshold(entry.getValue(),entry.getKey(),"warn");
    TimeValue info=getValidThreshold(entry.getValue(),entry.getKey(),"info");
    TimeValue debug=getValidThreshold(entry.getValue(),entry.getKey(),"debug");
    gcThresholds.put(name,new GcThreshold(name,warn.millis(),info.millis(),debug.millis()));
  }
  gcThresholds.putIfAbsent(GcNames.YOUNG,new GcThreshold(GcNames.YOUNG,1000,700,400));
  gcThresholds.putIfAbsent(GcNames.OLD,new GcThreshold(GcNames.OLD,10000,5000,2000));
  gcThresholds.putIfAbsent("default",new GcThreshold("default",10000,5000,2000));
  this.gcThresholds=unmodifiableMap(gcThresholds);
  if (GC_OVERHEAD_WARN_SETTING.get(settings) <= GC_OVERHEAD_INFO_SETTING.get(settings)) {
    final String message=String.format(Locale.ROOT,"[%s] must be greater than [%s] [%d] but was [%d]",GC_OVERHEAD_WARN_SETTING.getKey(),GC_OVERHEAD_INFO_SETTING.getKey(),GC_OVERHEAD_INFO_SETTING.get(settings),GC_OVERHEAD_WARN_SETTING.get(settings));
    throw new IllegalArgumentException(message);
  }
  if (GC_OVERHEAD_INFO_SETTING.get(settings) <= GC_OVERHEAD_DEBUG_SETTING.get(settings)) {
    final String message=String.format(Locale.ROOT,"[%s] must be greater than [%s] [%d] but was [%d]",GC_OVERHEAD_INFO_SETTING.getKey(),GC_OVERHEAD_DEBUG_SETTING.getKey(),GC_OVERHEAD_DEBUG_SETTING.get(settings),GC_OVERHEAD_INFO_SETTING.get(settings));
    throw new IllegalArgumentException(message);
  }
  this.gcOverheadThreshold=new GcOverheadThreshold(GC_OVERHEAD_WARN_SETTING.get(settings),GC_OVERHEAD_INFO_SETTING.get(settings),GC_OVERHEAD_DEBUG_SETTING.get(settings));
  logger.debug("enabled [{}], interval [{}], gc_threshold [{}], overhead [{}, {}, {}]",this.enabled,this.interval,this.gcThresholds,this.gcOverheadThreshold.warnThreshold,this.gcOverheadThreshold.infoThreshold,this.gcOverheadThreshold.debugThreshold);
}
