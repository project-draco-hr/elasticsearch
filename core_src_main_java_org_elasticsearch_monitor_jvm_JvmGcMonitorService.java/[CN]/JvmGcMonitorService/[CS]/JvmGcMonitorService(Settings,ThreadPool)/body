{
  super(settings);
  this.threadPool=threadPool;
  this.enabled=ENABLED_SETTING.get(settings);
  this.interval=REFRESH_INTERVAL_SETTING.get(settings);
  Map<String,GcThreshold> gcThresholds=new HashMap<>();
  Map<String,Settings> gcThresholdGroups=GC_SETTING.get(settings).getAsGroups();
  for (  Map.Entry<String,Settings> entry : gcThresholdGroups.entrySet()) {
    String name=entry.getKey();
    TimeValue warn=entry.getValue().getAsTime("warn",null);
    TimeValue info=entry.getValue().getAsTime("info",null);
    TimeValue debug=entry.getValue().getAsTime("debug",null);
    if (warn == null || info == null || debug == null) {
      logger.warn("ignoring gc_threshold for [{}], missing warn/info/debug values",name);
    }
 else {
      gcThresholds.put(name,new GcThreshold(name,warn.millis(),info.millis(),debug.millis()));
    }
  }
  gcThresholds.putIfAbsent(GcNames.YOUNG,new GcThreshold(GcNames.YOUNG,1000,700,400));
  gcThresholds.putIfAbsent(GcNames.OLD,new GcThreshold(GcNames.OLD,10000,5000,2000));
  gcThresholds.putIfAbsent("default",new GcThreshold("default",10000,5000,2000));
  this.gcThresholds=unmodifiableMap(gcThresholds);
  logger.debug("enabled [{}], interval [{}], gc_threshold [{}]",enabled,interval,this.gcThresholds);
}
