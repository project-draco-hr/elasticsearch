{
  final String name=slowGcEvent.currentGc.getName();
  final long elapsed=slowGcEvent.elapsed;
  final long totalGcCollectionCount=slowGcEvent.currentGc.getCollectionCount();
  final long currentGcCollectionCount=slowGcEvent.collectionCount;
  final TimeValue totalGcCollectionTime=slowGcEvent.currentGc.getCollectionTime();
  final TimeValue currentGcCollectionTime=slowGcEvent.collectionTime;
  final JvmStats lastJvmStats=slowGcEvent.lastJvmStats;
  final JvmStats currentJvmStats=slowGcEvent.currentJvmStats;
  final ByteSizeValue maxHeapUsed=slowGcEvent.maxHeapUsed;
switch (threshold) {
case WARN:
    if (logger.isWarnEnabled()) {
      logger.warn(LOG_MESSAGE,name,seq,totalGcCollectionCount,currentGcCollectionTime,currentGcCollectionCount,TimeValue.timeValueMillis(elapsed),currentGcCollectionTime,totalGcCollectionTime,lastJvmStats.getMem().getHeapUsed(),currentJvmStats.getMem().getHeapUsed(),maxHeapUsed,pools.apply(lastJvmStats,currentJvmStats));
    }
  break;
case INFO:
if (logger.isInfoEnabled()) {
  logger.info(LOG_MESSAGE,name,seq,totalGcCollectionCount,currentGcCollectionTime,currentGcCollectionCount,TimeValue.timeValueMillis(elapsed),currentGcCollectionTime,totalGcCollectionTime,lastJvmStats.getMem().getHeapUsed(),currentJvmStats.getMem().getHeapUsed(),maxHeapUsed,pools.apply(lastJvmStats,currentJvmStats));
}
break;
case DEBUG:
if (logger.isDebugEnabled()) {
logger.debug(LOG_MESSAGE,name,seq,totalGcCollectionCount,currentGcCollectionTime,currentGcCollectionCount,TimeValue.timeValueMillis(elapsed),currentGcCollectionTime,totalGcCollectionTime,lastJvmStats.getMem().getHeapUsed(),currentJvmStats.getMem().getHeapUsed(),maxHeapUsed,pools.apply(lastJvmStats,currentJvmStats));
}
break;
}
}
