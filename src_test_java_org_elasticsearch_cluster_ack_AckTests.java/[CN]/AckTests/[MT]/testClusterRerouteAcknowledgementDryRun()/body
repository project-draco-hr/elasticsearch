{
  client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("number_of_shards",atLeast(cluster().numNodes())).put("number_of_replicas",0)).get();
  ensureGreen();
  MoveAllocationCommand moveAllocationCommand=getAllocationCommand();
  ClusterRerouteResponse clusterRerouteResponse=client().admin().cluster().prepareReroute().setDryRun(true).add(moveAllocationCommand).get();
  assertThat(clusterRerouteResponse.isAcknowledged(),equalTo(true));
  ClusterStateResponse clusterStateResponse=client().admin().cluster().prepareState().get();
  RoutingNode routingNode=clusterStateResponse.getState().routingNodes().nodesToShards().get(moveAllocationCommand.fromNode());
  boolean found=false;
  for (  MutableShardRouting mutableShardRouting : routingNode) {
    if (mutableShardRouting.shardId().equals(moveAllocationCommand.shardId())) {
      assertThat(mutableShardRouting.started(),equalTo(true));
      found=true;
      break;
    }
  }
  assertThat(found,equalTo(true));
  routingNode=clusterStateResponse.getState().routingNodes().nodesToShards().get(moveAllocationCommand.toNode());
  for (  MutableShardRouting mutableShardRouting : routingNode) {
    if (mutableShardRouting.shardId().equals(moveAllocationCommand.shardId())) {
      fail("shard [" + mutableShardRouting + "] shouldn't be on node ["+ moveAllocationCommand.toString()+ "]");
    }
  }
}
