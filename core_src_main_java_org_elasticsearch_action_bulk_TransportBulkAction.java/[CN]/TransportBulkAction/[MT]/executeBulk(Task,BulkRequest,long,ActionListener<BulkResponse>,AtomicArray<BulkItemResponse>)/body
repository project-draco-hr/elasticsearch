{
  final ClusterState clusterState=clusterService.state();
  clusterState.blocks().globalBlockedRaiseException(ClusterBlockLevel.WRITE);
  final ConcreteIndices concreteIndices=new ConcreteIndices(clusterState,indexNameExpressionResolver);
  MetaData metaData=clusterState.metaData();
  for (int i=0; i < bulkRequest.requests.size(); i++) {
    ActionRequest request=bulkRequest.requests.get(i);
    if (request == null) {
      continue;
    }
    DocumentRequest documentRequest=(DocumentRequest)request;
    if (addFailureIfIndexIsUnavailable(documentRequest,bulkRequest,responses,i,concreteIndices,metaData)) {
      continue;
    }
    Index concreteIndex=concreteIndices.resolveIfAbsent(documentRequest);
    if (request instanceof IndexRequest) {
      IndexRequest indexRequest=(IndexRequest)request;
      MappingMetaData mappingMd=null;
      final IndexMetaData indexMetaData=metaData.index(concreteIndex);
      if (indexMetaData != null) {
        mappingMd=indexMetaData.mappingOrDefault(indexRequest.type());
      }
      try {
        indexRequest.resolveRouting(metaData);
        indexRequest.process(mappingMd,allowIdGeneration,concreteIndex.getName());
      }
 catch (      ElasticsearchParseException|RoutingMissingException e) {
        BulkItemResponse.Failure failure=new BulkItemResponse.Failure(concreteIndex.getName(),indexRequest.type(),indexRequest.id(),e);
        BulkItemResponse bulkItemResponse=new BulkItemResponse(i,"index",failure);
        responses.set(i,bulkItemResponse);
        bulkRequest.requests.set(i,null);
      }
    }
 else     if (request instanceof DeleteRequest) {
      try {
        TransportDeleteAction.resolveAndValidateRouting(metaData,concreteIndex.getName(),(DeleteRequest)request);
      }
 catch (      RoutingMissingException e) {
        BulkItemResponse.Failure failure=new BulkItemResponse.Failure(concreteIndex.getName(),documentRequest.type(),documentRequest.id(),e);
        BulkItemResponse bulkItemResponse=new BulkItemResponse(i,"delete",failure);
        responses.set(i,bulkItemResponse);
        bulkRequest.requests.set(i,null);
      }
    }
 else     if (request instanceof UpdateRequest) {
      try {
        TransportUpdateAction.resolveAndValidateRouting(metaData,concreteIndex.getName(),(UpdateRequest)request);
      }
 catch (      RoutingMissingException e) {
        BulkItemResponse.Failure failure=new BulkItemResponse.Failure(concreteIndex.getName(),documentRequest.type(),documentRequest.id(),e);
        BulkItemResponse bulkItemResponse=new BulkItemResponse(i,"update",failure);
        responses.set(i,bulkItemResponse);
        bulkRequest.requests.set(i,null);
      }
    }
 else {
      throw new AssertionError("request type not supported: [" + request.getClass().getName() + "]");
    }
  }
  Map<ShardId,List<BulkItemRequest>> requestsByShard=new HashMap<>();
  for (int i=0; i < bulkRequest.requests.size(); i++) {
    ActionRequest request=bulkRequest.requests.get(i);
    if (request instanceof IndexRequest) {
      IndexRequest indexRequest=(IndexRequest)request;
      String concreteIndex=concreteIndices.getConcreteIndex(indexRequest.index()).getName();
      ShardId shardId=clusterService.operationRouting().indexShards(clusterState,concreteIndex,indexRequest.id(),indexRequest.routing()).shardId();
      List<BulkItemRequest> list=requestsByShard.get(shardId);
      if (list == null) {
        list=new ArrayList<>();
        requestsByShard.put(shardId,list);
      }
      list.add(new BulkItemRequest(i,request));
    }
 else     if (request instanceof DeleteRequest) {
      DeleteRequest deleteRequest=(DeleteRequest)request;
      String concreteIndex=concreteIndices.getConcreteIndex(deleteRequest.index()).getName();
      ShardId shardId=clusterService.operationRouting().indexShards(clusterState,concreteIndex,deleteRequest.id(),deleteRequest.routing()).shardId();
      List<BulkItemRequest> list=requestsByShard.get(shardId);
      if (list == null) {
        list=new ArrayList<>();
        requestsByShard.put(shardId,list);
      }
      list.add(new BulkItemRequest(i,request));
    }
 else     if (request instanceof UpdateRequest) {
      UpdateRequest updateRequest=(UpdateRequest)request;
      String concreteIndex=concreteIndices.getConcreteIndex(updateRequest.index()).getName();
      ShardId shardId=clusterService.operationRouting().indexShards(clusterState,concreteIndex,updateRequest.id(),updateRequest.routing()).shardId();
      List<BulkItemRequest> list=requestsByShard.get(shardId);
      if (list == null) {
        list=new ArrayList<>();
        requestsByShard.put(shardId,list);
      }
      list.add(new BulkItemRequest(i,request));
    }
  }
  if (requestsByShard.isEmpty()) {
    listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]),buildTookInMillis(startTimeNanos)));
    return;
  }
  final AtomicInteger counter=new AtomicInteger(requestsByShard.size());
  String nodeId=clusterService.localNode().getId();
  for (  Map.Entry<ShardId,List<BulkItemRequest>> entry : requestsByShard.entrySet()) {
    final ShardId shardId=entry.getKey();
    final List<BulkItemRequest> requests=entry.getValue();
    BulkShardRequest bulkShardRequest=new BulkShardRequest(shardId,bulkRequest.getRefreshPolicy(),requests.toArray(new BulkItemRequest[requests.size()]));
    bulkShardRequest.consistencyLevel(bulkRequest.consistencyLevel());
    bulkShardRequest.timeout(bulkRequest.timeout());
    if (task != null) {
      bulkShardRequest.setParentTask(nodeId,task.getId());
    }
    shardBulkAction.execute(bulkShardRequest,new ActionListener<BulkShardResponse>(){
      @Override public void onResponse(      BulkShardResponse bulkShardResponse){
        for (        BulkItemResponse bulkItemResponse : bulkShardResponse.getResponses()) {
          if (bulkItemResponse.getResponse() != null) {
            bulkItemResponse.getResponse().setShardInfo(bulkShardResponse.getShardInfo());
          }
          responses.set(bulkItemResponse.getItemId(),bulkItemResponse);
        }
        if (counter.decrementAndGet() == 0) {
          finishHim();
        }
      }
      @Override public void onFailure(      Exception e){
        for (        BulkItemRequest request : requests) {
          final String indexName=concreteIndices.getConcreteIndex(request.index()).getName();
          if (request.request() instanceof IndexRequest) {
            IndexRequest indexRequest=(IndexRequest)request.request();
            responses.set(request.id(),new BulkItemResponse(request.id(),indexRequest.opType().toString().toLowerCase(Locale.ENGLISH),new BulkItemResponse.Failure(indexName,indexRequest.type(),indexRequest.id(),e)));
          }
 else           if (request.request() instanceof DeleteRequest) {
            DeleteRequest deleteRequest=(DeleteRequest)request.request();
            responses.set(request.id(),new BulkItemResponse(request.id(),"delete",new BulkItemResponse.Failure(indexName,deleteRequest.type(),deleteRequest.id(),e)));
          }
 else           if (request.request() instanceof UpdateRequest) {
            UpdateRequest updateRequest=(UpdateRequest)request.request();
            responses.set(request.id(),new BulkItemResponse(request.id(),"update",new BulkItemResponse.Failure(indexName,updateRequest.type(),updateRequest.id(),e)));
          }
        }
        if (counter.decrementAndGet() == 0) {
          finishHim();
        }
      }
      private void finishHim(){
        listener.onResponse(new BulkResponse(responses.toArray(new BulkItemResponse[responses.length()]),buildTookInMillis(startTimeNanos)));
      }
    }
);
  }
}
