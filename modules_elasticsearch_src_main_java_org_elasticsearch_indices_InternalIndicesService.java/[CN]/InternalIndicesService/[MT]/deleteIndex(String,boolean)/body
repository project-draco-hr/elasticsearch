{
  Injector indexInjector;
  IndexService indexService;
synchronized (this) {
    indexInjector=indicesInjectors.remove(index);
    if (indexInjector == null) {
      if (!delete) {
        return;
      }
      throw new IndexMissingException(new Index(index));
    }
    if (delete) {
      logger.debug("deleting Index [{}]",index);
    }
    Map<String,IndexService> tmpMap=newHashMap(indices);
    indexService=tmpMap.remove(index);
    indices=ImmutableMap.copyOf(tmpMap);
  }
  indicesLifecycle.beforeIndexClosed(indexService,delete);
  for (  Class<? extends CloseableIndexComponent> closeable : pluginsService.indexServices()) {
    indexInjector.getInstance(closeable).close(delete);
  }
  indexService.close(delete);
  indexInjector.getInstance(FilterCache.class).close();
  indexInjector.getInstance(AnalysisService.class).close();
  indexInjector.getInstance(IndexEngine.class).close();
  indexInjector.getInstance(IndexServiceManagement.class).close();
  indexInjector.getInstance(IndexGateway.class).close(delete);
  Injectors.close(injector);
  indicesLifecycle.afterIndexClosed(indexService.index(),delete);
  if (delete) {
    FileSystemUtils.deleteRecursively(nodeEnv.indexLocation(new Index(index)));
  }
}
