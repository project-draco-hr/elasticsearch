{
  Index index=new Index(sIndexName);
  if (indicesInjectors.containsKey(index.name())) {
    throw new IndexAlreadyExistsException(index);
  }
  indicesLifecycle.beforeIndexCreated(index);
  logger.debug("Creating Index [{}], shards [{}]/[{}]",new Object[]{sIndexName,settings.get(SETTING_NUMBER_OF_SHARDS),settings.get(SETTING_NUMBER_OF_REPLICAS)});
  Settings indexSettings=settingsBuilder().put("settingsType","index").put(this.settings).put(settings).classLoader(settings.getClassLoader()).globalSettings(settings.getGlobalSettings()).build();
  ArrayList<Module> modules=new ArrayList<Module>();
  modules.add(new IndexNameModule(index));
  modules.add(new LocalNodeIdModule(localNodeId));
  modules.add(new IndexSettingsModule(indexSettings));
  modules.add(new IndicesPluginsModule(indexSettings,pluginsService));
  modules.add(new IndexEngineModule(indexSettings));
  modules.add(new AnalysisModule(indexSettings,indicesAnalysisService));
  modules.add(new SimilarityModule(indexSettings));
  modules.add(new IndexCacheModule(indexSettings));
  modules.add(new IndexQueryParserModule(indexSettings));
  modules.add(new MapperServiceModule());
  modules.add(new IndexGatewayModule(indexSettings,injector.getInstance(Gateway.class)));
  modules.add(new OperationRoutingModule(indexSettings));
  modules.add(new IndexModule());
  pluginsService.processModules(modules);
  Injector indexInjector=injector.createChildInjector(modules);
  indicesInjectors.put(index.name(),indexInjector);
  IndexService indexService=indexInjector.getInstance(IndexService.class);
  indicesLifecycle.afterIndexCreated(indexService);
  indices=newMapBuilder(indices).put(index.name(),indexService).immutableMap();
  return indexService;
}
