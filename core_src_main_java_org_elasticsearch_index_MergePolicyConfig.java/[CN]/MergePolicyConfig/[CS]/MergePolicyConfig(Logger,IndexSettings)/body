{
  this.logger=logger;
  double forceMergeDeletesPctAllowed=indexSettings.getValue(INDEX_MERGE_POLICY_EXPUNGE_DELETES_ALLOWED_SETTING);
  ByteSizeValue floorSegment=indexSettings.getValue(INDEX_MERGE_POLICY_FLOOR_SEGMENT_SETTING);
  int maxMergeAtOnce=indexSettings.getValue(INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE_SETTING);
  int maxMergeAtOnceExplicit=indexSettings.getValue(INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE_EXPLICIT_SETTING);
  ByteSizeValue maxMergedSegment=indexSettings.getValue(INDEX_MERGE_POLICY_MAX_MERGED_SEGMENT_SETTING);
  double segmentsPerTier=indexSettings.getValue(INDEX_MERGE_POLICY_SEGMENTS_PER_TIER_SETTING);
  double reclaimDeletesWeight=indexSettings.getValue(INDEX_MERGE_POLICY_RECLAIM_DELETES_WEIGHT_SETTING);
  this.mergesEnabled=indexSettings.getSettings().getAsBoolean(INDEX_MERGE_ENABLED,true);
  if (mergesEnabled == false) {
    logger.warn("[{}] is set to false, this should only be used in tests and can cause serious problems in production environments",INDEX_MERGE_ENABLED);
  }
  maxMergeAtOnce=adjustMaxMergeAtOnceIfNeeded(maxMergeAtOnce,segmentsPerTier);
  mergePolicy.setNoCFSRatio(indexSettings.getValue(INDEX_COMPOUND_FORMAT_SETTING));
  mergePolicy.setForceMergeDeletesPctAllowed(forceMergeDeletesPctAllowed);
  mergePolicy.setFloorSegmentMB(floorSegment.mbFrac());
  mergePolicy.setMaxMergeAtOnce(maxMergeAtOnce);
  mergePolicy.setMaxMergeAtOnceExplicit(maxMergeAtOnceExplicit);
  mergePolicy.setMaxMergedSegmentMB(maxMergedSegment.mbFrac());
  mergePolicy.setSegmentsPerTier(segmentsPerTier);
  mergePolicy.setReclaimDeletesWeight(reclaimDeletesWeight);
  if (logger.isTraceEnabled()) {
    logger.trace("using [tiered] merge mergePolicy with expunge_deletes_allowed[{}], floor_segment[{}], max_merge_at_once[{}], max_merge_at_once_explicit[{}], max_merged_segment[{}], segments_per_tier[{}], reclaim_deletes_weight[{}]",forceMergeDeletesPctAllowed,floorSegment,maxMergeAtOnce,maxMergeAtOnceExplicit,maxMergedSegment,segmentsPerTier,reclaimDeletesWeight);
  }
}
