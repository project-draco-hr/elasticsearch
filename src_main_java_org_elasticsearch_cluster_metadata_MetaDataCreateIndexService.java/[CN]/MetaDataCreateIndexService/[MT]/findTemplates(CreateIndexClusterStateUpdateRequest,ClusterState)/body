{
  List<IndexTemplateMetaData> templates=Lists.newArrayList();
  for (  ObjectCursor<IndexTemplateMetaData> cursor : state.metaData().templates().values()) {
    IndexTemplateMetaData template=cursor.value;
    if (Regex.simpleMatch(template.template(),request.index())) {
      templates.add(template);
    }
  }
  File templatesDir=new File(environment.configFile(),"templates");
  if (templatesDir.exists() && templatesDir.isDirectory()) {
    File[] templatesFiles=templatesDir.listFiles();
    if (templatesFiles != null) {
      for (      File templatesFile : templatesFiles) {
        XContentParser parser=null;
        try {
          byte[] templatesData=Streams.copyToByteArray(templatesFile);
          parser=XContentHelper.createParser(templatesData,0,templatesData.length);
          IndexTemplateMetaData template=IndexTemplateMetaData.Builder.fromXContent(parser);
          if (Regex.simpleMatch(template.template(),request.index())) {
            templates.add(template);
          }
        }
 catch (        Exception e) {
          logger.warn("[{}] failed to read template [{}] from config",e,request.index(),templatesFile.getAbsolutePath());
        }
 finally {
          IOUtils.closeWhileHandlingException(parser);
        }
      }
    }
  }
  CollectionUtil.timSort(templates,new Comparator<IndexTemplateMetaData>(){
    @Override public int compare(    IndexTemplateMetaData o1,    IndexTemplateMetaData o2){
      return o2.order() - o1.order();
    }
  }
);
  return templates;
}
