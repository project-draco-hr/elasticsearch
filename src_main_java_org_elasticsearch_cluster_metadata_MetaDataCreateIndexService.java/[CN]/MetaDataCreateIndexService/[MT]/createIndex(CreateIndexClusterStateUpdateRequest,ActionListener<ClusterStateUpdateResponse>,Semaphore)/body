{
  clusterService.submitStateUpdateTask("create-index [" + request.index() + "], cause ["+ request.cause()+ "]",Priority.URGENT,new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request,listener){
    @Override protected ClusterStateUpdateResponse newResponse(    boolean acknowledged){
      return new ClusterStateUpdateResponse(acknowledged);
    }
    @Override public void onAllNodesAcked(    @Nullable Throwable t){
      mdLock.release();
      super.onAllNodesAcked(t);
    }
    @Override public void onAckTimeout(){
      mdLock.release();
      super.onAckTimeout();
    }
    @Override public void onFailure(    String source,    Throwable t){
      mdLock.release();
      super.onFailure(source,t);
    }
    @Override public ClusterState execute(    ClusterState currentState) throws Exception {
      boolean indexCreated=false;
      String failureReason=null;
      try {
        validate(request,currentState);
        for (        Alias alias : request.aliases()) {
          aliasValidator.validateAlias(alias,request.index(),currentState.metaData());
        }
        List<IndexTemplateMetaData> templates=findTemplates(request,currentState);
        Map<String,Custom> customs=Maps.newHashMap();
        Map<String,Map<String,Object>> mappings=Maps.newHashMap();
        Map<String,AliasMetaData> templatesAliases=Maps.newHashMap();
        for (        Map.Entry<String,String> entry : request.mappings().entrySet()) {
          mappings.put(entry.getKey(),parseMapping(entry.getValue()));
        }
        for (        Map.Entry<String,Custom> entry : request.customs().entrySet()) {
          customs.put(entry.getKey(),entry.getValue());
        }
        for (        IndexTemplateMetaData template : templates) {
          for (          ObjectObjectCursor<String,CompressedString> cursor : template.mappings()) {
            if (mappings.containsKey(cursor.key)) {
              XContentHelper.mergeDefaults(mappings.get(cursor.key),parseMapping(cursor.value.string()));
            }
 else {
              mappings.put(cursor.key,parseMapping(cursor.value.string()));
            }
          }
          for (          ObjectObjectCursor<String,Custom> cursor : template.customs()) {
            String type=cursor.key;
            IndexMetaData.Custom custom=cursor.value;
            IndexMetaData.Custom existing=customs.get(type);
            if (existing == null) {
              customs.put(type,custom);
            }
 else {
              IndexMetaData.Custom merged=IndexMetaData.lookupFactorySafe(type).merge(existing,custom);
              customs.put(type,merged);
            }
          }
          for (          ObjectObjectCursor<String,AliasMetaData> cursor : template.aliases()) {
            AliasMetaData aliasMetaData=cursor.value;
            if (request.aliases().contains(new Alias(aliasMetaData.alias()))) {
              continue;
            }
            if (templatesAliases.containsKey(cursor.key)) {
              continue;
            }
            if (aliasMetaData.alias().contains("{index}")) {
              String templatedAlias=aliasMetaData.alias().replace("{index}",request.index());
              aliasMetaData=AliasMetaData.newAliasMetaData(aliasMetaData,templatedAlias);
            }
            aliasValidator.validateAliasMetaData(aliasMetaData,request.index(),currentState.metaData());
            templatesAliases.put(aliasMetaData.alias(),aliasMetaData);
          }
        }
        File mappingsDir=new File(environment.configFile(),"mappings");
        if (mappingsDir.exists() && mappingsDir.isDirectory()) {
          File indexMappingsDir=new File(mappingsDir,request.index());
          if (indexMappingsDir.exists() && indexMappingsDir.isDirectory()) {
            addMappings(mappings,indexMappingsDir);
          }
          File defaultMappingsDir=new File(mappingsDir,"_default");
          if (defaultMappingsDir.exists() && defaultMappingsDir.isDirectory()) {
            addMappings(mappings,defaultMappingsDir);
          }
        }
        ImmutableSettings.Builder indexSettingsBuilder=settingsBuilder();
        for (int i=templates.size() - 1; i >= 0; i--) {
          indexSettingsBuilder.put(templates.get(i).settings());
        }
        indexSettingsBuilder.put(request.settings());
        if (indexSettingsBuilder.get(SETTING_NUMBER_OF_SHARDS) == null) {
          if (request.index().equals(riverIndexName)) {
            indexSettingsBuilder.put(SETTING_NUMBER_OF_SHARDS,settings.getAsInt(SETTING_NUMBER_OF_SHARDS,1));
          }
 else {
            indexSettingsBuilder.put(SETTING_NUMBER_OF_SHARDS,settings.getAsInt(SETTING_NUMBER_OF_SHARDS,5));
          }
        }
        if (indexSettingsBuilder.get(SETTING_NUMBER_OF_REPLICAS) == null) {
          if (request.index().equals(riverIndexName)) {
            indexSettingsBuilder.put(SETTING_NUMBER_OF_REPLICAS,settings.getAsInt(SETTING_NUMBER_OF_REPLICAS,1));
          }
 else {
            indexSettingsBuilder.put(SETTING_NUMBER_OF_REPLICAS,settings.getAsInt(SETTING_NUMBER_OF_REPLICAS,1));
          }
        }
        if (settings.get(SETTING_AUTO_EXPAND_REPLICAS) != null && indexSettingsBuilder.get(SETTING_AUTO_EXPAND_REPLICAS) == null) {
          indexSettingsBuilder.put(SETTING_AUTO_EXPAND_REPLICAS,settings.get(SETTING_AUTO_EXPAND_REPLICAS));
        }
        if (indexSettingsBuilder.get(SETTING_VERSION_CREATED) == null) {
          DiscoveryNodes nodes=currentState.nodes();
          final Version createdVersion=Version.smallest(version,nodes.smallestNonClientNodeVersion());
          indexSettingsBuilder.put(SETTING_VERSION_CREATED,createdVersion);
        }
        indexSettingsBuilder.put(SETTING_UUID,Strings.randomBase64UUID());
        Settings actualIndexSettings=indexSettingsBuilder.build();
        indicesService.createIndex(request.index(),actualIndexSettings,clusterService.localNode().id());
        indexCreated=true;
        IndexService indexService=indicesService.indexServiceSafe(request.index());
        MapperService mapperService=indexService.mapperService();
        if (mappings.containsKey(MapperService.DEFAULT_MAPPING)) {
          try {
            mapperService.merge(MapperService.DEFAULT_MAPPING,new CompressedString(XContentFactory.jsonBuilder().map(mappings.get(MapperService.DEFAULT_MAPPING)).string()),false);
          }
 catch (          Exception e) {
            failureReason="failed on parsing default mapping on index creation";
            throw new MapperParsingException("mapping [" + MapperService.DEFAULT_MAPPING + "]",e);
          }
        }
        for (        Map.Entry<String,Map<String,Object>> entry : mappings.entrySet()) {
          if (entry.getKey().equals(MapperService.DEFAULT_MAPPING)) {
            continue;
          }
          try {
            mapperService.merge(entry.getKey(),new CompressedString(XContentFactory.jsonBuilder().map(entry.getValue()).string()),true);
          }
 catch (          Exception e) {
            failureReason="failed on parsing mappings on index creation";
            throw new MapperParsingException("mapping [" + entry.getKey() + "]",e);
          }
        }
        IndexQueryParserService indexQueryParserService=indexService.queryParserService();
        for (        Alias alias : request.aliases()) {
          if (Strings.hasLength(alias.filter())) {
            aliasValidator.validateAliasFilter(alias.name(),alias.filter(),indexQueryParserService);
          }
        }
        for (        AliasMetaData aliasMetaData : templatesAliases.values()) {
          if (aliasMetaData.filter() != null) {
            aliasValidator.validateAliasFilter(aliasMetaData.alias(),aliasMetaData.filter().uncompressed(),indexQueryParserService);
          }
        }
        Map<String,MappingMetaData> mappingsMetaData=Maps.newHashMap();
        for (        DocumentMapper mapper : mapperService.docMappers(true)) {
          MappingMetaData mappingMd=new MappingMetaData(mapper);
          mappingsMetaData.put(mapper.type(),mappingMd);
        }
        final IndexMetaData.Builder indexMetaDataBuilder=IndexMetaData.builder(request.index()).settings(actualIndexSettings);
        for (        MappingMetaData mappingMd : mappingsMetaData.values()) {
          indexMetaDataBuilder.putMapping(mappingMd);
        }
        for (        AliasMetaData aliasMetaData : templatesAliases.values()) {
          indexMetaDataBuilder.putAlias(aliasMetaData);
        }
        for (        Alias alias : request.aliases()) {
          AliasMetaData aliasMetaData=AliasMetaData.builder(alias.name()).filter(alias.filter()).indexRouting(alias.indexRouting()).searchRouting(alias.searchRouting()).build();
          indexMetaDataBuilder.putAlias(aliasMetaData);
        }
        for (        Map.Entry<String,Custom> customEntry : customs.entrySet()) {
          indexMetaDataBuilder.putCustom(customEntry.getKey(),customEntry.getValue());
        }
        indexMetaDataBuilder.state(request.state());
        final IndexMetaData indexMetaData;
        try {
          indexMetaData=indexMetaDataBuilder.build();
        }
 catch (        Exception e) {
          failureReason="failed to build index metadata";
          throw e;
        }
        MetaData newMetaData=MetaData.builder(currentState.metaData()).put(indexMetaData,false).build();
        logger.info("[{}] creating index, cause [{}], shards [{}]/[{}], mappings {}",request.index(),request.cause(),indexMetaData.numberOfShards(),indexMetaData.numberOfReplicas(),mappings.keySet());
        ClusterBlocks.Builder blocks=ClusterBlocks.builder().blocks(currentState.blocks());
        if (!request.blocks().isEmpty()) {
          for (          ClusterBlock block : request.blocks()) {
            blocks.addIndexBlock(request.index(),block);
          }
        }
        if (request.state() == State.CLOSE) {
          blocks.addIndexBlock(request.index(),MetaDataIndexStateService.INDEX_CLOSED_BLOCK);
        }
        ClusterState updatedState=ClusterState.builder(currentState).blocks(blocks).metaData(newMetaData).build();
        if (request.state() == State.OPEN) {
          RoutingTable.Builder routingTableBuilder=RoutingTable.builder(updatedState.routingTable()).addAsNew(updatedState.metaData().index(request.index()));
          RoutingAllocation.Result routingResult=allocationService.reroute(ClusterState.builder(updatedState).routingTable(routingTableBuilder).build());
          updatedState=ClusterState.builder(updatedState).routingResult(routingResult).build();
        }
        return updatedState;
      }
  finally {
        if (indexCreated) {
          indicesService.removeIndex(request.index(),failureReason != null ? failureReason : "failed to create index");
        }
      }
    }
  }
);
}
