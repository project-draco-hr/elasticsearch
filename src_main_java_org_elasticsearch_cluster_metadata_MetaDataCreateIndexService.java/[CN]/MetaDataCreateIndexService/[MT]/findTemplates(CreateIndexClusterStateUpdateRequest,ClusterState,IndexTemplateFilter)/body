{
  List<IndexTemplateMetaData> templates=Lists.newArrayList();
  for (  ObjectCursor<IndexTemplateMetaData> cursor : state.metaData().templates().values()) {
    IndexTemplateMetaData template=cursor.value;
    if (indexTemplateFilter.apply(request,template)) {
      templates.add(template);
    }
  }
  final Path templatesDir=environment.configFile().resolve("templates");
  if (Files.isDirectory(templatesDir)) {
    try (DirectoryStream<Path> stream=Files.newDirectoryStream(templatesDir)){
      for (      Path templatesFile : stream) {
        if (Files.isRegularFile(templatesFile)) {
          XContentParser parser=null;
          try {
            final byte[] templatesData=Files.readAllBytes(templatesFile);
            parser=XContentHelper.createParser(templatesData,0,templatesData.length);
            IndexTemplateMetaData template=IndexTemplateMetaData.Builder.fromXContent(parser,templatesFile.getFileName().toString());
            if (indexTemplateFilter.apply(request,template)) {
              templates.add(template);
            }
          }
 catch (          Exception e) {
            logger.warn("[{}] failed to read template [{}] from config",e,request.index(),templatesFile.toAbsolutePath());
          }
 finally {
            Releasables.closeWhileHandlingException(parser);
          }
        }
      }
    }
   }
  CollectionUtil.timSort(templates,new Comparator<IndexTemplateMetaData>(){
    @Override public int compare(    IndexTemplateMetaData o1,    IndexTemplateMetaData o2){
      return o2.order() - o1.order();
    }
  }
);
  return templates;
}
