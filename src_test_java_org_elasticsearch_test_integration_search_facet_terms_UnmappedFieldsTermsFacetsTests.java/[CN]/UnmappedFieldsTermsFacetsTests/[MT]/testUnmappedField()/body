{
  createIndex("idx");
  client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();
  for (int i=0; i < 10; i++) {
    client().prepareIndex("idx","type","" + i).setSource(jsonBuilder().startObject().field("mapped","" + i).endObject()).execute().actionGet();
  }
  client().admin().indices().prepareFlush().setRefresh(true).execute().actionGet();
  SearchResponse searchResponse=client().prepareSearch("idx").setQuery(matchAllQuery()).addFacet(termsFacet("mapped").field("mapped").size(10)).addFacet(termsFacet("unmapped_bool").field("unmapped_bool").size(10)).addFacet(termsFacet("unmapped_str").field("unmapped_str").size(10)).addFacet(termsFacet("unmapped_byte").field("unmapped_byte").size(10)).addFacet(termsFacet("unmapped_short").field("unmapped_short").size(10)).addFacet(termsFacet("unmapped_int").field("unmapped_int").size(10)).addFacet(termsFacet("unmapped_long").field("unmapped_long").size(10)).addFacet(termsFacet("unmapped_float").field("unmapped_float").size(10)).addFacet(termsFacet("unmapped_double").field("unmapped_double").size(10)).execute().actionGet();
  assertThat(searchResponse.getHits().getTotalHits(),equalTo(10l));
  TermsFacet facet=searchResponse.getFacets().facet("mapped");
  assertThat(facet.getName(),equalTo("mapped"));
  assertThat(facet.getEntries().size(),is(10));
  assertThat(facet.getTotalCount(),is(10l));
  assertThat(facet.getMissingCount(),is(0l));
  facet=searchResponse.getFacets().facet("unmapped_str");
  assertThat(facet.getName(),equalTo("unmapped_str"));
  assertThat(facet.getEntries().size(),is(0));
  assertThat(facet.getTotalCount(),is(0l));
  assertThat(facet.getOtherCount(),is(0l));
  assertThat(facet.getMissingCount(),is(10l));
  facet=searchResponse.getFacets().facet("unmapped_bool");
  assertThat(facet.getName(),equalTo("unmapped_bool"));
  assertThat(facet.getEntries().size(),is(0));
  assertThat(facet.getTotalCount(),is(0l));
  assertThat(facet.getOtherCount(),is(0l));
  assertThat(facet.getMissingCount(),is(10l));
  facet=searchResponse.getFacets().facet("unmapped_byte");
  assertThat(facet.getName(),equalTo("unmapped_byte"));
  assertThat(facet.getEntries().size(),is(0));
  assertThat(facet.getTotalCount(),is(0l));
  assertThat(facet.getOtherCount(),is(0l));
  assertThat(facet.getMissingCount(),is(10l));
  facet=searchResponse.getFacets().facet("unmapped_short");
  assertThat(facet.getName(),equalTo("unmapped_short"));
  assertThat(facet.getEntries().size(),is(0));
  assertThat(facet.getTotalCount(),is(0l));
  assertThat(facet.getOtherCount(),is(0l));
  assertThat(facet.getMissingCount(),is(10l));
  facet=searchResponse.getFacets().facet("unmapped_int");
  assertThat(facet.getName(),equalTo("unmapped_int"));
  assertThat(facet.getEntries().size(),is(0));
  assertThat(facet.getTotalCount(),is(0l));
  assertThat(facet.getOtherCount(),is(0l));
  assertThat(facet.getMissingCount(),is(10l));
  facet=searchResponse.getFacets().facet("unmapped_long");
  assertThat(facet.getName(),equalTo("unmapped_long"));
  assertThat(facet.getEntries().size(),is(0));
  assertThat(facet.getTotalCount(),is(0l));
  assertThat(facet.getOtherCount(),is(0l));
  assertThat(facet.getMissingCount(),is(10l));
  facet=searchResponse.getFacets().facet("unmapped_float");
  assertThat(facet.getName(),equalTo("unmapped_float"));
  assertThat(facet.getEntries().size(),is(0));
  assertThat(facet.getTotalCount(),is(0l));
  assertThat(facet.getOtherCount(),is(0l));
  assertThat(facet.getMissingCount(),is(10l));
  facet=searchResponse.getFacets().facet("unmapped_double");
  assertThat(facet.getName(),equalTo("unmapped_double"));
  assertThat(facet.getEntries().size(),is(0));
  assertThat(facet.getTotalCount(),is(0l));
  assertThat(facet.getOtherCount(),is(0l));
  assertThat(facet.getMissingCount(),is(10l));
}
