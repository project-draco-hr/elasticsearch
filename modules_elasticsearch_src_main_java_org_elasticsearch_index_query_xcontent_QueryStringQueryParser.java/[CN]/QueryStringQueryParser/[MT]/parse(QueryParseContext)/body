{
  XContentParser parser=parseContext.parser();
  String queryString=null;
  String defaultField=AllFieldMapper.NAME;
  MapperQueryParser.Operator defaultOperator=QueryParser.Operator.OR;
  boolean allowLeadingWildcard=true;
  boolean lowercaseExpandedTerms=true;
  boolean enablePositionIncrements=true;
  float fuzzyMinSim=FuzzyQuery.defaultMinSimilarity;
  int fuzzyPrefixLength=FuzzyQuery.defaultPrefixLength;
  int phraseSlop=0;
  float boost=1.0f;
  boolean escape=false;
  Analyzer analyzer=null;
  List<String> fields=null;
  ExtTObjectFloatHashMap<String> boosts=null;
  float tieBreaker=0.0f;
  boolean useDisMax=true;
  String currentFieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if ("fields".equals(currentFieldName)) {
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          String fField=null;
          float fBoost=-1;
          char[] text=parser.textCharacters();
          int end=parser.textOffset() + parser.textLength();
          for (int i=parser.textOffset(); i < end; i++) {
            if (text[i] == '^') {
              int relativeLocation=i - parser.textOffset();
              fField=new String(text,parser.textOffset(),relativeLocation);
              fBoost=Float.parseFloat(new String(text,i + 1,parser.textLength() - relativeLocation - 1));
              break;
            }
          }
          if (fField == null) {
            fField=parser.text();
          }
          if (fields == null) {
            fields=Lists.newArrayList();
          }
          fields.add(fField);
          if (fBoost != -1) {
            if (boosts == null) {
              boosts=new ExtTObjectFloatHashMap<String>();
            }
            boosts.put(fField,fBoost);
          }
        }
      }
    }
 else     if (token.isValue()) {
      if ("query".equals(currentFieldName)) {
        queryString=parser.text();
      }
 else       if ("default_field".equals(currentFieldName) || "defaultField".equals(currentFieldName)) {
        defaultField=parseContext.indexName(parser.text());
      }
 else       if ("default_operator".equals(currentFieldName) || "defaultOperator".equals(currentFieldName)) {
        String op=parser.text();
        if ("or".equalsIgnoreCase(op)) {
          defaultOperator=QueryParser.Operator.OR;
        }
 else         if ("and".equalsIgnoreCase(op)) {
          defaultOperator=QueryParser.Operator.AND;
        }
 else {
          throw new QueryParsingException(index,"Query default operator [" + op + "] is not allowed");
        }
      }
 else       if ("analyzer".equals(currentFieldName)) {
        analyzer=analysisService.analyzer(parser.text());
      }
 else       if ("allow_leading_wildcard".equals(currentFieldName) || "allowLeadingWildcard".equals(currentFieldName)) {
        allowLeadingWildcard=parser.booleanValue();
      }
 else       if ("lowercase_expanded_terms".equals(currentFieldName) || "lowercaseExpandedTerms".equals(currentFieldName)) {
        lowercaseExpandedTerms=parser.booleanValue();
      }
 else       if ("enable_position_increments".equals(currentFieldName) || "enablePositionIncrements".equals(currentFieldName)) {
        enablePositionIncrements=parser.booleanValue();
      }
 else       if ("escape".equals(currentFieldName)) {
        escape=parser.booleanValue();
      }
 else       if ("use_dis_max".equals(currentFieldName) || "useDisMax".equals(currentFieldName)) {
        useDisMax=parser.booleanValue();
      }
 else       if ("fuzzy_prefix_length".equals(currentFieldName) || "fuzzyPrefixLength".equals(currentFieldName)) {
        fuzzyPrefixLength=parser.intValue();
      }
 else       if ("phrase_slop".equals(currentFieldName) || "phraseSlop".equals(currentFieldName)) {
        phraseSlop=parser.intValue();
      }
 else       if ("fuzzy_min_sim".equals(currentFieldName) || "fuzzyMinSim".equals(currentFieldName)) {
        fuzzyMinSim=parser.floatValue();
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=parser.floatValue();
      }
 else       if ("tie_breaker".equals(currentFieldName) || "tieBreaker".equals(currentFieldName)) {
        tieBreaker=parser.floatValue();
      }
    }
  }
  if (queryString == null) {
    throw new QueryParsingException(index,"query_string must be provided with a [query]");
  }
  if (analyzer == null) {
    analyzer=parseContext.mapperService().searchAnalyzer();
  }
  MapperQueryParser queryParser;
  if (fields != null) {
    if (fields.size() == 1) {
      queryParser=new MapperQueryParser(fields.get(0),analyzer,parseContext);
    }
 else {
      MultiFieldMapperQueryParser mQueryParser=new MultiFieldMapperQueryParser(fields,boosts,analyzer,parseContext);
      mQueryParser.setTieBreaker(tieBreaker);
      mQueryParser.setUseDisMax(useDisMax);
      queryParser=mQueryParser;
    }
  }
 else {
    queryParser=new MapperQueryParser(defaultField,analyzer,parseContext);
  }
  queryParser.setEnablePositionIncrements(enablePositionIncrements);
  queryParser.setLowercaseExpandedTerms(lowercaseExpandedTerms);
  queryParser.setAllowLeadingWildcard(allowLeadingWildcard);
  queryParser.setDefaultOperator(defaultOperator);
  queryParser.setFuzzyMinSim(fuzzyMinSim);
  queryParser.setFuzzyPrefixLength(fuzzyPrefixLength);
  queryParser.setPhraseSlop(phraseSlop);
  if (escape) {
    queryString=QueryParser.escape(queryString);
  }
  try {
    Query query=queryParser.parse(queryString);
    query.setBoost(boost);
    return optimizeQuery(fixNegativeQueryIfNeeded(query));
  }
 catch (  ParseException e) {
    throw new QueryParsingException(index,"Failed to parse query [" + queryString + "]",e);
  }
}
