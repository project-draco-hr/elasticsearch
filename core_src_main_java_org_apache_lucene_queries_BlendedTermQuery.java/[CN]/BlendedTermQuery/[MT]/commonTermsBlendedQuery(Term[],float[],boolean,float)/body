{
  return new BlendedTermQuery(terms){
    @Override protected Query topLevelQuery(    Term[] terms,    TermContext[] ctx,    int[] docFreqs,    int maxDoc){
      BooleanQuery query=new BooleanQuery(true);
      BooleanQuery high=new BooleanQuery(disableCoord);
      BooleanQuery low=new BooleanQuery(disableCoord);
      for (int i=0; i < terms.length; i++) {
        TermQuery termQuery=new TermQuery(terms[i],ctx[i]);
        if (boosts != null) {
          termQuery.setBoost(boosts[i]);
        }
        if ((maxTermFrequency >= 1f && docFreqs[i] > maxTermFrequency) || (docFreqs[i] > (int)Math.ceil(maxTermFrequency * (float)maxDoc))) {
          high.add(termQuery,BooleanClause.Occur.SHOULD);
        }
 else {
          low.add(termQuery,BooleanClause.Occur.SHOULD);
        }
      }
      if (low.clauses().isEmpty()) {
        for (        BooleanClause booleanClause : high) {
          booleanClause.setOccur(BooleanClause.Occur.MUST);
        }
        return high;
      }
 else       if (high.clauses().isEmpty()) {
        return low;
      }
 else {
        query.add(high,BooleanClause.Occur.SHOULD);
        query.add(low,BooleanClause.Occur.MUST);
        return query;
      }
    }
  }
;
}
