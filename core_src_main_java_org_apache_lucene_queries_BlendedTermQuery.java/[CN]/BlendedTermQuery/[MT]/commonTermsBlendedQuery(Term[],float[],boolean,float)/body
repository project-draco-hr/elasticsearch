{
  return new BlendedTermQuery(terms,boosts){
    @Override protected Query topLevelQuery(    Term[] terms,    TermContext[] ctx,    int[] docFreqs,    int maxDoc){
      BooleanQuery.Builder highBuilder=new BooleanQuery.Builder();
      highBuilder.setDisableCoord(disableCoord);
      BooleanQuery.Builder lowBuilder=new BooleanQuery.Builder();
      lowBuilder.setDisableCoord(disableCoord);
      for (int i=0; i < terms.length; i++) {
        TermQuery termQuery=new TermQuery(terms[i],ctx[i]);
        if (boosts != null) {
          termQuery.setBoost(boosts[i]);
        }
        if ((maxTermFrequency >= 1f && docFreqs[i] > maxTermFrequency) || (docFreqs[i] > (int)Math.ceil(maxTermFrequency * (float)maxDoc))) {
          highBuilder.add(termQuery,BooleanClause.Occur.SHOULD);
        }
 else {
          lowBuilder.add(termQuery,BooleanClause.Occur.SHOULD);
        }
      }
      BooleanQuery high=highBuilder.build();
      BooleanQuery low=lowBuilder.build();
      if (low.clauses().isEmpty()) {
        BooleanQuery.Builder queryBuilder=new BooleanQuery.Builder();
        queryBuilder.setDisableCoord(disableCoord);
        for (        BooleanClause booleanClause : high) {
          queryBuilder.add(booleanClause.getQuery(),Occur.MUST);
        }
        return queryBuilder.build();
      }
 else       if (high.clauses().isEmpty()) {
        return low;
      }
 else {
        return new BooleanQuery.Builder().setDisableCoord(true).add(high,BooleanClause.Occur.SHOULD).add(low,BooleanClause.Occur.MUST).build();
      }
    }
  }
;
}
