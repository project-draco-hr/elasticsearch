{
  super.writeTo(out);
  out.writeVInt(version.id);
  Build.writeBuild(build,out);
  if (getServiceAttributes() == null) {
    out.writeBoolean(false);
  }
 else {
    out.writeBoolean(true);
    out.writeVInt(serviceAttributes.size());
    for (    Map.Entry<String,String> entry : serviceAttributes.entrySet()) {
      out.writeString(entry.getKey());
      out.writeString(entry.getValue());
    }
  }
  if (settings == null) {
    out.writeBoolean(false);
  }
 else {
    out.writeBoolean(true);
    ImmutableSettings.writeSettingsToStream(settings,out);
  }
  if (os == null) {
    out.writeBoolean(false);
  }
 else {
    out.writeBoolean(true);
    os.writeTo(out);
  }
  if (process == null) {
    out.writeBoolean(false);
  }
 else {
    out.writeBoolean(true);
    process.writeTo(out);
  }
  if (jvm == null) {
    out.writeBoolean(false);
  }
 else {
    out.writeBoolean(true);
    jvm.writeTo(out);
  }
  if (threadPool == null) {
    out.writeBoolean(false);
  }
 else {
    out.writeBoolean(true);
    threadPool.writeTo(out);
  }
  if (network == null) {
    out.writeBoolean(false);
  }
 else {
    out.writeBoolean(true);
    network.writeTo(out);
  }
  if (transport == null) {
    out.writeBoolean(false);
  }
 else {
    out.writeBoolean(true);
    transport.writeTo(out);
  }
  if (http == null) {
    out.writeBoolean(false);
  }
 else {
    out.writeBoolean(true);
    http.writeTo(out);
  }
  if (plugins == null) {
    out.writeBoolean(false);
  }
 else {
    out.writeBoolean(true);
    plugins.writeTo(out);
  }
}
