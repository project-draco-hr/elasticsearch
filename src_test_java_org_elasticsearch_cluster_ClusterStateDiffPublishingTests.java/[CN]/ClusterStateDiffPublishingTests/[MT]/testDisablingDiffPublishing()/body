{
  Settings noDiffPublishingSettings=ImmutableSettings.builder().put(DiscoverySettings.PUBLISH_DIFF_ENABLE,false).build();
  MockNode nodeA=createMockNode("nodeA",noDiffPublishingSettings,Version.CURRENT,new PublishClusterStateAction.NewClusterStateListener(){
    @Override public void onNewClusterState(    ClusterState clusterState,    NewStateProcessed newStateProcessed){
      fail("Shouldn't send cluster state to myself");
    }
  }
);
  MockNode nodeB=createMockNode("nodeB",noDiffPublishingSettings,Version.CURRENT,new PublishClusterStateAction.NewClusterStateListener(){
    @Override public void onNewClusterState(    ClusterState clusterState,    NewStateProcessed newStateProcessed){
      logger.debug("Got cluster state update, version [{}], guid [{}], from diff [{}]",clusterState.version(),clusterState.uuid(),clusterState.wasReadFromDiff());
      assertFalse(clusterState.wasReadFromDiff());
      newStateProcessed.onNewClusterStateProcessed();
    }
  }
);
  DiscoveryNodes discoveryNodes=DiscoveryNodes.builder().put(nodeA.discoveryNode).localNodeId(nodeA.discoveryNode.id()).build();
  ClusterState clusterState=ClusterState.builder(new ClusterName("test")).nodes(discoveryNodes).build();
  discoveryNodes=DiscoveryNodes.builder(discoveryNodes).put(nodeB.discoveryNode).build();
  ClusterState previousClusterState=clusterState;
  clusterState=ClusterState.builder(clusterState).nodes(discoveryNodes).incrementVersion().build();
  publishStateDiffAndWait(nodeA.action,clusterState,previousClusterState);
  previousClusterState=clusterState;
  clusterState=ClusterState.builder(clusterState).blocks(ClusterBlocks.builder().addGlobalBlock(MetaData.CLUSTER_READ_ONLY_BLOCK)).incrementVersion().build();
  publishStateDiffAndWait(nodeA.action,clusterState,previousClusterState);
}
