{
  MockNewClusterStateListener mockListenerA=new MockNewClusterStateListener();
  MockNode nodeA=createMockNode("nodeA",ImmutableSettings.EMPTY,Version.CURRENT,mockListenerA);
  MockNewClusterStateListener mockListenerB=new MockNewClusterStateListener();
  MockNode nodeB=createMockNode("nodeB",ImmutableSettings.EMPTY,Version.CURRENT,mockListenerB);
  DiscoveryNodes discoveryNodes=DiscoveryNodes.builder().put(nodeA.discoveryNode).localNodeId(nodeA.discoveryNode.id()).build();
  ClusterState clusterState=ClusterState.builder(new ClusterName("test")).nodes(discoveryNodes).build();
  discoveryNodes=DiscoveryNodes.builder(discoveryNodes).put(nodeB.discoveryNode).build();
  ClusterState previousClusterState=clusterState;
  clusterState=ClusterState.builder(clusterState).nodes(discoveryNodes).incrementVersion().build();
  mockListenerB.add(new NewClusterStateExpectation(){
    @Override public void check(    ClusterState clusterState,    PublishClusterStateAction.NewClusterStateListener.NewStateProcessed newStateProcessed){
      assertFalse(clusterState.wasReadFromDiff());
    }
  }
);
  publishStateDiffAndWait(nodeA.action,clusterState,previousClusterState);
  previousClusterState=clusterState;
  clusterState=ClusterState.builder(clusterState).blocks(ClusterBlocks.builder().addGlobalBlock(MetaData.CLUSTER_READ_ONLY_BLOCK)).incrementVersion().build();
  mockListenerB.add(new NewClusterStateExpectation(){
    @Override public void check(    ClusterState clusterState,    PublishClusterStateAction.NewClusterStateListener.NewStateProcessed newStateProcessed){
      assertTrue(clusterState.wasReadFromDiff());
      assertThat(clusterState.blocks().global().size(),equalTo(1));
    }
  }
);
  publishStateDiffAndWait(nodeA.action,clusterState,previousClusterState);
  previousClusterState=clusterState;
  clusterState=ClusterState.builder(clusterState).blocks(ClusterBlocks.EMPTY_CLUSTER_BLOCK).incrementVersion().build();
  mockListenerB.add(new NewClusterStateExpectation(){
    @Override public void check(    ClusterState clusterState,    PublishClusterStateAction.NewClusterStateListener.NewStateProcessed newStateProcessed){
      assertTrue(clusterState.wasReadFromDiff());
      assertThat(clusterState.blocks().global().size(),equalTo(0));
    }
  }
);
  publishStateDiffAndWait(nodeA.action,clusterState,previousClusterState);
  MockNewClusterStateListener mockListenerC=new MockNewClusterStateListener();
  MockNode nodeC=createMockNode("nodeC",ImmutableSettings.EMPTY,Version.CURRENT,mockListenerC);
  previousClusterState=clusterState;
  discoveryNodes=DiscoveryNodes.builder(discoveryNodes).put(nodeC.discoveryNode).build();
  clusterState=ClusterState.builder(clusterState).nodes(discoveryNodes).incrementVersion().build();
  mockListenerB.add(new NewClusterStateExpectation(){
    @Override public void check(    ClusterState clusterState,    PublishClusterStateAction.NewClusterStateListener.NewStateProcessed newStateProcessed){
      assertTrue(clusterState.wasReadFromDiff());
      assertThat(clusterState.blocks().global().size(),equalTo(0));
    }
  }
);
  mockListenerC.add(new NewClusterStateExpectation(){
    @Override public void check(    ClusterState clusterState,    PublishClusterStateAction.NewClusterStateListener.NewStateProcessed newStateProcessed){
      assertFalse(clusterState.wasReadFromDiff());
    }
  }
);
  publishStateDiffAndWait(nodeA.action,clusterState,previousClusterState);
  previousClusterState=clusterState;
  MetaData metaData=MetaData.builder(clusterState.metaData()).transientSettings(ImmutableSettings.settingsBuilder().put("foo","bar").build()).build();
  clusterState=ClusterState.builder(clusterState).metaData(metaData).incrementVersion().build();
  NewClusterStateExpectation expectation=new NewClusterStateExpectation(){
    @Override public void check(    ClusterState clusterState,    PublishClusterStateAction.NewClusterStateListener.NewStateProcessed newStateProcessed){
      assertTrue(clusterState.wasReadFromDiff());
      assertThat(clusterState.blocks().global().size(),equalTo(0));
    }
  }
;
  mockListenerB.add(expectation);
  mockListenerC.add(expectation);
  publishStateDiffAndWait(nodeA.action,clusterState,previousClusterState);
  previousClusterState=ClusterState.builder(clusterState).incrementVersion().build();
  clusterState=ClusterState.builder(clusterState).incrementVersion().build();
  expectation=new NewClusterStateExpectation(){
    @Override public void check(    ClusterState clusterState,    PublishClusterStateAction.NewClusterStateListener.NewStateProcessed newStateProcessed){
      assertFalse(clusterState.wasReadFromDiff());
    }
  }
;
  mockListenerB.add(expectation);
  mockListenerC.add(expectation);
  publishStateDiffAndWait(nodeA.action,clusterState,previousClusterState);
  previousClusterState=ClusterState.builder(clusterState).incrementVersion().build();
  clusterState=ClusterState.builder(clusterState).incrementVersion().build();
  expectation=new NewClusterStateExpectation(){
    @Override public void check(    ClusterState clusterState,    PublishClusterStateAction.NewClusterStateListener.NewStateProcessed newStateProcessed){
      assertFalse(clusterState.wasReadFromDiff());
    }
  }
;
  mockListenerB.add(expectation);
  mockListenerC.add(expectation);
  publishStateDiffAndWait(nodeA.action,clusterState,previousClusterState);
  discoveryNodes=DiscoveryNodes.builder(discoveryNodes).put(nodeA.discoveryNode).put(nodeB.discoveryNode).put(nodeC.discoveryNode).build();
  previousClusterState=ClusterState.builder(new ClusterName("test")).nodes(discoveryNodes).build();
  clusterState=ClusterState.builder(clusterState).nodes(discoveryNodes).incrementVersion().build();
  expectation=new NewClusterStateExpectation(){
    @Override public void check(    ClusterState clusterState,    PublishClusterStateAction.NewClusterStateListener.NewStateProcessed newStateProcessed){
      assertFalse(clusterState.wasReadFromDiff());
    }
  }
;
  mockListenerA.add(expectation);
  mockListenerC.add(expectation);
  publishStateDiffAndWait(nodeB.action,clusterState,previousClusterState);
}
