{
  XContentParser parser=parseContext.parser();
  XContentParser.Token token;
  String topLevelFieldName=null;
  HighlightBuilder highlightBuilder=new HighlightBuilder();
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      topLevelFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if (parseContext.parseFieldMatcher().match(topLevelFieldName,PRE_TAGS_FIELD)) {
        List<String> preTagsList=new ArrayList<>();
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          preTagsList.add(parser.text());
        }
        highlightBuilder.preTags(preTagsList.toArray(new String[preTagsList.size()]));
      }
 else       if (parseContext.parseFieldMatcher().match(topLevelFieldName,POST_TAGS_FIELD)) {
        List<String> postTagsList=new ArrayList<>();
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          postTagsList.add(parser.text());
        }
        highlightBuilder.postTags(postTagsList.toArray(new String[postTagsList.size()]));
      }
 else       if (parseContext.parseFieldMatcher().match(topLevelFieldName,FIELDS_FIELD)) {
        highlightBuilder.useExplicitFieldOrder(true);
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          if (token == XContentParser.Token.START_OBJECT) {
            String highlightFieldName=null;
            while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
              if (token == XContentParser.Token.FIELD_NAME) {
                if (highlightFieldName != null) {
                  throw new ParsingException(parser.getTokenLocation(),"If highlighter fields is an array it must contain objects containing a single field");
                }
                highlightFieldName=parser.currentName();
              }
 else               if (token == XContentParser.Token.START_OBJECT) {
                highlightBuilder.field(Field.fromXContent(highlightFieldName,parseContext));
              }
            }
          }
 else {
            throw new ParsingException(parser.getTokenLocation(),"If highlighter fields is an array it must contain objects containing a single field");
          }
        }
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"cannot parse array with name [{}]",topLevelFieldName);
      }
    }
 else     if (token.isValue()) {
      if (parseContext.parseFieldMatcher().match(topLevelFieldName,ORDER_FIELD)) {
        highlightBuilder.order(parser.text());
      }
 else       if (parseContext.parseFieldMatcher().match(topLevelFieldName,TAGS_SCHEMA_FIELD)) {
        highlightBuilder.tagsSchema(parser.text());
      }
 else       if (parseContext.parseFieldMatcher().match(topLevelFieldName,HIGHLIGHT_FILTER_FIELD)) {
        highlightBuilder.highlightFilter(parser.booleanValue());
      }
 else       if (parseContext.parseFieldMatcher().match(topLevelFieldName,FRAGMENT_SIZE_FIELD)) {
        highlightBuilder.fragmentSize(parser.intValue());
      }
 else       if (parseContext.parseFieldMatcher().match(topLevelFieldName,NUMBER_OF_FRAGMENTS_FIELD)) {
        highlightBuilder.numOfFragments(parser.intValue());
      }
 else       if (parseContext.parseFieldMatcher().match(topLevelFieldName,ENCODER_FIELD)) {
        highlightBuilder.encoder(parser.text());
      }
 else       if (parseContext.parseFieldMatcher().match(topLevelFieldName,REQUIRE_FIELD_MATCH_FIELD)) {
        highlightBuilder.requireFieldMatch(parser.booleanValue());
      }
 else       if (parseContext.parseFieldMatcher().match(topLevelFieldName,BOUNDARY_MAX_SCAN_FIELD)) {
        highlightBuilder.boundaryMaxScan(parser.intValue());
      }
 else       if (parseContext.parseFieldMatcher().match(topLevelFieldName,BOUNDARY_CHARS_FIELD)) {
        highlightBuilder.boundaryChars(parser.text().toCharArray());
      }
 else       if (parseContext.parseFieldMatcher().match(topLevelFieldName,TYPE_FIELD)) {
        highlightBuilder.highlighterType(parser.text());
      }
 else       if (parseContext.parseFieldMatcher().match(topLevelFieldName,FRAGMENTER_FIELD)) {
        highlightBuilder.fragmenter(parser.text());
      }
 else       if (parseContext.parseFieldMatcher().match(topLevelFieldName,NO_MATCH_SIZE_FIELD)) {
        highlightBuilder.noMatchSize(parser.intValue());
      }
 else       if (parseContext.parseFieldMatcher().match(topLevelFieldName,FORCE_SOURCE_FIELD)) {
        highlightBuilder.forceSource(parser.booleanValue());
      }
 else       if (parseContext.parseFieldMatcher().match(topLevelFieldName,PHRASE_LIMIT_FIELD)) {
        highlightBuilder.phraseLimit(parser.intValue());
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"unexpected fieldname [{}]",topLevelFieldName);
      }
    }
 else     if (token == XContentParser.Token.START_OBJECT && topLevelFieldName != null) {
      if (parseContext.parseFieldMatcher().match(topLevelFieldName,OPTIONS_FIELD)) {
        highlightBuilder.options(parser.map());
      }
 else       if (parseContext.parseFieldMatcher().match(topLevelFieldName,FIELDS_FIELD)) {
        String highlightFieldName=null;
        while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
          if (token == XContentParser.Token.FIELD_NAME) {
            highlightFieldName=parser.currentName();
          }
 else           if (token == XContentParser.Token.START_OBJECT) {
            highlightBuilder.field(Field.fromXContent(highlightFieldName,parseContext));
          }
        }
      }
 else       if (parseContext.parseFieldMatcher().match(topLevelFieldName,HIGHLIGHT_QUERY_FIELD)) {
        highlightBuilder.highlightQuery(parseContext.parseInnerQueryBuilder());
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"cannot parse object with name [{}]",topLevelFieldName);
      }
    }
 else     if (topLevelFieldName != null) {
      throw new ParsingException(parser.getTokenLocation(),"unexpected token [{}] after [{}]",token,topLevelFieldName);
    }
  }
  if (highlightBuilder.preTags() != null && highlightBuilder.postTags() == null) {
    throw new ParsingException(parser.getTokenLocation(),"Highlighter global preTags are set, but global postTags are not set");
  }
  return highlightBuilder;
}
