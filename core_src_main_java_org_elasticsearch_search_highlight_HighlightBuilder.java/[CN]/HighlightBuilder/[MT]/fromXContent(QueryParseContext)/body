{
  XContentParser parser=parseContext.parser();
  XContentParser.Token token;
  String topLevelFieldName=null;
  HighlightBuilder highlightBuilder=new HighlightBuilder();
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      topLevelFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if ("pre_tags".equals(topLevelFieldName) || "preTags".equals(topLevelFieldName)) {
        List<String> preTagsList=new ArrayList<>();
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          preTagsList.add(parser.text());
        }
        highlightBuilder.preTags(preTagsList.toArray(new String[preTagsList.size()]));
      }
 else       if ("post_tags".equals(topLevelFieldName) || "postTags".equals(topLevelFieldName)) {
        List<String> postTagsList=new ArrayList<>();
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          postTagsList.add(parser.text());
        }
        highlightBuilder.postTags(postTagsList.toArray(new String[postTagsList.size()]));
      }
 else       if ("fields".equals(topLevelFieldName)) {
        highlightBuilder.useExplicitFieldOrder(true);
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          if (token == XContentParser.Token.START_OBJECT) {
            String highlightFieldName=null;
            while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
              if (token == XContentParser.Token.FIELD_NAME) {
                if (highlightFieldName != null) {
                  throw new IllegalArgumentException("If highlighter fields is an array it must contain objects containing a single field");
                }
                highlightFieldName=parser.currentName();
              }
 else               if (token == XContentParser.Token.START_OBJECT) {
                highlightBuilder.field(Field.fromXContent(highlightFieldName,parseContext));
              }
            }
          }
 else {
            throw new IllegalArgumentException("If highlighter fields is an array it must contain objects containing a single field");
          }
        }
      }
    }
 else     if (token.isValue()) {
      if ("order".equals(topLevelFieldName)) {
        highlightBuilder.order(parser.text());
      }
 else       if ("tags_schema".equals(topLevelFieldName) || "tagsSchema".equals(topLevelFieldName)) {
        highlightBuilder.tagsSchema(parser.text());
      }
 else       if ("highlight_filter".equals(topLevelFieldName) || "highlightFilter".equals(topLevelFieldName)) {
        highlightBuilder.highlightFilter(parser.booleanValue());
      }
 else       if ("fragment_size".equals(topLevelFieldName) || "fragmentSize".equals(topLevelFieldName)) {
        highlightBuilder.fragmentSize(parser.intValue());
      }
 else       if ("number_of_fragments".equals(topLevelFieldName) || "numberOfFragments".equals(topLevelFieldName)) {
        highlightBuilder.numOfFragments(parser.intValue());
      }
 else       if ("encoder".equals(topLevelFieldName)) {
        highlightBuilder.encoder(parser.text());
      }
 else       if ("require_field_match".equals(topLevelFieldName) || "requireFieldMatch".equals(topLevelFieldName)) {
        highlightBuilder.requireFieldMatch(parser.booleanValue());
      }
 else       if ("boundary_max_scan".equals(topLevelFieldName) || "boundaryMaxScan".equals(topLevelFieldName)) {
        highlightBuilder.boundaryMaxScan(parser.intValue());
      }
 else       if ("boundary_chars".equals(topLevelFieldName) || "boundaryChars".equals(topLevelFieldName)) {
        highlightBuilder.boundaryChars(parser.text().toCharArray());
      }
 else       if ("type".equals(topLevelFieldName)) {
        highlightBuilder.highlighterType(parser.text());
      }
 else       if ("fragmenter".equals(topLevelFieldName)) {
        highlightBuilder.fragmenter(parser.text());
      }
 else       if ("no_match_size".equals(topLevelFieldName) || "noMatchSize".equals(topLevelFieldName)) {
        highlightBuilder.noMatchSize(parser.intValue());
      }
 else       if ("force_source".equals(topLevelFieldName) || "forceSource".equals(topLevelFieldName)) {
        highlightBuilder.forceSource(parser.booleanValue());
      }
 else       if ("phrase_limit".equals(topLevelFieldName) || "phraseLimit".equals(topLevelFieldName)) {
        highlightBuilder.phraseLimit(parser.intValue());
      }
    }
 else     if (token == XContentParser.Token.START_OBJECT && "options".equals(topLevelFieldName)) {
      highlightBuilder.options(parser.map());
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("fields".equals(topLevelFieldName)) {
        String highlightFieldName=null;
        while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
          if (token == XContentParser.Token.FIELD_NAME) {
            highlightFieldName=parser.currentName();
          }
 else           if (token == XContentParser.Token.START_OBJECT) {
            highlightBuilder.field(Field.fromXContent(highlightFieldName,parseContext));
          }
        }
      }
 else       if ("highlight_query".equals(topLevelFieldName) || "highlightQuery".equals(topLevelFieldName)) {
        highlightBuilder.highlightQuery(parseContext.parseInnerQueryBuilder());
      }
    }
  }
  if (highlightBuilder.preTags() != null && highlightBuilder.postTags() == null) {
    throw new IllegalArgumentException("Highlighter global preTags are set, but global postTags are not set");
  }
  return highlightBuilder;
}
