{
  Settings settings=settingsBuilder().put("index.engine.robin.refreshInterval","-1").put("gateway.type","local").put(SETTING_NUMBER_OF_SHARDS,2).put(SETTING_NUMBER_OF_REPLICAS,1).build();
  Node node1=nodeBuilder().settings(settingsBuilder().put(settings).put("name","node1")).node();
  Node node2=nodeBuilder().settings(settingsBuilder().put(settings).put("name","node2")).node();
  Node clientNode=nodeBuilder().settings(settingsBuilder().put(settings).put("name","client")).client(true).node();
  Client client=clientNode.client();
  long COUNT=SizeValue.parseSizeValue("1m").singles();
  int CHILD_COUNT=5;
  int BATCH=100;
  int QUERY_WARMUP=20;
  int QUERY_COUNT=50;
  Thread.sleep(10000);
  try {
    client.admin().indices().create(createIndexRequest("test")).actionGet();
    client.admin().indices().preparePutMapping("test").setType("child").setSource(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_parent").field("type","parent").endObject().endObject().endObject()).execute().actionGet();
    Thread.sleep(5000);
    StopWatch stopWatch=new StopWatch().start();
    System.out.println("--> Indexing [" + COUNT + "] ...");
    long ITERS=COUNT / BATCH;
    long i=1;
    int counter=0;
    for (; i <= ITERS; i++) {
      BulkRequestBuilder request=client.prepareBulk();
      for (int j=0; j < BATCH; j++) {
        counter++;
        request.add(Requests.indexRequest("test").type("parent").id(Integer.toString(counter)).source(parentSource(Integer.toString(counter),"test" + counter)));
        for (int k=0; k < CHILD_COUNT; k++) {
          request.add(Requests.indexRequest("test").type("child").id(Integer.toString(counter) + "_" + k).parent(Integer.toString(counter)).source(childSource(Integer.toString(counter),"tag" + k)));
        }
      }
      BulkResponse response=request.execute().actionGet();
      if (response.hasFailures()) {
        System.err.println("--> failures...");
      }
      if (((i * BATCH) % 10000) == 0) {
        System.out.println("--> Indexed " + (i * BATCH) * (1 + CHILD_COUNT) + " took " + stopWatch.stop().lastTaskTime());
        stopWatch.start();
      }
    }
    System.out.println("--> Indexing took " + stopWatch.totalTime() + ", TPS "+ (((double)(COUNT * (1 + CHILD_COUNT))) / stopWatch.totalTime().secondsFrac()));
  }
 catch (  Exception e) {
    System.out.println("--> Index already exists, ignoring indexing phase, waiting for green");
    ClusterHealthResponse clusterHealthResponse=client.admin().cluster().prepareHealth().setWaitForGreenStatus().setTimeout("10m").execute().actionGet();
    if (clusterHealthResponse.timedOut()) {
      System.err.println("--> Timed out waiting for cluster health");
    }
  }
  client.admin().indices().prepareRefresh().execute().actionGet();
  System.out.println("--> Number of docs in index: " + client.prepareCount().setQuery(matchAllQuery()).execute().actionGet().count());
  System.out.println("--> Running just child query");
  for (int j=0; j < QUERY_WARMUP; j++) {
    SearchResponse searchResponse=client.prepareSearch().setQuery(termQuery("child.tag","tag1")).execute().actionGet();
    if (j == 0) {
      System.out.println("--> Warmup took: " + searchResponse.took());
    }
    if (searchResponse.hits().totalHits() != COUNT) {
      System.err.println("--> mismatch on hits");
    }
  }
  long totalQueryTime=0;
  for (int j=0; j < QUERY_COUNT; j++) {
    SearchResponse searchResponse=client.prepareSearch().setQuery(termQuery("child.tag","tag1")).execute().actionGet();
    if (searchResponse.hits().totalHits() != COUNT) {
      System.err.println("--> mismatch on hits");
    }
    totalQueryTime+=searchResponse.tookInMillis();
  }
  System.out.println("--> Just Child Query Avg: " + (totalQueryTime / QUERY_COUNT) + "ms");
  System.out.println("--> Running has_child query");
  for (int j=0; j < QUERY_WARMUP; j++) {
    SearchResponse searchResponse=client.prepareSearch().setQuery(hasChildQuery("child",termQuery("tag","tag1"))).execute().actionGet();
    if (searchResponse.failedShards() > 0) {
      System.err.println("Search Failures " + Arrays.toString(searchResponse.shardFailures()));
    }
    if (searchResponse.hits().totalHits() != COUNT) {
      System.err.println("--> mismatch on hits [" + j + "], got ["+ searchResponse.hits().totalHits()+ "], expected ["+ COUNT+ "]");
    }
  }
  totalQueryTime=0;
  for (int j=0; j < QUERY_COUNT; j++) {
    SearchResponse searchResponse=client.prepareSearch().setQuery(hasChildQuery("child",termQuery("tag","tag1"))).execute().actionGet();
    if (searchResponse.failedShards() > 0) {
      System.err.println("Search Failures " + Arrays.toString(searchResponse.shardFailures()));
    }
    if (searchResponse.hits().totalHits() != COUNT) {
      System.err.println("--> mismatch on hits [" + j + "], got ["+ searchResponse.hits().totalHits()+ "], expected ["+ COUNT+ "]");
    }
    totalQueryTime+=searchResponse.tookInMillis();
  }
  System.out.println("--> has_child Query Avg: " + (totalQueryTime / QUERY_COUNT) + "ms");
  System.out.println("--> Running top_children query");
  for (int j=0; j < QUERY_WARMUP; j++) {
    SearchResponse searchResponse=client.prepareSearch().setQuery(topChildrenQuery("child",termQuery("tag","tag1"))).execute().actionGet();
  }
  totalQueryTime=0;
  for (int j=0; j < QUERY_COUNT; j++) {
    SearchResponse searchResponse=client.prepareSearch().setQuery(topChildrenQuery("child",termQuery("tag","tag1"))).execute().actionGet();
    totalQueryTime+=searchResponse.tookInMillis();
  }
  System.out.println("--> top_children Query Avg: " + (totalQueryTime / QUERY_COUNT) + "ms");
  clientNode.close();
  node1.close();
  node2.close();
}
