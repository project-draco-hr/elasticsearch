{
  Settings settings=settingsBuilder().put("index.engine.robin.refreshInterval","-1").put("gateway.type","local").put(SETTING_NUMBER_OF_SHARDS,1).put(SETTING_NUMBER_OF_REPLICAS,0).build();
  Node node1=nodeBuilder().settings(settingsBuilder().put(settings).put("name","node1")).node();
  Client client=node1.client();
  long COUNT=SizeValue.parseSizeValue("1m").singles();
  int CHILD_COUNT=5;
  int BATCH=100;
  int QUERY_WARMUP=20;
  int QUERY_COUNT=50;
  String indexName="test";
  Thread.sleep(10000);
  try {
    client.admin().indices().create(createIndexRequest(indexName)).actionGet();
    client.admin().indices().preparePutMapping(indexName).setType("child").setSource(XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_parent").field("type","parent").endObject().endObject().endObject()).execute().actionGet();
    Thread.sleep(5000);
    StopWatch stopWatch=new StopWatch().start();
    System.out.println("--> Indexing [" + COUNT + "] parent document and ["+ (COUNT * CHILD_COUNT)+ " child documents");
    long ITERS=COUNT / BATCH;
    long i=1;
    int counter=0;
    for (; i <= ITERS; i++) {
      BulkRequestBuilder request=client.prepareBulk();
      for (int j=0; j < BATCH; j++) {
        counter++;
        request.add(Requests.indexRequest(indexName).setType("parent").setId(Integer.toString(counter)).setSource(parentSource(Integer.toString(counter),"test" + counter)));
        for (int k=0; k < CHILD_COUNT; k++) {
          request.add(Requests.indexRequest(indexName).setType("child").setId(Integer.toString(counter) + "_" + k).setParent(Integer.toString(counter)).setSource(childSource(Integer.toString(counter),"tag" + k)));
        }
      }
      BulkResponse response=request.execute().actionGet();
      if (response.hasFailures()) {
        System.err.println("--> failures...");
      }
      if (((i * BATCH) % 10000) == 0) {
        System.out.println("--> Indexed " + (i * BATCH) * (1 + CHILD_COUNT) + " took " + stopWatch.stop().lastTaskTime());
        stopWatch.start();
      }
    }
    System.out.println("--> Indexing took " + stopWatch.totalTime() + ", TPS "+ (((double)(COUNT * (1 + CHILD_COUNT))) / stopWatch.totalTime().secondsFrac()));
  }
 catch (  Exception e) {
    System.out.println("--> Index already exists, ignoring indexing phase, waiting for green");
    ClusterHealthResponse clusterHealthResponse=client.admin().cluster().prepareHealth(indexName).setWaitForGreenStatus().setTimeout("10m").execute().actionGet();
    if (clusterHealthResponse.isTimedOut()) {
      System.err.println("--> Timed out waiting for cluster health");
    }
  }
  client.admin().indices().prepareRefresh().execute().actionGet();
  System.out.println("--> Number of docs in index: " + client.prepareCount().setQuery(matchAllQuery()).execute().actionGet().getCount());
  System.out.println("--> Running just child query");
  for (int j=0; j < QUERY_WARMUP; j++) {
    SearchResponse searchResponse=client.prepareSearch().setQuery(termQuery("child.tag","tag1")).execute().actionGet();
    if (j == 0) {
      System.out.println("--> Warmup took: " + searchResponse.getTook());
    }
    if (searchResponse.getHits().totalHits() != COUNT) {
      System.err.println("--> mismatch on hits");
    }
  }
  long totalQueryTime=0;
  for (int j=0; j < QUERY_COUNT; j++) {
    SearchResponse searchResponse=client.prepareSearch(indexName).setQuery(termQuery("child.tag","tag1")).execute().actionGet();
    if (searchResponse.getHits().totalHits() != COUNT) {
      System.err.println("--> mismatch on hits");
    }
    totalQueryTime+=searchResponse.getTookInMillis();
  }
  System.out.println("--> Just Child Query Avg: " + (totalQueryTime / QUERY_COUNT) + "ms");
  NodesStatsResponse statsResponse=client.admin().cluster().prepareNodesStats().setJvm(true).execute().actionGet();
  System.out.println("--> Committed heap size: " + statsResponse.getNodes()[0].getJvm().getMem().getHeapCommitted());
  System.out.println("--> Used heap size: " + statsResponse.getNodes()[0].getJvm().getMem().getHeapUsed());
  for (int j=0; j < QUERY_WARMUP; j++) {
    SearchResponse searchResponse=client.prepareSearch(indexName).setQuery(filteredQuery(matchAllQuery(),hasChildFilter("child",termQuery("tag","tag1")))).execute().actionGet();
    if (searchResponse.getFailedShards() > 0) {
      System.err.println("Search Failures " + Arrays.toString(searchResponse.getShardFailures()));
    }
    if (searchResponse.getHits().totalHits() != COUNT) {
      System.err.println("--> mismatch on hits [" + j + "], got ["+ searchResponse.getHits().totalHits()+ "], expected ["+ COUNT+ "]");
    }
  }
  totalQueryTime=0;
  for (int j=0; j < QUERY_COUNT; j++) {
    SearchResponse searchResponse=client.prepareSearch(indexName).setQuery(filteredQuery(matchAllQuery(),hasChildFilter("child",termQuery("tag","tag1")))).execute().actionGet();
    if (searchResponse.getFailedShards() > 0) {
      System.err.println("Search Failures " + Arrays.toString(searchResponse.getShardFailures()));
    }
    if (searchResponse.getHits().totalHits() != COUNT) {
      System.err.println("--> mismatch on hits [" + j + "], got ["+ searchResponse.getHits().totalHits()+ "], expected ["+ COUNT+ "]");
    }
    totalQueryTime+=searchResponse.getTookInMillis();
  }
  System.out.println("--> has_child filter Query Avg: " + (totalQueryTime / QUERY_COUNT) + "ms");
  System.out.println("--> Running has_child filter with match_all child query");
  totalQueryTime=0;
  for (int j=1; j <= QUERY_COUNT; j++) {
    SearchResponse searchResponse=client.prepareSearch(indexName).setQuery(filteredQuery(matchAllQuery(),hasChildFilter("child",matchAllQuery()))).execute().actionGet();
    if (searchResponse.getFailedShards() > 0) {
      System.err.println("Search Failures " + Arrays.toString(searchResponse.getShardFailures()));
    }
    long expected=(COUNT / BATCH) * BATCH;
    if (searchResponse.getHits().totalHits() != expected) {
      System.err.println("--> mismatch on hits [" + j + "], got ["+ searchResponse.getHits().totalHits()+ "], expected ["+ expected+ "]");
    }
    totalQueryTime+=searchResponse.getTookInMillis();
  }
  System.out.println("--> has_child filter with match_all child query, Query Avg: " + (totalQueryTime / QUERY_COUNT) + "ms");
  for (int j=0; j < QUERY_WARMUP; j++) {
    SearchResponse searchResponse=client.prepareSearch(indexName).setQuery(filteredQuery(matchAllQuery(),hasParentFilter("parent",termQuery("name","test1")))).execute().actionGet();
    if (searchResponse.getFailedShards() > 0) {
      System.err.println("Search Failures " + Arrays.toString(searchResponse.getShardFailures()));
    }
    if (searchResponse.getHits().totalHits() != CHILD_COUNT) {
      System.err.println("--> mismatch on hits [" + j + "], got ["+ searchResponse.getHits().totalHits()+ "], expected ["+ CHILD_COUNT+ "]");
    }
  }
  totalQueryTime=0;
  for (int j=1; j <= QUERY_COUNT; j++) {
    SearchResponse searchResponse=client.prepareSearch(indexName).setQuery(filteredQuery(matchAllQuery(),hasParentFilter("parent",termQuery("name","test1")))).execute().actionGet();
    if (searchResponse.getFailedShards() > 0) {
      System.err.println("Search Failures " + Arrays.toString(searchResponse.getShardFailures()));
    }
    if (searchResponse.getHits().totalHits() != CHILD_COUNT) {
      System.err.println("--> mismatch on hits [" + j + "], got ["+ searchResponse.getHits().totalHits()+ "], expected ["+ CHILD_COUNT+ "]");
    }
    totalQueryTime+=searchResponse.getTookInMillis();
  }
  System.out.println("--> has_parent filter Query Avg: " + (totalQueryTime / QUERY_COUNT) + "ms");
  System.out.println("--> Running has_parent filter with match_all parent query ");
  totalQueryTime=0;
  for (int j=1; j <= QUERY_COUNT; j++) {
    SearchResponse searchResponse=client.prepareSearch(indexName).setQuery(filteredQuery(matchAllQuery(),hasParentFilter("parent",matchAllQuery()))).execute().actionGet();
    if (searchResponse.getFailedShards() > 0) {
      System.err.println("Search Failures " + Arrays.toString(searchResponse.getShardFailures()));
    }
    if (searchResponse.getHits().totalHits() != 5000000) {
      System.err.println("--> mismatch on hits [" + j + "], got ["+ searchResponse.getHits().totalHits()+ "], expected ["+ 5000000+ "]");
    }
    totalQueryTime+=searchResponse.getTookInMillis();
  }
  System.out.println("--> has_parent filter with match_all parent query, Query Avg: " + (totalQueryTime / QUERY_COUNT) + "ms");
  System.out.println("--> Running top_children query");
  for (int j=0; j < QUERY_WARMUP; j++) {
    SearchResponse searchResponse=client.prepareSearch(indexName).setQuery(topChildrenQuery("child",termQuery("tag","tag1"))).execute().actionGet();
  }
  totalQueryTime=0;
  for (int j=0; j < QUERY_COUNT; j++) {
    SearchResponse searchResponse=client.prepareSearch(indexName).setQuery(topChildrenQuery("child",termQuery("tag","tag1"))).execute().actionGet();
    totalQueryTime+=searchResponse.getTookInMillis();
  }
  System.out.println("--> top_children Query Avg: " + (totalQueryTime / QUERY_COUNT) + "ms");
  System.out.println("--> Running top_children query, with match_all as child query");
  for (int j=0; j < QUERY_WARMUP; j++) {
    SearchResponse searchResponse=client.prepareSearch(indexName).setQuery(topChildrenQuery("child",matchAllQuery())).execute().actionGet();
  }
  totalQueryTime=0;
  for (int j=0; j < QUERY_COUNT; j++) {
    SearchResponse searchResponse=client.prepareSearch(indexName).setQuery(topChildrenQuery("child",matchAllQuery())).execute().actionGet();
    totalQueryTime+=searchResponse.getTookInMillis();
  }
  System.out.println("--> top_children, with match_all Query Avg: " + (totalQueryTime / QUERY_COUNT) + "ms");
  statsResponse=client.admin().cluster().prepareNodesStats().setJvm(true).setIndices(true).execute().actionGet();
  System.out.println("--> Id cache size: " + statsResponse.getNodes()[0].getIndices().getCache().getIdCacheSize());
  System.out.println("--> Used heap size: " + statsResponse.getNodes()[0].getJvm().getMem().getHeapUsed());
  System.out.println("--> Running has_child query with score type");
  for (int j=0; j < QUERY_WARMUP; j++) {
    SearchResponse searchResponse=client.prepareSearch(indexName).setQuery(hasChildQuery("child",termQuery("tag","tag1")).scoreType("max")).execute().actionGet();
    if (searchResponse.getHits().totalHits() != COUNT) {
      System.err.println("mismatch on hits");
    }
  }
  totalQueryTime=0;
  for (int j=0; j < QUERY_COUNT; j++) {
    SearchResponse searchResponse=client.prepareSearch(indexName).setQuery(hasChildQuery("child",termQuery("tag","tag1")).scoreType("max")).execute().actionGet();
    if (searchResponse.getHits().totalHits() != COUNT) {
      System.err.println("mismatch on hits");
    }
    totalQueryTime+=searchResponse.getTookInMillis();
  }
  System.out.println("--> has_child Query Avg: " + (totalQueryTime / QUERY_COUNT) + "ms");
  totalQueryTime=0;
  for (int j=0; j < QUERY_COUNT; j++) {
    SearchResponse searchResponse=client.prepareSearch(indexName).setQuery(hasChildQuery("child",matchAllQuery()).scoreType("max")).execute().actionGet();
    long expected=(COUNT / BATCH) * BATCH;
    if (searchResponse.getHits().totalHits() != expected) {
      System.err.println("mismatch on hits");
    }
    totalQueryTime+=searchResponse.getTookInMillis();
  }
  System.out.println("--> has_child query with match_all Query Avg: " + (totalQueryTime / QUERY_COUNT) + "ms");
  System.out.println("--> Running has_parent query with score type");
  for (int j=0; j < QUERY_WARMUP; j++) {
    SearchResponse searchResponse=client.prepareSearch(indexName).setQuery(hasParentQuery("parent",termQuery("name","test1")).scoreType("score")).execute().actionGet();
    if (searchResponse.getHits().totalHits() != CHILD_COUNT) {
      System.err.println("mismatch on hits");
    }
  }
  totalQueryTime=0;
  for (int j=0; j < QUERY_COUNT; j++) {
    SearchResponse searchResponse=client.prepareSearch(indexName).setQuery(hasParentQuery("parent",termQuery("name","test1")).scoreType("score")).execute().actionGet();
    if (searchResponse.getHits().totalHits() != CHILD_COUNT) {
      System.err.println("mismatch on hits");
    }
    totalQueryTime+=searchResponse.getTookInMillis();
  }
  System.out.println("--> has_parent Query Avg: " + (totalQueryTime / QUERY_COUNT) + "ms");
  totalQueryTime=0;
  for (int j=0; j < QUERY_COUNT; j++) {
    SearchResponse searchResponse=client.prepareSearch(indexName).setQuery(hasParentQuery("parent",matchAllQuery()).scoreType("score")).execute().actionGet();
    if (searchResponse.getHits().totalHits() != 5000000) {
      System.err.println("mismatch on hits");
    }
    totalQueryTime+=searchResponse.getTookInMillis();
  }
  System.out.println("--> has_parent query with match_all Query Avg: " + (totalQueryTime / QUERY_COUNT) + "ms");
  statsResponse=client.admin().cluster().prepareNodesStats().setJvm(true).setIndices(true).execute().actionGet();
  System.out.println("--> Id cache size: " + statsResponse.getNodes()[0].getIndices().getCache().getIdCacheSize());
  System.out.println("--> Used heap size: " + statsResponse.getNodes()[0].getJvm().getMem().getHeapUsed());
  client.close();
  node1.close();
}
