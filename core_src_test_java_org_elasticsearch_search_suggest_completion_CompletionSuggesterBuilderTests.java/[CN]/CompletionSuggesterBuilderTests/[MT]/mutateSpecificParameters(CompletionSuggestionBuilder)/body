{
switch (randomIntBetween(0,5)) {
case 0:
    List<String> payloads=new ArrayList<>();
  Collections.addAll(payloads,generateRandomStringArray(5,10,false,false));
builder.payload(payloads);
break;
case 1:
int nCatContext=randomIntBetween(1,5);
List<CategoryQueryContext> contexts=new ArrayList<>(nCatContext);
for (int i=0; i < nCatContext; i++) {
contexts.add(CategoryQueryContextTests.randomCategoryQueryContext());
}
builder.contexts(Collections.singletonMap(randomAsciiOfLength(10),contexts));
break;
case 2:
int nGeoContext=randomIntBetween(1,5);
List<GeoQueryContext> geoContexts=new ArrayList<>(nGeoContext);
for (int i=0; i < nGeoContext; i++) {
geoContexts.add(GeoQueryContextTests.randomGeoQueryContext());
}
builder.contexts(Collections.singletonMap(randomAsciiOfLength(10),geoContexts));
break;
case 3:
builder.prefix(randomAsciiOfLength(10),FuzzyOptionsTests.randomFuzzyOptions());
break;
case 4:
builder.prefix(randomAsciiOfLength(10),randomFrom(Fuzziness.ZERO,Fuzziness.ONE,Fuzziness.TWO));
break;
case 5:
builder.regex(randomAsciiOfLength(10),RegexOptionsTests.randomRegexOptions());
break;
default :
throw new IllegalStateException("should not through");
}
}
