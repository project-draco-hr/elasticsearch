{
switch (randomIntBetween(0,5)) {
case 0:
    List<String> payloads=new ArrayList<>();
  Collections.addAll(payloads,generateRandomStringArray(5,10,false,false));
builder.payload(payloads);
break;
case 1:
int numCategoryContext=randomIntBetween(1,5);
CategoryQueryContext[] categoryContexts=new CategoryQueryContext[numCategoryContext];
for (int i=0; i < numCategoryContext; i++) {
categoryContexts[i]=CategoryQueryContextTests.randomCategoryQueryContext();
}
builder.categoryContexts(randomAsciiOfLength(10),categoryContexts);
break;
case 2:
int numGeoContext=randomIntBetween(1,5);
GeoQueryContext[] geoContexts=new GeoQueryContext[numGeoContext];
for (int i=0; i < numGeoContext; i++) {
geoContexts[i]=GeoQueryContextTests.randomGeoQueryContext();
}
builder.geoContexts(randomAsciiOfLength(10),geoContexts);
break;
case 3:
builder.prefix(randomAsciiOfLength(10),FuzzyOptionsTests.randomFuzzyOptions());
break;
case 4:
builder.prefix(randomAsciiOfLength(10),randomFrom(Fuzziness.ZERO,Fuzziness.ONE,Fuzziness.TWO));
break;
case 5:
builder.regex(randomAsciiOfLength(10),RegexOptionsTests.randomRegexOptions());
break;
default :
throw new IllegalStateException("should not through");
}
}
