{
  final BuilderAndInfo builderAndInfo=new BuilderAndInfo();
  CompletionSuggestionBuilder testBuilder=new CompletionSuggestionBuilder(randomAsciiOfLengthBetween(2,20));
  setCommonPropertiesOnRandomBuilder(testBuilder);
switch (randomIntBetween(0,3)) {
case 0:
    testBuilder.prefix(randomAsciiOfLength(10));
  break;
case 1:
testBuilder.prefix(randomAsciiOfLength(10),FuzzyOptionsTests.randomFuzzyOptions());
break;
case 2:
testBuilder.prefix(randomAsciiOfLength(10),randomFrom(Fuzziness.ZERO,Fuzziness.ONE,Fuzziness.TWO));
break;
case 3:
testBuilder.regex(randomAsciiOfLength(10),RegexOptionsTests.randomRegexOptions());
break;
}
Map<String,List<? extends ToXContent>> contextMap=new HashMap<>();
if (randomBoolean()) {
int numContext=randomIntBetween(1,5);
List<CategoryQueryContext> contexts=new ArrayList<>(numContext);
for (int i=0; i < numContext; i++) {
contexts.add(CategoryQueryContextTests.randomCategoryQueryContext());
}
String name=randomAsciiOfLength(10);
contextMap.put(name,contexts);
builderAndInfo.catContexts.add(name);
}
if (randomBoolean()) {
int numContext=randomIntBetween(1,5);
List<GeoQueryContext> contexts=new ArrayList<>(numContext);
for (int i=0; i < numContext; i++) {
contexts.add(GeoQueryContextTests.randomGeoQueryContext());
}
String name=randomAsciiOfLength(10);
contextMap.put(name,contexts);
builderAndInfo.geoContexts.add(name);
}
testBuilder.contexts(contextMap);
builderAndInfo.builder=testBuilder;
return builderAndInfo;
}
