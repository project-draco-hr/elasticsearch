{
  MetaData metaData;
  try (InputStream blob=snapshotsBlobContainer.openInput(metaDataBlobName(snapshotId))){
    byte[] data=ByteStreams.toByteArray(blob);
    metaData=readMetaData(data);
  }
 catch (  FileNotFoundException|NoSuchFileException ex) {
    throw new SnapshotMissingException(snapshotId,ex);
  }
catch (  IOException ex) {
    throw new SnapshotException(snapshotId,"failed to get snapshots",ex);
  }
  MetaData.Builder metaDataBuilder=MetaData.builder(metaData);
  for (  String index : indices) {
    BlobPath indexPath=basePath().add("indices").add(index);
    BlobContainer indexMetaDataBlobContainer=blobStore().blobContainer(indexPath);
    try (InputStream blob=indexMetaDataBlobContainer.openInput(snapshotBlobName(snapshotId))){
      byte[] data=ByteStreams.toByteArray(blob);
      try (XContentParser parser=XContentHelper.createParser(data,0,data.length)){
        XContentParser.Token token;
        if ((token=parser.nextToken()) == XContentParser.Token.START_OBJECT) {
          IndexMetaData indexMetaData=IndexMetaData.Builder.fromXContent(parser);
          if ((token=parser.nextToken()) == XContentParser.Token.END_OBJECT) {
            metaDataBuilder.put(indexMetaData,false);
            continue;
          }
        }
        if (!ignoreIndexErrors) {
          throw new ElasticsearchParseException("unexpected token  [" + token + "]");
        }
 else {
          logger.warn("[{}] [{}] unexpected token while reading snapshot metadata [{}]",snapshotId,index,token);
        }
      }
     }
 catch (    IOException ex) {
      if (!ignoreIndexErrors) {
        throw new SnapshotException(snapshotId,"failed to read metadata",ex);
      }
 else {
        logger.warn("[{}] [{}] failed to read metadata for index",snapshotId,index,ex);
      }
    }
  }
  return metaDataBuilder.build();
}
