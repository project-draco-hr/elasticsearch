{
  if (closed) {
    throw new ElasticSearchIllegalStateException("Can't create shard [" + index.name() + "]["+ sShardId+ "], closed");
  }
  ShardId shardId=new ShardId(index,sShardId);
  if (shardsInjectors.containsKey(shardId.id())) {
    throw new IndexShardAlreadyExistsException(shardId + " already exists");
  }
  indicesLifecycle.beforeIndexShardCreated(shardId);
  logger.debug("creating shard_id [{}]",shardId.id());
  ModulesBuilder modules=new ModulesBuilder();
  modules.add(new ShardsPluginsModule(indexSettings,pluginsService));
  modules.add(new IndexShardModule(indexSettings,shardId));
  modules.add(new ShardIndexingModule());
  modules.add(new ShardSearchModule());
  modules.add(new ShardGetModule());
  modules.add(new StoreModule(indexSettings,injector.getInstance(IndexStore.class)));
  modules.add(new DeletionPolicyModule(indexSettings));
  modules.add(new MergePolicyModule(indexSettings));
  modules.add(new MergeSchedulerModule(indexSettings));
  modules.add(new ShardFilterCacheModule());
  modules.add(new ShardFieldDataModule());
  modules.add(new ShardIdCacheModule());
  modules.add(new TranslogModule(indexSettings));
  modules.add(new EngineModule(indexSettings));
  modules.add(new IndexShardGatewayModule(injector.getInstance(IndexGateway.class)));
  modules.add(new PercolatorShardModule());
  modules.add(new ShardTermVectorModule());
  modules.add(new IndexShardSnapshotModule());
  Injector shardInjector;
  try {
    shardInjector=modules.createChildInjector(injector);
  }
 catch (  CreationException e) {
    throw new IndexShardCreationException(shardId,Injectors.getFirstErrorFailure(e));
  }
catch (  Throwable e) {
    throw new IndexShardCreationException(shardId,e);
  }
  shardsInjectors=newMapBuilder(shardsInjectors).put(shardId.id(),shardInjector).immutableMap();
  IndexShard indexShard=shardInjector.getInstance(IndexShard.class);
  indicesLifecycle.afterIndexShardCreated(indexShard);
  shards=newMapBuilder(shards).put(shardId.id(),indexShard).immutableMap();
  return indexShard;
}
