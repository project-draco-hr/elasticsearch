{
synchronized (this) {
    closed=true;
  }
  Set<Integer> shardIds=shardIds();
  final CountDownLatch latch=new CountDownLatch(shardIds.size());
  for (  final int shardId : shardIds) {
    executor=executor == null ? threadPool.generic() : executor;
    executor.execute(new Runnable(){
      @Override public void run(){
        try {
          deleteShard(shardId,delete,!delete,delete,reason);
        }
 catch (        Exception e) {
          logger.warn("failed to close shard, delete [{}]",e,delete);
        }
 finally {
          latch.countDown();
        }
      }
    }
);
  }
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
    throw new ElasticSearchInterruptedException("interrupted closing index [ " + index().name() + "]",e);
  }
}
