{
  final Injector shardInjector;
  final IndexShard indexShard;
  final ShardId sId=new ShardId(index,shardId);
  Map<Integer,Injector> tmpShardInjectors=newHashMap(shardsInjectors);
  shardInjector=tmpShardInjectors.remove(shardId);
  if (shardInjector == null) {
    return;
  }
  shardsInjectors=ImmutableMap.copyOf(tmpShardInjectors);
  Map<Integer,IndexShard> tmpShardsMap=newHashMap(shards);
  indexShard=tmpShardsMap.remove(shardId);
  shards=ImmutableMap.copyOf(tmpShardsMap);
  indicesLifecycle.beforeIndexShardClosed(sId,indexShard);
  for (  Class<? extends CloseableIndexComponent> closeable : pluginsService.shardServices()) {
    try {
      shardInjector.getInstance(closeable).close();
    }
 catch (    Throwable e) {
      logger.debug("failed to clean plugin shard service [{}]",e,closeable);
    }
  }
  try {
    shardInjector.getInstance(TranslogService.class).close();
  }
 catch (  Throwable e) {
    logger.debug("failed to close translog service",e);
  }
  if (indexShard != null) {
    try {
      ((InternalIndexShard)indexShard).close(reason);
    }
 catch (    Throwable e) {
      logger.debug("failed to close index shard",e);
    }
  }
  try {
    shardInjector.getInstance(Engine.class).close();
  }
 catch (  Throwable e) {
    logger.debug("failed to close engine",e);
  }
  try {
    shardInjector.getInstance(MergeSchedulerProvider.class).close();
  }
 catch (  Throwable e) {
    logger.debug("failed to close merge policy scheduler",e);
  }
  try {
    shardInjector.getInstance(MergePolicyProvider.class).close();
  }
 catch (  Throwable e) {
    logger.debug("failed to close merge policy provider",e);
  }
  try {
    shardInjector.getInstance(IndexShardGatewayService.class).close();
  }
 catch (  Throwable e) {
    logger.debug("failed to close index shard gateway",e);
  }
  try {
    shardInjector.getInstance(Translog.class).close();
  }
 catch (  Throwable e) {
    logger.debug("failed to close translog",e);
  }
  try {
    shardInjector.getInstance(PercolatorQueriesRegistry.class).close();
  }
 catch (  Throwable e) {
    logger.debug("failed to close PercolatorQueriesRegistry",e);
  }
  indicesLifecycle.afterIndexShardClosed(sId);
  Store store=shardInjector.getInstance(Store.class);
  try {
    store.close();
  }
 catch (  Throwable e) {
    logger.warn("failed to close store on shard deletion",e);
  }
  Injectors.close(injector);
}
