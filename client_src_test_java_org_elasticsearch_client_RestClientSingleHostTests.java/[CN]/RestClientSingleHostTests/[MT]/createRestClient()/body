{
  httpClient=mock(CloseableHttpClient.class);
  when(httpClient.execute(any(HttpHost.class),any(HttpRequest.class))).thenAnswer(new Answer<CloseableHttpResponse>(){
    @Override public CloseableHttpResponse answer(    InvocationOnMock invocationOnMock) throws Throwable {
      HttpUriRequest request=(HttpUriRequest)invocationOnMock.getArguments()[1];
      if (request.getURI().getPath().equals("/soe")) {
        throw new SocketTimeoutException();
      }
 else       if (request.getURI().getPath().equals("/coe")) {
        throw new ConnectTimeoutException();
      }
      int statusCode=Integer.parseInt(request.getURI().getPath().substring(1));
      StatusLine statusLine=new BasicStatusLine(new ProtocolVersion("http",1,1),statusCode,"");
      CloseableHttpResponse httpResponse=new CloseableBasicHttpResponse(statusLine);
      if (request instanceof HttpEntityEnclosingRequest) {
        HttpEntity entity=((HttpEntityEnclosingRequest)request).getEntity();
        if (entity != null) {
          assertTrue("the entity is not repeatable, cannot set it to the response directly",entity.isRepeatable());
          httpResponse.setEntity(entity);
        }
      }
      httpResponse.setHeaders(request.getAllHeaders());
      return httpResponse;
    }
  }
);
  int numHeaders=RandomInts.randomIntBetween(random(),0,3);
  defaultHeaders=new Header[numHeaders];
  for (int i=0; i < numHeaders; i++) {
    String headerName="Header-default" + (random().nextBoolean() ? i : "");
    String headerValue=RandomStrings.randomAsciiOfLengthBetween(random(),3,10);
    defaultHeaders[i]=new BasicHeader(headerName,headerValue);
  }
  httpHost=new HttpHost("localhost",9200);
  restClient=RestClient.builder(httpHost).setHttpClient(httpClient).setDefaultHeaders(defaultHeaders).build();
  failureListener=new TrackingFailureListener();
  restClient.setFailureListener(failureListener);
}
