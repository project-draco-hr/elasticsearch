{
  XContentParser parser=parseContext.parser();
  List<BytesRef> ids=new ArrayList<BytesRef>();
  Collection<String> types=null;
  String currentFieldName=null;
  float boost=1.0f;
  String queryName=null;
  XContentParser.Token token;
  boolean idsProvided=false;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if ("values".equals(currentFieldName)) {
        idsProvided=true;
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          BytesRef value=parser.bytesOrNull();
          if (value == null) {
            throw new QueryParsingException(parseContext.index(),"No value specified for term filter");
          }
          ids.add(value);
        }
      }
 else       if ("types".equals(currentFieldName) || "type".equals(currentFieldName)) {
        types=new ArrayList<String>();
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          String value=parser.textOrNull();
          if (value == null) {
            throw new QueryParsingException(parseContext.index(),"No type specified for term filter");
          }
          types.add(value);
        }
      }
 else {
        throw new QueryParsingException(parseContext.index(),"[ids] query does not support [" + currentFieldName + "]");
      }
    }
 else     if (token.isValue()) {
      if ("type".equals(currentFieldName) || "_type".equals(currentFieldName)) {
        types=ImmutableList.of(parser.text());
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=parser.floatValue();
      }
 else       if ("_name".equals(currentFieldName)) {
        queryName=parser.text();
      }
 else {
        throw new QueryParsingException(parseContext.index(),"[ids] query does not support [" + currentFieldName + "]");
      }
    }
  }
  if (!idsProvided) {
    throw new QueryParsingException(parseContext.index(),"[ids] query, no ids values provided");
  }
  if (ids.isEmpty()) {
    return Queries.NO_MATCH_QUERY;
  }
  if (types == null || types.isEmpty()) {
    types=parseContext.queryTypes();
  }
 else   if (types.size() == 1 && Iterables.getFirst(types,null).equals("_all")) {
    types=parseContext.mapperService().types();
  }
  TermsFilter filter=new TermsFilter(UidFieldMapper.NAME,Uid.createTypeUids(types,ids));
  ConstantScoreQuery query=new ConstantScoreQuery(filter);
  query.setBoost(boost);
  if (queryName != null) {
    parseContext.addNamedQuery(queryName,query);
  }
  return query;
}
