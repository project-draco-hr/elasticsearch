{
  MockNode nodeA=createMockNode("nodeA",Settings.EMPTY,Version.CURRENT,new ClusterStateListener(){
    @Override public void clusterChanged(    ClusterChangedEvent event){
      fail("Shouldn't send cluster state to myself");
    }
  }
);
  MockNode nodeB=createMockNode("nodeB",Settings.EMPTY,Version.CURRENT);
  DiscoveryNodes discoveryNodes=DiscoveryNodes.builder().put(nodeA.discoveryNode).put(nodeB.discoveryNode).localNodeId(nodeA.discoveryNode.id()).build();
  ClusterState previousClusterState=ClusterState.builder(ClusterName.DEFAULT).nodes(discoveryNodes).build();
  ClusterState clusterState=ClusterState.builder(previousClusterState).incrementVersion().build();
  publishStateDiffAndWait(nodeA.action,clusterState,previousClusterState);
  assertSameStateFromFull(nodeB.clusterState,clusterState);
  previousClusterState=clusterState;
  clusterState=ClusterState.builder(clusterState).blocks(ClusterBlocks.builder().addGlobalBlock(MetaData.CLUSTER_READ_ONLY_BLOCK)).incrementVersion().build();
  ClusterState unserializableClusterState=new ClusterState(clusterState.version(),clusterState.stateUUID(),clusterState){
    @Override public Diff<ClusterState> diff(    ClusterState previousState){
      return new Diff<ClusterState>(){
        @Override public ClusterState apply(        ClusterState part){
          fail("this diff shouldn't be applied");
          return part;
        }
        @Override public void writeTo(        StreamOutput out) throws IOException {
          throw new IOException("Simulated failure of diff serialization");
        }
      }
;
    }
  }
;
  List<Tuple<DiscoveryNode,Throwable>> errors=publishStateDiff(nodeA.action,unserializableClusterState,previousClusterState).awaitErrors(1,TimeUnit.SECONDS);
  assertThat(errors.size(),equalTo(1));
  assertThat(errors.get(0).v2().getMessage(),containsString("Simulated failure of diff serialization"));
}
