{
  int numberOfNodes=randomIntBetween(2,10);
  int numberOfIterations=randomIntBetween(50,200);
  Settings settings=Settings.builder().put(DiscoverySettings.PUBLISH_DIFF_ENABLE,randomBoolean()).build();
  MockNode[] nodes=new MockNode[numberOfNodes];
  DiscoveryNodes.Builder discoveryNodesBuilder=DiscoveryNodes.builder();
  for (int i=0; i < nodes.length; i++) {
    final String name="node" + i;
    nodes[i]=createMockNode(name,settings,Version.CURRENT,new ClusterStateListener(){
      @Override public void clusterChanged(      ClusterChangedEvent event){
        assertProperMetaDataForVersion(event.state().metaData(),event.state().version());
      }
    }
);
    discoveryNodesBuilder.put(nodes[i].discoveryNode);
  }
  AssertingAckListener[] listeners=new AssertingAckListener[numberOfIterations];
  discoveryNodesBuilder.localNodeId(nodes[0].discoveryNode.id());
  DiscoveryNodes discoveryNodes=discoveryNodesBuilder.build();
  MetaData metaData=MetaData.EMPTY_META_DATA;
  ClusterState clusterState=ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).build();
  ClusterState previousState;
  for (int i=0; i < numberOfIterations; i++) {
    previousState=clusterState;
    metaData=buildMetaDataForVersion(metaData,i + 1);
    clusterState=ClusterState.builder(clusterState).incrementVersion().metaData(metaData).nodes(discoveryNodes).build();
    listeners[i]=publishStateDiff(nodes[0].action,clusterState,previousState);
  }
  for (int i=0; i < numberOfIterations; i++) {
    listeners[i].await(1,TimeUnit.SECONDS);
  }
  nodes[0].clusterState=clusterState;
  for (  MockNode node : nodes) {
    assertThat(node.discoveryNode + " misses a cluster state",node.clusterState,notNullValue());
    assertThat(node.discoveryNode + " unexpected cluster state: " + node.clusterState,node.clusterState.version(),equalTo(clusterState.version()));
    assertThat(node.clusterState.nodes().localNode(),equalTo(node.discoveryNode));
  }
}
