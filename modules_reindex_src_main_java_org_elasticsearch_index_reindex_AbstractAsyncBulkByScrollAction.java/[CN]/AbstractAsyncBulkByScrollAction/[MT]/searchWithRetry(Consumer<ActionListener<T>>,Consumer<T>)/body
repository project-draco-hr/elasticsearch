{
class RetryHelper extends AbstractRunnable implements ActionListener<T> {
    private final Iterator<TimeValue> retries=backoffPolicy.iterator();
    @Override public void onResponse(    T response){
      onResponse.accept(response);
    }
    @Override protected void doRun() throws Exception {
      action.accept(this);
    }
    @Override public void onFailure(    Throwable e){
      if (ExceptionsHelper.unwrap(e,EsRejectedExecutionException.class) != null) {
        if (retries.hasNext()) {
          logger.trace("retrying rejected search",e);
          threadPool.schedule(retries.next(),ThreadPool.Names.SAME,this);
          task.countSearchRetry();
        }
 else {
          logger.warn("giving up on search because we retried {} times without success",e,retries);
          finishHim(e);
        }
      }
 else {
        logger.warn("giving up on search because it failed with a non-retryable exception",e);
        finishHim(e);
      }
    }
  }
  new RetryHelper().run();
}
