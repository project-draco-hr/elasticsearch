{
  Random random=random();
  assertAcked(prepareCreate("test").addMapping("type1",jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("str_value").field("type","keyword").endObject().startObject("boolean_value").field("type","boolean").endObject().startObject("byte_value").field("type","byte").endObject().startObject("short_value").field("type","short").endObject().startObject("integer_value").field("type","integer").endObject().startObject("long_value").field("type","long").endObject().startObject("float_value").field("type","float").endObject().startObject("double_value").field("type","double").endObject().endObject().endObject().endObject()));
  ensureGreen();
  List<IndexRequestBuilder> builders=new ArrayList<>();
  for (int i=0; i < 10; i++) {
    builders.add(client().prepareIndex("test","type1",Integer.toString(i)).setSource(jsonBuilder().startObject().field("str_value",new String(new char[]{(char)(97 + i),(char)(97 + i)})).field("boolean_value",true).field("byte_value",i).field("short_value",i).field("integer_value",i).field("long_value",i).field("float_value",0.1 * i).field("double_value",0.1 * i).endObject()));
  }
  Collections.shuffle(builders,random);
  for (  IndexRequestBuilder builder : builders) {
    builder.execute().actionGet();
    if (random.nextBoolean()) {
      if (random.nextInt(5) != 0) {
        refresh();
      }
 else {
        client().admin().indices().prepareFlush().get();
      }
    }
  }
  refresh();
  int size=1 + random.nextInt(10);
  Script script=new Script("doc['str_value'].value",ScriptType.INLINE,CustomScriptPlugin.NAME,null);
  SearchResponse searchResponse=client().prepareSearch().setQuery(matchAllQuery()).setSize(size).addSort(new ScriptSortBuilder(script,ScriptSortType.STRING)).get();
  assertHitCount(searchResponse,10);
  assertThat(searchResponse.getHits().hits().length,equalTo(size));
  for (int i=0; i < size; i++) {
    SearchHit searchHit=searchResponse.getHits().getAt(i);
    assertThat(searchHit.id(),equalTo(Integer.toString(i)));
    String expected=new String(new char[]{(char)(97 + i),(char)(97 + i)});
    assertThat(searchHit.sortValues()[0].toString(),equalTo(expected));
  }
  size=1 + random.nextInt(10);
  searchResponse=client().prepareSearch().setQuery(matchAllQuery()).setSize(size).addSort("str_value",SortOrder.DESC).get();
  assertHitCount(searchResponse,10);
  assertThat(searchResponse.getHits().hits().length,equalTo(size));
  for (int i=0; i < size; i++) {
    SearchHit searchHit=searchResponse.getHits().getAt(i);
    assertThat(searchHit.id(),equalTo(Integer.toString(9 - i)));
    String expected=new String(new char[]{(char)(97 + (9 - i)),(char)(97 + (9 - i))});
    assertThat(searchHit.sortValues()[0].toString(),equalTo(expected));
  }
  assertThat(searchResponse.toString(),not(containsString("error")));
  assertNoFailures(searchResponse);
}
