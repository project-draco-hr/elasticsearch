{
  NodeStats nodeStats=createNodeStats();
  try (BytesStreamOutput out=new BytesStreamOutput()){
    nodeStats.writeTo(out);
    try (StreamInput in=out.bytes().streamInput()){
      NodeStats deserializedNodeStats=NodeStats.readNodeStats(in);
      assertEquals(nodeStats.getNode(),deserializedNodeStats.getNode());
      assertEquals(nodeStats.getTimestamp(),deserializedNodeStats.getTimestamp());
      if (nodeStats.getOs() == null) {
        assertNull(deserializedNodeStats.getOs());
      }
 else {
        assertEquals(nodeStats.getOs().getTimestamp(),deserializedNodeStats.getOs().getTimestamp());
        assertEquals(nodeStats.getOs().getSwap().getFree(),deserializedNodeStats.getOs().getSwap().getFree());
        assertEquals(nodeStats.getOs().getSwap().getTotal(),deserializedNodeStats.getOs().getSwap().getTotal());
        assertEquals(nodeStats.getOs().getSwap().getUsed(),deserializedNodeStats.getOs().getSwap().getUsed());
        assertEquals(nodeStats.getOs().getMem().getFree(),deserializedNodeStats.getOs().getMem().getFree());
        assertEquals(nodeStats.getOs().getMem().getTotal(),deserializedNodeStats.getOs().getMem().getTotal());
        assertEquals(nodeStats.getOs().getMem().getUsed(),deserializedNodeStats.getOs().getMem().getUsed());
        assertEquals(nodeStats.getOs().getMem().getFreePercent(),deserializedNodeStats.getOs().getMem().getFreePercent());
        assertEquals(nodeStats.getOs().getMem().getUsedPercent(),deserializedNodeStats.getOs().getMem().getUsedPercent());
        assertEquals(nodeStats.getOs().getCpu().getPercent(),deserializedNodeStats.getOs().getCpu().getPercent());
        assertArrayEquals(nodeStats.getOs().getCpu().getLoadAverage(),deserializedNodeStats.getOs().getCpu().getLoadAverage(),0);
      }
      if (nodeStats.getProcess() == null) {
        assertNull(deserializedNodeStats.getProcess());
      }
 else {
        assertEquals(nodeStats.getProcess().getTimestamp(),deserializedNodeStats.getProcess().getTimestamp());
        assertEquals(nodeStats.getProcess().getCpu().getTotal(),deserializedNodeStats.getProcess().getCpu().getTotal());
        assertEquals(nodeStats.getProcess().getCpu().getPercent(),deserializedNodeStats.getProcess().getCpu().getPercent());
        assertEquals(nodeStats.getProcess().getMem().getTotalVirtual(),deserializedNodeStats.getProcess().getMem().getTotalVirtual());
        assertEquals(nodeStats.getProcess().getMaxFileDescriptors(),deserializedNodeStats.getProcess().getMaxFileDescriptors());
        assertEquals(nodeStats.getProcess().getOpenFileDescriptors(),deserializedNodeStats.getProcess().getOpenFileDescriptors());
      }
      if (nodeStats.getJvm() == null) {
        assertNull(deserializedNodeStats.getJvm());
      }
 else {
        assertEquals(nodeStats.getJvm().getTimestamp(),deserializedNodeStats.getJvm().getTimestamp());
        assertEquals(nodeStats.getJvm().getMem().getHeapUsedPercent(),deserializedNodeStats.getJvm().getMem().getHeapUsedPercent());
        assertEquals(nodeStats.getJvm().getMem().getHeapUsed(),deserializedNodeStats.getJvm().getMem().getHeapUsed());
        assertEquals(nodeStats.getJvm().getMem().getHeapCommitted(),deserializedNodeStats.getJvm().getMem().getHeapCommitted());
        assertEquals(nodeStats.getJvm().getMem().getNonHeapCommitted(),deserializedNodeStats.getJvm().getMem().getNonHeapCommitted());
        assertEquals(nodeStats.getJvm().getMem().getNonHeapUsed(),deserializedNodeStats.getJvm().getMem().getNonHeapUsed());
        assertEquals(nodeStats.getJvm().getMem().getHeapMax(),deserializedNodeStats.getJvm().getMem().getHeapMax());
        assertEquals(nodeStats.getJvm().getClasses().getLoadedClassCount(),deserializedNodeStats.getJvm().getClasses().getLoadedClassCount());
        assertEquals(nodeStats.getJvm().getClasses().getTotalLoadedClassCount(),deserializedNodeStats.getJvm().getClasses().getTotalLoadedClassCount());
        assertEquals(nodeStats.getJvm().getClasses().getUnloadedClassCount(),deserializedNodeStats.getJvm().getClasses().getUnloadedClassCount());
        assertEquals(nodeStats.getJvm().getGc().getCollectors().length,deserializedNodeStats.getJvm().getGc().getCollectors().length);
        for (int i=0; i < nodeStats.getJvm().getGc().getCollectors().length; i++) {
          JvmStats.GarbageCollector garbageCollector=nodeStats.getJvm().getGc().getCollectors()[i];
          JvmStats.GarbageCollector deserializedGarbageCollector=deserializedNodeStats.getJvm().getGc().getCollectors()[i];
          assertEquals(garbageCollector.getName(),deserializedGarbageCollector.getName());
          assertEquals(garbageCollector.getCollectionCount(),deserializedGarbageCollector.getCollectionCount());
          assertEquals(garbageCollector.getCollectionTime(),deserializedGarbageCollector.getCollectionTime());
        }
        assertEquals(nodeStats.getJvm().getThreads().getCount(),deserializedNodeStats.getJvm().getThreads().getCount());
        assertEquals(nodeStats.getJvm().getThreads().getPeakCount(),deserializedNodeStats.getJvm().getThreads().getPeakCount());
        assertEquals(nodeStats.getJvm().getUptime(),deserializedNodeStats.getJvm().getUptime());
        if (nodeStats.getJvm().getBufferPools() == null) {
          assertNull(deserializedNodeStats.getJvm().getBufferPools());
        }
 else {
          assertEquals(nodeStats.getJvm().getBufferPools().size(),deserializedNodeStats.getJvm().getBufferPools().size());
          for (int i=0; i < nodeStats.getJvm().getBufferPools().size(); i++) {
            JvmStats.BufferPool bufferPool=nodeStats.getJvm().getBufferPools().get(i);
            JvmStats.BufferPool deserializedBufferPool=deserializedNodeStats.getJvm().getBufferPools().get(i);
            assertEquals(bufferPool.getName(),deserializedBufferPool.getName());
            assertEquals(bufferPool.getCount(),deserializedBufferPool.getCount());
            assertEquals(bufferPool.getTotalCapacity(),deserializedBufferPool.getTotalCapacity());
            assertEquals(bufferPool.getUsed(),deserializedBufferPool.getUsed());
          }
        }
      }
      if (nodeStats.getThreadPool() == null) {
        assertNull(deserializedNodeStats.getThreadPool());
      }
 else {
        Iterator<ThreadPoolStats.Stats> threadPoolIterator=nodeStats.getThreadPool().iterator();
        Iterator<ThreadPoolStats.Stats> deserializedThreadPoolIterator=deserializedNodeStats.getThreadPool().iterator();
        while (threadPoolIterator.hasNext()) {
          ThreadPoolStats.Stats stats=threadPoolIterator.next();
          ThreadPoolStats.Stats deserializedStats=deserializedThreadPoolIterator.next();
          assertEquals(stats.getName(),deserializedStats.getName());
          assertEquals(stats.getThreads(),deserializedStats.getThreads());
          assertEquals(stats.getActive(),deserializedStats.getActive());
          assertEquals(stats.getLargest(),deserializedStats.getLargest());
          assertEquals(stats.getCompleted(),deserializedStats.getCompleted());
          assertEquals(stats.getQueue(),deserializedStats.getQueue());
          assertEquals(stats.getRejected(),deserializedStats.getRejected());
        }
      }
      if (nodeStats.getFs() == null) {
        assertNull(deserializedNodeStats.getFs());
      }
 else {
        assertEquals(nodeStats.getFs().getTimestamp(),deserializedNodeStats.getFs().getTimestamp());
        assertEquals(nodeStats.getFs().getTotal().getAvailable(),deserializedNodeStats.getFs().getTotal().getAvailable());
        assertEquals(nodeStats.getFs().getTotal().getTotal(),deserializedNodeStats.getFs().getTotal().getTotal());
        assertEquals(nodeStats.getFs().getTotal().getFree(),deserializedNodeStats.getFs().getTotal().getFree());
        assertEquals(nodeStats.getFs().getTotal().getMount(),deserializedNodeStats.getFs().getTotal().getMount());
        assertEquals(nodeStats.getFs().getTotal().getPath(),deserializedNodeStats.getFs().getTotal().getPath());
        assertEquals(nodeStats.getFs().getTotal().getSpins(),deserializedNodeStats.getFs().getTotal().getSpins());
        assertEquals(nodeStats.getFs().getTotal().getType(),deserializedNodeStats.getFs().getTotal().getType());
        assertEquals(nodeStats.getFs().getIoStats().getTotalOperations(),deserializedNodeStats.getFs().getIoStats().getTotalOperations());
        assertEquals(nodeStats.getFs().getIoStats().getTotalReadKilobytes(),deserializedNodeStats.getFs().getIoStats().getTotalReadKilobytes());
        assertEquals(nodeStats.getFs().getIoStats().getTotalReadOperations(),deserializedNodeStats.getFs().getIoStats().getTotalReadOperations());
        assertEquals(nodeStats.getFs().getIoStats().getTotalWriteKilobytes(),deserializedNodeStats.getFs().getIoStats().getTotalWriteKilobytes());
        assertEquals(nodeStats.getFs().getIoStats().getTotalWriteOperations(),deserializedNodeStats.getFs().getIoStats().getTotalWriteOperations());
        assertEquals(nodeStats.getFs().getIoStats().getDevicesStats().length,deserializedNodeStats.getFs().getIoStats().getDevicesStats().length);
        for (int i=0; i < nodeStats.getFs().getIoStats().getDevicesStats().length; i++) {
          FsInfo.DeviceStats deviceStats=nodeStats.getFs().getIoStats().getDevicesStats()[i];
          FsInfo.DeviceStats deserializedDeviceStats=deserializedNodeStats.getFs().getIoStats().getDevicesStats()[i];
          assertEquals(deviceStats.operations(),deserializedDeviceStats.operations());
          assertEquals(deviceStats.readKilobytes(),deserializedDeviceStats.readKilobytes());
          assertEquals(deviceStats.readOperations(),deserializedDeviceStats.readOperations());
          assertEquals(deviceStats.writeKilobytes(),deserializedDeviceStats.writeKilobytes());
          assertEquals(deviceStats.writeOperations(),deserializedDeviceStats.writeOperations());
        }
      }
      if (nodeStats.getTransport() == null) {
        assertNull(deserializedNodeStats.getTransport());
      }
 else {
        assertEquals(nodeStats.getTransport().getRxCount(),deserializedNodeStats.getTransport().getRxCount());
        assertEquals(nodeStats.getTransport().getRxSize(),deserializedNodeStats.getTransport().getRxSize());
        assertEquals(nodeStats.getTransport().getServerOpen(),deserializedNodeStats.getTransport().getServerOpen());
        assertEquals(nodeStats.getTransport().getTxCount(),deserializedNodeStats.getTransport().getTxCount());
        assertEquals(nodeStats.getTransport().getTxSize(),deserializedNodeStats.getTransport().getTxSize());
      }
      if (nodeStats.getHttp() == null) {
        assertNull(deserializedNodeStats.getHttp());
      }
 else {
        assertEquals(nodeStats.getHttp().getServerOpen(),deserializedNodeStats.getHttp().getServerOpen());
        assertEquals(nodeStats.getHttp().getTotalOpen(),deserializedNodeStats.getHttp().getTotalOpen());
      }
      if (nodeStats.getBreaker() == null) {
        assertNull(deserializedNodeStats.getBreaker());
      }
 else {
        assertEquals(nodeStats.getBreaker().getAllStats().length,deserializedNodeStats.getBreaker().getAllStats().length);
        for (int i=0; i < nodeStats.getBreaker().getAllStats().length; i++) {
          CircuitBreakerStats circuitBreakerStats=nodeStats.getBreaker().getAllStats()[i];
          CircuitBreakerStats deserializedCircuitBreakerStats=deserializedNodeStats.getBreaker().getAllStats()[i];
          assertEquals(circuitBreakerStats.getEstimated(),deserializedCircuitBreakerStats.getEstimated());
          assertEquals(circuitBreakerStats.getLimit(),deserializedCircuitBreakerStats.getLimit());
          assertEquals(circuitBreakerStats.getName(),deserializedCircuitBreakerStats.getName());
          assertEquals(circuitBreakerStats.getOverhead(),deserializedCircuitBreakerStats.getOverhead(),0);
          assertEquals(circuitBreakerStats.getTrippedCount(),deserializedCircuitBreakerStats.getTrippedCount(),0);
        }
      }
      if (nodeStats.getScriptStats() == null) {
        assertNull(deserializedNodeStats.getScriptStats());
      }
 else {
        assertEquals(nodeStats.getScriptStats().getCacheEvictions(),deserializedNodeStats.getScriptStats().getCacheEvictions());
        assertEquals(nodeStats.getScriptStats().getCompilations(),deserializedNodeStats.getScriptStats().getCompilations());
      }
      if (nodeStats.getDiscoveryStats() == null) {
        assertNull(deserializedNodeStats.getDiscoveryStats());
      }
 else {
        if (nodeStats.getDiscoveryStats().getQueueStats() == null) {
          assertNull(deserializedNodeStats.getDiscoveryStats().getQueueStats());
        }
 else {
          assertEquals(nodeStats.getDiscoveryStats().getQueueStats().getCommitted(),deserializedNodeStats.getDiscoveryStats().getQueueStats().getCommitted());
          assertEquals(nodeStats.getDiscoveryStats().getQueueStats().getTotal(),deserializedNodeStats.getDiscoveryStats().getQueueStats().getTotal());
          assertEquals(nodeStats.getDiscoveryStats().getQueueStats().getPending(),deserializedNodeStats.getDiscoveryStats().getQueueStats().getPending());
        }
      }
      if (nodeStats.getIngestStats() == null) {
        assertNull(deserializedNodeStats.getIngestStats());
      }
 else {
        assertEquals(nodeStats.getIngestStats().getTotalStats().getIngestCount(),deserializedNodeStats.getIngestStats().getTotalStats().getIngestCount());
        assertEquals(nodeStats.getIngestStats().getTotalStats().getIngestCurrent(),deserializedNodeStats.getIngestStats().getTotalStats().getIngestCurrent());
        assertEquals(nodeStats.getIngestStats().getTotalStats().getIngestFailedCount(),deserializedNodeStats.getIngestStats().getTotalStats().getIngestFailedCount());
        assertEquals(nodeStats.getIngestStats().getTotalStats().getIngestTimeInMillis(),deserializedNodeStats.getIngestStats().getTotalStats().getIngestTimeInMillis());
        assertEquals(nodeStats.getIngestStats().getStatsPerPipeline().size(),deserializedNodeStats.getIngestStats().getStatsPerPipeline().size());
        for (        Map.Entry<String,IngestStats.Stats> entry : nodeStats.getIngestStats().getStatsPerPipeline().entrySet()) {
          IngestStats.Stats stats=entry.getValue();
          IngestStats.Stats deserializedStats=deserializedNodeStats.getIngestStats().getStatsPerPipeline().get(entry.getKey());
          assertEquals(stats.getIngestFailedCount(),deserializedStats.getIngestFailedCount());
          assertEquals(stats.getIngestTimeInMillis(),deserializedStats.getIngestTimeInMillis());
          assertEquals(stats.getIngestCurrent(),deserializedStats.getIngestCurrent());
          assertEquals(stats.getIngestCount(),deserializedStats.getIngestCount());
        }
      }
    }
   }
 }
