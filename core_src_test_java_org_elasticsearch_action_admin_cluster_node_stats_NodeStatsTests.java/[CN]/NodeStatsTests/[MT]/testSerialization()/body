{
  NodeStats nodeStats=createNodeStats();
  try (BytesStreamOutput out=new BytesStreamOutput()){
    nodeStats.writeTo(out);
    try (StreamInput in=out.bytes().streamInput()){
      NodeStats deserializedNodeStats=NodeStats.readNodeStats(in);
      assertEquals(nodeStats.getNode(),deserializedNodeStats.getNode());
      assertEquals(nodeStats.getTimestamp(),deserializedNodeStats.getTimestamp());
      if (nodeStats.getOs() == null) {
        assertNull(deserializedNodeStats.getOs());
      }
 else {
        assertEquals(nodeStats.getOs().getTimestamp(),deserializedNodeStats.getOs().getTimestamp());
        assertEquals(nodeStats.getOs().getSwap().getFree(),deserializedNodeStats.getOs().getSwap().getFree());
        assertEquals(nodeStats.getOs().getSwap().getTotal(),deserializedNodeStats.getOs().getSwap().getTotal());
        assertEquals(nodeStats.getOs().getSwap().getUsed(),deserializedNodeStats.getOs().getSwap().getUsed());
        assertEquals(nodeStats.getOs().getMem().getFree(),deserializedNodeStats.getOs().getMem().getFree());
        assertEquals(nodeStats.getOs().getMem().getTotal(),deserializedNodeStats.getOs().getMem().getTotal());
        assertEquals(nodeStats.getOs().getMem().getUsed(),deserializedNodeStats.getOs().getMem().getUsed());
        assertEquals(nodeStats.getOs().getMem().getFreePercent(),deserializedNodeStats.getOs().getMem().getFreePercent());
        assertEquals(nodeStats.getOs().getMem().getUsedPercent(),deserializedNodeStats.getOs().getMem().getUsedPercent());
        assertEquals(nodeStats.getOs().getCpu().getPercent(),deserializedNodeStats.getOs().getCpu().getPercent());
        assertArrayEquals(nodeStats.getOs().getCpu().getLoadAverage(),deserializedNodeStats.getOs().getCpu().getLoadAverage(),0);
      }
      if (nodeStats.getProcess() == null) {
        assertNull(deserializedNodeStats.getProcess());
      }
 else {
        assertEquals(nodeStats.getProcess().getTimestamp(),deserializedNodeStats.getProcess().getTimestamp());
        assertEquals(nodeStats.getProcess().getCpu().getTotal(),deserializedNodeStats.getProcess().getCpu().getTotal());
        assertEquals(nodeStats.getProcess().getCpu().getPercent(),deserializedNodeStats.getProcess().getCpu().getPercent());
        assertEquals(nodeStats.getProcess().getMem().getTotalVirtual(),deserializedNodeStats.getProcess().getMem().getTotalVirtual());
        assertEquals(nodeStats.getProcess().getMaxFileDescriptors(),deserializedNodeStats.getProcess().getMaxFileDescriptors());
        assertEquals(nodeStats.getProcess().getOpenFileDescriptors(),deserializedNodeStats.getProcess().getOpenFileDescriptors());
      }
      JvmStats jvm=nodeStats.getJvm();
      JvmStats deserializedJvm=deserializedNodeStats.getJvm();
      if (jvm == null) {
        assertNull(deserializedJvm);
      }
 else {
        JvmStats.Mem mem=jvm.getMem();
        JvmStats.Mem deserializedMem=deserializedJvm.getMem();
        assertEquals(jvm.getTimestamp(),deserializedJvm.getTimestamp());
        assertEquals(mem.getHeapUsedPercent(),deserializedMem.getHeapUsedPercent());
        assertEquals(mem.getHeapUsed(),deserializedMem.getHeapUsed());
        assertEquals(mem.getHeapCommitted(),deserializedMem.getHeapCommitted());
        assertEquals(mem.getNonHeapCommitted(),deserializedMem.getNonHeapCommitted());
        assertEquals(mem.getNonHeapUsed(),deserializedMem.getNonHeapUsed());
        assertEquals(mem.getHeapMax(),deserializedMem.getHeapMax());
        JvmStats.Classes classes=jvm.getClasses();
        assertEquals(classes.getLoadedClassCount(),deserializedJvm.getClasses().getLoadedClassCount());
        assertEquals(classes.getTotalLoadedClassCount(),deserializedJvm.getClasses().getTotalLoadedClassCount());
        assertEquals(classes.getUnloadedClassCount(),deserializedJvm.getClasses().getUnloadedClassCount());
        assertEquals(jvm.getGc().getCollectors().length,deserializedJvm.getGc().getCollectors().length);
        for (int i=0; i < jvm.getGc().getCollectors().length; i++) {
          JvmStats.GarbageCollector garbageCollector=jvm.getGc().getCollectors()[i];
          JvmStats.GarbageCollector deserializedGarbageCollector=deserializedJvm.getGc().getCollectors()[i];
          assertEquals(garbageCollector.getName(),deserializedGarbageCollector.getName());
          assertEquals(garbageCollector.getCollectionCount(),deserializedGarbageCollector.getCollectionCount());
          assertEquals(garbageCollector.getCollectionTime(),deserializedGarbageCollector.getCollectionTime());
        }
        assertEquals(jvm.getThreads().getCount(),deserializedJvm.getThreads().getCount());
        assertEquals(jvm.getThreads().getPeakCount(),deserializedJvm.getThreads().getPeakCount());
        assertEquals(jvm.getUptime(),deserializedJvm.getUptime());
        if (jvm.getBufferPools() == null) {
          assertNull(deserializedJvm.getBufferPools());
        }
 else {
          assertEquals(jvm.getBufferPools().size(),deserializedJvm.getBufferPools().size());
          for (int i=0; i < jvm.getBufferPools().size(); i++) {
            JvmStats.BufferPool bufferPool=jvm.getBufferPools().get(i);
            JvmStats.BufferPool deserializedBufferPool=deserializedJvm.getBufferPools().get(i);
            assertEquals(bufferPool.getName(),deserializedBufferPool.getName());
            assertEquals(bufferPool.getCount(),deserializedBufferPool.getCount());
            assertEquals(bufferPool.getTotalCapacity(),deserializedBufferPool.getTotalCapacity());
            assertEquals(bufferPool.getUsed(),deserializedBufferPool.getUsed());
          }
        }
      }
      if (nodeStats.getThreadPool() == null) {
        assertNull(deserializedNodeStats.getThreadPool());
      }
 else {
        Iterator<ThreadPoolStats.Stats> threadPoolIterator=nodeStats.getThreadPool().iterator();
        Iterator<ThreadPoolStats.Stats> deserializedThreadPoolIterator=deserializedNodeStats.getThreadPool().iterator();
        while (threadPoolIterator.hasNext()) {
          ThreadPoolStats.Stats stats=threadPoolIterator.next();
          ThreadPoolStats.Stats deserializedStats=deserializedThreadPoolIterator.next();
          assertEquals(stats.getName(),deserializedStats.getName());
          assertEquals(stats.getThreads(),deserializedStats.getThreads());
          assertEquals(stats.getActive(),deserializedStats.getActive());
          assertEquals(stats.getLargest(),deserializedStats.getLargest());
          assertEquals(stats.getCompleted(),deserializedStats.getCompleted());
          assertEquals(stats.getQueue(),deserializedStats.getQueue());
          assertEquals(stats.getRejected(),deserializedStats.getRejected());
        }
      }
      FsInfo fs=nodeStats.getFs();
      FsInfo deserializedFs=deserializedNodeStats.getFs();
      if (fs == null) {
        assertNull(deserializedFs);
      }
 else {
        assertEquals(fs.getTimestamp(),deserializedFs.getTimestamp());
        assertEquals(fs.getTotal().getAvailable(),deserializedFs.getTotal().getAvailable());
        assertEquals(fs.getTotal().getTotal(),deserializedFs.getTotal().getTotal());
        assertEquals(fs.getTotal().getFree(),deserializedFs.getTotal().getFree());
        assertEquals(fs.getTotal().getMount(),deserializedFs.getTotal().getMount());
        assertEquals(fs.getTotal().getPath(),deserializedFs.getTotal().getPath());
        assertEquals(fs.getTotal().getSpins(),deserializedFs.getTotal().getSpins());
        assertEquals(fs.getTotal().getType(),deserializedFs.getTotal().getType());
        FsInfo.IoStats ioStats=fs.getIoStats();
        FsInfo.IoStats deserializedIoStats=deserializedFs.getIoStats();
        assertEquals(ioStats.getTotalOperations(),deserializedIoStats.getTotalOperations());
        assertEquals(ioStats.getTotalReadKilobytes(),deserializedIoStats.getTotalReadKilobytes());
        assertEquals(ioStats.getTotalReadOperations(),deserializedIoStats.getTotalReadOperations());
        assertEquals(ioStats.getTotalWriteKilobytes(),deserializedIoStats.getTotalWriteKilobytes());
        assertEquals(ioStats.getTotalWriteOperations(),deserializedIoStats.getTotalWriteOperations());
        assertEquals(ioStats.getDevicesStats().length,deserializedIoStats.getDevicesStats().length);
        for (int i=0; i < ioStats.getDevicesStats().length; i++) {
          FsInfo.DeviceStats deviceStats=ioStats.getDevicesStats()[i];
          FsInfo.DeviceStats deserializedDeviceStats=deserializedIoStats.getDevicesStats()[i];
          assertEquals(deviceStats.operations(),deserializedDeviceStats.operations());
          assertEquals(deviceStats.readKilobytes(),deserializedDeviceStats.readKilobytes());
          assertEquals(deviceStats.readOperations(),deserializedDeviceStats.readOperations());
          assertEquals(deviceStats.writeKilobytes(),deserializedDeviceStats.writeKilobytes());
          assertEquals(deviceStats.writeOperations(),deserializedDeviceStats.writeOperations());
        }
      }
      if (nodeStats.getTransport() == null) {
        assertNull(deserializedNodeStats.getTransport());
      }
 else {
        assertEquals(nodeStats.getTransport().getRxCount(),deserializedNodeStats.getTransport().getRxCount());
        assertEquals(nodeStats.getTransport().getRxSize(),deserializedNodeStats.getTransport().getRxSize());
        assertEquals(nodeStats.getTransport().getServerOpen(),deserializedNodeStats.getTransport().getServerOpen());
        assertEquals(nodeStats.getTransport().getTxCount(),deserializedNodeStats.getTransport().getTxCount());
        assertEquals(nodeStats.getTransport().getTxSize(),deserializedNodeStats.getTransport().getTxSize());
      }
      if (nodeStats.getHttp() == null) {
        assertNull(deserializedNodeStats.getHttp());
      }
 else {
        assertEquals(nodeStats.getHttp().getServerOpen(),deserializedNodeStats.getHttp().getServerOpen());
        assertEquals(nodeStats.getHttp().getTotalOpen(),deserializedNodeStats.getHttp().getTotalOpen());
      }
      if (nodeStats.getBreaker() == null) {
        assertNull(deserializedNodeStats.getBreaker());
      }
 else {
        assertEquals(nodeStats.getBreaker().getAllStats().length,deserializedNodeStats.getBreaker().getAllStats().length);
        for (int i=0; i < nodeStats.getBreaker().getAllStats().length; i++) {
          CircuitBreakerStats circuitBreakerStats=nodeStats.getBreaker().getAllStats()[i];
          CircuitBreakerStats deserializedCircuitBreakerStats=deserializedNodeStats.getBreaker().getAllStats()[i];
          assertEquals(circuitBreakerStats.getEstimated(),deserializedCircuitBreakerStats.getEstimated());
          assertEquals(circuitBreakerStats.getLimit(),deserializedCircuitBreakerStats.getLimit());
          assertEquals(circuitBreakerStats.getName(),deserializedCircuitBreakerStats.getName());
          assertEquals(circuitBreakerStats.getOverhead(),deserializedCircuitBreakerStats.getOverhead(),0);
          assertEquals(circuitBreakerStats.getTrippedCount(),deserializedCircuitBreakerStats.getTrippedCount(),0);
        }
      }
      ScriptStats scriptStats=nodeStats.getScriptStats();
      if (scriptStats == null) {
        assertNull(deserializedNodeStats.getScriptStats());
      }
 else {
        assertEquals(scriptStats.getCacheEvictions(),deserializedNodeStats.getScriptStats().getCacheEvictions());
        assertEquals(scriptStats.getCompilations(),deserializedNodeStats.getScriptStats().getCompilations());
      }
      DiscoveryStats discoveryStats=nodeStats.getDiscoveryStats();
      DiscoveryStats deserializedDiscoveryStats=deserializedNodeStats.getDiscoveryStats();
      if (discoveryStats == null) {
        assertNull(deserializedDiscoveryStats);
      }
 else {
        PendingClusterStateStats queueStats=discoveryStats.getQueueStats();
        if (queueStats == null) {
          assertNull(deserializedDiscoveryStats.getQueueStats());
        }
 else {
          assertEquals(queueStats.getCommitted(),deserializedDiscoveryStats.getQueueStats().getCommitted());
          assertEquals(queueStats.getTotal(),deserializedDiscoveryStats.getQueueStats().getTotal());
          assertEquals(queueStats.getPending(),deserializedDiscoveryStats.getQueueStats().getPending());
        }
      }
      IngestStats ingestStats=nodeStats.getIngestStats();
      IngestStats deserializedIngestStats=deserializedNodeStats.getIngestStats();
      if (ingestStats == null) {
        assertNull(deserializedIngestStats);
      }
 else {
        IngestStats.Stats totalStats=ingestStats.getTotalStats();
        assertEquals(totalStats.getIngestCount(),deserializedIngestStats.getTotalStats().getIngestCount());
        assertEquals(totalStats.getIngestCurrent(),deserializedIngestStats.getTotalStats().getIngestCurrent());
        assertEquals(totalStats.getIngestFailedCount(),deserializedIngestStats.getTotalStats().getIngestFailedCount());
        assertEquals(totalStats.getIngestTimeInMillis(),deserializedIngestStats.getTotalStats().getIngestTimeInMillis());
        assertEquals(ingestStats.getStatsPerPipeline().size(),deserializedIngestStats.getStatsPerPipeline().size());
        for (        Map.Entry<String,IngestStats.Stats> entry : ingestStats.getStatsPerPipeline().entrySet()) {
          IngestStats.Stats stats=entry.getValue();
          IngestStats.Stats deserializedStats=deserializedIngestStats.getStatsPerPipeline().get(entry.getKey());
          assertEquals(stats.getIngestFailedCount(),deserializedStats.getIngestFailedCount());
          assertEquals(stats.getIngestTimeInMillis(),deserializedStats.getIngestTimeInMillis());
          assertEquals(stats.getIngestCurrent(),deserializedStats.getIngestCurrent());
          assertEquals(stats.getIngestCount(),deserializedStats.getIngestCount());
        }
      }
    }
   }
 }
