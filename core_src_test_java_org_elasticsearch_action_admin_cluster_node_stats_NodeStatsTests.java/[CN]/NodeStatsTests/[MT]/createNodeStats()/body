{
  DiscoveryNode node=new DiscoveryNode("test_node",LocalTransportAddress.buildUnique(),emptyMap(),emptySet(),VersionUtils.randomVersion(random()));
  OsStats osStats=null;
  if (frequently()) {
    double loadAverages[]=new double[3];
    for (int i=0; i < 3; i++) {
      loadAverages[i]=randomBoolean() ? randomDouble() : -1;
    }
    osStats=new OsStats(System.currentTimeMillis(),new OsStats.Cpu(randomShort(),loadAverages),new OsStats.Mem(randomLong(),randomLong()),new OsStats.Swap(randomLong(),randomLong()));
  }
  ProcessStats processStats=frequently() ? new ProcessStats(randomPositiveLong(),randomPositiveLong(),randomPositiveLong(),new ProcessStats.Cpu(randomShort(),randomPositiveLong()),new ProcessStats.Mem(randomPositiveLong())) : null;
  JvmStats jvmStats=null;
  if (frequently()) {
    int numMemoryPools=randomIntBetween(0,10);
    List<JvmStats.MemoryPool> memoryPools=new ArrayList<>(numMemoryPools);
    for (int i=0; i < numMemoryPools; i++) {
      memoryPools.add(new JvmStats.MemoryPool(randomAsciiOfLengthBetween(3,10),randomPositiveLong(),randomPositiveLong(),randomPositiveLong(),randomPositiveLong()));
    }
    JvmStats.Threads threads=new JvmStats.Threads(randomIntBetween(1,1000),randomIntBetween(1,1000));
    int numGarbageCollectors=randomIntBetween(0,10);
    JvmStats.GarbageCollector[] garbageCollectorsArray=new JvmStats.GarbageCollector[numGarbageCollectors];
    for (int i=0; i < numGarbageCollectors; i++) {
      garbageCollectorsArray[i]=new JvmStats.GarbageCollector(randomAsciiOfLengthBetween(3,10),randomPositiveLong(),randomPositiveLong());
    }
    JvmStats.GarbageCollectors garbageCollectors=new JvmStats.GarbageCollectors(garbageCollectorsArray);
    int numBufferPools=randomIntBetween(0,10);
    List<JvmStats.BufferPool> bufferPoolList=new ArrayList<>();
    for (int i=0; i < numBufferPools; i++) {
      bufferPoolList.add(new JvmStats.BufferPool(randomAsciiOfLengthBetween(3,10),randomPositiveLong(),randomPositiveLong(),randomPositiveLong()));
    }
    JvmStats.Classes classes=new JvmStats.Classes(randomPositiveLong(),randomPositiveLong(),randomPositiveLong());
    jvmStats=frequently() ? new JvmStats(randomPositiveLong(),randomPositiveLong(),new JvmStats.Mem(randomPositiveLong(),randomPositiveLong(),randomPositiveLong(),randomPositiveLong(),randomPositiveLong(),memoryPools),threads,garbageCollectors,randomBoolean() ? Collections.emptyList() : bufferPoolList,classes) : null;
  }
  ThreadPoolStats threadPoolStats=null;
  if (frequently()) {
    int numThreadPoolStats=randomIntBetween(0,10);
    List<ThreadPoolStats.Stats> threadPoolStatsList=new ArrayList<>();
    for (int i=0; i < numThreadPoolStats; i++) {
      threadPoolStatsList.add(new ThreadPoolStats.Stats(randomAsciiOfLengthBetween(3,10),randomIntBetween(1,1000),randomIntBetween(1,1000),randomIntBetween(1,1000),randomPositiveLong(),randomIntBetween(1,1000),randomIntBetween(1,1000)));
    }
    threadPoolStats=new ThreadPoolStats(threadPoolStatsList);
  }
  FsInfo fsInfo=null;
  if (frequently()) {
    int numDeviceStats=randomIntBetween(0,10);
    FsInfo.DeviceStats[] deviceStatsArray=new FsInfo.DeviceStats[numDeviceStats];
    for (int i=0; i < numDeviceStats; i++) {
      FsInfo.DeviceStats previousDeviceStats=randomBoolean() ? null : new FsInfo.DeviceStats(randomInt(),randomInt(),randomAsciiOfLengthBetween(3,10),randomPositiveLong(),randomPositiveLong(),randomPositiveLong(),randomPositiveLong(),null);
      deviceStatsArray[i]=new FsInfo.DeviceStats(randomInt(),randomInt(),randomAsciiOfLengthBetween(3,10),randomPositiveLong(),randomPositiveLong(),randomPositiveLong(),randomPositiveLong(),previousDeviceStats);
    }
    FsInfo.IoStats ioStats=new FsInfo.IoStats(deviceStatsArray);
    int numPaths=randomIntBetween(0,10);
    FsInfo.Path[] paths=new FsInfo.Path[numPaths];
    for (int i=0; i < numPaths; i++) {
      paths[i]=new FsInfo.Path(randomAsciiOfLengthBetween(3,10),randomBoolean() ? randomAsciiOfLengthBetween(3,10) : null,randomPositiveLong(),randomPositiveLong(),randomPositiveLong());
    }
    fsInfo=new FsInfo(randomPositiveLong(),ioStats,paths);
  }
  TransportStats transportStats=frequently() ? new TransportStats(randomPositiveLong(),randomPositiveLong(),randomPositiveLong(),randomPositiveLong(),randomPositiveLong()) : null;
  HttpStats httpStats=frequently() ? new HttpStats(randomPositiveLong(),randomPositiveLong()) : null;
  AllCircuitBreakerStats allCircuitBreakerStats=null;
  if (frequently()) {
    int numCircuitBreakerStats=randomIntBetween(0,10);
    CircuitBreakerStats[] circuitBreakerStatsArray=new CircuitBreakerStats[numCircuitBreakerStats];
    for (int i=0; i < numCircuitBreakerStats; i++) {
      circuitBreakerStatsArray[i]=new CircuitBreakerStats(randomAsciiOfLengthBetween(3,10),randomPositiveLong(),randomPositiveLong(),randomDouble(),randomPositiveLong());
    }
    allCircuitBreakerStats=new AllCircuitBreakerStats(circuitBreakerStatsArray);
  }
  ScriptStats scriptStats=frequently() ? new ScriptStats(randomPositiveLong(),randomPositiveLong()) : null;
  DiscoveryStats discoveryStats=frequently() ? new DiscoveryStats(randomBoolean() ? new PendingClusterStateStats(randomInt(),randomInt(),randomInt()) : null) : null;
  IngestStats ingestStats=null;
  if (frequently()) {
    IngestStats.Stats totalStats=new IngestStats.Stats(randomPositiveLong(),randomPositiveLong(),randomPositiveLong(),randomPositiveLong());
    int numStatsPerPipeline=randomIntBetween(0,10);
    Map<String,IngestStats.Stats> statsPerPipeline=new HashMap<>();
    for (int i=0; i < numStatsPerPipeline; i++) {
      statsPerPipeline.put(randomAsciiOfLengthBetween(3,10),new IngestStats.Stats(randomPositiveLong(),randomPositiveLong(),randomPositiveLong(),randomPositiveLong()));
    }
    ingestStats=new IngestStats(totalStats,statsPerPipeline);
  }
  return new NodeStats(node,randomPositiveLong(),null,osStats,processStats,jvmStats,threadPoolStats,fsInfo,transportStats,httpStats,allCircuitBreakerStats,scriptStats,discoveryStats,ingestStats);
}
