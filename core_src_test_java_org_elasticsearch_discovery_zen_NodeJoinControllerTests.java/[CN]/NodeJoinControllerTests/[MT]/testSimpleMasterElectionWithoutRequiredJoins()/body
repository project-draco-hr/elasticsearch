{
  DiscoveryNodes.Builder nodes=DiscoveryNodes.builder(clusterService.state().nodes()).masterNodeId(null);
  setState(clusterService,ClusterState.builder(clusterService.state()).nodes(nodes));
  int nodeId=0;
  final int requiredJoins=0;
  logger.debug("--> using requiredJoins [{}]",requiredJoins);
  for (int i=randomInt(5); i > 0; i--) {
    try {
      joinNode(newNode(nodeId++));
      fail("failed to fail node join when not a master");
    }
 catch (    ExecutionException e) {
      assertThat(e.getCause(),instanceOf(NotMasterException.class));
    }
  }
  nodeJoinController.startElectionContext();
  final SimpleFuture electionFuture=new SimpleFuture("master election");
  final Thread masterElection=new Thread(new AbstractRunnable(){
    @Override public void onFailure(    Throwable t){
      logger.error("unexpected error from waitToBeElectedAsMaster",t);
      electionFuture.markAsFailed(t);
    }
    @Override protected void doRun() throws Exception {
      nodeJoinController.waitToBeElectedAsMaster(requiredJoins,TimeValue.timeValueHours(30),new NodeJoinController.ElectionCallback(){
        @Override public void onElectedAsMaster(        ClusterState state){
          assertThat("callback called with elected as master, but state disagrees",state.nodes().isLocalNodeElectedMaster(),equalTo(true));
          electionFuture.markAsDone();
        }
        @Override public void onFailure(        Throwable t){
          logger.error("unexpected error while waiting to be elected as master",t);
          electionFuture.markAsFailed(t);
        }
      }
);
    }
  }
);
  masterElection.start();
  logger.debug("--> requiredJoins is set to 0. verifying election finished");
  electionFuture.get();
}
