{
  DiscoveryNodes.Builder nodes=DiscoveryNodes.builder(clusterService.state().nodes()).masterNodeId(null);
  setState(clusterService,ClusterState.builder(clusterService.state()).nodes(nodes));
  int nodeId=0;
  final int requiredJoins=1 + randomInt(5);
  logger.debug("--> using requiredJoins [{}]",requiredJoins);
  for (int i=randomInt(5); i > 0; i--) {
    try {
      joinNode(newNode(nodeId++));
      fail("failed to fail node join when not a master");
    }
 catch (    ExecutionException e) {
      assertThat(e.getCause(),instanceOf(NotMasterException.class));
    }
  }
  nodeJoinController.startElectionContext();
  final SimpleFuture electionFuture=new SimpleFuture("master election");
  final Thread masterElection=new Thread(new AbstractRunnable(){
    @Override public void onFailure(    Throwable t){
      logger.error("unexpected error from waitToBeElectedAsMaster",t);
      electionFuture.markAsFailed(t);
    }
    @Override protected void doRun() throws Exception {
      nodeJoinController.waitToBeElectedAsMaster(requiredJoins,TimeValue.timeValueHours(30),new NodeJoinController.ElectionCallback(){
        @Override public void onElectedAsMaster(        ClusterState state){
          assertThat("callback called with elected as master, but state disagrees",state.nodes().isLocalNodeElectedMaster(),equalTo(true));
          electionFuture.markAsDone();
        }
        @Override public void onFailure(        Throwable t){
          logger.error("unexpected error while waiting to be elected as master",t);
          electionFuture.markAsFailed(t);
        }
      }
);
    }
  }
);
  masterElection.start();
  assertThat("election finished immediately but required joins is [" + requiredJoins + "]",electionFuture.isDone(),equalTo(false));
  final int initialJoins=randomIntBetween(0,requiredJoins - 1);
  final ArrayList<SimpleFuture> pendingJoins=new ArrayList<>();
  ArrayList<DiscoveryNode> nodesToJoin=new ArrayList<>();
  for (int i=0; i < initialJoins; i++) {
    DiscoveryNode node=newNode(nodeId++,true);
    for (int j=1 + randomInt(3); j > 0; j--) {
      nodesToJoin.add(node);
    }
  }
  for (int i=0; i < requiredJoins; i++) {
    DiscoveryNode node=newNode(nodeId++,false);
    for (int j=1 + randomInt(3); j > 0; j--) {
      nodesToJoin.add(node);
    }
  }
  shuffle(nodesToJoin,random());
  logger.debug("--> joining [{}] unique master nodes. Total of [{}] join requests",initialJoins,nodesToJoin.size());
  for (  DiscoveryNode node : nodesToJoin) {
    pendingJoins.add(joinNodeAsync(node));
  }
  logger.debug("--> asserting master election didn't finish yet");
  assertThat("election finished after [" + initialJoins + "] master nodes but required joins is ["+ requiredJoins+ "]",electionFuture.isDone(),equalTo(false));
  final int finalJoins=requiredJoins - initialJoins + randomInt(5);
  nodesToJoin.clear();
  for (int i=0; i < finalJoins; i++) {
    DiscoveryNode node=newNode(nodeId++,true);
    for (int j=1 + randomInt(3); j > 0; j--) {
      nodesToJoin.add(node);
    }
  }
  for (int i=0; i < requiredJoins; i++) {
    DiscoveryNode node=newNode(nodeId++,false);
    for (int j=1 + randomInt(3); j > 0; j--) {
      nodesToJoin.add(node);
    }
  }
  shuffle(nodesToJoin,random());
  logger.debug("--> joining [{}] nodes, with repetition a total of [{}]",finalJoins,nodesToJoin.size());
  for (  DiscoveryNode node : nodesToJoin) {
    pendingJoins.add(joinNodeAsync(node));
  }
  logger.debug("--> waiting for master election to with no exception");
  electionFuture.get();
  logger.debug("--> waiting on all joins to be processed");
  for (  SimpleFuture future : pendingJoins) {
    logger.debug("waiting on {}",future);
    future.get();
  }
  logger.debug("--> testing accumulation stopped");
  nodeJoinController.startElectionContext();
  nodeJoinController.stopElectionContext("test");
}
