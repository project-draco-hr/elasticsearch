{
  if (suggestionContext.mapper() == null || !(suggestionContext.mapper() instanceof CompletionFieldMapper)) {
    throw new ElasticSearchException("Field [" + suggestionContext.getField() + "] is not a completion suggest field");
  }
  CompletionSuggestion completionSuggestion=new CompletionSuggestion(name,suggestionContext.getSize());
  UnicodeUtil.UTF8toUTF16(suggestionContext.getText(),spare);
  CompletionSuggestion.Entry completionSuggestEntry=new CompletionSuggestion.Entry(new StringText(spare.toString()),0,spare.length());
  completionSuggestion.addTerm(completionSuggestEntry);
  String fieldName=suggestionContext.getField();
  Map<String,CompletionSuggestion.Entry.Option> results=Maps.newHashMapWithExpectedSize(indexReader.leaves().size() * suggestionContext.getSize());
  for (  AtomicReaderContext atomicReaderContext : indexReader.leaves()) {
    AtomicReader atomicReader=atomicReaderContext.reader();
    Terms terms=atomicReader.fields().terms(fieldName);
    if (terms instanceof Completion090PostingsFormat.CompletionTerms) {
      Completion090PostingsFormat.CompletionTerms lookupTerms=(Completion090PostingsFormat.CompletionTerms)terms;
      Lookup lookup=lookupTerms.getLookup(suggestionContext.mapper(),suggestionContext);
      List<Lookup.LookupResult> lookupResults=lookup.lookup(spare,false,suggestionContext.getSize());
      for (      Lookup.LookupResult res : lookupResults) {
        final String key=res.key.toString();
        final float score=res.value;
        final Option value=results.get(key);
        if (value == null) {
          final Option option=new CompletionSuggestion.Entry.Option(new StringText(key),score,res.payload == null ? null : new BytesArray(res.payload));
          results.put(key,option);
        }
 else         if (value.getScore() < score) {
          value.setScore(score);
          value.setPayload(res.payload == null ? null : new BytesArray(res.payload));
        }
      }
    }
  }
  final List<CompletionSuggestion.Entry.Option> options=new ArrayList<CompletionSuggestion.Entry.Option>(results.values());
  CollectionUtil.introSort(options,scoreComparator);
  int optionCount=Math.min(suggestionContext.getSize(),options.size());
  for (int i=0; i < optionCount; i++) {
    completionSuggestEntry.addOption(options.get(i));
  }
  return completionSuggestion;
}
