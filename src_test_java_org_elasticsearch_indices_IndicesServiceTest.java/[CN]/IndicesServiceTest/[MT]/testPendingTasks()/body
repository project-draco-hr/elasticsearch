{
  IndicesService indicesService=getIndicesService();
  IndexService test=createIndex("test");
  NodeEnvironment nodeEnc=getInstanceFromNode(NodeEnvironment.class);
  assertTrue(test.hasShard(0));
  Path[] paths=nodeEnc.shardDataPaths(new ShardId(test.index(),0),test.getIndexSettings());
  try {
    indicesService.processPendingDeletes(test.index(),new TimeValue(0,TimeUnit.MILLISECONDS));
    fail("can't get lock");
  }
 catch (  LockObtainFailedException ex) {
  }
  for (  Path p : paths) {
    assertTrue(Files.exists(p));
  }
  indicesService.addPendingDelete(test.index(),new ShardId(test.index(),0),test.getIndexSettings());
  assertAcked(client().admin().indices().prepareClose("test"));
  for (  Path p : paths) {
    assertTrue(Files.exists(p));
  }
  assertEquals(indicesService.numPendingDeletes(test.index()),1);
  indicesService.processPendingDeletes(test.index(),new TimeValue(0,TimeUnit.MILLISECONDS));
  assertEquals(indicesService.numPendingDeletes(test.index()),0);
  for (  Path p : paths) {
    assertFalse(Files.exists(p));
  }
  if (randomBoolean()) {
    indicesService.addPendingDelete(test.index(),new ShardId(test.index(),0),test.getIndexSettings());
    indicesService.addPendingDelete(test.index(),new ShardId(test.index(),1),test.getIndexSettings());
    indicesService.addPendingDelete(new Index("bogus"),new ShardId("bogus",1),test.getIndexSettings());
    assertEquals(indicesService.numPendingDeletes(test.index()),2);
    indicesService.processPendingDeletes(test.index(),new TimeValue(0,TimeUnit.MILLISECONDS));
    assertEquals(indicesService.numPendingDeletes(test.index()),0);
  }
  assertAcked(client().admin().indices().prepareOpen("test"));
}
