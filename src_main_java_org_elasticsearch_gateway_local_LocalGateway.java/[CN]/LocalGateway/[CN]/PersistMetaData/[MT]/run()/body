{
  LocalGatewayMetaState.Builder builder=LocalGatewayMetaState.builder();
  if (currentMetaState != null) {
    builder.state(currentMetaState);
  }
  final long version=event.state().metaData().version();
  builder.version(version);
  builder.metaData(event.state().metaData());
  LocalGatewayMetaState stateToWrite=builder.build();
  CachedStreamOutput.Entry cachedEntry=CachedStreamOutput.popEntry();
  StreamOutput streamOutput;
  try {
    try {
      if (compress) {
        streamOutput=cachedEntry.cachedLZFBytes();
      }
 else {
        streamOutput=cachedEntry.cachedBytes();
      }
      XContentBuilder xContentBuilder=XContentFactory.contentBuilder(XContentType.JSON,streamOutput);
      if (prettyPrint) {
        xContentBuilder.prettyPrint();
      }
      xContentBuilder.startObject();
      LocalGatewayMetaState.Builder.toXContent(stateToWrite,xContentBuilder,ToXContent.EMPTY_PARAMS);
      xContentBuilder.endObject();
      xContentBuilder.close();
    }
 catch (    Exception e) {
      logger.warn("failed to serialize local gateway state",e);
      return;
    }
    boolean serializedAtLeastOnce=false;
    for (    File dataLocation : nodeEnv.nodeDataLocations()) {
      File stateLocation=new File(dataLocation,"_state");
      if (!stateLocation.exists()) {
        FileSystemUtils.mkdirs(stateLocation);
      }
      File stateFile=new File(stateLocation,"metadata-" + version);
      FileOutputStream fos=null;
      try {
        fos=new FileOutputStream(stateFile);
        fos.write(cachedEntry.bytes().underlyingBytes(),0,cachedEntry.bytes().size());
        fos.getChannel().force(true);
        serializedAtLeastOnce=true;
      }
 catch (      Exception e) {
        logger.warn("failed to write local gateway state to {}",e,stateFile);
      }
 finally {
        Closeables.closeQuietly(fos);
      }
    }
    if (serializedAtLeastOnce) {
      currentMetaState=stateToWrite;
      metaDataPersistedAtLeastOnce=true;
      for (      File dataLocation : nodeEnv.nodeDataLocations()) {
        File stateLocation=new File(dataLocation,"_state");
        if (!stateLocation.exists()) {
          continue;
        }
        File[] files=stateLocation.listFiles(new FilenameFilter(){
          @Override public boolean accept(          File dir,          String name){
            return name.startsWith("metadata-") && !name.equals("metadata-" + version);
          }
        }
);
        if (files != null) {
          for (          File file : files) {
            file.delete();
          }
        }
      }
    }
  }
  finally {
    CachedStreamOutput.pushEntry(cachedEntry);
  }
}
