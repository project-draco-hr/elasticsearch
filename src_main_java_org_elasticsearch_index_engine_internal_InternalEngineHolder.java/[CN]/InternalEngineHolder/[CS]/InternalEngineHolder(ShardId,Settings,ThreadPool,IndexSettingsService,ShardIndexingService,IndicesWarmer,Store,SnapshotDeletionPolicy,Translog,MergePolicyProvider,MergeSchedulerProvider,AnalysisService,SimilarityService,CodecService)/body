{
  super(shardId,indexSettings);
  Preconditions.checkNotNull(store,"Store must be provided to the engine");
  Preconditions.checkNotNull(deletionPolicy,"Snapshot deletion policy must be provided to the engine");
  Preconditions.checkNotNull(translog,"Translog must be provided to the engine");
  this.gcDeletesInMillis=indexSettings.getAsTime(INDEX_GC_DELETES,TimeValue.timeValueSeconds(60)).millis();
  this.indexingBufferSize=componentSettings.getAsBytesSize("index_buffer_size",new ByteSizeValue(64,ByteSizeUnit.MB));
  this.codecName=indexSettings.get(INDEX_CODEC,"default");
  this.threadPool=threadPool;
  this.indexSettingsService=indexSettingsService;
  this.indexingService=indexingService;
  this.warmer=(InternalIndicesWarmer)warmer;
  this.store=store;
  this.deletionPolicy=deletionPolicy;
  this.translog=translog;
  this.mergePolicyProvider=mergePolicyProvider;
  this.mergeScheduler=mergeScheduler;
  this.analysisService=analysisService;
  this.similarityService=similarityService;
  this.codecService=codecService;
  this.compoundOnFlush=indexSettings.getAsBoolean(INDEX_COMPOUND_ON_FLUSH,this.compoundOnFlush);
  this.indexConcurrency=indexSettings.getAsInt(INDEX_INDEX_CONCURRENCY,Math.max(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES,(int)(EsExecutors.boundedNumberOfProcessors(indexSettings) * 0.65)));
  this.optimizeAutoGenerateId=indexSettings.getAsBoolean("index.optimize_auto_generated_id",true);
  this.failEngineOnCorruption=indexSettings.getAsBoolean(INDEX_FAIL_ON_CORRUPTION,true);
  this.failOnMergeFailure=indexSettings.getAsBoolean(INDEX_FAIL_ON_MERGE_FAILURE,true);
  this.mergeSchedulerFailureListener=new FailEngineOnMergeFailure();
  this.mergeScheduler.addFailureListener(mergeSchedulerFailureListener);
  this.mergeSchedulerListener=new MergeScheduleListener();
  this.mergeScheduler.addListener(mergeSchedulerListener);
  this.settingsListener=new ApplySettings();
  this.indexSettingsService.addListener(this.settingsListener);
}
