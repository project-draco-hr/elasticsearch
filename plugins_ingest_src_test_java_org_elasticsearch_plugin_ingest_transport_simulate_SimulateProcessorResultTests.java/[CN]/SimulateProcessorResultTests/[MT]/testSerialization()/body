{
  String processorId=randomAsciiOfLengthBetween(1,10);
  boolean isFailure=randomBoolean();
  SimulateProcessorResult simulateProcessorResult;
  if (isFailure) {
    simulateProcessorResult=new SimulateProcessorResult(processorId,new IllegalArgumentException("test"));
  }
 else {
    IngestDocument ingestDocument=new IngestDocument(randomAsciiOfLengthBetween(1,10),randomAsciiOfLengthBetween(1,10),randomAsciiOfLengthBetween(1,10),Collections.singletonMap(randomAsciiOfLengthBetween(1,10),randomAsciiOfLengthBetween(1,10)));
    simulateProcessorResult=new SimulateProcessorResult(processorId,ingestDocument);
  }
  BytesStreamOutput out=new BytesStreamOutput();
  simulateProcessorResult.writeTo(out);
  StreamInput streamInput=StreamInput.wrap(out.bytes());
  SimulateProcessorResult otherSimulateProcessorResult=SimulateProcessorResult.readSimulateProcessorResultFrom(streamInput);
  assertThat(otherSimulateProcessorResult.getProcessorId(),equalTo(simulateProcessorResult.getProcessorId()));
  assertThat(otherSimulateProcessorResult.getIngestDocument(),equalTo(simulateProcessorResult.getIngestDocument()));
  if (isFailure) {
    assertThat(otherSimulateProcessorResult.getFailure(),instanceOf(IllegalArgumentException.class));
    IllegalArgumentException e=(IllegalArgumentException)otherSimulateProcessorResult.getFailure();
    assertThat(e.getMessage(),equalTo("test"));
  }
}
