{
  super.readFrom(in);
  int size=in.readVInt();
  locations=new IntArrayList(size);
  types=new ArrayList<>(size);
  ids=new ArrayList<>(size);
  fields=new ArrayList<>(size);
  versions=new LongArrayList(size);
  versionTypes=new ArrayList<>(size);
  fetchSourceContexts=new ArrayList<>(size);
  for (int i=0; i < size; i++) {
    locations.add(in.readVInt());
    if (in.readBoolean()) {
      types.add(in.readSharedString());
    }
 else {
      types.add(null);
    }
    ids.add(in.readString());
    int size1=in.readVInt();
    if (size1 > 0) {
      String[] fields=new String[size1];
      for (int j=0; j < size1; j++) {
        fields[j]=in.readString();
      }
      this.fields.add(fields);
    }
 else {
      fields.add(null);
    }
    versions.add(Versions.readVersionWithVLongForBW(in));
    versionTypes.add(VersionType.fromValue(in.readByte()));
    fetchSourceContexts.add(FetchSourceContext.optionalReadFromStream(in));
  }
  preference=in.readOptionalString();
  refresh=in.readBoolean();
  byte realtime=in.readByte();
  if (realtime == 0) {
    this.realtime=false;
  }
 else   if (realtime == 1) {
    this.realtime=true;
  }
}
