{
  ACQUIRED_PAGES.put(v,new Throwable());
  final Thread t=Thread.currentThread();
  return new V<T>(){
    @Override public boolean release() throws ElasticsearchException {
      if (t != Thread.currentThread()) {
        throw new RuntimeException("Page was allocated in " + t + " but released in "+ Thread.currentThread());
      }
      final Throwable t=ACQUIRED_PAGES.remove(v);
      if (t == null) {
        throw new IllegalStateException("Releasing a page that has not been acquired");
      }
      final T ref=v();
      for (int i=0; i < Array.getLength(ref); ++i) {
        if (ref instanceof Object[]) {
          Array.set(ref,i,null);
        }
 else {
          Array.set(ref,i,(byte)random.nextInt(256));
        }
      }
      return v.release();
    }
    @Override public T v(){
      return v.v();
    }
    @Override public boolean isRecycled(){
      return v.isRecycled();
    }
  }
;
}
