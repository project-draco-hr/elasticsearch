{
  String[] ignorePrefixes=new String[]{"es.default.","elasticsearch.default."};
  boolean useSystemProperties=!pSettings.getAsBoolean(IGNORE_SYSTEM_PROPERTIES_SETTING,false);
  Settings.Builder settingsBuilder=settingsBuilder().put(pSettings);
  if (useSystemProperties) {
    settingsBuilder.putProperties("elasticsearch.default.",System.getProperties()).putProperties("es.default.",System.getProperties()).putProperties("elasticsearch.",System.getProperties(),ignorePrefixes).putProperties("es.",System.getProperties(),ignorePrefixes);
  }
  settingsBuilder.replacePropertyPlaceholders();
  Environment environment=new Environment(settingsBuilder.build());
  if (loadConfigSettings) {
    boolean loadFromEnv=true;
    if (useSystemProperties) {
      if (Strings.hasText(System.getProperty("es.default.config"))) {
        loadFromEnv=true;
        settingsBuilder.loadFromPath(environment.configFile().resolve(System.getProperty("es.default.config")));
      }
      if (Strings.hasText(System.getProperty("es.config"))) {
        loadFromEnv=false;
        settingsBuilder.loadFromPath(environment.configFile().resolve(System.getProperty("es.config")));
      }
      if (Strings.hasText(System.getProperty("elasticsearch.config"))) {
        loadFromEnv=false;
        settingsBuilder.loadFromPath(environment.configFile().resolve(System.getProperty("elasticsearch.config")));
      }
    }
    if (loadFromEnv) {
      for (      String allowedSuffix : ALLOWED_SUFFIXES) {
        try {
          settingsBuilder.loadFromPath(environment.configFile().resolve("elasticsearch" + allowedSuffix));
        }
 catch (        SettingsException e) {
        }
      }
    }
  }
  settingsBuilder.put(pSettings);
  if (useSystemProperties) {
    settingsBuilder.putProperties("elasticsearch.",System.getProperties(),ignorePrefixes).putProperties("es.",System.getProperties(),ignorePrefixes);
  }
  settingsBuilder.replacePropertyPlaceholders();
  for (  Map.Entry<String,String> entry : pSettings.getAsMap().entrySet()) {
    String setting=entry.getKey();
    if (setting.startsWith("force.")) {
      settingsBuilder.remove(setting);
      settingsBuilder.put(setting.substring("force.".length()),entry.getValue());
    }
  }
  settingsBuilder.replacePropertyPlaceholders();
  if (settingsBuilder.get("name") == null) {
    String name=System.getProperty("name");
    if (name != null) {
      settingsBuilder.put("name",name);
    }
  }
  if (settingsBuilder.get(ClusterName.SETTING) == null) {
    settingsBuilder.put(ClusterName.SETTING,ClusterName.DEFAULT.value());
  }
  String v=settingsBuilder.get(Settings.SETTINGS_REQUIRE_UNITS);
  if (v != null) {
    Settings.setSettingsRequireUnits(Booleans.parseBoolean(v,true));
  }
  Settings settings=replacePromptPlaceholders(settingsBuilder.build(),terminal);
  if (settings.get("name") == null) {
    String name=settings.get("node.name");
    if (name == null || name.isEmpty()) {
      InputStream input;
      Path namesPath=environment.configFile().resolve("names.txt");
      if (Files.exists(namesPath)) {
        try {
          input=Files.newInputStream(namesPath);
        }
 catch (        IOException e) {
          throw new RuntimeException("Failed to load custom names.txt from " + namesPath,e);
        }
      }
 else {
        input=InternalSettingsPreparer.class.getResourceAsStream("/config/names.txt");
      }
      name=Names.randomNodeName(input);
    }
    settings=settingsBuilder().put(settings).put("name",name).build();
  }
  environment=new Environment(settings);
  settingsBuilder=settingsBuilder().put(settings);
  settingsBuilder.put("path.logs",cleanPath(environment.logsFile().toAbsolutePath().toString()));
  settings=settingsBuilder.build();
  return new Tuple<>(settings,environment);
}
