{
  super(settings);
  List<Tuple<PluginInfo,Plugin>> pluginsLoaded=new ArrayList<>();
  List<PluginInfo> pluginsList=new ArrayList<>();
  for (  Class<? extends Plugin> pluginClass : classpathPlugins) {
    Plugin plugin=loadPlugin(pluginClass,settings);
    PluginInfo pluginInfo=new PluginInfo(pluginClass.getName(),"classpath plugin","NA",pluginClass.getName());
    if (logger.isTraceEnabled()) {
      logger.trace("plugin loaded from classpath [{}]",pluginInfo);
    }
    pluginsLoaded.add(new Tuple<>(pluginInfo,plugin));
    pluginsList.add(pluginInfo);
  }
  List<PluginInfo> modulesList=new ArrayList<>();
  if (modulesDirectory != null) {
    try {
      List<Bundle> bundles=getModuleBundles(modulesDirectory);
      List<Tuple<PluginInfo,Plugin>> loaded=loadBundles(bundles);
      pluginsLoaded.addAll(loaded);
      for (      Tuple<PluginInfo,Plugin> module : loaded) {
        modulesList.add(module.v1());
      }
    }
 catch (    IOException ex) {
      throw new IllegalStateException("Unable to initialize modules",ex);
    }
  }
  if (pluginsDirectory != null) {
    try {
      List<Bundle> bundles=getPluginBundles(pluginsDirectory);
      List<Tuple<PluginInfo,Plugin>> loaded=loadBundles(bundles);
      pluginsLoaded.addAll(loaded);
      for (      Tuple<PluginInfo,Plugin> plugin : loaded) {
        pluginsList.add(plugin.v1());
      }
    }
 catch (    IOException ex) {
      throw new IllegalStateException("Unable to initialize plugins",ex);
    }
  }
  this.info=new PluginsAndModules(pluginsList,modulesList);
  this.plugins=Collections.unmodifiableList(pluginsLoaded);
  Set<String> pluginsNames=new HashSet<>();
  for (  Tuple<PluginInfo,Plugin> tuple : this.plugins) {
    pluginsNames.add(tuple.v1().getName());
  }
  List<String> mandatoryPlugins=MANDATORY_SETTING.get(settings);
  if (mandatoryPlugins.isEmpty() == false) {
    Set<String> missingPlugins=new HashSet<>();
    for (    String mandatoryPlugin : mandatoryPlugins) {
      if (!pluginsNames.contains(mandatoryPlugin) && !missingPlugins.contains(mandatoryPlugin)) {
        missingPlugins.add(mandatoryPlugin);
      }
    }
    if (!missingPlugins.isEmpty()) {
      throw new ElasticsearchException("Missing mandatory plugins [" + Strings.collectionToDelimitedString(missingPlugins,", ") + "]");
    }
  }
  logPluginInfo(info.getModuleInfos(),"module",logger);
  logPluginInfo(info.getPluginInfos(),"plugin",logger);
  Map<Plugin,List<OnModuleReference>> onModuleReferences=new HashMap<>();
  for (  Tuple<PluginInfo,Plugin> pluginEntry : this.plugins) {
    Plugin plugin=pluginEntry.v2();
    List<OnModuleReference> list=new ArrayList<>();
    for (    Method method : plugin.getClass().getMethods()) {
      if (!method.getName().equals("onModule")) {
        continue;
      }
      if (method.getParameterTypes().length == 1 && method.getParameterTypes()[0].equals(IndexModule.class)) {
        continue;
      }
      if (method.getParameterTypes().length == 0 || method.getParameterTypes().length > 1) {
        logger.warn("Plugin: {} implementing onModule with no parameters or more than one parameter",pluginEntry.v1().getName());
        continue;
      }
      Class moduleClass=method.getParameterTypes()[0];
      if (!Module.class.isAssignableFrom(moduleClass)) {
        if (method.getDeclaringClass() == Plugin.class) {
          continue;
        }
        throw new RuntimeException("Plugin: [" + pluginEntry.v1().getName() + "] implements onModule taking a parameter that isn't a Module ["+ moduleClass.getSimpleName()+ "]");
      }
      list.add(new OnModuleReference(moduleClass,method));
    }
    if (!list.isEmpty()) {
      onModuleReferences.put(plugin,list);
    }
  }
  this.onModuleReferences=Collections.unmodifiableMap(onModuleReferences);
}
