{
  assertAcked(client().admin().indices().prepareCreate("test").setSettings(Settings.builder().put(indexSettings).put(EnableAllocationDecider.INDEX_ROUTING_REBALANCE_ENABLE_SETTING.getKey(),EnableAllocationDecider.Rebalance.NONE)));
  client().admin().cluster().prepareHealth().setWaitForGreenStatus().setTimeout("30s").get();
  logger.info("--> indexing docs");
  for (int i=0; i < 1000; i++) {
    client().prepareIndex("test","type").setSource("field","value").execute().actionGet();
    if ((i % 200) == 0) {
      client().admin().indices().prepareFlush().execute().actionGet();
    }
  }
  if (randomBoolean()) {
    client().admin().indices().prepareFlush().execute().actionGet();
  }
  logger.info("--> running cluster health");
  client().admin().cluster().prepareHealth().setWaitForGreenStatus().setTimeout("30s").get();
  client().admin().indices().prepareForceMerge("test").setMaxNumSegments(100).get();
  client().admin().indices().prepareFlush().setWaitIfOngoing(true).setForce(true).get();
  if (useSyncIds == false) {
    logger.info("--> disabling allocation while the cluster is shut down");
    client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().put(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE_SETTING.getKey(),EnableAllocationDecider.Allocation.NONE)).get();
    logger.info("--> full cluster restart");
    restartCluster.run();
    logger.info("--> waiting for cluster to return to green after first shutdown");
    client().admin().cluster().prepareHealth().setWaitForGreenStatus().setTimeout("30s").get();
  }
 else {
    logger.info("--> trying to sync flush");
    assertEquals(client().admin().indices().prepareSyncedFlush("test").get().failedShards(),0);
    assertSyncIdsNotNull();
  }
  logger.info("--> disabling allocation while the cluster is shut down{}",useSyncIds ? "" : " a second time");
  client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().put(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE_SETTING.getKey(),EnableAllocationDecider.Allocation.NONE)).get();
  logger.info("--> full cluster restart");
  restartCluster.run();
  logger.info("--> waiting for cluster to return to green after {}shutdown",useSyncIds ? "" : "second ");
  client().admin().cluster().prepareHealth().setWaitForGreenStatus().setTimeout("30s").get();
  if (useSyncIds) {
    assertSyncIdsNotNull();
  }
  RecoveryResponse recoveryResponse=client().admin().indices().prepareRecoveries("test").get();
  for (  RecoveryState recoveryState : recoveryResponse.shardRecoveryStates().get("test")) {
    long recovered=0;
    for (    RecoveryState.File file : recoveryState.getIndex().fileDetails()) {
      if (file.name().startsWith("segments")) {
        recovered+=file.length();
      }
    }
    if (!recoveryState.getPrimary() && (useSyncIds == false)) {
      logger.info("--> replica shard {} recovered from {} to {}, recovered {}, reuse {}",recoveryState.getShardId().getId(),recoveryState.getSourceNode().getName(),recoveryState.getTargetNode().getName(),recoveryState.getIndex().recoveredBytes(),recoveryState.getIndex().reusedBytes());
      assertThat("no bytes should be recovered",recoveryState.getIndex().recoveredBytes(),equalTo(recovered));
      assertThat("data should have been reused",recoveryState.getIndex().reusedBytes(),greaterThan(0L));
      assertThat("all bytes should be reused except of the segments file",recoveryState.getIndex().reusedBytes(),equalTo(recoveryState.getIndex().totalBytes() - recovered));
      assertThat("no files should be recovered except of the segments file",recoveryState.getIndex().recoveredFileCount(),equalTo(1));
      assertThat("all files should be reused except of the segments file",recoveryState.getIndex().reusedFileCount(),equalTo(recoveryState.getIndex().totalFileCount() - 1));
      assertThat("> 0 files should be reused",recoveryState.getIndex().reusedFileCount(),greaterThan(0));
    }
 else {
      if (useSyncIds && !recoveryState.getPrimary()) {
        logger.info("--> replica shard {} recovered from {} to {} using sync id, recovered {}, reuse {}",recoveryState.getShardId().getId(),recoveryState.getSourceNode().getName(),recoveryState.getTargetNode().getName(),recoveryState.getIndex().recoveredBytes(),recoveryState.getIndex().reusedBytes());
      }
      assertThat(recoveryState.getIndex().recoveredBytes(),equalTo(0L));
      assertThat(recoveryState.getIndex().reusedBytes(),equalTo(recoveryState.getIndex().totalBytes()));
      assertThat(recoveryState.getIndex().recoveredFileCount(),equalTo(0));
      assertThat(recoveryState.getIndex().reusedFileCount(),equalTo(recoveryState.getIndex().totalFileCount()));
    }
  }
}
