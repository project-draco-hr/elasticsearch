{
  SearchSourceBuilder searchSourceBuilder=null;
  String queryString=request.param("q");
  if (queryString != null) {
    QueryStringQueryBuilder queryBuilder=QueryBuilders.queryString(queryString);
    queryBuilder.defaultField(request.param("df"));
    queryBuilder.analyzer(request.param("analyzer"));
    queryBuilder.analyzeWildcard(request.paramAsBoolean("analyze_wildcard",false));
    queryBuilder.lowercaseExpandedTerms(request.paramAsBoolean("lowercase_expanded_terms",true));
    String defaultOperator=request.param("default_operator");
    if (defaultOperator != null) {
      if ("OR".equals(defaultOperator)) {
        queryBuilder.defaultOperator(QueryStringQueryBuilder.Operator.OR);
      }
 else       if ("AND".equals(defaultOperator)) {
        queryBuilder.defaultOperator(QueryStringQueryBuilder.Operator.AND);
      }
 else {
        throw new ElasticSearchIllegalArgumentException("Unsupported defaultOperator [" + defaultOperator + "], can either be [OR] or [AND]");
      }
    }
    if (searchSourceBuilder == null) {
      searchSourceBuilder=new SearchSourceBuilder();
    }
    searchSourceBuilder.query(queryBuilder);
  }
  int from=request.paramAsInt("from",-1);
  if (from != -1) {
    if (searchSourceBuilder == null) {
      searchSourceBuilder=new SearchSourceBuilder();
    }
    searchSourceBuilder.from(from);
  }
  int size=request.paramAsInt("size",-1);
  if (size != -1) {
    if (searchSourceBuilder == null) {
      searchSourceBuilder=new SearchSourceBuilder();
    }
    searchSourceBuilder.size(size);
  }
  if (request.hasParam("explain")) {
    if (searchSourceBuilder == null) {
      searchSourceBuilder=new SearchSourceBuilder();
    }
    searchSourceBuilder.explain(request.paramAsBooleanOptional("explain",null));
  }
  if (request.hasParam("version")) {
    if (searchSourceBuilder == null) {
      searchSourceBuilder=new SearchSourceBuilder();
    }
    searchSourceBuilder.version(request.paramAsBooleanOptional("version",null));
  }
  if (request.hasParam("timeout")) {
    if (searchSourceBuilder == null) {
      searchSourceBuilder=new SearchSourceBuilder();
    }
    searchSourceBuilder.timeout(request.paramAsTime("timeout",null));
  }
  String sField=request.param("fields");
  if (sField != null) {
    if (searchSourceBuilder == null) {
      searchSourceBuilder=new SearchSourceBuilder();
    }
    if (!Strings.hasText(sField)) {
      searchSourceBuilder.noFields();
    }
 else {
      String[] sFields=Strings.splitStringByCommaToArray(sField);
      if (sFields != null) {
        for (        String field : sFields) {
          searchSourceBuilder.field(field);
        }
      }
    }
  }
  String sSorts=request.param("sort");
  if (sSorts != null) {
    if (searchSourceBuilder == null) {
      searchSourceBuilder=new SearchSourceBuilder();
    }
    String[] sorts=Strings.splitStringByCommaToArray(sSorts);
    for (    String sort : sorts) {
      int delimiter=sort.lastIndexOf(":");
      if (delimiter != -1) {
        String sortField=sort.substring(0,delimiter);
        String reverse=sort.substring(delimiter + 1);
        if ("asc".equals(reverse)) {
          searchSourceBuilder.sort(sortField,SortOrder.ASC);
        }
 else         if ("desc".equals(reverse)) {
          searchSourceBuilder.sort(sortField,SortOrder.DESC);
        }
      }
 else {
        searchSourceBuilder.sort(sort);
      }
    }
  }
  String sIndicesBoost=request.param("indices_boost");
  if (sIndicesBoost != null) {
    if (searchSourceBuilder == null) {
      searchSourceBuilder=new SearchSourceBuilder();
    }
    String[] indicesBoost=Strings.splitStringByCommaToArray(sIndicesBoost);
    for (    String indexBoost : indicesBoost) {
      int divisor=indexBoost.indexOf(',');
      if (divisor == -1) {
        throw new ElasticSearchIllegalArgumentException("Illegal index boost [" + indexBoost + "], no ','");
      }
      String indexName=indexBoost.substring(0,divisor);
      String sBoost=indexBoost.substring(divisor + 1);
      try {
        searchSourceBuilder.indexBoost(indexName,Float.parseFloat(sBoost));
      }
 catch (      NumberFormatException e) {
        throw new ElasticSearchIllegalArgumentException("Illegal index boost [" + indexBoost + "], boost not a float number");
      }
    }
  }
  String sStats=request.param("stats");
  if (sStats != null) {
    if (searchSourceBuilder == null) {
      searchSourceBuilder=new SearchSourceBuilder();
    }
    searchSourceBuilder.stats(Strings.splitStringByCommaToArray(sStats));
  }
  return searchSourceBuilder;
}
