{
  logger.info("Creating index test");
  int numOfTypes=randomIntBetween(2,10);
  CreateIndexRequestBuilder createRequestBuilder=prepareCreate("test");
  for (int i=0; i < numOfTypes; i++) {
    createRequestBuilder.addMapping("type" + i,jsonBuilder().startObject().startObject("type" + i).startObject("properties").startObject("text").field("type","string").endObject().endObject().endObject().endObject());
  }
  assertAcked(createRequestBuilder);
  logger.info("Running Cluster Health");
  assertThat(ensureGreen(),equalTo(ClusterHealthStatus.GREEN));
  logger.info("Indexing...");
  List<IndexRequestBuilder> builders=new ArrayList<>(numOfTypes);
  for (int i=0; i < numOfTypes; i++) {
    builders.add(client().prepareIndex("test","type" + i).setSource("text","lucene" + " " + i).setId(String.valueOf(i)));
  }
  indexRandom(true,builders);
  logger.info("Running MoreLikeThis");
  MoreLikeThisQueryBuilder queryBuilder=QueryBuilders.moreLikeThisQuery(new String[]{"text"},null,new Item[]{new Item("test","type0","0")}).include(true).minTermFreq(1).minDocFreq(1);
  String[] types=new String[numOfTypes];
  for (int i=0; i < numOfTypes; i++) {
    types[i]="type" + i;
  }
  SearchResponse mltResponse=client().prepareSearch().setTypes(types).setQuery(queryBuilder).execute().actionGet();
  assertHitCount(mltResponse,numOfTypes);
}
