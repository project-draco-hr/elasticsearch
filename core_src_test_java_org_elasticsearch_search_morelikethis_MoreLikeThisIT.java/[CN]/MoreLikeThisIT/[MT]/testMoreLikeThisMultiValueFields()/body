{
  logger.info("Creating the index ...");
  assertAcked(prepareCreate("test").addMapping("type1","text","type=text,analyzer=keyword").setSettings(SETTING_NUMBER_OF_SHARDS,1));
  ensureGreen();
  logger.info("Indexing ...");
  String[] values={"aaaa","bbbb","cccc","dddd","eeee","ffff","gggg","hhhh","iiii","jjjj"};
  List<IndexRequestBuilder> builders=new ArrayList<>(values.length + 1);
  builders.add(client().prepareIndex("test","type1","0").setSource("text",values));
  for (int i=0; i < values.length; i++) {
    builders.add(client().prepareIndex("test","type1",String.valueOf(i + 1)).setSource("text",values[i]));
  }
  indexRandom(true,builders);
  int maxIters=randomIntBetween(10,20);
  for (int i=0; i < maxIters; i++) {
    int max_query_terms=randomIntBetween(1,values.length);
    logger.info("Running More Like This with max_query_terms = {}",max_query_terms);
    MoreLikeThisQueryBuilder mltQuery=moreLikeThisQuery(new String[]{"text"},null,new Item[]{new Item(null,null,"0")}).minTermFreq(1).minDocFreq(1).maxQueryTerms(max_query_terms).minimumShouldMatch("0%");
    SearchResponse response=client().prepareSearch("test").setTypes("type1").setQuery(mltQuery).execute().actionGet();
    assertSearchResponse(response);
    assertHitCount(response,max_query_terms);
  }
}
