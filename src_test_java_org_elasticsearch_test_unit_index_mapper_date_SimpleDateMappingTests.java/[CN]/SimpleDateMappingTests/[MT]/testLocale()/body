{
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("date_field_default").field("type","date").field("format","E, d MMM yyyy HH:mm:ss Z").endObject().startObject("date_field_en").field("type","date").field("format","E, d MMM yyyy HH:mm:ss Z").field("locale","EN").endObject().startObject("date_field_de").field("type","date").field("format","E, d MMM yyyy HH:mm:ss Z").field("locale","DE_de").endObject().endObject().endObject().endObject().string();
  DocumentMapper defaultMapper=MapperTests.newParser().parse(mapping);
  ParsedDocument doc=defaultMapper.parse("type","1",XContentFactory.jsonBuilder().startObject().field("date_field_en","Wed, 06 Dec 2000 02:55:00 -0800").field("date_field_de","Mi, 06 Dez 2000 02:55:00 -0800").field("date_field_default","Wed, 06 Dec 2000 02:55:00 -0800").endObject().bytes());
  assertThat(doc.rootDoc().getField("date_field_en").tokenStream(defaultMapper.indexAnalyzer()),notNullValue());
  assertThat(doc.rootDoc().getField("date_field_de").tokenStream(defaultMapper.indexAnalyzer()),notNullValue());
  TokenStream tokenStream=doc.rootDoc().getField("date_field_en").tokenStream(defaultMapper.indexAnalyzer());
  tokenStream.reset();
  NumericTermAttribute nta=tokenStream.addAttribute(NumericTermAttribute.class);
  List<Long> values=new ArrayList<Long>();
  while (tokenStream.incrementToken()) {
    values.add(nta.getRawValue());
  }
  tokenStream=doc.rootDoc().getField("date_field_de").tokenStream(defaultMapper.indexAnalyzer());
  tokenStream.reset();
  nta=tokenStream.addAttribute(NumericTermAttribute.class);
  int pos=0;
  while (tokenStream.incrementToken()) {
    assertThat(values.get(pos++),equalTo(nta.getRawValue()));
  }
  assertThat(pos,equalTo(values.size()));
}
