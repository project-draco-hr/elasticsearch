{
  CreateIndexRequestBuilder builder=prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards",between(1,5)).put("index.number_of_replicas",0));
  XContentBuilder mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("name").field("type","string").startObject("fielddata").startObject("filter").startObject("regex").field("pattern","^bac.*").endObject().endObject().endObject().endObject().startObject("not_filtered").field("type","string").endObject().endObject().endObject().endObject();
  assertAcked(builder.addMapping("type",mapping));
  ensureGreen();
  int numDocs=atLeast(5);
  for (int i=0; i < numDocs; i++) {
    client().prepareIndex("test","type","" + 0).setSource("name","bacon bastards","not_filtered","bacon bastards").get();
  }
  refresh();
  SearchResponse searchResponse=client().prepareSearch().setSearchType(SearchType.COUNT).setQuery(matchAllQuery()).addFacet(termsFacet("name").field("name")).addFacet(termsFacet("not_filtered").field("not_filtered")).get();
  Facets facets=searchResponse.getFacets();
  TermsFacet nameFacet=facets.facet("name");
  assertThat(nameFacet.getEntries().size(),Matchers.equalTo(1));
  assertThat(nameFacet.getEntries().get(0).getTerm().string(),Matchers.equalTo("bacon"));
  TermsFacet notFilteredFacet=facets.facet("not_filtered");
  assertThat(notFilteredFacet.getEntries().size(),Matchers.equalTo(2));
  assertThat(notFilteredFacet.getEntries().get(0).getTerm().string(),Matchers.isOneOf("bacon","bastards"));
  assertThat(notFilteredFacet.getEntries().get(1).getTerm().string(),Matchers.isOneOf("bacon","bastards"));
}
