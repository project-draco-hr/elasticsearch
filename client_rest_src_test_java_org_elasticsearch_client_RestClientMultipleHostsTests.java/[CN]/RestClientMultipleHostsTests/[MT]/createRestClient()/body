{
  CloseableHttpAsyncClient httpClient=mock(CloseableHttpAsyncClient.class);
  when(httpClient.<HttpResponse>execute(any(HttpAsyncRequestProducer.class),any(HttpAsyncResponseConsumer.class),any(FutureCallback.class))).thenAnswer(new Answer<Future<HttpResponse>>(){
    @Override public Future<HttpResponse> answer(    InvocationOnMock invocationOnMock) throws Throwable {
      HttpAsyncRequestProducer requestProducer=(HttpAsyncRequestProducer)invocationOnMock.getArguments()[0];
      HttpUriRequest request=(HttpUriRequest)requestProducer.generateRequest();
      HttpHost httpHost=requestProducer.getTarget();
      @SuppressWarnings("unchecked") FutureCallback<HttpResponse> futureCallback=(FutureCallback<HttpResponse>)invocationOnMock.getArguments()[2];
      if (request.getURI().getPath().equals("/soe")) {
        futureCallback.failed(new SocketTimeoutException(httpHost.toString()));
      }
 else       if (request.getURI().getPath().equals("/coe")) {
        futureCallback.failed(new ConnectTimeoutException(httpHost.toString()));
      }
 else       if (request.getURI().getPath().equals("/ioe")) {
        futureCallback.failed(new IOException(httpHost.toString()));
      }
 else {
        int statusCode=Integer.parseInt(request.getURI().getPath().substring(1));
        StatusLine statusLine=new BasicStatusLine(new ProtocolVersion("http",1,1),statusCode,"");
        futureCallback.completed(new BasicHttpResponse(statusLine));
      }
      return null;
    }
  }
);
  int numHosts=RandomInts.randomIntBetween(getRandom(),2,5);
  httpHosts=new HttpHost[numHosts];
  for (int i=0; i < numHosts; i++) {
    httpHosts[i]=new HttpHost("localhost",9200 + i);
  }
  failureListener=new HostsTrackingFailureListener();
  restClient=new RestClient(httpClient,10000,new Header[0],httpHosts,failureListener);
}
