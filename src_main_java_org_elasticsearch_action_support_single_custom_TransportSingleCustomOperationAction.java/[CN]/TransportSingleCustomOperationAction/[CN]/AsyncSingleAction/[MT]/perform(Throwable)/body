{
  final ShardRouting shard=shardsIt == null ? null : shardsIt.nextOrNull();
  if (shard == null) {
    Throwable failure=lastException;
    if (failure == null) {
      failure=new NoShardAvailableActionException(null,"No shard available for [" + internalRequest.request() + "]");
    }
 else {
      if (logger.isDebugEnabled()) {
        logger.debug("failed to execute [" + internalRequest.request() + "]",failure);
      }
    }
    listener.onFailure(failure);
  }
 else {
    if (shard.currentNodeId().equals(nodes.localNodeId())) {
      if (!internalRequest.request().preferLocalShard()) {
        try {
          if (internalRequest.request().operationThreaded()) {
            internalRequest.request().beforeLocalFork();
            threadPool.executor(executor).execute(new Runnable(){
              @Override public void run(){
                try {
                  Response response=shardOperation(internalRequest.request(),shard.shardId());
                  listener.onResponse(response);
                }
 catch (                Throwable e) {
                  onFailure(shard,e);
                }
              }
            }
);
          }
 else {
            final Response response=shardOperation(internalRequest.request(),shard.shardId());
            listener.onResponse(response);
          }
        }
 catch (        Throwable e) {
          onFailure(shard,e);
        }
      }
 else {
        perform(lastException);
      }
    }
 else {
      DiscoveryNode node=nodes.get(shard.currentNodeId());
      transportService.sendRequest(node,transportShardAction,new ShardSingleOperationRequest(internalRequest.request(),shard.shardId()),new BaseTransportResponseHandler<Response>(){
        @Override public Response newInstance(){
          return newResponse();
        }
        @Override public String executor(){
          return ThreadPool.Names.SAME;
        }
        @Override public void handleResponse(        final Response response){
          listener.onResponse(response);
        }
        @Override public void handleException(        TransportException exp){
          onFailure(shard,exp);
        }
      }
);
    }
  }
}
