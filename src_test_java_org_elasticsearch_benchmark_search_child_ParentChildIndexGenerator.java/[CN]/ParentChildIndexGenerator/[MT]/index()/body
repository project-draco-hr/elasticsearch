{
  ObjectOpenHashSet<String> usedParentIds=ObjectOpenHashSet.newInstanceWithCapacity(numParents,0.5f);
  ObjectArrayList<ParentDocument> parents=ObjectArrayList.newInstanceWithCapacity(numParents);
  for (int i=0; i < numParents; i++) {
    String parentId;
    do {
      parentId=RandomStrings.randomAsciiOfLength(RANDOM,10);
    }
 while (!usedParentIds.add(parentId));
    String[] queryValues=new String[numChildrenPerParent];
    for (int j=0; j < numChildrenPerParent; j++) {
      queryValues[j]=getQueryValue();
    }
    parents.add(new ParentDocument(parentId,queryValues));
  }
  int indexCounter=0;
  int childIdCounter=0;
  while (!parents.isEmpty()) {
    BulkRequestBuilder request=client.prepareBulk();
    for (int i=0; !parents.isEmpty() && i < 100; i++) {
      int index=RANDOM.nextInt(parents.size());
      ParentDocument parentDocument=parents.get(index);
      if (parentDocument.indexCounter == -1) {
        request.add(Requests.indexRequest("test").type("parent").id(parentDocument.parentId).source("field1",getQueryValue()));
      }
 else {
        request.add(Requests.indexRequest("test").type("child").parent(parentDocument.parentId).id(String.valueOf(++childIdCounter)).source("field2",parentDocument.queryValues[parentDocument.indexCounter]));
      }
      if (++parentDocument.indexCounter == parentDocument.queryValues.length) {
        parents.remove(index);
      }
    }
    BulkResponse response=request.execute().actionGet();
    if (response.hasFailures()) {
      System.err.println("--> failures...");
    }
    indexCounter+=response.getItems().length;
    if (indexCounter % 100000 == 0) {
      System.out.println("--> Indexed " + indexCounter + " documents");
    }
  }
}
