{
  logger.info("Creating the index ...");
  assertAcked(prepareCreate("test").addMapping("type1","text","type=string,analyzer=whitespace","date","type=date"));
  ensureGreen("test");
  logger.info("Creating an index with a single document ...");
  indexRandom(true,client().prepareIndex("test","type1","1").setSource(jsonBuilder().startObject().field("text","Hello World!").field("date","2009-01-01").endObject()));
  logger.info("Checking with a malformed field value ...");
  XContentBuilder malformedFieldDoc=jsonBuilder().startObject().field("text","Hello World!").field("date","this is not a date!").endObject();
  MoreLikeThisQueryBuilder mltQuery=moreLikeThisQuery().like((Item)new Item().doc(malformedFieldDoc).index("test").type("type1")).minTermFreq(0).minDocFreq(0).minimumShouldMatch("0%");
  SearchResponse response=client().prepareSearch("test").setTypes("type1").setQuery(mltQuery).get();
  assertSearchResponse(response);
  assertHitCount(response,0);
  logger.info("Checking with an empty document ...");
  XContentBuilder emptyDoc=jsonBuilder().startObject().endObject();
  mltQuery=moreLikeThisQuery().like((Item)new Item().doc(emptyDoc).index("test").type("type1")).minTermFreq(0).minDocFreq(0).minimumShouldMatch("0%");
  response=client().prepareSearch("test").setTypes("type1").setQuery(mltQuery).get();
  assertSearchResponse(response);
  assertHitCount(response,0);
  logger.info("Checking when document is malformed ...");
  XContentBuilder malformedDoc=jsonBuilder().startObject();
  mltQuery=moreLikeThisQuery().like((Item)new Item().doc(malformedDoc).index("test").type("type1")).minTermFreq(0).minDocFreq(0).minimumShouldMatch("0%");
  response=client().prepareSearch("test").setTypes("type1").setQuery(mltQuery).get();
  assertSearchResponse(response);
  assertHitCount(response,0);
  logger.info("Checking the document matches otherwise ...");
  XContentBuilder normalDoc=jsonBuilder().startObject().field("text","Hello World!").field("date","1000-01-01").endObject();
  mltQuery=moreLikeThisQuery().like((Item)new Item().doc(normalDoc).index("test").type("type1")).minTermFreq(0).minDocFreq(0).minimumShouldMatch("100%");
  response=client().prepareSearch("test").setTypes("type1").setQuery(mltQuery).get();
  assertSearchResponse(response);
  assertHitCount(response,1);
}
