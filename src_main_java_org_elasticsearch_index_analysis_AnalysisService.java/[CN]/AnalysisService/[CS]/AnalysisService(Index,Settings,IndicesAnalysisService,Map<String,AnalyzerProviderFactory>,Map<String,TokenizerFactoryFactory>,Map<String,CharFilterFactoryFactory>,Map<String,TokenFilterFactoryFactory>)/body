{
  super(index,indexSettings);
  Settings defaultSettings=Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED,Version.indexCreated(indexSettings)).build();
  Map<String,TokenizerFactory> tokenizers=newHashMap();
  if (tokenizerFactoryFactories != null) {
    Map<String,Settings> tokenizersSettings=indexSettings.getGroups("index.analysis.tokenizer");
    for (    Map.Entry<String,TokenizerFactoryFactory> entry : tokenizerFactoryFactories.entrySet()) {
      String tokenizerName=entry.getKey();
      TokenizerFactoryFactory tokenizerFactoryFactory=entry.getValue();
      Settings tokenizerSettings=tokenizersSettings.get(tokenizerName);
      if (tokenizerSettings == null) {
        tokenizerSettings=defaultSettings;
      }
      TokenizerFactory tokenizerFactory=tokenizerFactoryFactory.create(tokenizerName,tokenizerSettings);
      tokenizers.put(tokenizerName,tokenizerFactory);
      tokenizers.put(Strings.toCamelCase(tokenizerName),tokenizerFactory);
    }
  }
  if (indicesAnalysisService != null) {
    for (    Map.Entry<String,PreBuiltTokenizerFactoryFactory> entry : indicesAnalysisService.tokenizerFactories().entrySet()) {
      String name=entry.getKey();
      if (!tokenizers.containsKey(name)) {
        tokenizers.put(name,entry.getValue().create(name,defaultSettings));
      }
      name=Strings.toCamelCase(entry.getKey());
      if (!name.equals(entry.getKey())) {
        if (!tokenizers.containsKey(name)) {
          tokenizers.put(name,entry.getValue().create(name,defaultSettings));
        }
      }
    }
  }
  this.tokenizers=ImmutableMap.copyOf(tokenizers);
  Map<String,CharFilterFactory> charFilters=newHashMap();
  if (charFilterFactoryFactories != null) {
    Map<String,Settings> charFiltersSettings=indexSettings.getGroups("index.analysis.char_filter");
    for (    Map.Entry<String,CharFilterFactoryFactory> entry : charFilterFactoryFactories.entrySet()) {
      String charFilterName=entry.getKey();
      CharFilterFactoryFactory charFilterFactoryFactory=entry.getValue();
      Settings charFilterSettings=charFiltersSettings.get(charFilterName);
      if (charFilterSettings == null) {
        charFilterSettings=defaultSettings;
      }
      CharFilterFactory tokenFilterFactory=charFilterFactoryFactory.create(charFilterName,charFilterSettings);
      charFilters.put(charFilterName,tokenFilterFactory);
      charFilters.put(Strings.toCamelCase(charFilterName),tokenFilterFactory);
    }
  }
  if (indicesAnalysisService != null) {
    for (    Map.Entry<String,PreBuiltCharFilterFactoryFactory> entry : indicesAnalysisService.charFilterFactories().entrySet()) {
      String name=entry.getKey();
      if (!charFilters.containsKey(name)) {
        charFilters.put(name,entry.getValue().create(name,defaultSettings));
      }
      name=Strings.toCamelCase(entry.getKey());
      if (!name.equals(entry.getKey())) {
        if (!charFilters.containsKey(name)) {
          charFilters.put(name,entry.getValue().create(name,defaultSettings));
        }
      }
    }
  }
  this.charFilters=ImmutableMap.copyOf(charFilters);
  Map<String,TokenFilterFactory> tokenFilters=newHashMap();
  if (tokenFilterFactoryFactories != null) {
    Map<String,Settings> tokenFiltersSettings=indexSettings.getGroups("index.analysis.filter");
    for (    Map.Entry<String,TokenFilterFactoryFactory> entry : tokenFilterFactoryFactories.entrySet()) {
      String tokenFilterName=entry.getKey();
      TokenFilterFactoryFactory tokenFilterFactoryFactory=entry.getValue();
      Settings tokenFilterSettings=tokenFiltersSettings.get(tokenFilterName);
      if (tokenFilterSettings == null) {
        tokenFilterSettings=defaultSettings;
      }
      TokenFilterFactory tokenFilterFactory=tokenFilterFactoryFactory.create(tokenFilterName,tokenFilterSettings);
      tokenFilters.put(tokenFilterName,tokenFilterFactory);
      tokenFilters.put(Strings.toCamelCase(tokenFilterName),tokenFilterFactory);
    }
  }
  if (indicesAnalysisService != null) {
    for (    Map.Entry<String,PreBuiltTokenFilterFactoryFactory> entry : indicesAnalysisService.tokenFilterFactories().entrySet()) {
      String name=entry.getKey();
      if (!tokenFilters.containsKey(name)) {
        tokenFilters.put(name,entry.getValue().create(name,defaultSettings));
      }
      name=Strings.toCamelCase(entry.getKey());
      if (!name.equals(entry.getKey())) {
        if (!tokenFilters.containsKey(name)) {
          tokenFilters.put(name,entry.getValue().create(name,defaultSettings));
        }
      }
    }
  }
  this.tokenFilters=ImmutableMap.copyOf(tokenFilters);
  Map<String,AnalyzerProvider> analyzerProviders=newHashMap();
  if (analyzerFactoryFactories != null) {
    Map<String,Settings> analyzersSettings=indexSettings.getGroups("index.analysis.analyzer");
    for (    Map.Entry<String,AnalyzerProviderFactory> entry : analyzerFactoryFactories.entrySet()) {
      String analyzerName=entry.getKey();
      AnalyzerProviderFactory analyzerFactoryFactory=entry.getValue();
      Settings analyzerSettings=analyzersSettings.get(analyzerName);
      if (analyzerSettings == null) {
        analyzerSettings=defaultSettings;
      }
      AnalyzerProvider analyzerFactory=analyzerFactoryFactory.create(analyzerName,analyzerSettings);
      analyzerProviders.put(analyzerName,analyzerFactory);
    }
  }
  if (indicesAnalysisService != null) {
    for (    Map.Entry<String,PreBuiltAnalyzerProviderFactory> entry : indicesAnalysisService.analyzerProviderFactories().entrySet()) {
      String name=entry.getKey();
      Version indexVersion=Version.indexCreated(indexSettings);
      if (!analyzerProviders.containsKey(name)) {
        analyzerProviders.put(name,entry.getValue().create(name,Settings.settingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED,indexVersion).build()));
      }
      String camelCaseName=Strings.toCamelCase(name);
      if (!camelCaseName.equals(entry.getKey()) && !analyzerProviders.containsKey(camelCaseName)) {
        analyzerProviders.put(camelCaseName,entry.getValue().create(name,Settings.settingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED,indexVersion).build()));
      }
    }
  }
  if (!analyzerProviders.containsKey("default")) {
    analyzerProviders.put("default",new StandardAnalyzerProvider(index,indexSettings,null,"default",Settings.Builder.EMPTY_SETTINGS));
  }
  if (!analyzerProviders.containsKey("default_index")) {
    analyzerProviders.put("default_index",analyzerProviders.get("default"));
  }
  if (!analyzerProviders.containsKey("default_search")) {
    analyzerProviders.put("default_search",analyzerProviders.get("default"));
  }
  if (!analyzerProviders.containsKey("default_search_quoted")) {
    analyzerProviders.put("default_search_quoted",analyzerProviders.get("default_search"));
  }
  Map<String,NamedAnalyzer> analyzers=newHashMap();
  for (  AnalyzerProvider analyzerFactory : analyzerProviders.values()) {
    if (analyzerFactory instanceof CustomAnalyzerProvider) {
      ((CustomAnalyzerProvider)analyzerFactory).build(this);
    }
    Analyzer analyzerF=analyzerFactory.get();
    if (analyzerF == null) {
      throw new IllegalArgumentException("analyzer [" + analyzerFactory.name() + "] created null analyzer");
    }
    NamedAnalyzer analyzer;
    if (analyzerF instanceof NamedAnalyzer) {
      analyzer=(NamedAnalyzer)analyzerF;
    }
 else {
      analyzer=new NamedAnalyzer(analyzerFactory.name(),analyzerFactory.scope(),analyzerF);
    }
    analyzers.put(analyzerFactory.name(),analyzer);
    analyzers.put(Strings.toCamelCase(analyzerFactory.name()),analyzer);
    String strAliases=indexSettings.get("index.analysis.analyzer." + analyzerFactory.name() + ".alias");
    if (strAliases != null) {
      for (      String alias : Strings.commaDelimitedListToStringArray(strAliases)) {
        analyzers.put(alias,analyzer);
      }
    }
    String[] aliases=indexSettings.getAsArray("index.analysis.analyzer." + analyzerFactory.name() + ".alias");
    for (    String alias : aliases) {
      analyzers.put(alias,analyzer);
    }
  }
  defaultAnalyzer=analyzers.get("default");
  if (defaultAnalyzer == null) {
    throw new IllegalArgumentException("no default analyzer configured");
  }
  defaultIndexAnalyzer=analyzers.containsKey("default_index") ? analyzers.get("default_index") : analyzers.get("default");
  defaultSearchAnalyzer=analyzers.containsKey("default_search") ? analyzers.get("default_search") : analyzers.get("default");
  defaultSearchQuoteAnalyzer=analyzers.containsKey("default_search_quote") ? analyzers.get("default_search_quote") : defaultSearchAnalyzer;
  this.analyzers=ImmutableMap.copyOf(analyzers);
}
