{
  assertAcked(client().admin().indices().prepareCreate("test").setSettings(Settings.builder().put("index.number_of_shards",1)));
  index("test","doc","1","{\"field\":\"a\"}");
  index("test","doc","11","{\"field\":\"a\"}");
  index("test","doc","2","{\"field\":\"b\"}");
  index("test","doc","22","{\"field\":\"b\"}");
  index("test","doc","3","{\"field\":\"a b\"}");
  index("test","doc","33","{\"field\":\"a b\"}");
  ScriptHeuristic.ScriptHeuristicBuilder scriptHeuristicBuilder=new ScriptHeuristic.ScriptHeuristicBuilder();
  scriptHeuristicBuilder.setScript("_subset_freq/(_superset_freq - _subset_freq + 1)");
  ensureYellow();
  refresh();
  SearchResponse response=client().prepareSearch("test").addAggregation(new TermsBuilder("letters").field("field").subAggregation(new SignificantTermsBuilder("mySignificantTerms").field("field").executionHint(randomExecutionHint()).significanceHeuristic(scriptHeuristicBuilder).minDocCount(1).shardSize(2).size(2))).execute().actionGet();
  assertSearchResponse(response);
  assertThat(((Terms)response.getAggregations().get("letters")).getBuckets().size(),equalTo(2));
  for (  Terms.Bucket classBucket : ((Terms)response.getAggregations().get("letters")).getBuckets()) {
    assertThat(((SignificantStringTerms)classBucket.getAggregations().get("mySignificantTerms")).getBuckets().size(),equalTo(2));
    for (    SignificantTerms.Bucket bucket : ((SignificantTerms)classBucket.getAggregations().get("mySignificantTerms")).getBuckets()) {
      assertThat(bucket.getSignificanceScore(),closeTo((double)bucket.getSubsetDf() / (bucket.getSupersetDf() - bucket.getSubsetDf() + 1),1.e-6));
    }
  }
}
