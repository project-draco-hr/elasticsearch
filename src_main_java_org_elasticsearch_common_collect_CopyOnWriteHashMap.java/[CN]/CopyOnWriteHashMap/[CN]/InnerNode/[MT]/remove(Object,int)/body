{
  final int hash6=hash & HASH_MASK;
  if (!exists(hash6)) {
    return this;
  }
  final int slot=slot(hash6);
  final Object previousValue=subNodes[slot];
  if (previousValue instanceof Node) {
    @SuppressWarnings("unchecked") final Node<K,V> subNode=(Node<K,V>)previousValue;
    final Node<K,V> removed=subNode.remove(key,hash >>> HASH_BITS);
    if (removed == subNode) {
      return this;
    }
    if (removed.isEmpty()) {
      return removeSlot(hash6,slot);
    }
    final K[] keys2=Arrays.copyOf(keys,keys.length);
    final Object[] subNodes2=Arrays.copyOf(subNodes,subNodes.length);
    subNodes2[slot]=removed;
    return new InnerNode<>(mask,keys2,subNodes2);
  }
 else   if (keys[slot].equals(key)) {
    return removeSlot(hash6,slot);
  }
 else {
    return this;
  }
}
