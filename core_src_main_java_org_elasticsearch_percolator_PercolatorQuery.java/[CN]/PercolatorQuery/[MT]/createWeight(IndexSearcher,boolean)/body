{
  final Weight innerWeight=percolatorQueriesQuery.createWeight(searcher,needsScores);
  return new Weight(this){
    @Override public void extractTerms(    Set<Term> set){
    }
    @Override public Explanation explain(    LeafReaderContext leafReaderContext,    int docId) throws IOException {
      Scorer scorer=scorer(leafReaderContext);
      if (scorer != null) {
        int result=scorer.iterator().advance(docId);
        if (result == docId) {
          return Explanation.match(scorer.score(),"PercolatorQuery");
        }
      }
      return Explanation.noMatch("PercolatorQuery");
    }
    @Override public float getValueForNormalization() throws IOException {
      return innerWeight.getValueForNormalization();
    }
    @Override public void normalize(    float v,    float v1){
      innerWeight.normalize(v,v1);
    }
    @Override public Scorer scorer(    LeafReaderContext leafReaderContext) throws IOException {
      final Scorer approximation=innerWeight.scorer(leafReaderContext);
      if (approximation == null) {
        return null;
      }
      final LeafReader leafReader=leafReaderContext.reader();
      return new Scorer(this){
        @Override public DocIdSetIterator iterator(){
          return TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator());
        }
        @Override public TwoPhaseIterator twoPhaseIterator(){
          return new TwoPhaseIterator(approximation.iterator()){
            @Override public boolean matches() throws IOException {
              return matchDocId(approximation.docID(),leafReader);
            }
            @Override public float matchCost(){
              return MATCH_COST;
            }
          }
;
        }
        @Override public float score() throws IOException {
          return approximation.score();
        }
        @Override public int freq() throws IOException {
          return approximation.freq();
        }
        @Override public int docID(){
          return approximation.docID();
        }
        boolean matchDocId(        int docId,        LeafReader leafReader) throws IOException {
          SingleFieldsVisitor singleFieldsVisitor=new SingleFieldsVisitor(UidFieldMapper.NAME);
          leafReader.document(docId,singleFieldsVisitor);
          BytesRef percolatorQueryId=new BytesRef(singleFieldsVisitor.uid().id());
          return matchQuery(percolatorQueryId);
        }
      }
;
    }
  }
;
}
