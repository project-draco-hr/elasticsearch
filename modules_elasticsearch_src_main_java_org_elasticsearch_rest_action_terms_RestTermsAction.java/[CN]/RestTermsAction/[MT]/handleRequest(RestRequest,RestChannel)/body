{
  TermsRequest termsRequest=new TermsRequest(splitIndices(request.param("index")));
  termsRequest.listenerThreaded(false);
  try {
    BroadcastOperationThreading operationThreading=BroadcastOperationThreading.fromString(request.param("operationThreading"),BroadcastOperationThreading.SINGLE_THREAD);
    if (operationThreading == BroadcastOperationThreading.NO_THREADS) {
      operationThreading=BroadcastOperationThreading.SINGLE_THREAD;
    }
    termsRequest.operationThreading(operationThreading);
    List<String> fields=request.params("field");
    if (fields == null) {
      fields=new ArrayList<String>();
    }
    String sField=request.param("fields");
    if (sField != null) {
      String[] sFields=fieldsPattern.split(sField);
      if (sFields != null) {
        for (        String field : sFields) {
          fields.add(field);
        }
      }
    }
    termsRequest.fields(fields.toArray(new String[fields.size()]));
    termsRequest.from(request.param("from"));
    termsRequest.to(request.param("to"));
    termsRequest.fromInclusive(request.paramAsBoolean("fromInclusive",termsRequest.fromInclusive()));
    termsRequest.toInclusive(request.paramAsBoolean("toInclusive",termsRequest.toInclusive()));
    termsRequest.exact(request.paramAsBoolean("exact",termsRequest.exact()));
    termsRequest.minFreq(request.paramAsInt("minFreq",termsRequest.minFreq()));
    termsRequest.maxFreq(request.paramAsInt("maxFreq",termsRequest.maxFreq()));
    termsRequest.size(request.paramAsInt("size",termsRequest.size()));
    termsRequest.convert(request.paramAsBoolean("convert",termsRequest.convert()));
    termsRequest.prefix(request.param("prefix"));
    termsRequest.regexp(request.param("regexp"));
    termsRequest.sortType(TermsRequest.SortType.fromString(request.param("sort"),termsRequest.sortType()));
  }
 catch (  Exception e) {
    try {
      channel.sendResponse(new JsonRestResponse(request,BAD_REQUEST,JsonBuilder.jsonBuilder().startObject().field("error",e.getMessage()).endObject()));
    }
 catch (    IOException e1) {
      logger.error("Failed to send failure response",e1);
    }
    return;
  }
  client.execTerms(termsRequest,new ActionListener<TermsResponse>(){
    @Override public void onResponse(    TermsResponse response){
      try {
        JsonBuilder builder=RestJsonBuilder.cached(request);
        builder.startObject();
        builder.startObject("_shards");
        builder.field("total",response.totalShards());
        builder.field("successful",response.successfulShards());
        builder.field("failed",response.failedShards());
        builder.endObject();
        builder.startObject("docs");
        builder.field("numDocs",response.numDocs());
        builder.field("maxDoc",response.maxDoc());
        builder.field("deletedDocs",response.deletedDocs());
        builder.endObject();
        builder.startObject("fields");
        for (        FieldTermsFreq fieldTermsFreq : response.fields()) {
          builder.startObject(fieldTermsFreq.fieldName());
          builder.startObject("terms");
          for (          TermFreq termFreq : fieldTermsFreq.termsFreqs()) {
            builder.startObject(termFreq.term());
            builder.field("docFreq",termFreq.docFreq());
            builder.endObject();
          }
          builder.endObject();
          builder.endObject();
        }
        builder.endObject();
        builder.endObject();
        channel.sendResponse(new JsonRestResponse(request,OK,builder));
      }
 catch (      Exception e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new JsonThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
