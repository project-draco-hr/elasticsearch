{
  TermsRequest termsRequest=new TermsRequest(splitIndices(request.param("index")));
  termsRequest.listenerThreaded(false);
  try {
    BroadcastOperationThreading operationThreading=BroadcastOperationThreading.fromString(request.param("operation_threading"),BroadcastOperationThreading.SINGLE_THREAD);
    if (operationThreading == BroadcastOperationThreading.NO_THREADS) {
      operationThreading=BroadcastOperationThreading.SINGLE_THREAD;
    }
    termsRequest.operationThreading(operationThreading);
    String sField=request.param("fields");
    if (sField != null) {
      String[] sFields=fieldsPattern.split(sField);
      termsRequest.fields(sFields);
    }
    termsRequest.from(request.param("from"));
    termsRequest.to(request.param("to"));
    termsRequest.fromInclusive(request.paramAsBoolean("from_inclusive",termsRequest.fromInclusive()));
    termsRequest.toInclusive(request.paramAsBoolean("to_inclusive",termsRequest.toInclusive()));
    Object temp=request.param("gt");
    if (temp != null) {
      termsRequest.gt(temp);
    }
 else {
      temp=request.param("gte");
      if (temp != null) {
        termsRequest.gte(temp);
      }
    }
    temp=request.param("lt");
    if (temp != null) {
      termsRequest.lt(temp);
    }
 else {
      temp=request.param("lte");
      if (temp != null) {
        termsRequest.lte(temp);
      }
    }
    termsRequest.exact(request.paramAsBoolean("exact",termsRequest.exact()));
    termsRequest.minFreq(request.paramAsInt("min_freq",termsRequest.minFreq()));
    termsRequest.maxFreq(request.paramAsInt("max_freq",termsRequest.maxFreq()));
    termsRequest.size(request.paramAsInt("size",termsRequest.size()));
    termsRequest.prefix(request.param("prefix"));
    termsRequest.regexp(request.param("regexp"));
    termsRequest.sortType(request.param("sort"));
  }
 catch (  Exception e) {
    try {
      JsonBuilder builder=RestJsonBuilder.restJsonBuilder(request);
      channel.sendResponse(new JsonRestResponse(request,BAD_REQUEST,builder.startObject().field("error",e.getMessage()).endObject()));
    }
 catch (    IOException e1) {
      logger.error("Failed to send failure response",e1);
    }
    return;
  }
  final boolean termsAsArray=request.paramAsBoolean("terms_as_array",true);
  client.terms(termsRequest,new ActionListener<TermsResponse>(){
    @Override public void onResponse(    TermsResponse response){
      try {
        JsonBuilder builder=RestJsonBuilder.restJsonBuilder(request);
        builder.startObject();
        buildBroadcastShardsHeader(builder,response);
        builder.startObject("docs");
        builder.field("num_docs",response.numDocs());
        builder.field("max_doc",response.maxDoc());
        builder.field("deleted_docs",response.deletedDocs());
        builder.endObject();
        builder.startObject("fields");
        for (        FieldTermsFreq fieldTermsFreq : response.fields()) {
          builder.startObject(fieldTermsFreq.fieldName());
          if (!termsAsArray) {
            builder.startObject("terms");
            for (            TermFreq termFreq : fieldTermsFreq.termsFreqs()) {
              builder.startObject(termFreq.termAsString());
              builder.field("doc_freq",termFreq.docFreq());
              builder.endObject();
            }
            builder.endObject();
          }
 else {
            builder.startArray("terms");
            for (            TermFreq termFreq : fieldTermsFreq.termsFreqs()) {
              builder.startObject();
              builder.field("term",termFreq.term());
              builder.field("doc_freq",termFreq.docFreq());
              builder.endObject();
            }
            builder.endArray();
          }
          builder.endObject();
        }
        builder.endObject();
        builder.endObject();
        channel.sendResponse(new JsonRestResponse(request,OK,builder));
      }
 catch (      Exception e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new JsonThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
