{
  createIndexMapped("test","type1","test","string","loc","geo_point");
  ensureYellow();
  List<IndexRequestBuilder> indexBuilders=new ArrayList<IndexRequestBuilder>();
  indexBuilders.add(new IndexRequestBuilder(client()).setType("type1").setId("1").setIndex("test").setSource(jsonBuilder().startObject().field("test","value").startObject("loc").field("lat",10).field("lon",20).endObject().endObject()));
  indexBuilders.add(new IndexRequestBuilder(client()).setType("type1").setId("2").setIndex("test").setSource(jsonBuilder().startObject().field("test","value").startObject("loc").field("lat",11).field("lon",22).endObject().endObject()));
  int numDummyDocs=20;
  for (int i=1; i <= numDummyDocs; i++) {
    indexBuilders.add(new IndexRequestBuilder(client()).setType("type1").setId(Integer.toString(i + 3)).setIndex("test").setSource(jsonBuilder().startObject().field("test","value").startObject("loc").field("lat",11 + i).field("lon",22 + i).endObject().endObject()));
  }
  IndexRequestBuilder[] builders=indexBuilders.toArray(new IndexRequestBuilder[indexBuilders.size()]);
  indexRandom("test",false,builders);
  refresh();
  List<Float> lonlat=new ArrayList<Float>();
  lonlat.add(new Float(20));
  lonlat.add(new Float(11));
  ActionFuture<SearchResponse> response=client().search(searchRequest().searchType(SearchType.QUERY_THEN_FETCH).source(searchSource().explain(false).query(termQuery("test","value"))));
  SearchResponse sr=response.actionGet();
  SearchHits sh=sr.getHits();
  assertThat(sh.getTotalHits(),equalTo((long)(numDummyDocs + 2)));
  response=client().search(searchRequest().searchType(SearchType.QUERY_THEN_FETCH).source(searchSource().explain(true).query(functionScoreQuery(termQuery("test","value"),gaussDecayFunction("loc",lonlat,"1000km")))));
  sr=response.actionGet();
  sh=sr.getHits();
  assertThat(sh.getTotalHits(),equalTo((long)(numDummyDocs + 2)));
  assertThat(sh.getAt(0).getId(),equalTo("1"));
  assertThat(sh.getAt(1).getId(),equalTo("2"));
  response=client().search(searchRequest().searchType(SearchType.QUERY_THEN_FETCH).source(searchSource().explain(false).query(termQuery("test","value"))));
  sr=response.actionGet();
  sh=sr.getHits();
  assertThat(sh.getTotalHits(),equalTo((long)(numDummyDocs + 2)));
  response=client().search(searchRequest().searchType(SearchType.QUERY_THEN_FETCH).source(searchSource().explain(true).query(functionScoreQuery(termQuery("test","value"),linearDecayFunction("loc",lonlat,"1000km")))));
  sr=response.actionGet();
  sh=sr.getHits();
  assertThat(sh.getTotalHits(),equalTo((long)(numDummyDocs + 2)));
  assertThat(sh.getAt(0).getId(),equalTo("1"));
  assertThat(sh.getAt(1).getId(),equalTo("2"));
  response=client().search(searchRequest().searchType(SearchType.QUERY_THEN_FETCH).source(searchSource().explain(false).query(termQuery("test","value"))));
  sr=response.actionGet();
  sh=sr.getHits();
  assertThat(sh.getTotalHits(),equalTo((long)(numDummyDocs + 2)));
  response=client().search(searchRequest().searchType(SearchType.QUERY_THEN_FETCH).source(searchSource().explain(true).query(functionScoreQuery(termQuery("test","value"),exponentialDecayFunction("loc",lonlat,"1000km")))));
  sr=response.actionGet();
  sh=sr.getHits();
  assertThat(sh.getTotalHits(),equalTo((long)(numDummyDocs + 2)));
  assertThat(sh.getAt(0).getId(),equalTo("1"));
  assertThat(sh.getAt(1).getId(),equalTo("2"));
}
