{
  ContentPath.Type origPathType=context.path().pathType();
  context.path().pathType(pathType);
  DoubleFieldMapper latMapper=null;
  DoubleFieldMapper lonMapper=null;
  context.path().add(name);
  if (enableLatLon) {
    NumberFieldMapper.Builder<?,?> latMapperBuilder=doubleField(Names.LAT).includeInAll(false);
    NumberFieldMapper.Builder<?,?> lonMapperBuilder=doubleField(Names.LON).includeInAll(false);
    if (precisionStep != null) {
      latMapperBuilder.precisionStep(precisionStep);
      lonMapperBuilder.precisionStep(precisionStep);
    }
    latMapper=(DoubleFieldMapper)latMapperBuilder.includeInAll(false).store(fieldType.stored()).build(context);
    lonMapper=(DoubleFieldMapper)lonMapperBuilder.includeInAll(false).store(fieldType.stored()).build(context);
  }
  StringFieldMapper geohashMapper=null;
  if (enableGeoHash) {
    geohashMapper=stringField(Names.GEOHASH).index(true).tokenized(false).includeInAll(false).omitNorms(true).indexOptions(IndexOptions.DOCS).build(context);
  }
  context.path().remove();
  context.path().pathType(origPathType);
  fieldType.setTokenized(false);
  return new GeoPointFieldMapper(buildNames(context),fieldType,docValues,indexAnalyzer,searchAnalyzer,similarity,fieldDataSettings,context.indexSettings(),origPathType,enableLatLon,enableGeoHash,enableGeohashPrefix,precisionStep,geoHashPrecision,latMapper,lonMapper,geohashMapper,validateLon,validateLat,normalizeLon,normalizeLat,multiFieldsBuilder.build(this,context));
}
