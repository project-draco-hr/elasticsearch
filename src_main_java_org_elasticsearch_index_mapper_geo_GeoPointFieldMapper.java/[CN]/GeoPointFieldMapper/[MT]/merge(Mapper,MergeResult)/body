{
  super.merge(mergeWith,mergeResult);
  if (!this.getClass().equals(mergeWith.getClass())) {
    return;
  }
  GeoPointFieldMapper fieldMergeWith=(GeoPointFieldMapper)mergeWith;
  if (this.enableLatLon != fieldMergeWith.enableLatLon) {
    mergeResult.addConflict("mapper [" + names.fullName() + "] has different lat_lon");
  }
  if (this.enableGeoHash != fieldMergeWith.enableGeoHash) {
    mergeResult.addConflict("mapper [" + names.fullName() + "] has different geohash");
  }
  if (this.geoHashPrecision != fieldMergeWith.geoHashPrecision) {
    mergeResult.addConflict("mapper [" + names.fullName() + "] has different geohash_precision");
  }
  if (this.enableGeohashPrefix != fieldMergeWith.enableGeohashPrefix) {
    mergeResult.addConflict("mapper [" + names.fullName() + "] has different geohash_prefix");
  }
  if (this.normalizeLat != fieldMergeWith.normalizeLat) {
    mergeResult.addConflict("mapper [" + names.fullName() + "] has different normalize_lat");
  }
  if (this.normalizeLon != fieldMergeWith.normalizeLon) {
    mergeResult.addConflict("mapper [" + names.fullName() + "] has different normalize_lon");
  }
  if (!Objects.equal(this.precisionStep,fieldMergeWith.precisionStep)) {
    mergeResult.addConflict("mapper [" + names.fullName() + "] has different precision_step");
  }
  if (this.validateLat != fieldMergeWith.validateLat) {
    mergeResult.addConflict("mapper [" + names.fullName() + "] has different validate_lat");
  }
  if (this.validateLon != fieldMergeWith.validateLon) {
    mergeResult.addConflict("mapper [" + names.fullName() + "] has different validate_lon");
  }
}
