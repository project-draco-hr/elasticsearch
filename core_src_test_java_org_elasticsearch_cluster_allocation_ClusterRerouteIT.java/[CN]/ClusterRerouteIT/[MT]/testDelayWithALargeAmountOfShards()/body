{
  Settings commonSettings=settingsBuilder().put(ThrottlingAllocationDecider.CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_INCOMING_RECOVERIES_SETTING,1).put(ThrottlingAllocationDecider.CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_OUTGOING_RECOVERIES_SETTING,1).build();
  logger.info("--> starting 4 nodes");
  String node_1=internalCluster().startNode(commonSettings);
  internalCluster().startNode(commonSettings);
  internalCluster().startNode(commonSettings);
  internalCluster().startNode(commonSettings);
  assertThat(cluster().size(),equalTo(4));
  ClusterHealthResponse healthResponse=client().admin().cluster().prepareHealth().setWaitForNodes("4").execute().actionGet();
  assertThat(healthResponse.isTimedOut(),equalTo(false));
  logger.info("--> create indices");
  for (int i=0; i < 25; i++) {
    client().admin().indices().prepareCreate("test" + i).setSettings(settingsBuilder().put("index.number_of_shards",5).put("index.number_of_replicas",1).put("index.unassigned.node_left.delayed_timeout",randomIntBetween(250,1000) + "ms")).execute().actionGet();
  }
  ensureGreen(TimeValue.timeValueMinutes(1));
  logger.info("--> stopping node1");
  internalCluster().stopRandomNode(InternalTestCluster.nameFilter(node_1));
  ensureGreen(TimeValue.timeValueMinutes(2));
}
