{
  List<String> nodesIds=internalCluster().startNodesAsync(2,commonSettings).get();
  final String node_1=nodesIds.get(0);
  final String node_2=nodesIds.get(1);
  logger.info("--> create an index with 1 shard, 1 replica, nothing should allocate");
  client().admin().indices().prepareCreate("test").setWaitForActiveShards(ActiveShardCount.NONE).setSettings(Settings.builder().put("index.number_of_shards",1)).execute().actionGet();
  ClusterState state=client().admin().cluster().prepareState().execute().actionGet().getState();
  assertThat(state.getRoutingNodes().unassigned().size(),equalTo(2));
  logger.info("--> explicitly allocate shard 1, *under dry_run*");
  state=client().admin().cluster().prepareReroute().setExplain(randomBoolean()).add(new AllocateEmptyPrimaryAllocationCommand("test",0,node_1,true)).setDryRun(true).execute().actionGet().getState();
  assertThat(state.getRoutingNodes().unassigned().size(),equalTo(1));
  assertThat(state.getRoutingNodes().node(state.nodes().resolveNode(node_1).getId()).iterator().next().state(),equalTo(ShardRoutingState.INITIALIZING));
  logger.info("--> get the state, verify nothing changed because of the dry run");
  state=client().admin().cluster().prepareState().execute().actionGet().getState();
  assertThat(state.getRoutingNodes().unassigned().size(),equalTo(2));
  logger.info("--> explicitly allocate shard 1, actually allocating, no dry run");
  state=client().admin().cluster().prepareReroute().setExplain(randomBoolean()).add(new AllocateEmptyPrimaryAllocationCommand("test",0,node_1,true)).execute().actionGet().getState();
  assertThat(state.getRoutingNodes().unassigned().size(),equalTo(1));
  assertThat(state.getRoutingNodes().node(state.nodes().resolveNode(node_1).getId()).iterator().next().state(),equalTo(ShardRoutingState.INITIALIZING));
  ClusterHealthResponse healthResponse=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForYellowStatus().execute().actionGet();
  assertThat(healthResponse.isTimedOut(),equalTo(false));
  logger.info("--> get the state, verify shard 1 primary allocated");
  state=client().admin().cluster().prepareState().execute().actionGet().getState();
  assertThat(state.getRoutingNodes().unassigned().size(),equalTo(1));
  assertThat(state.getRoutingNodes().node(state.nodes().resolveNode(node_1).getId()).iterator().next().state(),equalTo(ShardRoutingState.STARTED));
  logger.info("--> move shard 1 primary from node1 to node2");
  state=client().admin().cluster().prepareReroute().setExplain(randomBoolean()).add(new MoveAllocationCommand("test",0,node_1,node_2)).execute().actionGet().getState();
  assertThat(state.getRoutingNodes().node(state.nodes().resolveNode(node_1).getId()).iterator().next().state(),equalTo(ShardRoutingState.RELOCATING));
  assertThat(state.getRoutingNodes().node(state.nodes().resolveNode(node_2).getId()).iterator().next().state(),equalTo(ShardRoutingState.INITIALIZING));
  healthResponse=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForYellowStatus().setWaitForRelocatingShards(0).execute().actionGet();
  assertThat(healthResponse.isTimedOut(),equalTo(false));
  logger.info("--> get the state, verify shard 1 primary moved from node1 to node2");
  state=client().admin().cluster().prepareState().execute().actionGet().getState();
  assertThat(state.getRoutingNodes().unassigned().size(),equalTo(1));
  assertThat(state.getRoutingNodes().node(state.nodes().resolveNode(node_2).getId()).iterator().next().state(),equalTo(ShardRoutingState.STARTED));
}
