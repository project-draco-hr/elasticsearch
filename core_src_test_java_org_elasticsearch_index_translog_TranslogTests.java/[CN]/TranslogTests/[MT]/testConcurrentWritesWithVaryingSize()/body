{
  final int opsPerThread=randomIntBetween(10,200);
  int threadCount=2 + randomInt(5);
  logger.info("testing with [{}] threads, each doing [{}] ops",threadCount,opsPerThread);
  final BlockingQueue<LocationOperation> writtenOperations=new ArrayBlockingQueue<>(threadCount * opsPerThread);
  Thread[] threads=new Thread[threadCount];
  final Exception[] threadExceptions=new Exception[threadCount];
  final CountDownLatch downLatch=new CountDownLatch(1);
  for (int i=0; i < threadCount; i++) {
    final int threadId=i;
    threads[i]=new TranslogThread(translog,downLatch,opsPerThread,threadId,writtenOperations,threadExceptions);
    threads[i].setDaemon(true);
    threads[i].start();
  }
  downLatch.countDown();
  for (int i=0; i < threadCount; i++) {
    if (threadExceptions[i] != null) {
      throw threadExceptions[i];
    }
    threads[i].join(60 * 1000);
  }
  List<LocationOperation> collect=writtenOperations.stream().collect(Collectors.toList());
  Collections.sort(collect);
  Translog.Snapshot snapshot=translog.newSnapshot();
  for (  LocationOperation locationOperation : collect) {
    Translog.Operation op=snapshot.next();
    assertNotNull(op);
    Translog.Operation expectedOp=locationOperation.operation;
    assertEquals(expectedOp.opType(),op.opType());
switch (op.opType()) {
case INDEX:
      Translog.Index indexOp=(Translog.Index)op;
    Translog.Index expIndexOp=(Translog.Index)expectedOp;
  assertEquals(expIndexOp.id(),indexOp.id());
assertEquals(expIndexOp.routing(),indexOp.routing());
assertEquals(expIndexOp.type(),indexOp.type());
assertEquals(expIndexOp.source(),indexOp.source());
assertEquals(expIndexOp.version(),indexOp.version());
assertEquals(expIndexOp.versionType(),indexOp.versionType());
break;
case DELETE:
Translog.Delete delOp=(Translog.Delete)op;
Translog.Delete expDelOp=(Translog.Delete)expectedOp;
assertEquals(expDelOp.uid(),delOp.uid());
assertEquals(expDelOp.version(),delOp.version());
assertEquals(expDelOp.versionType(),delOp.versionType());
break;
default :
throw new ElasticsearchException("unsupported opType");
}
}
assertNull(snapshot.next());
}
