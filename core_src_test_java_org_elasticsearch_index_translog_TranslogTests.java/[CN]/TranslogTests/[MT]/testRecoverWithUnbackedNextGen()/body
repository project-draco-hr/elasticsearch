{
  translog.add(new Translog.Index("test","" + 0,Integer.toString(0).getBytes(Charset.forName("UTF-8"))));
  Translog.TranslogGeneration translogGeneration=translog.getGeneration();
  translog.close();
  TranslogConfig config=translog.getConfig();
  Path ckp=config.getTranslogPath().resolve(Translog.CHECKPOINT_FILE_NAME);
  Checkpoint read=Checkpoint.read(ckp);
  Files.copy(ckp,config.getTranslogPath().resolve(Translog.getCommitCheckpointFileName(read.generation)));
  Files.createFile(config.getTranslogPath().resolve("translog-" + (read.generation + 1) + ".tlog"));
  try (Translog tlog=new Translog(config,translogGeneration)){
    assertNotNull(translogGeneration);
    assertFalse(tlog.syncNeeded());
    Translog.Snapshot snapshot=tlog.newSnapshot();
    for (int i=0; i < 1; i++) {
      Translog.Operation next=snapshot.next();
      assertNotNull("operation " + i + " must be non-null",next);
      assertEquals("payload missmatch",i,Integer.parseInt(next.getSource().source.utf8ToString()));
    }
    tlog.add(new Translog.Index("test","" + 1,Integer.toString(1).getBytes(Charset.forName("UTF-8"))));
  }
   try (Translog tlog=new Translog(config,translogGeneration)){
    assertNotNull(translogGeneration);
    assertFalse(tlog.syncNeeded());
    Translog.Snapshot snapshot=tlog.newSnapshot();
    for (int i=0; i < 2; i++) {
      Translog.Operation next=snapshot.next();
      assertNotNull("operation " + i + " must be non-null",next);
      assertEquals("payload missmatch",i,Integer.parseInt(next.getSource().source.utf8ToString()));
    }
  }
 }
