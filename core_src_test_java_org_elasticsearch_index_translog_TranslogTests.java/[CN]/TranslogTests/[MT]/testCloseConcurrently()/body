{
  final int opsPerThread=randomIntBetween(10,200);
  int threadCount=2 + randomInt(5);
  logger.info("testing with [{}] threads, each doing [{}] ops",threadCount,opsPerThread);
  final BlockingQueue<LocationOperation> writtenOperations=new ArrayBlockingQueue<>(threadCount * opsPerThread);
  Thread[] threads=new Thread[threadCount];
  final Exception[] threadExceptions=new Exception[threadCount];
  final CountDownLatch downLatch=new CountDownLatch(1);
  for (int i=0; i < threadCount; i++) {
    final int threadId=i;
    threads[i]=new TranslogThread(translog,downLatch,opsPerThread,threadId,writtenOperations,threadExceptions);
    threads[i].setDaemon(true);
    threads[i].start();
  }
  downLatch.countDown();
  translog.close();
  for (int i=0; i < threadCount; i++) {
    if (threadExceptions[i] != null) {
      if ((threadExceptions[i] instanceof AlreadyClosedException) == false) {
        throw threadExceptions[i];
      }
    }
    threads[i].join(60 * 1000);
  }
}
