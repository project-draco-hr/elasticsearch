{
  ArrayList<Translog.Operation> ops=new ArrayList<>();
  Translog.Snapshot snapshot=translog.newSnapshot();
  assertThat(snapshot,SnapshotMatchers.size(0));
  addToTranslogAndList(translog,ops,new Translog.Index("test","1",new byte[]{1}));
  snapshot=translog.newSnapshot();
  assertThat(snapshot,SnapshotMatchers.equalsTo(ops));
  assertThat(snapshot.totalOperations(),equalTo(ops.size()));
  addToTranslogAndList(translog,ops,new Translog.Delete(newUid("2")));
  snapshot=translog.newSnapshot();
  assertThat(snapshot,SnapshotMatchers.equalsTo(ops));
  assertThat(snapshot.totalOperations(),equalTo(ops.size()));
  snapshot=translog.newSnapshot();
  Translog.Index index=(Translog.Index)snapshot.next();
  assertThat(index != null,equalTo(true));
  assertThat(index.source().toBytes(),equalTo(new byte[]{1}));
  Translog.Delete delete=(Translog.Delete)snapshot.next();
  assertThat(delete != null,equalTo(true));
  assertThat(delete.uid(),equalTo(newUid("2")));
  assertThat(snapshot.next(),equalTo(null));
  long firstId=translog.currentFileGeneration();
  translog.prepareCommit();
  assertThat(translog.currentFileGeneration(),Matchers.not(equalTo(firstId)));
  snapshot=translog.newSnapshot();
  assertThat(snapshot,SnapshotMatchers.equalsTo(ops));
  assertThat(snapshot.totalOperations(),equalTo(ops.size()));
  translog.commit();
  snapshot=translog.newSnapshot();
  assertThat(snapshot,SnapshotMatchers.size(0));
  assertThat(snapshot.totalOperations(),equalTo(0));
}
