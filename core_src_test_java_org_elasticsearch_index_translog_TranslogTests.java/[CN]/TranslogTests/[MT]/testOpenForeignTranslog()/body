{
  List<Translog.Location> locations=new ArrayList<>();
  int translogOperations=randomIntBetween(1,10);
  int firstUncommitted=0;
  for (int op=0; op < translogOperations; op++) {
    locations.add(translog.add(new Translog.Index("test","" + op,Integer.toString(op).getBytes(Charset.forName("UTF-8")))));
    if (randomBoolean()) {
      translog.commit();
      firstUncommitted=op + 1;
    }
  }
  TranslogConfig config=translog.getConfig();
  Translog.TranslogGeneration translogGeneration=translog.getGeneration();
  translog.close();
  Translog.TranslogGeneration generation=new Translog.TranslogGeneration(randomRealisticUnicodeOfCodepointLengthBetween(1,translogGeneration.translogUUID.length()),translogGeneration.translogFileGeneration);
  try {
    new Translog(config,generation);
    fail("translog doesn't belong to this UUID");
  }
 catch (  TranslogCorruptedException ex) {
  }
  this.translog=new Translog(config,translogGeneration);
  Translog.Snapshot snapshot=this.translog.newSnapshot();
  for (int i=firstUncommitted; i < translogOperations; i++) {
    Translog.Operation next=snapshot.next();
    assertNotNull("" + i,next);
    assertEquals(Integer.parseInt(next.getSource().source.utf8ToString()),i);
  }
  assertNull(snapshot.next());
}
