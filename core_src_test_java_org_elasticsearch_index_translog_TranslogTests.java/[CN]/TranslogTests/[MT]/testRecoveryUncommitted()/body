{
  List<Translog.Location> locations=new ArrayList<>();
  int translogOperations=randomIntBetween(10,100);
  final int prepareOp=randomIntBetween(0,translogOperations - 1);
  Translog.TranslogGeneration translogGeneration=null;
  final boolean sync=randomBoolean();
  for (int op=0; op < translogOperations; op++) {
    locations.add(translog.add(new Translog.Index("test","" + op,Integer.toString(op).getBytes(Charset.forName("UTF-8")))));
    if (op == prepareOp) {
      translogGeneration=translog.getGeneration();
      translog.prepareCommit();
      assertEquals("expected this to be the first commit",1l,translogGeneration.translogFileGeneration);
      assertNotNull(translogGeneration.translogUUID);
    }
  }
  if (sync) {
    translog.sync();
  }
  TranslogConfig config=translog.getConfig();
  config.setTranslogGeneration(translogGeneration);
  try (Translog translog=new Translog(config)){
    assertNotNull(translogGeneration);
    assertEquals("lastCommitted must be 2 less than current - we never finished the commit",translogGeneration.translogFileGeneration + 2,translog.currentFileGeneration());
    assertFalse(translog.syncNeeded());
    try (Translog.Snapshot snapshot=translog.newSnapshot()){
      int upTo=sync ? translogOperations : prepareOp;
      for (int i=0; i < upTo; i++) {
        Translog.Operation next=snapshot.next();
        assertNotNull("operation " + i + " must be non-null synced: "+ sync,next);
        assertEquals("payload missmatch, synced: " + sync,i,Integer.parseInt(next.getSource().source.toUtf8()));
      }
    }
   }
   if (randomBoolean()) {
    try (Translog translog=new Translog(config)){
      assertNotNull(translogGeneration);
      assertEquals("lastCommitted must be 3 less than current - we never finished the commit and run recovery twice",translogGeneration.translogFileGeneration + 3,translog.currentFileGeneration());
      assertFalse(translog.syncNeeded());
      try (Translog.Snapshot snapshot=translog.newSnapshot()){
        int upTo=sync ? translogOperations : prepareOp;
        for (int i=0; i < upTo; i++) {
          Translog.Operation next=snapshot.next();
          assertNotNull("operation " + i + " must be non-null synced: "+ sync,next);
          assertEquals("payload missmatch, synced: " + sync,i,Integer.parseInt(next.getSource().source.toUtf8()));
        }
      }
     }
   }
}
