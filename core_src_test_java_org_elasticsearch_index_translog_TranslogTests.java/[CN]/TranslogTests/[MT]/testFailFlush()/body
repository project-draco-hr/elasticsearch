{
  Path tempDir=createTempDir();
  final FailSwitch fail=new FailSwitch();
  TranslogConfig config=getTranslogConfig(tempDir);
  Translog translog=getFailableTranslog(fail,config);
  List<Translog.Location> locations=new ArrayList<>();
  int opsSynced=0;
  boolean failed=false;
  while (failed == false) {
    try {
      locations.add(translog.add(new Translog.Index("test","" + opsSynced,Integer.toString(opsSynced).getBytes(Charset.forName("UTF-8")))));
      translog.sync();
      opsSynced++;
    }
 catch (    MockDirectoryWrapper.FakeIOException ex) {
      failed=true;
      assertFalse(translog.isOpen());
    }
catch (    IOException ex) {
      failed=true;
      assertFalse(translog.isOpen());
      assertEquals("__FAKE__ no space left on device",ex.getMessage());
    }
    if (randomBoolean()) {
      fail.failAlways();
    }
 else {
      fail.failNever();
    }
  }
  fail.failNever();
  if (randomBoolean()) {
    try {
      locations.add(translog.add(new Translog.Index("test","" + opsSynced,Integer.toString(opsSynced).getBytes(Charset.forName("UTF-8")))));
      fail("we are already closed");
    }
 catch (    AlreadyClosedException ex) {
      assertNotNull(ex.getCause());
      if (ex.getCause() instanceof MockDirectoryWrapper.FakeIOException) {
        assertNull(ex.getCause().getMessage());
      }
 else {
        assertEquals(ex.getCause().getMessage(),"__FAKE__ no space left on device");
      }
    }
  }
  Translog.TranslogGeneration translogGeneration=translog.getGeneration();
  try {
    translog.newSnapshot();
    fail("already closed");
  }
 catch (  AlreadyClosedException ex) {
    assertNotNull(ex.getCause());
    assertSame(translog.getTragicException(),ex.getCause());
  }
  try {
    translog.commit();
    fail("already closed");
  }
 catch (  AlreadyClosedException ex) {
    assertNotNull(ex.getCause());
    assertSame(translog.getTragicException(),ex.getCause());
  }
  assertFalse(translog.isOpen());
  translog.close();
  try (Translog tlog=new Translog(config,translogGeneration)){
    assertEquals("lastCommitted must be 1 less than current",translogGeneration.translogFileGeneration + 1,tlog.currentFileGeneration());
    assertFalse(tlog.syncNeeded());
    Translog.Snapshot snapshot=tlog.newSnapshot();
    assertEquals(opsSynced,snapshot.totalOperations());
    for (int i=0; i < opsSynced; i++) {
      assertEquals("expected operation" + i + " to be in the previous translog but wasn't",tlog.currentFileGeneration() - 1,locations.get(i).generation);
      Translog.Operation next=snapshot.next();
      assertNotNull("operation " + i + " must be non-null",next);
      assertEquals(i,Integer.parseInt(next.getSource().source.toUtf8()));
    }
  }
 }
