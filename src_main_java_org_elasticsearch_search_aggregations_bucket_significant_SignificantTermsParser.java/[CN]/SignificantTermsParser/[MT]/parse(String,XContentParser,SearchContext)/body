{
  ValuesSourceParser vsParser=ValuesSourceParser.any(aggregationName,SignificantStringTerms.TYPE,context).scriptable(false).formattable(true).requiresSortedValues(true).requiresUniqueValues(true).build();
  IncludeExclude.Parser incExcParser=new IncludeExclude.Parser(aggregationName,SignificantStringTerms.TYPE,context);
  Filter filter=null;
  int requiredSize=DEFAULT_REQUIRED_SIZE;
  int shardSize=DEFAULT_SHARD_SIZE;
  long minDocCount=DEFAULT_MIN_DOC_COUNT;
  long shardMinDocCount=DEFAULT_SHARD_MIN_DOC_COUNT;
  String executionHint=null;
  XContentParser.Token token;
  String currentFieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (vsParser.token(currentFieldName,token,parser)) {
      continue;
    }
 else     if (incExcParser.token(currentFieldName,token,parser)) {
      continue;
    }
 else     if (token == XContentParser.Token.VALUE_STRING) {
      if ("execution_hint".equals(currentFieldName) || "executionHint".equals(currentFieldName)) {
        executionHint=parser.text();
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else     if (token == XContentParser.Token.VALUE_NUMBER) {
      if ("size".equals(currentFieldName)) {
        requiredSize=parser.intValue();
      }
 else       if ("shard_size".equals(currentFieldName) || "shardSize".equals(currentFieldName)) {
        shardSize=parser.intValue();
      }
 else       if ("min_doc_count".equals(currentFieldName) || "minDocCount".equals(currentFieldName)) {
        minDocCount=parser.intValue();
      }
 else       if (SHARD_MIN_DOC_COUNT_FIELD_NAME.match(currentFieldName)) {
        shardMinDocCount=parser.longValue();
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if (BACKGROUND_FILTER.match(currentFieldName)) {
        filter=context.queryParserService().parseInnerFilter(parser).filter();
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else {
      throw new SearchParseException(context,"Unexpected token " + token + " in ["+ aggregationName+ "].");
    }
  }
  if (shardSize == DEFAULT_SHARD_SIZE) {
    shardSize=2 * BucketUtils.suggestShardSideQueueSize(requiredSize,context.numberOfShards());
  }
  if (shardSize < requiredSize) {
    shardSize=requiredSize;
  }
  if (shardMinDocCount > minDocCount) {
    shardMinDocCount=minDocCount;
  }
  IncludeExclude includeExclude=incExcParser.includeExclude();
  return new SignificantTermsAggregatorFactory(aggregationName,vsParser.config(),requiredSize,shardSize,minDocCount,shardMinDocCount,includeExclude,executionHint,filter);
}
