{
  innerTestSettings(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE,randomIntBetween(1,200),new Validator(){
    @Override public void validate(    RecoverySettings recoverySettings,    int expectedValue){
      assertEquals(expectedValue,recoverySettings.fileChunkSize().bytesAsInt());
    }
  }
);
  innerTestSettings(RecoverySettings.INDICES_RECOVERY_TRANSLOG_OPS,randomIntBetween(1,200),new Validator(){
    @Override public void validate(    RecoverySettings recoverySettings,    int expectedValue){
      assertEquals(expectedValue,recoverySettings.translogOps());
    }
  }
);
  innerTestSettings(RecoverySettings.INDICES_RECOVERY_TRANSLOG_SIZE,randomIntBetween(1,200),new Validator(){
    @Override public void validate(    RecoverySettings recoverySettings,    int expectedValue){
      assertEquals(expectedValue,recoverySettings.translogSize().bytesAsInt());
    }
  }
);
  innerTestSettings(RecoverySettings.INDICES_RECOVERY_CONCURRENT_STREAMS,randomIntBetween(1,200),new Validator(){
    @Override public void validate(    RecoverySettings recoverySettings,    int expectedValue){
      assertEquals(expectedValue,recoverySettings.concurrentStreamPool().getMaximumPoolSize());
    }
  }
);
  innerTestSettings(RecoverySettings.INDICES_RECOVERY_CONCURRENT_SMALL_FILE_STREAMS,randomIntBetween(1,200),new Validator(){
    @Override public void validate(    RecoverySettings recoverySettings,    int expectedValue){
      assertEquals(expectedValue,recoverySettings.concurrentSmallFileStreamPool().getMaximumPoolSize());
    }
  }
);
  innerTestSettings(RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC,0,new Validator(){
    @Override public void validate(    RecoverySettings recoverySettings,    int expectedValue){
      assertEquals(null,recoverySettings.rateLimiter());
    }
  }
);
  innerTestSettings(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_STATE_SYNC,randomIntBetween(1,200),new Validator(){
    @Override public void validate(    RecoverySettings recoverySettings,    int expectedValue){
      assertEquals(expectedValue,recoverySettings.retryDelayStateSync().millis());
    }
  }
);
  innerTestSettings(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_NETWORK,randomIntBetween(1,200),new Validator(){
    @Override public void validate(    RecoverySettings recoverySettings,    int expectedValue){
      assertEquals(expectedValue,recoverySettings.retryDelayNetwork().millis());
    }
  }
);
  innerTestSettings(RecoverySettings.INDICES_RECOVERY_ACTIVITY_TIMEOUT,randomIntBetween(1,200),new Validator(){
    @Override public void validate(    RecoverySettings recoverySettings,    int expectedValue){
      assertEquals(expectedValue,recoverySettings.activityTimeout().millis());
    }
  }
);
  innerTestSettings(RecoverySettings.INDICES_RECOVERY_INTERNAL_ACTION_TIMEOUT,randomIntBetween(1,200),new Validator(){
    @Override public void validate(    RecoverySettings recoverySettings,    int expectedValue){
      assertEquals(expectedValue,recoverySettings.internalActionTimeout().millis());
    }
  }
);
  innerTestSettings(RecoverySettings.INDICES_RECOVERY_INTERNAL_LONG_ACTION_TIMEOUT,randomIntBetween(1,200),new Validator(){
    @Override public void validate(    RecoverySettings recoverySettings,    int expectedValue){
      assertEquals(expectedValue,recoverySettings.internalActionLongTimeout().millis());
    }
  }
);
  innerTestSettings(RecoverySettings.INDICES_RECOVERY_COMPRESS,false,new Validator(){
    @Override public void validate(    RecoverySettings recoverySettings,    boolean expectedValue){
      assertEquals(expectedValue,recoverySettings.compress());
    }
  }
);
}
