{
  internalCluster().startNodesAsync(2,Settings.builder().put(InternalClusterInfoService.INTERNAL_CLUSTER_INFO_UPDATE_INTERVAL,"200ms").build()).get();
  assertAcked(prepareCreate("test").setSettings(settingsBuilder().put(Store.INDEX_STORE_STATS_REFRESH_INTERVAL,0).put(EnableAllocationDecider.INDEX_ROUTING_REBALANCE_ENABLE,EnableAllocationDecider.Rebalance.NONE).build()));
  ensureGreen("test");
  InternalTestCluster internalTestCluster=internalCluster();
  final InternalClusterInfoService infoService=(InternalClusterInfoService)internalTestCluster.getInstance(ClusterInfoService.class,internalTestCluster.getMasterName());
  ClusterInfo info=infoService.refresh();
  assertNotNull("info should not be null",info);
  final Map<String,DiskUsage> leastUsages=info.getNodeLeastAvailableDiskUsages();
  final Map<String,DiskUsage> mostUsages=info.getNodeMostAvailableDiskUsages();
  final Map<String,Long> shardSizes=info.shardSizes;
  assertNotNull(leastUsages);
  assertNotNull(shardSizes);
  assertThat("some usages are populated",leastUsages.values().size(),Matchers.equalTo(2));
  assertThat("some shard sizes are populated",shardSizes.values().size(),greaterThan(0));
  for (  DiskUsage usage : leastUsages.values()) {
    logger.info("--> usage: {}",usage);
    assertThat("usage has be retrieved",usage.getFreeBytes(),greaterThan(0L));
  }
  for (  DiskUsage usage : mostUsages.values()) {
    logger.info("--> usage: {}",usage);
    assertThat("usage has be retrieved",usage.getFreeBytes(),greaterThan(0L));
  }
  for (  Long size : shardSizes.values()) {
    logger.info("--> shard size: {}",size);
    assertThat("shard size is greater than 0",size,greaterThan(0L));
  }
  ClusterService clusterService=internalTestCluster.getInstance(ClusterService.class,internalTestCluster.getMasterName());
  ClusterState state=clusterService.state();
  RoutingNodes routingNodes=state.getRoutingNodes();
  for (  ShardRouting shard : routingNodes.getRoutingTable().allShards()) {
    String dataPath=info.getDataPath(shard);
    assertNotNull(dataPath);
    String nodeId=shard.currentNodeId();
    DiscoveryNode discoveryNode=state.getNodes().get(nodeId);
    IndicesService indicesService=internalTestCluster.getInstance(IndicesService.class,discoveryNode.getName());
    IndexService indexService=indicesService.indexService(shard.index());
    IndexShard indexShard=indexService.shard(shard.id());
    assertEquals(indexShard.shardPath().getRootDataPath().toString(),dataPath);
  }
}
