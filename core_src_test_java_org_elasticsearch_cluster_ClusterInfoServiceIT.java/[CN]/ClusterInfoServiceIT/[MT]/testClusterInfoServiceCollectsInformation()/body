{
  internalCluster().startNodesAsync(2).get();
  assertAcked(prepareCreate("test").setSettings(Settings.builder().put(Store.INDEX_STORE_STATS_REFRESH_INTERVAL_SETTING.getKey(),0).put(EnableAllocationDecider.INDEX_ROUTING_REBALANCE_ENABLE_SETTING.getKey(),EnableAllocationDecider.Rebalance.NONE).build()));
  ensureGreen("test");
  InternalTestCluster internalTestCluster=internalCluster();
  final InternalClusterInfoService infoService=(InternalClusterInfoService)internalTestCluster.getInstance(ClusterInfoService.class,internalTestCluster.getMasterName());
  infoService.setUpdateFrequency(TimeValue.timeValueMillis(200));
  infoService.onMaster();
  ClusterInfo info=infoService.refresh();
  assertNotNull("info should not be null",info);
  ImmutableOpenMap<String,DiskUsage> leastUsages=info.getNodeLeastAvailableDiskUsages();
  ImmutableOpenMap<String,DiskUsage> mostUsages=info.getNodeMostAvailableDiskUsages();
  ImmutableOpenMap<String,Long> shardSizes=info.shardSizes;
  assertNotNull(leastUsages);
  assertNotNull(shardSizes);
  assertThat("some usages are populated",leastUsages.values().size(),Matchers.equalTo(2));
  assertThat("some shard sizes are populated",shardSizes.values().size(),greaterThan(0));
  for (  ObjectCursor<DiskUsage> usage : leastUsages.values()) {
    logger.info("--> usage: {}",usage.value);
    assertThat("usage has be retrieved",usage.value.getFreeBytes(),greaterThan(0L));
  }
  for (  ObjectCursor<DiskUsage> usage : mostUsages.values()) {
    logger.info("--> usage: {}",usage.value);
    assertThat("usage has be retrieved",usage.value.getFreeBytes(),greaterThan(0L));
  }
  for (  ObjectCursor<Long> size : shardSizes.values()) {
    logger.info("--> shard size: {}",size.value);
    assertThat("shard size is greater than 0",size.value,greaterThanOrEqualTo(0L));
  }
  ClusterService clusterService=internalTestCluster.getInstance(ClusterService.class,internalTestCluster.getMasterName());
  ClusterState state=clusterService.state();
  RoutingNodes routingNodes=state.getRoutingNodes();
  for (  ShardRouting shard : routingNodes.getRoutingTable().allShards()) {
    String dataPath=info.getDataPath(shard);
    assertNotNull(dataPath);
    String nodeId=shard.currentNodeId();
    DiscoveryNode discoveryNode=state.getNodes().get(nodeId);
    IndicesService indicesService=internalTestCluster.getInstance(IndicesService.class,discoveryNode.getName());
    IndexService indexService=indicesService.indexService(shard.index());
    IndexShard indexShard=indexService.getShardOrNull(shard.id());
    assertEquals(indexShard.shardPath().getRootDataPath().toString(),dataPath);
  }
}
