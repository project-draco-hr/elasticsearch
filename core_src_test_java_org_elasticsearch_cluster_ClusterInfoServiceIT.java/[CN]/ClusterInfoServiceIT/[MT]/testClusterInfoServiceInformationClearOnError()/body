{
  internalCluster().startNodesAsync(2,Settings.builder().put(InternalClusterInfoService.INTERNAL_CLUSTER_INFO_UPDATE_INTERVAL,"60m").build()).get();
  prepareCreate("test").setSettings(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,1).get();
  ensureGreen("test");
  InternalTestCluster internalTestCluster=internalCluster();
  InternalClusterInfoService infoService=(InternalClusterInfoService)internalTestCluster.getInstance(ClusterInfoService.class,internalTestCluster.getMasterName());
  ClusterInfo info=infoService.refresh();
  assertNotNull("failed to collect info",info);
  assertThat("some usages are populated",info.getNodeLeastAvailableDiskUsages().size(),Matchers.equalTo(2));
  assertThat("some shard sizes are populated",info.shardSizes.size(),greaterThan(0));
  MockTransportService mockTransportService=(MockTransportService)internalCluster().getInstance(TransportService.class,internalTestCluster.getMasterName());
  final AtomicBoolean timeout=new AtomicBoolean(false);
  final Set<String> blockedActions=newHashSet(NodesStatsAction.NAME,NodesStatsAction.NAME + "[n]",IndicesStatsAction.NAME,IndicesStatsAction.NAME + "[n]");
  for (  DiscoveryNode node : internalTestCluster.clusterService().state().getNodes()) {
    mockTransportService.addDelegate(node,new MockTransportService.DelegateTransport(mockTransportService.original()){
      @Override public void sendRequest(      DiscoveryNode node,      long requestId,      String action,      TransportRequest request,      TransportRequestOptions options) throws IOException, TransportException {
        if (blockedActions.contains(action)) {
          if (timeout.get()) {
            logger.info("dropping [{}] to [{}]",action,node);
            return;
          }
        }
        super.sendRequest(node,requestId,action,request,options);
      }
    }
);
  }
  timeout.set(true);
  info=infoService.refresh();
  assertNotNull("info should not be null",info);
  assertThat(info.getNodeLeastAvailableDiskUsages().size(),greaterThanOrEqualTo(1));
  assertThat(info.getNodeMostAvailableDiskUsages().size(),greaterThanOrEqualTo(1));
  assertThat(info.shardSizes.size(),greaterThan(1));
  timeout.set(false);
  ActionFilters actionFilters=internalTestCluster.getInstance(ActionFilters.class,internalTestCluster.getMasterName());
  BlockingActionFilter blockingActionFilter=null;
  for (  ActionFilter filter : actionFilters.filters()) {
    if (filter instanceof BlockingActionFilter) {
      blockingActionFilter=(BlockingActionFilter)filter;
      break;
    }
  }
  assertNotNull("failed to find BlockingActionFilter",blockingActionFilter);
  blockingActionFilter.blockActions(blockedActions.toArray(Strings.EMPTY_ARRAY));
  info=infoService.refresh();
  assertNotNull("info should not be null",info);
  assertThat(info.getNodeLeastAvailableDiskUsages().size(),equalTo(0));
  assertThat(info.getNodeMostAvailableDiskUsages().size(),equalTo(0));
  assertThat(info.shardSizes.size(),equalTo(0));
  blockingActionFilter.blockActions();
  info=infoService.refresh();
  assertNotNull("info should not be null",info);
  assertThat(info.getNodeLeastAvailableDiskUsages().size(),equalTo(2));
  assertThat(info.getNodeMostAvailableDiskUsages().size(),equalTo(2));
  assertThat(info.shardSizes.size(),greaterThan(0));
}
