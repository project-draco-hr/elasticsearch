{
  super(settings);
  this.blobStoreContext=blobStoreService.context();
  this.chunkSize=componentSettings.getAsSize("chunk_size",null);
  String location=componentSettings.get("location");
  if (location == null) {
    this.location=null;
  }
 else {
    Location matchedLocation=null;
    Set<? extends Location> assignableLocations=blobStoreContext.getBlobStore().listAssignableLocations();
    for (    Location oLocation : assignableLocations) {
      if (oLocation.getId().equals(location)) {
        matchedLocation=oLocation;
        break;
      }
    }
    this.location=matchedLocation;
    if (this.location == null) {
      throw new ElasticSearchIllegalArgumentException("Not a valid location [" + location + "], available locations "+ assignableLocations);
    }
  }
  this.container=componentSettings.get("container");
  if (container == null) {
    throw new ElasticSearchIllegalArgumentException("Cloud gateway requires 'container' setting");
  }
  this.metaDataDirectory=clusterName.value() + "/metadata";
  logger.debug("Using location [{}], container [{}], metadata_directory [{}]",this.location,this.container,metaDataDirectory);
  blobStoreContext.getBlobStore().createContainerInLocation(this.location,container);
  this.currentIndex=findLatestIndex();
  logger.debug("Latest metadata found at index [" + currentIndex + "]");
}
