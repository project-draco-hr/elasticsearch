{
  Analyzer pattern=PreBuiltAnalyzers.PATTERN.getAnalyzer(Version.V_1_0_0_RC1);
  Analyzer standardHtml=PreBuiltAnalyzers.STANDARD_HTML_STRIP.getAnalyzer(Version.V_1_0_0_RC1);
  final int n=scaledRandomIntBetween(10,100);
  Version version=Version.CURRENT;
  for (int i=0; i < n; i++) {
    if (version.equals(Version.V_1_0_0_RC1)) {
      assertThat(pattern,is(PreBuiltAnalyzers.PATTERN.getAnalyzer(version)));
      assertThat(standardHtml,is(PreBuiltAnalyzers.STANDARD_HTML_STRIP.getAnalyzer(version)));
    }
 else {
      assertThat(pattern,not(is(PreBuiltAnalyzers.DEFAULT.getAnalyzer(version))));
      assertThat(standardHtml,not(is(PreBuiltAnalyzers.DEFAULT.getAnalyzer(version))));
    }
    Analyzer analyzer=randomBoolean() ? PreBuiltAnalyzers.PATTERN.getAnalyzer(version) : PreBuiltAnalyzers.STANDARD_HTML_STRIP.getAnalyzer(version);
    TokenStream ts=analyzer.tokenStream("foo","This is it Dude");
    ts.reset();
    CharTermAttribute charTermAttribute=ts.addAttribute(CharTermAttribute.class);
    List<String> list=new ArrayList<>();
    while (ts.incrementToken()) {
      list.add(charTermAttribute.toString());
    }
    if (version.onOrAfter(Version.V_1_0_0_RC1)) {
      assertThat(list.toString(),list.size(),is(4));
      assertThat(list,contains("this","is","it","dude"));
    }
 else {
      assertThat(list.size(),is(1));
      assertThat(list,contains("dude"));
    }
    ts.close();
    version=randomVersion(random());
  }
}
