{
  String initialMapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","date").field("format","EEE MMM dd HH:mm:ss.S Z yyyy||EEE MMM dd HH:mm:ss.SSS Z yyyy").endObject().endObject().endObject().endObject().string();
  String updatedMapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","date").field("format","EEE MMM dd HH:mm:ss.S Z yyyy||EEE MMM dd HH:mm:ss.SSS Z yyyy||yyyy-MM-dd'T'HH:mm:ss.SSSZZ").endObject().endObject().endObject().endObject().string();
  DocumentMapper defaultMapper=mapper("test1","type",initialMapping);
  DocumentMapper mergeMapper=mapper("test2","type",updatedMapping);
  assertThat(defaultMapper.mappers().getMapper("field"),is(instanceOf(DateFieldMapper.class)));
  DateFieldMapper initialDateFieldMapper=(DateFieldMapper)defaultMapper.mappers().getMapper("field");
  Map<String,String> config=getConfigurationViaXContent(initialDateFieldMapper);
  assertThat(config.get("format"),is("EEE MMM dd HH:mm:ss.S Z yyyy||EEE MMM dd HH:mm:ss.SSS Z yyyy"));
  defaultMapper=defaultMapper.merge(mergeMapper.mapping(),false);
  assertThat(defaultMapper.mappers().getMapper("field"),is(instanceOf(DateFieldMapper.class)));
  DateFieldMapper mergedFieldMapper=(DateFieldMapper)defaultMapper.mappers().getMapper("field");
  Map<String,String> mergedConfig=getConfigurationViaXContent(mergedFieldMapper);
  assertThat(mergedConfig.get("format"),is("EEE MMM dd HH:mm:ss.S Z yyyy||EEE MMM dd HH:mm:ss.SSS Z yyyy||yyyy-MM-dd'T'HH:mm:ss.SSSZZ"));
}
