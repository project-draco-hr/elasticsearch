{
  ScriptEngineRegistry scriptEngineRegistry=new ScriptEngineRegistry(Collections.singletonList(new ScriptEngineRegistry.ScriptEngineRegistration(CustomScriptEngineService.class,CustomScriptEngineService.TYPES)));
  ScriptContextRegistry scriptContextRegistry=new ScriptContextRegistry(Collections.emptyList());
  ScriptSettings scriptSettings=new ScriptSettings(scriptEngineRegistry,scriptContextRegistry);
  ScriptService.ScriptType scriptType=randomFrom(ScriptService.ScriptType.values());
  ScriptContext scriptContext=randomFrom(ScriptContext.Standard.values());
  Settings settings=Settings.builder().put(ScriptModes.getKey("test1",scriptType,scriptContext),"off").put(ScriptModes.getKey("test2",scriptType,scriptContext),"on").build();
  boolean sawConflictingSettings=false;
  for (  Setting<ScriptMode> scriptModeSetting : scriptSettings.getScriptLanguageSettings()) {
    if (scriptModeSetting.getKey().startsWith(ScriptModes.getKey("test3",scriptType,scriptContext))) {
      try {
        scriptModeSetting.get(settings);
        fail("should have seen conflicting settings");
      }
 catch (      IllegalArgumentException e) {
        assertThat(e.getMessage(),anyOf(containsString("conflicting settings [{off=[test1], on=[test2]}] for language [test3]"),containsString("conflicting settings [{on=[test2], on=[test1]}] for language [test3]")));
        sawConflictingSettings=true;
      }
    }
  }
  assertTrue(sawConflictingSettings);
}
