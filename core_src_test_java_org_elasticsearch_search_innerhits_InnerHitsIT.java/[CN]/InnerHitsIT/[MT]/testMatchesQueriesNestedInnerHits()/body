{
  XContentBuilder builder=jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("nested1").field("type","nested").endObject().startObject("field1").field("type","long").endObject().endObject().endObject().endObject();
  assertAcked(prepareCreate("test").addMapping("type1",builder));
  ensureGreen();
  List<IndexRequestBuilder> requests=new ArrayList<>();
  int numDocs=randomIntBetween(2,35);
  requests.add(client().prepareIndex("test","type1","0").setSource(jsonBuilder().startObject().field("field1",0).startArray("nested1").startObject().field("n_field1","n_value1_1").field("n_field2","n_value2_1").endObject().startObject().field("n_field1","n_value1_2").field("n_field2","n_value2_2").endObject().endArray().endObject()));
  requests.add(client().prepareIndex("test","type1","1").setSource(jsonBuilder().startObject().field("field1",1).startArray("nested1").startObject().field("n_field1","n_value1_8").field("n_field2","n_value2_5").endObject().startObject().field("n_field1","n_value1_3").field("n_field2","n_value2_1").endObject().endArray().endObject()));
  for (int i=2; i < numDocs; i++) {
    requests.add(client().prepareIndex("test","type1",String.valueOf(i)).setSource(jsonBuilder().startObject().field("field1",i).startArray("nested1").startObject().field("n_field1","n_value1_8").field("n_field2","n_value2_5").endObject().startObject().field("n_field1","n_value1_2").field("n_field2","n_value2_2").endObject().endArray().endObject()));
  }
  indexRandom(true,requests);
  waitForRelocation(ClusterHealthStatus.GREEN);
  SearchResponse searchResponse=client().prepareSearch("test").setQuery(nestedQuery("nested1",boolQuery().should(termQuery("nested1.n_field1","n_value1_1").queryName("test1")).should(termQuery("nested1.n_field1","n_value1_3").queryName("test2")).should(termQuery("nested1.n_field2","n_value2_2").queryName("test3"))).innerHit(new QueryInnerHits(null,new InnerHitsBuilder.InnerHit().addSort("nested1.n_field1",SortOrder.ASC)))).setSize(numDocs).addSort("field1",SortOrder.ASC).get();
  assertNoFailures(searchResponse);
  assertAllSuccessful(searchResponse);
  assertThat(searchResponse.getHits().totalHits(),equalTo((long)numDocs));
  assertThat(searchResponse.getHits().getAt(0).id(),equalTo("0"));
  assertThat(searchResponse.getHits().getAt(0).getInnerHits().get("nested1").getTotalHits(),equalTo(2L));
  assertThat(searchResponse.getHits().getAt(0).getInnerHits().get("nested1").getAt(0).getMatchedQueries().length,equalTo(1));
  assertThat(searchResponse.getHits().getAt(0).getInnerHits().get("nested1").getAt(0).getMatchedQueries()[0],equalTo("test1"));
  assertThat(searchResponse.getHits().getAt(0).getInnerHits().get("nested1").getAt(1).getMatchedQueries().length,equalTo(1));
  assertThat(searchResponse.getHits().getAt(0).getInnerHits().get("nested1").getAt(1).getMatchedQueries()[0],equalTo("test3"));
  assertThat(searchResponse.getHits().getAt(1).id(),equalTo("1"));
  assertThat(searchResponse.getHits().getAt(1).getInnerHits().get("nested1").getTotalHits(),equalTo(1L));
  assertThat(searchResponse.getHits().getAt(1).getInnerHits().get("nested1").getAt(0).getMatchedQueries().length,equalTo(1));
  assertThat(searchResponse.getHits().getAt(1).getInnerHits().get("nested1").getAt(0).getMatchedQueries()[0],equalTo("test2"));
  for (int i=2; i < numDocs; i++) {
    assertThat(searchResponse.getHits().getAt(i).id(),equalTo(String.valueOf(i)));
    assertThat(searchResponse.getHits().getAt(i).getInnerHits().get("nested1").getTotalHits(),equalTo(1L));
    assertThat(searchResponse.getHits().getAt(i).getInnerHits().get("nested1").getAt(0).getMatchedQueries().length,equalTo(1));
    assertThat(searchResponse.getHits().getAt(i).getInnerHits().get("nested1").getAt(0).getMatchedQueries()[0],equalTo("test3"));
  }
}
