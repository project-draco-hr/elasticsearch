{
  assertAcked(prepareCreate("articles").addMapping("article",jsonBuilder().startObject().startObject("article").startObject("properties").startObject("comments").field("type","nested").startObject("properties").startObject("message").field("type","string").endObject().startObject("remarks").field("type","nested").startObject("properties").startObject("message").field("type","string").endObject().endObject().endObject().endObject().endObject().startObject("title").field("type","string").endObject().endObject().endObject().endObject()));
  List<IndexRequestBuilder> requests=new ArrayList<>();
  requests.add(client().prepareIndex("articles","article","1").setSource(jsonBuilder().startObject().field("title","quick brown fox").startArray("comments").startObject().field("message","fox eat quick").startArray("remarks").startObject().field("message","good").endObject().endArray().endObject().endArray().endObject()));
  requests.add(client().prepareIndex("articles","article","2").setSource(jsonBuilder().startObject().field("title","big gray elephant").startArray("comments").startObject().field("message","elephant captured").startArray("remarks").startObject().field("message","bad").endObject().endArray().endObject().endArray().endObject()));
  indexRandom(true,requests);
  SearchResponse response=client().prepareSearch("articles").setQuery(nestedQuery("comments",nestedQuery("comments.remarks",matchQuery("comments.remarks.message","good")))).addNestedInnerHits("comment","comments",new InnerHitsBuilder.InnerHit().setQuery(nestedQuery("comments.remarks",matchQuery("comments.remarks.message","good"))).addNestedInnerHits("remark","comments.remarks",new InnerHitsBuilder.InnerHit().setQuery(matchQuery("comments.remarks.message","good")))).get();
  assertNoFailures(response);
  assertHitCount(response,1);
  assertSearchHit(response,1,hasId("1"));
  assertThat(response.getHits().getAt(0).getInnerHits().size(),equalTo(1));
  SearchHits innerHits=response.getHits().getAt(0).getInnerHits().get("comment");
  assertThat(innerHits.totalHits(),equalTo(1l));
  assertThat(innerHits.getHits().length,equalTo(1));
  assertThat(innerHits.getAt(0).getId(),equalTo("1"));
  assertThat(innerHits.getAt(0).getNestedIdentity().getField().string(),equalTo("comments"));
  assertThat(innerHits.getAt(0).getNestedIdentity().getOffset(),equalTo(0));
  innerHits=innerHits.getAt(0).getInnerHits().get("remark");
  assertThat(innerHits.totalHits(),equalTo(1l));
  assertThat(innerHits.getHits().length,equalTo(1));
  assertThat(innerHits.getAt(0).getId(),equalTo("1"));
  assertThat(innerHits.getAt(0).getNestedIdentity().getField().string(),equalTo("comments"));
  assertThat(innerHits.getAt(0).getNestedIdentity().getOffset(),equalTo(0));
  assertThat(innerHits.getAt(0).getNestedIdentity().getChild().getField().string(),equalTo("remarks"));
  assertThat(innerHits.getAt(0).getNestedIdentity().getChild().getOffset(),equalTo(0));
  response=client().prepareSearch("articles").setQuery(nestedQuery("comments.remarks",matchQuery("comments.remarks.message","bad")).innerHit(new QueryInnerHits())).get();
  assertNoFailures(response);
  assertHitCount(response,1);
  assertSearchHit(response,1,hasId("2"));
  assertThat(response.getHits().getAt(0).getInnerHits().size(),equalTo(1));
  innerHits=response.getHits().getAt(0).getInnerHits().get("comments.remarks");
  assertThat(innerHits.totalHits(),equalTo(1l));
  assertThat(innerHits.getHits().length,equalTo(1));
  assertThat(innerHits.getAt(0).getId(),equalTo("2"));
  assertThat(innerHits.getAt(0).getNestedIdentity().getField().string(),equalTo("comments"));
  assertThat(innerHits.getAt(0).getNestedIdentity().getOffset(),equalTo(0));
  assertThat(innerHits.getAt(0).getNestedIdentity().getChild().getField().string(),equalTo("remarks"));
  assertThat(innerHits.getAt(0).getNestedIdentity().getChild().getOffset(),equalTo(0));
  response=client().prepareSearch("articles").setQuery(nestedQuery("comments",nestedQuery("comments.remarks",matchQuery("comments.remarks.message","bad")))).addNestedInnerHits("comment","comments",new InnerHitsBuilder.InnerHit().setQuery(nestedQuery("comments.remarks",matchQuery("comments.remarks.message","bad"))).addNestedInnerHits("remark","comments.remarks",new InnerHitsBuilder.InnerHit().setQuery(matchQuery("comments.remarks.message","bad")))).get();
  assertNoFailures(response);
  assertHitCount(response,1);
  assertSearchHit(response,1,hasId("2"));
  assertThat(response.getHits().getAt(0).getInnerHits().size(),equalTo(1));
  innerHits=response.getHits().getAt(0).getInnerHits().get("comment");
  assertThat(innerHits.totalHits(),equalTo(1l));
  assertThat(innerHits.getHits().length,equalTo(1));
  assertThat(innerHits.getAt(0).getId(),equalTo("2"));
  assertThat(innerHits.getAt(0).getNestedIdentity().getField().string(),equalTo("comments"));
  assertThat(innerHits.getAt(0).getNestedIdentity().getOffset(),equalTo(0));
  innerHits=innerHits.getAt(0).getInnerHits().get("remark");
  assertThat(innerHits.totalHits(),equalTo(1l));
  assertThat(innerHits.getHits().length,equalTo(1));
  assertThat(innerHits.getAt(0).getId(),equalTo("2"));
  assertThat(innerHits.getAt(0).getNestedIdentity().getField().string(),equalTo("comments"));
  assertThat(innerHits.getAt(0).getNestedIdentity().getOffset(),equalTo(0));
  assertThat(innerHits.getAt(0).getNestedIdentity().getChild().getField().string(),equalTo("remarks"));
  assertThat(innerHits.getAt(0).getNestedIdentity().getChild().getOffset(),equalTo(0));
}
