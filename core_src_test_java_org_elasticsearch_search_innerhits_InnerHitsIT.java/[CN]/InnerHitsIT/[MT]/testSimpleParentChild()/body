{
  assertAcked(prepareCreate("articles").addMapping("article","title","type=text").addMapping("comment","_parent","type=article","message","type=text,fielddata=true"));
  List<IndexRequestBuilder> requests=new ArrayList<>();
  requests.add(client().prepareIndex("articles","article","1").setSource("title","quick brown fox"));
  requests.add(client().prepareIndex("articles","comment","1").setParent("1").setSource("message","fox eat quick"));
  requests.add(client().prepareIndex("articles","comment","2").setParent("1").setSource("message","fox ate rabbit x y z"));
  requests.add(client().prepareIndex("articles","comment","3").setParent("1").setSource("message","rabbit got away"));
  requests.add(client().prepareIndex("articles","article","2").setSource("title","big gray elephant"));
  requests.add(client().prepareIndex("articles","comment","4").setParent("2").setSource("message","elephant captured"));
  requests.add(client().prepareIndex("articles","comment","5").setParent("2").setSource("message","mice squashed by elephant x"));
  requests.add(client().prepareIndex("articles","comment","6").setParent("2").setSource("message","elephant scared by mice x y"));
  indexRandom(true,requests);
  SearchResponse response=client().prepareSearch("articles").setQuery(hasChildQuery("comment",matchQuery("message","fox"),ScoreMode.None).innerHit(new InnerHitBuilder())).get();
  assertNoFailures(response);
  assertHitCount(response,1);
  assertSearchHit(response,1,hasId("1"));
  assertThat(response.getHits().getAt(0).getShard(),notNullValue());
  assertThat(response.getHits().getAt(0).getInnerHits().size(),equalTo(1));
  SearchHits innerHits=response.getHits().getAt(0).getInnerHits().get("comment");
  assertThat(innerHits.totalHits(),equalTo(2L));
  assertThat(innerHits.getAt(0).getId(),equalTo("1"));
  assertThat(innerHits.getAt(0).type(),equalTo("comment"));
  assertThat(innerHits.getAt(1).getId(),equalTo("2"));
  assertThat(innerHits.getAt(1).type(),equalTo("comment"));
  response=client().prepareSearch("articles").setQuery(hasChildQuery("comment",matchQuery("message","elephant"),ScoreMode.None).innerHit(new InnerHitBuilder())).get();
  assertNoFailures(response);
  assertHitCount(response,1);
  assertSearchHit(response,1,hasId("2"));
  assertThat(response.getHits().getAt(0).getInnerHits().size(),equalTo(1));
  innerHits=response.getHits().getAt(0).getInnerHits().get("comment");
  assertThat(innerHits.totalHits(),equalTo(3L));
  assertThat(innerHits.getAt(0).getId(),equalTo("4"));
  assertThat(innerHits.getAt(0).type(),equalTo("comment"));
  assertThat(innerHits.getAt(1).getId(),equalTo("5"));
  assertThat(innerHits.getAt(1).type(),equalTo("comment"));
  assertThat(innerHits.getAt(2).getId(),equalTo("6"));
  assertThat(innerHits.getAt(2).type(),equalTo("comment"));
  response=client().prepareSearch("articles").setQuery(hasChildQuery("comment",matchQuery("message","fox"),ScoreMode.None).innerHit(new InnerHitBuilder().addDocValueField("message").setHighlightBuilder(new HighlightBuilder().field("message")).setExplain(true).setSize(1).addScriptField("script",new Script("5",ScriptService.ScriptType.INLINE,MockScriptEngine.NAME,Collections.emptyMap())))).get();
  assertNoFailures(response);
  innerHits=response.getHits().getAt(0).getInnerHits().get("comment");
  assertThat(innerHits.getHits().length,equalTo(1));
  assertThat(innerHits.getAt(0).getHighlightFields().get("message").getFragments()[0].string(),equalTo("<em>fox</em> eat quick"));
  assertThat(innerHits.getAt(0).explanation().toString(),containsString("weight(message:fox"));
  assertThat(innerHits.getAt(0).getFields().get("message").getValue().toString(),equalTo("eat"));
  assertThat(innerHits.getAt(0).getFields().get("script").getValue().toString(),equalTo("5"));
}
