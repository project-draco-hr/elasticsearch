{
  ThreadPool threadPool=new ThreadPool(ImmutableSettings.settingsBuilder().put("threadpool.my_pool1.type","cached").put("threadpool.my_pool2.type","fixed").put("threadpool.my_pool2.size","1").put("threadpool.my_pool2.queue_size","1").put("name","testCustomThreadPool").build(),null);
  ThreadPoolInfo groups=threadPool.info();
  boolean foundPool1=false;
  boolean foundPool2=false;
  outer:   for (  ThreadPool.Info info : groups) {
    if ("my_pool1".equals(info.getName())) {
      foundPool1=true;
      assertThat(info.getType(),equalTo("cached"));
    }
 else     if ("my_pool2".equals(info.getName())) {
      foundPool2=true;
      assertThat(info.getType(),equalTo("fixed"));
      assertThat(info.getMin(),equalTo(1));
      assertThat(info.getMax(),equalTo(1));
      assertThat(info.getQueueSize().singles(),equalTo(1l));
    }
 else {
      for (      Field field : Names.class.getFields()) {
        if (info.getName().equalsIgnoreCase(field.getName())) {
          continue outer;
        }
      }
      fail("Unexpected pool name: " + info.getName());
    }
  }
  assertThat(foundPool1,is(true));
  assertThat(foundPool2,is(true));
  Settings settings=ImmutableSettings.builder().put("threadpool.my_pool2.size","10").build();
  threadPool.updateSettings(settings);
  groups=threadPool.info();
  foundPool1=false;
  foundPool2=false;
  outer:   for (  ThreadPool.Info info : groups) {
    if ("my_pool1".equals(info.getName())) {
      foundPool1=true;
      assertThat(info.getType(),equalTo("cached"));
    }
 else     if ("my_pool2".equals(info.getName())) {
      foundPool2=true;
      assertThat(info.getMax(),equalTo(10));
      assertThat(info.getMin(),equalTo(10));
      assertThat(info.getQueueSize().singles(),equalTo(1l));
      assertThat(info.getType(),equalTo("fixed"));
    }
 else {
      for (      Field field : Names.class.getFields()) {
        if (info.getName().equalsIgnoreCase(field.getName())) {
          continue outer;
        }
      }
      fail("Unexpected pool name: " + info.getName());
    }
  }
  assertThat(foundPool1,is(true));
  assertThat(foundPool2,is(true));
  terminate(threadPool);
}
