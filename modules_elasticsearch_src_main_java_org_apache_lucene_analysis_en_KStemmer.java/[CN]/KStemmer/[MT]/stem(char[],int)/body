{
  result=null;
  k=len - 1;
  if ((k <= 1) || (k >= MaxWordLen - 1)) {
    return false;
  }
  DictEntry entry=dict_ht.get(term,0,len);
  if (entry != null) {
    if (entry.root != null) {
      result=entry.root;
      return true;
    }
    return false;
  }
  word.reset();
  word.reserve(len + 10);
  for (int i=0; i < len; i++) {
    char ch=term[i];
    if (!isAlpha(ch))     return false;
    word.unsafeWrite(ch);
  }
  matchedEntry=null;
  while (true) {
    plural();
    if (matched())     break;
    pastTense();
    if (matched())     break;
    aspect();
    if (matched())     break;
    ityEndings();
    if (matched())     break;
    nessEndings();
    if (matched())     break;
    ionEndings();
    if (matched())     break;
    erAndOrEndings();
    if (matched())     break;
    lyEndings();
    if (matched())     break;
    alEndings();
    if (matched())     break;
    entry=wordInDict();
    iveEndings();
    if (matched())     break;
    izeEndings();
    if (matched())     break;
    mentEndings();
    if (matched())     break;
    bleEndings();
    if (matched())     break;
    ismEndings();
    if (matched())     break;
    icEndings();
    if (matched())     break;
    ncyEndings();
    if (matched())     break;
    nceEndings();
    matched();
    break;
  }
  entry=matchedEntry;
  if (entry != null) {
    result=entry.root;
  }
  return true;
}
