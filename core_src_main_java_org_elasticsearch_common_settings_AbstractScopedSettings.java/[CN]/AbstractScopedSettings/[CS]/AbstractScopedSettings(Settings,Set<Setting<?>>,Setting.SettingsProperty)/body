{
  super(settings);
  this.lastSettingsApplied=Settings.EMPTY;
  this.scope=scope;
  Map<String,Setting<?>> complexMatchers=new HashMap<>();
  Map<String,Setting<?>> keySettings=new HashMap<>();
  for (  Setting<?> setting : settingsSet) {
    if (setting.getProperties().contains(scope) == false) {
      throw new IllegalArgumentException("Setting must be a " + scope + " setting but has: "+ setting.getProperties());
    }
    if (isValidKey(setting.getKey()) == false && (setting.isGroupSetting() && isValidGroupKey(setting.getKey())) == false) {
      throw new IllegalArgumentException("illegal settings key: [" + setting.getKey() + "]");
    }
    if (setting.hasComplexMatcher()) {
      complexMatchers.putIfAbsent(setting.getKey(),setting);
    }
 else {
      keySettings.putIfAbsent(setting.getKey(),setting);
    }
  }
  this.complexMatchers=Collections.unmodifiableMap(complexMatchers);
  this.keySettings=Collections.unmodifiableMap(keySettings);
}
