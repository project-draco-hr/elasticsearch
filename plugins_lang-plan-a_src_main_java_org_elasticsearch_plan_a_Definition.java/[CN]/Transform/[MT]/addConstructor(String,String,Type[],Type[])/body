{
  final Struct owner=structs.get(struct);
  if (owner == null) {
    throw new IllegalArgumentException("Owner struct [" + struct + "] not defined for constructor ["+ name+ "].");
  }
  if (!name.matches("^[_a-zA-Z][_a-zA-Z0-9]*$")) {
    throw new IllegalArgumentException("Invalid constructor name [" + name + "] with the struct ["+ owner.name+ "].");
  }
  if (owner.constructors.containsKey(name)) {
    throw new IllegalArgumentException("Duplicate constructor name [" + name + "] found within the struct ["+ owner.name+ "].");
  }
  if (owner.statics.containsKey(name)) {
    throw new IllegalArgumentException("Constructors and functions may not have the same name" + " [" + name + "] within the same struct ["+ owner.name+ "].");
  }
  if (owner.methods.containsKey(name)) {
    throw new IllegalArgumentException("Constructors and methods may not have the same name" + " [" + name + "] within the same struct ["+ owner.name+ "].");
  }
  final Class[] classes=new Class[args.length];
  for (int count=0; count < classes.length; ++count) {
    if (genargs != null) {
      try {
        genargs[count].clazz.asSubclass(args[count].clazz);
      }
 catch (      ClassCastException exception) {
        throw new ClassCastException("Generic argument [" + genargs[count].name + "]"+ " is not a sub class of ["+ args[count].name+ "] in the constructor"+ " ["+ name+ " ] from the struct ["+ owner.name+ "].");
      }
    }
    classes[count]=args[count].clazz;
  }
  final java.lang.reflect.Constructor<?> reflect;
  try {
    reflect=owner.clazz.getConstructor(classes);
  }
 catch (  NoSuchMethodException exception) {
    throw new IllegalArgumentException("Constructor [" + name + "] not found for class"+ " ["+ owner.clazz.getName()+ "] with arguments "+ Arrays.toString(classes)+ ".");
  }
  final org.objectweb.asm.commons.Method asm=org.objectweb.asm.commons.Method.getMethod(reflect);
  final Constructor constructor=new Constructor(name,owner,Arrays.asList(genargs != null ? genargs : args),asm,reflect);
  owner.constructors.put(name,constructor);
}
