{
  int boundPort=randomIntBetween(9000,9100);
  int otherBoundPort=randomIntBetween(9200,9300);
  boolean useProfile=randomBoolean();
  final String profile;
  final Settings settings;
  final Settings profileSettings;
  if (useProfile) {
    profile="some_profile";
    settings=randomBoolean() ? Settings.EMPTY : Settings.builder().put(TransportSettings.PUBLISH_PORT.getKey(),9081).build();
    profileSettings=Settings.builder().put("publish_port",9080).build();
  }
 else {
    profile=TransportSettings.DEFAULT_PROFILE;
    settings=Settings.builder().put(TransportSettings.PUBLISH_PORT.getKey(),9081).build();
    profileSettings=randomBoolean() ? Settings.EMPTY : Settings.builder().put("publish_port",9080).build();
    ;
  }
  int publishPort=resolvePublishPort(profile,settings,profileSettings,randomAddresses(),getByName("127.0.0.2"));
  assertThat("Publish port should be explicitly set",publishPort,equalTo(useProfile ? 9080 : 9081));
  publishPort=resolvePublishPort(profile,Settings.EMPTY,Settings.EMPTY,asList(address("127.0.0.1",boundPort),address("127.0.0.2",otherBoundPort)),getByName("127.0.0.1"));
  assertThat("Publish port should be derived from matched address",publishPort,equalTo(boundPort));
  publishPort=resolvePublishPort(profile,Settings.EMPTY,Settings.EMPTY,asList(address("127.0.0.1",boundPort),address("127.0.0.2",boundPort)),getByName("127.0.0.3"));
  assertThat("Publish port should be derived from unique port of bound addresses",publishPort,equalTo(boundPort));
  try {
    resolvePublishPort(profile,Settings.EMPTY,Settings.EMPTY,asList(address("127.0.0.1",boundPort),address("127.0.0.2",otherBoundPort)),getByName("127.0.0.3"));
    fail("Expected BindTransportException as publish_port not specified and non-unique port of bound addresses");
  }
 catch (  BindTransportException e) {
    assertThat(e.getMessage(),containsString("Failed to auto-resolve publish port"));
  }
  publishPort=resolvePublishPort(profile,Settings.EMPTY,Settings.EMPTY,asList(address("0.0.0.0",boundPort),address("127.0.0.2",otherBoundPort)),getByName("127.0.0.1"));
  assertThat("Publish port should be derived from matching wildcard address",publishPort,equalTo(boundPort));
  if (NetworkUtils.SUPPORTS_V6) {
    publishPort=resolvePublishPort(profile,Settings.EMPTY,Settings.EMPTY,asList(address("0.0.0.0",boundPort),address("127.0.0.2",otherBoundPort)),getByName("::1"));
    assertThat("Publish port should be derived from matching wildcard address",publishPort,equalTo(boundPort));
  }
}
