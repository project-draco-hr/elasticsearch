{
  client.admin().cluster().state(new ClusterStateRequest(),new ActionListener<ClusterStateResponse>(){
    @Override public void onResponse(    ClusterStateResponse response){
      try {
        ClusterState state=response.state();
        JsonBuilder builder=RestJsonBuilder.restJsonBuilder(request);
        builder.startObject();
        builder.startObject("metadata");
        builder.field("max_number_of_shards_per_node",state.metaData().maxNumberOfShardsPerNode());
        builder.startObject("indices");
        for (        IndexMetaData indexMetaData : state.metaData()) {
          builder.startObject(indexMetaData.index());
          builder.startObject("settings");
          for (          Map.Entry<String,String> entry : indexMetaData.settings().getAsMap().entrySet()) {
            builder.field(entry.getKey(),entry.getValue());
          }
          builder.endObject();
          builder.startObject("mappings");
          for (          Map.Entry<String,String> entry : indexMetaData.mappings().entrySet()) {
            builder.startObject(entry.getKey()).field("source",entry.getValue()).endObject();
          }
          builder.endObject();
          builder.endObject();
        }
        builder.endObject();
        builder.endObject();
        builder.startObject("routing_table");
        builder.startObject("indices");
        for (        IndexRoutingTable indexRoutingTable : state.routingTable()) {
          builder.startObject(indexRoutingTable.index());
          builder.startObject("shards");
          for (          IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {
            builder.startArray(Integer.toString(indexShardRoutingTable.shardId().id()));
            for (            ShardRouting shardRouting : indexShardRoutingTable) {
              jsonShardRouting(builder,shardRouting);
            }
            builder.endArray();
          }
          builder.endObject();
          builder.endObject();
        }
        builder.endObject();
        builder.endObject();
        builder.startObject("routing_nodes");
        builder.startArray("unassigned");
        for (        ShardRouting shardRouting : state.readOnlyRoutingNodes().unassigned()) {
          jsonShardRouting(builder,shardRouting);
        }
        builder.endArray();
        builder.startObject("nodes");
        for (        RoutingNode routingNode : state.readOnlyRoutingNodes()) {
          builder.startArray(routingNode.nodeId());
          for (          ShardRouting shardRouting : routingNode) {
            jsonShardRouting(builder,shardRouting);
          }
          builder.endArray();
        }
        builder.endObject();
        builder.endObject();
        builder.endObject();
        channel.sendResponse(new JsonRestResponse(request,RestResponse.Status.OK,builder));
      }
 catch (      Exception e) {
        onFailure(e);
      }
    }
    private void jsonShardRouting(    JsonBuilder builder,    ShardRouting shardRouting) throws IOException {
      builder.startObject().field("state",shardRouting.state()).field("primary",shardRouting.primary()).field("node",shardRouting.currentNodeId()).field("relocating_node",shardRouting.relocatingNodeId()).field("shard",shardRouting.shardId().id()).field("index",shardRouting.shardId().index().name()).endObject();
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new JsonThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
