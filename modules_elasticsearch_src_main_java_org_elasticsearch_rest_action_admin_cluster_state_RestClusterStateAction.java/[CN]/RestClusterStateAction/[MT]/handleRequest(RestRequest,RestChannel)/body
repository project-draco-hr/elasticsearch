{
  final ClusterStateRequest clusterStateRequest=Requests.clusterStateRequest();
  clusterStateRequest.filterNodes(request.paramAsBoolean("filter_nodes",clusterStateRequest.filterNodes()));
  clusterStateRequest.filterRoutingTable(request.paramAsBoolean("filter_routing_table",clusterStateRequest.filterRoutingTable()));
  clusterStateRequest.filterMetaData(request.paramAsBoolean("filter_metadata",clusterStateRequest.filterMetaData()));
  clusterStateRequest.filterBlocks(request.paramAsBoolean("filter_blocks",clusterStateRequest.filterBlocks()));
  clusterStateRequest.filteredIndices(RestActions.splitIndices(request.param("filter_indices",null)));
  client.admin().cluster().state(clusterStateRequest,new ActionListener<ClusterStateResponse>(){
    @Override public void onResponse(    ClusterStateResponse response){
      try {
        ClusterState state=response.state();
        XContentBuilder builder=RestXContentBuilder.restContentBuilder(request);
        builder.startObject();
        builder.field("cluster_name",response.clusterName().value());
        if (!clusterStateRequest.filterNodes()) {
          builder.field("master_node",state.nodes().masterNodeId());
        }
        if (!clusterStateRequest.filterBlocks()) {
          builder.startObject("blocks");
          if (!state.blocks().global().isEmpty()) {
            builder.startObject("global");
            for (            ClusterBlock block : state.blocks().global()) {
              block.toXContent(builder,request);
            }
            builder.endObject();
          }
          if (!state.blocks().indices().isEmpty()) {
            builder.startObject("indices");
            for (            Map.Entry<String,ImmutableSet<ClusterBlock>> entry : state.blocks().indices().entrySet()) {
              builder.startObject(entry.getKey());
              for (              ClusterBlock block : entry.getValue()) {
                block.toXContent(builder,request);
              }
              builder.endObject();
            }
            builder.endObject();
          }
          builder.endObject();
        }
        if (!clusterStateRequest.filterNodes()) {
          builder.startObject("nodes");
          for (          DiscoveryNode node : state.nodes()) {
            builder.startObject(node.id());
            builder.field("name",node.name());
            builder.field("transport_address",node.address().toString());
            builder.endObject();
          }
          builder.endObject();
        }
        if (!clusterStateRequest.filterMetaData()) {
          builder.startObject("metadata");
          builder.startObject("indices");
          for (          IndexMetaData indexMetaData : state.metaData()) {
            builder.startObject(indexMetaData.index());
            builder.startObject("settings");
            Settings settings=settingsFilter.filterSettings(indexMetaData.settings());
            for (            Map.Entry<String,String> entry : settings.getAsMap().entrySet()) {
              builder.field(entry.getKey(),entry.getValue());
            }
            builder.endObject();
            builder.startObject("mappings");
            for (            Map.Entry<String,CompressedString> entry : indexMetaData.mappings().entrySet()) {
              byte[] mappingSource=entry.getValue().uncompressed();
              XContentParser parser=XContentFactory.xContent(mappingSource).createParser(mappingSource);
              Map<String,Object> mapping=parser.map();
              if (mapping.size() == 1 && mapping.containsKey(entry.getKey())) {
                mapping=(Map<String,Object>)mapping.get(entry.getKey());
              }
              builder.field(entry.getKey());
              builder.map(mapping);
            }
            builder.endObject();
            builder.startArray("aliases");
            for (            String alias : indexMetaData.aliases()) {
              builder.value(alias);
            }
            builder.endArray();
            builder.endObject();
          }
          builder.endObject();
          builder.endObject();
        }
        if (!clusterStateRequest.filterRoutingTable()) {
          builder.startObject("routing_table");
          builder.startObject("indices");
          for (          IndexRoutingTable indexRoutingTable : state.routingTable()) {
            builder.startObject(indexRoutingTable.index());
            builder.startObject("shards");
            for (            IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {
              builder.startArray(Integer.toString(indexShardRoutingTable.shardId().id()));
              for (              ShardRouting shardRouting : indexShardRoutingTable) {
                jsonShardRouting(builder,shardRouting);
              }
              builder.endArray();
            }
            builder.endObject();
            builder.endObject();
          }
          builder.endObject();
          builder.endObject();
        }
        if (!clusterStateRequest.filterRoutingTable()) {
          builder.startObject("routing_nodes");
          builder.startArray("unassigned");
          for (          ShardRouting shardRouting : state.readOnlyRoutingNodes().unassigned()) {
            jsonShardRouting(builder,shardRouting);
          }
          builder.endArray();
          builder.startObject("nodes");
          for (          RoutingNode routingNode : state.readOnlyRoutingNodes()) {
            builder.startArray(routingNode.nodeId());
            for (            ShardRouting shardRouting : routingNode) {
              jsonShardRouting(builder,shardRouting);
            }
            builder.endArray();
          }
          builder.endObject();
          builder.endObject();
        }
        builder.endObject();
        channel.sendResponse(new XContentRestResponse(request,RestResponse.Status.OK,builder));
      }
 catch (      Exception e) {
        onFailure(e);
      }
    }
    private void jsonShardRouting(    XContentBuilder builder,    ShardRouting shardRouting) throws IOException {
      builder.startObject().field("state",shardRouting.state()).field("primary",shardRouting.primary()).field("node",shardRouting.currentNodeId()).field("relocating_node",shardRouting.relocatingNodeId()).field("shard",shardRouting.shardId().id()).field("index",shardRouting.shardId().index().name()).endObject();
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
