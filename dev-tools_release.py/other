import datetime
import os
import shutil
import sys
import time
import urllib
import urllib.request
import zipfile
from os.path import dirname, abspath
'\n This tool builds a release from the a given elasticsearch plugin branch.\n\n It is basically a wrapper on top of launch_release.py which:\n\n - tries to get a more recent version of launch_release.py in ...\n - download it if needed\n - launch it passing all arguments to it, like:\n\n   $ python3 dev_tools/release.py --branch master --publish --remote origin\n\n Important options:\n\n   # Dry run\n   $ python3 dev_tools/release.py\n\n   # Dry run without tests\n   python3 dev_tools/release.py --skiptests\n\n   # Release, publish artifacts and announce\n   $ python3 dev_tools/release.py --publish\n\n See full documentation in launch_release.py\n'
env = os.environ
SOURCE_REPO = 'elasticsearch/elasticsearch-plugins-script'
SCRIPT_OBSOLETE_DAYS = 1
IGNORED_FILES = ['.gitignore', 'README.md']
ROOT_DIR = abspath(os.path.join(abspath(dirname(__file__)), '../'))
TARGET_TOOLS_DIR = (ROOT_DIR + '/plugin_tools')
DEV_TOOLS_DIR = (ROOT_DIR + '/dev-tools')
BUILD_RELEASE_FILENAME = 'release.zip'
BUILD_RELEASE_FILE = ((TARGET_TOOLS_DIR + '/') + BUILD_RELEASE_FILENAME)
SOURCE_URL = ('https://github.com/%s/archive/master.zip' % SOURCE_REPO)
try:
    os.mkdir(TARGET_TOOLS_DIR)
    print ('directory %s created' % TARGET_TOOLS_DIR)
except FileExistsError:
    pass
try:
    download = True
    try:
        last_download_time = datetime.datetime.fromtimestamp(os.path.getmtime(BUILD_RELEASE_FILE))
        if ((datetime.datetime.now() - last_download_time).days < SCRIPT_OBSOLETE_DAYS):
            download = False
    except FileNotFoundError:
        pass
    if download:
        urllib.request.urlretrieve(SOURCE_URL, BUILD_RELEASE_FILE)
        with zipfile.ZipFile(BUILD_RELEASE_FILE) as myzip:
            for member in myzip.infolist():
                filename = os.path.basename(member.filename)
                if (not filename):
                    continue
                if (filename in IGNORED_FILES):
                    continue
                source = myzip.open(member.filename)
                target = open(os.path.join(TARGET_TOOLS_DIR, filename), 'wb')
                with source:
                    with target:
                        shutil.copyfileobj(source, target)
                        date_time = time.mktime((member.date_time + (0, 0, (-1))))
                        os.utime(os.path.join(TARGET_TOOLS_DIR, filename), (date_time, date_time))
        print ('plugin-tools updated from %s' % SOURCE_URL)
except urllib.error.HTTPError:
    pass
source_time = os.path.getmtime((TARGET_TOOLS_DIR + '/release.py'))
repo_time = os.path.getmtime((DEV_TOOLS_DIR + '/release.py'))
if (source_time > repo_time):
    input('release.py needs an update. Press a key to update it...')
    shutil.copyfile((TARGET_TOOLS_DIR + '/release.py'), (DEV_TOOLS_DIR + '/release.py'))
try:
    PYTHON = 'python'
    os.system('python3 --version > /dev/null 2>&1')
    PYTHON = 'python3'
except RuntimeError:
    pass
release_args = ''
for x in range(1, len(sys.argv)):
    release_args += (' ' + sys.argv[x])
os.system(('%s %s/build_release.py %s' % (PYTHON, TARGET_TOOLS_DIR, release_args)))
