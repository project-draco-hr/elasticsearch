{
  Edge any=edge;
  while (any.coordinate.x == +DATELINE || any.coordinate.x == -DATELINE) {
    if ((any=any.next) == edge) {
      break;
    }
  }
  double shiftOffset=any.coordinate.x > DATELINE ? DATELINE : (any.coordinate.x < -DATELINE ? -DATELINE : 0);
  if (debugEnabled()) {
    LOGGER.debug("shift: {[]}",shiftOffset);
  }
  int length=0, connectedComponents=0;
  int splitIndex=1;
  Edge current=edge;
  Edge prev=edge;
  HashMap<Coordinate,Pair<Edge,Edge>> visitedEdge=new HashMap<>();
  do {
    current.coordinate=shift(current.coordinate,shiftOffset);
    current.component=id;
    if (edges != null) {
      if (visitedEdge.containsKey(current.coordinate)) {
        if (connectedComponents > 0 && current.next != edge) {
          throw new InvalidShapeException("Shape contains more than one shared point");
        }
        final int visitID=-id;
        Edge firstAppearance=visitedEdge.get(current.coordinate).getRight();
        Edge temp=firstAppearance.next;
        firstAppearance.next=current.next;
        current.next=temp;
        current.component=visitID;
        do {
          prev.component=visitID;
          prev=visitedEdge.get(prev.coordinate).getLeft();
          ++splitIndex;
        }
 while (!current.coordinate.equals(prev.coordinate));
        ++connectedComponents;
      }
 else {
        visitedEdge.put(current.coordinate,Pair.of(prev,current));
      }
      edges.add(current);
      prev=current;
    }
    length++;
  }
 while (connectedComponents == 0 && (current=current.next) != edge);
  return (splitIndex != 1) ? length - splitIndex : length;
}
