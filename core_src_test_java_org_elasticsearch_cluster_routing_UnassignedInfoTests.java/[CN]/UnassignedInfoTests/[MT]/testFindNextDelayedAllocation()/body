{
  MockAllocationService allocation=createAllocationService(Settings.EMPTY,new DelayedShardsMockGatewayAllocator());
  final long baseTime=System.nanoTime();
  allocation.setNanoTimeOverride(baseTime);
  final TimeValue delayTest1=TimeValue.timeValueMillis(randomIntBetween(1,200));
  final TimeValue delayTest2=TimeValue.timeValueMillis(randomIntBetween(1,200));
  final long expectMinDelaySettingsNanos=Math.min(delayTest1.nanos(),delayTest2.nanos());
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test1").settings(settings(Version.CURRENT).put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING,delayTest1)).numberOfShards(1).numberOfReplicas(1)).put(IndexMetaData.builder("test2").settings(settings(Version.CURRENT).put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING,delayTest2)).numberOfShards(1).numberOfReplicas(1)).build();
  ClusterState clusterState=ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(RoutingTable.builder().addAsNew(metaData.index("test1")).addAsNew(metaData.index("test2")).build()).build();
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1")).put(newNode("node2"))).build();
  clusterState=ClusterState.builder(clusterState).routingResult(allocation.reroute(clusterState,"reroute")).build();
  assertThat(UnassignedInfo.getNumberOfDelayedUnassigned(clusterState),equalTo(0));
  clusterState=ClusterState.builder(clusterState).routingResult(allocation.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING))).build();
  clusterState=ClusterState.builder(clusterState).routingResult(allocation.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING))).build();
  assertThat(clusterState.getRoutingNodes().unassigned().size() > 0,equalTo(false));
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove("node2")).build();
  clusterState=ClusterState.builder(clusterState).routingResult(allocation.reroute(clusterState,"reroute")).build();
  final long delta=randomBoolean() ? 0 : randomInt((int)expectMinDelaySettingsNanos);
  if (delta > 0) {
    allocation.setNanoTimeOverride(baseTime + delta);
    clusterState=ClusterState.builder(clusterState).routingResult(allocation.reroute(clusterState,"time moved")).build();
  }
  long minDelaySetting=UnassignedInfo.findSmallestDelayedAllocationSettingNanos(Settings.EMPTY,clusterState);
  assertThat(minDelaySetting,equalTo(expectMinDelaySettingsNanos));
  long nextDelay=UnassignedInfo.findNextDelayedAllocationIn(clusterState);
  assertThat(nextDelay,equalTo(expectMinDelaySettingsNanos - delta));
}
