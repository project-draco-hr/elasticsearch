{
  final ExpressionMetadata binaryemd=metadata.getExpressionMetadata(ctx);
  final Object postConst=binaryemd.postConst;
  final Object preConst=binaryemd.preConst;
  final Branch branch=utility.getBranch(ctx);
  if (postConst != null) {
    utility.writeConstant(ctx,postConst);
  }
 else   if (preConst != null) {
    if (branch == null) {
      utility.writeConstant(ctx,preConst);
      caster.checkWriteCast(binaryemd);
    }
 else {
      throw new IllegalStateException(WriterUtility.error(ctx) + "Unexpected state.");
    }
  }
 else   if (binaryemd.from.sort == Sort.STRING) {
    final boolean marked=utility.containsStrings(ctx);
    if (!marked) {
      utility.writeNewStrings();
    }
    final ExpressionContext exprctx0=ctx.expression(0);
    final ExpressionMetadata expremd0=metadata.getExpressionMetadata(exprctx0);
    utility.addStrings(exprctx0);
    writer.visit(exprctx0);
    if (utility.containsStrings(exprctx0)) {
      utility.writeAppendStrings(expremd0.from.sort);
      utility.removeStrings(exprctx0);
    }
    final ExpressionContext exprctx1=ctx.expression(1);
    final ExpressionMetadata expremd1=metadata.getExpressionMetadata(exprctx1);
    utility.addStrings(exprctx1);
    writer.visit(exprctx1);
    if (utility.containsStrings(exprctx1)) {
      utility.writeAppendStrings(expremd1.from.sort);
      utility.removeStrings(exprctx1);
    }
    if (marked) {
      utility.removeStrings(ctx);
    }
 else {
      utility.writeToStrings();
    }
    caster.checkWriteCast(binaryemd);
  }
 else {
    final ExpressionContext exprctx0=ctx.expression(0);
    final ExpressionContext exprctx1=ctx.expression(1);
    writer.visit(exprctx0);
    writer.visit(exprctx1);
    final Type type=binaryemd.from;
    if (ctx.MUL() != null)     utility.writeBinaryInstruction(ctx,type,MUL);
 else     if (ctx.DIV() != null)     utility.writeBinaryInstruction(ctx,type,DIV);
 else     if (ctx.REM() != null)     utility.writeBinaryInstruction(ctx,type,REM);
 else     if (ctx.ADD() != null)     utility.writeBinaryInstruction(ctx,type,ADD);
 else     if (ctx.SUB() != null)     utility.writeBinaryInstruction(ctx,type,SUB);
 else     if (ctx.LSH() != null)     utility.writeBinaryInstruction(ctx,type,LSH);
 else     if (ctx.USH() != null)     utility.writeBinaryInstruction(ctx,type,USH);
 else     if (ctx.RSH() != null)     utility.writeBinaryInstruction(ctx,type,RSH);
 else     if (ctx.BWAND() != null)     utility.writeBinaryInstruction(ctx,type,BWAND);
 else     if (ctx.BWXOR() != null)     utility.writeBinaryInstruction(ctx,type,BWXOR);
 else     if (ctx.BWOR() != null)     utility.writeBinaryInstruction(ctx,type,BWOR);
 else {
      throw new IllegalStateException(WriterUtility.error(ctx) + "Unexpected state.");
    }
    caster.checkWriteCast(binaryemd);
  }
  utility.checkWriteBranch(ctx);
}
