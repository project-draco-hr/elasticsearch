{
  try {
    Path translogFile=getResourcePath("/org/elasticsearch/index/translog/translog-v1-corrupted-magic.binary");
    assertThat("test file should exist",Files.exists(translogFile),equalTo(true));
    TranslogStream stream=TranslogStreams.translogStreamFor(translogFile);
    fail("should have thrown an exception about the header being corrupt");
  }
 catch (  TranslogCorruptedException e) {
    assertThat("translog corruption from header: " + e.getMessage(),e.getMessage().contains("translog looks like version 1 or later, but has corrupted header"),equalTo(true));
  }
  try {
    Path translogFile=getResourcePath("/org/elasticsearch/index/translog/translog-invalid-first-byte.binary");
    assertThat("test file should exist",Files.exists(translogFile),equalTo(true));
    TranslogStream stream=TranslogStreams.translogStreamFor(translogFile);
    fail("should have thrown an exception about the header being corrupt");
  }
 catch (  TranslogCorruptedException e) {
    assertThat("translog corruption from header: " + e.getMessage(),e.getMessage().contains("Invalid first byte in translog file, got: 1, expected 0x00 or 0x3f"),equalTo(true));
  }
  try {
    Path translogFile=getResourcePath("/org/elasticsearch/index/translog/translog-v1-corrupted-body.binary");
    assertThat("test file should exist",Files.exists(translogFile),equalTo(true));
    TranslogStream stream=TranslogStreams.translogStreamFor(translogFile);
    try (StreamInput in=stream.openInput(translogFile)){
      while (true) {
        try {
          stream.read(in);
        }
 catch (        EOFException e) {
          break;
        }
      }
    }
     fail("should have thrown an exception about the body being corrupted");
  }
 catch (  TranslogCorruptedException e) {
    assertThat("translog corruption from body: " + e.getMessage(),e.getMessage().contains("translog stream is corrupted"),equalTo(true));
  }
}
