{
  XContentParser parser=parseContext.parser();
  boolean cache=true;
  CacheKeyFilter.Key cacheKey=null;
  String fieldName=null;
  String value=null;
  String filterName=null;
  String currentFieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      fieldName=currentFieldName;
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          currentFieldName=parser.currentName();
        }
 else {
          if ("term".equals(currentFieldName)) {
            value=parser.text();
          }
 else           if ("value".equals(currentFieldName)) {
            value=parser.text();
          }
 else           if ("_name".equals(currentFieldName)) {
            filterName=parser.text();
          }
 else           if ("_cache".equals(currentFieldName)) {
            cache=parser.booleanValue();
          }
 else           if ("_cache_key".equals(currentFieldName) || "_cacheKey".equals(currentFieldName)) {
            cacheKey=new CacheKeyFilter.Key(parser.text());
          }
 else {
            throw new QueryParsingException(parseContext.index(),"[term] filter does not support [" + currentFieldName + "]");
          }
        }
      }
    }
 else     if (token.isValue()) {
      if ("_name".equals(currentFieldName)) {
        filterName=parser.text();
      }
 else       if ("_cache".equals(currentFieldName)) {
        cache=parser.booleanValue();
      }
 else       if ("_cache_key".equals(currentFieldName) || "_cacheKey".equals(currentFieldName)) {
        cacheKey=new CacheKeyFilter.Key(parser.text());
      }
 else {
        fieldName=currentFieldName;
        value=parser.text();
      }
    }
  }
  if (fieldName == null) {
    throw new QueryParsingException(parseContext.index(),"No field specified for term filter");
  }
  if (value == null) {
    throw new QueryParsingException(parseContext.index(),"No value specified for term filter");
  }
  Filter filter=null;
  MapperService.SmartNameFieldMappers smartNameFieldMappers=parseContext.smartFieldMappers(fieldName);
  if (smartNameFieldMappers != null && smartNameFieldMappers.hasMapper()) {
    if (smartNameFieldMappers.explicitTypeInNameWithDocMapper()) {
      String[] previousTypes=QueryParseContext.setTypesWithPrevious(new String[]{smartNameFieldMappers.docMapper().type()});
      try {
        filter=smartNameFieldMappers.mapper().termFilter(value,parseContext);
      }
  finally {
        QueryParseContext.setTypes(previousTypes);
      }
    }
 else {
      filter=smartNameFieldMappers.mapper().termFilter(value,parseContext);
    }
  }
  if (filter == null) {
    filter=new TermFilter(new Term(fieldName,value));
  }
  if (cache) {
    filter=parseContext.cacheFilter(filter,cacheKey);
  }
  filter=wrapSmartNameFilter(filter,smartNameFieldMappers,parseContext);
  if (filterName != null) {
    parseContext.addNamedFilter(filterName,filter);
  }
  return filter;
}
