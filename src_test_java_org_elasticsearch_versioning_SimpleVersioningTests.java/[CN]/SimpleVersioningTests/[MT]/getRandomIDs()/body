{
  IDSource ids;
  final Random random=getRandom();
switch (random.nextInt(6)) {
case 0:
    if (VERBOSE) {
      System.out.println("TEST: use random simple ids");
    }
  ids=new IDSource(){
    @Override public String next(){
      return TestUtil.randomSimpleString(random);
    }
  }
;
break;
case 1:
if (VERBOSE) {
System.out.println("TEST: use random realistic unicode ids");
}
ids=new IDSource(){
@Override public String next(){
return TestUtil.randomRealisticUnicodeString(random);
}
}
;
break;
case 2:
if (VERBOSE) {
System.out.println("TEST: use seuquential ids");
}
ids=new IDSource(){
int upto;
@Override public String next(){
return Integer.toString(upto++);
}
}
;
break;
case 3:
if (VERBOSE) {
System.out.println("TEST: use zero-pad seuquential ids");
}
ids=new IDSource(){
final int radix=TestUtil.nextInt(random,Character.MIN_RADIX,Character.MAX_RADIX);
final String zeroPad=String.format(Locale.ROOT,"%0" + TestUtil.nextInt(random,4,20) + "d",0);
int upto;
@Override public String next(){
String s=Integer.toString(upto++);
return zeroPad.substring(zeroPad.length() - s.length()) + s;
}
}
;
break;
case 4:
if (VERBOSE) {
System.out.println("TEST: use random long ids");
}
ids=new IDSource(){
final int radix=TestUtil.nextInt(random,Character.MIN_RADIX,Character.MAX_RADIX);
int upto;
@Override public String next(){
return Long.toString(random.nextLong() & 0x3ffffffffffffffL,radix);
}
}
;
break;
case 5:
if (VERBOSE) {
System.out.println("TEST: use zero-pad random long ids");
}
ids=new IDSource(){
final int radix=TestUtil.nextInt(random,Character.MIN_RADIX,Character.MAX_RADIX);
final String zeroPad=String.format(Locale.ROOT,"%015d",0);
int upto;
@Override public String next(){
return Long.toString(random.nextLong() & 0x3ffffffffffffffL,radix);
}
}
;
break;
default :
throw new AssertionError();
}
return ids;
}
