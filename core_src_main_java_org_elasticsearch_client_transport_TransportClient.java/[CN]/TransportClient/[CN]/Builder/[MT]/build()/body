{
  Tuple<Settings,Environment> tuple=InternalSettingsPreparer.prepareSettings(settings,loadConfigSettings);
  Settings settings=settingsBuilder().put(NettyTransport.PING_SCHEDULE,"5s").put(tuple.v1()).put("network.server",false).put("node.client",true).put(CLIENT_TYPE_SETTING,CLIENT_TYPE).build();
  Environment environment=tuple.v2();
  PluginsService pluginsService=new PluginsService(settings,tuple.v2(),pluginClasses);
  this.settings=pluginsService.updatedSettings();
  Version version=Version.CURRENT;
  final ThreadPool threadPool=new ThreadPool(settings);
  boolean success=false;
  try {
    ModulesBuilder modules=new ModulesBuilder();
    modules.add(new Version.Module(version));
    modules.add(new PluginsModule(this.settings,pluginsService));
    modules.add(new EnvironmentModule(environment));
    modules.add(new SettingsModule(this.settings));
    modules.add(new NetworkModule());
    modules.add(new ClusterNameModule(this.settings));
    modules.add(new ThreadPoolModule(threadPool));
    modules.add(new TransportModule(this.settings));
    modules.add(new SearchModule(this.settings){
      @Override protected void configure(){
      }
    }
);
    modules.add(new ActionModule(true));
    modules.add(new ClientTransportModule());
    modules.add(new CircuitBreakerModule(this.settings));
    Injector injector=modules.createInjector();
    injector.getInstance(TransportService.class).start();
    TransportClient transportClient=new TransportClient(injector);
    success=true;
    return transportClient;
  }
  finally {
    if (!success) {
      ThreadPool.terminate(threadPool,10,TimeUnit.SECONDS);
    }
  }
}
