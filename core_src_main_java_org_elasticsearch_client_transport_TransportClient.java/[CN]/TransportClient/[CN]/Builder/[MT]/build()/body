{
  final PluginsService pluginsService=newPluginService(providedSettings);
  final Settings settings=pluginsService.updatedSettings();
  Version version=Version.CURRENT;
  final ThreadPool threadPool=new ThreadPool(settings);
  final NetworkService networkService=new NetworkService(settings);
  final SettingsFilter settingsFilter=new SettingsFilter(settings);
  NamedWriteableRegistry namedWriteableRegistry=new NamedWriteableRegistry();
  boolean success=false;
  try {
    ModulesBuilder modules=new ModulesBuilder();
    modules.add(new Version.Module(version));
    for (    Module pluginModule : pluginsService.nodeModules()) {
      modules.add(pluginModule);
    }
    modules.add(new PluginsModule(pluginsService));
    modules.add(new SettingsModule(settings,settingsFilter));
    modules.add(new NetworkModule(networkService,settings,true,namedWriteableRegistry));
    modules.add(new ClusterNameModule(settings));
    modules.add(new ThreadPoolModule(threadPool));
    modules.add(new SearchModule(settings,namedWriteableRegistry){
      @Override protected void configure(){
      }
    }
);
    modules.add(new ActionModule(false,true));
    modules.add(new CircuitBreakerModule(settings));
    pluginsService.processModules(modules);
    Injector injector=modules.createInjector();
    injector.getInstance(TransportService.class).start();
    TransportClient transportClient=new TransportClient(injector);
    success=true;
    return transportClient;
  }
  finally {
    if (!success) {
      ThreadPool.terminate(threadPool,10,TimeUnit.SECONDS);
    }
  }
}
