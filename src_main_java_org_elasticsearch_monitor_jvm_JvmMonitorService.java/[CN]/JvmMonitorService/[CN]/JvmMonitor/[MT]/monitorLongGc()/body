{
  seq++;
  JvmStats currentJvmStats=jvmStats();
  for (int i=0; i < currentJvmStats.gc().collectors().length; i++) {
    GarbageCollector gc=currentJvmStats.gc().collectors()[i];
    GarbageCollector prevGc=lastJvmStats.gc.collectors[i];
    long collections=gc.collectionCount - prevGc.collectionCount;
    if (collections == 0) {
      continue;
    }
    long collectionTime=gc.collectionTime - prevGc.collectionTime;
    if (collectionTime == 0) {
      continue;
    }
    GcThreshold gcThreshold=gcThresholds.get(gc.name());
    if (gcThreshold == null) {
      gcThreshold=gcThresholds.get("default");
    }
    if (gc.lastGc() != null && prevGc.lastGc() != null) {
      GarbageCollector.LastGc lastGc=gc.lastGc();
      if (lastGc.startTime == prevGc.lastGc().startTime()) {
        continue;
      }
      if (lastGc.duration().hoursFrac() > 1) {
        continue;
      }
      if (lastGc.duration().millis() > gcThreshold.warnThreshold) {
        logger.warn("[last_gc][{}][{}][{}] duration [{}], collections [{}], total [{}]/[{}], reclaimed [{}], leaving [{}][{}]/[{}]",gc.name(),seq,gc.getCollectionCount(),lastGc.duration(),collections,TimeValue.timeValueMillis(collectionTime),gc.collectionTime(),lastGc.reclaimed(),lastGc.afterUsed(),lastGc.max());
      }
 else       if (lastGc.duration().millis() > gcThreshold.infoThreshold) {
        logger.info("[last_gc][{}][{}][{}] duration [{}], collections [{}], total [{}]/[{}], reclaimed [{}], leaving [{}]/[{}]",gc.name(),seq,gc.getCollectionCount(),lastGc.duration(),collections,TimeValue.timeValueMillis(collectionTime),gc.collectionTime(),lastGc.reclaimed(),lastGc.afterUsed(),lastGc.max());
      }
 else       if (lastGc.duration().millis() > gcThreshold.debugThreshold && logger.isDebugEnabled()) {
        logger.debug("[last_gc][{}][{}][{}] duration [{}], collections [{}], total [{}]/[{}], reclaimed [{}], leaving [{}]/[{}]",gc.name(),seq,gc.getCollectionCount(),lastGc.duration(),collections,TimeValue.timeValueMillis(collectionTime),gc.collectionTime(),lastGc.reclaimed(),lastGc.afterUsed(),lastGc.max());
      }
    }
    long avgCollectionTime=collectionTime / collections;
    if (avgCollectionTime > gcThreshold.warnThreshold) {
      logger.warn("[gc][{}][{}][{}] duration [{}], collections [{}]/[{}], total [{}]/[{}], memory [{}]->[{}]/[{}], all_pools {}",gc.name(),seq,gc.collectionCount(),TimeValue.timeValueMillis(collectionTime),collections,TimeValue.timeValueMillis(currentJvmStats.timestamp() - lastJvmStats.timestamp()),TimeValue.timeValueMillis(collectionTime),gc.collectionTime(),lastJvmStats.mem().heapUsed(),currentJvmStats.mem().heapUsed(),JvmInfo.jvmInfo().mem().heapMax(),buildPools(lastJvmStats,currentJvmStats));
    }
 else     if (avgCollectionTime > gcThreshold.infoThreshold) {
      logger.info("[gc][{}][{}][{}] duration [{}], collections [{}]/[{}], total [{}]/[{}], memory [{}]->[{}]/[{}], all_pools {}",gc.name(),seq,gc.collectionCount(),TimeValue.timeValueMillis(collectionTime),collections,TimeValue.timeValueMillis(currentJvmStats.timestamp() - lastJvmStats.timestamp()),TimeValue.timeValueMillis(collectionTime),gc.collectionTime(),lastJvmStats.mem().heapUsed(),currentJvmStats.mem().heapUsed(),JvmInfo.jvmInfo().mem().heapMax(),buildPools(lastJvmStats,currentJvmStats));
    }
 else     if (avgCollectionTime > gcThreshold.debugThreshold && logger.isDebugEnabled()) {
      logger.debug("[gc][{}][{}][{}] duration [{}], collections [{}]/[{}], total [{}]/[{}], memory [{}]->[{}]/[{}], all_pools {}",gc.name(),seq,gc.collectionCount(),TimeValue.timeValueMillis(collectionTime),collections,TimeValue.timeValueMillis(currentJvmStats.timestamp() - lastJvmStats.timestamp()),TimeValue.timeValueMillis(collectionTime),gc.collectionTime(),lastJvmStats.mem().heapUsed(),currentJvmStats.mem().heapUsed(),JvmInfo.jvmInfo().mem().heapMax(),buildPools(lastJvmStats,currentJvmStats));
    }
  }
  lastJvmStats=currentJvmStats;
}
