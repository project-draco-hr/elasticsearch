{
  Builder builder=ImmutableSettings.builder();
  builder.put("index.analysis.analyzer.synonym.tokenizer","whitespace");
  builder.putArray("index.analysis.analyzer.synonym.filter","synonym","lowercase");
  builder.put("index.analysis.filter.synonym.type","synonym");
  builder.putArray("index.analysis.filter.synonym.synonyms","quick => fast");
  assertAcked(client().admin().indices().prepareCreate("test").setSettings(builder.build()).addMapping("type1",type1TermVectorMapping()).addMapping("type2","_all","store=yes,termVector=with_positions_offsets","field4","type=string,term_vector=with_positions_offsets,analyzer=synonym","field3","type=string,analyzer=synonym"));
  ensureGreen();
  client().prepareIndex("test","type1","0").setSource("field0","The quick brown fox jumps over the lazy dog","field1","The quick brown fox jumps over the lazy dog").get();
  client().prepareIndex("test","type1","1").setSource("field1","The quick browse button is a fancy thing, right bro?").get();
  refresh();
  logger.info("--> highlighting and searching on field0");
  SearchSourceBuilder source=searchSource().query(matchPhrasePrefixQuery("field0","quick bro")).from(0).size(60).explain(true).highlight(highlight().field("field0").order("score").preTags("<x>").postTags("</x>"));
  SearchResponse searchResponse=client().search(searchRequest("test").source(source).searchType(QUERY_THEN_FETCH)).actionGet();
  assertHighlight(searchResponse,0,"field0",0,1,equalTo("The <x>quick</x> <x>brown</x> fox jumps over the lazy dog"));
  logger.info("--> highlighting and searching on field1");
  source=searchSource().query(matchPhrasePrefixQuery("field1","quick bro")).from(0).size(60).explain(true).highlight(highlight().field("field1").order("score").preTags("<x>").postTags("</x>"));
  searchResponse=client().search(searchRequest("test").source(source).searchType(QUERY_THEN_FETCH)).actionGet();
  assertHighlight(searchResponse,0,"field1",0,1,equalTo("The <x>quick browse</x> button is a fancy thing, right bro?"));
  assertHighlight(searchResponse,1,"field1",0,1,equalTo("The <x>quick brown</x> fox jumps over the lazy dog"));
  client().prepareIndex("test","type2","0").setSource("field4","The quick brown fox jumps over the lazy dog","field3","The quick brown fox jumps over the lazy dog").get();
  client().prepareIndex("test","type2","1").setSource("field4","The quick browse button is a fancy thing, right bro?").get();
  client().prepareIndex("test","type2","2").setSource("field4","a quick fast blue car").get();
  refresh();
  source=searchSource().postFilter(typeFilter("type2")).query(matchPhrasePrefixQuery("field3","fast bro")).from(0).size(60).explain(true).highlight(highlight().field("field3").order("score").preTags("<x>").postTags("</x>"));
  searchResponse=client().search(searchRequest("test").source(source).searchType(QUERY_THEN_FETCH)).actionGet();
  assertHighlight(searchResponse,0,"field3",0,1,equalTo("The <x>quick</x> <x>brown</x> fox jumps over the lazy dog"));
  logger.info("--> highlighting and searching on field4");
  source=searchSource().postFilter(typeFilter("type2")).query(matchPhrasePrefixQuery("field4","the fast bro")).from(0).size(60).explain(true).highlight(highlight().field("field4").order("score").preTags("<x>").postTags("</x>"));
  searchResponse=client().search(searchRequest("test").source(source).searchType(QUERY_THEN_FETCH)).actionGet();
  assertHighlight(searchResponse,0,"field4",0,1,equalTo("<x>The quick browse</x> button is a fancy thing, right bro?"));
  assertHighlight(searchResponse,1,"field4",0,1,equalTo("<x>The quick brown</x> fox jumps over the lazy dog"));
  logger.info("--> highlighting and searching on field4");
  source=searchSource().postFilter(typeFilter("type2")).query(matchPhrasePrefixQuery("field4","a fast quick blue ca")).from(0).size(60).explain(true).highlight(highlight().field("field4").order("score").preTags("<x>").postTags("</x>"));
  searchResponse=client().search(searchRequest("test").source(source).searchType(QUERY_THEN_FETCH)).actionGet();
  assertHighlight(searchResponse,0,"field4",0,1,equalTo("<x>a quick fast blue car</x>"));
}
