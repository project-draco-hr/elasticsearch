{
  assertAcked(prepareCreate("test").addMapping("type1",XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("foo").field("type","multi_field").startObject("fields").startObject("foo").field("type","string").field("termVector","with_positions_offsets").field("store","yes").field("analyzer","english").endObject().startObject("plain").field("type","string").field("termVector","with_positions_offsets").field("analyzer","standard").endObject().endObject().endObject().startObject("bar").field("type","multi_field").startObject("fields").startObject("bar").field("type","string").field("termVector","with_positions_offsets").field("store","yes").field("analyzer","english").endObject().startObject("plain").field("type","string").field("termVector","with_positions_offsets").field("analyzer","standard").endObject().endObject().endObject().endObject()));
  ensureGreen();
  index("test","type1","1","foo","running with scissors");
  index("test","type1","2","foo","cat cat junk junk junk junk junk junk junk cats junk junk","bar","cat cat junk junk junk junk junk junk junk cats junk junk");
  index("test","type1","3","foo","weird","bar","result");
  refresh();
  Field fooField=new Field("foo").numOfFragments(1).order("score").fragmentSize(25).highlighterType("fvh").requireFieldMatch(requireFieldMatch);
  Field barField=new Field("bar").numOfFragments(1).order("score").fragmentSize(25).highlighterType("fvh").requireFieldMatch(requireFieldMatch);
  SearchRequestBuilder req=client().prepareSearch("test").addHighlightedField(fooField);
  SearchResponse resp=req.setQuery(queryString("running scissors").field("foo")).get();
  assertHighlight(resp,0,"foo",0,equalTo("<em>running</em> with <em>scissors</em>"));
  resp=req.setQuery(queryString("foo.plain:running scissors").field("foo")).get();
  assertHighlight(resp,0,"foo",0,equalTo("running with <em>scissors</em>"));
  fooField.matchedFields("foo","foo.plain");
  resp=req.setQuery(queryString("running scissors").field("foo")).get();
  assertHighlight(resp,0,"foo",0,equalTo("<em>running</em> with <em>scissors</em>"));
  resp=req.setQuery(queryString("foo.plain:running scissors").field("foo")).get();
  assertHighlight(resp,0,"foo",0,equalTo("<em>running</em> with <em>scissors</em>"));
  fooField.matchedFields("foo.plain");
  resp=req.setQuery(queryString("foo.plain:running scissors").field("foo")).get();
  assertHighlight(resp,0,"foo",0,equalTo("<em>running</em> with scissors"));
  fooField.matchedFields("foo","foo.plain");
  resp=req.setQuery(queryString("foo.plain:running^5 scissors").field("foo")).get();
  assertHighlight(resp,0,"foo",0,equalTo("<em>running</em> with <em>scissors</em>"));
  resp=req.setQuery(queryString("foo.plain:running foo.plain:scissors").field("foo")).get();
  assertHighlight(resp,0,"foo",0,equalTo("<em>running</em> with <em>scissors</em>"));
  resp=req.setQuery(queryString("running scissors").field("foo.plain")).get();
  assertHighlight(resp,0,"foo",0,equalTo("<em>running</em> with <em>scissors</em>"));
  resp=req.setQuery(queryString("run foo.plain:running^5 scissors").field("foo")).get();
  assertHighlight(resp,0,"foo",0,equalTo("<em>running</em> with <em>scissors</em>"));
  resp=req.setQuery(queryString("cats foo.plain:cats^5").field("foo")).get();
  assertHighlight(resp,0,"foo",0,equalTo("junk junk <em>cats</em> junk junk"));
  resp=req.setQuery(queryString("cats").field("foo").field("foo.plain^5")).get();
  assertHighlight(resp,0,"foo",0,equalTo("junk junk <em>cats</em> junk junk"));
  QueryBuilder twoFieldsQuery=queryString("cats").field("foo").field("foo.plain^5").field("bar").field("bar.plain^5");
  resp=req.setQuery(twoFieldsQuery).addHighlightedField(barField).get();
  assertHighlight(resp,0,"foo",0,equalTo("junk junk <em>cats</em> junk junk"));
  assertHighlight(resp,0,"bar",0,equalTo("<em>cat</em> <em>cat</em> junk junk junk junk"));
  barField.matchedFields("bar","bar.plain");
  resp=req.get();
  assertHighlight(resp,0,"foo",0,equalTo("junk junk <em>cats</em> junk junk"));
  assertHighlight(resp,0,"bar",0,equalTo("junk junk <em>cats</em> junk junk"));
  barField.matchedFields("bar","candy");
  resp=req.get();
  assertHighlight(resp,0,"foo",0,equalTo("junk junk <em>cats</em> junk junk"));
  assertHighlight(resp,0,"bar",0,equalTo("<em>cat</em> <em>cat</em> junk junk junk junk"));
  barField.matchedFields("bar","foo.plain");
  resp=req.setQuery(queryString("running scissors").field("foo.plain").field("bar")).get();
  assertHighlight(resp,0,"foo",0,equalTo("<em>running</em> with <em>scissors</em>"));
  assertThat(resp.getHits().getAt(0).getHighlightFields(),not(hasKey("bar")));
  fooField.matchedFields("bar.plain");
  resp=req.setQuery(queryString("running scissors").field("foo").field("foo.plain").field("bar").field("bar.plain")).get();
  assertThat(resp.getHits().getAt(0).getHighlightFields(),not(hasKey("foo")));
  fooField.matchedFields("foo","bar.plain");
  resp=req.setQuery(queryString("running scissors").field("foo").field("foo.plain").field("bar").field("bar.plain")).get();
  assertHighlight(resp,0,"foo",0,equalTo("<em>running</em> with <em>scissors</em>"));
  assertThat(resp.getHits().getAt(0).getHighlightFields(),not(hasKey("bar")));
  resp=req.setQuery(queryString("weird").field("foo").field("foo.plain").field("bar").field("bar.plain")).get();
  assertHighlight(resp,0,"foo",0,equalTo("<em>weird</em>"));
  assertHighlight(resp,0,"bar",0,equalTo("<em>resul</em>t"));
  assertFailures(req.setQuery(queryString("result").field("foo").field("foo.plain").field("bar").field("bar.plain")),RestStatus.INTERNAL_SERVER_ERROR,containsString("String index out of range"));
}
