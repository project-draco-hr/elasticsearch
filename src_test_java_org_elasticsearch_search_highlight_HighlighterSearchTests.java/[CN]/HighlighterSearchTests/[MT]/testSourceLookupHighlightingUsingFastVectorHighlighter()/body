{
  assertAcked(client().admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards",2)).addMapping("type1",jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("title").field("type","string").field("store","no").field("term_vector","with_positions_offsets").endObject().startObject("attachments").startObject("properties").startObject("body").field("type","string").field("store","no").field("term_vector","with_positions_offsets").endObject().endObject().endObject().endObject().endObject().endObject()));
  ensureYellow();
  IndexRequestBuilder[] indexRequestBuilders=new IndexRequestBuilder[5];
  for (int i=0; i < indexRequestBuilders.length; i++) {
    indexRequestBuilders[i]=client().prepareIndex("test","type1",Integer.toString(i)).setSource(XContentFactory.jsonBuilder().startObject().field("title","This is a test on the highlighting bug present in elasticsearch").startArray("attachments").startObject().field("body","attachment 1").endObject().startObject().field("body","attachment 2").endObject().endArray().endObject());
  }
  indexRandom(true,indexRequestBuilders);
  SearchResponse search=client().prepareSearch().setQuery(matchQuery("title","bug")).addHighlightedField("title",-1,0).get();
  for (int i=0; i < indexRequestBuilders.length; i++) {
    assertHighlight(search,i,"title",0,equalTo("This is a test on the highlighting <em>bug</em> present in elasticsearch"));
  }
  search=client().prepareSearch().setQuery(matchQuery("attachments.body","attachment")).addHighlightedField("attachments.body",-1,2).execute().get();
  for (int i=0; i < 5; i++) {
    assertHighlight(search,i,"attachments.body",0,equalTo("<em>attachment</em> 1"));
    assertHighlight(search,i,"attachments.body",1,equalTo("<em>attachment</em> 2"));
  }
}
