{
  prepareCreate("test").addMapping("type1",jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("text").field("type","string").field("store","yes").field("term_vector","with_positions_offsets").endObject().endObject().endObject().endObject()).get();
  ensureGreen();
  String text1="I am pretty long so some of me should get cut off";
  String text2="I am short";
  index("test","type1","1","text",new String[]{text1,text2});
  refresh();
  HighlightBuilder.Field field=new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain").noMatchSize(21);
  SearchResponse response=client().prepareSearch("test").addHighlightedField(field).get();
  assertHighlight(response,0,"text",0,equalTo("I am pretty long so"));
  field.highlighterType("fvh");
  response=client().prepareSearch("test").addHighlightedField(field).get();
  assertHighlight(response,0,"text",0,equalTo("I am pretty long so some"));
  assert(!client().prepareDelete("test","type1","1").get().isNotFound());
  index("test","type1","1","text",new String[]{"",text2});
  refresh();
  field.highlighterType("plain");
  response=client().prepareSearch("test").addHighlightedField(field).get();
  assertNoFailures(response);
  assertThat("not enough hits",response.getHits().hits().length,greaterThan(0));
  assertThat(response.getHits().hits()[0].getHighlightFields(),not(hasKey("text")));
  field.highlighterType("fvh");
  response=client().prepareSearch("test").addHighlightedField(field).get();
  assertNoFailures(response);
  assertThat("not enough hits",response.getHits().hits().length,greaterThan(0));
  assertThat(response.getHits().hits()[0].getHighlightFields(),not(hasKey("text")));
  assert(!client().prepareDelete("test","type1","1").get().isNotFound());
  index("test","type1","1","text",new String[]{});
  refresh();
  field.highlighterType("plain");
  response=client().prepareSearch("test").addHighlightedField(field).get();
  assertNoFailures(response);
  assertThat("not enough hits",response.getHits().hits().length,greaterThan(0));
  assertThat(response.getHits().hits()[0].getHighlightFields(),not(hasKey("text")));
  field.highlighterType("fvh");
  response=client().prepareSearch("test").addHighlightedField(field).get();
  assertNoFailures(response);
  assertThat("not enough hits",response.getHits().hits().length,greaterThan(0));
  assertThat(response.getHits().hits()[0].getHighlightFields(),not(hasKey("text")));
  assert(!client().prepareDelete("test","type1","1").get().isNotFound());
  index("test","type1","1");
  refresh();
  field.highlighterType("plain");
  response=client().prepareSearch("test").addHighlightedField(field).get();
  assertNoFailures(response);
  assertThat("not enough hits",response.getHits().hits().length,greaterThan(0));
  assertThat(response.getHits().hits()[0].getHighlightFields(),not(hasKey("text")));
  field.highlighterType("fvh");
  response=client().prepareSearch("test").addHighlightedField(field).get();
  assertNoFailures(response);
  assertThat("not enough hits",response.getHits().hits().length,greaterThan(0));
  assertThat(response.getHits().hits()[0].getHighlightFields(),not(hasKey("text")));
  field=new HighlightBuilder.Field("unmapped").highlighterType("plain").noMatchSize(21);
  response=client().prepareSearch("test").addHighlightedField(field).get();
  assertNoFailures(response);
  assertThat("not enough hits",response.getHits().hits().length,greaterThan(0));
  assertThat(response.getHits().hits()[0].getHighlightFields(),not(hasKey("unmapped")));
  field.highlighterType("fvh");
  response=client().prepareSearch("test").addHighlightedField(field).get();
  assertNoFailures(response);
  assertThat("not enough hits",response.getHits().hits().length,greaterThan(0));
  assertThat(response.getHits().hits()[0].getHighlightFields(),not(hasKey("unmapped")));
}
