{
  assertAcked(client().admin().indices().prepareCreate("test").addMapping("type1",type1PostingsffsetsMapping()));
  ensureGreen();
  client().prepareIndex("test","type1").setSource("field1","The quick brown fox jumps over the lazy dog. The lazy red fox jumps over the quick dog. The quick brown dog jumps over the lazy fox.","field2","The quick brown fox jumps over the lazy dog. The lazy red fox jumps over the quick dog. The quick brown dog jumps over the lazy fox.").get();
  refresh();
  logger.info("--> highlighting and searching on field1");
  SearchSourceBuilder source=searchSource().query(termQuery("field1","fox")).highlight(highlight().field(new HighlightBuilder.Field("field1").requireFieldMatch(true).preTags("<field1>").postTags("</field1>")).field(new HighlightBuilder.Field("field2").requireFieldMatch(true).preTags("<field2>").postTags("</field2>")));
  SearchResponse searchResponse=client().search(searchRequest("test").source(source)).actionGet();
  assertNotHighlighted(searchResponse,0,"field2");
  assertHighlight(searchResponse,0,"field1",0,equalTo("The quick brown <field1>fox</field1> jumps over the lazy dog."));
  assertHighlight(searchResponse,0,"field1",1,equalTo("The lazy red <field1>fox</field1> jumps over the quick dog."));
  assertHighlight(searchResponse,0,"field1",2,3,equalTo("The quick brown dog jumps over the lazy <field1>fox</field1>."));
  logger.info("--> highlighting and searching on field1 and field2 - require field match set to false");
  source=searchSource().query(termQuery("field1","fox")).highlight(highlight().field(new HighlightBuilder.Field("field1").requireFieldMatch(false).preTags("<field1>").postTags("</field1>")).field(new HighlightBuilder.Field("field2").requireFieldMatch(false).preTags("<field2>").postTags("</field2>")));
  searchResponse=client().search(searchRequest("test").source(source)).actionGet();
  assertHighlight(searchResponse,0,"field1",0,equalTo("The quick brown <field1>fox</field1> jumps over the lazy dog."));
  assertHighlight(searchResponse,0,"field1",1,equalTo("The lazy red <field1>fox</field1> jumps over the quick dog."));
  assertHighlight(searchResponse,0,"field1",2,3,equalTo("The quick brown dog jumps over the lazy <field1>fox</field1>."));
  assertHighlight(searchResponse,0,"field2",0,equalTo("The quick brown <field2>fox</field2> jumps over the lazy dog."));
  assertHighlight(searchResponse,0,"field2",1,equalTo("The lazy red <field2>fox</field2> jumps over the quick dog."));
  assertHighlight(searchResponse,0,"field2",2,3,equalTo("The quick brown dog jumps over the lazy <field2>fox</field2>."));
  logger.info("--> highlighting and searching on field1 and field2 via multi_match query");
  final MultiMatchQueryBuilder mmquery=multiMatchQuery("fox","field1","field2").type(RandomPicks.randomFrom(getRandom(),MultiMatchQueryBuilder.Type.values()));
  source=searchSource().query(mmquery).highlight(highlight().highlightQuery(randomBoolean() ? mmquery : null).field(new HighlightBuilder.Field("field1").requireFieldMatch(true).preTags("<field1>").postTags("</field1>")).field(new HighlightBuilder.Field("field2").requireFieldMatch(true).preTags("<field2>").postTags("</field2>")));
  searchResponse=client().search(searchRequest("test").source(source)).actionGet();
  assertHitCount(searchResponse,1l);
  assertHighlight(searchResponse,0,"field1",0,equalTo("The quick brown <field1>fox</field1> jumps over the lazy dog."));
  assertHighlight(searchResponse,0,"field1",1,equalTo("The lazy red <field1>fox</field1> jumps over the quick dog."));
  assertHighlight(searchResponse,0,"field1",2,3,equalTo("The quick brown dog jumps over the lazy <field1>fox</field1>."));
  assertHighlight(searchResponse,0,"field2",0,equalTo("The quick brown <field2>fox</field2> jumps over the lazy dog."));
  assertHighlight(searchResponse,0,"field2",1,equalTo("The lazy red <field2>fox</field2> jumps over the quick dog."));
  assertHighlight(searchResponse,0,"field2",2,3,equalTo("The quick brown dog jumps over the lazy <field2>fox</field2>."));
}
