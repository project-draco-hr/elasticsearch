{
  int nodeCount=scaledRandomIntBetween(1,5);
  ImmutableSettings.Builder settings=settingsBuilder().put("discovery.type","zen").put("discovery.zen.ping_timeout","200ms").put("discovery.initial_state_timeout","500ms").put("gateway.type","local");
  int initialMinMasterNodes=randomIntBetween(nodeCount / 2 + 1,nodeCount);
  settings.put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES,initialMinMasterNodes);
  logger.info("--> starting [{}] nodes. min_master_nodes set to [{}]",nodeCount,initialMinMasterNodes);
  internalCluster().startNodesAsync(nodeCount,settings.build()).get();
  logger.info("--> waiting for nodes to join");
  assertFalse(client().admin().cluster().prepareHealth().setWaitForNodes(Integer.toString(nodeCount)).get().isTimedOut());
  int updateCount=randomIntBetween(1,nodeCount);
  logger.info("--> updating [{}] to [{}]",ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES,updateCount);
  assertAcked(client().admin().cluster().prepareUpdateSettings().setPersistentSettings(settingsBuilder().put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES,updateCount)));
  logger.info("--> verifying no node left and master is up");
  assertFalse(client().admin().cluster().prepareHealth().setWaitForNodes(Integer.toString(nodeCount)).get().isTimedOut());
  updateCount=nodeCount + randomIntBetween(1,2000);
  logger.info("--> trying to updating [{}] to [{}]",ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES,updateCount);
  assertThat(client().admin().cluster().prepareUpdateSettings().setPersistentSettings(settingsBuilder().put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES,updateCount)).get().getPersistentSettings().getAsMap().keySet(),empty());
  logger.info("--> verifying no node left and master is up");
  assertFalse(client().admin().cluster().prepareHealth().setWaitForNodes(Integer.toString(nodeCount)).get().isTimedOut());
}
