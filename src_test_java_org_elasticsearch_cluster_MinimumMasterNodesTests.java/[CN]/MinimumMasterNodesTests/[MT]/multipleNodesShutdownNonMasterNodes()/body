{
  Settings settings=settingsBuilder().put("discovery.type","zen").put("discovery.zen.minimum_master_nodes",3).put("discovery.zen.ping_timeout","1s").put("discovery.initial_state_timeout","500ms").put("gateway.type","local").build();
  logger.info("--> start first 2 nodes");
  internalCluster().startNode(settings);
  internalCluster().startNode(settings);
  ClusterState state;
  awaitBusy(new Predicate<Object>(){
    public boolean apply(    Object obj){
      ClusterState state=client().admin().cluster().prepareState().setLocal(true).execute().actionGet().getState();
      return state.blocks().hasGlobalBlock(DiscoverySettings.NO_MASTER_BLOCK_ID);
    }
  }
);
  awaitBusy(new Predicate<Object>(){
    public boolean apply(    Object obj){
      ClusterState state=client().admin().cluster().prepareState().setLocal(true).execute().actionGet().getState();
      return state.blocks().hasGlobalBlock(DiscoverySettings.NO_MASTER_BLOCK_ID);
    }
  }
);
  state=client().admin().cluster().prepareState().setLocal(true).execute().actionGet().getState();
  assertThat(state.blocks().hasGlobalBlock(DiscoverySettings.NO_MASTER_BLOCK_ID),equalTo(true));
  state=client().admin().cluster().prepareState().setLocal(true).execute().actionGet().getState();
  assertThat(state.blocks().hasGlobalBlock(DiscoverySettings.NO_MASTER_BLOCK_ID),equalTo(true));
  logger.info("--> start two more nodes");
  internalCluster().startNode(settings);
  internalCluster().startNode(settings);
  ClusterHealthResponse clusterHealthResponse=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNodes("4").execute().actionGet();
  assertThat(clusterHealthResponse.isTimedOut(),equalTo(false));
  state=client().admin().cluster().prepareState().execute().actionGet().getState();
  assertThat(state.nodes().size(),equalTo(4));
  createIndex("test");
  NumShards numShards=getNumShards("test");
  logger.info("--> indexing some data");
  for (int i=0; i < 100; i++) {
    client().prepareIndex("test","type1",Integer.toString(i)).setSource("field","value").execute().actionGet();
  }
  assertThat(client().admin().cluster().prepareHealth("test").setWaitForActiveShards(numShards.totalNumShards).execute().actionGet().isTimedOut(),equalTo(false));
  client().admin().indices().prepareFlush().execute().actionGet();
  client().admin().indices().prepareRefresh().execute().actionGet();
  logger.info("--> verify we the data back");
  for (int i=0; i < 10; i++) {
    assertThat(client().prepareCount().setQuery(QueryBuilders.matchAllQuery()).execute().actionGet().getCount(),equalTo(100l));
  }
  internalCluster().stopRandomNonMasterNode();
  internalCluster().stopRandomNonMasterNode();
  logger.info("--> verify that there is no master anymore on remaining nodes");
  assertNoMasterBlockOnAllNodes();
  logger.info("--> start back the 2 nodes ");
  internalCluster().startNode(settings);
  internalCluster().startNode(settings);
  clusterHealthResponse=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNodes("4").execute().actionGet();
  assertThat(clusterHealthResponse.isTimedOut(),equalTo(false));
  logger.info("Running Cluster Health");
  ClusterHealthResponse clusterHealth=client().admin().cluster().health(clusterHealthRequest().waitForGreenStatus()).actionGet();
  logger.info("Done Cluster Health, status " + clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.GREEN));
  state=client().admin().cluster().prepareState().execute().actionGet().getState();
  assertThat(state.nodes().size(),equalTo(4));
  logger.info("--> verify we the data back");
  for (int i=0; i < 10; i++) {
    assertThat(client().prepareCount().setQuery(QueryBuilders.matchAllQuery()).execute().actionGet().getCount(),equalTo(100l));
  }
}
