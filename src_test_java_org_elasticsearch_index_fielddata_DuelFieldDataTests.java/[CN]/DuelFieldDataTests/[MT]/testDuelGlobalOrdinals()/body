{
  Random random=getRandom();
  final int numDocs=scaledRandomIntBetween(10,1000);
  final int numValues=scaledRandomIntBetween(10,500);
  final String[] values=new String[numValues];
  for (int i=0; i < numValues; ++i) {
    values[i]=new String(RandomStrings.randomAsciiOfLength(random,10));
  }
  for (int i=0; i < numDocs; i++) {
    Document d=new Document();
    final int numVals=randomInt(3);
    for (int j=0; j < numVals; ++j) {
      final String value=RandomPicks.randomFrom(random,Arrays.asList(values));
      d.add(new StringField("string",value,Field.Store.NO));
      d.add(new SortedSetDocValuesField("bytes",new BytesRef(value)));
    }
    writer.addDocument(d);
    if (randomInt(10) == 0) {
      refreshReader();
    }
  }
  refreshReader();
  Map<FieldDataType,Type> typeMap=new HashMap<FieldDataType,DuelFieldDataTests.Type>();
  typeMap.put(new FieldDataType("string",ImmutableSettings.builder().put("format","fst")),Type.Bytes);
  typeMap.put(new FieldDataType("string",ImmutableSettings.builder().put("format","paged_bytes")),Type.Bytes);
  typeMap.put(new FieldDataType("string",ImmutableSettings.builder().put("format","doc_values")),Type.Bytes);
  for (  Map.Entry<FieldDataType,Type> entry : typeMap.entrySet()) {
    ifdService.clear();
    IndexOrdinalsFieldData fieldData=getForField(entry.getKey(),entry.getValue().name().toLowerCase(Locale.ROOT));
    RandomAccessOrds left=fieldData.load(readerContext).getOrdinalsValues();
    fieldData.clear();
    RandomAccessOrds right=fieldData.loadGlobal(topLevelReader).load(topLevelReader.leaves().get(0)).getOrdinalsValues();
    assertEquals(left.getValueCount(),right.getValueCount());
    for (long ord=0; ord < left.getValueCount(); ++ord) {
      assertEquals(left.lookupOrd(ord),right.lookupOrd(ord));
    }
  }
}
