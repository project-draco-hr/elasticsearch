{
  final String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("bytes").field("type","string").field("index","not_analyzed").startObject("fielddata").field("format",LuceneTestCase.defaultCodecSupportsSortedSet() ? "doc_values" : "fst").endObject().endObject().startObject("byte").field("type","byte").startObject("fielddata").field("format","doc_values").endObject().endObject().startObject("short").field("type","short").startObject("fielddata").field("format","doc_values").endObject().endObject().startObject("integer").field("type","integer").startObject("fielddata").field("format","doc_values").endObject().endObject().startObject("long").field("type","long").startObject("fielddata").field("format","doc_values").endObject().endObject().startObject("float").field("type","float").startObject("fielddata").field("format","doc_values").endObject().endObject().startObject("double").field("type","double").startObject("fielddata").field("format","doc_values").endObject().endObject().endObject().endObject().endObject().string();
  final DocumentMapper mapper=mapperService.documentMapperParser().parse(mapping);
  Random random=getRandom();
  int atLeast=scaledRandomIntBetween(1000,1500);
  for (int i=0; i < atLeast; i++) {
    String s=Integer.toString(randomByte());
    XContentBuilder doc=XContentFactory.jsonBuilder().startObject();
    for (    String fieldName : Arrays.asList("bytes","byte","short","integer","long","float","double")) {
      doc=doc.field(fieldName,s);
    }
    doc=doc.endObject();
    final ParsedDocument d=mapper.parse("type",Integer.toString(i),doc.bytes());
    writer.addDocument(d.rootDoc());
    if (random.nextInt(10) == 0) {
      refreshReader();
    }
  }
  AtomicReaderContext context=refreshReader();
  Map<FieldDataType,Type> typeMap=new HashMap<>();
  typeMap.put(new FieldDataType("string",ImmutableSettings.builder().put("format","fst")),Type.Bytes);
  typeMap.put(new FieldDataType("string",ImmutableSettings.builder().put("format","paged_bytes")),Type.Bytes);
  typeMap.put(new FieldDataType("byte",ImmutableSettings.builder().put("format","array")),Type.Integer);
  typeMap.put(new FieldDataType("short",ImmutableSettings.builder().put("format","array")),Type.Integer);
  typeMap.put(new FieldDataType("int",ImmutableSettings.builder().put("format","array")),Type.Integer);
  typeMap.put(new FieldDataType("long",ImmutableSettings.builder().put("format","array")),Type.Long);
  typeMap.put(new FieldDataType("double",ImmutableSettings.builder().put("format","array")),Type.Double);
  typeMap.put(new FieldDataType("float",ImmutableSettings.builder().put("format","array")),Type.Float);
  typeMap.put(new FieldDataType("byte",ImmutableSettings.builder().put("format","doc_values")),Type.Integer);
  typeMap.put(new FieldDataType("short",ImmutableSettings.builder().put("format","doc_values")),Type.Integer);
  typeMap.put(new FieldDataType("int",ImmutableSettings.builder().put("format","doc_values")),Type.Integer);
  typeMap.put(new FieldDataType("long",ImmutableSettings.builder().put("format","doc_values")),Type.Long);
  typeMap.put(new FieldDataType("double",ImmutableSettings.builder().put("format","doc_values")),Type.Double);
  typeMap.put(new FieldDataType("float",ImmutableSettings.builder().put("format","doc_values")),Type.Float);
  if (LuceneTestCase.defaultCodecSupportsSortedSet()) {
    typeMap.put(new FieldDataType("string",ImmutableSettings.builder().put("format","doc_values")),Type.Bytes);
  }
  ArrayList<Entry<FieldDataType,Type>> list=new ArrayList<>(typeMap.entrySet());
  Preprocessor pre=new ToDoublePreprocessor();
  while (!list.isEmpty()) {
    Entry<FieldDataType,Type> left;
    Entry<FieldDataType,Type> right;
    if (list.size() > 1) {
      left=list.remove(random.nextInt(list.size()));
      right=list.remove(random.nextInt(list.size()));
    }
 else {
      right=left=list.remove(0);
    }
    ifdService.clear();
    IndexFieldData<?> leftFieldData=getForField(left.getKey(),left.getValue().name().toLowerCase(Locale.ROOT));
    ifdService.clear();
    IndexFieldData<?> rightFieldData=getForField(right.getKey(),right.getValue().name().toLowerCase(Locale.ROOT));
    duelFieldDataBytes(random,context,leftFieldData,rightFieldData,pre);
    duelFieldDataBytes(random,context,rightFieldData,leftFieldData,pre);
    DirectoryReader perSegment=DirectoryReader.open(writer,true);
    CompositeReaderContext composite=perSegment.getContext();
    List<AtomicReaderContext> leaves=composite.leaves();
    for (    AtomicReaderContext atomicReaderContext : leaves) {
      duelFieldDataBytes(random,atomicReaderContext,leftFieldData,rightFieldData,pre);
    }
  }
}
