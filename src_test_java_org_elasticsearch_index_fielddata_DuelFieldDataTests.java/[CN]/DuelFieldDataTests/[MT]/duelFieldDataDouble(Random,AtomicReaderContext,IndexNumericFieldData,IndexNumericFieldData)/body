{
  AtomicNumericFieldData leftData=random.nextBoolean() ? left.load(context) : left.loadDirect(context);
  AtomicNumericFieldData rightData=random.nextBoolean() ? right.load(context) : right.loadDirect(context);
  assertThat(leftData.getNumDocs(),equalTo(rightData.getNumDocs()));
  int numDocs=leftData.getNumDocs();
  DoubleValues leftDoubleValues=leftData.getDoubleValues();
  DoubleValues rightDoubleValues=rightData.getDoubleValues();
  for (int i=0; i < numDocs; i++) {
    assertThat(leftDoubleValues.hasValue(i),equalTo(rightDoubleValues.hasValue(i)));
    if (leftDoubleValues.hasValue(i)) {
      assertThat(leftDoubleValues.getValue(i),equalTo(rightDoubleValues.getValue(i)));
    }
 else {
      assertThat(leftDoubleValues.getValue(i),equalTo(0d));
      assertThat(rightDoubleValues.getValue(i),equalTo(0d));
    }
    boolean hasValue=leftDoubleValues.hasValue(i);
    DoubleValues.Iter leftIter=leftDoubleValues.getIter(i);
    DoubleValues.Iter rightIter=rightDoubleValues.getIter(i);
    assertThat(leftIter.hasNext(),equalTo(rightIter.hasNext()));
    assertThat(leftIter.hasNext(),equalTo(hasValue));
    while (leftIter.hasNext()) {
      assertThat(hasValue,equalTo(true));
      assertThat(leftIter.hasNext(),equalTo(rightIter.hasNext()));
      double rightValue=rightIter.next();
      double leftValue=leftIter.next();
      assertThat(leftValue,equalTo(rightValue));
    }
    assertThat(leftIter.hasNext(),equalTo(rightIter.hasNext()));
  }
}
