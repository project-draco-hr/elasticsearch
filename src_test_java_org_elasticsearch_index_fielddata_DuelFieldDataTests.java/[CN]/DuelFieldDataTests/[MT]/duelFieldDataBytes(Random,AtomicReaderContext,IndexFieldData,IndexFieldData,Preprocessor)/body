{
  AtomicFieldData leftData=random.nextBoolean() ? left.load(context) : left.loadDirect(context);
  AtomicFieldData rightData=random.nextBoolean() ? right.load(context) : right.loadDirect(context);
  assertThat(leftData.getNumDocs(),equalTo(rightData.getNumDocs()));
  int numDocs=leftData.getNumDocs();
  BytesValues leftBytesValues=random.nextBoolean() ? leftData.getBytesValues() : leftData.getHashedBytesValues();
  BytesValues rightBytesValues=random.nextBoolean() ? rightData.getBytesValues() : rightData.getHashedBytesValues();
  for (int i=0; i < numDocs; i++) {
    assertThat(leftBytesValues.hasValue(i),equalTo(rightBytesValues.hasValue(i)));
    if (leftBytesValues.hasValue(i)) {
      assertThat(pre.toString(leftBytesValues.getValue(i)),equalTo(pre.toString(rightBytesValues.getValue(i))));
    }
 else {
      assertThat(leftBytesValues.getValue(i),nullValue());
      assertThat(rightBytesValues.getValue(i),nullValue());
    }
    boolean hasValue=leftBytesValues.hasValue(i);
    Iter leftIter=leftBytesValues.getIter(i);
    Iter rightIter=rightBytesValues.getIter(i);
    assertThat(leftIter.hasNext(),equalTo(rightIter.hasNext()));
    assertThat(leftIter.hasNext(),equalTo(hasValue));
    while (leftIter.hasNext()) {
      assertThat(hasValue,equalTo(true));
      assertThat(leftIter.hasNext(),equalTo(rightIter.hasNext()));
      BytesRef rightBytes=rightIter.next();
      BytesRef leftBytes=leftIter.next();
      assertThat(pre.toString(leftBytes),equalTo(pre.toString(rightBytes)));
      if (rightBytes.equals(leftBytes)) {
        assertThat(leftIter.hash(),equalTo(rightIter.hash()));
        assertThat(leftIter.hash(),equalTo(rightIter.hash()));
        assertThat(leftIter.hash(),equalTo(rightBytes.hashCode()));
        assertThat(rightIter.hash(),equalTo(leftBytes.hashCode()));
      }
    }
    assertThat(leftIter.hasNext(),equalTo(rightIter.hasNext()));
  }
}
