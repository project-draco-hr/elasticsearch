{
  final CompletionFieldMapper.CompletionFieldType fieldType=suggestionContext.getFieldType();
  if (fieldType == null) {
    throw new IllegalArgumentException("field [" + suggestionContext.getField() + "] is not a completion field");
  }
  CompletionSuggestion completionSuggestion=new CompletionSuggestion(name,suggestionContext.getSize());
  spare.copyUTF8Bytes(suggestionContext.getText());
  CompletionSuggestion.Entry completionSuggestEntry=new CompletionSuggestion.Entry(new Text(spare.toString()),0,spare.length());
  completionSuggestion.addTerm(completionSuggestEntry);
  TopSuggestDocsCollector collector=new TopDocumentsCollector(suggestionContext.getSize());
  suggest(searcher,suggestionContext.toQuery(),collector);
  int numResult=0;
  List<LeafReaderContext> leaves=searcher.getIndexReader().leaves();
  for (  TopSuggestDocs.SuggestScoreDoc suggestScoreDoc : collector.get().scoreLookupDocs()) {
    TopDocumentsCollector.SuggestDoc suggestDoc=(TopDocumentsCollector.SuggestDoc)suggestScoreDoc;
    Map<String,Set<CharSequence>> contexts=Collections.emptyMap();
    if (fieldType.hasContextMappings() && suggestDoc.getContexts().isEmpty() == false) {
      contexts=fieldType.getContextMappings().getNamedContexts(suggestDoc.getContexts());
    }
    final Map<String,List<Object>> payload=new HashMap<>(0);
    Set<String> payloadFields=suggestionContext.getPayloadFields();
    if (payloadFields.isEmpty() == false) {
      final int readerIndex=ReaderUtil.subIndex(suggestDoc.doc,leaves);
      final LeafReaderContext subReaderContext=leaves.get(readerIndex);
      final int subDocId=suggestDoc.doc - subReaderContext.docBase;
      for (      String field : payloadFields) {
        MappedFieldType payloadFieldType=suggestionContext.getMapperService().fullName(field);
        if (payloadFieldType != null) {
          final AtomicFieldData data=suggestionContext.getIndexFieldDataService().getForField(payloadFieldType).load(subReaderContext);
          final ScriptDocValues scriptValues=data.getScriptValues();
          scriptValues.setNextDocId(subDocId);
          payload.put(field,new ArrayList<>(scriptValues.getValues()));
        }
 else {
          throw new IllegalArgumentException("payload field [" + field + "] does not exist");
        }
      }
    }
    if (numResult++ < suggestionContext.getSize()) {
      CompletionSuggestion.Entry.Option option=new CompletionSuggestion.Entry.Option(new Text(suggestDoc.key.toString()),suggestDoc.score,contexts,payload);
      completionSuggestEntry.addOption(option);
    }
 else {
      break;
    }
  }
  return completionSuggestion;
}
