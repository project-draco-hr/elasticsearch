{
  if (suggestionContext.getFieldType() != null) {
    final CompletionFieldMapper.CompletionFieldType fieldType=suggestionContext.getFieldType();
    CompletionSuggestion completionSuggestion=new CompletionSuggestion(name,suggestionContext.getSize());
    spare.copyUTF8Bytes(suggestionContext.getText());
    CompletionSuggestion.Entry completionSuggestEntry=new CompletionSuggestion.Entry(new Text(spare.toString()),0,spare.length());
    completionSuggestion.addTerm(completionSuggestEntry);
    TopSuggestDocsCollector collector=new TopDocumentsCollector(suggestionContext.getSize());
    suggest(searcher,suggestionContext.toQuery(),collector);
    int numResult=0;
    for (    TopSuggestDocs.SuggestScoreDoc suggestScoreDoc : collector.get().scoreLookupDocs()) {
      TopDocumentsCollector.SuggestDoc suggestDoc=(TopDocumentsCollector.SuggestDoc)suggestScoreDoc;
      Map<String,Set<CharSequence>> contexts=Collections.emptyMap();
      if (fieldType.hasContextMappings() && suggestDoc.getContexts().isEmpty() == false) {
        contexts=fieldType.getContextMappings().getNamedContexts(suggestDoc.getContexts());
      }
      if (numResult++ < suggestionContext.getSize()) {
        CompletionSuggestion.Entry.Option option=new CompletionSuggestion.Entry.Option(suggestDoc.doc,new Text(suggestDoc.key.toString()),suggestDoc.score,contexts);
        completionSuggestEntry.addOption(option);
      }
 else {
        break;
      }
    }
    return completionSuggestion;
  }
 else   if (suggestionContext.getFieldType2x() != null) {
    final IndexReader indexReader=searcher.getIndexReader();
    org.elasticsearch.search.suggest.completion2x.CompletionSuggestion completionSuggestion=new org.elasticsearch.search.suggest.completion2x.CompletionSuggestion(name,suggestionContext.getSize());
    spare.copyUTF8Bytes(suggestionContext.getText());
    org.elasticsearch.search.suggest.completion2x.CompletionSuggestion.Entry completionSuggestEntry=new org.elasticsearch.search.suggest.completion2x.CompletionSuggestion.Entry(new Text(spare.toString()),0,spare.length());
    completionSuggestion.addTerm(completionSuggestEntry);
    String fieldName=suggestionContext.getField();
    Map<String,org.elasticsearch.search.suggest.completion2x.CompletionSuggestion.Entry.Option> results=new HashMap<>(indexReader.leaves().size() * suggestionContext.getSize());
    for (    LeafReaderContext atomicReaderContext : indexReader.leaves()) {
      LeafReader atomicReader=atomicReaderContext.reader();
      Terms terms=atomicReader.fields().terms(fieldName);
      if (terms instanceof Completion090PostingsFormat.CompletionTerms) {
        final Completion090PostingsFormat.CompletionTerms lookupTerms=(Completion090PostingsFormat.CompletionTerms)terms;
        final Lookup lookup=lookupTerms.getLookup(suggestionContext.getFieldType2x(),suggestionContext);
        if (lookup == null) {
          continue;
        }
        List<Lookup.LookupResult> lookupResults=lookup.lookup(spare.get(),false,suggestionContext.getSize());
        for (        Lookup.LookupResult res : lookupResults) {
          final String key=res.key.toString();
          final float score=res.value;
          final org.elasticsearch.search.suggest.completion2x.CompletionSuggestion.Entry.Option value=results.get(key);
          if (value == null) {
            final org.elasticsearch.search.suggest.completion2x.CompletionSuggestion.Entry.Option option=new org.elasticsearch.search.suggest.completion2x.CompletionSuggestion.Entry.Option(new Text(key),score,res.payload == null ? null : new BytesArray(res.payload));
            results.put(key,option);
          }
 else           if (value.getScore() < score) {
            value.setScore(score);
            value.setPayload(res.payload == null ? null : new BytesArray(res.payload));
          }
        }
      }
    }
    final List<org.elasticsearch.search.suggest.completion2x.CompletionSuggestion.Entry.Option> options=new ArrayList<>(results.values());
    CollectionUtil.introSort(options,scoreComparator);
    int optionCount=Math.min(suggestionContext.getSize(),options.size());
    for (int i=0; i < optionCount; i++) {
      completionSuggestEntry.addOption(options.get(i));
    }
    return completionSuggestion;
  }
  return null;
}
