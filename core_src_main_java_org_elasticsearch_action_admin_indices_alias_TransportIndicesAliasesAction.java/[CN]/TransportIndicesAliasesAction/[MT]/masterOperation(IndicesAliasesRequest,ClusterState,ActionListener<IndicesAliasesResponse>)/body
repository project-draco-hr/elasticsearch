{
  List<AliasActions> actions=request.aliasActions();
  List<AliasAction> finalActions=new ArrayList<>();
  Set<String> aliases=new HashSet<>();
  for (  AliasActions action : actions) {
    String[] concreteIndices=indexNameExpressionResolver.concreteIndexNames(state,request.indicesOptions(),action.indices());
    Collections.addAll(aliases,action.aliases());
    for (    String index : concreteIndices) {
switch (action.actionType()) {
case ADD:
        for (        String alias : action.concreteAliases(state.metaData(),index)) {
          finalActions.add(new AliasAction.Add(index,alias,action.filter(),action.indexRouting(),action.searchRouting()));
        }
      break;
case REMOVE:
    for (    String alias : action.concreteAliases(state.metaData(),index)) {
      finalActions.add(new AliasAction.Remove(index,alias));
    }
  break;
case REMOVE_INDEX:
finalActions.add(new AliasAction.RemoveIndex(index));
break;
default :
throw new IllegalArgumentException("Unsupported action [" + action.actionType() + "]");
}
}
}
if (finalActions.isEmpty() && false == actions.isEmpty()) {
throw new AliasesNotFoundException(aliases.toArray(new String[aliases.size()]));
}
request.aliasActions().clear();
IndicesAliasesClusterStateUpdateRequest updateRequest=new IndicesAliasesClusterStateUpdateRequest(unmodifiableList(finalActions)).ackTimeout(request.timeout()).masterNodeTimeout(request.masterNodeTimeout());
indexAliasesService.indicesAliases(updateRequest,new ActionListener<ClusterStateUpdateResponse>(){
@Override public void onResponse(ClusterStateUpdateResponse response){
listener.onResponse(new IndicesAliasesResponse(response.isAcknowledged()));
}
@Override public void onFailure(Exception t){
logger.debug("failed to perform aliases",t);
listener.onFailure(t);
}
}
);
}
