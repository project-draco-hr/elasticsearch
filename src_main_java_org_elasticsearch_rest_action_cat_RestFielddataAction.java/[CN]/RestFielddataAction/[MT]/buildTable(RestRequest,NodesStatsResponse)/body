{
  Set<String> fieldNames=new HashSet<>();
  Map<NodeStats,ObjectLongMap<String>> nodesFields=new HashMap<>();
  for (  NodeStats ns : nodeStatses.getNodes()) {
    ObjectLongOpenHashMap<String> fields=ns.getIndices().getFieldData().getFields();
    nodesFields.put(ns,fields);
    if (fields != null) {
      for (      String key : fields.keys().toArray(String.class)) {
        fieldNames.add(key);
      }
    }
  }
  Table table=new Table();
  table.startHeaders().addCell("id","desc:node id").addCell("host","alias:h;desc:host name").addCell("ip","desc:ip address").addCell("node","alias:n;desc:node name").addCell("total","text-align:right;desc:total field data usage");
  for (  String fieldName : fieldNames) {
    table.addCell(fieldName,"text-align:right;desc:" + fieldName + " field");
  }
  table.endHeaders();
  for (  Map.Entry<NodeStats,ObjectLongMap<String>> statsEntry : nodesFields.entrySet()) {
    table.startRow();
    NodeStats ns=statsEntry.getKey();
    table.addCell(ns.getNode().id());
    table.addCell(ns.getNode().getHostName());
    table.addCell(ns.getNode().getHostAddress());
    table.addCell(ns.getNode().getName());
    table.addCell(ns.getIndices().getFieldData().getMemorySize());
    ObjectLongMap<String> fields=statsEntry.getValue();
    for (    String fieldName : fieldNames) {
      table.addCell(new ByteSizeValue(fields == null ? 0L : fields.getOrDefault(fieldName,0L)));
    }
    table.endRow();
  }
  return table;
}
