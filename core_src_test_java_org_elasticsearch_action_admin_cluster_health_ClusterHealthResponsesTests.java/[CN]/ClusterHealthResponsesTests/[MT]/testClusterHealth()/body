{
  ShardCounter counter=new ShardCounter();
  RoutingTable.Builder routingTable=RoutingTable.builder();
  MetaData.Builder metaData=MetaData.builder();
  for (int i=randomInt(4); i >= 0; i--) {
    int numberOfShards=randomInt(3) + 1;
    int numberOfReplicas=randomInt(4);
    IndexMetaData indexMetaData=IndexMetaData.builder("test_" + Integer.toString(i)).settings(settings(Version.CURRENT)).numberOfShards(numberOfShards).numberOfReplicas(numberOfReplicas).build();
    IndexRoutingTable indexRoutingTable=genIndexRoutingTable(indexMetaData,counter);
    metaData.put(indexMetaData,true);
    routingTable.add(indexRoutingTable);
  }
  ClusterState clusterState=ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable.build()).build();
  int pendingTasks=randomIntBetween(0,200);
  int inFlight=randomIntBetween(0,200);
  int delayedUnassigned=randomIntBetween(0,200);
  TimeValue pendingTaskInQueueTime=TimeValue.timeValueMillis(randomIntBetween(1000,100000));
  ClusterHealthResponse clusterHealth=new ClusterHealthResponse("bla",indexNameExpressionResolver.concreteIndices(clusterState,IndicesOptions.strictExpand(),(String[])null),clusterState,pendingTasks,inFlight,delayedUnassigned,pendingTaskInQueueTime);
  logger.info("cluster status: {}, expected {}",clusterHealth.getStatus(),counter.status());
  clusterHealth=maybeSerialize(clusterHealth);
  assertClusterHealth(clusterHealth,counter);
  assertThat(clusterHealth.getNumberOfPendingTasks(),Matchers.equalTo(pendingTasks));
  assertThat(clusterHealth.getNumberOfInFlightFetch(),Matchers.equalTo(inFlight));
  assertThat(clusterHealth.getDelayedUnassignedShards(),Matchers.equalTo(delayedUnassigned));
  assertThat(clusterHealth.getTaskMaxWaitingTime().millis(),is(pendingTaskInQueueTime.millis()));
  assertThat(clusterHealth.getActiveShardsPercent(),is(allOf(greaterThanOrEqualTo(0.0),lessThanOrEqualTo(100.0))));
}
