{
  TShortIntHashMap facets=aggregator.facets();
  if (facets.isEmpty()) {
    CacheRecycler.pushShortIntMap(facets);
    return new InternalShortTermsFacet(facetName,comparatorType,size,ImmutableList.<InternalShortTermsFacet.ShortEntry>of(),aggregator.missing(),aggregator.total());
  }
 else {
    if (size < EntryPriorityQueue.LIMIT) {
      EntryPriorityQueue ordered=new EntryPriorityQueue(size,comparatorType.comparator());
      for (TShortIntIterator it=facets.iterator(); it.hasNext(); ) {
        it.advance();
        ordered.insertWithOverflow(new InternalShortTermsFacet.ShortEntry(it.key(),it.value()));
      }
      InternalShortTermsFacet.ShortEntry[] list=new InternalShortTermsFacet.ShortEntry[ordered.size()];
      for (int i=ordered.size() - 1; i >= 0; i--) {
        list[i]=(InternalShortTermsFacet.ShortEntry)ordered.pop();
      }
      CacheRecycler.pushShortIntMap(facets);
      return new InternalShortTermsFacet(facetName,comparatorType,size,Arrays.asList(list),aggregator.missing(),aggregator.total());
    }
 else {
      BoundedTreeSet<InternalShortTermsFacet.ShortEntry> ordered=new BoundedTreeSet<InternalShortTermsFacet.ShortEntry>(comparatorType.comparator(),size);
      for (TShortIntIterator it=facets.iterator(); it.hasNext(); ) {
        it.advance();
        ordered.add(new InternalShortTermsFacet.ShortEntry(it.key(),it.value()));
      }
      CacheRecycler.pushShortIntMap(facets);
      return new InternalShortTermsFacet(facetName,comparatorType,size,ordered,aggregator.missing(),aggregator.total());
    }
  }
}
