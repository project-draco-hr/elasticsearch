{
  TShortIntHashMap facets=aggregator.facets();
  if (facets.isEmpty()) {
    pushFacets(facets);
    return new InternalShortTermsFacet(facetName,fieldName,comparatorType,size,ImmutableList.<InternalShortTermsFacet.ShortEntry>of(),aggregator.missing());
  }
 else {
    BoundedTreeSet<InternalShortTermsFacet.ShortEntry> ordered=new BoundedTreeSet<InternalShortTermsFacet.ShortEntry>(comparatorType.comparator(),size * numberOfShards);
    for (TShortIntIterator it=facets.iterator(); it.hasNext(); ) {
      it.advance();
      ordered.add(new InternalShortTermsFacet.ShortEntry(it.key(),it.value()));
    }
    pushFacets(facets);
    return new InternalShortTermsFacet(facetName,fieldName,comparatorType,size,ordered,aggregator.missing());
  }
}
