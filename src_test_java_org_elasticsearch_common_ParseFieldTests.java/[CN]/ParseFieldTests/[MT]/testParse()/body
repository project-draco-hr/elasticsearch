{
  String[] values=new String[]{"foo_bar","fooBar"};
  ParseField field=new ParseField(randomFrom(values));
  String[] deprecated=new String[]{"barFoo","bar_foo"};
  ParseField withDepredcations=field.withDeprecation("Foobar",randomFrom(deprecated));
  assertThat(field,not(sameInstance(withDepredcations)));
  assertThat(field.match(randomFrom(values),ParseField.EMPTY_FLAGS),is(true));
  assertThat(field.match("foo bar",ParseField.EMPTY_FLAGS),is(false));
  assertThat(field.match(randomFrom(deprecated),ParseField.EMPTY_FLAGS),is(false));
  assertThat(field.match("barFoo",ParseField.EMPTY_FLAGS),is(false));
  assertThat(withDepredcations.match(randomFrom(values),ParseField.EMPTY_FLAGS),is(true));
  assertThat(withDepredcations.match("foo bar",ParseField.EMPTY_FLAGS),is(false));
  assertThat(withDepredcations.match(randomFrom(deprecated),ParseField.EMPTY_FLAGS),is(true));
  assertThat(withDepredcations.match("barFoo",ParseField.EMPTY_FLAGS),is(true));
  EnumSet<ParseField.Flag> flags=EnumSet.of(ParseField.Flag.STRICT);
  assertThat(field.match(randomFrom(values),flags),is(true));
  assertThat(field.match("foo bar",flags),is(false));
  assertThat(field.match(randomFrom(deprecated),flags),is(false));
  assertThat(field.match("barFoo",flags),is(false));
  assertThat(withDepredcations.match(randomFrom(values),flags),is(true));
  assertThat(withDepredcations.match("foo bar",flags),is(false));
  try {
    withDepredcations.match(randomFrom(deprecated),flags);
    fail();
  }
 catch (  ElasticsearchIllegalArgumentException ex) {
  }
  try {
    withDepredcations.match("barFoo",flags);
    fail();
  }
 catch (  ElasticsearchIllegalArgumentException ex) {
  }
}
