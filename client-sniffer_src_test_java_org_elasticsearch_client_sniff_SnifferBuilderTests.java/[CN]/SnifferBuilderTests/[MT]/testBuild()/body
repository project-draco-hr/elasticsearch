{
  int numNodes=RandomInts.randomIntBetween(random(),1,5);
  HttpHost[] hosts=new HttpHost[numNodes];
  for (int i=0; i < numNodes; i++) {
    hosts[i]=new HttpHost("localhost",9200 + i);
  }
  try (RestClient client=RestClient.builder(hosts).build()){
    try {
      Sniffer.builder(client).setScheme(null);
      fail("should have failed");
    }
 catch (    NullPointerException e) {
      assertEquals("scheme cannot be null",e.getMessage());
    }
    try {
      Sniffer.builder(client).setScheme("whatever");
      fail("should have failed");
    }
 catch (    IllegalArgumentException e) {
      assertEquals("scheme must be either http or https",e.getMessage());
    }
    try {
      Sniffer.builder(client).setSniffInterval(RandomInts.randomIntBetween(random(),Integer.MIN_VALUE,0));
      fail("should have failed");
    }
 catch (    IllegalArgumentException e) {
      assertEquals("sniffInterval must be greater than 0",e.getMessage());
    }
    try {
      Sniffer.builder(client).setSniffRequestTimeout(RandomInts.randomIntBetween(random(),Integer.MIN_VALUE,0));
      fail("should have failed");
    }
 catch (    IllegalArgumentException e) {
      assertEquals("sniffRequestTimeout must be greater than 0",e.getMessage());
    }
    try {
      Sniffer.builder(client).setSniffAfterFailureDelay(RandomInts.randomIntBetween(random(),Integer.MIN_VALUE,0));
      fail("should have failed");
    }
 catch (    IllegalArgumentException e) {
      assertEquals("sniffAfterFailureDelay must be greater than 0",e.getMessage());
    }
    try {
      Sniffer.builder(null).build();
      fail("should have failed");
    }
 catch (    NullPointerException e) {
      assertEquals("restClient cannot be null",e.getMessage());
    }
    try (Sniffer sniffer=Sniffer.builder(client).build()){
      assertNotNull(sniffer);
    }
     Sniffer.Builder builder=Sniffer.builder(client);
    if (random().nextBoolean()) {
      builder.setScheme(RandomPicks.randomFrom(random(),Arrays.asList("http","https")));
    }
    if (random().nextBoolean()) {
      builder.setSniffInterval(RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE));
    }
    if (random().nextBoolean()) {
      builder.setSniffAfterFailureDelay(RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE));
    }
    if (random().nextBoolean()) {
      builder.setSniffRequestTimeout(RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE));
    }
    if (random().nextBoolean()) {
      builder.setSniffOnFailure(random().nextBoolean());
    }
    try (Sniffer sniffer=builder.build()){
      assertNotNull(sniffer);
    }
   }
 }
