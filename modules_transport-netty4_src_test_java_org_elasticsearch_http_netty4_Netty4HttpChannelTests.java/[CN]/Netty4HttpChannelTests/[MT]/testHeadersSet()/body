{
  Settings settings=Settings.builder().build();
  try (Netty4HttpServerTransport httpServerTransport=new Netty4HttpServerTransport(settings,networkService,bigArrays,threadPool)){
    httpServerTransport.start();
    final FullHttpRequest httpRequest=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,"/");
    httpRequest.headers().add(HttpHeaderNames.ORIGIN,"remote");
    final WriteCapturingChannel writeCapturingChannel=new WriteCapturingChannel();
    Netty4HttpRequest request=new Netty4HttpRequest(httpRequest,writeCapturingChannel);
    Netty4HttpChannel channel=new Netty4HttpChannel(httpServerTransport,request,null,randomBoolean(),threadPool.getThreadContext());
    TestResponse resp=new TestResponse();
    final String customHeader="custom-header";
    final String customHeaderValue="xyz";
    resp.addHeader(customHeader,customHeaderValue);
    channel.sendResponse(resp);
    List<Object> writtenObjects=writeCapturingChannel.getWrittenObjects();
    assertThat(writtenObjects.size(),is(1));
    HttpResponse response=(HttpResponse)writtenObjects.get(0);
    assertThat(response.headers().get("non-existent-header"),nullValue());
    assertThat(response.headers().get(customHeader),equalTo(customHeaderValue));
    assertThat(response.headers().get(HttpHeaderNames.CONTENT_LENGTH),equalTo(Integer.toString(resp.content().length())));
    assertThat(response.headers().get(HttpHeaderNames.CONTENT_TYPE),equalTo(resp.contentType()));
  }
 }
