{
  assertFalse(VersionType.FORCE.isVersionConflictForWrites(Versions.NOT_FOUND,10,randomBoolean()));
  assertFalse(VersionType.FORCE.isVersionConflictForWrites(Versions.NOT_SET,10,randomBoolean()));
  try {
    VersionType.FORCE.isVersionConflictForWrites(10,Versions.MATCH_ANY,randomBoolean());
    fail();
  }
 catch (  IllegalStateException e) {
  }
  assertFalse(VersionType.FORCE.isVersionConflictForWrites(Versions.NOT_FOUND,Versions.NOT_FOUND,randomBoolean()));
  assertFalse(VersionType.FORCE.isVersionConflictForWrites(Versions.NOT_FOUND,10,randomBoolean()));
  assertFalse(VersionType.FORCE.isVersionConflictForReads(Versions.NOT_FOUND,Versions.NOT_FOUND));
  assertFalse(VersionType.FORCE.isVersionConflictForReads(Versions.NOT_FOUND,10));
  assertFalse(VersionType.FORCE.isVersionConflictForReads(Versions.NOT_FOUND,Versions.MATCH_ANY));
  assertFalse(VersionType.FORCE.isVersionConflictForWrites(10,10,randomBoolean()));
  assertFalse(VersionType.FORCE.isVersionConflictForWrites(9,10,randomBoolean()));
  assertFalse(VersionType.FORCE.isVersionConflictForWrites(10,9,randomBoolean()));
  assertFalse(VersionType.FORCE.isVersionConflictForReads(10,10));
  assertFalse(VersionType.FORCE.isVersionConflictForReads(9,10));
  assertFalse(VersionType.FORCE.isVersionConflictForReads(10,9));
  assertFalse(VersionType.FORCE.isVersionConflictForReads(10,Versions.MATCH_ANY));
}
