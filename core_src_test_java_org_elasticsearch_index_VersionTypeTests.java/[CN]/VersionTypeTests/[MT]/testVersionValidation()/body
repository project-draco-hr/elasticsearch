{
  assertTrue(VersionType.EXTERNAL.validateVersionForWrites(randomIntBetween(1,Integer.MAX_VALUE)));
  assertFalse(VersionType.EXTERNAL.validateVersionForWrites(Versions.MATCH_ANY));
  assertFalse(VersionType.EXTERNAL.validateVersionForWrites(randomIntBetween(Integer.MIN_VALUE,0)));
  assertTrue(VersionType.EXTERNAL.validateVersionForReads(Versions.MATCH_ANY));
  assertTrue(VersionType.EXTERNAL.validateVersionForReads(randomIntBetween(1,Integer.MAX_VALUE)));
  assertFalse(VersionType.EXTERNAL.validateVersionForReads(randomIntBetween(Integer.MIN_VALUE,-1)));
  assertTrue(VersionType.EXTERNAL_GTE.validateVersionForWrites(randomIntBetween(1,Integer.MAX_VALUE)));
  assertFalse(VersionType.EXTERNAL_GTE.validateVersionForWrites(Versions.MATCH_ANY));
  assertFalse(VersionType.EXTERNAL_GTE.validateVersionForWrites(randomIntBetween(Integer.MIN_VALUE,0)));
  assertTrue(VersionType.EXTERNAL_GTE.validateVersionForReads(Versions.MATCH_ANY));
  assertTrue(VersionType.EXTERNAL_GTE.validateVersionForReads(randomIntBetween(1,Integer.MAX_VALUE)));
  assertFalse(VersionType.EXTERNAL_GTE.validateVersionForReads(randomIntBetween(Integer.MIN_VALUE,-1)));
  assertTrue(VersionType.INTERNAL.validateVersionForWrites(randomIntBetween(1,Integer.MAX_VALUE)));
  assertTrue(VersionType.INTERNAL.validateVersionForWrites(Versions.MATCH_ANY));
  assertFalse(VersionType.INTERNAL.validateVersionForWrites(randomIntBetween(Integer.MIN_VALUE,0)));
  assertTrue(VersionType.INTERNAL.validateVersionForReads(Versions.MATCH_ANY));
  assertTrue(VersionType.INTERNAL.validateVersionForReads(randomIntBetween(1,Integer.MAX_VALUE)));
  assertFalse(VersionType.INTERNAL.validateVersionForReads(randomIntBetween(Integer.MIN_VALUE,-1)));
}
