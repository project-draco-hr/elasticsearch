{
  final ALink last=links.get(links.size() - 1);
  expression.analyze(settings,definition,variables);
  if (operation == Operation.MUL) {
    promote=AnalyzerCaster.promoteNumeric(definition,last.after,expression.actual,true,true);
  }
 else   if (operation == Operation.DIV) {
    promote=AnalyzerCaster.promoteNumeric(definition,last.after,expression.actual,true,true);
  }
 else   if (operation == Operation.REM) {
    promote=AnalyzerCaster.promoteNumeric(definition,last.after,expression.actual,true,true);
  }
 else   if (operation == Operation.ADD) {
    promote=AnalyzerCaster.promoteAdd(definition,last.after,expression.actual);
  }
 else   if (operation == Operation.SUB) {
    promote=AnalyzerCaster.promoteNumeric(definition,last.after,expression.actual,true,true);
  }
 else   if (operation == Operation.LSH) {
    promote=AnalyzerCaster.promoteNumeric(definition,last.after,false,true);
  }
 else   if (operation == Operation.RSH) {
    promote=AnalyzerCaster.promoteNumeric(definition,last.after,false,true);
  }
 else   if (operation == Operation.USH) {
    promote=AnalyzerCaster.promoteNumeric(definition,last.after,false,true);
  }
 else   if (operation == Operation.BWAND) {
    promote=AnalyzerCaster.promoteXor(definition,last.after,expression.actual);
  }
 else   if (operation == Operation.XOR) {
    promote=AnalyzerCaster.promoteXor(definition,last.after,expression.actual);
  }
 else   if (operation == Operation.BWOR) {
    promote=AnalyzerCaster.promoteXor(definition,last.after,expression.actual);
  }
 else {
    throw new IllegalStateException(error("Illegal tree structure."));
  }
  if (promote == null) {
    throw new ClassCastException("Cannot apply compound assignment " + "[" + operation.symbol + "=] to types ["+ last.after+ "] and ["+ expression.actual+ "].");
  }
  cat=operation == Operation.ADD && promote.sort == Sort.STRING;
  if (cat) {
    if (expression instanceof EBinary && ((EBinary)expression).operation == Operation.ADD && expression.actual.sort == Sort.STRING) {
      ((EBinary)expression).cat=true;
    }
    expression.expected=expression.actual;
  }
 else   if (operation == Operation.LSH || operation == Operation.RSH || operation == Operation.USH) {
    expression.expected=definition.intType;
    expression.explicit=true;
  }
 else {
    expression.expected=promote;
  }
  expression=expression.cast(settings,definition,variables);
  exact=!settings.getNumericOverflow() && (operation == Operation.MUL || operation == Operation.DIV || operation == Operation.REM || operation == Operation.ADD || operation == Operation.SUB);
  there=AnalyzerCaster.getLegalCast(definition,location,last.after,promote,false);
  back=AnalyzerCaster.getLegalCast(definition,location,promote,last.after,true);
  if (last instanceof ADefLink) {
    final ADefLink lastDef=(ADefLink)last;
    lastDef.storeValueType=last.after;
  }
  statement=true;
  actual=read ? last.after : definition.voidType;
}
