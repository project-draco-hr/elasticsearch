{
  if (cat) {
    WriterUtility.writeNewStrings(adapter);
  }
  final ALink last=links.get(links.size() - 1);
  for (  final ALink link : links) {
    link.write(settings,definition,adapter);
    if (link == last && link.store) {
      if (cat) {
        WriterUtility.writeDup(adapter,link.size,1);
        link.load(settings,definition,adapter);
        WriterUtility.writeAppendStrings(adapter,link.after.sort);
        expression.write(settings,definition,adapter);
        if (!(expression instanceof EBinary) || ((EBinary)expression).operation != Operation.ADD || expression.actual.sort != Sort.STRING) {
          WriterUtility.writeAppendStrings(adapter,expression.actual.sort);
        }
        WriterUtility.writeToStrings(adapter);
        WriterUtility.writeCast(adapter,back);
        if (link.load) {
          WriterUtility.writeDup(adapter,link.after.sort.size,link.size);
        }
        link.store(settings,definition,adapter);
      }
 else       if (operation != null) {
        WriterUtility.writeDup(adapter,link.size,0);
        link.load(settings,definition,adapter);
        if (link.load && post) {
          WriterUtility.writeDup(adapter,link.after.sort.size,link.size);
        }
        WriterUtility.writeCast(adapter,there);
        expression.write(settings,definition,adapter);
        WriterUtility.writeBinaryInstruction(settings,definition,adapter,location,promote,operation);
        if (!exact || !WriterUtility.writeExactInstruction(definition,adapter,promote.sort,link.after.sort)) {
          WriterUtility.writeCast(adapter,back);
        }
        if (link.load && !post) {
          WriterUtility.writeDup(adapter,link.after.sort.size,link.size);
        }
        link.store(settings,definition,adapter);
      }
 else {
        expression.write(settings,definition,adapter);
        if (link.load) {
          if (last instanceof ADefLink) {
            WriterUtility.writeDup(adapter,((ADefLink)last).storeValueType.sort.size,link.size);
          }
 else {
            WriterUtility.writeDup(adapter,link.after.sort.size,link.size);
          }
        }
        link.store(settings,definition,adapter);
      }
    }
 else {
      link.load(settings,definition,adapter);
    }
  }
  WriterUtility.writeBranch(adapter,tru,fals);
}
