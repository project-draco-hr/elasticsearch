{
  ALink last=links.get(links.size() - 1);
  expression.analyze(variables);
  boolean shift=false;
  if (operation == Operation.MUL) {
    promote=AnalyzerCaster.promoteNumeric(last.after,expression.actual,true);
  }
 else   if (operation == Operation.DIV) {
    promote=AnalyzerCaster.promoteNumeric(last.after,expression.actual,true);
  }
 else   if (operation == Operation.REM) {
    promote=AnalyzerCaster.promoteNumeric(last.after,expression.actual,true);
  }
 else   if (operation == Operation.ADD) {
    promote=AnalyzerCaster.promoteAdd(last.after,expression.actual);
  }
 else   if (operation == Operation.SUB) {
    promote=AnalyzerCaster.promoteNumeric(last.after,expression.actual,true);
  }
 else   if (operation == Operation.LSH) {
    promote=AnalyzerCaster.promoteNumeric(last.after,false);
    shiftDistance=AnalyzerCaster.promoteNumeric(expression.actual,false);
    shift=true;
  }
 else   if (operation == Operation.RSH) {
    promote=AnalyzerCaster.promoteNumeric(last.after,false);
    shiftDistance=AnalyzerCaster.promoteNumeric(expression.actual,false);
    shift=true;
  }
 else   if (operation == Operation.USH) {
    promote=AnalyzerCaster.promoteNumeric(last.after,false);
    shiftDistance=AnalyzerCaster.promoteNumeric(expression.actual,false);
    shift=true;
  }
 else   if (operation == Operation.BWAND) {
    promote=AnalyzerCaster.promoteXor(last.after,expression.actual);
  }
 else   if (operation == Operation.XOR) {
    promote=AnalyzerCaster.promoteXor(last.after,expression.actual);
  }
 else   if (operation == Operation.BWOR) {
    promote=AnalyzerCaster.promoteXor(last.after,expression.actual);
  }
 else {
    throw createError(new IllegalStateException("Illegal tree structure."));
  }
  if (promote == null || (shift && shiftDistance == null)) {
    throw createError(new ClassCastException("Cannot apply compound assignment " + "[" + operation.symbol + "=] to types ["+ last.after+ "] and ["+ expression.actual+ "]."));
  }
  cat=operation == Operation.ADD && promote.sort == Sort.STRING;
  if (cat) {
    if (expression instanceof EBinary && ((EBinary)expression).operation == Operation.ADD && expression.actual.sort == Sort.STRING) {
      ((EBinary)expression).cat=true;
    }
    expression.expected=expression.actual;
  }
 else   if (shift) {
    if (shiftDistance.sort == Sort.LONG) {
      expression.expected=Definition.INT_TYPE;
      expression.explicit=true;
    }
 else {
      expression.expected=shiftDistance;
    }
  }
 else {
    expression.expected=promote;
  }
  expression=expression.cast(variables);
  there=AnalyzerCaster.getLegalCast(location,last.after,promote,false,false);
  back=AnalyzerCaster.getLegalCast(location,promote,last.after,true,false);
  this.statement=true;
  this.actual=read ? last.after : Definition.VOID_TYPE;
}
