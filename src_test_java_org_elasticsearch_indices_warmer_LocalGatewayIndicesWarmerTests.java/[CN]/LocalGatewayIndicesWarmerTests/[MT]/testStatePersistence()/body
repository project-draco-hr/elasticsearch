{
  logger.info("--> starting 1 nodes");
  cluster().startNode(settingsBuilder().put("gateway.type","local"));
  logger.info("--> putting two templates");
  client().admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards",1)).execute().actionGet();
  client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForYellowStatus().execute().actionGet();
  PutWarmerResponse putWarmerResponse=client().admin().indices().preparePutWarmer("warmer_1").setSearchRequest(client().prepareSearch("test").setQuery(QueryBuilders.termQuery("field","value1"))).execute().actionGet();
  assertThat(putWarmerResponse.isAcknowledged(),equalTo(true));
  putWarmerResponse=client().admin().indices().preparePutWarmer("warmer_2").setSearchRequest(client().prepareSearch("test").setQuery(QueryBuilders.termQuery("field","value2"))).execute().actionGet();
  assertThat(putWarmerResponse.isAcknowledged(),equalTo(true));
  logger.info("--> put template with warmer");
  client().admin().indices().preparePutTemplate("template_1").setSource("{\n" + "    \"template\" : \"xxx\",\n" + "    \"warmers\" : {\n"+ "        \"warmer_1\" : {\n"+ "            \"types\" : [],\n"+ "            \"source\" : {\n"+ "                \"query\" : {\n"+ "                    \"match_all\" : {}\n"+ "                }\n"+ "            }\n"+ "        }\n"+ "    }\n"+ "}").execute().actionGet();
  logger.info("--> verify warmers are registered in cluster state");
  ClusterState clusterState=client().admin().cluster().prepareState().execute().actionGet().getState();
  IndexWarmersMetaData warmersMetaData=clusterState.metaData().index("test").custom(IndexWarmersMetaData.TYPE);
  assertThat(warmersMetaData,Matchers.notNullValue());
  assertThat(warmersMetaData.entries().size(),equalTo(2));
  IndexWarmersMetaData templateWarmers=clusterState.metaData().templates().get("template_1").custom(IndexWarmersMetaData.TYPE);
  assertThat(templateWarmers,Matchers.notNullValue());
  assertThat(templateWarmers.entries().size(),equalTo(1));
  logger.info("--> restarting the node");
  cluster().fullRestart(new RestartCallback(){
    @Override public Settings onNodeStopped(    String nodeName) throws Exception {
      return settingsBuilder().put("gateway.type","local").build();
    }
  }
);
  ClusterHealthResponse healthResponse=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForYellowStatus().execute().actionGet();
  assertThat(healthResponse.isTimedOut(),equalTo(false));
  logger.info("--> verify warmers are recovered");
  clusterState=client().admin().cluster().prepareState().execute().actionGet().getState();
  IndexWarmersMetaData recoveredWarmersMetaData=clusterState.metaData().index("test").custom(IndexWarmersMetaData.TYPE);
  assertThat(recoveredWarmersMetaData.entries().size(),equalTo(warmersMetaData.entries().size()));
  for (int i=0; i < warmersMetaData.entries().size(); i++) {
    assertThat(recoveredWarmersMetaData.entries().get(i).name(),equalTo(warmersMetaData.entries().get(i).name()));
    assertThat(recoveredWarmersMetaData.entries().get(i).source(),equalTo(warmersMetaData.entries().get(i).source()));
  }
  logger.info("--> verify warmers in template are recovered");
  IndexWarmersMetaData recoveredTemplateWarmers=clusterState.metaData().templates().get("template_1").custom(IndexWarmersMetaData.TYPE);
  assertThat(recoveredTemplateWarmers.entries().size(),equalTo(templateWarmers.entries().size()));
  for (int i=0; i < templateWarmers.entries().size(); i++) {
    assertThat(recoveredTemplateWarmers.entries().get(i).name(),equalTo(templateWarmers.entries().get(i).name()));
    assertThat(recoveredTemplateWarmers.entries().get(i).source(),equalTo(templateWarmers.entries().get(i).source()));
  }
  logger.info("--> delete warmer warmer_1");
  DeleteWarmerResponse deleteWarmerResponse=client().admin().indices().prepareDeleteWarmer().setIndices("test").setName("warmer_1").execute().actionGet();
  assertThat(deleteWarmerResponse.isAcknowledged(),equalTo(true));
  logger.info("--> verify warmers (delete) are registered in cluster state");
  clusterState=client().admin().cluster().prepareState().execute().actionGet().getState();
  warmersMetaData=clusterState.metaData().index("test").custom(IndexWarmersMetaData.TYPE);
  assertThat(warmersMetaData,Matchers.notNullValue());
  assertThat(warmersMetaData.entries().size(),equalTo(1));
  logger.info("--> restarting the node");
  cluster().fullRestart(new RestartCallback(){
    @Override public Settings onNodeStopped(    String nodeName) throws Exception {
      return settingsBuilder().put("gateway.type","local").build();
    }
  }
);
  healthResponse=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForYellowStatus().execute().actionGet();
  assertThat(healthResponse.isTimedOut(),equalTo(false));
  logger.info("--> verify warmers are recovered");
  clusterState=client().admin().cluster().prepareState().execute().actionGet().getState();
  recoveredWarmersMetaData=clusterState.metaData().index("test").custom(IndexWarmersMetaData.TYPE);
  assertThat(recoveredWarmersMetaData.entries().size(),equalTo(warmersMetaData.entries().size()));
  for (int i=0; i < warmersMetaData.entries().size(); i++) {
    assertThat(recoveredWarmersMetaData.entries().get(i).name(),equalTo(warmersMetaData.entries().get(i).name()));
    assertThat(recoveredWarmersMetaData.entries().get(i).source(),equalTo(warmersMetaData.entries().get(i).source()));
  }
}
