{
  XContentBuilder builder=XContentFactory.jsonBuilder().prettyPrint();
  builder.startObject();
  builder.startObject("has_parent");
  builder.field("query");
  EmptyQueryBuilder.PROTOTYPE.toXContent(builder,ToXContent.EMPTY_PARAMS);
  builder.field("type","foo");
  builder.endObject();
  builder.endObject();
  try {
    parseQuery(builder.string());
    fail("type is deprecated");
  }
 catch (  IllegalArgumentException ex) {
    assertEquals("Deprecated field [type] used, expected [parent_type] instead",ex.getMessage());
  }
  HasParentQueryBuilder queryBuilder=(HasParentQueryBuilder)parseQuery(builder.string(),ParseFieldMatcher.EMPTY);
  assertEquals("foo",queryBuilder.type());
  boolean score=randomBoolean();
  String key=RandomPicks.randomFrom(random(),Arrays.asList("score_mode","scoreMode","score_type","scoreType"));
  builder=XContentFactory.jsonBuilder().prettyPrint();
  builder.startObject();
  builder.startObject("has_parent");
  builder.field("query");
  EmptyQueryBuilder.PROTOTYPE.toXContent(builder,ToXContent.EMPTY_PARAMS);
  builder.field(key,score ? "score" : "none");
  builder.field("parent_type","foo");
  builder.endObject();
  builder.endObject();
  try {
    parseQuery(builder.string());
    fail(key + " is deprecated");
  }
 catch (  IllegalArgumentException ex) {
    assertEquals("Deprecated field [" + key + "] used, replaced by [score]",ex.getMessage());
  }
  queryBuilder=(HasParentQueryBuilder)parseQuery(builder.string(),ParseFieldMatcher.EMPTY);
  assertEquals(score,queryBuilder.score());
}
