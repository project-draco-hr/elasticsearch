{
  XContentBuilder builder=XContentFactory.jsonBuilder().prettyPrint();
  builder.startObject();
  builder.startObject("has_parent");
  builder.field("query");
  EmptyQueryBuilder.PROTOTYPE.toXContent(builder,ToXContent.EMPTY_PARAMS);
  builder.field("type","foo");
  builder.endObject();
  builder.endObject();
  String queryAsString=builder.string();
  QueryShardContext shardContext=createShardContext();
  QueryParseContext context=shardContext.parseContext();
  XContentParser parser=XContentFactory.xContent(XContentType.JSON).createParser(queryAsString);
  context.reset(parser);
  context.parseFieldMatcher(ParseFieldMatcher.STRICT);
  try {
    context.parseInnerQueryBuilder();
    fail("type is deprecated");
  }
 catch (  IllegalArgumentException ex) {
    assertEquals("Deprecated field [type] used, expected [parent_type] instead",ex.getMessage());
  }
  String key=RandomPicks.randomFrom(random(),Arrays.asList("score_mode","scoreMode","score_type","scoreType"));
  builder=XContentFactory.jsonBuilder().prettyPrint();
  builder.startObject();
  builder.startObject("has_parent");
  builder.field("query");
  EmptyQueryBuilder.PROTOTYPE.toXContent(builder,ToXContent.EMPTY_PARAMS);
  builder.field(key,"score");
  builder.endObject();
  builder.endObject();
  queryAsString=builder.string();
  parser=XContentFactory.xContent(XContentType.JSON).createParser(queryAsString);
  context.reset(parser);
  context.parseFieldMatcher(ParseFieldMatcher.STRICT);
  try {
    context.parseInnerQueryBuilder();
    fail(key + " is deprecated");
  }
 catch (  IllegalArgumentException ex) {
    assertEquals("Deprecated field [" + key + "] used, replaced by [score]",ex.getMessage());
  }
}
