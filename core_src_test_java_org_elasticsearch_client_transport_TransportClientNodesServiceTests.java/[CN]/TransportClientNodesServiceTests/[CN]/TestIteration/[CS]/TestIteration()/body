{
  Settings settings=Settings.builder().put("cluster.name","test").build();
  ClusterName clusterName=ClusterName.CLUSTER_NAME_SETTING.get(settings);
  threadPool=new TestThreadPool("transport-client-nodes-service-tests");
  transport=new FailAndRetryMockTransport<TestResponse>(random(),clusterName){
    @Override public List<String> getLocalAddresses(){
      return Collections.emptyList();
    }
    @Override protected TestResponse newResponse(){
      return new TestResponse();
    }
  }
;
  transportService=new TransportService(settings,transport,threadPool,new TransportInterceptor(){
    @Override public AsyncSender interceptSender(    AsyncSender sender){
      return new AsyncSender(){
        @Override public <T extends TransportResponse>void sendRequest(        DiscoveryNode node,        String action,        TransportRequest request,        TransportRequestOptions options,        TransportResponseHandler<T> handler){
          if (TransportLivenessAction.NAME.equals(action)) {
            sender.sendRequest(node,action,request,options,wrapLivenessResponseHandler(handler,node,clusterName));
          }
 else {
            sender.sendRequest(node,action,request,options,handler);
          }
        }
      }
;
    }
  }
);
  transportService.start();
  transportService.acceptIncomingRequests();
  transportClientNodesService=new TransportClientNodesService(settings,transportService,threadPool);
  this.nodesCount=randomIntBetween(1,10);
  for (int i=0; i < nodesCount; i++) {
    transportClientNodesService.addTransportAddresses(new LocalTransportAddress("node" + i));
  }
  transport.endConnectMode();
}
