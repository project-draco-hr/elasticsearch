{
  DiscoveryNodes discoveryNodes=buildDiscoveryNodes();
  int numSelectors=randomIntBetween(1,5);
  Set<String> nodeSelectors=new HashSet<>();
  Set<String> expectedNodeIdsSet=new HashSet<>();
  for (int i=0; i < numSelectors; i++) {
    NodeSelector nodeSelector=randomFrom(NodeSelector.values());
    if (nodeSelectors.add(nodeSelector.selector)) {
      expectedNodeIdsSet.addAll(nodeSelector.matchingNodeIds(discoveryNodes));
    }
  }
  int numNodeIds=randomIntBetween(0,3);
  String[] nodeIds=discoveryNodes.nodes().keys().toArray(String.class);
  for (int i=0; i < numNodeIds; i++) {
    String nodeId=randomFrom(nodeIds);
    nodeSelectors.add(nodeId);
    expectedNodeIdsSet.add(nodeId);
  }
  int numNodeNames=randomIntBetween(0,3);
  DiscoveryNode[] nodes=discoveryNodes.nodes().values().toArray(DiscoveryNode.class);
  for (int i=0; i < numNodeNames; i++) {
    DiscoveryNode discoveryNode=randomFrom(nodes);
    nodeSelectors.add(discoveryNode.getName());
    expectedNodeIdsSet.add(discoveryNode.getId());
  }
  String[] resolvedNodesIds=discoveryNodes.resolveNodesIds(nodeSelectors.toArray(new String[nodeSelectors.size()]));
  Arrays.sort(resolvedNodesIds);
  String[] expectedNodesIds=expectedNodeIdsSet.toArray(new String[expectedNodeIdsSet.size()]);
  Arrays.sort(expectedNodesIds);
  assertThat(resolvedNodesIds,equalTo(expectedNodesIds));
}
