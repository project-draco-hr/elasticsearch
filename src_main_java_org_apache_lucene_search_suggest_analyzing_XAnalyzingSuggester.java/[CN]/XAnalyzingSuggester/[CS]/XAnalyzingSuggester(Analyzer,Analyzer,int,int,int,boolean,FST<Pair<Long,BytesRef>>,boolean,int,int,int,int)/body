{
  this.indexAnalyzer=indexAnalyzer;
  this.queryAnalyzer=queryAnalyzer;
  this.fst=fst;
  this.hasPayloads=hasPayloads;
  if ((options & ~(EXACT_FIRST | PRESERVE_SEP)) != 0) {
    throw new IllegalArgumentException("options should only contain EXACT_FIRST and PRESERVE_SEP; got " + options);
  }
  this.exactFirst=(options & EXACT_FIRST) != 0;
  this.preserveSep=(options & PRESERVE_SEP) != 0;
  if (maxSurfaceFormsPerAnalyzedForm <= 0 || maxSurfaceFormsPerAnalyzedForm > 256) {
    throw new IllegalArgumentException("maxSurfaceFormsPerAnalyzedForm must be > 0 and < 256 (got: " + maxSurfaceFormsPerAnalyzedForm + ")");
  }
  this.maxSurfaceFormsPerAnalyzedForm=maxSurfaceFormsPerAnalyzedForm;
  if (maxGraphExpansions < 1 && maxGraphExpansions != -1) {
    throw new IllegalArgumentException("maxGraphExpansions must -1 (no limit) or > 0 (got: " + maxGraphExpansions + ")");
  }
  this.maxGraphExpansions=maxGraphExpansions;
  this.maxAnalyzedPathsForOneInput=maxAnalyzedPathsForOneInput;
  this.preservePositionIncrements=preservePositionIncrements;
  this.sepLabel=sepLabel;
  this.payloadSep=payloadSep;
  this.endByte=endByte;
}
