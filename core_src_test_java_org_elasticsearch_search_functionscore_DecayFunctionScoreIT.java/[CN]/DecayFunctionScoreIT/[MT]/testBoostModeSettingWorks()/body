{
  assertAcked(prepareCreate("test").addMapping("type1",jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("test").field("type","string").endObject().startObject("loc").field("type","geo_point").endObject().endObject().endObject().endObject()));
  ensureYellow();
  List<IndexRequestBuilder> indexBuilders=new ArrayList<>();
  indexBuilders.add(client().prepareIndex().setType("type1").setId("1").setIndex("test").setSource(jsonBuilder().startObject().field("test","value").startObject("loc").field("lat",11).field("lon",21).endObject().endObject()));
  indexBuilders.add(client().prepareIndex().setType("type1").setId("2").setIndex("test").setSource(jsonBuilder().startObject().field("test","value value").startObject("loc").field("lat",11).field("lon",20).endObject().endObject()));
  indexRandom(true,false,indexBuilders);
  List<Float> lonlat=new ArrayList<>();
  lonlat.add(20f);
  lonlat.add(11f);
  ActionFuture<SearchResponse> response=client().search(searchRequest().searchType(SearchType.QUERY_THEN_FETCH).source(searchSource().query(functionScoreQuery(termQuery("test","value"),gaussDecayFunction("loc",lonlat,"1000km")).boostMode(CombineFunction.MULTIPLY))));
  SearchResponse sr=response.actionGet();
  SearchHits sh=sr.getHits();
  assertThat(sh.getTotalHits(),equalTo((long)(2)));
  assertThat(sh.getAt(0).getId(),isOneOf("1"));
  assertThat(sh.getAt(1).getId(),equalTo("2"));
  response=client().search(searchRequest().searchType(SearchType.QUERY_THEN_FETCH).source(searchSource().query(functionScoreQuery(termQuery("test","value"),gaussDecayFunction("loc",lonlat,"1000km")).boostMode(CombineFunction.REPLACE))));
  sr=response.actionGet();
  sh=sr.getHits();
  assertThat(sh.getTotalHits(),equalTo((long)(2)));
  assertThat(sh.getAt(0).getId(),equalTo("2"));
  assertThat(sh.getAt(1).getId(),equalTo("1"));
}
