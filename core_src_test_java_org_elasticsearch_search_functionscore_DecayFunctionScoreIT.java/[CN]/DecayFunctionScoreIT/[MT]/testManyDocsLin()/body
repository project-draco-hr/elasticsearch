{
  Version version=VersionUtils.randomVersionBetween(random(),Version.V_2_0_0,Version.CURRENT);
  Settings settings=Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED,version).build();
  XContentBuilder xContentBuilder=jsonBuilder().startObject().startObject("type").startObject("properties").startObject("test").field("type","text").endObject().startObject("date").field("type","date").field("doc_values",true).endObject().startObject("num").field("type","double").field("doc_values",true).endObject().startObject("geo").field("type","geo_point").field("ignore_malformed",true);
  if (version.before(Version.V_2_2_0)) {
    xContentBuilder.field("coerce",true);
  }
  xContentBuilder.endObject().endObject().endObject().endObject();
  assertAcked(prepareCreate("test").setSettings(settings).addMapping("type",xContentBuilder.string()));
  int numDocs=200;
  List<IndexRequestBuilder> indexBuilders=new ArrayList<>();
  for (int i=0; i < numDocs; i++) {
    double lat=100 + (int)(10.0 * (i) / (numDocs));
    double lon=100;
    int day=(int)(29.0 * (i) / (numDocs)) + 1;
    String dayString=day < 10 ? "0" + Integer.toString(day) : Integer.toString(day);
    String date="2013-05-" + dayString;
    indexBuilders.add(client().prepareIndex().setType("type").setId(Integer.toString(i)).setIndex("test").setSource(jsonBuilder().startObject().field("test","value").field("date",date).field("num",i).startObject("geo").field("lat",lat).field("lon",lon).endObject().endObject()));
  }
  indexRandom(true,indexBuilders);
  List<Float> lonlat=new ArrayList<>();
  lonlat.add(100f);
  lonlat.add(110f);
  ActionFuture<SearchResponse> response=client().search(searchRequest().searchType(SearchType.QUERY_THEN_FETCH).source(searchSource().size(numDocs).query(functionScoreQuery(termQuery("test","value"),new FilterFunctionBuilder[]{new FilterFunctionBuilder(linearDecayFunction("date","2013-05-30","+15d")),new FilterFunctionBuilder(linearDecayFunction("geo",lonlat,"1000km")),new FilterFunctionBuilder(linearDecayFunction("num",numDocs,numDocs / 2.0))}).scoreMode(ScoreMode.MULTIPLY).boostMode(CombineFunction.REPLACE))));
  SearchResponse sr=response.actionGet();
  assertNoFailures(sr);
  SearchHits sh=sr.getHits();
  assertThat(sh.hits().length,equalTo(numDocs));
  double[] scores=new double[numDocs];
  for (int i=0; i < numDocs; i++) {
    scores[Integer.parseInt(sh.getAt(i).getId())]=sh.getAt(i).getScore();
  }
  for (int i=0; i < numDocs - 1; i++) {
    assertThat(scores[i],lessThan(scores[i + 1]));
  }
}
