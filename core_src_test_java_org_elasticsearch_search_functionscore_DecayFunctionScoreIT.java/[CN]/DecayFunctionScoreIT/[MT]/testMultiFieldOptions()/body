{
  assertAcked(prepareCreate("test").addMapping("type1",jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("test").field("type","string").endObject().startObject("loc").field("type","geo_point").endObject().startObject("num").field("type","float").endObject().endObject().endObject().endObject()));
  ensureYellow();
  IndexRequestBuilder doc1=client().prepareIndex().setType("type1").setId("1").setIndex("test").setSource(jsonBuilder().startObject().field("test","value").startArray("loc").startObject().field("lat",10).field("lon",20).endObject().startObject().field("lat",12).field("lon",23).endObject().endArray().endObject());
  IndexRequestBuilder doc2=client().prepareIndex().setType("type1").setId("2").setIndex("test").setSource(jsonBuilder().startObject().field("test","value").startObject("loc").field("lat",11).field("lon",22).endObject().endObject());
  indexRandom(true,doc1,doc2);
  ActionFuture<SearchResponse> response=client().search(searchRequest().source(searchSource().query(constantScoreQuery(termQuery("test","value")))));
  SearchResponse sr=response.actionGet();
  assertSearchHits(sr,"1","2");
  SearchHits sh=sr.getHits();
  assertThat(sh.getTotalHits(),equalTo((long)(2)));
  List<Float> lonlat=new ArrayList<>();
  lonlat.add(20f);
  lonlat.add(10f);
  response=client().search(searchRequest().source(searchSource().query(functionScoreQuery(constantScoreQuery(termQuery("test","value")),gaussDecayFunction("loc",lonlat,"1000km").setMultiValueMode(MultiValueMode.MIN)))));
  sr=response.actionGet();
  assertSearchHits(sr,"1","2");
  sh=sr.getHits();
  assertThat(sh.getAt(0).getId(),equalTo("1"));
  assertThat(sh.getAt(1).getId(),equalTo("2"));
  response=client().search(searchRequest().source(searchSource().query(functionScoreQuery(constantScoreQuery(termQuery("test","value")),gaussDecayFunction("loc",lonlat,"1000km").setMultiValueMode(MultiValueMode.MAX)))));
  sr=response.actionGet();
  assertSearchHits(sr,"1","2");
  sh=sr.getHits();
  assertThat(sh.getAt(0).getId(),equalTo("2"));
  assertThat(sh.getAt(1).getId(),equalTo("1"));
  doc1=client().prepareIndex().setType("type1").setId("1").setIndex("test").setSource(jsonBuilder().startObject().field("test","value").startArray("num").value(0.0).value(1.0).value(2.0).endArray().endObject());
  doc2=client().prepareIndex().setType("type1").setId("2").setIndex("test").setSource(jsonBuilder().startObject().field("test","value").field("num",1.0).endObject());
  indexRandom(true,doc1,doc2);
  response=client().search(searchRequest().source(searchSource().query(functionScoreQuery(constantScoreQuery(termQuery("test","value")),linearDecayFunction("num","0","10").setMultiValueMode(MultiValueMode.SUM)))));
  sr=response.actionGet();
  assertSearchHits(sr,"1","2");
  sh=sr.getHits();
  assertThat(sh.getAt(0).getId(),equalTo("2"));
  assertThat(sh.getAt(1).getId(),equalTo("1"));
  assertThat(1.0 - sh.getAt(0).getScore(),closeTo((1.0 - sh.getAt(1).getScore()) / 3.0,1.e-6d));
  response=client().search(searchRequest().source(searchSource().query(functionScoreQuery(constantScoreQuery(termQuery("test","value")),linearDecayFunction("num","0","10").setMultiValueMode(MultiValueMode.AVG)))));
  sr=response.actionGet();
  assertSearchHits(sr,"1","2");
  sh=sr.getHits();
  assertThat((double)(sh.getAt(0).getScore()),closeTo((sh.getAt(1).getScore()),1.e-6d));
}
