{
  if (minimumMasterNode < 0) {
    minimumMasterNode=numberOfNodes / 2 + 1;
  }
  Settings settings=ImmutableSettings.builder().put(DEFAULT_SETTINGS).put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES,minimumMasterNode).build();
  if (discoveryConfig == null) {
    if (unicastHostsOrdinals == null) {
      discoveryConfig=new ClusterDiscoveryConfiguration.UnicastZen(numberOfNodes,settings);
    }
 else {
      discoveryConfig=new ClusterDiscoveryConfiguration.UnicastZen(numberOfNodes,settings,unicastHostsOrdinals);
    }
  }
  List<String> nodes=internalCluster().startNodesAsync(numberOfNodes).get();
  ensureStableCluster(numberOfNodes);
  for (  ZenPingService pingService : internalCluster().getInstances(ZenPingService.class)) {
    for (    ZenPing zenPing : pingService.zenPings()) {
      if (zenPing instanceof UnicastZenPing) {
        ((UnicastZenPing)zenPing).clearTemporalReponses();
      }
    }
  }
  return nodes;
}
