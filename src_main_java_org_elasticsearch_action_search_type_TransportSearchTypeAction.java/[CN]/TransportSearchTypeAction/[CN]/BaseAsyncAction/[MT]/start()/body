{
  request.beforeStart();
  int localOperations=0;
  int shardIndex=-1;
  for (  final ShardIterator shardIt : shardsIts) {
    shardIndex++;
    final ShardRouting shard=shardIt.firstOrNull();
    if (shard != null) {
      if (shard.currentNodeId().equals(nodes.localNodeId())) {
        localOperations++;
      }
 else {
        performFirstPhase(shardIndex,shardIt);
      }
    }
 else {
      onFirstPhaseResult(shardIndex,null,null,shardIt,new NoShardAvailableActionException(shardIt.shardId()));
    }
  }
  if (localOperations > 0) {
    if (request.operationThreading() == SearchOperationThreading.SINGLE_THREAD) {
      request.beforeLocalFork();
      threadPool.executor(ThreadPool.Names.SEARCH).execute(new Runnable(){
        @Override public void run(){
          int shardIndex=-1;
          for (          final ShardIterator shardIt : shardsIts) {
            shardIndex++;
            final ShardRouting shard=shardIt.firstOrNull();
            if (shard != null) {
              if (shard.currentNodeId().equals(nodes.localNodeId())) {
                performFirstPhase(shardIndex,shardIt);
              }
            }
          }
        }
      }
);
    }
 else {
      boolean localAsync=request.operationThreading() == SearchOperationThreading.THREAD_PER_SHARD;
      if (localAsync) {
        request.beforeLocalFork();
      }
      shardIndex=-1;
      for (      final ShardIterator shardIt : shardsIts) {
        shardIndex++;
        final int fShardIndex=shardIndex;
        final ShardRouting shard=shardIt.firstOrNull();
        if (shard != null) {
          if (shard.currentNodeId().equals(nodes.localNodeId())) {
            if (localAsync) {
              try {
                threadPool.executor(ThreadPool.Names.SEARCH).execute(new Runnable(){
                  @Override public void run(){
                    performFirstPhase(fShardIndex,shardIt);
                  }
                }
);
              }
 catch (              Throwable t) {
                onFirstPhaseResult(shardIndex,shard,shard.currentNodeId(),shardIt,t);
              }
            }
 else {
              performFirstPhase(fShardIndex,shardIt);
            }
          }
        }
      }
    }
  }
}
