{
  this.request=request;
  this.listener=listener;
  this.clusterState=clusterService.state();
  nodes=clusterState.nodes();
  clusterState.blocks().globalBlockedRaiseException(ClusterBlockLevel.READ);
  String[] concreteIndices=clusterState.metaData().concreteIndices(request.indicesOptions(),request.indices());
  for (  String index : concreteIndices) {
    clusterState.blocks().indexBlockedRaiseException(ClusterBlockLevel.READ,index);
  }
  Map<String,Set<String>> routingMap=clusterState.metaData().resolveSearchRouting(request.routing(),request.indices());
  shardsIts=clusterService.operationRouting().searchShards(clusterState,request.indices(),concreteIndices,routingMap,request.preference());
  expectedSuccessfulOps=shardsIts.size();
  expectedTotalOps=shardsIts.totalSizeWith1ForEmpty();
  firstResults=new AtomicArray<>(shardsIts.size());
  boolean useSlowScroll=false;
  if (request.scroll() != null) {
    for (    DiscoveryNode discoveryNode : clusterState.nodes()) {
      if (discoveryNode.getVersion().before(ParsedScrollId.SCROLL_SEARCH_AFTER_MINIMUM_VERSION)) {
        useSlowScroll=true;
      }
    }
  }
  this.useSlowScroll=useSlowScroll;
}
