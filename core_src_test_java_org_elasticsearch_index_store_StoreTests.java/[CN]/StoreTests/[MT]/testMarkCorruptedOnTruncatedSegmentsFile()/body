{
  IndexWriterConfig iwc=newIndexWriterConfig();
  final ShardId shardId=new ShardId("index","_na_",1);
  DirectoryService directoryService=new LuceneManagedDirectoryService(random());
  Store store=new Store(shardId,INDEX_SETTINGS,directoryService,new DummyShardLock(shardId));
  IndexWriter writer=new IndexWriter(store.directory(),iwc);
  int numDocs=1 + random().nextInt(10);
  List<Document> docs=new ArrayList<>();
  for (int i=0; i < numDocs; i++) {
    Document doc=new Document();
    doc.add(new StringField("id","" + i,random().nextBoolean() ? Field.Store.YES : Field.Store.NO));
    doc.add(new TextField("body",TestUtil.randomRealisticUnicodeString(random()),random().nextBoolean() ? Field.Store.YES : Field.Store.NO));
    doc.add(new SortedDocValuesField("dv",new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));
    docs.add(doc);
  }
  for (  Document d : docs) {
    writer.addDocument(d);
  }
  writer.commit();
  writer.close();
  MockDirectoryWrapper leaf=DirectoryUtils.getLeaf(store.directory(),MockDirectoryWrapper.class);
  if (leaf != null) {
    leaf.setPreventDoubleWrite(false);
  }
  SegmentInfos segmentCommitInfos=store.readLastCommittedSegmentsInfo();
  try (IndexOutput out=store.directory().createOutput(segmentCommitInfos.getSegmentsFileName(),IOContext.DEFAULT)){
  }
   try {
    if (randomBoolean()) {
      store.getMetadata();
    }
 else {
      store.readLastCommittedSegmentsInfo();
    }
    fail("corrupted segments_N file");
  }
 catch (  CorruptIndexException ex) {
  }
  assertTrue(store.isMarkedCorrupted());
  Lucene.cleanLuceneIndex(store.directory());
  store.close();
}
