{
  final ShardId shardId=new ShardId("index","_na_",1);
  DirectoryService directoryService=new LuceneManagedDirectoryService(random());
  Store store=new Store(shardId,INDEX_SETTINGS,directoryService,new DummyShardLock(shardId));
  IndexWriterConfig indexWriterConfig=newIndexWriterConfig(random(),new MockAnalyzer(random())).setCodec(TestUtil.getDefaultCodec());
  indexWriterConfig.setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE);
  IndexWriter writer=new IndexWriter(store.directory(),indexWriterConfig);
  int docs=1 + random().nextInt(100);
  int numCommits=0;
  for (int i=0; i < docs; i++) {
    if (i > 0 && randomIntBetween(0,10) == 0) {
      writer.commit();
      numCommits++;
    }
    Document doc=new Document();
    doc.add(new TextField("id","" + i,random().nextBoolean() ? Field.Store.YES : Field.Store.NO));
    doc.add(new TextField("body",TestUtil.randomRealisticUnicodeString(random()),random().nextBoolean() ? Field.Store.YES : Field.Store.NO));
    doc.add(new SortedDocValuesField("dv",new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));
    writer.addDocument(doc);
  }
  if (numCommits < 1) {
    writer.commit();
    Document doc=new Document();
    doc.add(new TextField("id","" + docs++,random().nextBoolean() ? Field.Store.YES : Field.Store.NO));
    doc.add(new TextField("body",TestUtil.randomRealisticUnicodeString(random()),random().nextBoolean() ? Field.Store.YES : Field.Store.NO));
    doc.add(new SortedDocValuesField("dv",new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));
    writer.addDocument(doc);
  }
  Store.MetadataSnapshot firstMeta=store.getMetadata(null);
  if (random().nextBoolean()) {
    for (int i=0; i < docs; i++) {
      if (random().nextBoolean()) {
        Document doc=new Document();
        doc.add(new TextField("id","" + i,random().nextBoolean() ? Field.Store.YES : Field.Store.NO));
        doc.add(new TextField("body",TestUtil.randomRealisticUnicodeString(random()),random().nextBoolean() ? Field.Store.YES : Field.Store.NO));
        writer.updateDocument(new Term("id","" + i),doc);
      }
    }
  }
  writer.commit();
  writer.close();
  Store.MetadataSnapshot secondMeta=store.getMetadata(null);
  if (randomBoolean()) {
    store.cleanupAndVerify("test",firstMeta);
    String[] strings=store.directory().listAll();
    int numChecksums=0;
    int numNotFound=0;
    for (    String file : strings) {
      if (file.startsWith("extra")) {
        continue;
      }
      assertTrue(firstMeta.contains(file) || file.equals("write.lock"));
      if (secondMeta.contains(file) == false) {
        numNotFound++;
      }
    }
    assertTrue("at least one file must not be in here since we have two commits?",numNotFound > 0);
  }
 else {
    store.cleanupAndVerify("test",secondMeta);
    String[] strings=store.directory().listAll();
    int numChecksums=0;
    int numNotFound=0;
    for (    String file : strings) {
      if (file.startsWith("extra")) {
        continue;
      }
      assertTrue(file,secondMeta.contains(file) || file.equals("write.lock"));
      if (firstMeta.contains(file) == false) {
        numNotFound++;
      }
    }
    assertTrue("at least one file must not be in here since we have two commits?",numNotFound > 0);
  }
  deleteContent(store.directory());
  IOUtils.close(store);
}
