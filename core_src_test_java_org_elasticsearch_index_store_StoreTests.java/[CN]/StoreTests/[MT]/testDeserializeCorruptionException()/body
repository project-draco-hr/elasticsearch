{
  final ShardId shardId=new ShardId(new Index("index"),1);
  final Directory dir=new RAMDirectory();
  DirectoryService directoryService=new DirectoryService(shardId,INDEX_SETTINGS){
    @Override public long throttleTimeInNanos(){
      return 0;
    }
    @Override public Directory newDirectory() throws IOException {
      return dir;
    }
  }
;
  Store store=new Store(shardId,INDEX_SETTINGS,directoryService,new DummyShardLock(shardId));
  CorruptIndexException ex=new CorruptIndexException("foo","bar");
  store.markStoreCorrupted(ex);
  try {
    store.failIfCorrupted();
    fail("should be corrupted");
  }
 catch (  CorruptIndexException e) {
    assertEquals(ex.getMessage(),e.getMessage());
    assertEquals(ex.toString(),e.toString());
    assertArrayEquals(ex.getStackTrace(),e.getStackTrace());
  }
  store.removeCorruptionMarker();
  assertFalse(store.isMarkedCorrupted());
  FileNotFoundException ioe=new FileNotFoundException("foobar");
  store.markStoreCorrupted(ioe);
  try {
    store.failIfCorrupted();
    fail("should be corrupted");
  }
 catch (  CorruptIndexException e) {
    assertEquals("foobar (resource=preexisting_corruption)",e.getMessage());
    assertArrayEquals(ioe.getStackTrace(),e.getCause().getStackTrace());
  }
  store.close();
}
