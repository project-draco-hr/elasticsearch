{
  Directory dir=newDirectory();
  IndexOutput output=dir.createOutput("foo.bar",IOContext.DEFAULT);
  int iters=scaledRandomIntBetween(10,100);
  for (int i=0; i < iters; i++) {
    BytesRef bytesRef=new BytesRef(TestUtil.randomRealisticUnicodeString(random(),10,1024));
    output.writeBytes(bytesRef.bytes,bytesRef.offset,bytesRef.length);
  }
  output.writeInt(CodecUtil.FOOTER_MAGIC);
  output.writeInt(0);
  String checksum=Store.digestToString(output.getChecksum());
  output.writeLong(output.getChecksum() + 1);
  output.close();
  IndexInput indexInput=dir.openInput("foo.bar",IOContext.DEFAULT);
  indexInput.seek(0);
  BytesRef ref=new BytesRef(scaledRandomIntBetween(1,1024));
  long length=indexInput.length();
  IndexOutput verifyingOutput=new Store.LuceneVerifyingIndexOutput(new StoreFileMetaData("foo1.bar",length,checksum),dir.createOutput("foo1.bar",IOContext.DEFAULT));
  length-=8;
  while (length > 0) {
    if (random().nextInt(10) == 0) {
      verifyingOutput.writeByte(indexInput.readByte());
      length--;
    }
 else {
      int min=(int)Math.min(length,ref.bytes.length);
      indexInput.readBytes(ref.bytes,ref.offset,min);
      verifyingOutput.writeBytes(ref.bytes,ref.offset,min);
      length-=min;
    }
  }
  try {
    BytesRef checksumBytes=new BytesRef(8);
    checksumBytes.length=8;
    indexInput.readBytes(checksumBytes.bytes,checksumBytes.offset,checksumBytes.length);
    if (randomBoolean()) {
      verifyingOutput.writeBytes(checksumBytes.bytes,checksumBytes.offset,checksumBytes.length);
    }
 else {
      for (int i=0; i < checksumBytes.length; i++) {
        verifyingOutput.writeByte(checksumBytes.bytes[i]);
      }
    }
    if (randomBoolean()) {
      appendRandomData(verifyingOutput);
    }
 else {
      Store.verify(verifyingOutput);
    }
    fail("should be a corrupted index");
  }
 catch (  CorruptIndexException|IndexFormatTooOldException|IndexFormatTooNewException ex) {
  }
  IOUtils.close(indexInput,verifyingOutput,dir);
}
