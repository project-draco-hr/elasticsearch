{
  final ShardId shardId=new ShardId(new Index("index"),1);
  DirectoryService directoryService=new LuceneManagedDirectoryService(random());
  Store store=new Store(shardId,Settings.EMPTY,directoryService,new DummyShardLock(shardId));
  IndexWriterConfig config=newIndexWriterConfig(random(),new MockAnalyzer(random())).setCodec(TestUtil.getDefaultCodec());
  SnapshotDeletionPolicy deletionPolicy=new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());
  config.setIndexDeletionPolicy(deletionPolicy);
  IndexWriter writer=new IndexWriter(store.directory(),config);
  Document doc=new Document();
  doc.add(new TextField("id","1",Field.Store.NO));
  writer.addDocument(doc);
  Map<String,String> commitData=new HashMap<>(2);
  String syncId="a sync id";
  String translogId="a translog id";
  commitData.put(Engine.SYNC_COMMIT_ID,syncId);
  commitData.put(Translog.TRANSLOG_GENERATION_KEY,translogId);
  writer.setCommitData(commitData);
  writer.commit();
  writer.close();
  Store.MetadataSnapshot metadata;
  if (randomBoolean()) {
    metadata=store.getMetadata();
  }
 else {
    metadata=store.getMetadata(deletionPolicy.snapshot());
  }
  assertFalse(metadata.asMap().isEmpty());
  assertThat(metadata.getCommitUserData().get(Engine.SYNC_COMMIT_ID),equalTo(syncId));
  assertThat(metadata.getCommitUserData().get(Translog.TRANSLOG_GENERATION_KEY),equalTo(translogId));
  TestUtil.checkIndex(store.directory());
  assertDeleteContent(store,directoryService);
  IOUtils.close(store);
}
