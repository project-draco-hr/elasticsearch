{
  JNAKernel32Library kernel=JNAKernel32Library.getInstance();
  Pointer process=null;
  try {
    process=kernel.GetCurrentProcess();
    SizeT size=new SizeT(JvmInfo.jvmInfo().getMem().getHeapInit().getBytes() + (1024 * 1024));
    if (!kernel.SetProcessWorkingSetSize(process,size,size)) {
      logger.warn("Unable to lock JVM memory. Failed to set working set size. Error code {}",Native.getLastError());
    }
 else {
      JNAKernel32Library.MemoryBasicInformation memInfo=new JNAKernel32Library.MemoryBasicInformation();
      long address=0;
      while (kernel.VirtualQueryEx(process,new Pointer(address),memInfo,memInfo.size()) != 0) {
        boolean lockable=memInfo.State.longValue() == JNAKernel32Library.MEM_COMMIT && (memInfo.Protect.longValue() & JNAKernel32Library.PAGE_NOACCESS) != JNAKernel32Library.PAGE_NOACCESS && (memInfo.Protect.longValue() & JNAKernel32Library.PAGE_GUARD) != JNAKernel32Library.PAGE_GUARD;
        if (lockable) {
          kernel.VirtualLock(memInfo.BaseAddress,new SizeT(memInfo.RegionSize.longValue()));
        }
        address+=memInfo.RegionSize.longValue();
      }
      LOCAL_MLOCKALL=true;
    }
  }
 catch (  UnsatisfiedLinkError e) {
  }
 finally {
    if (process != null) {
      kernel.CloseHandle(process);
    }
  }
}
