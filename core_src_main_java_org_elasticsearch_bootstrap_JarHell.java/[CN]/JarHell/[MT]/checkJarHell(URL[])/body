{
  ESLogger logger=Loggers.getLogger(JarHell.class);
  String javaHome=System.getProperty("java.home");
  logger.debug("java.home: {}",javaHome);
  final Map<String,Path> clazzes=new HashMap<>(32768);
  Set<Path> seenJars=new HashSet<>();
  for (  final URL url : urls) {
    final Path path=PathUtils.get(url.toURI());
    if (path.startsWith(javaHome)) {
      logger.debug("excluding system resource: {}",path);
      continue;
    }
    if (path.toString().endsWith(".jar")) {
      if (!seenJars.add(path)) {
        logger.debug("excluding duplicate classpath element: {}",path);
        continue;
      }
      logger.debug("examining jar: {}",path);
      try (JarFile file=new JarFile(path.toString())){
        Manifest manifest=file.getManifest();
        if (manifest != null) {
          checkManifest(manifest,path);
        }
        Enumeration<JarEntry> elements=file.entries();
        while (elements.hasMoreElements()) {
          String entry=elements.nextElement().getName();
          if (entry.endsWith(".class")) {
            entry=entry.replace('/','.').substring(0,entry.length() - 6);
            checkClass(clazzes,entry,path);
          }
        }
      }
     }
 else {
      logger.debug("examining directory: {}",path);
      final Path root=PathUtils.get(url.toURI());
      final String sep=root.getFileSystem().getSeparator();
      Files.walkFileTree(root,new SimpleFileVisitor<Path>(){
        @Override public FileVisitResult visitFile(        Path file,        BasicFileAttributes attrs) throws IOException {
          String entry=root.relativize(file).toString();
          if (entry.endsWith(".class")) {
            entry=entry.replace(sep,".").substring(0,entry.length() - 6);
            checkClass(clazzes,entry,path);
          }
          return super.visitFile(file,attrs);
        }
      }
);
    }
  }
}
