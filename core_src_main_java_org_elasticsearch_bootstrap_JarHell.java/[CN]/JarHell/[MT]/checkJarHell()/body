{
  ClassLoader loader=JarHell.class.getClassLoader();
  if (loader instanceof URLClassLoader == false) {
    return;
  }
  final Map<String,URL> clazzes=new HashMap<>(32768);
  Set<String> seenJars=new HashSet<>();
  for (  final URL url : ((URLClassLoader)loader).getURLs()) {
    String path=url.getPath();
    if (path.endsWith(".jar")) {
      if (!seenJars.add(path)) {
        continue;
      }
      try (JarFile file=new JarFile(url.getPath())){
        Enumeration<JarEntry> elements=file.entries();
        while (elements.hasMoreElements()) {
          String entry=elements.nextElement().getName();
          if (entry.endsWith(".class")) {
            entry=entry.replace('/','.').substring(0,entry.length() - 6);
            checkClass(clazzes,entry,url);
          }
        }
      }
     }
 else {
      final Path root=PathUtils.get(url.toURI());
      final String sep=root.getFileSystem().getSeparator();
      Files.walkFileTree(root,new SimpleFileVisitor<Path>(){
        @Override public FileVisitResult visitFile(        Path file,        BasicFileAttributes attrs) throws IOException {
          String entry=root.relativize(file).toString();
          if (entry.endsWith(".class")) {
            entry=entry.replace(sep,".").substring(0,entry.length() - 6);
            checkClass(clazzes,entry,url);
          }
          return super.visitFile(file,attrs);
        }
      }
);
    }
  }
}
