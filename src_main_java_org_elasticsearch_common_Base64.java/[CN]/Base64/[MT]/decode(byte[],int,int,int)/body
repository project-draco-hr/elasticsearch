{
  if (source == null) {
    throw new NullPointerException("Cannot decode null source array.");
  }
  if (off < 0 || off + len > source.length) {
    throw new IllegalArgumentException(String.format(Locale.ROOT,"Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));
  }
  if (len == 0) {
    return new byte[0];
  }
 else   if (len < 4) {
    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);
  }
  byte[] DECODABET=getDecodabet(options);
  int len34=len * 3 / 4;
  byte[] outBuff=new byte[len34];
  int outBuffPosn=0;
  byte[] b4=new byte[4];
  int b4Posn=0;
  int i=0;
  byte sbiDecode=0;
  for (i=off; i < off + len; i++) {
    sbiDecode=DECODABET[source[i] & 0xFF];
    if (sbiDecode >= WHITE_SPACE_ENC) {
      if (sbiDecode >= EQUALS_SIGN_ENC) {
        b4[b4Posn++]=source[i];
        if (b4Posn > 3) {
          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);
          b4Posn=0;
          if (source[i] == EQUALS_SIGN) {
            break;
          }
        }
      }
    }
 else {
      throw new java.io.IOException(String.format(Locale.ROOT,"Bad Base64 input character decimal %d in array position %d",((int)source[i]) & 0xFF,i));
    }
  }
  byte[] out=new byte[outBuffPosn];
  System.arraycopy(outBuff,0,out,0,outBuffPosn);
  return out;
}
