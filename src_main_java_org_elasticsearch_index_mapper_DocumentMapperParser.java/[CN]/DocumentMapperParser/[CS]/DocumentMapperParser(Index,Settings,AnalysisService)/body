{
  super(index,indexSettings);
  this.analysisService=analysisService;
  MapBuilder<String,Mapper.TypeParser> typeParsersBuilder=new MapBuilder<String,Mapper.TypeParser>().put(ByteFieldMapper.CONTENT_TYPE,new ByteFieldMapper.TypeParser()).put(ShortFieldMapper.CONTENT_TYPE,new ShortFieldMapper.TypeParser()).put(IntegerFieldMapper.CONTENT_TYPE,new IntegerFieldMapper.TypeParser()).put(LongFieldMapper.CONTENT_TYPE,new LongFieldMapper.TypeParser()).put(FloatFieldMapper.CONTENT_TYPE,new FloatFieldMapper.TypeParser()).put(DoubleFieldMapper.CONTENT_TYPE,new DoubleFieldMapper.TypeParser()).put(BooleanFieldMapper.CONTENT_TYPE,new BooleanFieldMapper.TypeParser()).put(BinaryFieldMapper.CONTENT_TYPE,new BinaryFieldMapper.TypeParser()).put(DateFieldMapper.CONTENT_TYPE,new DateFieldMapper.TypeParser()).put(IpFieldMapper.CONTENT_TYPE,new IpFieldMapper.TypeParser()).put(StringFieldMapper.CONTENT_TYPE,new StringFieldMapper.TypeParser()).put(ObjectMapper.CONTENT_TYPE,new ObjectMapper.TypeParser()).put(ObjectMapper.NESTED_CONTENT_TYPE,new ObjectMapper.TypeParser()).put(MultiFieldMapper.CONTENT_TYPE,new MultiFieldMapper.TypeParser()).put(GeoPointFieldMapper.CONTENT_TYPE,new GeoPointFieldMapper.TypeParser());
  if (ShapesAvailability.JTS_AVAILABLE) {
    typeParsersBuilder.put(GeoShapeFieldMapper.CONTENT_TYPE,new GeoShapeFieldMapper.TypeParser());
  }
  typeParsers=typeParsersBuilder.immutableMap();
  rootTypeParsers=new MapBuilder<String,Mapper.TypeParser>().put(SizeFieldMapper.NAME,new SizeFieldMapper.TypeParser()).put(IndexFieldMapper.NAME,new IndexFieldMapper.TypeParser()).put(SourceFieldMapper.NAME,new SourceFieldMapper.TypeParser()).put(TypeFieldMapper.NAME,new TypeFieldMapper.TypeParser()).put(AllFieldMapper.NAME,new AllFieldMapper.TypeParser()).put(AnalyzerMapper.NAME,new AnalyzerMapper.TypeParser()).put(BoostFieldMapper.NAME,new BoostFieldMapper.TypeParser()).put(ParentFieldMapper.NAME,new ParentFieldMapper.TypeParser()).put(RoutingFieldMapper.NAME,new RoutingFieldMapper.TypeParser()).put(TimestampFieldMapper.NAME,new TimestampFieldMapper.TypeParser()).put(TTLFieldMapper.NAME,new TTLFieldMapper.TypeParser()).put(UidFieldMapper.NAME,new UidFieldMapper.TypeParser()).put(IdFieldMapper.NAME,new IdFieldMapper.TypeParser()).immutableMap();
}
