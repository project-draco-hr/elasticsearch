{
  if (type == null) {
    throw new MapperParsingException("Failed to derive type");
  }
  if (defaultSource != null) {
    Tuple<String,Map<String,Object>> t=extractMapping(MapperService.DEFAULT_MAPPING,defaultSource);
    if (t.v2() != null) {
      XContentHelper.mergeDefaults(mapping,t.v2());
    }
  }
  Mapper.TypeParser.ParserContext parserContext=parserContext();
  DocumentMapper.Builder docBuilder=doc(index.name(),indexSettings,(RootObjectMapper.Builder)rootObjectTypeParser.parse(type,mapping,parserContext));
  Iterator<Map.Entry<String,Object>> iterator=mapping.entrySet().iterator();
  while (iterator.hasNext()) {
    Map.Entry<String,Object> entry=iterator.next();
    String fieldName=Strings.toUnderscoreCase(entry.getKey());
    Object fieldNode=entry.getValue();
    if ("transform".equals(fieldName)) {
      iterator.remove();
      if (fieldNode instanceof Map) {
        parseTransform(docBuilder,(Map<String,Object>)fieldNode,parserContext.indexVersionCreated());
      }
 else       if (fieldNode instanceof List) {
        for (        Object transformItem : (List)fieldNode) {
          if (!(transformItem instanceof Map)) {
            throw new MapperParsingException("Elements of transform list must be objects but one was:  " + fieldNode);
          }
          parseTransform(docBuilder,(Map<String,Object>)transformItem,parserContext.indexVersionCreated());
        }
      }
 else {
        throw new MapperParsingException("Transform must be an object or an array but was:  " + fieldNode);
      }
    }
 else {
      Mapper.TypeParser typeParser=rootTypeParsers.get(fieldName);
      if (typeParser != null) {
        iterator.remove();
        Map<String,Object> fieldNodeMap=(Map<String,Object>)fieldNode;
        docBuilder.put(typeParser.parse(fieldName,fieldNodeMap,parserContext));
        fieldNodeMap.remove("type");
        checkNoRemainingFields(fieldName,fieldNodeMap,parserContext.indexVersionCreated());
      }
    }
  }
  ImmutableMap<String,Object> attributes=ImmutableMap.of();
  if (mapping.containsKey("_meta")) {
    attributes=ImmutableMap.copyOf((Map<String,Object>)mapping.remove("_meta"));
  }
  docBuilder.meta(attributes);
  checkNoRemainingFields(mapping,parserContext.indexVersionCreated(),"Root mapping definition has unsupported parameters: ");
  DocumentMapper documentMapper=docBuilder.build(mapperService,this);
  documentMapper.refreshSource();
  return documentMapper;
}
