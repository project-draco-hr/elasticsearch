{
  SearchResponse response=client().prepareSearch("idx").setTypes("type1").addAggregation(nested("nested1","nested1").subAggregation(terms("field2").field("nested1.field2").subAggregation(reverseNested("nested1_to_field1").subAggregation(terms("field1").field("field1").collectMode(randomFrom(SubAggCollectionMode.values())))))).get();
  assertSearchResponse(response);
  Nested nested=response.getAggregations().get("nested1");
  assertThat(nested,notNullValue());
  assertThat(nested.getName(),equalTo("nested1"));
  assertThat(nested.getDocCount(),equalTo(25L));
  assertThat(nested.getAggregations().asList().isEmpty(),is(false));
  Terms usernames=nested.getAggregations().get("field2");
  assertThat(usernames,notNullValue());
  assertThat(usernames.getBuckets().size(),equalTo(9));
  List<Terms.Bucket> usernameBuckets=new ArrayList<>(usernames.getBuckets());
  Terms.Bucket bucket=usernameBuckets.get(0);
  assertThat(bucket.getKeyAsString(),equalTo("1"));
  assertThat(bucket.getDocCount(),equalTo(6L));
  ReverseNested reverseNested=bucket.getAggregations().get("nested1_to_field1");
  assertThat(reverseNested.getProperty("_count"),equalTo(5L));
  Terms tags=reverseNested.getAggregations().get("field1");
  assertThat(reverseNested.getProperty("field1"),sameInstance(tags));
  List<Terms.Bucket> tagsBuckets=new ArrayList<>(tags.getBuckets());
  assertThat(tagsBuckets.size(),equalTo(6));
  assertThat(tagsBuckets.get(0).getKeyAsString(),equalTo("c"));
  assertThat(tagsBuckets.get(0).getDocCount(),equalTo(4L));
  assertThat(tagsBuckets.get(1).getKeyAsString(),equalTo("a"));
  assertThat(tagsBuckets.get(1).getDocCount(),equalTo(3L));
  assertThat(tagsBuckets.get(2).getKeyAsString(),equalTo("e"));
  assertThat(tagsBuckets.get(2).getDocCount(),equalTo(2L));
  assertThat(tagsBuckets.get(3).getKeyAsString(),equalTo("b"));
  assertThat(tagsBuckets.get(3).getDocCount(),equalTo(1L));
  assertThat(tagsBuckets.get(4).getKeyAsString(),equalTo("d"));
  assertThat(tagsBuckets.get(4).getDocCount(),equalTo(1L));
  assertThat(tagsBuckets.get(5).getKeyAsString(),equalTo("x"));
  assertThat(tagsBuckets.get(5).getDocCount(),equalTo(1L));
  bucket=usernameBuckets.get(1);
  assertThat(bucket.getKeyAsString(),equalTo("4"));
  assertThat(bucket.getDocCount(),equalTo(4L));
  reverseNested=bucket.getAggregations().get("nested1_to_field1");
  tags=reverseNested.getAggregations().get("field1");
  tagsBuckets=new ArrayList<>(tags.getBuckets());
  assertThat(tagsBuckets.size(),equalTo(5));
  assertThat(tagsBuckets.get(0).getKeyAsString(),equalTo("a"));
  assertThat(tagsBuckets.get(0).getDocCount(),equalTo(3L));
  assertThat(tagsBuckets.get(1).getKeyAsString(),equalTo("b"));
  assertThat(tagsBuckets.get(1).getDocCount(),equalTo(2L));
  assertThat(tagsBuckets.get(2).getKeyAsString(),equalTo("c"));
  assertThat(tagsBuckets.get(2).getDocCount(),equalTo(2L));
  assertThat(tagsBuckets.get(3).getKeyAsString(),equalTo("d"));
  assertThat(tagsBuckets.get(3).getDocCount(),equalTo(1L));
  assertThat(tagsBuckets.get(4).getKeyAsString(),equalTo("e"));
  assertThat(tagsBuckets.get(4).getDocCount(),equalTo(1L));
  bucket=usernameBuckets.get(2);
  assertThat(bucket.getKeyAsString(),equalTo("7"));
  assertThat(bucket.getDocCount(),equalTo(3L));
  reverseNested=bucket.getAggregations().get("nested1_to_field1");
  tags=reverseNested.getAggregations().get("field1");
  tagsBuckets=new ArrayList<>(tags.getBuckets());
  assertThat(tagsBuckets.size(),equalTo(5));
  assertThat(tagsBuckets.get(0).getKeyAsString(),equalTo("c"));
  assertThat(tagsBuckets.get(0).getDocCount(),equalTo(2L));
  assertThat(tagsBuckets.get(1).getKeyAsString(),equalTo("d"));
  assertThat(tagsBuckets.get(1).getDocCount(),equalTo(2L));
  assertThat(tagsBuckets.get(2).getKeyAsString(),equalTo("e"));
  assertThat(tagsBuckets.get(2).getDocCount(),equalTo(2L));
  assertThat(tagsBuckets.get(3).getKeyAsString(),equalTo("a"));
  assertThat(tagsBuckets.get(3).getDocCount(),equalTo(1L));
  assertThat(tagsBuckets.get(4).getKeyAsString(),equalTo("b"));
  assertThat(tagsBuckets.get(4).getDocCount(),equalTo(1L));
  bucket=usernameBuckets.get(3);
  assertThat(bucket.getKeyAsString(),equalTo("2"));
  assertThat(bucket.getDocCount(),equalTo(2L));
  reverseNested=bucket.getAggregations().get("nested1_to_field1");
  tags=reverseNested.getAggregations().get("field1");
  tagsBuckets=new ArrayList<>(tags.getBuckets());
  assertThat(tagsBuckets.size(),equalTo(3));
  assertThat(tagsBuckets.get(0).getKeyAsString(),equalTo("a"));
  assertThat(tagsBuckets.get(0).getDocCount(),equalTo(2L));
  assertThat(tagsBuckets.get(1).getKeyAsString(),equalTo("c"));
  assertThat(tagsBuckets.get(1).getDocCount(),equalTo(2L));
  assertThat(tagsBuckets.get(2).getKeyAsString(),equalTo("b"));
  assertThat(tagsBuckets.get(2).getDocCount(),equalTo(1L));
  bucket=usernameBuckets.get(4);
  assertThat(bucket.getKeyAsString(),equalTo("3"));
  assertThat(bucket.getDocCount(),equalTo(2L));
  reverseNested=bucket.getAggregations().get("nested1_to_field1");
  tags=reverseNested.getAggregations().get("field1");
  tagsBuckets=new ArrayList<>(tags.getBuckets());
  assertThat(tagsBuckets.size(),equalTo(3));
  assertThat(tagsBuckets.get(0).getKeyAsString(),equalTo("a"));
  assertThat(tagsBuckets.get(0).getDocCount(),equalTo(2L));
  assertThat(tagsBuckets.get(1).getKeyAsString(),equalTo("b"));
  assertThat(tagsBuckets.get(1).getDocCount(),equalTo(1L));
  assertThat(tagsBuckets.get(2).getKeyAsString(),equalTo("c"));
  assertThat(tagsBuckets.get(2).getDocCount(),equalTo(1L));
  bucket=usernameBuckets.get(5);
  assertThat(bucket.getKeyAsString(),equalTo("5"));
  assertThat(bucket.getDocCount(),equalTo(2L));
  reverseNested=bucket.getAggregations().get("nested1_to_field1");
  tags=reverseNested.getAggregations().get("field1");
  tagsBuckets=new ArrayList<>(tags.getBuckets());
  assertThat(tagsBuckets.size(),equalTo(4));
  assertThat(tagsBuckets.get(0).getKeyAsString(),equalTo("b"));
  assertThat(tagsBuckets.get(0).getDocCount(),equalTo(1L));
  assertThat(tagsBuckets.get(1).getKeyAsString(),equalTo("c"));
  assertThat(tagsBuckets.get(1).getDocCount(),equalTo(1L));
  assertThat(tagsBuckets.get(2).getKeyAsString(),equalTo("d"));
  assertThat(tagsBuckets.get(2).getDocCount(),equalTo(1L));
  assertThat(tagsBuckets.get(3).getKeyAsString(),equalTo("z"));
  assertThat(tagsBuckets.get(3).getDocCount(),equalTo(1L));
  bucket=usernameBuckets.get(6);
  assertThat(bucket.getKeyAsString(),equalTo("6"));
  assertThat(bucket.getDocCount(),equalTo(2L));
  reverseNested=bucket.getAggregations().get("nested1_to_field1");
  tags=reverseNested.getAggregations().get("field1");
  tagsBuckets=new ArrayList<>(tags.getBuckets());
  assertThat(tagsBuckets.size(),equalTo(4));
  assertThat(tagsBuckets.get(0).getKeyAsString(),equalTo("c"));
  assertThat(tagsBuckets.get(0).getDocCount(),equalTo(2L));
  assertThat(tagsBuckets.get(1).getKeyAsString(),equalTo("b"));
  assertThat(tagsBuckets.get(1).getDocCount(),equalTo(1L));
  assertThat(tagsBuckets.get(2).getKeyAsString(),equalTo("d"));
  assertThat(tagsBuckets.get(2).getDocCount(),equalTo(1L));
  assertThat(tagsBuckets.get(3).getKeyAsString(),equalTo("y"));
  assertThat(tagsBuckets.get(3).getDocCount(),equalTo(1L));
  bucket=usernameBuckets.get(7);
  assertThat(bucket.getKeyAsString(),equalTo("8"));
  assertThat(bucket.getDocCount(),equalTo(2L));
  reverseNested=bucket.getAggregations().get("nested1_to_field1");
  tags=reverseNested.getAggregations().get("field1");
  tagsBuckets=new ArrayList<>(tags.getBuckets());
  assertThat(tagsBuckets.size(),equalTo(4));
  assertThat(tagsBuckets.get(0).getKeyAsString(),equalTo("c"));
  assertThat(tagsBuckets.get(0).getDocCount(),equalTo(2L));
  assertThat(tagsBuckets.get(1).getKeyAsString(),equalTo("d"));
  assertThat(tagsBuckets.get(1).getDocCount(),equalTo(1L));
  assertThat(tagsBuckets.get(2).getKeyAsString(),equalTo("e"));
  assertThat(tagsBuckets.get(2).getDocCount(),equalTo(1L));
  assertThat(tagsBuckets.get(3).getKeyAsString(),equalTo("x"));
  assertThat(tagsBuckets.get(3).getDocCount(),equalTo(1L));
  bucket=usernameBuckets.get(8);
  assertThat(bucket.getKeyAsString(),equalTo("9"));
  assertThat(bucket.getDocCount(),equalTo(2L));
  reverseNested=bucket.getAggregations().get("nested1_to_field1");
  tags=reverseNested.getAggregations().get("field1");
  tagsBuckets=new ArrayList<>(tags.getBuckets());
  assertThat(tagsBuckets.size(),equalTo(4));
  assertThat(tagsBuckets.get(0).getKeyAsString(),equalTo("c"));
  assertThat(tagsBuckets.get(0).getDocCount(),equalTo(1L));
  assertThat(tagsBuckets.get(1).getKeyAsString(),equalTo("d"));
  assertThat(tagsBuckets.get(1).getDocCount(),equalTo(1L));
  assertThat(tagsBuckets.get(2).getKeyAsString(),equalTo("e"));
  assertThat(tagsBuckets.get(2).getDocCount(),equalTo(1L));
  assertThat(tagsBuckets.get(3).getKeyAsString(),equalTo("z"));
  assertThat(tagsBuckets.get(3).getDocCount(),equalTo(1L));
}
