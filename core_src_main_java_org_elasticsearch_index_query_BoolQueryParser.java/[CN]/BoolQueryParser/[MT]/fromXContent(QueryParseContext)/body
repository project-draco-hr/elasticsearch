{
  XContentParser parser=parseContext.parser();
  boolean disableCoord=BoolQueryBuilder.DISABLE_COORD_DEFAULT;
  boolean adjustPureNegative=BoolQueryBuilder.ADJUST_PURE_NEGATIVE_DEFAULT;
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  String minimumShouldMatch=null;
  final List<QueryBuilder> mustClauses=newArrayList();
  final List<QueryBuilder> mustNotClauses=newArrayList();
  final List<QueryBuilder> shouldClauses=newArrayList();
  final List<QueryBuilder> filterClauses=newArrayList();
  String queryName=null;
  String currentFieldName=null;
  XContentParser.Token token;
  QueryBuilder query;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (parseContext.isDeprecatedSetting(currentFieldName)) {
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
switch (currentFieldName) {
case "must":
        query=parseContext.parseInnerQueryBuilder();
      mustClauses.add(query);
    break;
case "should":
  query=parseContext.parseInnerQueryBuilder();
shouldClauses.add(query);
if (query != EmptyQueryBuilder.PROTOTYPE) {
if (parseContext.isFilter() && minimumShouldMatch == null) {
  minimumShouldMatch="1";
}
}
break;
case "filter":
query=parseContext.parseInnerFilterToQueryBuilder();
filterClauses.add(query);
break;
case "must_not":
case "mustNot":
query=parseContext.parseInnerFilterToQueryBuilder();
mustNotClauses.add(query);
break;
default :
throw new QueryParsingException(parseContext,"[bool] query does not support [" + currentFieldName + "]");
}
}
 else if (token == XContentParser.Token.START_ARRAY) {
while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
switch (currentFieldName) {
case "must":
query=parseContext.parseInnerQueryBuilder();
mustClauses.add(query);
break;
case "should":
query=parseContext.parseInnerQueryBuilder();
shouldClauses.add(query);
if (query != EmptyQueryBuilder.PROTOTYPE) {
if (parseContext.isFilter() && minimumShouldMatch == null) {
minimumShouldMatch="1";
}
}
break;
case "filter":
query=parseContext.parseInnerFilterToQueryBuilder();
filterClauses.add(query);
break;
case "must_not":
case "mustNot":
query=parseContext.parseInnerFilterToQueryBuilder();
mustNotClauses.add(query);
break;
default :
throw new QueryParsingException(parseContext,"bool query does not support [" + currentFieldName + "]");
}
}
}
 else if (token.isValue()) {
if ("disable_coord".equals(currentFieldName) || "disableCoord".equals(currentFieldName)) {
disableCoord=parser.booleanValue();
}
 else if ("minimum_should_match".equals(currentFieldName) || "minimumShouldMatch".equals(currentFieldName)) {
minimumShouldMatch=parser.textOrNull();
}
 else if ("boost".equals(currentFieldName)) {
boost=parser.floatValue();
}
 else if ("minimum_number_should_match".equals(currentFieldName) || "minimumNumberShouldMatch".equals(currentFieldName)) {
minimumShouldMatch=parser.textOrNull();
}
 else if ("adjust_pure_negative".equals(currentFieldName) || "adjustPureNegative".equals(currentFieldName)) {
adjustPureNegative=parser.booleanValue();
}
 else if ("_name".equals(currentFieldName)) {
queryName=parser.text();
}
 else {
throw new QueryParsingException(parseContext,"[bool] query does not support [" + currentFieldName + "]");
}
}
}
BoolQueryBuilder boolQuery=new BoolQueryBuilder();
for (QueryBuilder queryBuilder : mustClauses) {
boolQuery.must(queryBuilder);
}
for (QueryBuilder queryBuilder : mustNotClauses) {
boolQuery.mustNot(queryBuilder);
}
for (QueryBuilder queryBuilder : shouldClauses) {
boolQuery.should(queryBuilder);
}
for (QueryBuilder queryBuilder : filterClauses) {
boolQuery.filter(queryBuilder);
}
boolQuery.boost(boost);
boolQuery.disableCoord(disableCoord);
boolQuery.adjustPureNegative(adjustPureNegative);
boolQuery.minimumNumberShouldMatch(minimumShouldMatch);
boolQuery.queryName(queryName);
return boolQuery;
}
