{
  FieldSelector fieldSelector=buildFieldSelectors(context);
  InternalSearchHit[] hits=new InternalSearchHit[context.docIdsToLoadSize()];
  for (int index=0; index < context.docIdsToLoadSize(); index++) {
    int docId=context.docIdsToLoad()[context.docIdsToLoadFrom() + index];
    Document doc=loadDocument(context,fieldSelector,docId);
    Uid uid=extractUid(context,doc);
    DocumentMapper documentMapper=context.mapperService().type(uid.type());
    byte[] source=extractSource(doc,documentMapper);
    InternalSearchHit searchHit=new InternalSearchHit(docId,uid.id(),uid.type(),source,null);
    hits[index]=searchHit;
    for (    Object oField : doc.getFields()) {
      Fieldable field=(Fieldable)oField;
      String name=field.name();
      if (name.equals(UidFieldMapper.NAME)) {
        continue;
      }
      if (name.equals(SourceFieldMapper.NAME)) {
        continue;
      }
      Object value=null;
      FieldMappers fieldMappers=documentMapper.mappers().indexName(field.name());
      if (fieldMappers != null) {
        FieldMapper mapper=fieldMappers.mapper();
        if (mapper != null) {
          name=mapper.names().fullName();
          value=mapper.valueForSearch(field);
        }
      }
      if (value == null) {
        if (field.isBinary()) {
          value=field.getBinaryValue();
        }
 else {
          value=field.stringValue();
        }
      }
      if (searchHit.fields() == null) {
        searchHit.fields(new HashMap<String,SearchHitField>(2));
      }
      SearchHitField hitField=searchHit.fields().get(name);
      if (hitField == null) {
        hitField=new InternalSearchHitField(name,new ArrayList<Object>(2));
        searchHit.fields().put(name,hitField);
      }
      hitField.values().add(value);
    }
    if (context.hasScriptFields()) {
      int readerIndex=context.searcher().readerIndex(docId);
      IndexReader subReader=context.searcher().subReaders()[readerIndex];
      int subDoc=docId - context.searcher().docStarts()[readerIndex];
      for (      ScriptFieldsContext.ScriptField scriptField : context.scriptFields().fields()) {
        scriptField.script().setNextReader(subReader);
        Object value=scriptField.script().execute(subDoc);
        if (searchHit.fields() == null) {
          searchHit.fields(new HashMap<String,SearchHitField>(2));
        }
        SearchHitField hitField=searchHit.fields().get(scriptField.name());
        if (hitField == null) {
          hitField=new InternalSearchHitField(scriptField.name(),new ArrayList<Object>(2));
          searchHit.fields().put(scriptField.name(),hitField);
        }
        hitField.values().add(value);
      }
    }
    if (!context.parsedQuery().namedFilters().isEmpty()) {
      int readerIndex=context.searcher().readerIndex(docId);
      IndexReader subReader=context.searcher().subReaders()[readerIndex];
      int subDoc=docId - context.searcher().docStarts()[readerIndex];
      List<String> matchedFilters=Lists.newArrayListWithCapacity(2);
      for (      Map.Entry<String,Filter> entry : context.parsedQuery().namedFilters().entrySet()) {
        String name=entry.getKey();
        Filter filter=entry.getValue();
        filter=context.filterCache().cache(filter);
        try {
          DocIdSet docIdSet=filter.getDocIdSet(subReader);
          if (docIdSet instanceof DocSet && ((DocSet)docIdSet).get(subDoc)) {
            matchedFilters.add(name);
          }
        }
 catch (        IOException e) {
        }
      }
      searchHit.matchedFilters(matchedFilters.toArray(new String[matchedFilters.size()]));
    }
    doExplanation(context,docId,searchHit);
  }
  context.fetchResult().hits(new InternalSearchHits(hits,context.queryResult().topDocs().totalHits,context.queryResult().topDocs().getMaxScore()));
  highlightPhase.execute(context);
}
