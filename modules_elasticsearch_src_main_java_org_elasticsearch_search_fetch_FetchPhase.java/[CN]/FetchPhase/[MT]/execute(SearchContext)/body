{
  FieldSelector fieldSelector=buildFieldSelectors(context);
  InternalSearchHit[] hits=new InternalSearchHit[context.docIdsToLoadSize()];
  for (int index=0; index < context.docIdsToLoadSize(); index++) {
    int docId=context.docIdsToLoad()[context.docIdsToLoadFrom() + index];
    Document doc=loadDocument(context,fieldSelector,docId);
    Uid uid=extractUid(context,doc);
    DocumentMapper documentMapper=context.mapperService().documentMapper(uid.type());
    byte[] source=extractSource(doc,documentMapper);
    InternalSearchHit searchHit=new InternalSearchHit(docId,uid.id(),uid.type(),source,null);
    hits[index]=searchHit;
    for (    Object oField : doc.getFields()) {
      Fieldable field=(Fieldable)oField;
      String name=field.name();
      if (name.equals(UidFieldMapper.NAME)) {
        continue;
      }
      if (name.equals(SourceFieldMapper.NAME)) {
        continue;
      }
      Object value=null;
      FieldMappers fieldMappers=documentMapper.mappers().indexName(field.name());
      if (fieldMappers != null) {
        FieldMapper mapper=fieldMappers.mapper();
        if (mapper != null) {
          name=mapper.names().fullName();
          value=mapper.valueForSearch(field);
        }
      }
      if (value == null) {
        if (field.isBinary()) {
          value=field.getBinaryValue();
        }
 else {
          value=field.stringValue();
        }
      }
      if (searchHit.fieldsOrNull() == null) {
        searchHit.fields(new HashMap<String,SearchHitField>(2));
      }
      SearchHitField hitField=searchHit.fields().get(name);
      if (hitField == null) {
        hitField=new InternalSearchHitField(name,new ArrayList<Object>(2));
        searchHit.fields().put(name,hitField);
      }
      hitField.values().add(value);
    }
    boolean hitPhaseExecutionRequired=false;
    for (    SearchHitPhase hitPhase : hitPhases) {
      if (hitPhase.executionNeeded(context)) {
        hitPhaseExecutionRequired=true;
        break;
      }
    }
    if (hitPhaseExecutionRequired) {
      int readerIndex=context.searcher().readerIndex(docId);
      IndexReader subReader=context.searcher().subReaders()[readerIndex];
      int subDoc=docId - context.searcher().docStarts()[readerIndex];
      for (      SearchHitPhase hitPhase : hitPhases) {
        if (hitPhase.executionNeeded(context)) {
          hitPhase.execute(context,searchHit,uid,subReader,subDoc);
        }
      }
    }
  }
  context.fetchResult().hits(new InternalSearchHits(hits,context.queryResult().topDocs().totalHits,context.queryResult().topDocs().getMaxScore()));
}
