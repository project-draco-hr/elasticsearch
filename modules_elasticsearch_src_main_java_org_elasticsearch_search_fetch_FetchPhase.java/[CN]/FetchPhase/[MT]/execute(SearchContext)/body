{
  FieldSelector fieldSelector=buildFieldSelectors(context);
  InternalSearchHit[] hits=new InternalSearchHit[context.docIdsToLoadSize()];
  int index=0;
  for (int docIdIdx=context.docIdsToLoadFrom(); docIdIdx < context.docIdsToLoadSize(); docIdIdx++) {
    int docId=context.docIdsToLoad()[docIdIdx];
    Document doc=loadDocument(context,fieldSelector,docId);
    Uid uid=extractUid(context,doc);
    DocumentMapper documentMapper=context.mapperService().type(uid.type());
    byte[] source=extractSource(doc,documentMapper);
    InternalSearchHit searchHit=new InternalSearchHit(docId,uid.id(),uid.type(),source,null);
    hits[index]=searchHit;
    for (    Object oField : doc.getFields()) {
      Fieldable field=(Fieldable)oField;
      String name=field.name();
      Object value=null;
      FieldMappers fieldMappers=documentMapper.mappers().indexName(field.name());
      if (fieldMappers != null) {
        FieldMapper mapper=fieldMappers.mapper();
        if (mapper != null) {
          name=mapper.names().fullName();
          value=mapper.valueForSearch(field);
        }
      }
      if (value == null) {
        if (field.isBinary()) {
          value=field.getBinaryValue();
        }
 else {
          value=field.stringValue();
        }
      }
      if (searchHit.fields() == null) {
        searchHit.fields(new HashMap<String,SearchHitField>(2));
      }
      SearchHitField hitField=searchHit.fields().get(name);
      if (hitField == null) {
        hitField=new InternalSearchHitField(name,new ArrayList<Object>(2));
        searchHit.fields().put(name,hitField);
      }
      hitField.values().add(value);
    }
    doExplanation(context,docId,searchHit);
    index++;
  }
  context.fetchResult().hits(new InternalSearchHits(hits,context.queryResult().topDocs().totalHits));
  highlightPhase.execute(context);
}
