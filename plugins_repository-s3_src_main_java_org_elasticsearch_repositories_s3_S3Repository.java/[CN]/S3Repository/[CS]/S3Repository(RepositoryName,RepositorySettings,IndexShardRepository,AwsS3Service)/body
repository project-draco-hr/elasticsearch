{
  super(name.getName(),repositorySettings,indexShardRepository);
  String bucket=repositorySettings.settings().get("bucket",settings.get("repositories.s3.bucket"));
  if (bucket == null) {
    throw new RepositoryException(name.name(),"No bucket defined for s3 gateway");
  }
  String endpoint=repositorySettings.settings().get("endpoint",settings.get("repositories.s3.endpoint"));
  String protocol=repositorySettings.settings().get("protocol",settings.get("repositories.s3.protocol"));
  String region=repositorySettings.settings().get("region",settings.get("repositories.s3.region"));
  if (region == null) {
    String regionSetting=repositorySettings.settings().get("cloud.aws.region",settings.get("cloud.aws.region"));
    if (regionSetting != null) {
      regionSetting=regionSetting.toLowerCase(Locale.ENGLISH);
      if ("us-east".equals(regionSetting) || "us-east-1".equals(regionSetting)) {
        region=null;
      }
 else       if ("us-west".equals(regionSetting) || "us-west-1".equals(regionSetting)) {
        region="us-west-1";
      }
 else       if ("us-west-2".equals(regionSetting)) {
        region="us-west-2";
      }
 else       if ("ap-southeast".equals(regionSetting) || "ap-southeast-1".equals(regionSetting)) {
        region="ap-southeast-1";
      }
 else       if ("ap-southeast-2".equals(regionSetting)) {
        region="ap-southeast-2";
      }
 else       if ("ap-northeast".equals(regionSetting) || "ap-northeast-1".equals(regionSetting)) {
        region="ap-northeast-1";
      }
 else       if ("eu-west".equals(regionSetting) || "eu-west-1".equals(regionSetting)) {
        region="eu-west-1";
      }
 else       if ("eu-central".equals(regionSetting) || "eu-central-1".equals(regionSetting)) {
        region="eu-central-1";
      }
 else       if ("sa-east".equals(regionSetting) || "sa-east-1".equals(regionSetting)) {
        region="sa-east-1";
      }
 else       if ("cn-north".equals(regionSetting) || "cn-north-1".equals(regionSetting)) {
        region="cn-north-1";
      }
    }
  }
  boolean serverSideEncryption=repositorySettings.settings().getAsBoolean("server_side_encryption",settings.getAsBoolean("repositories.s3.server_side_encryption",false));
  ByteSizeValue bufferSize=repositorySettings.settings().getAsBytesSize("buffer_size",settings.getAsBytesSize("repositories.s3.buffer_size",null));
  Integer maxRetries=repositorySettings.settings().getAsInt("max_retries",settings.getAsInt("repositories.s3.max_retries",3));
  this.chunkSize=repositorySettings.settings().getAsBytesSize("chunk_size",settings.getAsBytesSize("repositories.s3.chunk_size",new ByteSizeValue(100,ByteSizeUnit.MB)));
  this.compress=repositorySettings.settings().getAsBoolean("compress",settings.getAsBoolean("repositories.s3.compress",false));
  String cannedACL=repositorySettings.settings().get("canned_acl",settings.get("repositories.s3.canned_acl",null));
  logger.debug("using bucket [{}], region [{}], endpoint [{}], protocol [{}], chunk_size [{}], server_side_encryption [{}], buffer_size [{}], max_retries [{}], cannedACL [{}]",bucket,region,endpoint,protocol,chunkSize,serverSideEncryption,bufferSize,maxRetries,cannedACL);
  blobStore=new S3BlobStore(settings,s3Service.client(endpoint,protocol,region,repositorySettings.settings().get("access_key"),repositorySettings.settings().get("secret_key"),maxRetries),bucket,region,serverSideEncryption,bufferSize,maxRetries,cannedACL);
  String basePath=repositorySettings.settings().get("base_path",settings.get("repositories.s3.base_path"));
  if (Strings.hasLength(basePath)) {
    BlobPath path=new BlobPath();
    for (    String elem : Strings.splitStringToArray(basePath,'/')) {
      path=path.add(elem);
    }
    this.basePath=path;
  }
 else {
    this.basePath=BlobPath.cleanPath();
  }
}
