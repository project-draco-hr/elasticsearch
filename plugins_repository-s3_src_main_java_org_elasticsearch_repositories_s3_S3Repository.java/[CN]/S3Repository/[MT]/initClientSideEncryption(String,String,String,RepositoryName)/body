{
  EncryptionMaterials clientSideEncryptionMaterials=null;
  if (Strings.isNullOrEmpty(symmetricKey) == false && (Strings.isNullOrEmpty(publicKey) == false || Strings.isNullOrEmpty(privateKey) == false)) {
    throw new RepositoryException(name.name(),"Client-side encryption: You can't specify an symmetric key AND a public/private key pair");
  }
  if (Strings.isNullOrEmpty(symmetricKey) == false || Strings.isNullOrEmpty(publicKey) == false || Strings.isNullOrEmpty(privateKey) == false) {
    try {
      if (Cipher.getMaxAllowedKeyLength("AES") < 256) {
        throw new RepositoryException(name.name(),"Client-side encryption: Please install the Java Cryptography Extension");
      }
      if (Strings.isNullOrEmpty(symmetricKey) == false) {
        clientSideEncryptionMaterials=new EncryptionMaterials(new SecretKeySpec(Base64.decode(symmetricKey),"AES"));
      }
 else {
        if (Strings.isNullOrEmpty(publicKey) || Strings.isNullOrEmpty(privateKey)) {
          String missingKey=Strings.isNullOrEmpty(publicKey) ? "public key" : "private key";
          throw new RepositoryException(name.name(),"Client-side encryption: " + missingKey + " is missing");
        }
        clientSideEncryptionMaterials=new EncryptionMaterials(new KeyPair(KeyFactory.getInstance("RSA").generatePublic(new X509EncodedKeySpec(Base64.decode(publicKey))),KeyFactory.getInstance("RSA").generatePrivate(new PKCS8EncodedKeySpec(Base64.decode(privateKey)))));
      }
    }
 catch (    IllegalArgumentException e) {
      throw new RepositoryException(name.name(),"Client-side encryption: Error decoding your keys: " + e.getMessage());
    }
catch (    NoSuchAlgorithmException e) {
      throw new RepositoryException(name.name(),e.getMessage());
    }
catch (    InvalidKeySpecException e) {
      throw new RepositoryException(name.name(),e.getMessage());
    }
  }
  return clientSideEncryptionMaterials;
}
