{
  if (allocation.ignoreDisable()) {
    return allocation.decision(Decision.YES,NAME,"rebalance disabling is ignored");
  }
  Settings indexSettings=allocation.routingNodes().metaData().index(shardRouting.index()).settings();
  String enableIndexValue=indexSettings.get(INDEX_ROUTING_REBALANCE_ENABLE);
  final Rebalance enable;
  if (enableIndexValue != null) {
    enable=Rebalance.parse(enableIndexValue);
  }
 else {
    enable=this.enableRebalance;
  }
switch (enable) {
case ALL:
    return allocation.decision(Decision.YES,NAME,"all rebalancing is allowed");
case NONE:
  return allocation.decision(Decision.NO,NAME,"no rebalancing is allowed");
case PRIMARIES:
if (shardRouting.primary()) {
  return allocation.decision(Decision.YES,NAME,"primary rebalancing is allowed");
}
 else {
  return allocation.decision(Decision.NO,NAME,"replica rebalancing is forbidden");
}
case REPLICAS:
if (shardRouting.primary() == false) {
return allocation.decision(Decision.YES,NAME,"replica rebalancing is allowed");
}
 else {
return allocation.decision(Decision.NO,NAME,"primary rebalancing is forbidden");
}
default :
throw new IllegalStateException("Unknown rebalance option");
}
}
