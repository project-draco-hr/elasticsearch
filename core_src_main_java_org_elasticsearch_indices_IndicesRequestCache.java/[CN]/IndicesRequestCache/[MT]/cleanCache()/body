{
  final ObjectSet<CleanupKey> currentKeysToClean=new ObjectHashSet<>();
  final ObjectSet<Object> currentFullClean=new ObjectHashSet<>();
  currentKeysToClean.clear();
  currentFullClean.clear();
  for (Iterator<CleanupKey> iterator=keysToClean.iterator(); iterator.hasNext(); ) {
    CleanupKey cleanupKey=iterator.next();
    iterator.remove();
    if (cleanupKey.readerVersion == -1 || cleanupKey.entity.isOpen() == false) {
      currentFullClean.add(cleanupKey.entity.getCacheIdentity());
    }
 else {
      currentKeysToClean.add(cleanupKey);
    }
  }
  if (!currentKeysToClean.isEmpty() || !currentFullClean.isEmpty()) {
    for (Iterator<Key> iterator=cache.keys().iterator(); iterator.hasNext(); ) {
      Key key=iterator.next();
      if (currentFullClean.contains(key.entity.getCacheIdentity())) {
        iterator.remove();
      }
 else {
        if (currentKeysToClean.contains(new CleanupKey(key.entity,key.readerVersion))) {
          iterator.remove();
        }
      }
    }
  }
  cache.refresh();
}
