{
  logger.warn("{} received shard failed for {}",request.failure,request.shardId,request);
  clusterService.submitStateUpdateTask("shard-failed",request,ClusterStateTaskConfig.build(Priority.HIGH),shardFailedClusterStateTaskExecutor,new ClusterStateTaskListener(){
    @Override public void onFailure(    String source,    Exception e){
      logger.error("{} unexpected failure while failing shard [{}]",e,request.shardId,request);
      try {
        channel.sendResponse(e);
      }
 catch (      Exception channelException) {
        channelException.addSuppressed(e);
        logger.warn("{} failed to send failure [{}] while failing shard [{}]",channelException,request.shardId,e,request);
      }
    }
    @Override public void onNoLongerMaster(    String source){
      logger.error("{} no longer master while failing shard [{}]",request.shardId,request);
      try {
        channel.sendResponse(new NotMasterException(source));
      }
 catch (      Exception channelException) {
        logger.warn("{} failed to send no longer master while failing shard [{}]",channelException,request.shardId,request);
      }
    }
    @Override public void clusterStateProcessed(    String source,    ClusterState oldState,    ClusterState newState){
      try {
        channel.sendResponse(TransportResponse.Empty.INSTANCE);
      }
 catch (      Exception channelException) {
        logger.warn("{} failed to send response while failing shard [{}]",channelException,request.shardId,request);
      }
    }
  }
);
}
