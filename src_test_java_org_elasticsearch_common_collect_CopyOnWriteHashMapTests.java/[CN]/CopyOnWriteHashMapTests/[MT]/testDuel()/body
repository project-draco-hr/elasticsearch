{
  final int iters=scaledRandomIntBetween(2,5);
  for (int iter=0; iter < iters; ++iter) {
    final int valueBits=randomIntBetween(1,30);
    final int hashBits=randomInt(valueBits);
    final int numOps=randomInt(10 + hashBits * 100);
    Map<O,Integer> ref=new HashMap<>();
    CopyOnWriteHashMap<O,Integer> map=new CopyOnWriteHashMap<>();
    assertEquals(ref,map);
    final int hashBase=randomInt();
    for (int i=0; i < numOps; ++i) {
      final int v=randomInt(1 << valueBits);
      final int h=(v & ((1 << hashBits) - 1)) ^ hashBase;
      O key=new O(v,h);
      Map<O,Integer> newRef=new HashMap<>(ref);
      final CopyOnWriteHashMap<O,Integer> newMap;
      if (randomBoolean()) {
        Integer value=v;
        newRef.put(key,value);
        newMap=map.copyAndPut(key,value);
      }
 else {
        final Integer removed=newRef.remove(key);
        newMap=map.copyAndRemove(key);
        if (removed == null) {
          assertSame(map,newMap);
        }
      }
      assertEquals(ref,map);
      assertEquals(newRef,newMap);
      assertEquals(newMap,newRef);
      ref=newRef;
      map=newMap;
    }
    assertEquals(ref,CopyOnWriteHashMap.copyOf(ref));
    assertEquals(ImmutableMap.of(),CopyOnWriteHashMap.copyOf(ref).copyAndRemoveAll(ref.keySet()));
  }
}
