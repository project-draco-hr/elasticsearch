{
  super(settings);
  if (!DiscoveryNode.nodeRequiresLocalStorage(settings)) {
    nodePaths=null;
    nodeIndicesPaths=null;
    locks=null;
    localNodeId=-1;
    return;
  }
  final Path[] nodePaths=new Path[environment.dataWithClusterFiles().length];
  final Lock[] locks=new Lock[environment.dataWithClusterFiles().length];
  int localNodeId=-1;
  IOException lastException=null;
  int maxLocalStorageNodes=settings.getAsInt("node.max_local_storage_nodes",50);
  for (int possibleLockId=0; possibleLockId < maxLocalStorageNodes; possibleLockId++) {
    for (int dirIndex=0; dirIndex < environment.dataWithClusterFiles().length; dirIndex++) {
      Path dir=environment.dataWithClusterFiles()[dirIndex].toPath().resolve(Paths.get("nodes",Integer.toString(possibleLockId)));
      if (Files.exists(dir) == false) {
        Files.createDirectories(dir);
      }
      try (Directory luceneDir=FSDirectory.open(dir,NativeFSLockFactory.INSTANCE)){
        logger.trace("obtaining node lock on {} ...",dir.toAbsolutePath());
        Lock tmpLock=luceneDir.makeLock("node.lock");
        boolean obtained=tmpLock.obtain();
        if (obtained) {
          locks[dirIndex]=tmpLock;
          nodePaths[dirIndex]=dir;
          localNodeId=possibleLockId;
        }
 else {
          logger.trace("failed to obtain node lock on {}",dir.toAbsolutePath());
          for (int i=0; i < locks.length; i++) {
            if (locks[i] != null) {
              IOUtils.closeWhileHandlingException(locks[i]);
            }
            locks[i]=null;
          }
          break;
        }
      }
 catch (      IOException e) {
        logger.trace("failed to obtain node lock on {}",e,dir.toAbsolutePath());
        lastException=new IOException("failed to obtain lock on " + dir.toAbsolutePath(),e);
        for (int i=0; i < locks.length; i++) {
          IOUtils.closeWhileHandlingException(locks[i]);
          locks[i]=null;
        }
        break;
      }
    }
    if (locks[0] != null) {
      break;
    }
  }
  if (locks[0] == null) {
    throw new ElasticsearchIllegalStateException("Failed to obtain node lock, is the following location writable?: " + Arrays.toString(environment.dataWithClusterFiles()),lastException);
  }
  this.localNodeId=localNodeId;
  this.locks=locks;
  this.nodePaths=nodePaths;
  if (logger.isDebugEnabled()) {
    logger.debug("using node location [{}], local_node_id [{}]",nodePaths,localNodeId);
  }
  if (logger.isTraceEnabled()) {
    StringBuilder sb=new StringBuilder("node data locations details:\n");
    for (    Path file : nodePaths) {
      sb.append(" -> ").append(file.toAbsolutePath()).append(", free_space [").append(new ByteSizeValue(Files.getFileStore(file).getUnallocatedSpace())).append("], usable_space [").append(new ByteSizeValue(Files.getFileStore(file).getUsableSpace())).append("]\n");
    }
    logger.trace(sb.toString());
  }
  this.nodeIndicesPaths=new Path[nodePaths.length];
  for (int i=0; i < nodePaths.length; i++) {
    nodeIndicesPaths[i]=nodePaths[i].resolve("indices");
  }
}
