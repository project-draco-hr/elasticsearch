{
  CloseableHttpClient httpClient=HttpClientBuilder.create().build();
  ConnectionPool connectionPool=new ConnectionPool(){
    @Override public Stream<Connection> nextConnection(){
      return null;
    }
    @Override public Connection lastResortConnection(){
      return null;
    }
    @Override public void beforeAttempt(    Connection connection) throws IOException {
    }
    @Override public void onSuccess(    Connection connection){
    }
    @Override public void onFailure(    Connection connection) throws IOException {
    }
    @Override public void close() throws IOException {
    }
  }
;
  try {
    new Transport(null,connectionPool,RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE));
    fail("transport creation should have failed");
  }
 catch (  NullPointerException e) {
    assertEquals(e.getMessage(),"client cannot be null");
  }
  try {
    new Transport(httpClient,null,RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE));
    fail("transport creation should have failed");
  }
 catch (  NullPointerException e) {
    assertEquals(e.getMessage(),"connectionPool cannot be null");
  }
  try {
    new Transport(httpClient,connectionPool,RandomInts.randomIntBetween(random(),Integer.MIN_VALUE,0));
    fail("transport creation should have failed");
  }
 catch (  IllegalArgumentException e) {
    assertEquals(e.getMessage(),"maxRetryTimeout must be greater than 0");
  }
  Transport transport=new Transport(httpClient,connectionPool,RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE));
  assertNotNull(transport);
}
