{
  IndexService indexService=indicesService.indexServiceSafe(request.shardId().getIndex());
  IndexShard indexShard=indexService.shardSafe(request.shardId().id());
  SearchShardTarget shardTarget=new SearchShardTarget(clusterService.localNode().id(),request.shardId().getIndex(),request.shardId().id());
  SearchContext context=new DefaultSearchContext(0,new ShardSearchLocalRequest(request.types(),request.nowInMillis(),request.filteringAliases()),shardTarget,indexShard.acquireSearcher("exists"),indexService,indexShard,scriptService,pageCacheRecycler,bigArrays,threadPool.estimatedTimeInMillisCounter(),parseFieldMatcher,SearchService.NO_TIMEOUT);
  SearchContext.setCurrent(context);
  try {
    if (request.minScore() != DEFAULT_MIN_SCORE) {
      context.minimumScore(request.minScore());
    }
    BytesReference source=request.querySource();
    if (source != null && source.length() > 0) {
      try {
        QueryParseContext.setTypes(request.types());
        context.parsedQuery(indexService.queryParserService().parseQuery(source));
      }
  finally {
        QueryParseContext.removeTypes();
      }
    }
    context.preProcess();
    try {
      Lucene.EarlyTerminatingCollector existsCollector=Lucene.createExistsCollector();
      Lucene.exists(context.searcher(),context.query(),existsCollector);
      return new ShardExistsResponse(request.shardId(),existsCollector.exists());
    }
 catch (    Exception e) {
      throw new QueryPhaseExecutionException(context,"failed to execute exists",e);
    }
  }
  finally {
    context.close();
    SearchContext.removeCurrent();
  }
}
