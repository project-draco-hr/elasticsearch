{
  if (started) {
    return;
  }
  started=true;
  this.nodeDescription=nodeDescription;
  if (settings.getAsBoolean(SettingsConstants.CREATE_CONNECTOR,false)) {
    try {
      if (System.getProperty("sun.rmi.dgc.client.gcInterval") == null)       System.setProperty("sun.rmi.dgc.client.gcInterval","36000000");
      if (System.getProperty("sun.rmi.dgc.server.gcInterval") == null)       System.setProperty("sun.rmi.dgc.server.gcInterval","36000000");
    }
 catch (    Exception secExc) {
      logger.warn("Failed to set sun.rmi.dgc.xxx system properties",secExc);
    }
    final String port=settings.get("jmx.port","9400-9500");
    PortsRange portsRange=new PortsRange(port);
    final AtomicReference<Exception> lastException=new AtomicReference<Exception>();
    boolean success=portsRange.iterate(new PortsRange.PortCallback(){
      @Override public boolean onPortNumber(      int portNumber){
        try {
          LocateRegistry.createRegistry(portNumber);
          serviceUrl=settings.get("jmx.service_url",JMXRMI_URI_PATTERN).replace("{jmx.port}",Integer.toString(portNumber));
          JMXServiceURL url=new JMXServiceURL(serviceUrl);
          connectorServer=JMXConnectorServerFactory.newJMXConnectorServer(url,settings.getAsMap(),mBeanServer);
          connectorServer.start();
          String publishHost=networkService.resolvePublishHostAddress(settings.get("jmx.publish_host")).getHostAddress();
          publishUrl=settings.get("jmx.publish_url",JMXRMI_PUBLISH_URI_PATTERN).replace("{jmx.port}",Integer.toString(portNumber)).replace("{jmx.host}",publishHost);
        }
 catch (        Exception e) {
          lastException.set(e);
          return false;
        }
        return true;
      }
    }
);
    if (!success) {
      throw new JmxConnectorCreationException("Failed to bind to [" + port + "]",lastException.get());
    }
    logger.info("bound_address {{}}, publish_address {{}}",serviceUrl,publishUrl);
  }
  for (  ResourceDMBean resource : constructionMBeans) {
    register(resource);
  }
}
