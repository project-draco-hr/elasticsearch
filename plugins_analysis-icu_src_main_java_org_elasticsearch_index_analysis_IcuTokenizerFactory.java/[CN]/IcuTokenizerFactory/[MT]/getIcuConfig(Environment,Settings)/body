{
  Map<Integer,String> tailored=new HashMap<>();
  try {
    String[] ruleFiles=settings.getAsArray(RULE_FILES);
    for (    String scriptAndResourcePath : ruleFiles) {
      int colonPos=scriptAndResourcePath.indexOf(":");
      if (colonPos == -1 || colonPos == scriptAndResourcePath.length() - 1) {
        throw new IllegalArgumentException(RULE_FILES + " should contain comma-separated \"code:rulefile\" pairs");
      }
      String scriptCode=scriptAndResourcePath.substring(0,colonPos).trim();
      String resourcePath=scriptAndResourcePath.substring(colonPos + 1).trim();
      tailored.put(UCharacter.getPropertyValueEnum(UProperty.SCRIPT,scriptCode),resourcePath);
    }
    if (tailored.isEmpty()) {
      return null;
    }
 else {
      final BreakIterator breakers[]=new BreakIterator[UScript.CODE_LIMIT];
      for (      Map.Entry<Integer,String> entry : tailored.entrySet()) {
        int code=entry.getKey();
        String resourcePath=entry.getValue();
        breakers[code]=parseRules(resourcePath,env);
      }
      ICUTokenizerConfig config=new DefaultICUTokenizerConfig(true,true){
        @Override public BreakIterator getBreakIterator(        int script){
          if (breakers[script] != null) {
            return (BreakIterator)breakers[script].clone();
          }
 else {
            return super.getBreakIterator(script);
          }
        }
      }
;
      return config;
    }
  }
 catch (  Exception e) {
    throw new ElasticsearchException("failed to load ICU rule files",e);
  }
}
