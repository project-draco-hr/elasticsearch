{
  BucketCollector subs=new BucketCollector(){
    @Override public void setNextReader(    AtomicReaderContext reader){
      context.setNextReader(reader);
      deferred.setNextReader(reader);
    }
    @Override public void collect(    int docId,    long bucketOrdinal) throws IOException {
      deferred.collect(docId,bucketOrdinal);
    }
    @Override public void postCollection() throws IOException {
      deferred.postCollection();
    }
    @Override public void gatherAnalysis(    BucketAnalysisCollector results,    long bucketOrdinal){
      deferred.gatherAnalysis(results,bucketOrdinal);
    }
  }
;
  filteredCollector=new FilteringBucketCollector(survivingBucketOrds,subs,context.bigArrays());
  try {
    recording.replayCollection(filteredCollector);
  }
 catch (  IOException e) {
    throw new QueryPhaseExecutionException(context.searchContext(),"Failed to replay deferred set of matching docIDs",e);
  }
}
