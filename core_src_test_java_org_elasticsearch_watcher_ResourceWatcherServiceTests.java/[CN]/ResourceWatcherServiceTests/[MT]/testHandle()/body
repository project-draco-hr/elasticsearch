{
  ThreadPool threadPool=new ThreadPool("test");
  Settings settings=Settings.builder().build();
  ResourceWatcherService service=new ResourceWatcherService(settings,threadPool);
  ResourceWatcher watcher=new ResourceWatcher(){
    @Override public void init(){
    }
    @Override public void checkAndNotify(){
    }
  }
;
  WatcherHandle handle=service.add(watcher);
  assertThat(handle,notNullValue());
  assertThat(handle.frequency(),equalTo(ResourceWatcherService.Frequency.MEDIUM));
  assertThat(service.lowMonitor.watchers.size(),is(0));
  assertThat(service.highMonitor.watchers.size(),is(0));
  assertThat(service.mediumMonitor.watchers.size(),is(1));
  handle.stop();
  assertThat(service.mediumMonitor.watchers.size(),is(0));
  handle.resume();
  assertThat(service.mediumMonitor.watchers.size(),is(1));
  handle.stop();
  handle=service.add(watcher,ResourceWatcherService.Frequency.HIGH);
  assertThat(handle,notNullValue());
  assertThat(handle.frequency(),equalTo(ResourceWatcherService.Frequency.HIGH));
  assertThat(service.lowMonitor.watchers.size(),is(0));
  assertThat(service.mediumMonitor.watchers.size(),is(0));
  assertThat(service.highMonitor.watchers.size(),is(1));
  handle.stop();
  assertThat(service.highMonitor.watchers.size(),is(0));
  handle.resume();
  assertThat(service.highMonitor.watchers.size(),is(1));
  terminate(threadPool);
}
