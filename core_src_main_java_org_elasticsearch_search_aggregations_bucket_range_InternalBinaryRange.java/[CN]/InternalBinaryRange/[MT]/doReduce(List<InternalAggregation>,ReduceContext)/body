{
  long[] docCounts=new long[buckets.size()];
  InternalAggregations[][] aggs=new InternalAggregations[buckets.size()][];
  for (int i=0; i < aggs.length; ++i) {
    aggs[i]=new InternalAggregations[aggregations.size()];
  }
  for (int i=0; i < aggregations.size(); ++i) {
    InternalBinaryRange range=(InternalBinaryRange)aggregations.get(i);
    if (range.buckets.size() != buckets.size()) {
      throw new IllegalStateException("Expected [" + buckets.size() + "] buckets, but got ["+ range.buckets.size()+ "]");
    }
    for (int j=0; j < buckets.size(); ++j) {
      Bucket bucket=range.buckets.get(j);
      docCounts[j]+=bucket.docCount;
      aggs[j][i]=bucket.aggregations;
    }
  }
  List<Bucket> buckets=new ArrayList<>(this.buckets.size());
  for (int i=0; i < this.buckets.size(); ++i) {
    Bucket b=this.buckets.get(i);
    buckets.add(new Bucket(format,keyed,b.key,b.from,b.to,docCounts[i],InternalAggregations.reduce(Arrays.asList(aggs[i]),reduceContext)));
  }
  return new InternalBinaryRange(name,format,keyed,buckets,pipelineAggregators(),metaData);
}
