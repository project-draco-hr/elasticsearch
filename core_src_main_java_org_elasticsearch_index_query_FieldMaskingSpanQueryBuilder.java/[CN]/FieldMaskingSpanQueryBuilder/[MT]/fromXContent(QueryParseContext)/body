{
  XContentParser parser=parseContext.parser();
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  SpanQueryBuilder inner=null;
  String field=null;
  String queryName=null;
  String currentFieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if (parseContext.getParseFieldMatcher().match(currentFieldName,QUERY_FIELD)) {
        Optional<QueryBuilder> query=parseContext.parseInnerQueryBuilder();
        if (query.isPresent() == false || query.get() instanceof SpanQueryBuilder == false) {
          throw new ParsingException(parser.getTokenLocation(),"[field_masking_span] query must be of type span query");
        }
        inner=(SpanQueryBuilder)query.get();
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"[field_masking_span] query does not support [" + currentFieldName + "]");
      }
    }
 else {
      if (parseContext.getParseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.BOOST_FIELD)) {
        boost=parser.floatValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,FIELD_FIELD)) {
        field=parser.text();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.NAME_FIELD)) {
        queryName=parser.text();
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"[field_masking_span] query does not support [" + currentFieldName + "]");
      }
    }
  }
  if (inner == null) {
    throw new ParsingException(parser.getTokenLocation(),"field_masking_span must have [query] span query clause");
  }
  if (field == null) {
    throw new ParsingException(parser.getTokenLocation(),"field_masking_span must have [field] set for it");
  }
  FieldMaskingSpanQueryBuilder queryBuilder=new FieldMaskingSpanQueryBuilder(inner,field);
  queryBuilder.boost(boost);
  queryBuilder.queryName(queryName);
  return Optional.of(queryBuilder);
}
