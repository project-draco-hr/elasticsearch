{
  MetaData.Builder mdBuilder=MetaData.builder().put(indexBuilder("foo").putAlias(AliasMetaData.builder("foofoobar"))).put(indexBuilder("foobar").putAlias(AliasMetaData.builder("foofoobar"))).put(indexBuilder("foofoo-closed").state(IndexMetaData.State.CLOSE)).put(indexBuilder("foofoo").putAlias(AliasMetaData.builder("barbaz")));
  ClusterState state=ClusterState.builder(new ClusterName("_name")).metaData(mdBuilder).build();
  IndicesOptions[] indicesOptions=new IndicesOptions[]{IndicesOptions.strictExpandOpen(),IndicesOptions.strictExpand()};
  for (  IndicesOptions options : indicesOptions) {
    IndexNameExpressionResolver.Context context=new IndexNameExpressionResolver.Context(state,options);
    String[] results=indexNameExpressionResolver.concreteIndexNames(context,"foo");
    assertEquals(1,results.length);
    assertEquals("foo",results[0]);
    try {
      indexNameExpressionResolver.concreteIndexNames(context,"bar");
      fail();
    }
 catch (    IndexNotFoundException e) {
      assertThat(e.getIndex().getName(),equalTo("bar"));
    }
    results=indexNameExpressionResolver.concreteIndexNames(context,"foofoo","foobar");
    assertEquals(2,results.length);
    assertThat(results,arrayContainingInAnyOrder("foofoo","foobar"));
    results=indexNameExpressionResolver.concreteIndexNames(context,"foofoobar");
    assertEquals(new HashSet<>(Arrays.asList("foo","foobar")),new HashSet<>(Arrays.asList(results)));
    try {
      indexNameExpressionResolver.concreteIndexNames(context,"bar");
      fail();
    }
 catch (    IndexNotFoundException e) {
      assertThat(e.getIndex().getName(),equalTo("bar"));
    }
    try {
      indexNameExpressionResolver.concreteIndexNames(context,"foo","bar");
      fail();
    }
 catch (    IndexNotFoundException e) {
      assertThat(e.getIndex().getName(),equalTo("bar"));
    }
    results=indexNameExpressionResolver.concreteIndexNames(context,"barbaz","foobar");
    assertEquals(2,results.length);
    assertThat(results,arrayContainingInAnyOrder("foofoo","foobar"));
    try {
      indexNameExpressionResolver.concreteIndexNames(context,"barbaz","bar");
      fail();
    }
 catch (    IndexNotFoundException e) {
      assertThat(e.getIndex().getName(),equalTo("bar"));
    }
    results=indexNameExpressionResolver.concreteIndexNames(context,"baz*");
    assertThat(results,emptyArray());
    results=indexNameExpressionResolver.concreteIndexNames(context,"foo","baz*");
    assertEquals(1,results.length);
    assertEquals("foo",results[0]);
  }
  IndexNameExpressionResolver.Context context=new IndexNameExpressionResolver.Context(state,IndicesOptions.strictExpandOpen());
  String[] results=indexNameExpressionResolver.concreteIndexNames(context,Strings.EMPTY_ARRAY);
  assertEquals(3,results.length);
  results=indexNameExpressionResolver.concreteIndexNames(context,(String[])null);
  assertEquals(3,results.length);
  context=new IndexNameExpressionResolver.Context(state,IndicesOptions.strictExpand());
  results=indexNameExpressionResolver.concreteIndexNames(context,Strings.EMPTY_ARRAY);
  assertEquals(4,results.length);
  results=indexNameExpressionResolver.concreteIndexNames(context,(String[])null);
  assertEquals(4,results.length);
  context=new IndexNameExpressionResolver.Context(state,IndicesOptions.strictExpandOpen());
  results=indexNameExpressionResolver.concreteIndexNames(context,"foofoo*");
  assertEquals(3,results.length);
  assertThat(results,arrayContainingInAnyOrder("foo","foobar","foofoo"));
  context=new IndexNameExpressionResolver.Context(state,IndicesOptions.strictExpand());
  results=indexNameExpressionResolver.concreteIndexNames(context,"foofoo*");
  assertEquals(4,results.length);
  assertThat(results,arrayContainingInAnyOrder("foo","foobar","foofoo","foofoo-closed"));
}
