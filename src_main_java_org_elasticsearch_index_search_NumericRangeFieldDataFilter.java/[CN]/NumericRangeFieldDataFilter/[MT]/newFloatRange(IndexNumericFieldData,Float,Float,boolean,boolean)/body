{
  return new NumericRangeFieldDataFilter<Float>(indexFieldData,lowerVal,upperVal,includeLower,includeUpper){
    @Override public DocIdSet getDocIdSet(    AtomicReaderContext ctx,    Bits acceptedDocs) throws IOException {
      final float inclusiveLowerPoint, inclusiveUpperPoint;
      if (lowerVal != null) {
        float f=lowerVal.floatValue();
        if (!includeUpper && f > 0.0f && Float.isInfinite(f))         return null;
        int i=NumericUtils.floatToSortableInt(f);
        inclusiveLowerPoint=NumericUtils.sortableIntToFloat(includeLower ? i : (i + 1));
      }
 else {
        inclusiveLowerPoint=Float.NEGATIVE_INFINITY;
      }
      if (upperVal != null) {
        float f=upperVal.floatValue();
        if (!includeUpper && f < 0.0f && Float.isInfinite(f))         return null;
        int i=NumericUtils.floatToSortableInt(f);
        inclusiveUpperPoint=NumericUtils.sortableIntToFloat(includeUpper ? i : (i - 1));
      }
 else {
        inclusiveUpperPoint=Float.POSITIVE_INFINITY;
      }
      if (inclusiveLowerPoint > inclusiveUpperPoint)       return null;
      final DoubleValues values=indexFieldData.load(ctx).getDoubleValues();
      return new DoubleRangeMatchDocIdSet(ctx.reader().maxDoc(),acceptedDocs,values,inclusiveLowerPoint,inclusiveUpperPoint);
    }
  }
;
}
