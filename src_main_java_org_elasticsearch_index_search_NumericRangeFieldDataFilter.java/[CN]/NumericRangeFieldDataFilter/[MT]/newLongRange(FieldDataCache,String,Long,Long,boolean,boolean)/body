{
  return new NumericRangeFieldDataFilter<Long>(fieldDataCache,field,lowerVal,upperVal,includeLower,includeUpper){
    @Override public DocIdSet getDocIdSet(    AtomicReaderContext ctx,    Bits acceptedDocs) throws IOException {
      final long inclusiveLowerPoint, inclusiveUpperPoint;
      if (lowerVal != null) {
        long i=lowerVal.longValue();
        if (!includeLower && i == Long.MAX_VALUE)         return null;
        inclusiveLowerPoint=includeLower ? i : (i + 1l);
      }
 else {
        inclusiveLowerPoint=Long.MIN_VALUE;
      }
      if (upperVal != null) {
        long i=upperVal.longValue();
        if (!includeUpper && i == Long.MIN_VALUE)         return null;
        inclusiveUpperPoint=includeUpper ? i : (i - 1l);
      }
 else {
        inclusiveUpperPoint=Long.MAX_VALUE;
      }
      if (inclusiveLowerPoint > inclusiveUpperPoint)       return null;
      final LongFieldData fieldData=(LongFieldData)this.fieldDataCache.cache(FieldDataType.DefaultTypes.LONG,ctx.reader(),field);
      return new MatchDocIdSet(ctx.reader().maxDoc(),acceptedDocs){
        @Override public boolean isCacheable(){
          return true;
        }
        @Override protected boolean matchDoc(        int doc){
          if (!fieldData.hasValue(doc)) {
            return false;
          }
          if (fieldData.multiValued()) {
            long[] values=fieldData.values(doc);
            for (            long value : values) {
              if (value >= inclusiveLowerPoint && value <= inclusiveUpperPoint) {
                return true;
              }
            }
            return false;
          }
 else {
            long value=fieldData.value(doc);
            return value >= inclusiveLowerPoint && value <= inclusiveUpperPoint;
          }
        }
      }
;
    }
  }
;
}
