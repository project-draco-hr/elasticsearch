{
  return new NumericRangeFieldDataFilter<Double>(indexFieldData,lowerVal,upperVal,includeLower,includeUpper){
    @Override public DocIdSet getDocIdSet(    AtomicReaderContext ctx,    Bits acceptedDocs) throws IOException {
      final double inclusiveLowerPoint, inclusiveUpperPoint;
      if (lowerVal != null) {
        double f=lowerVal.doubleValue();
        if (!includeUpper && f > 0.0 && Double.isInfinite(f))         return null;
        long i=NumericUtils.doubleToSortableLong(f);
        inclusiveLowerPoint=NumericUtils.sortableLongToDouble(includeLower ? i : (i + 1L));
      }
 else {
        inclusiveLowerPoint=Double.NEGATIVE_INFINITY;
      }
      if (upperVal != null) {
        double f=upperVal.doubleValue();
        if (!includeUpper && f < 0.0 && Double.isInfinite(f))         return null;
        long i=NumericUtils.doubleToSortableLong(f);
        inclusiveUpperPoint=NumericUtils.sortableLongToDouble(includeUpper ? i : (i - 1L));
      }
 else {
        inclusiveUpperPoint=Double.POSITIVE_INFINITY;
      }
      if (inclusiveLowerPoint > inclusiveUpperPoint)       return null;
      final DoubleValues values=indexFieldData.load(ctx).getDoubleValues();
      return new MatchDocIdSet(ctx.reader().maxDoc(),acceptedDocs){
        @Override public boolean isCacheable(){
          return true;
        }
        @Override protected boolean matchDoc(        int doc){
          DoubleValues.Iter iter=values.getIter(doc);
          while (iter.hasNext()) {
            double value=iter.next();
            if (value >= inclusiveLowerPoint && value <= inclusiveUpperPoint) {
              return true;
            }
          }
          return false;
        }
      }
;
    }
  }
;
}
