{
  return new NumericRangeFieldDataFilter<Byte>(indexFieldData,lowerVal,upperVal,includeLower,includeUpper){
    @Override public DocIdSet getDocIdSet(    AtomicReaderContext ctx,    Bits acceptedDocs) throws IOException {
      final byte inclusiveLowerPoint, inclusiveUpperPoint;
      if (lowerVal != null) {
        byte i=lowerVal.byteValue();
        if (!includeLower && i == Byte.MAX_VALUE)         return null;
        inclusiveLowerPoint=(byte)(includeLower ? i : (i + 1));
      }
 else {
        inclusiveLowerPoint=Byte.MIN_VALUE;
      }
      if (upperVal != null) {
        byte i=upperVal.byteValue();
        if (!includeUpper && i == Byte.MIN_VALUE)         return null;
        inclusiveUpperPoint=(byte)(includeUpper ? i : (i - 1));
      }
 else {
        inclusiveUpperPoint=Byte.MAX_VALUE;
      }
      if (inclusiveLowerPoint > inclusiveUpperPoint)       return null;
      final LongValues values=indexFieldData.load(ctx).getLongValues();
      return new LongRangeMatchDocIdSet(ctx.reader().maxDoc(),acceptedDocs,values,inclusiveLowerPoint,inclusiveUpperPoint);
    }
  }
;
}
