{
  if (valuesSource == null) {
    return LeafBucketCollector.NO_OP_COLLECTOR;
  }
  final BigArrays bigArrays=context.bigArrays();
  final MultiGeoPointValues values=valuesSource.geoPointValues(ctx);
  return new LeafBucketCollectorBase(sub,values){
    @Override public void collect(    int doc,    long bucket) throws IOException {
      centroids=bigArrays.grow(centroids,bucket + 1);
      counts=bigArrays.grow(counts,bucket + 1);
      values.setDocument(doc);
      final int valueCount=values.count();
      if (valueCount > 0) {
        double[] pt=new double[2];
        long prevCounts=counts.get(bucket);
        counts.increment(bucket,valueCount);
        if (prevCounts > 0) {
          final GeoPoint centroid=GeoPoint.fromIndexLong(centroids.get(bucket));
          pt[0]=centroid.lon();
          pt[1]=centroid.lat();
        }
        for (int i=0; i < valueCount; ++i) {
          GeoPoint value=values.valueAt(i);
          pt[0]=pt[0] + (value.getLon() - pt[0]) / ++prevCounts;
          pt[1]=pt[1] + (value.getLat() - pt[1]) / prevCounts;
        }
        centroids.set(bucket,GeoEncodingUtils.mortonHash(pt[1],pt[0]));
      }
    }
  }
;
}
