{
  final Client client=client();
  try {
    assertAcked(prepareCreate("ramtest").setSource("{\"mappings\": {\"type\": {\"properties\": {\"test\": " + "{\"type\": \"string\",\"fielddata\": {\"filter\": {\"regex\": {\"pattern\": \"^value.*\"}}}}}}}}"));
    client.admin().cluster().prepareHealth("ramtest").setWaitForGreenStatus().setTimeout("10s").execute().actionGet();
    int docCount=scaledRandomIntBetween(300,1000);
    for (long id=0; id < docCount; id++) {
      client.prepareIndex("ramtest","type",Long.toString(id)).setSource(MapBuilder.<String,Object>newMapBuilder().put("test","value" + id).map()).execute().actionGet();
    }
    refresh();
    client.prepareSearch("ramtest").setSource("{\"sort\": \"test\",\"query\":{\"match_all\":{}}}").execute().actionGet();
    client.admin().indices().prepareClearCache("ramtest").setFieldDataCache(true).execute().actionGet();
    Settings settings=settingsBuilder().put(InternalCircuitBreakerService.CIRCUIT_BREAKER_MAX_BYTES_SETTING,randomRidiculouslySmallLimit()).put(InternalCircuitBreakerService.CIRCUIT_BREAKER_OVERHEAD_SETTING,1.05).build();
    client.admin().cluster().prepareUpdateSettings().setTransientSettings(settings).execute().actionGet();
    assertFailures(client.prepareSearch("ramtest").setSource("{\"sort\": \"test\",\"query\":{\"match_all\":{}}}"),RestStatus.INTERNAL_SERVER_ERROR,containsString("Data too large, data for field [test] would be larger than limit of [100/100b]"));
    NodesStatsResponse stats=client.admin().cluster().prepareNodesStats().setBreaker(true).get();
    int breaks=0;
    for (    NodeStats stat : stats.getNodes()) {
      FieldDataBreakerStats breakerStats=stat.getBreaker();
      breaks+=breakerStats.getTrippedCount();
    }
    assertThat(breaks,greaterThanOrEqualTo(1));
  }
  finally {
    Settings resetSettings=settingsBuilder().put(InternalCircuitBreakerService.CIRCUIT_BREAKER_MAX_BYTES_SETTING,"-1").put(InternalCircuitBreakerService.CIRCUIT_BREAKER_OVERHEAD_SETTING,InternalCircuitBreakerService.DEFAULT_OVERHEAD_CONSTANT).build();
    client.admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings).execute().actionGet();
  }
}
