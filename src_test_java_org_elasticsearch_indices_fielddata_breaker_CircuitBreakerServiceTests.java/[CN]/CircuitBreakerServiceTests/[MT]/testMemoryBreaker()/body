{
  assertAcked(prepareCreate("cb-test",1,settingsBuilder().put(SETTING_NUMBER_OF_REPLICAS,between(0,1))));
  final Client client=client();
  try {
    int docCount=scaledRandomIntBetween(300,1000);
    for (long id=0; id < docCount; id++) {
      client.prepareIndex("cb-test","type",Long.toString(id)).setSource(MapBuilder.<String,Object>newMapBuilder().put("test","value" + id).map()).execute().actionGet();
    }
    refresh();
    client.prepareSearch("cb-test").setSource("{\"sort\": \"test\",\"query\":{\"match_all\":{}}}").execute().actionGet();
    client.admin().indices().prepareClearCache("cb-test").setFieldDataCache(true).execute().actionGet();
    Settings settings=settingsBuilder().put(InternalCircuitBreakerService.CIRCUIT_BREAKER_MAX_BYTES_SETTING,randomRidiculouslySmallLimit()).put(InternalCircuitBreakerService.CIRCUIT_BREAKER_OVERHEAD_SETTING,1.05).build();
    client.admin().cluster().prepareUpdateSettings().setTransientSettings(settings).execute().actionGet();
    assertFailures(client.prepareSearch("cb-test").setSource("{\"sort\": \"test\",\"query\":{\"match_all\":{}}}"),RestStatus.INTERNAL_SERVER_ERROR,containsString("Data too large, data would be larger than limit of [100] bytes"));
  }
  finally {
    Settings resetSettings=settingsBuilder().put(InternalCircuitBreakerService.CIRCUIT_BREAKER_MAX_BYTES_SETTING,"-1").put(InternalCircuitBreakerService.CIRCUIT_BREAKER_OVERHEAD_SETTING,InternalCircuitBreakerService.DEFAULT_OVERHEAD_CONSTANT).build();
    client.admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings).execute().actionGet();
  }
}
