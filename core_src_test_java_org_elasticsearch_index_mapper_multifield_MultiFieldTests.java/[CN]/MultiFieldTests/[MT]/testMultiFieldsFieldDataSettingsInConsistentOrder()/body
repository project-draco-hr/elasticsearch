{
  final String MY_MULTI_FIELD="multi_field";
  Map<String,Object> possibleSettings=new TreeMap<String,Object>();
  possibleSettings.put("filter.frequency.min",1);
  possibleSettings.put("filter.frequency.max",2);
  possibleSettings.put("filter.regex.pattern",".*");
  possibleSettings.put("loading","eager");
  possibleSettings.put("foo","bar");
  possibleSettings.put("zetting","zValue");
  possibleSettings.put("aSetting","aValue");
  XContentBuilder builder=jsonBuilder().startObject().startObject("type").startObject("properties").startObject("my_field").field("type","string").startObject("fields").startObject(MY_MULTI_FIELD).field("type","string").startObject("fielddata");
  String[] keys=possibleSettings.keySet().toArray(new String[]{});
  Collections.shuffle(Arrays.asList(keys),random());
  for (int i=randomIntBetween(0,possibleSettings.size() - 1); i >= 0; --i)   builder.field(keys[i],possibleSettings.get(keys[i]));
  builder.endObject().endObject().endObject().endObject().endObject().endObject().endObject();
  final DocumentMapperParser parser=createIndex("test").mapperService().documentMapperParser();
  DocumentMapper docMapper=parser.parse("type",new CompressedXContent(builder.string()));
  DocumentMapper docMapper2=parser.parse("type",docMapper.mappingSource());
  assertThat(docMapper.mappingSource(),equalTo(docMapper2.mappingSource()));
}
