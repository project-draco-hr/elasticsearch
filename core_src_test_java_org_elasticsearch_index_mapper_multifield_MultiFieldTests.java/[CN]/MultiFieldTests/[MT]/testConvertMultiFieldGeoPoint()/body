{
  Version version=VersionUtils.randomVersionBetween(random(),Version.V_1_0_0,Version.CURRENT);
  Settings settings=Settings.settingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED,version).build();
  boolean indexCreatedBefore22=version.onOrBefore(Version.CURRENT);
  String mapping=copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/test-multi-field-type-geo_point.json");
  DocumentMapper docMapper=createIndex("test",settings).mapperService().documentMapperParser().parse(mapping);
  assertThat(docMapper.mappers().getMapper("a"),notNullValue());
  assertThat(docMapper.mappers().getMapper("a"),instanceOf(StringFieldMapper.class));
  assertNotSame(IndexOptions.NONE,docMapper.mappers().getMapper("a").fieldType().indexOptions());
  assertThat(docMapper.mappers().getMapper("a").fieldType().stored(),equalTo(false));
  assertThat(docMapper.mappers().getMapper("a").fieldType().tokenized(),equalTo(false));
  assertThat(docMapper.mappers().getMapper("a.b"),notNullValue());
  assertThat(docMapper.mappers().getMapper("a.b"),instanceOf(BaseGeoPointFieldMapper.class));
  assertNotSame(IndexOptions.NONE,docMapper.mappers().getMapper("a.b").fieldType().indexOptions());
  final boolean stored=indexCreatedBefore22 == false;
  assertThat(docMapper.mappers().getMapper("a.b").fieldType().stored(),equalTo(stored));
  assertThat(docMapper.mappers().getMapper("a.b").fieldType().tokenized(),equalTo(false));
  final boolean hasDocValues=indexCreatedBefore22 == false;
  assertThat(docMapper.mappers().getMapper("a.b").fieldType().hasDocValues(),equalTo(hasDocValues));
  BytesReference json=jsonBuilder().startObject().field("a","-1,-1").endObject().bytes();
  Document doc=docMapper.parse("test","type","1",json).rootDoc();
  IndexableField f=doc.getField("a");
  assertThat(f,notNullValue());
  assertThat(f.name(),equalTo("a"));
  assertThat(f.stringValue(),equalTo("-1,-1"));
  assertThat(f.fieldType().stored(),equalTo(false));
  assertNotSame(IndexOptions.NONE,f.fieldType().indexOptions());
  f=doc.getField("a.b");
  assertThat(f,notNullValue());
  assertThat(f.name(),equalTo("a.b"));
  if (indexCreatedBefore22 == true) {
    assertThat(f.stringValue(),equalTo("-1.0,-1.0"));
  }
 else {
    assertThat(Long.parseLong(f.stringValue()),equalTo(GeoUtils.mortonHash(-1.0,-1.0)));
  }
  assertThat(f.fieldType().stored(),equalTo(stored));
  assertNotSame(IndexOptions.NONE,f.fieldType().indexOptions());
  assertThat(docMapper.mappers().getMapper("b"),notNullValue());
  assertThat(docMapper.mappers().getMapper("b"),instanceOf(BaseGeoPointFieldMapper.class));
  assertNotSame(IndexOptions.NONE,docMapper.mappers().getMapper("b").fieldType().indexOptions());
  assertThat(docMapper.mappers().getMapper("b").fieldType().stored(),equalTo(stored));
  assertThat(docMapper.mappers().getMapper("b").fieldType().tokenized(),equalTo(false));
  assertThat(docMapper.mappers().getMapper("b").fieldType().hasDocValues(),equalTo(hasDocValues));
  assertThat(docMapper.mappers().getMapper("b.a"),notNullValue());
  assertThat(docMapper.mappers().getMapper("b.a"),instanceOf(StringFieldMapper.class));
  assertNotSame(IndexOptions.NONE,docMapper.mappers().getMapper("b.a").fieldType().indexOptions());
  assertThat(docMapper.mappers().getMapper("b.a").fieldType().stored(),equalTo(false));
  assertThat(docMapper.mappers().getMapper("b.a").fieldType().tokenized(),equalTo(false));
  json=jsonBuilder().startObject().field("b","-1,-1").endObject().bytes();
  doc=docMapper.parse("test","type","1",json).rootDoc();
  f=doc.getField("b");
  assertThat(f,notNullValue());
  assertThat(f.name(),equalTo("b"));
  if (indexCreatedBefore22 == true) {
    assertThat(f.stringValue(),equalTo("-1.0,-1.0"));
  }
 else {
    assertThat(Long.parseLong(f.stringValue()),equalTo(GeoUtils.mortonHash(-1.0,-1.0)));
  }
  assertThat(f.fieldType().stored(),equalTo(stored));
  assertNotSame(IndexOptions.NONE,f.fieldType().indexOptions());
  f=doc.getField("b.a");
  assertThat(f,notNullValue());
  assertThat(f.name(),equalTo("b.a"));
  assertThat(f.stringValue(),equalTo("-1,-1"));
  assertThat(f.fieldType().stored(),equalTo(false));
  assertNotSame(IndexOptions.NONE,f.fieldType().indexOptions());
  json=jsonBuilder().startObject().startArray("b").startArray().value(-1).value(-1).endArray().startArray().value(-2).value(-2).endArray().endArray().endObject().bytes();
  doc=docMapper.parse("test","type","1",json).rootDoc();
  f=doc.getFields("b")[0];
  assertThat(f,notNullValue());
  assertThat(f.name(),equalTo("b"));
  if (indexCreatedBefore22 == true) {
    assertThat(f.stringValue(),equalTo("-1.0,-1.0"));
  }
 else {
    assertThat(Long.parseLong(f.stringValue()),equalTo(GeoUtils.mortonHash(-1.0,-1.0)));
  }
  assertThat(f.fieldType().stored(),equalTo(stored));
  assertNotSame(IndexOptions.NONE,f.fieldType().indexOptions());
  f=doc.getFields("b")[1];
  assertThat(f,notNullValue());
  assertThat(f.name(),equalTo("b"));
  if (indexCreatedBefore22 == true) {
    assertThat(f.stringValue(),equalTo("-2.0,-2.0"));
  }
 else {
    assertThat(Long.parseLong(f.stringValue()),equalTo(GeoUtils.mortonHash(-2.0,-2.0)));
  }
  assertThat(f.fieldType().stored(),equalTo(stored));
  assertNotSame(IndexOptions.NONE,f.fieldType().indexOptions());
  f=doc.getField("b.a");
  assertThat(f,notNullValue());
  assertThat(f.name(),equalTo("b.a"));
  assertThat(f.stringValue(),equalTo("]"));
  assertThat(f.fieldType().stored(),equalTo(false));
  assertNotSame(IndexOptions.NONE,f.fieldType().indexOptions());
}
