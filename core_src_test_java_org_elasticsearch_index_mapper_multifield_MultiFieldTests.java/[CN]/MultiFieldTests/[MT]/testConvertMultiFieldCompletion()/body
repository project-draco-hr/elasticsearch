{
  String mapping=copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/test-multi-field-type-completion.json");
  DocumentMapper docMapper=createIndex("test").mapperService().documentMapperParser().parse(mapping);
  assertThat(docMapper.mappers().getMapper("a"),notNullValue());
  assertThat(docMapper.mappers().getMapper("a"),instanceOf(StringFieldMapper.class));
  assertNotSame(IndexOptions.NONE,docMapper.mappers().getMapper("a").fieldType().indexOptions());
  assertThat(docMapper.mappers().getMapper("a").fieldType().stored(),equalTo(false));
  assertThat(docMapper.mappers().getMapper("a").fieldType().tokenized(),equalTo(false));
  assertThat(docMapper.mappers().getMapper("a.b"),notNullValue());
  assertThat(docMapper.mappers().getMapper("a.b"),instanceOf(CompletionFieldMapper.class));
  assertNotSame(IndexOptions.NONE,docMapper.mappers().getMapper("a.b").fieldType().indexOptions());
  assertThat(docMapper.mappers().getMapper("a.b").fieldType().stored(),equalTo(false));
  assertThat(docMapper.mappers().getMapper("a.b").fieldType().tokenized(),equalTo(true));
  BytesReference json=jsonBuilder().startObject().field("a","complete me").endObject().bytes();
  Document doc=docMapper.parse("test","type","1",json).rootDoc();
  IndexableField f=doc.getField("a");
  assertThat(f,notNullValue());
  assertThat(f.name(),equalTo("a"));
  assertThat(f.stringValue(),equalTo("complete me"));
  assertThat(f.fieldType().stored(),equalTo(false));
  assertNotSame(IndexOptions.NONE,f.fieldType().indexOptions());
  f=doc.getField("a.b");
  assertThat(f,notNullValue());
  assertThat(f.name(),equalTo("a.b"));
  assertThat(f.stringValue(),equalTo("complete me"));
  assertThat(f.fieldType().stored(),equalTo(false));
  assertNotSame(IndexOptions.NONE,f.fieldType().indexOptions());
  assertThat(docMapper.mappers().getMapper("b"),notNullValue());
  assertThat(docMapper.mappers().getMapper("b"),instanceOf(CompletionFieldMapper.class));
  assertNotSame(IndexOptions.NONE,docMapper.mappers().getMapper("b").fieldType().indexOptions());
  assertThat(docMapper.mappers().getMapper("b").fieldType().stored(),equalTo(false));
  assertThat(docMapper.mappers().getMapper("b").fieldType().tokenized(),equalTo(true));
  assertThat(docMapper.mappers().getMapper("b.a"),notNullValue());
  assertThat(docMapper.mappers().getMapper("b.a"),instanceOf(StringFieldMapper.class));
  assertNotSame(IndexOptions.NONE,docMapper.mappers().getMapper("b.a").fieldType().indexOptions());
  assertThat(docMapper.mappers().getMapper("b.a").fieldType().stored(),equalTo(false));
  assertThat(docMapper.mappers().getMapper("b.a").fieldType().tokenized(),equalTo(false));
  json=jsonBuilder().startObject().field("b","complete me").endObject().bytes();
  doc=docMapper.parse("test","type","1",json).rootDoc();
  f=doc.getField("b");
  assertThat(f,notNullValue());
  assertThat(f.name(),equalTo("b"));
  assertThat(f.stringValue(),equalTo("complete me"));
  assertThat(f.fieldType().stored(),equalTo(false));
  assertNotSame(IndexOptions.NONE,f.fieldType().indexOptions());
  f=doc.getField("b.a");
  assertThat(f,notNullValue());
  assertThat(f.name(),equalTo("b.a"));
  assertThat(f.stringValue(),equalTo("complete me"));
  assertThat(f.fieldType().stored(),equalTo(false));
  assertNotSame(IndexOptions.NONE,f.fieldType().indexOptions());
}
