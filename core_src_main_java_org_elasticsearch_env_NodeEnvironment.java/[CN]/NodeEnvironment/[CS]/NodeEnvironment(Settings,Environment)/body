{
  super(settings);
  this.addNodeId=ADD_NODE_ID_TO_CUSTOM_PATH.get(settings);
  if (!DiscoveryNode.nodeRequiresLocalStorage(settings)) {
    nodePaths=null;
    sharedDataPath=null;
    locks=null;
    localNodeId=-1;
    return;
  }
  final NodePath[] nodePaths=new NodePath[environment.dataWithClusterFiles().length];
  final Lock[] locks=new Lock[nodePaths.length];
  boolean success=false;
  try {
    sharedDataPath=environment.sharedDataFile();
    int localNodeId=-1;
    IOException lastException=null;
    int maxLocalStorageNodes=MAX_LOCAL_STORAGE_NODES_SETTING.get(settings);
    for (int possibleLockId=0; possibleLockId < maxLocalStorageNodes; possibleLockId++) {
      for (int dirIndex=0; dirIndex < environment.dataWithClusterFiles().length; dirIndex++) {
        Path dir=environment.dataWithClusterFiles()[dirIndex].resolve(NODES_FOLDER).resolve(Integer.toString(possibleLockId));
        Files.createDirectories(dir);
        try (Directory luceneDir=FSDirectory.open(dir,NativeFSLockFactory.INSTANCE)){
          logger.trace("obtaining node lock on {} ...",dir.toAbsolutePath());
          try {
            locks[dirIndex]=luceneDir.obtainLock(NODE_LOCK_FILENAME);
            nodePaths[dirIndex]=new NodePath(dir,environment);
            localNodeId=possibleLockId;
          }
 catch (          LockObtainFailedException ex) {
            logger.trace("failed to obtain node lock on {}",dir.toAbsolutePath());
            releaseAndNullLocks(locks);
            break;
          }
        }
 catch (        IOException e) {
          logger.trace("failed to obtain node lock on {}",e,dir.toAbsolutePath());
          lastException=new IOException("failed to obtain lock on " + dir.toAbsolutePath(),e);
          releaseAndNullLocks(locks);
          break;
        }
      }
      if (locks[0] != null) {
        break;
      }
    }
    if (locks[0] == null) {
      throw new IllegalStateException("Failed to obtain node lock, is the following location writable?: " + Arrays.toString(environment.dataWithClusterFiles()),lastException);
    }
    this.localNodeId=localNodeId;
    this.locks=locks;
    this.nodePaths=nodePaths;
    if (logger.isDebugEnabled()) {
      logger.debug("using node location [{}], local_node_id [{}]",nodePaths,localNodeId);
    }
    maybeLogPathDetails();
    maybeLogHeapDetails();
    applySegmentInfosTrace(settings);
    assertCanWrite();
    success=true;
  }
  finally {
    if (success == false) {
      IOUtils.closeWhileHandlingException(locks);
    }
  }
}
