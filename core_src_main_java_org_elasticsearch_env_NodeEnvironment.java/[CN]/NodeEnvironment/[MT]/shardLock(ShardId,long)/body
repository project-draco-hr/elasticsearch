{
  logger.trace("acquiring node shardlock on [{}], timeout [{}]",shardId,lockTimeoutMS);
  final ShardLockKey shardLockKey=new ShardLockKey(shardId);
  final InternalShardLock shardLock;
  final boolean acquired;
synchronized (shardLocks) {
    if (shardLocks.containsKey(shardLockKey)) {
      shardLock=shardLocks.get(shardLockKey);
      shardLock.incWaitCount();
      acquired=false;
    }
 else {
      shardLock=new InternalShardLock(shardLockKey);
      shardLocks.put(shardLockKey,shardLock);
      acquired=true;
    }
  }
  if (acquired == false) {
    boolean success=false;
    try {
      shardLock.acquire(lockTimeoutMS);
      success=true;
    }
  finally {
      if (success == false) {
        shardLock.decWaitCount();
      }
    }
  }
  logger.trace("successfully acquired shardlock for [{}]",shardId);
  return new ShardLock(shardId){
    @Override protected void closeInternal(){
      shardLock.release();
      logger.trace("released shard lock for [{}]",shardLockKey);
    }
  }
;
}
