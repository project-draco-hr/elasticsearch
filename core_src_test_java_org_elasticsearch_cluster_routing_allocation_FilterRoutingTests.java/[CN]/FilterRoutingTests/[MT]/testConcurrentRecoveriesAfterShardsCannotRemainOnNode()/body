{
  AllocationService strategy=createAllocationService(Settings.builder().build());
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test1").settings(settings(Version.CURRENT)).numberOfShards(2).numberOfReplicas(0)).put(IndexMetaData.builder("test2").settings(settings(Version.CURRENT)).numberOfShards(2).numberOfReplicas(0)).build();
  RoutingTable initialRoutingTable=RoutingTable.builder().addAsNew(metaData.index("test1")).addAsNew(metaData.index("test2")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();
  logger.info("--> adding two nodes and performing rerouting");
  DiscoveryNode node1=newNode("node1",singletonMap("tag1","value1"));
  DiscoveryNode node2=newNode("node2",singletonMap("tag1","value2"));
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(node1).add(node2)).build();
  RoutingAllocation.Result routingResult=strategy.reroute(clusterState,"reroute");
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  assertThat(clusterState.getRoutingNodes().node(node1.getId()).numberOfShardsWithState(INITIALIZING),equalTo(2));
  assertThat(clusterState.getRoutingNodes().node(node2.getId()).numberOfShardsWithState(INITIALIZING),equalTo(2));
  logger.info("--> start the shards (only primaries)");
  routingResult=strategy.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING));
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  logger.info("--> make sure all shards are started");
  assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(),equalTo(4));
  logger.info("--> disable allocation for node1 and reroute");
  strategy=createAllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries","1").put("cluster.routing.allocation.exclude.tag1","value1").build());
  logger.info("--> move shards from node1 to node2");
  routingResult=strategy.reroute(clusterState,"reroute");
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  logger.info("--> check that concurrent recoveries only allows 1 shard to move");
  assertThat(clusterState.getRoutingNodes().node(node1.getId()).numberOfShardsWithState(STARTED),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node(node2.getId()).numberOfShardsWithState(INITIALIZING),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node(node2.getId()).numberOfShardsWithState(STARTED),equalTo(2));
  logger.info("--> start the shards (only primaries)");
  routingResult=strategy.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING));
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  logger.info("--> move second shard from node1 to node2");
  routingResult=strategy.reroute(clusterState,"reroute");
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  assertThat(clusterState.getRoutingNodes().node(node2.getId()).numberOfShardsWithState(INITIALIZING),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node(node2.getId()).numberOfShardsWithState(STARTED),equalTo(3));
  logger.info("--> start the shards (only primaries)");
  routingResult=strategy.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING));
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  routingResult=strategy.reroute(clusterState,"reroute");
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  assertThat(clusterState.getRoutingNodes().node(node2.getId()).numberOfShardsWithState(STARTED),equalTo(4));
}
