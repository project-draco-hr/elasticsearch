{
  AllocationService strategy=createAllocationService(Settings.builder().put("cluster.routing.allocation.include.tag1","value1,value2").put("cluster.routing.allocation.exclude.tag1","value3,value4").build());
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(2).numberOfReplicas(1)).build();
  RoutingTable initialRoutingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();
  logger.info("--> adding four nodes and performing rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1",singletonMap("tag1","value1"))).add(newNode("node2",singletonMap("tag1","value2"))).add(newNode("node3",singletonMap("tag1","value3"))).add(newNode("node4",singletonMap("tag1","value4")))).build();
  clusterState=strategy.reroute(clusterState,"reroute");
  assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(),equalTo(2));
  logger.info("--> start the shards (primaries)");
  clusterState=strategy.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING));
  logger.info("--> start the shards (replicas)");
  clusterState=strategy.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING));
  logger.info("--> make sure shards are only allocated on tag1 with value1 and value2");
  List<ShardRouting> startedShards=clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED);
  assertThat(startedShards.size(),equalTo(4));
  for (  ShardRouting startedShard : startedShards) {
    assertThat(startedShard.currentNodeId(),Matchers.anyOf(equalTo("node1"),equalTo("node2")));
  }
}
