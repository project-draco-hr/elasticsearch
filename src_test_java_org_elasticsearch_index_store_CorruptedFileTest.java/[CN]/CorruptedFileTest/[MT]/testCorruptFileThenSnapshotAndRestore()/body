{
  int numDocs=scaledRandomIntBetween(100,1000);
  assertThat(cluster().numDataNodes(),greaterThanOrEqualTo(2));
  assertAcked(prepareCreate("test").setSettings(ImmutableSettings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,"0").put(MergePolicyModule.MERGE_POLICY_TYPE_KEY,NoMergePolicyProvider.class).put(MockFSDirectoryService.CHECK_INDEX_ON_CLOSE,false).put(InternalEngine.INDEX_FAIL_ON_CORRUPTION,true).put("indices.recovery.concurrent_streams",10)));
  ensureGreen();
  IndexRequestBuilder[] builders=new IndexRequestBuilder[numDocs];
  for (int i=0; i < builders.length; i++) {
    builders[i]=client().prepareIndex("test","type").setSource("field","value");
  }
  indexRandom(true,builders);
  ensureGreen();
  assertAllSuccessful(client().admin().indices().prepareFlush().setForce(true).setWaitIfOngoing(true).execute().actionGet());
  CountResponse countResponse=client().prepareCount().get();
  assertHitCount(countResponse,numDocs);
  ShardRouting shardRouting=corruptRandomFile(false);
  logger.info("-->  creating repository");
  assertAcked(client().admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location",newTempDir(LifecycleScope.SUITE).getAbsolutePath()).put("compress",randomBoolean()).put("chunk_size",randomIntBetween(100,1000))));
  logger.info("--> snapshot");
  CreateSnapshotResponse createSnapshotResponse=client().admin().cluster().prepareCreateSnapshot("test-repo","test-snap").setWaitForCompletion(true).setIndices("test").get();
  if (createSnapshotResponse.getSnapshotInfo().state() == SnapshotState.PARTIAL) {
    logger.info("failed during snapshot -- maybe SI file got corrupted");
    final List<File> files=listShardFiles(shardRouting);
    File corruptedFile=null;
    for (    File file : files) {
      if (file.getName().startsWith("corrupted_")) {
        corruptedFile=file;
        break;
      }
    }
    assertThat(corruptedFile,notNullValue());
  }
 else {
    assertThat("" + createSnapshotResponse.getSnapshotInfo().state(),createSnapshotResponse.getSnapshotInfo().successfulShards(),greaterThan(0));
    assertThat("" + createSnapshotResponse.getSnapshotInfo().state(),createSnapshotResponse.getSnapshotInfo().successfulShards(),equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));
    assertThat(client().admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").get().getSnapshots().get(0).state(),equalTo(SnapshotState.SUCCESS));
    cluster().wipeIndices("test");
    RestoreSnapshotResponse restoreSnapshotResponse=client().admin().cluster().prepareRestoreSnapshot("test-repo","test-snap").setWaitForCompletion(true).execute().actionGet();
    assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(),greaterThan(0));
    assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),equalTo(restoreSnapshotResponse.getRestoreInfo().totalShards() - 1));
  }
}
