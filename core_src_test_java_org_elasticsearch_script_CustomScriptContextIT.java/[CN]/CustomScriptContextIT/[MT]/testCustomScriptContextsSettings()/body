{
  ContextAndHeaderHolder contextAndHeaders=new ContextAndHeaderHolder();
  ScriptService scriptService=internalCluster().getInstance(ScriptService.class);
  for (  String lang : LANG_SET) {
    for (    ScriptService.ScriptType scriptType : ScriptService.ScriptType.values()) {
      try {
        scriptService.compile(new Script("test",scriptType,lang,null),new ScriptContext.Plugin(PLUGIN_NAME,"custom_globally_disabled_op"),contextAndHeaders);
        fail("script compilation should have been rejected");
      }
 catch (      ScriptException e) {
        assertThat(e.getMessage(),containsString("scripts of type [" + scriptType + "], operation ["+ PLUGIN_NAME+ "_custom_globally_disabled_op] and lang ["+ lang+ "] are disabled"));
      }
    }
  }
  try {
    scriptService.compile(new Script("1",ScriptService.ScriptType.INLINE,"expression",null),new ScriptContext.Plugin(PLUGIN_NAME,"custom_exp_disabled_op"),contextAndHeaders);
    fail("script compilation should have been rejected");
  }
 catch (  ScriptException e) {
    assertThat(e.getMessage(),containsString("scripts of type [inline], operation [" + PLUGIN_NAME + "_custom_exp_disabled_op] and lang [expression] are disabled"));
  }
  CompiledScript compiledScript=scriptService.compile(new Script("1",ScriptService.ScriptType.INLINE,"expression",null),randomFrom(new ScriptContext[]{ScriptContext.Standard.AGGS,ScriptContext.Standard.SEARCH}),contextAndHeaders);
  assertThat(compiledScript,notNullValue());
  compiledScript=scriptService.compile(new Script("1",ScriptService.ScriptType.INLINE,"mustache",null),new ScriptContext.Plugin(PLUGIN_NAME,"custom_exp_disabled_op"),contextAndHeaders);
  assertThat(compiledScript,notNullValue());
  for (  String lang : LANG_SET) {
    compiledScript=scriptService.compile(new Script("1",ScriptService.ScriptType.INLINE,lang,null),new ScriptContext.Plugin(PLUGIN_NAME,"custom_op"),contextAndHeaders);
    assertThat(compiledScript,notNullValue());
  }
}
