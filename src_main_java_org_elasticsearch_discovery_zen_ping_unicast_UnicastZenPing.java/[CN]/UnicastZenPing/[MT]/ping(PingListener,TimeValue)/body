{
  final SendPingsHandler sendPingsHandler=new SendPingsHandler(pingIdGenerator.incrementAndGet());
  receivedResponses.put(sendPingsHandler.id(),new ConcurrentHashMap<DiscoveryNode,PingResponse>());
  sendPings(timeout,null,sendPingsHandler);
  threadPool.schedule(TimeValue.timeValueMillis(timeout.millis() / 2),ThreadPool.Names.GENERIC,new Runnable(){
    @Override public void run(){
      sendPings(timeout,null,sendPingsHandler);
      threadPool.schedule(TimeValue.timeValueMillis(timeout.millis() / 2),ThreadPool.Names.GENERIC,new Runnable(){
        @Override public void run(){
          sendPings(timeout,TimeValue.timeValueMillis(timeout.millis() / 2),sendPingsHandler);
          ConcurrentMap<DiscoveryNode,PingResponse> responses=receivedResponses.remove(sendPingsHandler.id());
          listener.onPing(responses.values().toArray(new PingResponse[responses.size()]));
          for (          DiscoveryNode node : sendPingsHandler.nodeToDisconnect) {
            transportService.disconnectFromNode(node);
          }
          sendPingsHandler.close();
        }
      }
);
    }
  }
);
}
