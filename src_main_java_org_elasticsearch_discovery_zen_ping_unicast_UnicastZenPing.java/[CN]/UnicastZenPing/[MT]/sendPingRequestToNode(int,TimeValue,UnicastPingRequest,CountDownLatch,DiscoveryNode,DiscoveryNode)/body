{
  logger.trace("[{}] sending to {}",id,nodeToSend);
  transportService.sendRequest(nodeToSend,ACTION_NAME,pingRequest,TransportRequestOptions.options().withTimeout((long)(timeout.millis() * 1.25)),new BaseTransportResponseHandler<UnicastPingResponse>(){
    @Override public UnicastPingResponse newInstance(){
      return new UnicastPingResponse();
    }
    @Override public String executor(){
      return ThreadPool.Names.SAME;
    }
    @Override public void handleResponse(    UnicastPingResponse response){
      logger.trace("[{}] received response from {}: {}",id,nodeToSend,Arrays.toString(response.pingResponses));
      try {
        DiscoveryNodes discoveryNodes=contextProvider.nodes();
        for (        PingResponse pingResponse : response.pingResponses) {
          if (pingResponse.node().id().equals(discoveryNodes.localNodeId())) {
            continue;
          }
          if (!pingResponse.clusterName().equals(clusterName)) {
            logger.debug("[{}] filtering out response from {}, not same cluster_name [{}]",id,pingResponse.node(),pingResponse.clusterName().value());
            continue;
          }
          ConcurrentMap<DiscoveryNode,PingResponse> responses=receivedResponses.get(response.id);
          if (responses == null) {
            logger.warn("received ping response {} with no matching id [{}]",pingResponse,response.id);
          }
 else {
            PingResponse existingResponse=responses.get(pingResponse.node());
            if (existingResponse == null) {
              responses.put(pingResponse.node(),pingResponse);
            }
 else {
              if (pingResponse.master() != null) {
                responses.put(pingResponse.node(),pingResponse);
              }
            }
          }
        }
      }
  finally {
        latch.countDown();
      }
    }
    @Override public void handleException(    TransportException exp){
      latch.countDown();
      if (exp instanceof ConnectTransportException) {
        logger.trace("failed to connect to {}",exp,nodeToSend);
      }
 else {
        logger.warn("failed to send ping to [{}]",exp,node);
      }
    }
  }
);
}
