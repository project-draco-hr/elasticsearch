{
  final UnicastPingRequest pingRequest=new UnicastPingRequest();
  pingRequest.id=sendPingsHandler.id();
  pingRequest.timeout=timeout;
  DiscoveryNodes discoNodes=nodesProvider.nodes();
  pingRequest.pingResponse=new PingResponse(discoNodes.localNode(),discoNodes.masterNode(),clusterName);
  List<DiscoveryNode> nodesToPing=newArrayList(nodes);
  for (  UnicastHostsProvider provider : hostsProviders) {
    nodesToPing.addAll(provider.buildDynamicNodes());
  }
  final CountDownLatch latch=new CountDownLatch(nodesToPing.size());
  for (  final DiscoveryNode node : nodesToPing) {
    boolean nodeFoundByAddressX;
    DiscoveryNode nodeToSendX=discoNodes.findByAddress(node.address());
    if (nodeToSendX != null) {
      nodeFoundByAddressX=true;
    }
 else {
      nodeToSendX=node;
      nodeFoundByAddressX=false;
    }
    final DiscoveryNode nodeToSend=nodeToSendX;
    final boolean nodeFoundByAddress=nodeFoundByAddressX;
    if (!transportService.nodeConnected(nodeToSend)) {
      if (sendPingsHandler.isClosed()) {
        return;
      }
      sendPingsHandler.nodeToDisconnect.add(nodeToSend);
      sendPingsHandler.executor().execute(new Runnable(){
        @Override public void run(){
          try {
            if (!nodeFoundByAddress) {
              transportService.connectToNodeLight(nodeToSend);
            }
 else {
              transportService.connectToNode(nodeToSend);
            }
            sendPingRequestToNode(sendPingsHandler.id(),timeout,pingRequest,latch,node,nodeToSend);
          }
 catch (          ConnectTransportException e) {
            logger.trace("[{}] failed to connect to {}",e,sendPingsHandler.id(),nodeToSend);
            latch.countDown();
          }
        }
      }
);
    }
 else {
      sendPingRequestToNode(sendPingsHandler.id(),timeout,pingRequest,latch,node,nodeToSend);
    }
  }
  if (waitTime != null) {
    try {
      latch.await(waitTime.millis(),TimeUnit.MILLISECONDS);
    }
 catch (    InterruptedException e) {
    }
  }
}
