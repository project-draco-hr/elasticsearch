{
  prepareCreate("idx").addMapping("type",jsonBuilder().startObject().startObject("type").startObject("properties").startObject("str_value").field("type","string").startObject("fields").startObject("hash").field("type","murmur3").endObject().endObject().endObject().startObject("str_values").field("type","string").startObject("fields").startObject("hash").field("type","murmur3").endObject().endObject().endObject().startObject("l_value").field("type","long").startObject("fields").startObject("hash").field("type","murmur3").endObject().endObject().endObject().startObject("l_values").field("type","long").startObject("fields").startObject("hash").field("type","murmur3").endObject().endObject().endObject().startObject("d_value").field("type","double").startObject("fields").startObject("hash").field("type","murmur3").endObject().endObject().endObject().startObject("d_values").field("type","double").startObject("fields").startObject("hash").field("type","murmur3").endObject().endObject().endObject().endObject().endObject().endObject()).execute().actionGet();
  numDocs=randomIntBetween(2,100);
  precisionThreshold=randomIntBetween(0,1 << randomInt(20));
  IndexRequestBuilder[] builders=new IndexRequestBuilder[(int)numDocs];
  for (int i=0; i < numDocs; ++i) {
    builders[i]=client().prepareIndex("idx","type").setSource(jsonBuilder().startObject().field("str_value","s" + i).field("str_values",new String[]{"s" + (i * 2),"s" + (i * 2 + 1)}).field("l_value",i).field("l_values",new int[]{i * 2,i * 2 + 1}).field("d_value",i).field("d_values",new double[]{i * 2,i * 2 + 1}).endObject());
  }
  indexRandom(true,builders);
  createIndex("idx_unmapped");
  IndexRequestBuilder[] dummyDocsBuilder=new IndexRequestBuilder[10];
  for (int i=0; i < dummyDocsBuilder.length; i++) {
    dummyDocsBuilder[i]=client().prepareIndex("idx","type").setSource("a_field","1");
  }
  indexRandom(true,dummyDocsBuilder);
  ensureSearchable();
}
