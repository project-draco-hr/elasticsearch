{
  try (XContentParser parser=XContentHelper.createParser(content)){
    if (parser.nextToken() != XContentParser.Token.START_OBJECT) {
      throw new IllegalArgumentException("Malformed content, must start with an object");
    }
 else {
      XContentParser.Token token;
      String currentFieldName=null;
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          currentFieldName=parser.currentName();
        }
 else         if (parseFieldMatcher.match(currentFieldName,Fields.TEXT) && token == XContentParser.Token.VALUE_STRING) {
          analyzeRequest.text(parser.text());
        }
 else         if (parseFieldMatcher.match(currentFieldName,Fields.TEXT) && token == XContentParser.Token.START_ARRAY) {
          List<String> texts=new ArrayList<>();
          while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
            if (token.isValue() == false) {
              throw new IllegalArgumentException(currentFieldName + " array element should only contain text");
            }
            texts.add(parser.text());
          }
          analyzeRequest.text(texts.toArray(new String[texts.size()]));
        }
 else         if (parseFieldMatcher.match(currentFieldName,Fields.ANALYZER) && token == XContentParser.Token.VALUE_STRING) {
          analyzeRequest.analyzer(parser.text());
        }
 else         if (parseFieldMatcher.match(currentFieldName,Fields.FIELD) && token == XContentParser.Token.VALUE_STRING) {
          analyzeRequest.field(parser.text());
        }
 else         if (parseFieldMatcher.match(currentFieldName,Fields.TOKENIZER) && token == XContentParser.Token.VALUE_STRING) {
          analyzeRequest.tokenizer(parser.text());
        }
 else         if (parseFieldMatcher.match(currentFieldName,Fields.TOKEN_FILTERS) && token == XContentParser.Token.START_ARRAY) {
          List<String> filters=new ArrayList<>();
          while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
            if (token.isValue() == false) {
              throw new IllegalArgumentException(currentFieldName + " array element should only contain token filter's name");
            }
            filters.add(parser.text());
          }
          analyzeRequest.tokenFilters(filters.toArray(new String[filters.size()]));
        }
 else         if (parseFieldMatcher.match(currentFieldName,Fields.CHAR_FILTERS) && token == XContentParser.Token.START_ARRAY) {
          List<String> charFilters=new ArrayList<>();
          while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
            if (token.isValue() == false) {
              throw new IllegalArgumentException(currentFieldName + " array element should only contain char filter's name");
            }
            charFilters.add(parser.text());
          }
          analyzeRequest.charFilters(charFilters.toArray(new String[charFilters.size()]));
        }
 else         if (parseFieldMatcher.match(currentFieldName,Fields.EXPLAIN) && token == XContentParser.Token.VALUE_BOOLEAN) {
          analyzeRequest.explain(parser.booleanValue());
        }
 else         if (parseFieldMatcher.match(currentFieldName,Fields.ATTRIBUTES) && token == XContentParser.Token.START_ARRAY) {
          List<String> attributes=new ArrayList<>();
          while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
            if (token.isValue() == false) {
              throw new IllegalArgumentException(currentFieldName + " array element should only contain attribute name");
            }
            attributes.add(parser.text());
          }
          analyzeRequest.attributes(attributes.toArray(new String[attributes.size()]));
        }
 else {
          throw new IllegalArgumentException("Unknown parameter [" + currentFieldName + "] in request body or parameter is of the wrong type["+ token+ "] ");
        }
      }
    }
  }
 catch (  IOException e) {
    throw new IllegalArgumentException("Failed to parse request body",e);
  }
}
