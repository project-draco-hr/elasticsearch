{
  try (XContentParser parser=XContentHelper.createParser(content)){
    if (parser.nextToken() != XContentParser.Token.START_OBJECT) {
      throw new IllegalArgumentException("Malforrmed content, must start with an object");
    }
 else {
      XContentParser.Token token;
      String currentFieldName=null;
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          currentFieldName=parser.currentName();
        }
 else         if ("text".equals(currentFieldName) && token == XContentParser.Token.VALUE_STRING) {
          analyzeRequest.text(parser.text());
        }
 else         if ("text".equals(currentFieldName) && token == XContentParser.Token.START_ARRAY) {
          List<String> texts=Lists.newArrayList();
          while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
            if (token.isValue() == false) {
              throw new IllegalArgumentException(currentFieldName + " array element should only contain text");
            }
            texts.add(parser.text());
          }
          analyzeRequest.text(texts.toArray(Strings.EMPTY_ARRAY));
        }
 else         if ("analyzer".equals(currentFieldName) && token == XContentParser.Token.VALUE_STRING) {
          analyzeRequest.analyzer(parser.text());
        }
 else         if ("field".equals(currentFieldName) && token == XContentParser.Token.VALUE_STRING) {
          analyzeRequest.field(parser.text());
        }
 else         if ("tokenizer".equals(currentFieldName) && token == XContentParser.Token.VALUE_STRING) {
          analyzeRequest.tokenizer(parser.text());
        }
 else         if (("token_filters".equals(currentFieldName) || "filters".equals(currentFieldName)) && token == XContentParser.Token.START_ARRAY) {
          List<String> filters=Lists.newArrayList();
          while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
            if (token.isValue() == false) {
              throw new IllegalArgumentException(currentFieldName + " array element should only contain token filter's name");
            }
            filters.add(parser.text());
          }
          analyzeRequest.tokenFilters(filters.toArray(Strings.EMPTY_ARRAY));
        }
 else         if ("char_filters".equals(currentFieldName) && token == XContentParser.Token.START_ARRAY) {
          List<String> charFilters=Lists.newArrayList();
          while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
            if (token.isValue() == false) {
              throw new IllegalArgumentException(currentFieldName + " array element should only contain char filter's name");
            }
            charFilters.add(parser.text());
          }
          analyzeRequest.tokenFilters(charFilters.toArray(Strings.EMPTY_ARRAY));
        }
 else {
          throw new IllegalArgumentException("Unknown parameter [" + currentFieldName + "] in request body or parameter is of the wrong type["+ token+ "] ");
        }
      }
    }
  }
 catch (  IOException e) {
    throw new IllegalArgumentException("Failed to parse request body",e);
  }
}
