{
  String keyField=null;
  String valueField=null;
  int size=10;
  TermsStatsFacet.ComparatorType comparatorType=TermsStatsFacet.ComparatorType.COUNT;
  String scriptLang=null;
  String script=null;
  Map<String,Object> params=null;
  String currentFieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("params".equals(currentFieldName)) {
        params=parser.map();
      }
    }
 else     if (token.isValue()) {
      if ("key_field".equals(currentFieldName) || "keyField".equals(currentFieldName)) {
        keyField=parser.text();
      }
 else       if ("value_field".equals(currentFieldName) || "valueField".equals(currentFieldName)) {
        valueField=parser.text();
      }
 else       if ("script_field".equals(currentFieldName)) {
        script=parser.text();
      }
 else       if ("value_script".equals(currentFieldName)) {
        script=parser.text();
      }
 else       if ("size".equals(currentFieldName)) {
        size=parser.intValue();
      }
 else       if ("all_terms".equals(currentFieldName) || "allTerms".equals(currentFieldName)) {
        if (parser.booleanValue()) {
          size=0;
        }
      }
 else       if ("order".equals(currentFieldName) || "comparator".equals(currentFieldName)) {
        comparatorType=TermsStatsFacet.ComparatorType.fromString(parser.text());
      }
 else       if ("value_script".equals(currentFieldName)) {
        script=parser.text();
      }
 else       if ("lang".equals(currentFieldName)) {
        scriptLang=parser.text();
      }
    }
  }
  if (keyField == null) {
    throw new FacetPhaseExecutionException(facetName,"[key_field] is required to be set for terms stats facet");
  }
  if (valueField == null && script == null) {
    throw new FacetPhaseExecutionException(facetName,"either [value_field] or [script] are required to be set for terms stats facet");
  }
  FieldMapper keyMapper=context.smartNameFieldMapper(keyField);
  if (keyMapper == null) {
    throw new FacetPhaseExecutionException(facetName,"failed to find mapping for " + keyField);
  }
  IndexFieldData keyIndexFieldData=context.fieldData().getForField(keyMapper);
  IndexNumericFieldData valueIndexFieldData=null;
  SearchScript valueScript=null;
  if (valueField != null) {
    valueIndexFieldData=context.fieldData().getForField(context.smartNameFieldMapper(valueField));
  }
 else {
    valueScript=context.scriptService().search(context.lookup(),scriptLang,script,params);
  }
  if (keyIndexFieldData instanceof IndexNumericFieldData) {
    IndexNumericFieldData keyIndexNumericFieldData=(IndexNumericFieldData)keyIndexFieldData;
    if (keyIndexNumericFieldData.getNumericType().isFloatingPoint()) {
      return new TermsStatsDoubleFacetExecutor(keyIndexNumericFieldData,valueIndexFieldData,valueScript,size,comparatorType,context);
    }
 else {
      return new TermsStatsLongFacetExecutor(keyIndexNumericFieldData,valueIndexFieldData,valueScript,size,comparatorType,context);
    }
  }
  return new TermsStatsStringFacetExecutor(keyIndexFieldData,valueIndexFieldData,valueScript,size,comparatorType,context);
}
