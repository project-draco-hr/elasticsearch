{
  XContentParser parser=parseContext.parser();
  String template="";
  Map<String,Object> vars=new HashMap<String,Object>();
  String currentFieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (QUERY.equals(currentFieldName)) {
      if (token == XContentParser.Token.START_OBJECT && !parser.hasTextCharacters()) {
        XContentBuilder builder=XContentBuilder.builder(JsonXContent.jsonXContent);
        builder.copyCurrentStructure(parser);
        template=builder.string();
      }
 else {
        template=parser.text();
      }
    }
 else     if (PARAMS.equals(currentFieldName)) {
      XContentParser.Token innerToken;
      String key=null;
      while ((innerToken=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (innerToken == XContentParser.Token.FIELD_NAME) {
          key=parser.currentName();
        }
 else {
          if (key != null) {
            vars.put(key,parser.text());
          }
 else {
            throw new IllegalStateException("Template parameter key must not be null.");
          }
          key=null;
        }
      }
    }
  }
  ExecutableScript executable=this.scriptService.executable("mustache",template,vars);
  BytesReference querySource=(BytesReference)executable.run();
  XContentParser qSourceParser=XContentFactory.xContent(querySource).createParser(querySource);
  try {
    final QueryParseContext context=new QueryParseContext(parseContext.index(),parseContext.indexQueryParser);
    context.reset(qSourceParser);
    Query result=context.parseInnerQuery();
    parser.nextToken();
    return result;
  }
  finally {
    qSourceParser.close();
  }
}
