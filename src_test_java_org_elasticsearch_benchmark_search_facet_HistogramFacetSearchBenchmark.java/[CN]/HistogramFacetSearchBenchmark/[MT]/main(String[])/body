{
  Settings settings=settingsBuilder().put("index.engine.robin.refreshInterval","-1").put("gateway.type","local").put(SETTING_NUMBER_OF_SHARDS,2).put(SETTING_NUMBER_OF_REPLICAS,1).build();
  Node node1=nodeBuilder().settings(settingsBuilder().put(settings).put("name","node1")).node();
  Client client=node1.client();
  long COUNT=SizeValue.parseSizeValue("5m").singles();
  int BATCH=500;
  int QUERY_WARMUP=20;
  int QUERY_COUNT=200;
  int NUMBER_OF_TERMS=1000;
  long[] lValues=new long[NUMBER_OF_TERMS];
  for (int i=0; i < NUMBER_OF_TERMS; i++) {
    lValues[i]=i;
  }
  Thread.sleep(10000);
  try {
    client.admin().indices().create(createIndexRequest("test").settings(settingsBuilder().put("index.number_of_shards",1).put("index.number_of_replicas",0))).actionGet();
    StopWatch stopWatch=new StopWatch().start();
    System.out.println("--> Indexing [" + COUNT + "] ...");
    long ITERS=COUNT / BATCH;
    long i=1;
    int counter=0;
    for (; i <= ITERS; i++) {
      BulkRequestBuilder request=client.prepareBulk();
      for (int j=0; j < BATCH; j++) {
        counter++;
        XContentBuilder source=jsonBuilder().startObject().field("id",Integer.valueOf(counter)).field("l_value",lValues[counter % lValues.length]).field("date",new Date()).endObject();
        request.add(Requests.indexRequest("test").type("type1").id(Integer.toString(counter)).source(source));
      }
      BulkResponse response=request.execute().actionGet();
      if (response.hasFailures()) {
        System.err.println("--> failures...");
      }
      if (((i * BATCH) % 10000) == 0) {
        System.out.println("--> Indexed " + (i * BATCH) + " took "+ stopWatch.stop().lastTaskTime());
        stopWatch.start();
      }
    }
    System.out.println("--> Indexing took " + stopWatch.totalTime() + ", TPS "+ (((double)(COUNT)) / stopWatch.totalTime().secondsFrac()));
  }
 catch (  Exception e) {
    System.out.println("--> Index already exists, ignoring indexing phase, waiting for green");
    ClusterHealthResponse clusterHealthResponse=client.admin().cluster().prepareHealth().setWaitForGreenStatus().setTimeout("10m").execute().actionGet();
    if (clusterHealthResponse.isTimedOut()) {
      System.err.println("--> Timed out waiting for cluster health");
    }
  }
  client.admin().indices().prepareRefresh().execute().actionGet();
  COUNT=client.prepareCount().setQuery(matchAllQuery()).execute().actionGet().getCount();
  System.out.println("--> Number of docs in index: " + COUNT);
  System.out.println("--> Warmup...");
  for (int j=0; j < QUERY_WARMUP; j++) {
    SearchResponse searchResponse=client.prepareSearch().setQuery(matchAllQuery()).addFacet(histogramFacet("l_value").field("l_value").interval(4)).addFacet(histogramFacet("date").field("date").interval(1000)).execute().actionGet();
    if (j == 0) {
      System.out.println("--> Warmup took: " + searchResponse.getTook());
    }
    if (searchResponse.getHits().totalHits() != COUNT) {
      System.err.println("--> mismatch on hits");
    }
  }
  System.out.println("--> Warmup DONE");
  long totalQueryTime=0;
  for (int j=0; j < QUERY_COUNT; j++) {
    SearchResponse searchResponse=client.prepareSearch().setQuery(matchAllQuery()).addFacet(histogramFacet("l_value").field("l_value").interval(4)).execute().actionGet();
    if (searchResponse.getHits().totalHits() != COUNT) {
      System.err.println("--> mismatch on hits");
    }
    totalQueryTime+=searchResponse.getTookInMillis();
  }
  System.out.println("--> Histogram Facet (l_value) " + (totalQueryTime / QUERY_COUNT) + "ms");
  totalQueryTime=0;
  for (int j=0; j < QUERY_COUNT; j++) {
    SearchResponse searchResponse=client.prepareSearch().setQuery(matchAllQuery()).addFacet(histogramFacet("l_value").field("l_value").valueField("l_value").interval(4)).execute().actionGet();
    if (searchResponse.getHits().totalHits() != COUNT) {
      System.err.println("--> mismatch on hits");
    }
    totalQueryTime+=searchResponse.getTookInMillis();
  }
  System.out.println("--> Histogram Facet (l_value/l_value) " + (totalQueryTime / QUERY_COUNT) + "ms");
  totalQueryTime=0;
  for (int j=0; j < QUERY_COUNT; j++) {
    SearchResponse searchResponse=client.prepareSearch().setQuery(matchAllQuery()).addFacet(histogramFacet("date").field("date").interval(1000)).execute().actionGet();
    if (searchResponse.getHits().totalHits() != COUNT) {
      System.err.println("--> mismatch on hits");
    }
    totalQueryTime+=searchResponse.getTookInMillis();
  }
  System.out.println("--> Histogram Facet (date) " + (totalQueryTime / QUERY_COUNT) + "ms");
  totalQueryTime=0;
  for (int j=0; j < QUERY_COUNT; j++) {
    SearchResponse searchResponse=client.prepareSearch().setQuery(matchAllQuery()).addFacet(histogramFacet("date").field("date").valueField("l_value").interval(1000)).execute().actionGet();
    if (searchResponse.getHits().totalHits() != COUNT) {
      System.err.println("--> mismatch on hits");
    }
    totalQueryTime+=searchResponse.getTookInMillis();
  }
  System.out.println("--> Histogram Facet (date/l_value) " + (totalQueryTime / QUERY_COUNT) + "ms");
  totalQueryTime=0;
  for (int j=0; j < QUERY_COUNT; j++) {
    SearchResponse searchResponse=client.prepareSearch().setQuery(matchAllQuery()).addFacet(dateHistogramFacet("date").field("date").interval("day").mode(FacetBuilder.Mode.COLLECTOR)).execute().actionGet();
    if (searchResponse.getHits().totalHits() != COUNT) {
      System.err.println("--> mismatch on hits");
    }
    totalQueryTime+=searchResponse.getTookInMillis();
  }
  System.out.println("--> Date Histogram Facet (mode/collector) (date) " + (totalQueryTime / QUERY_COUNT) + "ms");
  totalQueryTime=0;
  for (int j=0; j < QUERY_COUNT; j++) {
    SearchResponse searchResponse=client.prepareSearch().setQuery(matchAllQuery()).addFacet(dateHistogramFacet("date").field("date").interval("day").mode(FacetBuilder.Mode.POST)).execute().actionGet();
    if (searchResponse.getHits().totalHits() != COUNT) {
      System.err.println("--> mismatch on hits");
    }
    totalQueryTime+=searchResponse.getTookInMillis();
  }
  System.out.println("--> Date Histogram Facet (mode/post) (date) " + (totalQueryTime / QUERY_COUNT) + "ms");
  node1.close();
}
