{
  InternalSearchHits[] shardHits=new InternalSearchHits[aggregations.size()];
  final TopDocs reducedTopDocs;
  final TopDocs[] shardDocs;
  try {
    if (topDocs instanceof TopFieldDocs) {
      Sort sort=new Sort(((TopFieldDocs)topDocs).fields);
      shardDocs=new TopFieldDocs[aggregations.size()];
      for (int i=0; i < shardDocs.length; i++) {
        InternalTopHits topHitsAgg=(InternalTopHits)aggregations.get(i);
        shardDocs[i]=(TopFieldDocs)topHitsAgg.topDocs;
        shardHits[i]=topHitsAgg.searchHits;
      }
      reducedTopDocs=TopDocs.merge(sort,from,size,(TopFieldDocs[])shardDocs);
    }
 else {
      shardDocs=new TopDocs[aggregations.size()];
      for (int i=0; i < shardDocs.length; i++) {
        InternalTopHits topHitsAgg=(InternalTopHits)aggregations.get(i);
        shardDocs[i]=topHitsAgg.topDocs;
        shardHits[i]=topHitsAgg.searchHits;
      }
      reducedTopDocs=TopDocs.merge(from,size,shardDocs);
    }
    final int[] tracker=new int[shardHits.length];
    InternalSearchHit[] hits=new InternalSearchHit[reducedTopDocs.scoreDocs.length];
    for (int i=0; i < reducedTopDocs.scoreDocs.length; i++) {
      ScoreDoc scoreDoc=reducedTopDocs.scoreDocs[i];
      int position;
      do {
        position=tracker[scoreDoc.shardIndex]++;
      }
 while (shardDocs[scoreDoc.shardIndex].scoreDocs[position] != scoreDoc);
      hits[i]=(InternalSearchHit)shardHits[scoreDoc.shardIndex].getAt(position);
    }
    return new InternalTopHits(name,from,size,reducedTopDocs,new InternalSearchHits(hits,reducedTopDocs.totalHits,reducedTopDocs.getMaxScore()),reducers(),getMetaData());
  }
 catch (  IOException e) {
    throw ExceptionsHelper.convertToElastic(e);
  }
}
