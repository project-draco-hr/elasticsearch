{
  PendingClusterTasksRequest pendingClusterTasksRequest=new PendingClusterTasksRequest();
  client.admin().cluster().pendingClusterTasks(pendingClusterTasksRequest,new ActionListener<PendingClusterTasksResponse>(){
    @Override public void onResponse(    PendingClusterTasksResponse response){
      try {
        XContentBuilder builder=RestXContentBuilder.restContentBuilder(request);
        builder.startObject();
        builder.startArray(Fields.TASKS);
        for (        PendingClusterTask pendingClusterTask : response) {
          builder.startObject();
          builder.field(Fields.INSERT_ORDER,pendingClusterTask.insertOrder());
          builder.field(Fields.PRIORITY,pendingClusterTask.priority());
          builder.field(Fields.SOURCE,pendingClusterTask.source());
          builder.field(Fields.TIME_IN_QUEUE_MILLIS,pendingClusterTask.timeInQueueInMillis());
          builder.field(Fields.TIME_IN_QUEUE,pendingClusterTask.getTimeInQueue());
          builder.endObject();
        }
        builder.endArray();
        channel.sendResponse(new XContentRestResponse(request,RestStatus.OK,builder));
      }
 catch (      Throwable e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      if (logger.isDebugEnabled()) {
        logger.debug("failed to get pending cluster tasks",e);
      }
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
