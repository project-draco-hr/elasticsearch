{
  XContentParser parser=parseContext.parser();
  String fieldName=null;
  List<Object> values=null;
  TermsLookup termsLookup=null;
  String queryName=null;
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  XContentParser.Token token;
  String currentFieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (parseContext.isDeprecatedSetting(currentFieldName)) {
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if (fieldName != null) {
        throw new ParsingException(parser.getTokenLocation(),"[" + TermsQueryBuilder.NAME + "] query does not support multiple fields");
      }
      fieldName=currentFieldName;
      values=parseValues(parser);
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if (fieldName != null) {
        throw new ParsingException(parser.getTokenLocation(),"[" + TermsQueryBuilder.NAME + "] query does not support more than one field. "+ "Already got: ["+ fieldName+ "] but also found ["+ currentFieldName+ "]");
      }
      fieldName=currentFieldName;
      termsLookup=TermsLookup.parseTermsLookup(parser);
    }
 else     if (token.isValue()) {
      if (parseContext.getParseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.BOOST_FIELD)) {
        boost=parser.floatValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.NAME_FIELD)) {
        queryName=parser.text();
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"[" + TermsQueryBuilder.NAME + "] query does not support ["+ currentFieldName+ "]");
      }
    }
 else {
      throw new ParsingException(parser.getTokenLocation(),"[" + TermsQueryBuilder.NAME + "] unknown token ["+ token+ "] after ["+ currentFieldName+ "]");
    }
  }
  if (fieldName == null) {
    throw new ParsingException(parser.getTokenLocation(),"[" + TermsQueryBuilder.NAME + "] query requires a field name, "+ "followed by array of terms or a document lookup specification");
  }
  return new TermsQueryBuilder(fieldName,values,termsLookup).boost(boost).queryName(queryName);
}
