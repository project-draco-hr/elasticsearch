{
  new PutPipelineRequestBuilder(client(),PutPipelineAction.INSTANCE).setId("_id").setSource(jsonBuilder().startObject().field("description","my_pipeline").startArray("processors").startObject().startObject("grok").field("field","field1").field("pattern","%{NUMBER:val:float} %{NUMBER:status:int} <%{WORD:msg}>").endObject().endObject().endArray().endObject().bytes()).get();
  assertBusy(new Runnable(){
    @Override public void run(){
      GetPipelineResponse response=new GetPipelineRequestBuilder(client(),GetPipelineAction.INSTANCE).setIds("_id").get();
      assertThat(response.isFound(),is(true));
      assertThat(response.pipelines().get("_id"),notNullValue());
    }
  }
);
  SimulatePipelineResponse response=new SimulatePipelineRequestBuilder(client(),SimulatePipelineAction.INSTANCE).setId("_id").setSource(jsonBuilder().startObject().startArray("docs").startObject().field("_index","index").field("_type","type").field("_id","id").startObject("_source").field("foo","bar").endObject().endObject().endArray().endObject().bytes()).get();
  Map<String,Object> expectedDoc=new HashMap<>();
  expectedDoc.put("foo","bar");
  Data expectedData=new Data("index","type","id",expectedDoc);
  SimulatedItemResponse expectedResponse=new SimulatedItemResponse(expectedData);
  SimulatedItemResponse[] expectedResponses=new SimulatedItemResponse[]{expectedResponse};
  assertThat(response.responses().length,equalTo(1));
  assertThat(response.responses()[0].getData().getIndex(),equalTo(expectedResponse.getData().getIndex()));
  assertThat(response.responses()[0].getData(),equalTo(expectedResponse.getData()));
  assertThat(response.responses()[0],equalTo(expectedResponse));
  assertThat(response.responses(),equalTo(expectedResponses));
  assertThat(response.pipelineId(),equalTo("_id"));
}
