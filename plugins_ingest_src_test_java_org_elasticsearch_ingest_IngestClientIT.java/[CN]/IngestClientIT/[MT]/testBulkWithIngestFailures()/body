{
  createIndex("index");
  int numRequests=scaledRandomIntBetween(32,128);
  BulkRequest bulkRequest=new BulkRequest();
  bulkRequest.putHeader(IngestPlugin.PIPELINE_ID_PARAM,"_none_existing_id");
  for (int i=0; i < numRequests; i++) {
    if (i % 2 == 0) {
      UpdateRequest updateRequest=new UpdateRequest("index","type",Integer.toString(i));
      updateRequest.upsert("field","value");
      updateRequest.doc(new HashMap());
      bulkRequest.add(updateRequest);
    }
 else {
      IndexRequest indexRequest=new IndexRequest("index","type",Integer.toString(i));
      indexRequest.source("field1","value1");
      bulkRequest.add(indexRequest);
    }
  }
  BulkResponse response=client().bulk(bulkRequest).actionGet();
  assertThat(response.getItems().length,equalTo(bulkRequest.requests().size()));
  for (int i=0; i < bulkRequest.requests().size(); i++) {
    ActionRequest request=bulkRequest.requests().get(i);
    BulkItemResponse itemResponse=response.getItems()[i];
    if (request instanceof IndexRequest) {
      BulkItemResponse.Failure failure=itemResponse.getFailure();
      assertThat(failure.getMessage(),equalTo("java.lang.IllegalArgumentException: pipeline with id [_none_existing_id] does not exist"));
    }
 else     if (request instanceof UpdateRequest) {
      UpdateResponse updateResponse=itemResponse.getResponse();
      assertThat(updateResponse.getId(),equalTo(Integer.toString(i)));
      assertThat(updateResponse.isCreated(),is(true));
    }
 else {
      fail("unexpected request item [" + request + "]");
    }
  }
}
