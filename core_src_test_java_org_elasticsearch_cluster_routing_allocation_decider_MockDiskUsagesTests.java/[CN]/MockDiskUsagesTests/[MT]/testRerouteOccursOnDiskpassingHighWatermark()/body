{
  List<String> nodes=internalCluster().startNodesAsync(3).get();
  assertBusy(new Runnable(){
    @Override public void run(){
      NodesStatsResponse resp=client().admin().cluster().prepareNodesStats().get();
      assertThat(resp.getNodes().length,equalTo(3));
    }
  }
);
  final MockInternalClusterInfoService cis=(MockInternalClusterInfoService)internalCluster().getInstance(ClusterInfoService.class,internalCluster().getMasterName());
  cis.setN1Usage(nodes.get(0),new DiskUsage(nodes.get(0),"n1",100,50));
  cis.setN2Usage(nodes.get(1),new DiskUsage(nodes.get(1),"n2",100,50));
  cis.setN3Usage(nodes.get(2),new DiskUsage(nodes.get(2),"n3",100,50));
  client().admin().cluster().prepareUpdateSettings().setTransientSettings(settingsBuilder().put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK,randomFrom("20b","80%")).put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK,randomFrom("10b","90%")).put(DiskThresholdDecider.CLUSTER_ROUTING_ALLOCATION_REROUTE_INTERVAL,"1s")).get();
  prepareCreate("test").setSettings(settingsBuilder().put("number_of_shards",10).put("number_of_replicas",0).put("index.routing.allocation.exclude._name","")).get();
  ensureGreen("test");
  assertBusy(new Runnable(){
    @Override public void run(){
      ClusterInfo info=cis.getClusterInfo();
      logger.info("--> got: {} nodes",info.getNodeDiskUsages().size());
      assertThat(info.getNodeDiskUsages().size(),greaterThan(0));
    }
  }
);
  List<String> realNodeNames=newArrayList();
  ClusterStateResponse resp=client().admin().cluster().prepareState().get();
  Iterator<RoutingNode> iter=resp.getState().getRoutingNodes().iterator();
  while (iter.hasNext()) {
    RoutingNode node=iter.next();
    realNodeNames.add(node.nodeId());
    logger.info("--> node {} has {} shards",node.nodeId(),resp.getState().getRoutingNodes().node(node.nodeId()).numberOfOwningShards());
  }
  cis.setN1Usage(realNodeNames.get(0),new DiskUsage(nodes.get(0),"n1",100,50));
  cis.setN2Usage(realNodeNames.get(1),new DiskUsage(nodes.get(1),"n2",100,50));
  cis.setN3Usage(realNodeNames.get(2),new DiskUsage(nodes.get(2),"n3",100,0));
  Thread.sleep(4000);
  resp=client().admin().cluster().prepareState().get();
  iter=resp.getState().getRoutingNodes().iterator();
  Map<String,Integer> nodesToShardCount=newHashMap();
  while (iter.hasNext()) {
    RoutingNode node=iter.next();
    logger.info("--> node {} has {} shards",node.nodeId(),resp.getState().getRoutingNodes().node(node.nodeId()).numberOfOwningShards());
    nodesToShardCount.put(node.nodeId(),resp.getState().getRoutingNodes().node(node.nodeId()).numberOfOwningShards());
  }
  assertThat("node1 has 5 shards",nodesToShardCount.get(realNodeNames.get(0)),equalTo(5));
  assertThat("node2 has 5 shards",nodesToShardCount.get(realNodeNames.get(1)),equalTo(5));
  assertThat("node3 has 0 shards",nodesToShardCount.get(realNodeNames.get(2)),equalTo(0));
}
