{
  try (IndexInput input=directory.openInput(md.name(),IOContext.READONCE)){
    if (input.length() != md.length()) {
      return false;
    }
    if (md.writtenBy() != null && md.writtenBy().onOrAfter(Version.LUCENE_4_8_0)) {
      return Store.digestToString(CodecUtil.checksumEntireFile(input)).equals(md.checksum());
    }
 else     if (md.hasLegacyChecksum()) {
      final Checksum checksum=new Adler32();
      final byte[] buffer=new byte[md.length() > 4096 ? 4096 : (int)md.length()];
      final long len=input.length();
      long read=0;
      while (len > read) {
        final long bytesLeft=len - read;
        final int bytesToRead=bytesLeft < buffer.length ? (int)bytesLeft : buffer.length;
        input.readBytes(buffer,0,bytesToRead,false);
        checksum.update(buffer,0,bytesToRead);
        read+=bytesToRead;
      }
      return Store.digestToString(checksum.getValue()).equals(md.checksum());
    }
  }
 catch (  IOException ex) {
    return false;
  }
  return true;
}
