{
  final IndexService indexService=createIndex("test");
  final IndexFieldDataService ifdService=indexService.fieldData();
  final BuilderContext ctx=new BuilderContext(indexService.getIndexSettings().getSettings(),new ContentPath(1));
  final MappedFieldType stringMapper=new KeywordFieldMapper.Builder("string").build(ctx).fieldType();
  ifdService.clear();
  IndexFieldData<?> fd=ifdService.getForField(stringMapper);
  assertTrue(fd instanceof SortedSetDVOrdinalsIndexFieldData);
  for (  MappedFieldType mapper : Arrays.asList(new NumberFieldMapper.Builder("int",NumberFieldMapper.NumberType.BYTE).build(ctx).fieldType(),new NumberFieldMapper.Builder("int",NumberFieldMapper.NumberType.SHORT).build(ctx).fieldType(),new NumberFieldMapper.Builder("int",NumberFieldMapper.NumberType.INTEGER).build(ctx).fieldType(),new NumberFieldMapper.Builder("long",NumberFieldMapper.NumberType.LONG).build(ctx).fieldType())) {
    ifdService.clear();
    fd=ifdService.getForField(mapper);
    assertTrue(fd instanceof SortedNumericDVIndexFieldData);
  }
  final MappedFieldType floatMapper=new NumberFieldMapper.Builder("float",NumberFieldMapper.NumberType.FLOAT).build(ctx).fieldType();
  ifdService.clear();
  fd=ifdService.getForField(floatMapper);
  assertTrue(fd instanceof SortedNumericDVIndexFieldData);
  final MappedFieldType doubleMapper=new NumberFieldMapper.Builder("double",NumberFieldMapper.NumberType.DOUBLE).build(ctx).fieldType();
  ifdService.clear();
  fd=ifdService.getForField(doubleMapper);
  assertTrue(fd instanceof SortedNumericDVIndexFieldData);
}
