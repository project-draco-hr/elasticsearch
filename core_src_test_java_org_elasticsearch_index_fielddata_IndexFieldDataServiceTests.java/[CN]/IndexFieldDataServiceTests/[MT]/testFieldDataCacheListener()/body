{
  final IndexService indexService=createIndex("test");
  final IndicesService indicesService=getInstanceFromNode(IndicesService.class);
  final IndexFieldDataService ifdService=new IndexFieldDataService(indexService.getIndexSettings(),indicesService.getIndicesFieldDataCache(),indicesService.getCircuitBreakerService(),indexService.mapperService());
  final BuilderContext ctx=new BuilderContext(indexService.getIndexSettings().getSettings(),new ContentPath(1));
  final MappedFieldType mapper1=MapperBuilders.stringField("s").tokenized(false).docValues(true).fieldDataSettings(Settings.builder().put(FieldDataType.FORMAT_KEY,"paged_bytes").build()).build(ctx).fieldType();
  final IndexWriter writer=new IndexWriter(new RAMDirectory(),new IndexWriterConfig(new KeywordAnalyzer()));
  Document doc=new Document();
  doc.add(new StringField("s","thisisastring",Store.NO));
  writer.addDocument(doc);
  DirectoryReader open=DirectoryReader.open(writer,true);
  final boolean wrap=randomBoolean();
  final IndexReader reader=wrap ? ElasticsearchDirectoryReader.wrap(open,new ShardId("test","_na_",1)) : open;
  final AtomicInteger onCacheCalled=new AtomicInteger();
  final AtomicInteger onRemovalCalled=new AtomicInteger();
  ifdService.setListener(new IndexFieldDataCache.Listener(){
    @Override public void onCache(    ShardId shardId,    String fieldName,    FieldDataType fieldDataType,    Accountable ramUsage){
      if (wrap) {
        assertEquals(new ShardId("test","_na_",1),shardId);
      }
 else {
        assertNull(shardId);
      }
      onCacheCalled.incrementAndGet();
    }
    @Override public void onRemoval(    ShardId shardId,    String fieldName,    FieldDataType fieldDataType,    boolean wasEvicted,    long sizeInBytes){
      if (wrap) {
        assertEquals(new ShardId("test","_na_",1),shardId);
      }
 else {
        assertNull(shardId);
      }
      onRemovalCalled.incrementAndGet();
    }
  }
);
  IndexFieldData<?> ifd=ifdService.getForField(mapper1);
  LeafReaderContext leafReaderContext=reader.getContext().leaves().get(0);
  AtomicFieldData load=ifd.load(leafReaderContext);
  assertEquals(1,onCacheCalled.get());
  assertEquals(0,onRemovalCalled.get());
  reader.close();
  load.close();
  writer.close();
  assertEquals(1,onCacheCalled.get());
  assertEquals(1,onRemovalCalled.get());
  ifdService.clear();
}
