{
  System.setProperty("es.logger.prefix","");
  Settings settings=ImmutableSettings.settingsBuilder().build();
  Node[] nodes=new Node[5];
  for (int i=0; i < nodes.length; i++) {
    nodes[i]=NodeBuilder.nodeBuilder().settings(settings).node();
  }
  Node client=NodeBuilder.nodeBuilder().client(true).node();
  long COUNT;
  if (client.client().admin().indices().prepareExists("test").execute().actionGet().exists()) {
    ClusterHealthResponse clusterHealthResponse=client.client().admin().cluster().prepareHealth().setWaitForGreenStatus().setTimeout("10m").execute().actionGet();
    if (clusterHealthResponse.timedOut()) {
      throw new ElasticSearchException("failed to wait for green state on startup...");
    }
    COUNT=client.client().prepareCount().execute().actionGet().count();
    System.out.println("--> existing index, count [" + COUNT + "]");
  }
 else {
    COUNT=SizeValue.parseSizeValue("100k").singles();
    System.out.println("--> indexing data...");
    for (long i=0; i < COUNT; i++) {
      client.client().prepareIndex("test","type",Long.toString(i)).setSource("date",new Date(),"data",RandomStringGenerator.randomAlphabetic(10000)).execute().actionGet();
    }
    System.out.println("--> done indexing data [" + COUNT + "]");
    client.client().admin().indices().prepareRefresh().execute().actionGet();
    for (int i=0; i < 10; i++) {
      long count=client.client().prepareCount().execute().actionGet().count();
      if (COUNT != count) {
        System.err.println("--> the indexed docs do not match the count..., got [" + count + "], expected ["+ COUNT+ "]");
      }
    }
  }
  final int ROLLING_RESTARTS=100;
  System.out.println("--> starting rolling restarts [" + ROLLING_RESTARTS + "]");
  for (int rollingRestart=0; rollingRestart < ROLLING_RESTARTS; rollingRestart++) {
    System.out.println("--> doing rolling restart [" + rollingRestart + "]...");
    int nodeId=ThreadLocalRandom.current().nextInt();
    for (int i=0; i < nodes.length; i++) {
      int nodeIdx=Math.abs(nodeId++) % nodes.length;
      nodes[nodeIdx].close();
      nodes[nodeIdx]=NodeBuilder.nodeBuilder().settings(settings).node();
    }
    System.out.println("--> done rolling restart [" + rollingRestart + "]");
    System.out.println("--> waiting for green state now...");
    ClusterHealthResponse clusterHealthResponse=client.client().admin().cluster().prepareHealth().setWaitForGreenStatus().setTimeout("10m").execute().actionGet();
    if (clusterHealthResponse.timedOut()) {
      System.err.println("--> timed out waiting for green state...");
      ClusterState state=client.client().admin().cluster().prepareState().execute().actionGet().state();
      System.out.println(state.nodes().prettyPrint());
      System.out.println(state.routingTable().prettyPrint());
      System.out.println(state.routingNodes().prettyPrint());
      throw new ElasticSearchException("timed out waiting for green state");
    }
 else {
      System.out.println("--> got green status");
    }
    System.out.println("--> checking data [" + rollingRestart + "]....");
    boolean failed=false;
    for (int i=0; i < 10; i++) {
      long count=client.client().prepareCount().execute().actionGet().count();
      if (COUNT != count) {
        failed=true;
        System.err.println("--> ERROR the indexed docs do not match the count..., got [" + count + "], expected ["+ COUNT+ "]");
      }
    }
    if (!failed) {
      System.out.println("--> count verified");
    }
  }
  System.out.println("--> shutting down...");
  client.close();
  for (  Node node : nodes) {
    node.close();
  }
}
