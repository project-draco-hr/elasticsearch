{
  builder.startObject(Fields.SIZE);
  builder.byteSizeField(Fields.TOTAL_IN_BYTES,Fields.TOTAL,totalBytes());
  builder.byteSizeField(Fields.REUSED_IN_BYTES,Fields.REUSED,totalBytes());
  builder.byteSizeField(Fields.RECOVERED_IN_BYTES,Fields.RECOVERED,recoveredBytes());
  builder.field(Fields.PERCENT,String.format(Locale.ROOT,"%1.1f%%",recoveredBytesPercent()));
  builder.endObject();
  builder.startObject(Fields.FILES);
  builder.field(Fields.TOTAL,totalFileCount());
  builder.field(Fields.REUSED,reusedFileCount());
  builder.field(Fields.RECOVERED,recoveredFileCount());
  builder.field(Fields.PERCENT,String.format(Locale.ROOT,"%1.1f%%",recoveredFilesPercent()));
  if (params.paramAsBoolean("details",false)) {
    builder.startArray(Fields.DETAILS);
    for (    File file : fileDetails.values()) {
      file.toXContent(builder,params);
    }
    builder.endArray();
  }
  builder.endObject();
  builder.timeValueField(Fields.TOTAL_TIME_IN_MILLIS,Fields.TOTAL_TIME,time());
  builder.timeValueField(Fields.SOURCE_THROTTLE_TIME_IN_MILLIS,Fields.SOURCE_THROTTLE_TIME,sourceThrottling());
  builder.timeValueField(Fields.TARGET_THROTTLE_TIME_IN_MILLIS,Fields.TARGET_THROTTLE_TIME,targetThrottling());
  return builder;
}
