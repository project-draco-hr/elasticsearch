{
  final MultiTermVectorsShardResponse response=new MultiTermVectorsShardResponse();
  final IndexService indexService=indicesService.indexServiceSafe(shardId.getIndex());
  final IndexShard indexShard=indexService.getShard(shardId.id());
  for (int i=0; i < request.locations.size(); i++) {
    TermVectorsRequest termVectorsRequest=request.requests.get(i);
    try {
      TermVectorsResponse termVectorsResponse=TermVectorsService.getTermVectors(indexShard,termVectorsRequest);
      response.add(request.locations.get(i),termVectorsResponse);
    }
 catch (    Throwable t) {
      if (TransportActions.isShardNotAvailableException(t)) {
        throw (ElasticsearchException)t;
      }
 else {
        logger.debug("{} failed to execute multi term vectors for [{}]/[{}]",t,shardId,termVectorsRequest.type(),termVectorsRequest.id());
        response.add(request.locations.get(i),new MultiTermVectorsResponse.Failure(request.index(),termVectorsRequest.type(),termVectorsRequest.id(),t));
      }
    }
  }
  return response;
}
