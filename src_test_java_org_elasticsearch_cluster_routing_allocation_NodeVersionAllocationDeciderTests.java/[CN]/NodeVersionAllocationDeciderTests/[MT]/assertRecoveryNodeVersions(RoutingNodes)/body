{
  logger.debug("RoutingNodes: {}",routingNodes.prettyPrint());
  List<MutableShardRouting> mutableShardRoutings=routingNodes.shardsWithState(ShardRoutingState.RELOCATING);
  for (  MutableShardRouting r : mutableShardRoutings) {
    String toId=r.relocatingNodeId();
    String fromId=r.currentNodeId();
    assertThat(fromId,notNullValue());
    assertThat(toId,notNullValue());
    logger.debug("From: " + fromId + " with Version: "+ routingNodes.node(fromId).node().version()+ " to: "+ toId+ " with Version: "+ routingNodes.node(toId).node().version());
    assertTrue(routingNodes.node(toId).node().version().onOrAfter(routingNodes.node(fromId).node().version()));
  }
  mutableShardRoutings=routingNodes.shardsWithState(ShardRoutingState.INITIALIZING);
  for (  MutableShardRouting r : mutableShardRoutings) {
    if (r.initializing() && r.relocatingNodeId() == null && !r.primary()) {
      MutableShardRouting primary=routingNodes.activePrimary(r);
      assertThat(primary,notNullValue());
      String fromId=primary.currentNodeId();
      String toId=r.currentNodeId();
      logger.debug("From: " + fromId + " with Version: "+ routingNodes.node(fromId).node().version()+ " to: "+ toId+ " with Version: "+ routingNodes.node(toId).node().version());
      assertTrue(routingNodes.node(toId).node().version().onOrAfter(routingNodes.node(fromId).node().version()));
    }
  }
}
