{
  AllocationService service=createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries",10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE,"always").put("cluster.routing.allocation.cluster_concurrent_rebalance",-1).build());
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(2)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build();
  assertThat(routingTable.index("test").shards().size(),equalTo(5));
  for (int i=0; i < routingTable.index("test").shards().size(); i++) {
    assertThat(routingTable.index("test").shard(i).shards().size(),equalTo(3));
    assertThat(routingTable.index("test").shard(i).shards().get(0).state(),equalTo(UNASSIGNED));
    assertThat(routingTable.index("test").shard(i).shards().get(1).state(),equalTo(UNASSIGNED));
    assertThat(routingTable.index("test").shard(i).shards().get(2).state(),equalTo(UNASSIGNED));
    assertThat(routingTable.index("test").shard(i).shards().get(0).currentNodeId(),nullValue());
    assertThat(routingTable.index("test").shard(i).shards().get(1).currentNodeId(),nullValue());
    assertThat(routingTable.index("test").shard(i).shards().get(2).currentNodeId(),nullValue());
  }
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("old0",getPreviousVersion())).put(newNode("old1",getPreviousVersion())).put(newNode("old2",getPreviousVersion()))).build();
  clusterState=stabilize(clusterState,service);
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("old0",getPreviousVersion())).put(newNode("old1",getPreviousVersion())).put(newNode("new0"))).build();
  clusterState=stabilize(clusterState,service);
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node0",getPreviousVersion())).put(newNode("new1")).put(newNode("new0"))).build();
  clusterState=stabilize(clusterState,service);
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("new2")).put(newNode("new1")).put(newNode("new0"))).build();
  clusterState=stabilize(clusterState,service);
  routingTable=clusterState.routingTable();
  for (int i=0; i < routingTable.index("test").shards().size(); i++) {
    assertThat(routingTable.index("test").shard(i).shards().size(),equalTo(3));
    assertThat(routingTable.index("test").shard(i).shards().get(0).state(),equalTo(STARTED));
    assertThat(routingTable.index("test").shard(i).shards().get(1).state(),equalTo(STARTED));
    assertThat(routingTable.index("test").shard(i).shards().get(2).state(),equalTo(STARTED));
    assertThat(routingTable.index("test").shard(i).shards().get(0).currentNodeId(),notNullValue());
    assertThat(routingTable.index("test").shard(i).shards().get(1).currentNodeId(),notNullValue());
    assertThat(routingTable.index("test").shard(i).shards().get(2).currentNodeId(),notNullValue());
  }
}
