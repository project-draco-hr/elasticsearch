{
  IngestDocument ingestDocument=RandomDocumentPicks.randomIngestDocument(random());
  Map<String,Type> fields=new HashMap<>();
  Map<String,List<String>> expectedResult=new HashMap<>();
  int numFields=randomIntBetween(1,5);
  for (int i=0; i < numFields; i++) {
    int numItems=randomIntBetween(1,10);
    List<Object> fieldValue=new ArrayList<>();
    List<String> expectedList=new ArrayList<>();
    for (int j=0; j < numItems; j++) {
      Object randomValue;
      String randomValueString;
switch (randomIntBetween(0,2)) {
case 0:
        float randomFloat=randomFloat();
      randomValue=randomFloat;
    randomValueString=Float.toString(randomFloat);
  break;
case 1:
int randomInt=randomInt();
randomValue=randomInt;
randomValueString=Integer.toString(randomInt);
break;
case 2:
boolean randomBoolean=randomBoolean();
randomValue=randomBoolean;
randomValueString=Boolean.toString(randomBoolean);
break;
default :
throw new UnsupportedOperationException();
}
fieldValue.add(randomValue);
expectedList.add(randomValueString);
}
String fieldName=RandomDocumentPicks.addRandomField(random(),ingestDocument,fieldValue);
fields.put(fieldName,Type.STRING);
expectedResult.put(fieldName,expectedList);
}
Processor processor=new ConvertProcessor(fields);
processor.execute(ingestDocument);
for (Map.Entry<String,List<String>> entry : expectedResult.entrySet()) {
assertThat(ingestDocument.getPropertyValue(entry.getKey(),List.class),equalTo(entry.getValue()));
}
}
