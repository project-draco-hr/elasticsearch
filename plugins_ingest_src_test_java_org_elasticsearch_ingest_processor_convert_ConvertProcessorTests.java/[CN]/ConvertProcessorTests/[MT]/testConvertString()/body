{
  IngestDocument ingestDocument=RandomDocumentPicks.randomIngestDocument(random());
  Map<String,Type> fields=new HashMap<>();
  Map<String,String> expectedResult=new HashMap<>();
  int numFields=randomIntBetween(1,5);
  for (int i=0; i < numFields; i++) {
    Object fieldValue;
    String expectedFieldValue;
switch (randomIntBetween(0,2)) {
case 0:
      float randomFloat=randomFloat();
    fieldValue=randomFloat;
  expectedFieldValue=Float.toString(randomFloat);
break;
case 1:
int randomInt=randomInt();
fieldValue=randomInt;
expectedFieldValue=Integer.toString(randomInt);
break;
case 2:
boolean randomBoolean=randomBoolean();
fieldValue=randomBoolean;
expectedFieldValue=Boolean.toString(randomBoolean);
break;
default :
throw new UnsupportedOperationException();
}
String fieldName=RandomDocumentPicks.addRandomField(random(),ingestDocument,fieldValue);
fields.put(fieldName,Type.STRING);
expectedResult.put(fieldName,expectedFieldValue);
}
Processor processor=new ConvertProcessor(fields);
processor.execute(ingestDocument);
for (Map.Entry<String,String> entry : expectedResult.entrySet()) {
assertThat(ingestDocument.getPropertyValue(entry.getKey(),String.class),equalTo(entry.getValue()));
}
}
