{
  int numRequests=scaledRandomIntBetween(8,64);
  BulkRequest bulkRequest=new BulkRequest();
  for (int i=0; i < numRequests; i++) {
    bulkRequest.add(new IndexRequest("_index","_type",String.valueOf(i)).source("{}"));
  }
  CaptureActionListener actionListener=new CaptureActionListener();
  IngestActionFilter.BulkRequestModifier bulkRequestModifier=new IngestActionFilter.BulkRequestModifier(bulkRequest);
  int i=0;
  Set<Integer> failedSlots=new HashSet<>();
  while (bulkRequestModifier.hasNext()) {
    bulkRequestModifier.next();
    if (randomBoolean()) {
      bulkRequestModifier.markCurrentItemAsFailed(new RuntimeException());
      failedSlots.add(i);
    }
    i++;
  }
  assertThat(bulkRequestModifier.getBulkRequest().requests().size(),equalTo(numRequests - failedSlots.size()));
  long ingestTook=randomLong();
  ActionListener<BulkResponse> result=bulkRequestModifier.wrapActionListenerIfNeeded(ingestTook,actionListener);
  result.onResponse(new BulkResponse(new BulkItemResponse[numRequests - failedSlots.size()],0));
  BulkResponse bulkResponse=actionListener.getResponse();
  assertThat(bulkResponse.getIngestTookInMillis(),equalTo(ingestTook));
  for (int j=0; j < bulkResponse.getItems().length; j++) {
    if (failedSlots.contains(j)) {
      BulkItemResponse item=bulkResponse.getItems()[j];
      assertThat(item.isFailed(),is(true));
      assertThat(item.getFailure().getIndex(),equalTo("_index"));
      assertThat(item.getFailure().getType(),equalTo("_type"));
      assertThat(item.getFailure().getId(),equalTo(String.valueOf(j)));
      assertThat(item.getFailure().getMessage(),equalTo("java.lang.RuntimeException"));
    }
 else {
      assertThat(bulkResponse.getItems()[j],nullValue());
    }
  }
}
