{
  List<ShardStats> shardStats=new ArrayList<>();
  for (  final Index index : indices) {
    for (int i=0; i < 2; i++) {
      ShardId shardId=new ShardId(index,i);
      Path path=createTempDir().resolve("indices").resolve(index.getUUID()).resolve(String.valueOf(i));
      ShardRouting shardRouting=ShardRouting.newUnassigned(shardId,null,i == 0,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,null));
      shardRouting=shardRouting.initialize("node-0",null,ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE);
      shardRouting=shardRouting.moveToStarted();
      CommonStats stats=new CommonStats();
      stats.fieldData=new FieldDataStats();
      stats.queryCache=new QueryCacheStats();
      stats.docs=new DocsStats();
      stats.store=new StoreStats();
      stats.indexing=new IndexingStats();
      stats.search=new SearchStats();
      stats.segments=new SegmentsStats();
      stats.merge=new MergeStats();
      stats.refresh=new RefreshStats();
      stats.completion=new CompletionStats();
      stats.requestCache=new RequestCacheStats();
      stats.get=new GetStats();
      stats.flush=new FlushStats();
      stats.warmer=new WarmerStats();
      shardStats.add(new ShardStats(shardRouting,new ShardPath(false,path,path,shardId),stats,null));
    }
  }
  return IndicesStatsTests.newIndicesStatsResponse(shardStats.toArray(new ShardStats[shardStats.size()]),shardStats.size(),shardStats.size(),0,emptyList());
}
