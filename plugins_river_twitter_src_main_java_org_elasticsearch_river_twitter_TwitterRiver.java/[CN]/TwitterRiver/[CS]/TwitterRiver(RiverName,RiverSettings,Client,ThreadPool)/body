{
  super(riverName,settings);
  this.client=client;
  this.threadPool=threadPool;
  if (settings.settings().containsKey("twitter")) {
    Map<String,Object> twitterSettings=(Map<String,Object>)settings.settings().get("twitter");
    user=XContentMapValues.nodeStringValue(twitterSettings.get("user"),null);
    password=XContentMapValues.nodeStringValue(twitterSettings.get("password"),null);
    if (twitterSettings.containsKey("oauth")) {
      Map<String,Object> oauth=(Map<String,Object>)twitterSettings.get("oauth");
      if (oauth.containsKey("consumerKey")) {
        oauthConsumerKey=XContentMapValues.nodeStringValue(oauth.get("consumerKey"),null);
      }
      if (oauth.containsKey("consumer_key")) {
        oauthConsumerKey=XContentMapValues.nodeStringValue(oauth.get("consumer_key"),null);
      }
      if (oauth.containsKey("consumerSecret")) {
        oauthConsumerSecret=XContentMapValues.nodeStringValue(oauth.get("consumerSecret"),null);
      }
      if (oauth.containsKey("consumer_secret")) {
        oauthConsumerSecret=XContentMapValues.nodeStringValue(oauth.get("consumer_secret"),null);
      }
      if (oauth.containsKey("accessToken")) {
        oauthAccessToken=XContentMapValues.nodeStringValue(oauth.get("accessToken"),null);
      }
      if (oauth.containsKey("access_token")) {
        oauthAccessToken=XContentMapValues.nodeStringValue(oauth.get("access_token"),null);
      }
      if (oauth.containsKey("accessTokenSecret")) {
        oauthAccessTokenSecret=XContentMapValues.nodeStringValue(oauth.get("accessTokenSecret"),null);
      }
      if (oauth.containsKey("access_token_secret")) {
        oauthAccessTokenSecret=XContentMapValues.nodeStringValue(oauth.get("access_token_secret"),null);
      }
    }
    streamType=XContentMapValues.nodeStringValue(twitterSettings.get("type"),"sample");
    Map<String,Object> filterSettings=(Map<String,Object>)twitterSettings.get("filter");
    if (filterSettings != null) {
      filterQuery=new FilterQuery();
      filterQuery.count(XContentMapValues.nodeIntegerValue(filterSettings.get("count"),0));
      Object tracks=filterSettings.get("tracks");
      if (tracks != null) {
        if (tracks instanceof List) {
          List<String> lTracks=(List<String>)tracks;
          filterQuery.track(lTracks.toArray(new String[lTracks.size()]));
        }
 else {
          filterQuery.track(Strings.commaDelimitedListToStringArray(tracks.toString()));
        }
      }
      Object follow=filterSettings.get("follow");
      if (follow != null) {
        if (follow instanceof List) {
          List lFollow=(List)follow;
          long[] followIds=new long[lFollow.size()];
          for (int i=0; i < lFollow.size(); i++) {
            Object o=lFollow.get(i);
            if (o instanceof Number) {
              followIds[i]=((Number)o).intValue();
            }
 else {
              followIds[i]=Integer.parseInt(o.toString());
            }
          }
          filterQuery.follow(followIds);
        }
 else {
          String[] ids=Strings.commaDelimitedListToStringArray(follow.toString());
          long[] followIds=new long[ids.length];
          for (int i=0; i < ids.length; i++) {
            followIds[i]=Integer.parseInt(ids[i]);
          }
          filterQuery.follow(followIds);
        }
      }
      Object locations=filterSettings.get("locations");
      if (locations != null) {
        if (locations instanceof List) {
          List lLocations=(List)locations;
          double[][] dLocations=new double[lLocations.size()][];
          for (int i=0; i < lLocations.size(); i++) {
            Object loc=lLocations.get(i);
            double lat;
            double lon;
            if (loc instanceof List) {
              List lLoc=(List)loc;
              if (lLoc.get(0) instanceof Number) {
                lat=((Number)lLoc.get(0)).doubleValue();
              }
 else {
                lat=Double.parseDouble(lLoc.get(0).toString());
              }
              if (lLoc.get(1) instanceof Number) {
                lon=((Number)lLoc.get(1)).doubleValue();
              }
 else {
                lon=Double.parseDouble(lLoc.get(1).toString());
              }
            }
 else {
              String[] sLoc=Strings.commaDelimitedListToStringArray(loc.toString());
              lat=Double.parseDouble(sLoc[0]);
              lon=Double.parseDouble(sLoc[1]);
            }
            dLocations[i]=new double[]{lat,lon};
          }
          filterQuery.locations(dLocations);
        }
 else {
          String[] sLocations=Strings.commaDelimitedListToStringArray(locations.toString());
          double[][] dLocations=new double[sLocations.length / 2][];
          int dCounter=0;
          for (int i=0; i < sLocations.length; i++) {
            double lat=Double.parseDouble(sLocations[i]);
            double lon=Double.parseDouble(sLocations[++i]);
            dLocations[dCounter++]=new double[]{lat,lon};
          }
          filterQuery.locations(dLocations);
        }
      }
    }
  }
  logger.info("creating twitter stream river for [{}]",user);
  if (user == null && password == null && oauthAccessToken == null && oauthConsumerKey == null && oauthConsumerSecret == null && oauthAccessTokenSecret == null) {
    stream=null;
    indexName=null;
    typeName="status";
    bulkSize=100;
    dropThreshold=10;
    logger.warn("no user/password or oauth specified, disabling river...");
    return;
  }
  if (settings.settings().containsKey("index")) {
    Map<String,Object> indexSettings=(Map<String,Object>)settings.settings().get("index");
    indexName=XContentMapValues.nodeStringValue(indexSettings.get("index"),riverName.name());
    typeName=XContentMapValues.nodeStringValue(indexSettings.get("type"),"status");
    this.bulkSize=XContentMapValues.nodeIntegerValue(indexSettings.get("bulk_size"),100);
    this.dropThreshold=XContentMapValues.nodeIntegerValue(indexSettings.get("drop_threshold"),10);
  }
 else {
    indexName=riverName.name();
    typeName="status";
    bulkSize=100;
    dropThreshold=10;
  }
  ConfigurationBuilder cb=new ConfigurationBuilder();
  if (oauthAccessToken != null && oauthConsumerKey != null && oauthConsumerSecret != null && oauthAccessTokenSecret != null) {
    cb.setOAuthConsumerKey(oauthConsumerKey).setOAuthConsumerSecret(oauthConsumerSecret).setOAuthAccessToken(oauthAccessToken).setOAuthAccessTokenSecret(oauthAccessTokenSecret);
  }
 else {
    cb.setUser(user).setPassword(password);
  }
  stream=new TwitterStreamFactory(cb.build()).getInstance();
  stream.addListener(new StatusHandler());
}
