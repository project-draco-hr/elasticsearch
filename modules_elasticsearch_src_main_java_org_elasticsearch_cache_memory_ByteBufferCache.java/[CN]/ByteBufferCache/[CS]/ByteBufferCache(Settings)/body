{
  super(settings);
  this.bufferSizeInBytes=(int)componentSettings.getAsBytesSize("buffer_size",new ByteSizeValue(100,ByteSizeUnit.KB)).bytes();
  long cacheSizeInBytes=componentSettings.getAsBytesSize("cache_size",new ByteSizeValue(20,ByteSizeUnit.MB)).bytes();
  this.direct=componentSettings.getAsBoolean("direct",true);
  boolean warmCache=componentSettings.getAsBoolean("warm_cache",false);
  disableCache=cacheSizeInBytes == 0;
  if (!disableCache && cacheSizeInBytes < bufferSizeInBytes) {
    throw new IllegalArgumentException("Cache size [" + cacheSizeInBytes + "] is smaller than buffer size ["+ bufferSizeInBytes+ "]");
  }
  int numberOfCacheEntries=(int)(cacheSizeInBytes / bufferSizeInBytes);
  this.cache=disableCache ? null : new ArrayBlockingQueue<ByteBuffer>(numberOfCacheEntries);
  this.cacheSizeInBytes=disableCache ? 0 : numberOfCacheEntries * bufferSizeInBytes;
  if (logger.isDebugEnabled()) {
    logger.debug("using bytebuffer cache with buffer_size [{}], cache_size [{}], direct [{}], warm_cache [{}]",new ByteSizeValue(bufferSizeInBytes),new ByteSizeValue(cacheSizeInBytes),direct,warmCache);
  }
}
