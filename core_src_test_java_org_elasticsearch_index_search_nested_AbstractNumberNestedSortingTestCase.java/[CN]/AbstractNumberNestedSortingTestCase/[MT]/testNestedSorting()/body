{
  List<Document> docs=new ArrayList<>();
  Document document=new Document();
  document.add(createField("field2",3));
  document.add(new StringField("filter_1","T",Field.Store.NO));
  docs.add(document);
  document=new Document();
  document.add(createField("field2",3));
  document.add(new StringField("filter_1","T",Field.Store.NO));
  docs.add(document);
  document=new Document();
  document.add(createField("field2",3));
  document.add(new StringField("filter_1","T",Field.Store.NO));
  docs.add(document);
  document=new Document();
  document.add(new StringField("__type","parent",Field.Store.NO));
  document.add(createField("field1",1));
  docs.add(document);
  writer.addDocuments(docs);
  writer.commit();
  docs.clear();
  document=new Document();
  document.add(createField("field2",3));
  document.add(new StringField("filter_1","T",Field.Store.NO));
  docs.add(document);
  document=new Document();
  document.add(createField("field2",3));
  document.add(new StringField("filter_1","T",Field.Store.NO));
  docs.add(document);
  document=new Document();
  document.add(createField("field2",2));
  document.add(new StringField("filter_1","T",Field.Store.NO));
  docs.add(document);
  document=new Document();
  document.add(new StringField("__type","parent",Field.Store.NO));
  document.add(createField("field1",2));
  docs.add(document);
  writer.addDocuments(docs);
  docs.clear();
  document=new Document();
  document.add(createField("field2",3));
  document.add(new StringField("filter_1","T",Field.Store.NO));
  docs.add(document);
  document=new Document();
  document.add(createField("field2",3));
  document.add(new StringField("filter_1","T",Field.Store.NO));
  docs.add(document);
  document=new Document();
  document.add(createField("field2",1));
  document.add(new StringField("filter_1","T",Field.Store.NO));
  docs.add(document);
  document=new Document();
  document.add(new StringField("__type","parent",Field.Store.NO));
  document.add(createField("field1",3));
  docs.add(document);
  writer.addDocuments(docs);
  docs.clear();
  document=new Document();
  document.add(createField("field2",3));
  document.add(new StringField("filter_1","T",Field.Store.NO));
  docs.add(document);
  document=new Document();
  document.add(createField("field2",3));
  document.add(new StringField("filter_1","F",Field.Store.NO));
  docs.add(document);
  document=new Document();
  document.add(createField("field2",4));
  document.add(new StringField("filter_1","F",Field.Store.NO));
  docs.add(document);
  document=new Document();
  document.add(new StringField("__type","parent",Field.Store.NO));
  document.add(createField("field1",4));
  docs.add(document);
  writer.addDocuments(docs);
  writer.commit();
  docs.clear();
  document=new Document();
  document.add(createField("field2",3));
  document.add(new StringField("filter_1","F",Field.Store.NO));
  docs.add(document);
  document=new Document();
  document.add(createField("field2",3));
  document.add(new StringField("filter_1","F",Field.Store.NO));
  docs.add(document);
  document=new Document();
  document.add(createField("field2",5));
  document.add(new StringField("filter_1","F",Field.Store.NO));
  docs.add(document);
  document=new Document();
  document.add(new StringField("__type","parent",Field.Store.NO));
  document.add(createField("field1",5));
  docs.add(document);
  writer.addDocuments(docs);
  writer.commit();
  docs.clear();
  document=new Document();
  document.add(createField("field2",3));
  document.add(new StringField("filter_1","T",Field.Store.NO));
  docs.add(document);
  document=new Document();
  document.add(createField("field2",3));
  document.add(new StringField("filter_1","T",Field.Store.NO));
  docs.add(document);
  document=new Document();
  document.add(createField("field2",6));
  document.add(new StringField("filter_1","T",Field.Store.NO));
  docs.add(document);
  document=new Document();
  document.add(new StringField("__type","parent",Field.Store.NO));
  document.add(createField("field1",6));
  docs.add(document);
  writer.addDocuments(docs);
  writer.commit();
  document=new Document();
  document.add(new StringField("__type","parent",Field.Store.NO));
  document.add(createField("field1",7));
  writer.addDocument(document);
  writer.commit();
  docs.clear();
  document=new Document();
  document.add(createField("field2",3));
  document.add(new StringField("filter_1","T",Field.Store.NO));
  docs.add(document);
  document=new Document();
  document.add(createField("field2",3));
  document.add(new StringField("filter_1","F",Field.Store.NO));
  docs.add(document);
  document=new Document();
  document.add(createField("field2",7));
  document.add(new StringField("filter_1","F",Field.Store.NO));
  docs.add(document);
  document=new Document();
  document.add(new StringField("__type","parent",Field.Store.NO));
  document.add(createField("field1",8));
  docs.add(document);
  writer.addDocuments(docs);
  writer.commit();
  document=new Document();
  document.add(new StringField("fieldXXX","x",Field.Store.NO));
  writer.addDocument(document);
  document=new Document();
  document.add(new StringField("fieldXXX","x",Field.Store.NO));
  writer.addDocument(document);
  document=new Document();
  document.add(new StringField("fieldXXX","x",Field.Store.NO));
  writer.addDocument(document);
  MultiValueMode sortMode=MultiValueMode.SUM;
  DirectoryReader directoryReader=DirectoryReader.open(writer,false);
  directoryReader=ElasticsearchDirectoryReader.wrap(directoryReader,new ShardId(new Index("test"),0));
  IndexSearcher searcher=new IndexSearcher(directoryReader);
  Query parentFilter=new TermQuery(new Term("__type","parent"));
  Query childFilter=Queries.not(parentFilter);
  XFieldComparatorSource nestedComparatorSource=createFieldComparator("field2",sortMode,null,createNested(searcher,parentFilter,childFilter));
  ToParentBlockJoinQuery query=new ToParentBlockJoinQuery(new ConstantScoreQuery(childFilter),new QueryBitSetProducer(parentFilter),ScoreMode.None);
  Sort sort=new Sort(new SortField("field2",nestedComparatorSource));
  TopFieldDocs topDocs=searcher.search(query,5,sort);
  assertThat(topDocs.totalHits,equalTo(7));
  assertThat(topDocs.scoreDocs.length,equalTo(5));
  assertThat(topDocs.scoreDocs[0].doc,equalTo(11));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[0]).fields[0]).intValue(),equalTo(7));
  assertThat(topDocs.scoreDocs[1].doc,equalTo(7));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[1]).fields[0]).intValue(),equalTo(8));
  assertThat(topDocs.scoreDocs[2].doc,equalTo(3));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[2]).fields[0]).intValue(),equalTo(9));
  assertThat(topDocs.scoreDocs[3].doc,equalTo(15));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[3]).fields[0]).intValue(),equalTo(10));
  assertThat(topDocs.scoreDocs[4].doc,equalTo(19));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[4]).fields[0]).intValue(),equalTo(11));
  sort=new Sort(new SortField("field2",nestedComparatorSource,true));
  topDocs=searcher.search(query,5,sort);
  assertThat(topDocs.totalHits,equalTo(7));
  assertThat(topDocs.scoreDocs.length,equalTo(5));
  assertThat(topDocs.scoreDocs[0].doc,equalTo(28));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[0]).fields[0]).intValue(),equalTo(13));
  assertThat(topDocs.scoreDocs[1].doc,equalTo(23));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[1]).fields[0]).intValue(),equalTo(12));
  assertThat(topDocs.scoreDocs[2].doc,equalTo(19));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[2]).fields[0]).intValue(),equalTo(11));
  assertThat(topDocs.scoreDocs[3].doc,equalTo(15));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[3]).fields[0]).intValue(),equalTo(10));
  assertThat(topDocs.scoreDocs[4].doc,equalTo(3));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[4]).fields[0]).intValue(),equalTo(9));
  childFilter=new TermQuery(new Term("filter_1","T"));
  nestedComparatorSource=createFieldComparator("field2",sortMode,null,createNested(searcher,parentFilter,childFilter));
  query=new ToParentBlockJoinQuery(new ConstantScoreQuery(childFilter),new QueryBitSetProducer(parentFilter),ScoreMode.None);
  sort=new Sort(new SortField("field2",nestedComparatorSource,true));
  topDocs=searcher.search(query,5,sort);
  assertThat(topDocs.totalHits,equalTo(6));
  assertThat(topDocs.scoreDocs.length,equalTo(5));
  assertThat(topDocs.scoreDocs[0].doc,equalTo(23));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[0]).fields[0]).intValue(),equalTo(12));
  assertThat(topDocs.scoreDocs[1].doc,equalTo(3));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[1]).fields[0]).intValue(),equalTo(9));
  assertThat(topDocs.scoreDocs[2].doc,equalTo(7));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[2]).fields[0]).intValue(),equalTo(8));
  assertThat(topDocs.scoreDocs[3].doc,equalTo(11));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[3]).fields[0]).intValue(),equalTo(7));
  assertThat(topDocs.scoreDocs[4].doc,equalTo(15));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[4]).fields[0]).intValue(),equalTo(3));
  sort=new Sort(new SortField("field2",nestedComparatorSource));
  topDocs=searcher.search(query,5,sort);
  assertThat(topDocs.totalHits,equalTo(6));
  assertThat(topDocs.scoreDocs.length,equalTo(5));
  assertThat(topDocs.scoreDocs[0].doc,equalTo(15));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[0]).fields[0]).intValue(),equalTo(3));
  assertThat(topDocs.scoreDocs[1].doc,equalTo(28));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[1]).fields[0]).intValue(),equalTo(3));
  assertThat(topDocs.scoreDocs[2].doc,equalTo(11));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[2]).fields[0]).intValue(),equalTo(7));
  assertThat(topDocs.scoreDocs[3].doc,equalTo(7));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[3]).fields[0]).intValue(),equalTo(8));
  assertThat(topDocs.scoreDocs[4].doc,equalTo(3));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[4]).fields[0]).intValue(),equalTo(9));
  nestedComparatorSource=createFieldComparator("field2",sortMode,127,createNested(searcher,parentFilter,childFilter));
  sort=new Sort(new SortField("field2",nestedComparatorSource,true));
  topDocs=searcher.search(new TermQuery(new Term("__type","parent")),5,sort);
  assertThat(topDocs.totalHits,equalTo(8));
  assertThat(topDocs.scoreDocs.length,equalTo(5));
  assertThat(topDocs.scoreDocs[0].doc,equalTo(19));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[0]).fields[0]).intValue(),equalTo(127));
  assertThat(topDocs.scoreDocs[1].doc,equalTo(24));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[1]).fields[0]).intValue(),equalTo(127));
  assertThat(topDocs.scoreDocs[2].doc,equalTo(23));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[2]).fields[0]).intValue(),equalTo(12));
  assertThat(topDocs.scoreDocs[3].doc,equalTo(3));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[3]).fields[0]).intValue(),equalTo(9));
  assertThat(topDocs.scoreDocs[4].doc,equalTo(7));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[4]).fields[0]).intValue(),equalTo(8));
  nestedComparatorSource=createFieldComparator("field2",sortMode,-127,createNested(searcher,parentFilter,childFilter));
  sort=new Sort(new SortField("field2",nestedComparatorSource));
  topDocs=searcher.search(new TermQuery(new Term("__type","parent")),5,sort);
  assertThat(topDocs.totalHits,equalTo(8));
  assertThat(topDocs.scoreDocs.length,equalTo(5));
  assertThat(topDocs.scoreDocs[0].doc,equalTo(19));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[0]).fields[0]).intValue(),equalTo(-127));
  assertThat(topDocs.scoreDocs[1].doc,equalTo(24));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[1]).fields[0]).intValue(),equalTo(-127));
  assertThat(topDocs.scoreDocs[2].doc,equalTo(15));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[2]).fields[0]).intValue(),equalTo(3));
  assertThat(topDocs.scoreDocs[3].doc,equalTo(28));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[3]).fields[0]).intValue(),equalTo(3));
  assertThat(topDocs.scoreDocs[4].doc,equalTo(11));
  assertThat(((Number)((FieldDoc)topDocs.scoreDocs[4]).fields[0]).intValue(),equalTo(7));
  assertAvgScoreMode(parentFilter,searcher);
  searcher.getIndexReader().close();
}
