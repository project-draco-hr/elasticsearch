{
  if (backwardsCluster().numNewDataNodes() == 0) {
    backwardsCluster().startNewNode();
  }
  assertAcked(prepareCreate("test").setSettings(ImmutableSettings.builder().put("index.routing.allocation.exclude._name",backwardsCluster().newNodePattern()).put(indexSettings())));
  ensureYellow();
  assertAllShardsOnNodes("test",backwardsCluster().backwardsNodePattern());
  int numDocs=randomIntBetween(100,150);
  logger.info(" --> indexing [{}] docs",numDocs);
  IndexRequestBuilder[] docs=new IndexRequestBuilder[numDocs];
  for (int i=0; i < numDocs; i++) {
    docs[i]=client().prepareIndex("test","type1",randomRealisticUnicodeOfLength(10) + String.valueOf(i)).setSource("field1",English.intToEnglish(i));
  }
  indexRandom(true,docs);
  CountResponse countResponse=client().prepareCount().get();
  assertHitCount(countResponse,numDocs);
  if (randomBoolean()) {
    logger.info(" --> moving index to new nodes");
    backwardsCluster().allowOnlyNewNodes("test");
  }
 else {
    logger.info(" --> allow index to on all nodes");
    backwardsCluster().allowOnAllNodes("test");
  }
  logger.info(" --> indexing [{}] more docs",numDocs);
  if (randomBoolean()) {
    for (int i=0; i < numDocs; i++) {
      docs[i]=client().prepareIndex("test","type1",randomRealisticUnicodeOfLength(10) + String.valueOf(numDocs + i)).setSource("field1",English.intToEnglish(numDocs + i));
    }
    indexRandom(true,docs);
    numDocs*=2;
  }
  logger.info(" --> waiting for relocation to complete",numDocs);
  ensureYellow("test");
  final int numIters=randomIntBetween(10,20);
  for (int i=0; i < numIters; i++) {
    countResponse=client().prepareCount().get();
    assertHitCount(countResponse,numDocs);
  }
  assertVersionCreated(compatibilityVersion(),"test");
}
