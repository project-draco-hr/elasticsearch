{
  if (isAllNodes(nodesIds)) {
    int index=0;
    nodesIds=new String[nodes.size()];
    for (    DiscoveryNode node : this) {
      nodesIds[index++]=node.id();
    }
    return nodesIds;
  }
 else {
    Set<String> resolvedNodesIds=new HashSet<String>(nodesIds.length);
    for (    String nodeId : nodesIds) {
      if (nodeId.equals("_local")) {
        resolvedNodesIds.add(localNodeId());
      }
 else       if (nodeId.equals("_master")) {
        resolvedNodesIds.add(masterNodeId());
      }
 else       if (nodeExists(nodeId)) {
        resolvedNodesIds.add(nodeId);
      }
 else {
        for (        DiscoveryNode node : this) {
          if (Regex.simpleMatch(nodeId,node.name())) {
            resolvedNodesIds.add(node.id());
          }
        }
        for (        DiscoveryNode node : this) {
          if (node.address().match(nodeId)) {
            resolvedNodesIds.add(node.id());
          }
        }
        int index=nodeId.indexOf(':');
        if (index != -1) {
          String matchAttrName=nodeId.substring(0,index);
          String matchAttrValue=nodeId.substring(index + 1);
          for (          DiscoveryNode node : this) {
            for (            Map.Entry<String,String> entry : node.attributes().entrySet()) {
              String attrName=entry.getKey();
              String attrValue=entry.getValue();
              if (Regex.simpleMatch(matchAttrName,attrName) && Regex.simpleMatch(matchAttrValue,attrValue)) {
                resolvedNodesIds.add(node.id());
              }
            }
          }
        }
      }
    }
    return resolvedNodesIds.toArray(new String[resolvedNodesIds.size()]);
  }
}
