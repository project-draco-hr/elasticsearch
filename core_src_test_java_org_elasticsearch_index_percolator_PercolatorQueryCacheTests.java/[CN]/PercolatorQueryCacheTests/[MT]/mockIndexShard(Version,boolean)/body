{
  IndexShard indexShard=mock(IndexShard.class);
  ShardIndexWarmerService shardIndexWarmerService=mock(ShardIndexWarmerService.class);
  when(shardIndexWarmerService.logger()).thenReturn(logger);
  when(indexShard.warmerService()).thenReturn(shardIndexWarmerService);
  IndexSettings indexSettings=new IndexSettings(IndexMetaData.builder("_index").settings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,0).put(IndexMetaData.SETTING_VERSION_CREATED,version)).build(),Settings.EMPTY);
  when(indexShard.indexSettings()).thenReturn(indexSettings);
  PercolatorFieldMapper.PercolatorFieldType fieldType=mock(PercolatorFieldMapper.PercolatorFieldType.class);
  when(fieldType.name()).thenReturn("query");
  when(fieldType.getQueryBuilderFieldName()).thenReturn(PercolatorFieldMapper.QUERY_BUILDER_FIELD_NAME);
  PercolatorFieldMapper percolatorFieldMapper=mock(PercolatorFieldMapper.class);
  when(percolatorFieldMapper.fieldType()).thenReturn(fieldType);
  MapperService mapperService=mock(MapperService.class);
  DocumentMapper documentMapper=mock(DocumentMapper.class);
  if (legacyFormat) {
    when(documentMapper.type()).thenReturn(PercolatorFieldMapper.LEGACY_TYPE_NAME);
    when(documentMapper.typeFilter()).thenReturn(new TermQuery(new Term(TypeFieldMapper.NAME,PercolatorFieldMapper.LEGACY_TYPE_NAME)));
  }
 else {
    when(documentMapper.type()).thenReturn("query");
    when(documentMapper.typeFilter()).thenReturn(new TermQuery(new Term(TypeFieldMapper.NAME,"query")));
  }
  Analyzer analyzer=new SimpleAnalyzer();
  DocumentFieldMappers documentFieldMappers=new DocumentFieldMappers(Collections.singleton(percolatorFieldMapper),analyzer,analyzer,analyzer);
  when(documentMapper.mappers()).thenReturn(documentFieldMappers);
  when(mapperService.docMappers(false)).thenReturn(Collections.singleton(documentMapper));
  when(indexShard.mapperService()).thenReturn(mapperService);
  return indexShard;
}
