{
  PathTrie<String> trie=new PathTrie<String>();
  trie.insert("x/{test}","test1");
  trie.insert("{test}/a","test2");
  trie.insert("/{test}","test3");
  trie.insert("/{test}/_endpoint","test4");
  trie.insert("/*/{test}/_endpoint","test5");
  Map<String,String> params=newHashMap();
  assertThat(trie.retrieve("/x/*",params),equalTo("test1"));
  assertThat(params.get("test"),equalTo("*"));
  params=newHashMap();
  assertThat(trie.retrieve("/b/a",params),equalTo("test2"));
  assertThat(params.get("test"),equalTo("b"));
  params=newHashMap();
  assertThat(trie.retrieve("/*",params),equalTo("test3"));
  assertThat(params.get("test"),equalTo("*"));
  params=newHashMap();
  assertThat(trie.retrieve("/*/_endpoint",params),equalTo("test4"));
  assertThat(params.get("test"),equalTo("*"));
  params=newHashMap();
  assertThat(trie.retrieve("a/*/_endpoint",params),equalTo("test5"));
  assertThat(params.get("test"),equalTo("*"));
}
