{
  PathTrie<String> trie=new PathTrie<>();
  trie.insert("/a/b/c","walla");
  trie.insert("a/d/g","kuku");
  trie.insert("x/b/c","lala");
  trie.insert("a/x/*","one");
  trie.insert("a/b/*","two");
  trie.insert("*/*/x","three");
  trie.insert("{index}/insert/{docId}","bingo");
  assertThat(trie.retrieve("a/b/c"),equalTo("walla"));
  assertThat(trie.retrieve("a/d/g"),equalTo("kuku"));
  assertThat(trie.retrieve("x/b/c"),equalTo("lala"));
  assertThat(trie.retrieve("a/x/b"),equalTo("one"));
  assertThat(trie.retrieve("a/b/d"),equalTo("two"));
  assertThat(trie.retrieve("a/b"),nullValue());
  assertThat(trie.retrieve("a/b/c/d"),nullValue());
  assertThat(trie.retrieve("g/t/x"),equalTo("three"));
  Map<String,String> params=newHashMap();
  assertThat(trie.retrieve("index1/insert/12",params),equalTo("bingo"));
  assertThat(params.size(),equalTo(2));
  assertThat(params.get("index"),equalTo("index1"));
  assertThat(params.get("docId"),equalTo("12"));
}
