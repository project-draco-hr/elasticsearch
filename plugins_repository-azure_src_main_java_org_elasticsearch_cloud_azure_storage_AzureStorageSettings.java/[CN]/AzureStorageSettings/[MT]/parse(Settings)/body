{
  AzureStorageSettings primaryStorage=null;
  Map<String,AzureStorageSettings> secondaryStorage=new HashMap<>();
  String account=settings.get(Storage.ACCOUNT);
  String key=settings.get(Storage.KEY);
  if (account != null) {
    logger.warn("[{}] and [{}] have been deprecated. Use now [{}xxx.account] and [{}xxx.key] where xxx is any name",Storage.ACCOUNT,Storage.KEY,Storage.PREFIX,Storage.PREFIX);
    primaryStorage=new AzureStorageSettings(null,account,key);
  }
 else {
    Settings storageSettings=settings.getByPrefix(Storage.PREFIX);
    if (storageSettings != null) {
      Map<String,Object> asMap=storageSettings.getAsStructuredMap();
      for (      Map.Entry<String,Object> storage : asMap.entrySet()) {
        if (storage.getValue() instanceof Map) {
          @SuppressWarnings("unchecked") Map<String,String> map=(Map)storage.getValue();
          AzureStorageSettings current=new AzureStorageSettings(storage.getKey(),map.get("account"),map.get("key"));
          boolean activeByDefault=Boolean.parseBoolean(map.getOrDefault("default","false"));
          if (activeByDefault) {
            if (primaryStorage == null) {
              primaryStorage=current;
            }
 else {
              logger.warn("default storage settings has already been defined. You can not define it to [{}]",storage.getKey());
              secondaryStorage.put(storage.getKey(),current);
            }
          }
 else {
            secondaryStorage.put(storage.getKey(),current);
          }
        }
      }
      if (primaryStorage == null && secondaryStorage.isEmpty() == false) {
        Map.Entry<String,AzureStorageSettings> fallback=secondaryStorage.entrySet().iterator().next();
        if (secondaryStorage.size() > 1) {
          logger.warn("no default storage settings has been defined. " + "Add \"default\": true to the settings you want to activate by default. " + "Forcing default to [{}].",fallback.getKey());
        }
        primaryStorage=fallback.getValue();
        secondaryStorage.remove(fallback.getKey());
      }
    }
  }
  return Tuple.tuple(primaryStorage,secondaryStorage);
}
