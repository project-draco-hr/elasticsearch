{
  String clusterAddresses=System.getProperty(TESTS_CLUSTER);
  if (Strings.hasLength(clusterAddresses)) {
    if (scope == Scope.TEST) {
      throw new IllegalArgumentException("Cannot run TEST scope test with " + TESTS_CLUSTER);
    }
    return buildExternalCluster(clusterAddresses);
  }
  final String nodePrefix;
switch (scope) {
case TEST:
    nodePrefix=TEST_CLUSTER_NODE_PREFIX;
  break;
case SUITE:
nodePrefix=SUITE_CLUSTER_NODE_PREFIX;
break;
default :
throw new ElasticsearchException("Scope not supported: " + scope);
}
NodeConfigurationSource nodeConfigurationSource=new NodeConfigurationSource(){
@Override public Settings nodeSettings(int nodeOrdinal){
return Settings.builder().put(Node.HTTP_ENABLED,false).put(ESIntegTestCase.this.nodeSettings(nodeOrdinal)).build();
}
@Override public Collection<Class<? extends Plugin>> nodePlugins(){
return ESIntegTestCase.this.nodePlugins();
}
@Override public Settings transportClientSettings(){
return ESIntegTestCase.this.transportClientSettings();
}
@Override public Collection<Class<? extends Plugin>> transportClientPlugins(){
return ESIntegTestCase.this.transportClientPlugins();
}
}
;
int numDataNodes=getNumDataNodes();
int minNumDataNodes;
int maxNumDataNodes;
if (numDataNodes >= 0) {
minNumDataNodes=maxNumDataNodes=numDataNodes;
}
 else {
minNumDataNodes=getMinNumDataNodes();
maxNumDataNodes=getMaxNumDataNodes();
}
SuppressLocalMode noLocal=getAnnotation(this.getClass(),SuppressLocalMode.class);
SuppressNetworkMode noNetwork=getAnnotation(this.getClass(),SuppressNetworkMode.class);
String nodeMode=InternalTestCluster.configuredNodeMode();
if (noLocal != null && noNetwork != null) {
throw new IllegalStateException("Can't suppress both network and local mode");
}
 else if (noLocal != null) {
nodeMode="network";
}
 else if (noNetwork != null) {
nodeMode="local";
}
return new InternalTestCluster(nodeMode,seed,createTempDir(),minNumDataNodes,maxNumDataNodes,InternalTestCluster.clusterName(scope.name(),seed) + "-cluster",nodeConfigurationSource,getNumClientNodes(),InternalTestCluster.DEFAULT_ENABLE_HTTP_PIPELINING,nodePrefix);
}
