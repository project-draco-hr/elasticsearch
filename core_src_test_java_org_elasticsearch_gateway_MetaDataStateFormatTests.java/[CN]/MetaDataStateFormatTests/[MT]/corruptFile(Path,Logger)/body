{
  Path fileToCorrupt=file;
  try (final SimpleFSDirectory dir=new SimpleFSDirectory(fileToCorrupt.getParent())){
    long checksumBeforeCorruption;
    try (IndexInput input=dir.openInput(fileToCorrupt.getFileName().toString(),IOContext.DEFAULT)){
      checksumBeforeCorruption=CodecUtil.retrieveChecksum(input);
    }
     try (FileChannel raf=FileChannel.open(fileToCorrupt,StandardOpenOption.READ,StandardOpenOption.WRITE)){
      raf.position(randomIntBetween(0,(int)Math.min(Integer.MAX_VALUE,raf.size() - 1)));
      long filePointer=raf.position();
      ByteBuffer bb=ByteBuffer.wrap(new byte[1]);
      raf.read(bb);
      bb.flip();
      byte oldValue=bb.get(0);
      byte newValue=(byte)~oldValue;
      bb.put(0,newValue);
      raf.write(bb,filePointer);
      logger.debug("Corrupting file {} --  flipping at position {} from {} to {} ",fileToCorrupt.getFileName().toString(),filePointer,Integer.toHexString(oldValue),Integer.toHexString(newValue));
    }
     long checksumAfterCorruption;
    long actualChecksumAfterCorruption;
    try (ChecksumIndexInput input=dir.openChecksumInput(fileToCorrupt.getFileName().toString(),IOContext.DEFAULT)){
      assertThat(input.getFilePointer(),is(0L));
      input.seek(input.length() - 8);
      checksumAfterCorruption=input.getChecksum();
      actualChecksumAfterCorruption=input.readLong();
    }
     StringBuilder msg=new StringBuilder();
    msg.append("Checksum before: [").append(checksumBeforeCorruption).append("]");
    msg.append(" after: [").append(checksumAfterCorruption).append("]");
    msg.append(" checksum value after corruption: ").append(actualChecksumAfterCorruption).append("]");
    msg.append(" file: ").append(fileToCorrupt.getFileName().toString()).append(" length: ").append(dir.fileLength(fileToCorrupt.getFileName().toString()));
    logger.debug("{}",msg.toString());
    assumeTrue("Checksum collision - " + msg.toString(),checksumAfterCorruption != checksumBeforeCorruption || actualChecksumAfterCorruption != checksumBeforeCorruption);
  }
 }
