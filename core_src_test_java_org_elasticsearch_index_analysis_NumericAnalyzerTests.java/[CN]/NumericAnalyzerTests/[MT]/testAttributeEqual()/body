{
  final int precisionStep=8;
  final double value=randomDouble();
  NumericDoubleAnalyzer analyzer=new NumericDoubleAnalyzer(precisionStep);
  final TokenStream ts1=analyzer.tokenStream("dummy",String.valueOf(value));
  final LegacyNumericTokenStream ts2=new LegacyNumericTokenStream(precisionStep);
  ts2.setDoubleValue(value);
  final LegacyNumericTermAttribute numTerm1=ts1.addAttribute(LegacyNumericTermAttribute.class);
  final LegacyNumericTermAttribute numTerm2=ts1.addAttribute(LegacyNumericTermAttribute.class);
  final PositionIncrementAttribute posInc1=ts1.addAttribute(PositionIncrementAttribute.class);
  final PositionIncrementAttribute posInc2=ts1.addAttribute(PositionIncrementAttribute.class);
  ts1.reset();
  ts2.reset();
  while (ts1.incrementToken()) {
    assertThat(ts2.incrementToken(),is(true));
    assertThat(posInc1,equalTo(posInc2));
    assertThat(numTerm1.getRawValue(),equalTo(numTerm2.getRawValue()));
    assertThat(numTerm2.getShift(),equalTo(numTerm2.getShift()));
  }
  assertThat(ts2.incrementToken(),is(false));
  ts1.end();
  ts2.end();
}
