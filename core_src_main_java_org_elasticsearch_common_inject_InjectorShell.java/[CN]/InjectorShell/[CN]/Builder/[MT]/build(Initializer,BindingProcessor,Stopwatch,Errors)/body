{
  if (stage == null) {
    throw new IllegalStateException("Stage not initialized");
  }
  if (privateElements != null && parent == null) {
    throw new IllegalStateException("PrivateElements with no parent");
  }
  if (state == null) {
    throw new IllegalStateException("no state. Did you remember to lock() ?");
  }
  InjectorImpl injector=new InjectorImpl(parent,state,initializer);
  if (privateElements != null) {
    privateElements.initInjector(injector);
  }
  if (parent == null) {
    modules.add(0,new RootModule(stage));
    new TypeConverterBindingProcessor(errors).prepareBuiltInConverters(injector);
  }
  elements.addAll(Elements.getElements(stage,modules));
  stopwatch.resetAndLog("Module execution");
  new MessageProcessor(errors).process(injector,elements);
  new TypeListenerBindingProcessor(errors).process(injector,elements);
  List<TypeListenerBinding> listenerBindings=injector.state.getTypeListenerBindings();
  injector.membersInjectorStore=new MembersInjectorStore(injector,listenerBindings);
  stopwatch.resetAndLog("TypeListeners creation");
  new ScopeBindingProcessor(errors).process(injector,elements);
  stopwatch.resetAndLog("Scopes creation");
  new TypeConverterBindingProcessor(errors).process(injector,elements);
  stopwatch.resetAndLog("Converters creation");
  bindInjector(injector);
  bindLogger(injector);
  bindingProcessor.process(injector,elements);
  stopwatch.resetAndLog("Binding creation");
  List<InjectorShell> injectorShells=new ArrayList<>();
  injectorShells.add(new InjectorShell(this,elements,injector));
  PrivateElementProcessor processor=new PrivateElementProcessor(errors,stage);
  processor.process(injector,elements);
  for (  Builder builder : processor.getInjectorShellBuilders()) {
    injectorShells.addAll(builder.build(initializer,bindingProcessor,stopwatch,errors));
  }
  stopwatch.resetAndLog("Private environment creation");
  return injectorShells;
}
