{
  Class<?> rawType=getRawType(type.getType());
  Errors errors=new Errors(rawType);
  Constructor<?> injectableConstructor=null;
  for (  Constructor<?> constructor : rawType.getDeclaredConstructors()) {
    Inject inject=constructor.getAnnotation(Inject.class);
    if (inject != null) {
      if (inject.optional()) {
        errors.optionalConstructor(constructor);
      }
      if (injectableConstructor != null) {
        errors.tooManyConstructors(rawType);
      }
      injectableConstructor=constructor;
      checkForMisplacedBindingAnnotations(injectableConstructor,errors);
    }
  }
  errors.throwConfigurationExceptionIfErrorsExist();
  if (injectableConstructor != null) {
    return new InjectionPoint(type,injectableConstructor);
  }
  try {
    Constructor<?> noArgConstructor=rawType.getDeclaredConstructor();
    if (Modifier.isPrivate(noArgConstructor.getModifiers()) && !Modifier.isPrivate(rawType.getModifiers())) {
      errors.missingConstructor(rawType);
      throw new ConfigurationException(errors.getMessages());
    }
    checkForMisplacedBindingAnnotations(noArgConstructor,errors);
    return new InjectionPoint(type,noArgConstructor);
  }
 catch (  NoSuchMethodException e) {
    errors.missingConstructor(rawType);
    throw new ConfigurationException(errors.getMessages());
  }
}
