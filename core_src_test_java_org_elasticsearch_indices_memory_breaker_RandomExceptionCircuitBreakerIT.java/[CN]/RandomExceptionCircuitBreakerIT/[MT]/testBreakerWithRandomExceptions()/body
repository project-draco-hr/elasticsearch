{
  for (  NodeStats node : client().admin().cluster().prepareNodesStats().clear().setBreaker(true).execute().actionGet().getNodes()) {
    assertThat("Breaker is not set to 0",node.getBreaker().getStats(CircuitBreaker.FIELDDATA).getEstimated(),equalTo(0L));
  }
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("test-str").field("type","string").field("index","not_analyzed").field("doc_values",randomBoolean()).endObject().startObject("test-num").field("type",randomFrom(Arrays.asList("float","long","double","short","integer"))).startObject("fielddata").field("format",randomNumericFieldDataFormat()).endObject().endObject().endObject().endObject().endObject().string();
  final double topLevelRate;
  final double lowLevelRate;
  if (frequently()) {
    if (randomBoolean()) {
      if (randomBoolean()) {
        lowLevelRate=1.0 / between(2,10);
        topLevelRate=0.0d;
      }
 else {
        topLevelRate=1.0 / between(2,10);
        lowLevelRate=0.0d;
      }
    }
 else {
      lowLevelRate=1.0 / between(2,10);
      topLevelRate=1.0 / between(2,10);
    }
  }
 else {
    topLevelRate=0d;
    lowLevelRate=0d;
  }
  Settings.Builder settings=settingsBuilder().put(indexSettings()).put(EXCEPTION_TOP_LEVEL_RATIO_KEY,topLevelRate).put(EXCEPTION_LOW_LEVEL_RATIO_KEY,lowLevelRate).put(MockEngineSupport.WRAP_READER_RATIO,1.0d);
  logger.info("creating index: [test] using settings: [{}]",settings.build().getAsMap());
  client().admin().indices().prepareCreate("test").setSettings(settings).addMapping("type",mapping).execute().actionGet();
  ClusterHealthResponse clusterHealthResponse=client().admin().cluster().health(Requests.clusterHealthRequest().waitForYellowStatus().timeout(TimeValue.timeValueSeconds(5))).get();
  final int numDocs;
  if (clusterHealthResponse.isTimedOut()) {
    logger.info("ClusterHealth timed out - only index one doc and expect searches to fail");
    numDocs=1;
  }
 else {
    numDocs=between(10,100);
  }
  for (int i=0; i < numDocs; i++) {
    try {
      client().prepareIndex("test","type","" + i).setTimeout(TimeValue.timeValueSeconds(1)).setSource("test-str",randomUnicodeOfLengthBetween(5,25),"test-num",i).get();
    }
 catch (    ElasticsearchException ex) {
    }
  }
  logger.info("Start Refresh");
  RefreshResponse refreshResponse=client().admin().indices().prepareRefresh("test").execute().get();
  final boolean refreshFailed=refreshResponse.getShardFailures().length != 0 || refreshResponse.getFailedShards() != 0;
  logger.info("Refresh failed: [{}] numShardsFailed: [{}], shardFailuresLength: [{}], successfulShards: [{}], totalShards: [{}] ",refreshFailed,refreshResponse.getFailedShards(),refreshResponse.getShardFailures().length,refreshResponse.getSuccessfulShards(),refreshResponse.getTotalShards());
  final int numSearches=scaledRandomIntBetween(50,150);
  NodesStatsResponse resp=client().admin().cluster().prepareNodesStats().clear().setBreaker(true).execute().actionGet();
  for (  NodeStats stats : resp.getNodes()) {
    assertThat("Breaker is set to 0",stats.getBreaker().getStats(CircuitBreaker.FIELDDATA).getEstimated(),equalTo(0L));
  }
  for (int i=0; i < numSearches; i++) {
    SearchRequestBuilder searchRequestBuilder=client().prepareSearch().setQuery(QueryBuilders.matchAllQuery());
switch (randomIntBetween(0,5)) {
case 5:
case 4:
case 3:
      searchRequestBuilder.addSort("test-str",SortOrder.ASC);
case 2:
case 1:
default :
    searchRequestBuilder.addSort("test-num",SortOrder.ASC);
}
boolean success=false;
try {
  searchRequestBuilder.get();
  success=true;
}
 catch (SearchPhaseExecutionException ex) {
  logger.info("expected SearchPhaseException: [{}]",ex.getMessage());
}
if (frequently()) {
  ensureGreen("test");
  assertAllSuccessful(client().admin().indices().prepareClearCache("test").setFieldDataCache(true).execute().actionGet());
  for (  String node : internalCluster().getNodeNames()) {
    final IndicesFieldDataCache fdCache=internalCluster().getInstance(IndicesFieldDataCache.class,node);
    fdCache.getCache().cleanUp();
  }
  NodesStatsResponse nodeStats=client().admin().cluster().prepareNodesStats().clear().setBreaker(true).execute().actionGet();
  for (  NodeStats stats : nodeStats.getNodes()) {
    assertThat("Breaker reset to 0 last search success: " + success + " mapping: "+ mapping,stats.getBreaker().getStats(CircuitBreaker.FIELDDATA).getEstimated(),equalTo(0L));
  }
}
}
}
