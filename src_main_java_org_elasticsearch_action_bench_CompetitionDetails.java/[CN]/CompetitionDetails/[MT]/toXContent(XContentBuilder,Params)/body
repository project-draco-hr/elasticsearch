{
  final int highestIteration=highestCompletedIteration();
  computeAllStatistics();
  CompetitionIteration prototypical=prototypicalIteration();
  builder.startObject(Fields.ITERATIONS);
  for (int i=0; i < highestIteration; i++) {
    builder.field(Fields.ITERATION,i);
    builder.startObject();
    builder.startObject(Fields.MIN);
    for (    CompetitionNodeResult nodeResult : nodeResults) {
      CompetitionIteration iteration=nodeResult.iterations().get(i);
      builder.field(nodeResult.nodeName(),iteration == null ? Fields.NULL : iteration.min());
    }
    builder.endObject();
    builder.startObject(Fields.MAX);
    for (    CompetitionNodeResult nodeResult : nodeResults) {
      CompetitionIteration iteration=nodeResult.iterations().get(i);
      builder.field(nodeResult.nodeName(),iteration == null ? Fields.NULL : iteration.max());
    }
    builder.endObject();
    builder.startObject(Fields.MEAN);
    for (    CompetitionNodeResult nodeResult : nodeResults) {
      CompetitionIteration iteration=nodeResult.iterations().get(i);
      builder.field(nodeResult.nodeName(),iteration == null ? Fields.NULL : iteration.mean());
    }
    builder.endObject();
    builder.startObject(Fields.TOTAL_TIME);
    for (    CompetitionNodeResult nodeResult : nodeResults) {
      CompetitionIteration iteration=nodeResult.iterations().get(i);
      builder.field(nodeResult.nodeName(),iteration == null ? Fields.NULL : iteration.totalTime());
    }
    builder.endObject();
    builder.startObject(Fields.QPS);
    for (    CompetitionNodeResult nodeResult : nodeResults) {
      CompetitionIteration iteration=nodeResult.iterations().get(i);
      builder.field(nodeResult.nodeName(),iteration == null ? Fields.NULL : iteration.queriesPerSecond());
    }
    builder.endObject();
    if (prototypical != null) {
      for (      Map.Entry<Double,Double> entry : prototypical.percentileValues().entrySet()) {
        builder.startObject(new XContentBuilderString("percentile_" + entry.getKey().longValue()));
        for (        CompetitionNodeResult nodeResult : nodeResults) {
          CompetitionIteration iteration=nodeResult.iterations().get(i);
          if (iteration != null) {
            Double value=iteration.percentileValues().get(entry.getKey());
            builder.field(nodeResult.nodeName(),(value.isNaN()) ? 0.0 : value);
          }
 else {
            builder.field(nodeResult.nodeName(),Fields.NULL);
          }
        }
        builder.endObject();
      }
    }
    builder.endObject();
  }
  return builder;
}
