{
  rhs.analyze(locals);
  boolean shift=false;
  if (operation == Operation.MUL) {
    promote=AnalyzerCaster.promoteNumeric(lhs.actual,rhs.actual,true);
  }
 else   if (operation == Operation.DIV) {
    promote=AnalyzerCaster.promoteNumeric(lhs.actual,rhs.actual,true);
  }
 else   if (operation == Operation.REM) {
    promote=AnalyzerCaster.promoteNumeric(lhs.actual,rhs.actual,true);
  }
 else   if (operation == Operation.ADD) {
    promote=AnalyzerCaster.promoteAdd(lhs.actual,rhs.actual);
  }
 else   if (operation == Operation.SUB) {
    promote=AnalyzerCaster.promoteNumeric(lhs.actual,rhs.actual,true);
  }
 else   if (operation == Operation.LSH) {
    promote=AnalyzerCaster.promoteNumeric(lhs.actual,false);
    shiftDistance=AnalyzerCaster.promoteNumeric(rhs.actual,false);
    shift=true;
  }
 else   if (operation == Operation.RSH) {
    promote=AnalyzerCaster.promoteNumeric(lhs.actual,false);
    shiftDistance=AnalyzerCaster.promoteNumeric(rhs.actual,false);
    shift=true;
  }
 else   if (operation == Operation.USH) {
    promote=AnalyzerCaster.promoteNumeric(lhs.actual,false);
    shiftDistance=AnalyzerCaster.promoteNumeric(rhs.actual,false);
    shift=true;
  }
 else   if (operation == Operation.BWAND) {
    promote=AnalyzerCaster.promoteXor(lhs.actual,rhs.actual);
  }
 else   if (operation == Operation.XOR) {
    promote=AnalyzerCaster.promoteXor(lhs.actual,rhs.actual);
  }
 else   if (operation == Operation.BWOR) {
    promote=AnalyzerCaster.promoteXor(lhs.actual,rhs.actual);
  }
 else {
    throw createError(new IllegalStateException("Illegal tree structure."));
  }
  if (promote == null || (shift && shiftDistance == null)) {
    throw createError(new ClassCastException("Cannot apply compound assignment " + "[" + operation.symbol + "=] to types ["+ lhs.actual+ "] and ["+ rhs.actual+ "]."));
  }
  cat=operation == Operation.ADD && promote.sort == Sort.STRING;
  if (cat) {
    if (rhs instanceof EBinary && ((EBinary)rhs).operation == Operation.ADD && rhs.actual.sort == Sort.STRING) {
      ((EBinary)rhs).cat=true;
    }
    rhs.expected=rhs.actual;
  }
 else   if (shift) {
    if (promote.sort == Sort.DEF) {
      rhs.expected=promote;
    }
 else     if (shiftDistance.sort == Sort.LONG) {
      rhs.expected=Definition.INT_TYPE;
      rhs.explicit=true;
    }
 else {
      rhs.expected=shiftDistance;
    }
  }
 else {
    rhs.expected=promote;
  }
  rhs=rhs.cast(locals);
  there=AnalyzerCaster.getLegalCast(location,lhs.actual,promote,false,false);
  back=AnalyzerCaster.getLegalCast(location,promote,lhs.actual,true,false);
  this.statement=true;
  this.actual=read ? lhs.actual : Definition.VOID_TYPE;
}
