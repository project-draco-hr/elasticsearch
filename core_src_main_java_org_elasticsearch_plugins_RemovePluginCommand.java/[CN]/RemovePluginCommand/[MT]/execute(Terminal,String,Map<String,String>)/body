{
  final Environment env=InternalSettingsPreparer.prepareEnvironment(Settings.EMPTY,terminal,settings);
  terminal.println("-> Removing " + Strings.coalesceToEmpty(pluginName) + "...");
  final Path pluginDir=env.pluginsFile().resolve(pluginName);
  if (Files.exists(pluginDir) == false) {
    throw new UserException(ExitCodes.USAGE,"plugin " + pluginName + " not found; run 'elasticsearch-plugin list' to get list of installed plugins");
  }
  final List<Path> pluginPaths=new ArrayList<>();
  final Path pluginBinDir=env.binFile().resolve(pluginName);
  if (Files.exists(pluginBinDir)) {
    if (Files.isDirectory(pluginBinDir) == false) {
      throw new UserException(ExitCodes.IO_ERROR,"Bin dir for " + pluginName + " is not a directory");
    }
    pluginPaths.add(pluginBinDir);
    terminal.println(VERBOSE,"Removing: " + pluginBinDir);
  }
  terminal.println(VERBOSE,"Removing: " + pluginDir);
  final Path tmpPluginDir=env.pluginsFile().resolve(".removing-" + pluginName);
  Files.move(pluginDir,tmpPluginDir,StandardCopyOption.ATOMIC_MOVE);
  pluginPaths.add(tmpPluginDir);
  IOUtils.rm(pluginPaths.toArray(new Path[pluginPaths.size()]));
  final Path pluginConfigDir=env.configFile().resolve(pluginName);
  if (Files.exists(pluginConfigDir)) {
    terminal.println("-> Preserving plugin config files: " + pluginConfigDir);
  }
}
