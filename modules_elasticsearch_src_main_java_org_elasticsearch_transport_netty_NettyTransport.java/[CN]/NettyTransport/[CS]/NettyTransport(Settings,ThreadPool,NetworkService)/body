{
  super(settings);
  this.threadPool=threadPool;
  this.networkService=networkService;
  this.workerCount=componentSettings.getAsInt("worker_count",Runtime.getRuntime().availableProcessors() * 2);
  this.blockingServer=settings.getAsBoolean("transport.tcp.blocking_server",settings.getAsBoolean(TCP_BLOCKING_SERVER,settings.getAsBoolean(TCP_BLOCKING,false)));
  this.blockingClient=settings.getAsBoolean("transport.tcp.blocking_client",settings.getAsBoolean(TCP_BLOCKING_CLIENT,settings.getAsBoolean(TCP_BLOCKING,false)));
  this.port=componentSettings.get("port",settings.get("transport.tcp.port","9300-9400"));
  this.bindHost=componentSettings.get("bind_host");
  this.publishHost=componentSettings.get("publish_host");
  this.compress=settings.getAsBoolean("transport.tcp.compress",false);
  this.connectTimeout=componentSettings.getAsTime("connect_timeout",settings.getAsTime("transport.tcp.connect_timeout",timeValueSeconds(1)));
  this.tcpNoDelay=componentSettings.getAsBoolean("tcp_no_delay",settings.getAsBoolean(TCP_NO_DELAY,true));
  this.tcpKeepAlive=componentSettings.getAsBoolean("tcp_keep_alive",settings.getAsBoolean(TCP_KEEP_ALIVE,true));
  this.reuseAddress=componentSettings.getAsBoolean("reuse_address",settings.getAsBoolean(TCP_REUSE_ADDRESS,NetworkUtils.defaultReuseAddress()));
  this.tcpSendBufferSize=componentSettings.getAsBytesSize("tcp_send_buffer_size",settings.getAsBytesSize(TCP_SEND_BUFFER_SIZE,TCP_DEFAULT_SEND_BUFFER_SIZE));
  this.tcpReceiveBufferSize=componentSettings.getAsBytesSize("tcp_receive_buffer_size",settings.getAsBytesSize(TCP_RECEIVE_BUFFER_SIZE,TCP_DEFAULT_RECEIVE_BUFFER_SIZE));
  this.connectionsPerNodeLow=componentSettings.getAsInt("connections_per_node.low",2);
  this.connectionsPerNodeMed=componentSettings.getAsInt("connections_per_node.low",7);
  this.connectionsPerNodeHigh=componentSettings.getAsInt("connections_per_node.low",1);
}
