{
  clientBootstrap=new ClientBootstrap(new NioClientSocketChannelFactory(Executors.newCachedThreadPool(daemonThreadFactory(settings,"transportClientBoss")),Executors.newCachedThreadPool(daemonThreadFactory(settings,"transportClientIoWorker")),workerCount));
  ChannelPipelineFactory clientPipelineFactory=new ChannelPipelineFactory(){
    @Override public ChannelPipeline getPipeline() throws Exception {
      ChannelPipeline pipeline=Channels.pipeline();
      pipeline.addLast("decoder",new SizeHeaderFrameDecoder());
      pipeline.addLast("dispatcher",new MessageChannelHandler(NettyTransport.this,logger));
      return pipeline;
    }
  }
;
  clientBootstrap.setPipelineFactory(clientPipelineFactory);
  clientBootstrap.setOption("connectTimeoutMillis",connectTimeout.millis());
  if (tcpNoDelay != null) {
    clientBootstrap.setOption("tcpNoDelay",tcpNoDelay);
  }
  if (tcpKeepAlive != null) {
    clientBootstrap.setOption("keepAlive",tcpKeepAlive);
  }
  if (tcpSendBufferSize != null) {
    clientBootstrap.setOption("sendBufferSize",tcpSendBufferSize.bytes());
  }
  if (tcpReceiveBufferSize != null) {
    clientBootstrap.setOption("receiveBufferSize",tcpReceiveBufferSize.bytes());
  }
  if (reuseAddress != null) {
    clientBootstrap.setOption("reuseAddress",reuseAddress);
  }
  if (!settings.getAsBoolean("network.server",true)) {
    return;
  }
  serverOpenChannels=new OpenChannelsHandler();
  serverBootstrap=new ServerBootstrap(new NioServerSocketChannelFactory(Executors.newCachedThreadPool(daemonThreadFactory(settings,"transportServerBoss")),Executors.newCachedThreadPool(daemonThreadFactory(settings,"transportServerIoWorker")),workerCount));
  ChannelPipelineFactory serverPipelineFactory=new ChannelPipelineFactory(){
    @Override public ChannelPipeline getPipeline() throws Exception {
      ChannelPipeline pipeline=Channels.pipeline();
      pipeline.addLast("openChannels",serverOpenChannels);
      pipeline.addLast("decoder",new SizeHeaderFrameDecoder());
      pipeline.addLast("dispatcher",new MessageChannelHandler(NettyTransport.this,logger));
      return pipeline;
    }
  }
;
  serverBootstrap.setPipelineFactory(serverPipelineFactory);
  if (tcpNoDelay != null) {
    serverBootstrap.setOption("child.tcpNoDelay",tcpNoDelay);
  }
  if (tcpKeepAlive != null) {
    serverBootstrap.setOption("child.keepAlive",tcpKeepAlive);
  }
  if (tcpSendBufferSize != null) {
    serverBootstrap.setOption("child.sendBufferSize",tcpSendBufferSize.bytes());
  }
  if (tcpReceiveBufferSize != null) {
    serverBootstrap.setOption("child.receiveBufferSize",tcpReceiveBufferSize.bytes());
  }
  if (reuseAddress != null) {
    serverBootstrap.setOption("reuseAddress",reuseAddress);
    serverBootstrap.setOption("child.reuseAddress",reuseAddress);
  }
  InetAddress hostAddressX;
  try {
    hostAddressX=resolveBindHostAddress(bindHost,settings);
  }
 catch (  IOException e) {
    throw new BindTransportException("Failed to resolve host [" + bindHost + "]",e);
  }
  final InetAddress hostAddress=hostAddressX;
  PortsRange portsRange=new PortsRange(port);
  final AtomicReference<Exception> lastException=new AtomicReference<Exception>();
  boolean success=portsRange.iterate(new PortsRange.PortCallback(){
    @Override public boolean onPortNumber(    int portNumber){
      try {
        serverChannel=serverBootstrap.bind(new InetSocketAddress(hostAddress,portNumber));
      }
 catch (      Exception e) {
        lastException.set(e);
        return false;
      }
      return true;
    }
  }
);
  if (!success) {
    throw new BindTransportException("Failed to bind to [" + port + "]",lastException.get());
  }
  logger.debug("Bound to address [{}]",serverChannel.getLocalAddress());
  InetSocketAddress boundAddress=(InetSocketAddress)serverChannel.getLocalAddress();
  InetSocketAddress publishAddress;
  try {
    InetAddress publishAddressX=resolvePublishHostAddress(publishHost,settings);
    if (publishAddressX == null) {
      if (boundAddress.getAddress().isAnyLocalAddress()) {
        publishAddress=new InetSocketAddress(resolvePublishHostAddress(publishHost,settings,LOCAL_IP),boundAddress.getPort());
      }
 else {
        publishAddress=boundAddress;
      }
    }
 else {
      publishAddress=new InetSocketAddress(publishAddressX,boundAddress.getPort());
    }
  }
 catch (  Exception e) {
    throw new BindTransportException("Failed to resolve publish address",e);
  }
  this.boundAddress=new BoundTransportAddress(new InetSocketTransportAddress(boundAddress),new InetSocketTransportAddress(publishAddress));
}
