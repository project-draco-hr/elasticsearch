{
  boolean changed=false;
  BreakerSettings newFielddataSettings=HierarchyCircuitBreakerService.this.fielddataSettings;
  ByteSizeValue newFielddataMax=settings.getAsMemory(FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING,null);
  Double newFielddataOverhead=settings.getAsDouble(FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING,null);
  if (newFielddataMax != null || newFielddataOverhead != null) {
    changed=true;
    long newFielddataLimitBytes=newFielddataMax == null ? HierarchyCircuitBreakerService.this.fielddataSettings.getLimit() : newFielddataMax.bytes();
    newFielddataOverhead=newFielddataOverhead == null ? HierarchyCircuitBreakerService.this.fielddataSettings.getOverhead() : newFielddataOverhead;
    newFielddataSettings=new BreakerSettings(CircuitBreaker.Name.FIELDDATA,newFielddataLimitBytes,newFielddataOverhead,HierarchyCircuitBreakerService.this.fielddataSettings.getType());
  }
  BreakerSettings newRequestSettings=HierarchyCircuitBreakerService.this.requestSettings;
  ByteSizeValue newRequestMax=settings.getAsMemory(REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING,null);
  Double newRequestOverhead=settings.getAsDouble(REQUEST_CIRCUIT_BREAKER_OVERHEAD_SETTING,null);
  if (newRequestMax != null || newRequestOverhead != null) {
    changed=true;
    long newRequestLimitBytes=newRequestMax == null ? HierarchyCircuitBreakerService.this.requestSettings.getLimit() : newRequestMax.bytes();
    newRequestOverhead=newRequestOverhead == null ? HierarchyCircuitBreakerService.this.requestSettings.getOverhead() : newRequestOverhead;
    newRequestSettings=new BreakerSettings(CircuitBreaker.Name.REQUEST,newRequestLimitBytes,newRequestOverhead,HierarchyCircuitBreakerService.this.requestSettings.getType());
  }
  BreakerSettings newParentSettings=HierarchyCircuitBreakerService.this.parentSettings;
  long oldParentMax=HierarchyCircuitBreakerService.this.parentSettings.getLimit();
  ByteSizeValue newParentMax=settings.getAsMemory(TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING,null);
  if (newParentMax != null && (newParentMax.bytes() != oldParentMax)) {
    changed=true;
    newParentSettings=new BreakerSettings(CircuitBreaker.Name.PARENT,newParentMax.bytes(),1.0,CircuitBreaker.Type.PARENT);
  }
  if (changed) {
    validateSettings(new BreakerSettings[]{newFielddataSettings,newRequestSettings});
    logger.info("Updating settings parent: {}, fielddata: {}, request: {}",newParentSettings,newFielddataSettings,newRequestSettings);
    HierarchyCircuitBreakerService.this.parentSettings=newParentSettings;
    HierarchyCircuitBreakerService.this.fielddataSettings=newFielddataSettings;
    HierarchyCircuitBreakerService.this.requestSettings=newRequestSettings;
    Map<CircuitBreaker.Name,CircuitBreaker> tempBreakers=new HashMap<>();
    CircuitBreaker fielddataBreaker;
    if (newFielddataSettings.getType() == CircuitBreaker.Type.NOOP) {
      fielddataBreaker=new NoopCircuitBreaker(CircuitBreaker.Name.FIELDDATA);
    }
 else {
      fielddataBreaker=new ChildMemoryCircuitBreaker(newFielddataSettings,(ChildMemoryCircuitBreaker)HierarchyCircuitBreakerService.this.breakers.get(CircuitBreaker.Name.FIELDDATA),logger,HierarchyCircuitBreakerService.this,CircuitBreaker.Name.FIELDDATA);
    }
    CircuitBreaker requestBreaker;
    if (newRequestSettings.getType() == CircuitBreaker.Type.NOOP) {
      requestBreaker=new NoopCircuitBreaker(CircuitBreaker.Name.REQUEST);
    }
 else {
      requestBreaker=new ChildMemoryCircuitBreaker(newRequestSettings,(ChildMemoryCircuitBreaker)HierarchyCircuitBreakerService.this.breakers.get(CircuitBreaker.Name.REQUEST),logger,HierarchyCircuitBreakerService.this,CircuitBreaker.Name.REQUEST);
    }
    tempBreakers.put(CircuitBreaker.Name.FIELDDATA,fielddataBreaker);
    tempBreakers.put(CircuitBreaker.Name.REQUEST,requestBreaker);
synchronized (lock) {
      HierarchyCircuitBreakerService.this.breakers=ImmutableMap.copyOf(tempBreakers);
    }
  }
}
