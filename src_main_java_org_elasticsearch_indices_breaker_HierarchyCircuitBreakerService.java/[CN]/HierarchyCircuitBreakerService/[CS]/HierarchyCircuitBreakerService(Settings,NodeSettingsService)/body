{
  super(settings);
  String compatibilityFielddataLimitDefault=DEFAULT_FIELDDATA_BREAKER_LIMIT;
  ByteSizeValue compatibilityFielddataLimit=settings.getAsMemory(OLD_CIRCUIT_BREAKER_MAX_BYTES_SETTING,null);
  if (compatibilityFielddataLimit != null) {
    compatibilityFielddataLimitDefault=compatibilityFielddataLimit.toString();
  }
  double compatibilityFielddataOverheadDefault=DEFAULT_FIELDDATA_OVERHEAD_CONSTANT;
  Double compatibilityFielddataOverhead=settings.getAsDouble(OLD_CIRCUIT_BREAKER_OVERHEAD_SETTING,null);
  if (compatibilityFielddataOverhead != null) {
    compatibilityFielddataOverheadDefault=compatibilityFielddataOverhead;
  }
  this.fielddataSettings=new BreakerSettings(CircuitBreaker.FIELDDATA,settings.getAsMemory(FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING,compatibilityFielddataLimitDefault).bytes(),settings.getAsDouble(FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING,compatibilityFielddataOverheadDefault),CircuitBreaker.Type.parseValue(settings.get(FIELDDATA_CIRCUIT_BREAKER_TYPE_SETTING,DEFAULT_BREAKER_TYPE)));
  this.requestSettings=new BreakerSettings(CircuitBreaker.REQUEST,settings.getAsMemory(REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING,DEFAULT_REQUEST_BREAKER_LIMIT).bytes(),settings.getAsDouble(REQUEST_CIRCUIT_BREAKER_OVERHEAD_SETTING,1.0),CircuitBreaker.Type.parseValue(settings.get(REQUEST_CIRCUIT_BREAKER_TYPE_SETTING,DEFAULT_BREAKER_TYPE)));
  this.parentSettings=new BreakerSettings(CircuitBreaker.PARENT,settings.getAsMemory(TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING,DEFAULT_TOTAL_CIRCUIT_BREAKER_LIMIT).bytes(),1.0,CircuitBreaker.Type.PARENT);
  if (logger.isTraceEnabled()) {
    logger.trace("parent circuit breaker with settings {}",this.parentSettings);
  }
  registerBreaker(this.requestSettings);
  registerBreaker(this.fielddataSettings);
  nodeSettingsService.addListener(new ApplySettings());
}
