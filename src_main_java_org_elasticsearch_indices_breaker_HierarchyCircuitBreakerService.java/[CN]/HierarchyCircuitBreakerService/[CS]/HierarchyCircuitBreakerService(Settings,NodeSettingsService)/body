{
  super(settings);
  String compatibilityFielddataLimitDefault=DEFAULT_FIELDDATA_BREAKER_LIMIT;
  ByteSizeValue compatibilityFielddataLimit=settings.getAsMemory(OLD_CIRCUIT_BREAKER_MAX_BYTES_SETTING,null);
  if (compatibilityFielddataLimit != null) {
    compatibilityFielddataLimitDefault=compatibilityFielddataLimit.toString();
  }
  double compatibilityFielddataOverheadDefault=DEFAULT_FIELDDATA_OVERHEAD_CONSTANT;
  Double compatibilityFielddataOverhead=settings.getAsDouble(OLD_CIRCUIT_BREAKER_OVERHEAD_SETTING,null);
  if (compatibilityFielddataOverhead != null) {
    compatibilityFielddataOverheadDefault=compatibilityFielddataOverhead;
  }
  this.fielddataSettings=new BreakerSettings(CircuitBreaker.Name.FIELDDATA,settings.getAsMemory(FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING,compatibilityFielddataLimitDefault).bytes(),settings.getAsDouble(FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING,compatibilityFielddataOverheadDefault));
  this.requestSettings=new BreakerSettings(CircuitBreaker.Name.REQUEST,settings.getAsMemory(REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING,DEFAULT_REQUEST_BREAKER_LIMIT).bytes(),settings.getAsDouble(REQUEST_CIRCUIT_BREAKER_OVERHEAD_SETTING,1.0));
  validateSettings(new BreakerSettings[]{this.requestSettings,this.fielddataSettings});
  this.parentSettings=new BreakerSettings(CircuitBreaker.Name.PARENT,settings.getAsMemory(TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING,DEFAULT_TOTAL_CIRCUIT_BREAKER_LIMIT).bytes(),1.0);
  if (logger.isTraceEnabled()) {
    logger.trace("parent circuit breaker with settings {}",this.parentSettings);
  }
  Map<CircuitBreaker.Name,CircuitBreaker> tempBreakers=new HashMap<>();
  tempBreakers.put(CircuitBreaker.Name.FIELDDATA,new ChildMemoryCircuitBreaker(fielddataSettings,logger,this,CircuitBreaker.Name.FIELDDATA));
  tempBreakers.put(CircuitBreaker.Name.REQUEST,new ChildMemoryCircuitBreaker(requestSettings,logger,this,CircuitBreaker.Name.REQUEST));
  this.breakers=ImmutableMap.copyOf(tempBreakers);
  nodeSettingsService.addListener(new ApplySettings());
}
