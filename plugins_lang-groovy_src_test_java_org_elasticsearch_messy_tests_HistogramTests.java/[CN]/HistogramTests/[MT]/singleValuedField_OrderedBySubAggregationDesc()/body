{
  SearchResponse response=client().prepareSearch("idx").addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).order(Histogram.Order.aggregation("sum",false)).subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME))).execute().actionGet();
  assertSearchResponse(response);
  Histogram histo=response.getAggregations().get("histo");
  assertThat(histo,notNullValue());
  assertThat(histo.getName(),equalTo("histo"));
  assertThat(histo.getBuckets().size(),equalTo(numValueBuckets));
  LongHashSet visited=new LongHashSet();
  double previousSum=Double.POSITIVE_INFINITY;
  List<Histogram.Bucket> buckets=new ArrayList<Histogram.Bucket>(histo.getBuckets());
  for (int i=0; i < numValueBuckets; ++i) {
    Histogram.Bucket bucket=buckets.get(i);
    assertThat(bucket,notNullValue());
    long key=((Number)bucket.getKey()).longValue();
    assertTrue(visited.add(key));
    int b=(int)(key / interval);
    assertThat(bucket.getDocCount(),equalTo(valueCounts[b]));
    assertThat(bucket.getAggregations().asList().isEmpty(),is(false));
    Sum sum=bucket.getAggregations().get("sum");
    assertThat(sum,notNullValue());
    long s=0;
    for (int j=0; j < numDocs; ++j) {
      if ((j + 1) / interval == b) {
        s+=j + 1;
      }
    }
    assertThat(sum.getValue(),equalTo((double)s));
    assertThat(sum.getValue(),lessThanOrEqualTo(previousSum));
    previousSum=s;
  }
}
