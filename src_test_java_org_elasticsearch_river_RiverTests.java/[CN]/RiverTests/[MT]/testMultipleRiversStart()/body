{
  int nbRivers=between(2,10);
  logger.info("-->  testing with {} rivers...",nbRivers);
  Thread[] riverCreators=new Thread[nbRivers];
  final CountDownLatch latch=new CountDownLatch(nbRivers);
  final MultiGetRequestBuilder multiGetRequestBuilder=client().prepareMultiGet();
  for (int i=0; i < nbRivers; i++) {
    final String riverName="dummy-river-test-" + i;
    riverCreators[i]=new Thread(){
      @Override public void run(){
        try {
          startRiver(riverName);
        }
 catch (        Throwable t) {
          logger.warn("failed to register river {}",t,riverName);
        }
 finally {
          latch.countDown();
        }
      }
    }
;
    riverCreators[i].start();
    multiGetRequestBuilder.add(RiverIndexName.Conf.DEFAULT_INDEX_NAME,riverName,"_status");
  }
  latch.await();
  logger.info("-->  checking that all rivers were created");
  assertThat(awaitBusy(new Predicate<Object>(){
    @Override public boolean apply(    Object obj){
      MultiGetResponse multiGetItemResponse=multiGetRequestBuilder.get();
      for (      MultiGetItemResponse getItemResponse : multiGetItemResponse) {
        if (getItemResponse.isFailed() || !getItemResponse.getResponse().isExists()) {
          return false;
        }
      }
      return true;
    }
  }
,5,TimeUnit.SECONDS),equalTo(true));
}
