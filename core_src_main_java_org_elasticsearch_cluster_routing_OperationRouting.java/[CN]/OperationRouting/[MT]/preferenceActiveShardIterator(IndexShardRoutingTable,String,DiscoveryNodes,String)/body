{
  if (preference == null || preference.isEmpty()) {
    if (awarenessAttributes.length == 0) {
      return indexShard.activeInitializingShardsRandomIt();
    }
 else {
      return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes,nodes);
    }
  }
  if (preference.charAt(0) == '_') {
    Preference preferenceType=Preference.parse(preference);
    if (preferenceType == Preference.SHARDS) {
      int index=preference.indexOf(';');
      String shards;
      if (index == -1) {
        shards=preference.substring(Preference.SHARDS.type().length() + 1);
      }
 else {
        shards=preference.substring(Preference.SHARDS.type().length() + 1,index);
      }
      String[] ids=Strings.splitStringByCommaToArray(shards);
      boolean found=false;
      for (      String id : ids) {
        if (Integer.parseInt(id) == indexShard.shardId().id()) {
          found=true;
          break;
        }
      }
      if (!found) {
        return null;
      }
      if (index == -1 || index == preference.length() - 1) {
        if (awarenessAttributes.length == 0) {
          return indexShard.activeInitializingShardsRandomIt();
        }
 else {
          return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes,nodes);
        }
      }
 else {
        preference=preference.substring(index + 1);
      }
    }
    preferenceType=Preference.parse(preference);
switch (preferenceType) {
case PREFER_NODES:
      final Set<String> nodesIds=Arrays.stream(preference.substring(Preference.PREFER_NODES.type().length() + 1).split(",")).collect(Collectors.toSet());
    return indexShard.preferNodeActiveInitializingShardsIt(nodesIds);
case LOCAL:
  return indexShard.preferNodeActiveInitializingShardsIt(Collections.singleton(localNodeId));
case PRIMARY:
return indexShard.primaryActiveInitializingShardIt();
case REPLICA:
return indexShard.replicaActiveInitializingShardIt();
case PRIMARY_FIRST:
return indexShard.primaryFirstActiveInitializingShardsIt();
case REPLICA_FIRST:
return indexShard.replicaFirstActiveInitializingShardsIt();
case ONLY_LOCAL:
return indexShard.onlyNodeActiveInitializingShardsIt(localNodeId);
case ONLY_NODE:
String nodeId=preference.substring(Preference.ONLY_NODE.type().length() + 1);
ensureNodeIdExists(nodes,nodeId);
return indexShard.onlyNodeActiveInitializingShardsIt(nodeId);
case ONLY_NODES:
String nodeAttributes=preference.substring(Preference.ONLY_NODES.type().length() + 1);
return indexShard.onlyNodeSelectorActiveInitializingShardsIt(nodeAttributes.split(","),nodes);
default :
throw new IllegalArgumentException("unknown preference [" + preferenceType + "]");
}
}
if (awarenessAttributes.length == 0) {
return indexShard.activeInitializingShardsIt(Murmur3HashFunction.hash(preference));
}
 else {
return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes,nodes,Murmur3HashFunction.hash(preference));
}
}
