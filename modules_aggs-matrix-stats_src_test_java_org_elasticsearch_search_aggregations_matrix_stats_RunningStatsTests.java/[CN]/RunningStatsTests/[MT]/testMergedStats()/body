{
  int numShards=randomIntBetween(2,10);
  double obsPerShard=Math.floor(numObs / numShards);
  int start=0;
  RunningStats stats=null;
  List<Double> fieldAShard, fieldBShard;
  for (int s=0; s < numShards - 1; start=++s * (int)obsPerShard) {
    fieldAShard=fieldA.subList(start,start + (int)obsPerShard);
    fieldBShard=fieldB.subList(start,start + (int)obsPerShard);
    if (stats == null) {
      stats=createRunningStats(fieldAShard,fieldBShard);
    }
 else {
      stats.merge(createRunningStats(fieldAShard,fieldBShard));
    }
  }
  stats.merge(createRunningStats(fieldA.subList(start,fieldA.size()),fieldB.subList(start,fieldB.size())));
  final MatrixStatsResults results=new MatrixStatsResults(stats);
  actualStats.assertNearlyEqual(results);
}
