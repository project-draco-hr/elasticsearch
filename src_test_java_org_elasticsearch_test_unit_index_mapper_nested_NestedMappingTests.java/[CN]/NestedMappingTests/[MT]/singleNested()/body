{
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("nested1").field("type","nested").endObject().endObject().endObject().endObject().string();
  DocumentMapper docMapper=MapperTestUtils.newParser().parse(mapping);
  assertThat(docMapper.hasNestedObjects(),equalTo(true));
  ObjectMapper nested1Mapper=docMapper.objectMappers().get("nested1");
  assertThat(nested1Mapper.nested().isNested(),equalTo(true));
  ParsedDocument doc=docMapper.parse("type","1",XContentFactory.jsonBuilder().startObject().field("field","value").startObject("nested1").field("field1","1").field("field2","2").endObject().endObject().bytes());
  assertThat(doc.docs().size(),equalTo(2));
  assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME),equalTo(nested1Mapper.nestedTypePathAsString()));
  assertThat(doc.docs().get(0).get("nested1.field1"),equalTo("1"));
  assertThat(doc.docs().get(0).get("nested1.field2"),equalTo("2"));
  assertThat(doc.docs().get(1).get("field"),equalTo("value"));
  doc=docMapper.parse("type","1",XContentFactory.jsonBuilder().startObject().field("field","value").startArray("nested1").startObject().field("field1","1").field("field2","2").endObject().startObject().field("field1","3").field("field2","4").endObject().endArray().endObject().bytes());
  assertThat(doc.docs().size(),equalTo(3));
  assertThat(doc.docs().get(0).get(TypeFieldMapper.NAME),equalTo(nested1Mapper.nestedTypePathAsString()));
  assertThat(doc.docs().get(0).get("nested1.field1"),equalTo("3"));
  assertThat(doc.docs().get(0).get("nested1.field2"),equalTo("4"));
  assertThat(doc.docs().get(1).get(TypeFieldMapper.NAME),equalTo(nested1Mapper.nestedTypePathAsString()));
  assertThat(doc.docs().get(1).get("nested1.field1"),equalTo("1"));
  assertThat(doc.docs().get(1).get("nested1.field2"),equalTo("2"));
  assertThat(doc.docs().get(2).get("field"),equalTo("value"));
}
