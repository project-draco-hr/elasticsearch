{
  final String[] threadPools=req.paramAsStringArray("thread_pool_patterns",new String[]{"*"});
  final DiscoveryNodes nodes=state.getState().nodes();
  final Table table=getTableWithHeader(req);
  final Set<String> candidates=new HashSet<>();
  for (  final NodeStats nodeStats : nodesStats.getNodes()) {
    for (    final ThreadPoolStats.Stats threadPoolStats : nodeStats.getThreadPool()) {
      candidates.add(threadPoolStats.getName());
    }
  }
  final Set<String> included=new HashSet<>();
  for (  final String candidate : candidates) {
    if (Regex.simpleMatch(threadPools,candidate)) {
      included.add(candidate);
    }
  }
  for (  final DiscoveryNode node : nodes) {
    final NodeInfo info=nodesInfo.getNodesMap().get(node.getId());
    final NodeStats stats=nodesStats.getNodesMap().get(node.getId());
    final Map<String,ThreadPoolStats.Stats> poolThreadStats;
    final Map<String,ThreadPool.Info> poolThreadInfo;
    if (stats == null) {
      poolThreadStats=Collections.emptyMap();
      poolThreadInfo=Collections.emptyMap();
    }
 else {
      poolThreadStats=new TreeMap<>();
      poolThreadInfo=new HashMap<>();
      ThreadPoolStats threadPoolStats=stats.getThreadPool();
      for (      ThreadPoolStats.Stats threadPoolStat : threadPoolStats) {
        poolThreadStats.put(threadPoolStat.getName(),threadPoolStat);
      }
      if (info != null) {
        for (        ThreadPool.Info threadPoolInfo : info.getThreadPool()) {
          poolThreadInfo.put(threadPoolInfo.getName(),threadPoolInfo);
        }
      }
    }
    for (    Map.Entry<String,ThreadPoolStats.Stats> entry : poolThreadStats.entrySet()) {
      if (!included.contains(entry.getKey()))       continue;
      table.startRow();
      table.addCell(node.getName());
      table.addCell(node.getId());
      table.addCell(node.getEphemeralId());
      table.addCell(info == null ? null : info.getProcess().getId());
      table.addCell(node.getHostName());
      table.addCell(node.getHostAddress());
      if (node.getAddress() instanceof InetSocketTransportAddress) {
        table.addCell(((InetSocketTransportAddress)node.getAddress()).address().getPort());
      }
 else {
        table.addCell("-");
      }
      final ThreadPoolStats.Stats poolStats=entry.getValue();
      final ThreadPool.Info poolInfo=poolThreadInfo.get(entry.getKey());
      Long maxQueueSize=null;
      String keepAlive=null;
      Integer minThreads=null;
      Integer maxThreads=null;
      if (poolInfo != null) {
        if (poolInfo.getQueueSize() != null) {
          maxQueueSize=poolInfo.getQueueSize().singles();
        }
        if (poolInfo.getKeepAlive() != null) {
          keepAlive=poolInfo.getKeepAlive().toString();
        }
        if (poolInfo.getMin() >= 0) {
          minThreads=poolInfo.getMin();
        }
        if (poolInfo.getMax() >= 0) {
          maxThreads=poolInfo.getMax();
        }
      }
      table.addCell(entry.getKey());
      table.addCell(poolInfo == null ? null : poolInfo.getThreadPoolType().getType());
      table.addCell(poolStats == null ? null : poolStats.getActive());
      table.addCell(poolStats == null ? null : poolStats.getThreads());
      table.addCell(poolStats == null ? null : poolStats.getQueue());
      table.addCell(maxQueueSize);
      table.addCell(poolStats == null ? null : poolStats.getRejected());
      table.addCell(poolStats == null ? null : poolStats.getLargest());
      table.addCell(poolStats == null ? null : poolStats.getCompleted());
      table.addCell(minThreads);
      table.addCell(maxThreads);
      table.addCell(keepAlive);
      table.endRow();
    }
  }
  return table;
}
