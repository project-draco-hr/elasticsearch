{
  SearchRequest searchRequest=new SearchRequest();
  if (percolateRequest.indices() != null) {
    searchRequest.indices(percolateRequest.indices());
  }
  searchRequest.indicesOptions(percolateRequest.indicesOptions());
  searchRequest.routing(percolateRequest.routing());
  searchRequest.preference(percolateRequest.preference());
  BytesReference querySource=null;
  XContentBuilder searchSource=XContentFactory.jsonBuilder().startObject();
  if (percolateRequest.source() != null && percolateRequest.source().length() > 0) {
    try (XContentParser parser=XContentHelper.createParser(percolateRequest.source())){
      String currentFieldName=null;
      XContentParser.Token token=parser.nextToken();
      if (token != XContentParser.Token.START_OBJECT) {
        throw new IllegalArgumentException("Unknown token [" + token + "]");
      }
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          currentFieldName=parser.currentName();
        }
 else         if (token == XContentParser.Token.START_OBJECT) {
          if ("doc".equals(currentFieldName)) {
            XContentBuilder builder=XContentFactory.jsonBuilder();
            builder.copyCurrentStructure(parser);
            builder.flush();
            documentSource=builder.bytes();
          }
 else           if ("query".equals(currentFieldName) || "filter".equals(currentFieldName)) {
            XContentBuilder builder=XContentFactory.jsonBuilder();
            builder.copyCurrentStructure(parser);
            builder.flush();
            querySource=builder.bytes();
          }
 else           if ("sort".equals(currentFieldName)) {
            searchSource.field("sort");
            searchSource.copyCurrentStructure(parser);
          }
 else           if ("aggregations".equals(currentFieldName)) {
            searchSource.field("aggregations");
            searchSource.copyCurrentStructure(parser);
          }
 else           if ("highlight".equals(currentFieldName)) {
            searchSource.field("highlight");
            searchSource.copyCurrentStructure(parser);
          }
 else {
            throw new IllegalArgumentException("Unknown field [" + currentFieldName + "]");
          }
        }
 else         if (token == XContentParser.Token.START_ARRAY) {
          if ("sort".equals(currentFieldName)) {
            searchSource.field("sort");
            searchSource.copyCurrentStructure(parser);
          }
 else {
            throw new IllegalArgumentException("Unknown field [" + currentFieldName + "]");
          }
        }
 else         if (token.isValue()) {
          if ("size".equals(currentFieldName)) {
            searchSource.field("size",parser.intValue());
          }
 else           if ("sort".equals(currentFieldName)) {
            searchSource.field("sort",parser.text());
          }
 else           if ("track_scores".equals(currentFieldName) || "trackScores".equals(currentFieldName)) {
            searchSource.field("track_scores",parser.booleanValue());
          }
 else {
            throw new IllegalArgumentException("Unknown field [" + currentFieldName + "]");
          }
        }
 else {
          throw new IllegalArgumentException("Unknown token [" + token + "]");
        }
      }
    }
   }
  if (percolateRequest.onlyCount()) {
    searchSource.field("size",0);
  }
  PercolatorQueryBuilder percolatorQueryBuilder=new PercolatorQueryBuilder(percolateRequest.documentType(),documentSource);
  if (querySource != null) {
    QueryParseContext queryParseContext=new QueryParseContext(queryRegistry);
    queryParseContext.reset(XContentHelper.createParser(querySource));
    queryParseContext.parseFieldMatcher(parseFieldMatcher);
    QueryBuilder<?> queryBuilder=queryParseContext.parseInnerQueryBuilder();
    BoolQueryBuilder boolQueryBuilder=QueryBuilders.boolQuery();
    boolQueryBuilder.must(queryBuilder);
    boolQueryBuilder.filter(percolatorQueryBuilder);
    searchSource.field("query",boolQueryBuilder);
  }
 else {
    searchSource.field("query",new ConstantScoreQueryBuilder(percolatorQueryBuilder).boost(0f));
  }
  searchSource.endObject();
  searchSource.flush();
  BytesReference source=searchSource.bytes();
  SearchSourceBuilder searchSourceBuilder=new SearchSourceBuilder();
  QueryParseContext context=new QueryParseContext(queryRegistry);
  try (XContentParser parser=XContentFactory.xContent(XContentType.JSON).createParser(source)){
    context.reset(parser);
    context.parseFieldMatcher(parseFieldMatcher);
    searchSourceBuilder.parseXContent(context,aggParsers,null);
    searchRequest.source(searchSourceBuilder);
    return searchRequest;
  }
 }
