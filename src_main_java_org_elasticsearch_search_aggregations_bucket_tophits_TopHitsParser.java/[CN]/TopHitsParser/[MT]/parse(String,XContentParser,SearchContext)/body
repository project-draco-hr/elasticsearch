{
  TopHitsContext topHitsContext=new TopHitsContext(context);
  XContentParser.Token token;
  String currentFieldName=null;
  try {
    while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
      if (token == XContentParser.Token.FIELD_NAME) {
        currentFieldName=parser.currentName();
      }
 else       if (token.isValue()) {
switch (currentFieldName) {
case "size":
          topHitsContext.size(parser.intValue());
        break;
case "sort":
      sortParseElement.parse(parser,topHitsContext);
    break;
case "track_scores":
case "trackScores":
  topHitsContext.trackScores(parser.booleanValue());
break;
case "version":
topHitsContext.version(parser.booleanValue());
break;
case "explain":
topHitsContext.explain(parser.booleanValue());
break;
default :
throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
}
}
 else if (token == XContentParser.Token.START_OBJECT) {
switch (currentFieldName) {
case "sort":
sortParseElement.parse(parser,topHitsContext);
break;
case "_source":
sourceParseElement.parse(parser,topHitsContext);
break;
case "highlight":
highlighterParseElement.parse(parser,topHitsContext);
break;
case "scriptFields":
case "script_fields":
scriptFieldsParseElement.parse(parser,topHitsContext);
break;
default :
throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
}
}
 else if (token == XContentParser.Token.START_ARRAY) {
switch (currentFieldName) {
case "sort":
sortParseElement.parse(parser,topHitsContext);
break;
case "fielddataFields":
case "fielddata_fields":
fieldDataFieldsParseElement.parse(parser,topHitsContext);
break;
default :
throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
}
}
 else {
throw new SearchParseException(context,"Unexpected token " + token + " in ["+ aggregationName+ "].");
}
}
}
 catch (Exception e) {
throw ExceptionsHelper.convertToElastic(e);
}
return new TopHitsAggregator.Factory(aggregationName,fetchPhase,topHitsContext);
}
