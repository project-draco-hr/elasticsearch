{
  if (msg.getSrc().equals(channel.getAddress())) {
    return;
  }
  if (msg.getSrc().equals(channel.getView().getCreator())) {
    try {
      byte[] buffer=msg.getBuffer();
      final ClusterState clusterState=ClusterState.Builder.fromBytes(buffer,settings,localNode);
      if (clusterState.nodes().localNode() != null) {
        clusterService.submitStateUpdateTask("jgroups-disco-receive(from master)",new ProcessedClusterStateUpdateTask(){
          @Override public ClusterState execute(          ClusterState currentState){
            return clusterState;
          }
          @Override public void clusterStateProcessed(          ClusterState clusterState){
            sendInitialStateEventIfNeeded();
          }
        }
);
      }
    }
 catch (    Exception e) {
      logger.error("Received corrupted cluster state.",e);
    }
    return;
  }
  if (isMaster()) {
    try {
      BytesStreamInput is=new BytesStreamInput(msg.getBuffer());
      final DiscoveryNode newNode=DiscoveryNode.readNode(is);
      is.close();
      if (logger.isDebugEnabled()) {
        logger.debug("Received node information from [{}], node [{}]",msg.getSrc(),newNode);
      }
      if (!transportService.addressSupported(newNode.address().getClass())) {
        logger.warn("Received a wrong address type from [" + msg.getSrc() + "], ignoring... (received_address["+ newNode.address()+ ")");
      }
 else {
        clusterService.submitStateUpdateTask("jgroups-disco-receive(from node[" + newNode + "])",new ClusterStateUpdateTask(){
          @Override public ClusterState execute(          ClusterState currentState){
            if (currentState.nodes().nodeExists(newNode.id())) {
              logger.warn("Received an address [{}] for an existing node [{}]",newNode.address(),newNode);
              return currentState;
            }
            return newClusterStateBuilder().state(currentState).nodes(currentState.nodes().newNode(newNode)).build();
          }
        }
);
      }
    }
 catch (    Exception e) {
      logger.warn("Can't read address from cluster member [" + msg.getSrc() + "] message ["+ msg.getClass().getName()+ "/"+ msg+ "]",e);
    }
    return;
  }
  logger.error("A message between two members that neither of them is the master is not allowed.");
}
