{
  assertAcked(prepareCreate("test").addMapping("type1",jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("nested1").field("type","nested").endObject().endObject().endObject().endObject()));
  ensureGreen();
  client().prepareIndex("test","type1","1").setSource(jsonBuilder().startObject().field("field1","value1").startArray("nested1").startObject().field("n_field1","n_value1").endObject().startObject().field("n_field1","n_value1").endObject().endArray().endObject()).setRefresh(true).execute().actionGet();
  SearchResponse searchResponse=client().prepareSearch("test").setQuery(nestedQuery("nested1",termQuery("nested1.n_field1","n_value1")).scoreMode("total")).setExplain(true).execute().actionGet();
  assertNoFailures(searchResponse);
  assertThat(searchResponse.getHits().totalHits(),equalTo(1l));
  Explanation explanation=searchResponse.getHits().hits()[0].explanation();
  assertThat(explanation.getValue(),equalTo(2f));
  assertThat(explanation.toString(),equalTo("2.0 = (MATCH) sum of:\n  2.0 = (MATCH) Score based on child doc range from 0 to 1\n  0.0 = match on required clause, product of:\n    0.0 = # clause\n    0.0 = (MATCH) Match on id 2\n"));
}
