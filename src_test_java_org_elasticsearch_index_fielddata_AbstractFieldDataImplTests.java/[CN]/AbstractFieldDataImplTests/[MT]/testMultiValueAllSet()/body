{
  fillMultiValueAllSet();
  IndexFieldData indexFieldData=getForField("value");
  AtomicFieldData fieldData=indexFieldData.load(refreshReader());
  assertThat(fieldData.getMemorySizeInBytes(),greaterThan(0l));
  BytesValues bytesValues=fieldData.getBytesValues();
  assertThat(bytesValues.isMultiValued(),equalTo(true));
  assertValues(bytesValues,0,two(),four());
  assertValues(bytesValues,1,one());
  assertValues(bytesValues,2,three());
  BytesValues hashedBytesValues=fieldData.getBytesValues();
  assertThat(convert(hashedBytesValues,0),equalTo(new HashedBytesRef(two())));
  assertThat(convert(hashedBytesValues,1),equalTo(new HashedBytesRef(one())));
  assertThat(convert(hashedBytesValues,2),equalTo(new HashedBytesRef(three())));
  assertHashedValues(hashedBytesValues,0,two(),four());
  IndexSearcher searcher=new IndexSearcher(DirectoryReader.open(writer,true));
  TopFieldDocs topDocs=searcher.search(new MatchAllDocsQuery(),10,new Sort(new SortField("value",indexFieldData.comparatorSource(null,MultiValueMode.MIN))));
  assertThat(topDocs.totalHits,equalTo(3));
  assertThat(topDocs.scoreDocs.length,equalTo(3));
  assertThat(topDocs.scoreDocs[0].doc,equalTo(1));
  assertThat(topDocs.scoreDocs[1].doc,equalTo(0));
  assertThat(topDocs.scoreDocs[2].doc,equalTo(2));
  topDocs=searcher.search(new MatchAllDocsQuery(),10,new Sort(new SortField("value",indexFieldData.comparatorSource(null,MultiValueMode.MAX),true)));
  assertThat(topDocs.totalHits,equalTo(3));
  assertThat(topDocs.scoreDocs.length,equalTo(3));
  assertThat(topDocs.scoreDocs[0].doc,equalTo(0));
  assertThat(topDocs.scoreDocs[1].doc,equalTo(2));
  assertThat(topDocs.scoreDocs[2].doc,equalTo(1));
}
