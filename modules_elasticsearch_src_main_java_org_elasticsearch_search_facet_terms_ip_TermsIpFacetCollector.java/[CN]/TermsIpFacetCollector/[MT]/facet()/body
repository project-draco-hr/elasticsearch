{
  TLongIntHashMap facets=aggregator.facets();
  if (facets.isEmpty()) {
    pushFacets(facets);
    return new InternalIpTermsFacet(facetName,comparatorType,size,ImmutableList.<InternalIpTermsFacet.LongEntry>of(),aggregator.missing());
  }
 else {
    BoundedTreeSet<InternalIpTermsFacet.LongEntry> ordered=new BoundedTreeSet<InternalIpTermsFacet.LongEntry>(comparatorType.comparator(),size * numberOfShards);
    for (TLongIntIterator it=facets.iterator(); it.hasNext(); ) {
      it.advance();
      ordered.add(new InternalIpTermsFacet.LongEntry(it.key(),it.value()));
    }
    pushFacets(facets);
    return new InternalIpTermsFacet(facetName,comparatorType,size,ordered,aggregator.missing());
  }
}
