{
  super(settings,threadPool,clusterService);
  String bucket=componentSettings.get("bucket");
  if (bucket == null) {
    throw new ElasticsearchIllegalArgumentException("No bucket defined for s3 gateway");
  }
  String region=componentSettings.get("region");
  if (region == null) {
    if (settings.get("cloud.aws.region") != null) {
      String regionSetting=settings.get("cloud.aws.region");
      if ("us-east".equals(regionSetting.toLowerCase())) {
        region=null;
      }
 else       if ("us-east-1".equals(regionSetting.toLowerCase())) {
        region=null;
      }
 else       if ("us-west".equals(regionSetting.toLowerCase())) {
        region="us-west-1";
      }
 else       if ("us-west-1".equals(regionSetting.toLowerCase())) {
        region="us-west-1";
      }
 else       if ("us-west-2".equals(regionSetting.toLowerCase())) {
        region="us-west-2";
      }
 else       if ("ap-southeast".equals(regionSetting.toLowerCase())) {
        region="ap-southeast-1";
      }
 else       if ("ap-southeast-1".equals(regionSetting.toLowerCase())) {
        region="ap-southeast-1";
      }
 else       if ("ap-southeast-2".equals(regionSetting.toLowerCase())) {
        region="ap-southeast-2";
      }
 else       if ("eu-west".equals(regionSetting.toLowerCase())) {
        region="EU";
      }
 else       if ("eu-west-1".equals(regionSetting.toLowerCase())) {
        region="EU";
      }
 else       if ("sa-east".equals(regionSetting.toLowerCase())) {
        region="sa-east-1";
      }
 else       if ("sa-east-1".equals(regionSetting.toLowerCase())) {
        region="sa-east-1";
      }
    }
  }
  ByteSizeValue chunkSize=componentSettings.getAsBytesSize("chunk_size",new ByteSizeValue(100,ByteSizeUnit.MB));
  int concurrentStreams=componentSettings.getAsInt("concurrent_streams",5);
  this.concurrentStreamPool=EsExecutors.newScaling(1,concurrentStreams,5,TimeUnit.SECONDS,EsExecutors.daemonThreadFactory(settings,"[s3_stream]"));
  logger.debug("using bucket [{}], region [{}], chunk_size [{}], concurrent_streams [{}]",bucket,region,chunkSize,concurrentStreams);
  initialize(new S3BlobStore(settings,s3Service.client(),bucket,region,concurrentStreamPool),clusterName,chunkSize);
}
