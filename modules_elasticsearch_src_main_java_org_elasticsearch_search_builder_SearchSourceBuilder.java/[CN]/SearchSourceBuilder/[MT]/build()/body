{
  try {
    JsonBuilder builder=binaryJsonBuilder();
    builder.startObject();
    if (from != -1) {
      builder.field("from",from);
    }
    if (size != -1) {
      builder.field("size",size);
    }
    if (queryParserName != null) {
      builder.field("queryParserName",queryParserName);
    }
    builder.field("query");
    queryBuilder.toJson(builder,ToJson.EMPTY_PARAMS);
    if (explain != null) {
      builder.field("explain",explain);
    }
    if (fieldNames != null) {
      if (fieldNames.size() == 1) {
        builder.field("fields",fieldNames.get(0));
      }
 else {
        builder.startArray("fields");
        for (        String fieldName : fieldNames) {
          builder.string(fieldName);
        }
        builder.endArray();
      }
    }
    if (sortFields != null) {
      builder.field("sort");
      builder.startObject();
      for (      SortTuple sortTuple : sortFields) {
        builder.field(sortTuple.fieldName());
        builder.startObject();
        if (sortTuple.reverse) {
          builder.field("reverse",true);
        }
        if (sortTuple.type != null) {
          builder.field("type",sortTuple.type());
        }
        builder.endObject();
      }
      builder.endObject();
    }
    if (indexBoost != null) {
      builder.startObject("indicesBoost");
      for (TObjectFloatIterator<String> it=indexBoost.iterator(); it.hasNext(); ) {
        it.advance();
        builder.field(it.key(),it.value());
      }
      builder.endObject();
    }
    if (facetsBuilder != null) {
      facetsBuilder.toJson(builder,ToJson.EMPTY_PARAMS);
    }
    builder.endObject();
    return builder.copiedBytes();
  }
 catch (  Exception e) {
    throw new SearchSourceBuilderException("Failed to build search source",e);
  }
}
