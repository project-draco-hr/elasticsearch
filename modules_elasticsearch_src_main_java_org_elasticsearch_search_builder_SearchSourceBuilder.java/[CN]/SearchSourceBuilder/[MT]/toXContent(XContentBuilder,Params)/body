{
  builder.startObject();
  if (from != -1) {
    builder.field("from",from);
  }
  if (size != -1) {
    builder.field("size",size);
  }
  if (queryParserName != null) {
    builder.field("query_parser_name",queryParserName);
  }
  if (queryBuilder != null) {
    builder.field("query");
    queryBuilder.toXContent(builder,params);
  }
  if (explain != null) {
    builder.field("explain",explain);
  }
  if (fieldNames != null) {
    if (fieldNames.size() == 1) {
      builder.field("fields",fieldNames.get(0));
    }
 else {
      builder.startArray("fields");
      for (      String fieldName : fieldNames) {
        builder.value(fieldName);
      }
      builder.endArray();
    }
  }
  if (sortFields != null) {
    builder.field("sort");
    builder.startObject();
    for (    SortTuple sortTuple : sortFields) {
      builder.field(sortTuple.fieldName());
      builder.startObject();
      if (sortTuple.reverse) {
        builder.field("reverse",true);
      }
      if (sortTuple.type != null) {
        builder.field("type",sortTuple.type());
      }
      builder.endObject();
    }
    builder.endObject();
  }
  if (indexBoost != null) {
    builder.startObject("indices_boost");
    for (TObjectFloatIterator<String> it=indexBoost.iterator(); it.hasNext(); ) {
      it.advance();
      builder.field(it.key(),it.value());
    }
    builder.endObject();
  }
  if (facetsBuilder != null) {
    facetsBuilder.toXContent(builder,params);
  }
  if (highlightBuilder != null) {
    highlightBuilder.toXContent(builder,params);
  }
  builder.endObject();
}
