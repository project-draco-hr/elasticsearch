{
  builder.startObject();
  if (from != -1) {
    builder.field("from",from);
  }
  if (size != -1) {
    builder.field("size",size);
  }
  if (queryParserName != null) {
    builder.field("query_parser_name",queryParserName);
  }
  if (queryBuilder != null) {
    builder.field("query");
    queryBuilder.toXContent(builder,params);
  }
  if (queryBinary != null) {
    if (XContentFactory.xContentType(queryBinary) == builder.contentType()) {
      builder.rawField("query",queryBinary);
    }
 else {
      builder.field("query_binary",queryBinary);
    }
  }
  if (filterBuilder != null) {
    builder.field("filter");
    filterBuilder.toXContent(builder,params);
  }
  if (filterBinary != null) {
    if (XContentFactory.xContentType(queryBinary) == builder.contentType()) {
      builder.rawField("filter",filterBinary);
    }
 else {
      builder.field("filter_binary",queryBinary);
    }
  }
  if (explain != null) {
    builder.field("explain",explain);
  }
  if (fieldNames != null) {
    if (fieldNames.size() == 1) {
      builder.field("fields",fieldNames.get(0));
    }
 else {
      builder.startArray("fields");
      for (      String fieldName : fieldNames) {
        builder.value(fieldName);
      }
      builder.endArray();
    }
  }
  if (scriptFields != null) {
    builder.startObject("script_fields");
    for (    ScriptField scriptField : scriptFields) {
      builder.startObject(scriptField.fieldName());
      builder.field("script",scriptField.script());
      if (scriptField.lang() != null) {
        builder.field("lang",scriptField.lang());
      }
      if (scriptField.params() != null) {
        builder.field("params");
        builder.map(scriptField.params());
      }
      builder.endObject();
    }
    builder.endObject();
  }
  if (sorts != null) {
    builder.startArray("sort");
    for (    SortBuilder sort : sorts) {
      builder.startObject();
      sort.toXContent(builder,params);
      builder.endObject();
    }
    builder.endArray();
    if (trackScores) {
      builder.field("track_scores",trackScores);
    }
  }
  if (indexBoost != null) {
    builder.startObject("indices_boost");
    for (TObjectFloatIterator<String> it=indexBoost.iterator(); it.hasNext(); ) {
      it.advance();
      builder.field(it.key(),it.value());
    }
    builder.endObject();
  }
  if (facets != null) {
    builder.field("facets");
    builder.startObject();
    for (    AbstractFacetBuilder facet : facets) {
      facet.toXContent(builder,params);
    }
    builder.endObject();
  }
  if (facetsBinary != null) {
    if (XContentFactory.xContentType(facetsBinary) == builder.contentType()) {
      builder.rawField("facets",facetsBinary);
    }
 else {
      builder.field("facets_binary",facetsBinary);
    }
  }
  if (highlightBuilder != null) {
    highlightBuilder.toXContent(builder,params);
  }
  builder.endObject();
  return builder;
}
