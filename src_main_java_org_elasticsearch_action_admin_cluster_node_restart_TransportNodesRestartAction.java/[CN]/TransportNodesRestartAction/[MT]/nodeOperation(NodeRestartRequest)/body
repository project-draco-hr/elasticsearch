{
  if (disabled) {
    throw new ElasticSearchIllegalStateException("Restart is disabled");
  }
  if (!restartRequested.compareAndSet(false,true)) {
    return new NodesRestartResponse.NodeRestartResponse(clusterService.localNode());
  }
  logger.info("Restarting in [{}]",request.delay);
  threadPool.schedule(request.delay,ThreadPool.Names.GENERIC,new Runnable(){
    @Override public void run(){
      boolean restartWithWrapper=false;
      if (System.getProperty("elasticsearch-service") != null) {
        try {
          Class wrapperManager=settings.getClassLoader().loadClass("org.tanukisoftware.wrapper.WrapperManager");
          logger.info("Initiating requested restart (using service)");
          wrapperManager.getMethod("restartAndReturn").invoke(null);
          restartWithWrapper=true;
        }
 catch (        Throwable e) {
          logger.error("failed to initial restart on service wrapper",e);
        }
      }
      if (!restartWithWrapper) {
        logger.info("Initiating requested restart");
        try {
          node.stop();
          node.start();
        }
 catch (        Exception e) {
          logger.warn("Failed to restart",e);
        }
 finally {
          restartRequested.set(false);
        }
      }
    }
  }
);
  return new NodesRestartResponse.NodeRestartResponse(clusterService.localNode());
}
