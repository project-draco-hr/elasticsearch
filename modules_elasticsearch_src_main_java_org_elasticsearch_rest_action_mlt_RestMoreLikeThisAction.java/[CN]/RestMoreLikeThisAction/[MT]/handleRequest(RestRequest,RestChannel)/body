{
  MoreLikeThisRequest mltRequest=moreLikeThisRequest(request.param("index")).type(request.param("type")).id(request.param("id"));
  try {
    mltRequest.fields(request.paramAsStringArray("fields",null));
    mltRequest.percentTermsToMatch(request.paramAsFloat("percentTermsToMatch",-1));
    mltRequest.minTermFrequency(request.paramAsInt("minTermFrequency",-1));
    mltRequest.maxQueryTerms(request.paramAsInt("maxQueryTerms",-1));
    mltRequest.stopWords(request.paramAsStringArray("stopWords",null));
    mltRequest.minDocFreq(request.paramAsInt("minDocFreq",-1));
    mltRequest.maxDocFreq(request.paramAsInt("maxDocFreq",-1));
    mltRequest.minWordLen(request.paramAsInt("minWordLen",-1));
    mltRequest.maxWordLen(request.paramAsInt("maxWordLen",-1));
    mltRequest.boostTerms(request.paramAsBoolean("boostTerms",null));
    mltRequest.boostTermsFactor(request.paramAsFloat("boostTermsFactor",-1));
    mltRequest.searchType(parseSearchType(request.param("searchType")));
    mltRequest.searchIndices(request.paramAsStringArray("searchIndices",null));
    mltRequest.searchTypes(request.paramAsStringArray("searchTypes",null));
    mltRequest.searchQueryHint(request.param("searchQueryHint"));
    String searchScroll=request.param("searchScroll");
    if (searchScroll != null) {
      mltRequest.searchScroll(new Scroll(parseTimeValue(searchScroll,null)));
    }
    if (request.hasContent()) {
      mltRequest.searchSource(request.contentAsBytes());
    }
  }
 catch (  Exception e) {
    try {
      JsonBuilder builder=restJsonBuilder(request);
      channel.sendResponse(new JsonRestResponse(request,BAD_REQUEST,builder.startObject().field("error",e.getMessage()).endObject()));
    }
 catch (    IOException e1) {
      logger.error("Failed to send failure response",e1);
    }
    return;
  }
  client.moreLikeThis(mltRequest,new ActionListener<SearchResponse>(){
    @Override public void onResponse(    SearchResponse response){
      try {
        JsonBuilder builder=restJsonBuilder(request);
        builder.startObject();
        response.toJson(builder,request);
        builder.endObject();
        channel.sendResponse(new JsonRestResponse(request,OK,builder));
      }
 catch (      Exception e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new JsonThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
