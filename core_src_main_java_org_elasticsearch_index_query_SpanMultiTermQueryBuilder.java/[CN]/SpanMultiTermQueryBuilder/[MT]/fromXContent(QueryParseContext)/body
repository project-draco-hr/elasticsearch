{
  XContentParser parser=parseContext.parser();
  String currentFieldName=null;
  MultiTermQueryBuilder subQuery=null;
  String queryName=null;
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if (parseContext.parseFieldMatcher().match(currentFieldName,MATCH_FIELD)) {
        QueryBuilder innerQuery=parseContext.parseInnerQueryBuilder();
        if (innerQuery instanceof MultiTermQueryBuilder == false) {
          throw new ParsingException(parser.getTokenLocation(),"[span_multi] [" + MATCH_FIELD.getPreferredName() + "] must be of type multi term query");
        }
        subQuery=(MultiTermQueryBuilder)innerQuery;
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"[span_multi] query does not support [" + currentFieldName + "]");
      }
    }
 else     if (token.isValue()) {
      if (parseContext.parseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.NAME_FIELD)) {
        queryName=parser.text();
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.BOOST_FIELD)) {
        boost=parser.floatValue();
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"[span_multi] query does not support [" + currentFieldName + "]");
      }
    }
  }
  if (subQuery == null) {
    throw new ParsingException(parser.getTokenLocation(),"[span_multi] must have [" + MATCH_FIELD.getPreferredName() + "] multi term query clause");
  }
  return new SpanMultiTermQueryBuilder(subQuery).queryName(queryName).boost(boost);
}
