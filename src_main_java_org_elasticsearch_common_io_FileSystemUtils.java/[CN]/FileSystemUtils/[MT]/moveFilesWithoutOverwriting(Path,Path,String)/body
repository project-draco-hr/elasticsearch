{
  Files.createDirectories(destination);
  final int configPathRootLevel=source.getNameCount();
  Files.walkFileTree(source,new SimpleFileVisitor<Path>(){
    private Path buildPath(    Path path){
      return destination.resolve(path);
    }
    @Override public FileVisitResult preVisitDirectory(    Path dir,    BasicFileAttributes attrs) throws IOException {
      if (configPathRootLevel != dir.getNameCount()) {
        Path subpath=dir.subpath(configPathRootLevel,dir.getNameCount());
        Path path=buildPath(subpath);
        if (!Files.exists(path)) {
          move(dir,path);
          return FileVisitResult.SKIP_SUBTREE;
        }
      }
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {
      Path subpath=null;
      if (configPathRootLevel != file.getNameCount()) {
        subpath=file.subpath(configPathRootLevel,file.getNameCount());
      }
      Path path=buildPath(subpath);
      if (!Files.exists(path)) {
        move(file,path);
      }
 else       if (suffix != null) {
        if (!isSameFile(file,path)) {
          path=Paths.get(path.toString().concat(suffix));
          Files.move(file,path,StandardCopyOption.REPLACE_EXISTING);
        }
      }
      return FileVisitResult.CONTINUE;
    }
    /** 
 * Compares the content of two paths by comparing their SHA-SUM
 */
    private boolean isSameFile(    Path first,    Path second) throws IOException {
      boolean sameFileSize=Files.size(first) == Files.size(second);
      if (!sameFileSize) {
        return false;
      }
      try {
        MessageDigest messageDigest=MessageDigest.getInstance("SHA-256");
        messageDigest.update(Files.readAllBytes(first));
        byte[] pathSha=messageDigest.digest();
        messageDigest.reset();
        messageDigest.update(Files.readAllBytes(second));
        byte[] fileSha=messageDigest.digest();
        return Arrays.equals(pathSha,fileSha);
      }
 catch (      NoSuchAlgorithmException e) {
        return false;
      }
    }
  }
);
}
