{
  FileSystemUtils.mkdirs(destination);
  final int configPathRootLevel=source.toPath().getNameCount();
  Files.walkFileTree(source.toPath(),new SimpleFileVisitor<Path>(){
    private Path buildPath(    Path path){
      return destination.toPath().resolve(path);
    }
    @Override public FileVisitResult preVisitDirectory(    Path dir,    BasicFileAttributes attrs) throws IOException {
      if (configPathRootLevel != dir.getNameCount()) {
        Path subpath=dir.subpath(configPathRootLevel,dir.getNameCount());
        Path path=buildPath(subpath);
        if (!Files.exists(path)) {
          if (!dir.toFile().renameTo(path.toFile())) {
            throw new IOException("Could not move [" + dir + "] to ["+ path+ "]");
          }
          return FileVisitResult.SKIP_SUBTREE;
        }
      }
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {
      Path subpath=null;
      if (configPathRootLevel != file.getNameCount()) {
        subpath=file.subpath(configPathRootLevel,file.getNameCount());
      }
      Path path=buildPath(subpath);
      if (!Files.exists(path)) {
        Files.move(file,path);
      }
 else       if (suffix != null) {
        path=Paths.get(path.toString().concat(suffix));
        Files.move(file,path,StandardCopyOption.REPLACE_EXISTING);
      }
      return FileVisitResult.CONTINUE;
    }
  }
);
}
