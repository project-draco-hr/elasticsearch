{
  OptimizeRequest optimizeRequest=new OptimizeRequest(HttpActions.splitIndices(request.param("index")));
  try {
    optimizeRequest.waitForMerge(HttpActions.paramAsBoolean(request.param("waitForMerge"),true));
    optimizeRequest.maxNumSegments(HttpActions.paramAsInt(request.param("maxNumSegments"),-1));
    optimizeRequest.onlyExpungeDeletes(HttpActions.paramAsBoolean(request.param("onlyExpungeDeletes"),false));
    optimizeRequest.flush(HttpActions.paramAsBoolean(request.param("flush"),false));
    optimizeRequest.refresh(HttpActions.paramAsBoolean(request.param("refresh"),false));
    optimizeRequest.listenerThreaded(false);
    BroadcastOperationThreading operationThreading=BroadcastOperationThreading.fromString(request.param("operationThreading"),BroadcastOperationThreading.SINGLE_THREAD);
    if (operationThreading == BroadcastOperationThreading.NO_THREADS) {
      operationThreading=BroadcastOperationThreading.THREAD_PER_SHARD;
    }
    optimizeRequest.operationThreading(operationThreading);
  }
 catch (  Exception e) {
    try {
      channel.sendResponse(new JsonHttpResponse(request,BAD_REQUEST,JsonBuilder.jsonBuilder().startObject().field("error",e.getMessage()).endObject()));
    }
 catch (    IOException e1) {
      logger.error("Failed to send failure response",e1);
    }
    return;
  }
  client.admin().indices().execOptimize(optimizeRequest,new ActionListener<OptimizeResponse>(){
    @Override public void onResponse(    OptimizeResponse response){
      try {
        JsonBuilder builder=HttpJsonBuilder.cached(request);
        builder.startObject();
        builder.field("ok",true);
        builder.startObject("_shards");
        builder.field("total",response.totalShards());
        builder.field("successful",response.successfulShards());
        builder.field("failed",response.failedShards());
        builder.endObject();
        builder.endObject();
        channel.sendResponse(new JsonHttpResponse(request,OK,builder));
      }
 catch (      Exception e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new JsonThrowableHttpResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
