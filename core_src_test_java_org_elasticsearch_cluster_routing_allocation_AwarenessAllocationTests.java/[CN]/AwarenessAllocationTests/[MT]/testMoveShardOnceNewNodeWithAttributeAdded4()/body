{
  AllocationService strategy=createAllocationService(settingsBuilder().put("cluster.routing.allocation.node_concurrent_recoveries",10).put("cluster.routing.allocation.node_initial_primaries_recoveries",10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE,"always").put("cluster.routing.allocation.cluster_concurrent_rebalance",-1).put("cluster.routing.allocation.awareness.attributes","rack_id").build());
  logger.info("Building initial routing table for 'moveShardOnceNewNodeWithAttributeAdded4'");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test1").settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(1)).put(IndexMetaData.builder("test2").settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(1)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test1")).addAsNew(metaData.index("test2")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build();
  logger.info("--> adding two nodes on same rack and do rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1",singletonMap("rack_id","1"))).put(newNode("node2",singletonMap("rack_id","1")))).build();
  routingTable=strategy.reroute(clusterState,"reroute").routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(),equalTo(10));
  logger.info("--> start the shards (primaries)");
  routingTable=strategy.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  logger.info("--> start the shards (replicas)");
  routingTable=strategy.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(),equalTo(20));
  logger.info("--> add a new node with a new rack and reroute");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).put(newNode("node3",singletonMap("rack_id","2")))).build();
  routingTable=strategy.reroute(clusterState,"reroute").routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(),equalTo(10));
  assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.RELOCATING).size(),equalTo(10));
  assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(),equalTo(10));
  assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.RELOCATING).get(0).relocatingNodeId(),equalTo("node3"));
  logger.info("--> complete initializing");
  for (int i=0; i < 2; i++) {
    logger.info("--> complete initializing round: [{}]",i);
    routingTable=strategy.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable();
    clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  }
  routingTable=strategy.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(),equalTo(20));
  assertThat(clusterState.getRoutingNodes().node("node3").size(),equalTo(10));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(5));
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(5));
  logger.info("--> do another reroute, make sure nothing moves");
  assertThat(strategy.reroute(clusterState,"reroute").routingTable(),sameInstance(clusterState.routingTable()));
  logger.info("--> add another node with a new rack, some more relocation should happen");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).put(newNode("node4",singletonMap("rack_id","3")))).build();
  routingTable=strategy.reroute(clusterState,"reroute").routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(),greaterThan(0));
  logger.info("--> complete relocation");
  for (int i=0; i < 2; i++) {
    logger.info("--> complete initializing round: [{}]",i);
    routingTable=strategy.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable();
    clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  }
  assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(),equalTo(20));
  assertThat(clusterState.getRoutingNodes().node("node3").size(),equalTo(5));
  assertThat(clusterState.getRoutingNodes().node("node4").size(),equalTo(5));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(5));
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(5));
  logger.info("--> do another reroute, make sure nothing moves");
  assertThat(strategy.reroute(clusterState,"reroute").routingTable(),sameInstance(clusterState.routingTable()));
}
