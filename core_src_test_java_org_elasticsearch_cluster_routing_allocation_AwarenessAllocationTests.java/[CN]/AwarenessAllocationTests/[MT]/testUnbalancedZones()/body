{
  AllocationService strategy=createAllocationService(Settings.builder().put("cluster.routing.allocation.awareness.force.zone.values","a,b").put("cluster.routing.allocation.awareness.attributes","zone").put("cluster.routing.allocation.node_concurrent_recoveries",10).put("cluster.routing.allocation.node_initial_primaries_recoveries",10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),"always").put("cluster.routing.allocation.cluster_concurrent_rebalance",-1).build());
  logger.info("Building initial routing table for 'testUnbalancedZones'");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(1)).build();
  RoutingTable initialRoutingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();
  logger.info("--> adding two nodes in different zones and do rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("A-0",singletonMap("zone","a"))).add(newNode("B-0",singletonMap("zone","b")))).build();
  RoutingAllocation.Result routingResult=strategy.reroute(clusterState,"reroute");
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(),equalTo(0));
  assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(),equalTo(5));
  logger.info("--> start the shards (primaries)");
  routingResult=strategy.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING));
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(),equalTo(5));
  assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(),equalTo(5));
  routingResult=strategy.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING));
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  logger.info("--> all replicas are allocated and started since we have on node in each zone");
  assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(),equalTo(10));
  assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(),equalTo(0));
  logger.info("--> add a new node in zone 'a' and reroute");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode("A-1",singletonMap("zone","a")))).build();
  routingResult=strategy.reroute(clusterState,"reroute");
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(),equalTo(8));
  assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(),equalTo(2));
  assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).currentNodeId(),equalTo("A-1"));
  logger.info("--> starting initializing shards on the new node");
  routingResult=strategy.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING));
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  assertThat(clusterState.getRoutingNodes().shardsWithState(ShardRoutingState.STARTED).size(),equalTo(10));
  assertThat(clusterState.getRoutingNodes().node("A-1").size(),equalTo(2));
  assertThat(clusterState.getRoutingNodes().node("A-0").size(),equalTo(3));
  assertThat(clusterState.getRoutingNodes().node("B-0").size(),equalTo(5));
}
