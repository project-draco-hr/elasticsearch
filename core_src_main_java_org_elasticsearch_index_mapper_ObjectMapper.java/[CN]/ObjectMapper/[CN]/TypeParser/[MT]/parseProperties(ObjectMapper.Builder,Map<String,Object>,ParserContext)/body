{
  Iterator<Map.Entry<String,Object>> iterator=propsNode.entrySet().iterator();
  while (iterator.hasNext()) {
    Map.Entry<String,Object> entry=iterator.next();
    String fieldName=entry.getKey();
    boolean isEmptyList=entry.getValue() instanceof List && ((List<?>)entry.getValue()).isEmpty();
    if (entry.getValue() instanceof Map) {
      @SuppressWarnings("unchecked") Map<String,Object> propNode=(Map<String,Object>)entry.getValue();
      String type;
      Object typeNode=propNode.get("type");
      if (typeNode != null) {
        type=typeNode.toString();
      }
 else {
        if (propNode.get("properties") != null) {
          type=ObjectMapper.CONTENT_TYPE;
        }
 else         if (propNode.size() == 1 && propNode.get("enabled") != null) {
          type=ObjectMapper.CONTENT_TYPE;
        }
 else {
          throw new MapperParsingException("No type specified for field [" + fieldName + "]");
        }
      }
      Mapper.TypeParser typeParser=parserContext.typeParser(type);
      if (typeParser == null) {
        throw new MapperParsingException("No handler for type [" + type + "] declared on field ["+ fieldName+ "]");
      }
      String[] fieldNameParts=fieldName.split("\\.");
      String realFieldName=fieldNameParts[fieldNameParts.length - 1];
      Mapper.Builder<?,?> fieldBuilder=typeParser.parse(realFieldName,propNode,parserContext);
      for (int i=fieldNameParts.length - 2; i >= 0; --i) {
        ObjectMapper.Builder<?,?> intermediate=new ObjectMapper.Builder<>(fieldNameParts[i]);
        intermediate.add(fieldBuilder);
        fieldBuilder=intermediate;
      }
      objBuilder.add(fieldBuilder);
      propNode.remove("type");
      DocumentMapperParser.checkNoRemainingFields(fieldName,propNode,parserContext.indexVersionCreated());
      iterator.remove();
    }
 else     if (isEmptyList) {
      iterator.remove();
    }
 else {
      throw new MapperParsingException("Expected map for property [fields] on field [" + fieldName + "] but got a "+ fieldName.getClass());
    }
  }
  DocumentMapperParser.checkNoRemainingFields(propsNode,parserContext.indexVersionCreated(),"DocType mapping definition has unsupported parameters: ");
}
