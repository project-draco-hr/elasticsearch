{
  assertSuccess("");
  assertSuccess("def foo = doc['foo'].value; if (foo == null) { return 5; }");
  assertSuccess("def foo = mylist[0]; if (foo == null) { return 5; }");
  assertSuccess("def foo = myarray[0]; if (foo == null) { return 5; }");
  assertSuccess("def foo = myobject.primitive.toString(); if (foo == null) { return 5; }");
  assertSuccess("def foo = myobject.object.toString(); if (foo == null) { return 5; }");
  assertSuccess("def foo = myobject.list[0].primitive.toString(); if (foo == null) { return 5; }");
  assertSuccess("def list = [doc['foo'].value, 3, 4]; def v = list.get(1); list.add(10)");
  assertSuccess("def range = 1..doc['foo'].value; def v = range.get(0)");
  assertSuccess("def v = doc['foo'].value; def m = [:]; m.put(\"value\", v)");
  assertSuccess("def t = Instant.now().getMillis()");
  assertSuccess("def n = [1,2,3]; GroovyCollections.max(n)");
  assertSuccess("[1, 2, 3, 4].findAll { it % 2 == 0 }");
  assertSuccess("def buckets=[ [2, 4, 6, 8], [10, 12, 16, 14], [18, 22, 20, 24] ]; buckets[-3..-1].every { it.every { i -> i % 2 == 0 } }");
  assertFailure("pr = Runtime.getRuntime().exec(\"touch /tmp/gotcha\"); pr.waitFor()",MissingPropertyException.class);
  assertFailure("java.lang.Math.class.forName(\"java.lang.Runtime\")",PrivilegedActionException.class);
  assertFailure("getClass().getClassLoader().loadClass(\"java.lang.Runtime\").availableProcessors()",PrivilegedActionException.class);
  assertFailure("myobject.getClass().getClassLoader().loadClass(\"java.lang.Runtime\").availableProcessors()",SecurityException.class);
  assertFailure("d = new DateTime(); d.getClass().getDeclaredMethod(\"year\").setAccessible(true)",SecurityException.class);
  assertFailure("d = new DateTime(); d.\"${'get' + 'Class'}\"()." + "\"${'getDeclared' + 'Method'}\"(\"year\").\"${'set' + 'Accessible'}\"(false)",SecurityException.class);
  assertFailure("Class.forName(\"org.joda.time.DateTime\").getDeclaredMethod(\"year\").setAccessible(true)",MissingPropertyException.class);
  assertFailure("Eval.me('2 + 2')",MissingPropertyException.class);
  assertFailure("Eval.x(5, 'x + 2')",MissingPropertyException.class);
  assertFailure("d = new Date(); java.lang.reflect.Field f = Date.class.getDeclaredField(\"fastTime\");" + " f.setAccessible(true); f.get(\"fastTime\")",MultipleCompilationErrorsException.class);
  assertFailure("def methodName = 'ex'; Runtime.\"${'get' + 'Runtime'}\"().\"${methodName}ec\"(\"touch /tmp/gotcha2\")",MissingPropertyException.class);
  assertFailure("t = new Thread({ println 3 });",MultipleCompilationErrorsException.class);
  Path dir=createTempDir();
  if (!Constants.WINDOWS) {
    assertFailure("new File(\"" + dir + "\").exists()",MultipleCompilationErrorsException.class);
  }
}
