{
  ValueType valueType=this.valueType != null ? this.valueType : targetValueType;
  if (field == null) {
    if (script == null) {
      @SuppressWarnings("unchecked") ValuesSourceConfig<VS> config=new ValuesSourceConfig<>(ValuesSourceType.ANY);
      return config.format(resolveFormat(null,valueType));
    }
    ValuesSourceType valuesSourceType=valueType != null ? valueType.getValuesSourceType() : this.valuesSourceType;
    if (valuesSourceType == null || valuesSourceType == ValuesSourceType.ANY) {
      valuesSourceType=ValuesSourceType.BYTES;
    }
    ValuesSourceConfig<VS> config=new ValuesSourceConfig<>(valuesSourceType);
    config.missing(missingMap.get(field));
    return config.format(resolveFormat(format,valueType));
  }
  MappedFieldType fieldType=context.searchContext().smartNameFieldType(field);
  if (fieldType == null) {
    ValuesSourceType valuesSourceType=valueType != null ? valueType.getValuesSourceType() : this.valuesSourceType;
    ValuesSourceConfig<VS> config=new ValuesSourceConfig<>(valuesSourceType);
    config.missing(missingMap.get(field));
    config.format(resolveFormat(format,valueType));
    return config.unmapped(true);
  }
  IndexFieldData<?> indexFieldData=context.searchContext().fieldData().getForField(fieldType);
  ValuesSourceConfig<VS> config;
  if (valuesSourceType == ValuesSourceType.ANY) {
    if (indexFieldData instanceof IndexNumericFieldData) {
      config=new ValuesSourceConfig<>(ValuesSourceType.NUMERIC);
    }
 else     if (indexFieldData instanceof IndexGeoPointFieldData) {
      config=new ValuesSourceConfig<>(ValuesSourceType.GEOPOINT);
    }
 else {
      config=new ValuesSourceConfig<>(ValuesSourceType.BYTES);
    }
  }
 else {
    config=new ValuesSourceConfig<>(valuesSourceType);
  }
  config.fieldContext(new FieldContext(field,indexFieldData,fieldType));
  config.missing(missingMap.get(field));
  return config.format(fieldType.docValueFormat(format,null));
}
