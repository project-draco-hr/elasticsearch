{
  Random random=new Random();
  Settings settings=settingsBuilder().put("cluster.routing.schedule",200,TimeUnit.MILLISECONDS).put("index.engine.robin.refreshInterval","-1").put(SETTING_NUMBER_OF_SHARDS,2).put(SETTING_NUMBER_OF_REPLICAS,1).build();
  Node node1=nodeBuilder().settings(settingsBuilder().put(settings).put("name","server1")).node();
  Node node2=nodeBuilder().settings(settingsBuilder().put(settings).put("name","server2")).node();
  Node client=nodeBuilder().settings(settingsBuilder().put(settings).put("name","client")).client(true).node();
  Client client1=client.client();
  Thread.sleep(1000);
  client1.admin().indices().create(createIndexRequest("test")).actionGet();
  Thread.sleep(5000);
  StopWatch stopWatch=new StopWatch().start();
  int COUNT=200000;
  int BATCH=1000;
  System.out.println("Indexing [" + COUNT + "] ...");
  int ITERS=COUNT / BATCH;
  int i=1;
  for (; i <= ITERS; i++) {
    BulkRequestBuilder request=client1.prepareBulk();
    for (int j=0; j < BATCH; j++) {
      request.add(Requests.indexRequest("test").type("type1").id(Integer.toString(i)).source(source(Integer.toString(i),"test" + i)));
    }
    BulkResponse response=request.execute().actionGet();
    if (response.hasFailures()) {
      System.err.println("failures...");
    }
    if (((i * BATCH) % 10000) == 0) {
      System.out.println("Indexed " + (i * 100) + " took "+ stopWatch.stop().lastTaskTime());
      stopWatch.start();
    }
  }
  System.out.println("Indexing took " + stopWatch.totalTime() + ", TPS "+ (((double)COUNT) / stopWatch.totalTime().secondsFrac()));
  client.close();
  node1.close();
  node2.close();
}
