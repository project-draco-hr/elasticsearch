{
  client().admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards",2).put("index.number_of_replicas",1).build()).execute().actionGet();
  ensureGreen();
  int numQueries=randomIntBetween(50,100);
  logger.info("--> register a queries");
  for (int i=0; i < numQueries; i++) {
    client().prepareIndex("test","_percolator",Integer.toString(i)).setSource(jsonBuilder().startObject().field("query",matchAllQuery()).endObject()).execute().actionGet();
  }
  MultiPercolateRequestBuilder builder=client().prepareMultiPercolate();
  int numPercolateRequest=randomIntBetween(50,100);
  for (int i=0; i < numPercolateRequest; i++) {
    builder.add(client().preparePercolate().setIndices("test").setDocumentType("type").setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field","a").endObject())));
  }
  MultiPercolateResponse response=builder.execute().actionGet();
  assertThat(response.items().length,equalTo(numPercolateRequest));
  for (  MultiPercolateResponse.Item item : response) {
    assertThat(item.isFailure(),equalTo(false));
    assertNoFailures(item.response());
    assertThat(item.getResponse().getCount(),equalTo((long)numQueries));
    assertThat(item.getResponse().getMatches().length,equalTo(numQueries));
  }
  builder=client().prepareMultiPercolate();
  for (int i=0; i < numPercolateRequest; i++) {
    builder.add(client().preparePercolate().setIndices("test").setDocumentType("type").setSource("illegal json"));
  }
  response=builder.execute().actionGet();
  assertThat(response.items().length,equalTo(numPercolateRequest));
  for (  MultiPercolateResponse.Item item : response) {
    assertThat(item.isFailure(),equalTo(false));
    assertThat(item.getResponse().getSuccessfulShards(),equalTo(0));
    assertThat(item.getResponse().getShardFailures().length,equalTo(2));
    for (    ShardOperationFailedException shardFailure : item.getResponse().getShardFailures()) {
      assertThat(shardFailure.reason(),containsString("Failed to derive xcontent from"));
      assertThat(shardFailure.status().getStatus(),equalTo(500));
    }
  }
  builder=client().prepareMultiPercolate();
  for (int i=0; i < numPercolateRequest; i++) {
    builder.add(client().preparePercolate().setIndices("test").setDocumentType("type").setSource("illegal json"));
  }
  builder.add(client().preparePercolate().setIndices("test").setDocumentType("type").setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field","a").endObject())));
  response=builder.execute().actionGet();
  assertThat(response.items().length,equalTo(numPercolateRequest + 1));
  assertThat(response.items()[numPercolateRequest].isFailure(),equalTo(false));
  assertNoFailures(response.items()[numPercolateRequest].getResponse());
  assertThat(response.items()[numPercolateRequest].getResponse().getCount(),equalTo((long)numQueries));
  assertThat(response.items()[numPercolateRequest].getResponse().getMatches().length,equalTo(numQueries));
}
