{
  MapBinder<String,TokenFilterFactoryFactory> tokenFilterBinder=MapBinder.newMapBinder(binder(),String.class,TokenFilterFactoryFactory.class);
  Map<String,Settings> tokenFiltersSettings=settings.getGroups("index.analysis.filter");
  for (  Map.Entry<String,Settings> entry : tokenFiltersSettings.entrySet()) {
    String tokenFilterName=entry.getKey();
    Settings tokenFilterSettings=entry.getValue();
    Class<? extends TokenFilterFactory> type=tokenFilterSettings.getAsClass("type",null,"org.elasticsearch.index.analysis.","TokenFilterFactory");
    if (type == null) {
      throw new IllegalArgumentException("Token Filter [" + tokenFilterName + "] must have a type associated with it");
    }
    tokenFilterBinder.addBinding(tokenFilterName).toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class,type)).in(Scopes.SINGLETON);
  }
  if (!tokenFiltersSettings.containsKey("stop")) {
    tokenFilterBinder.addBinding("stop").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class,StopTokenFilterFactory.class)).in(Scopes.SINGLETON);
  }
  if (!tokenFiltersSettings.containsKey("asciifolding")) {
    tokenFilterBinder.addBinding("asciifolding").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class,ASCIIFoldingTokenFilterFactory.class)).in(Scopes.SINGLETON);
  }
  if (!tokenFiltersSettings.containsKey("length")) {
    tokenFilterBinder.addBinding("length").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class,LengthTokenFilterFactory.class)).in(Scopes.SINGLETON);
  }
  if (!tokenFiltersSettings.containsKey("lowercase")) {
    tokenFilterBinder.addBinding("lowercase").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class,LowerCaseTokenFilterFactory.class)).in(Scopes.SINGLETON);
  }
  if (!tokenFiltersSettings.containsKey("porterStem")) {
    tokenFilterBinder.addBinding("porterStem").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class,PorterStemTokenFilterFactory.class)).in(Scopes.SINGLETON);
  }
  if (!tokenFiltersSettings.containsKey("standard")) {
    tokenFilterBinder.addBinding("standard").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class,StandardTokenFilterFactory.class)).in(Scopes.SINGLETON);
  }
  if (!tokenFiltersSettings.containsKey("nGram")) {
    tokenFilterBinder.addBinding("nGram").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class,NGramTokenFilterFactory.class)).in(Scopes.SINGLETON);
  }
  if (!tokenFiltersSettings.containsKey("edgeNGram")) {
    tokenFilterBinder.addBinding("edgeNGram").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class,EdgeNGramTokenFilterFactory.class)).in(Scopes.SINGLETON);
  }
  if (!tokenFiltersSettings.containsKey("shingle")) {
    tokenFilterBinder.addBinding("shingle").toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class,ShingleTokenFilterFactory.class)).in(Scopes.SINGLETON);
  }
  MapBinder<String,TokenizerFactoryFactory> tokenizerBinder=MapBinder.newMapBinder(binder(),String.class,TokenizerFactoryFactory.class);
  Map<String,Settings> tokenizersSettings=settings.getGroups("index.analysis.tokenizer");
  for (  Map.Entry<String,Settings> entry : tokenizersSettings.entrySet()) {
    String tokenizerName=entry.getKey();
    Settings tokenizerSettings=entry.getValue();
    Class<? extends TokenizerFactory> type=tokenizerSettings.getAsClass("type",null,"org.elasticsearch.index.analysis.","TokenizerFactory");
    if (type == null) {
      throw new IllegalArgumentException("Tokenizer [" + tokenizerName + "] must have a type associated with it");
    }
    tokenizerBinder.addBinding(tokenizerName).toProvider(FactoryProvider.newFactory(TokenizerFactoryFactory.class,type)).in(Scopes.SINGLETON);
  }
  if (!tokenizersSettings.containsKey("standard")) {
    tokenizerBinder.addBinding("standard").toProvider(FactoryProvider.newFactory(TokenizerFactoryFactory.class,StandardTokenizerFactory.class)).in(Scopes.SINGLETON);
  }
  if (!tokenizersSettings.containsKey("keyword")) {
    tokenizerBinder.addBinding("keyword").toProvider(FactoryProvider.newFactory(TokenizerFactoryFactory.class,KeywordTokenizerFactory.class)).in(Scopes.SINGLETON);
  }
  if (!tokenizersSettings.containsKey("letter")) {
    tokenizerBinder.addBinding("letter").toProvider(FactoryProvider.newFactory(TokenizerFactoryFactory.class,LetterTokenizerFactory.class)).in(Scopes.SINGLETON);
  }
  if (!tokenizersSettings.containsKey("lowercase")) {
    tokenizerBinder.addBinding("lowercase").toProvider(FactoryProvider.newFactory(TokenizerFactoryFactory.class,LowerCaseTokenizerFactory.class)).in(Scopes.SINGLETON);
  }
  if (!tokenizersSettings.containsKey("whitespace")) {
    tokenizerBinder.addBinding("whitespace").toProvider(FactoryProvider.newFactory(TokenizerFactoryFactory.class,WhitespaceTokenizerFactory.class)).in(Scopes.SINGLETON);
  }
  if (!tokenizersSettings.containsKey("nGram")) {
    tokenizerBinder.addBinding("nGram").toProvider(FactoryProvider.newFactory(TokenizerFactoryFactory.class,NGramTokenizerFactory.class)).in(Scopes.SINGLETON);
  }
  if (!tokenizersSettings.containsKey("edgeNGram")) {
    tokenizerBinder.addBinding("edgeNGram").toProvider(FactoryProvider.newFactory(TokenizerFactoryFactory.class,EdgeNGramTokenizerFactory.class)).in(Scopes.SINGLETON);
  }
  MapBinder<String,AnalyzerProviderFactory> analyzerBinder=MapBinder.newMapBinder(binder(),String.class,AnalyzerProviderFactory.class);
  Map<String,Settings> analyzersSettings=settings.getGroups("index.analysis.analyzer");
  for (  Map.Entry<String,Settings> entry : analyzersSettings.entrySet()) {
    String analyzerName=entry.getKey();
    Settings analyzerSettings=entry.getValue();
    Class<? extends AnalyzerProvider> type=analyzerSettings.getAsClass("type",null,"org.elasticsearch.index.analysis.","AnalyzerProvider");
    if (type == null) {
      String tokenizerName=analyzerSettings.get("tokenizer");
      if (tokenizerName != null) {
        type=CustomAnalyzerProvider.class;
      }
 else {
        throw new IllegalArgumentException("Analyzer [" + analyzerName + "] must have a type associated with it or a tokenizer");
      }
    }
    analyzerBinder.addBinding(analyzerName).toProvider(FactoryProvider.newFactory(AnalyzerProviderFactory.class,type)).in(Scopes.SINGLETON);
  }
  bind(AnalysisService.class).in(Scopes.SINGLETON);
}
