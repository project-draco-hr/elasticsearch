{
  MapBinder<String,CharFilterFactoryFactory> charFilterBinder=MapBinder.newMapBinder(binder(),String.class,CharFilterFactoryFactory.class);
  AnalysisBinderProcessor.CharFiltersBindings charFiltersBindings=new AnalysisBinderProcessor.CharFiltersBindings();
  for (  AnalysisBinderProcessor processor : processors) {
    processor.processCharFilters(charFiltersBindings);
  }
  Map<String,Settings> charFiltersSettings=settings.getGroups("index.analysis.char_filter");
  for (  Map.Entry<String,Settings> entry : charFiltersSettings.entrySet()) {
    String charFilterName=entry.getKey();
    Settings charFilterSettings=entry.getValue();
    Class<? extends CharFilterFactory> type=null;
    try {
      type=charFilterSettings.getAsClass("type",null,"org.elasticsearch.index.analysis.","CharFilterFactory");
    }
 catch (    NoClassSettingsException e) {
      if (charFilterSettings.get("type") != null) {
        type=charFiltersBindings.charFilters.get(charFilterSettings.get("type"));
      }
    }
    if (type == null) {
      throw new ElasticSearchIllegalArgumentException("Char Filter [" + charFilterName + "] must have a type associated with it");
    }
    charFilterBinder.addBinding(charFilterName).toProvider(FactoryProvider.newFactory(CharFilterFactoryFactory.class,type)).in(Scopes.SINGLETON);
  }
  for (  Map.Entry<String,Class<? extends CharFilterFactory>> entry : charFiltersBindings.charFilters.entrySet()) {
    String charFilterName=entry.getKey();
    Class<? extends CharFilterFactory> clazz=entry.getValue();
    if (charFiltersSettings.containsKey(charFilterName)) {
      continue;
    }
    if (clazz.getAnnotation(AnalysisSettingsRequired.class) != null) {
      continue;
    }
    if (indicesAnalysisService != null && indicesAnalysisService.hasCharFilter(charFilterName)) {
    }
 else {
      charFilterBinder.addBinding(charFilterName).toProvider(FactoryProvider.newFactory(CharFilterFactoryFactory.class,clazz)).in(Scopes.SINGLETON);
    }
  }
  MapBinder<String,TokenFilterFactoryFactory> tokenFilterBinder=MapBinder.newMapBinder(binder(),String.class,TokenFilterFactoryFactory.class);
  AnalysisBinderProcessor.TokenFiltersBindings tokenFiltersBindings=new AnalysisBinderProcessor.TokenFiltersBindings();
  for (  AnalysisBinderProcessor processor : processors) {
    processor.processTokenFilters(tokenFiltersBindings);
  }
  Map<String,Settings> tokenFiltersSettings=settings.getGroups("index.analysis.filter");
  for (  Map.Entry<String,Settings> entry : tokenFiltersSettings.entrySet()) {
    String tokenFilterName=entry.getKey();
    Settings tokenFilterSettings=entry.getValue();
    Class<? extends TokenFilterFactory> type=null;
    try {
      type=tokenFilterSettings.getAsClass("type",null,"org.elasticsearch.index.analysis.","TokenFilterFactory");
    }
 catch (    NoClassSettingsException e) {
      if (tokenFilterSettings.get("type") != null) {
        type=tokenFiltersBindings.tokenFilters.get(tokenFilterSettings.get("type"));
      }
      if (type == null) {
        throw new ElasticSearchIllegalArgumentException("failed to find token filter type for [" + tokenFilterName + "]",e);
      }
    }
    if (type == null) {
      throw new ElasticSearchIllegalArgumentException("token filter [" + tokenFilterName + "] must have a type associated with it");
    }
    tokenFilterBinder.addBinding(tokenFilterName).toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class,type)).in(Scopes.SINGLETON);
  }
  for (  Map.Entry<String,Class<? extends TokenFilterFactory>> entry : tokenFiltersBindings.tokenFilters.entrySet()) {
    String tokenFilterName=entry.getKey();
    Class<? extends TokenFilterFactory> clazz=entry.getValue();
    if (tokenFiltersSettings.containsKey(tokenFilterName)) {
      continue;
    }
    if (clazz.getAnnotation(AnalysisSettingsRequired.class) != null) {
      continue;
    }
    if (indicesAnalysisService != null && indicesAnalysisService.hasTokenFilter(tokenFilterName)) {
    }
 else {
      tokenFilterBinder.addBinding(tokenFilterName).toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class,clazz)).in(Scopes.SINGLETON);
    }
  }
  MapBinder<String,TokenizerFactoryFactory> tokenizerBinder=MapBinder.newMapBinder(binder(),String.class,TokenizerFactoryFactory.class);
  Map<String,Settings> tokenizersSettings=settings.getGroups("index.analysis.tokenizer");
  for (  Map.Entry<String,Settings> entry : tokenizersSettings.entrySet()) {
    String tokenizerName=entry.getKey();
    Settings tokenizerSettings=entry.getValue();
    try {
      Class<? extends TokenizerFactory> type=tokenizerSettings.getAsClass("type",null,"org.elasticsearch.index.analysis.","TokenizerFactory");
      if (type == null) {
        throw new ElasticSearchIllegalArgumentException("Tokenizer [" + tokenizerName + "] must have a type associated with it");
      }
      if (tokenizerSettings.getAsMap().isEmpty() && type.getAnnotation(AnalysisSettingsRequired.class) != null) {
        continue;
      }
      tokenizerBinder.addBinding(tokenizerName).toProvider(FactoryProvider.newFactory(TokenizerFactoryFactory.class,type)).in(Scopes.SINGLETON);
    }
 catch (    NoClassSettingsException e) {
      throw new ElasticSearchIllegalArgumentException("failed to find tokenizer type for [" + tokenizerName + "]",e);
    }
  }
  AnalysisBinderProcessor.TokenizersBindings tokenizersBindings=new AnalysisBinderProcessor.TokenizersBindings(tokenizerBinder,tokenizersSettings,indicesAnalysisService);
  for (  AnalysisBinderProcessor processor : processors) {
    processor.processTokenizers(tokenizersBindings);
  }
  MapBinder<String,AnalyzerProviderFactory> analyzerBinder=MapBinder.newMapBinder(binder(),String.class,AnalyzerProviderFactory.class);
  Map<String,Settings> analyzersSettings=settings.getGroups("index.analysis.analyzer");
  for (  Map.Entry<String,Settings> entry : analyzersSettings.entrySet()) {
    String analyzerName=entry.getKey();
    Settings analyzerSettings=entry.getValue();
    try {
      Class<? extends AnalyzerProvider> type=analyzerSettings.getAsClass("type",null,"org.elasticsearch.index.analysis.","AnalyzerProvider");
      if (type == null) {
        String tokenizerName=analyzerSettings.get("tokenizer");
        if (tokenizerName != null) {
          type=CustomAnalyzerProvider.class;
        }
 else {
          throw new ElasticSearchIllegalArgumentException("analyzer [" + analyzerName + "] must have a type associated with it or a tokenizer");
        }
      }
      analyzerBinder.addBinding(analyzerName).toProvider(FactoryProvider.newFactory(AnalyzerProviderFactory.class,type)).in(Scopes.SINGLETON);
    }
 catch (    NoClassSettingsException e) {
      throw new ElasticSearchIllegalArgumentException("failed to find analyzer type for [" + analyzerName + "]",e);
    }
  }
  AnalysisBinderProcessor.AnalyzersBindings analyzersBindings=new AnalysisBinderProcessor.AnalyzersBindings(analyzerBinder,analyzersSettings,indicesAnalysisService);
  for (  AnalysisBinderProcessor processor : processors) {
    processor.processAnalyzers(analyzersBindings);
  }
  bind(AnalysisService.class).in(Scopes.SINGLETON);
}
