{
  AllocationService allocation=createAllocationService(Settings.builder().put(ThrottlingAllocationDecider.CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_RECOVERIES_SETTING.getKey(),1).put(ThrottlingAllocationDecider.CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_OUTGOING_RECOVERIES_SETTING.getKey(),10).put(ThrottlingAllocationDecider.CLUSTER_ROUTING_ALLOCATION_NODE_INITIAL_PRIMARIES_RECOVERIES_SETTING.getKey(),1).put(ThrottlingAllocationDecider.CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_INCOMING_RECOVERIES_SETTING.getKey(),1).build());
  final String highPriorityName;
  final String lowPriorityName;
  final int priorityFirst;
  final int prioritySecond;
  if (randomBoolean()) {
    highPriorityName="first";
    lowPriorityName="second";
    prioritySecond=1;
    priorityFirst=100;
  }
 else {
    lowPriorityName="first";
    highPriorityName="second";
    prioritySecond=100;
    priorityFirst=1;
  }
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("first").settings(settings(Version.CURRENT).put(IndexMetaData.SETTING_PRIORITY,priorityFirst)).numberOfShards(2).numberOfReplicas(1)).put(IndexMetaData.builder("second").settings(settings(Version.CURRENT).put(IndexMetaData.SETTING_PRIORITY,prioritySecond)).numberOfShards(2).numberOfReplicas(1)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("first")).addAsNew(metaData.index("second")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build();
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1")).put(newNode("node2"))).build();
  RoutingAllocation.Result rerouteResult=allocation.reroute(clusterState,"reroute");
  clusterState=ClusterState.builder(clusterState).routingTable(rerouteResult.routingTable()).build();
  routingTable=allocation.reroute(clusterState,"reroute").routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertEquals(2,clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size());
  assertEquals(highPriorityName,clusterState.getRoutingNodes().shardsWithState(INITIALIZING).get(0).getIndexName());
  assertEquals(highPriorityName,clusterState.getRoutingNodes().shardsWithState(INITIALIZING).get(1).getIndexName());
  routingTable=allocation.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertEquals(2,clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size());
  assertEquals(lowPriorityName,clusterState.getRoutingNodes().shardsWithState(INITIALIZING).get(0).getIndexName());
  assertEquals(lowPriorityName,clusterState.getRoutingNodes().shardsWithState(INITIALIZING).get(1).getIndexName());
  routingTable=allocation.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertEquals(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).toString(),2,clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size());
  assertEquals(highPriorityName,clusterState.getRoutingNodes().shardsWithState(INITIALIZING).get(0).getIndexName());
  assertEquals(highPriorityName,clusterState.getRoutingNodes().shardsWithState(INITIALIZING).get(1).getIndexName());
  routingTable=allocation.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertEquals(2,clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size());
  assertEquals(lowPriorityName,clusterState.getRoutingNodes().shardsWithState(INITIALIZING).get(0).getIndexName());
  assertEquals(lowPriorityName,clusterState.getRoutingNodes().shardsWithState(INITIALIZING).get(1).getIndexName());
}
