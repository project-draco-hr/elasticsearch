{
  XContentParser.Token token;
  String currentFieldName=null;
  String[] bucketsPaths=null;
  String format=null;
  GapPolicy gapPolicy=GapPolicy.IGNORE;
  int window=5;
  Map<String,Object> settings=null;
  String model="simple";
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.VALUE_NUMBER) {
      if (WINDOW.match(currentFieldName)) {
        window=parser.intValue();
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ reducerName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else     if (token == XContentParser.Token.VALUE_STRING) {
      if (FORMAT.match(currentFieldName)) {
        format=parser.text();
      }
 else       if (BUCKETS_PATH.match(currentFieldName)) {
        bucketsPaths=new String[]{parser.text()};
      }
 else       if (GAP_POLICY.match(currentFieldName)) {
        gapPolicy=GapPolicy.parse(context,parser.text());
      }
 else       if (MODEL.match(currentFieldName)) {
        model=parser.text();
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ reducerName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if (BUCKETS_PATH.match(currentFieldName)) {
        List<String> paths=new ArrayList<>();
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          String path=parser.text();
          paths.add(path);
        }
        bucketsPaths=paths.toArray(new String[paths.size()]);
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ reducerName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if (SETTINGS.match(currentFieldName)) {
        settings=parser.map();
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ reducerName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else {
      throw new SearchParseException(context,"Unexpected token " + token + " in ["+ reducerName+ "].");
    }
  }
  if (bucketsPaths == null) {
    throw new SearchParseException(context,"Missing required field [" + BUCKETS_PATH.getPreferredName() + "] for smooth aggregation ["+ reducerName+ "]");
  }
  ValueFormatter formatter=null;
  if (format != null) {
    formatter=ValueFormat.Patternable.Number.format(format).formatter();
  }
  MovAvgModelParser modelParser=movAvgModelParserMapper.get(model);
  if (modelParser == null) {
    throw new SearchParseException(context,"Unknown model [" + model + "] specified.  Valid options are:"+ movAvgModelParserMapper.getAllNames().toString());
  }
  MovAvgModel movAvgModel=modelParser.parse(settings);
  return new MovAvgReducer.Factory(reducerName,bucketsPaths,formatter,gapPolicy,window,movAvgModel);
}
