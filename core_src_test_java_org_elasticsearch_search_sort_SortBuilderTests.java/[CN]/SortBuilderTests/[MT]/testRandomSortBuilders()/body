{
  for (int runs=0; runs < NUMBER_OF_RUNS; runs++) {
    List<SortBuilder<?>> testBuilders=randomSortBuilderList();
    XContentBuilder xContentBuilder=XContentFactory.jsonBuilder();
    xContentBuilder.startObject();
    if (testBuilders.size() > 1) {
      xContentBuilder.startArray("sort");
    }
 else {
      xContentBuilder.field("sort");
    }
    for (    SortBuilder<?> builder : testBuilders) {
      if (builder instanceof ScoreSortBuilder || builder instanceof FieldSortBuilder) {
switch (randomIntBetween(0,2)) {
case 0:
          if (builder instanceof ScoreSortBuilder) {
            xContentBuilder.value("_score");
          }
 else {
            xContentBuilder.value(((FieldSortBuilder)builder).getFieldName());
          }
        break;
case 1:
      xContentBuilder.startObject();
    if (builder instanceof ScoreSortBuilder) {
      xContentBuilder.field("_score");
    }
 else {
      xContentBuilder.field(((FieldSortBuilder)builder).getFieldName());
    }
  xContentBuilder.value(builder.order());
xContentBuilder.endObject();
break;
case 2:
builder.toXContent(xContentBuilder,ToXContent.EMPTY_PARAMS);
break;
}
}
 else {
builder.toXContent(xContentBuilder,ToXContent.EMPTY_PARAMS);
}
}
if (testBuilders.size() > 1) {
xContentBuilder.endArray();
}
xContentBuilder.endObject();
List<SortBuilder<?>> parsedSort=parseSort(xContentBuilder.string());
assertEquals(testBuilders.size(),parsedSort.size());
Iterator<SortBuilder<?>> iterator=testBuilders.iterator();
for (SortBuilder<?> parsedBuilder : parsedSort) {
assertEquals(iterator.next(),parsedBuilder);
}
}
}
