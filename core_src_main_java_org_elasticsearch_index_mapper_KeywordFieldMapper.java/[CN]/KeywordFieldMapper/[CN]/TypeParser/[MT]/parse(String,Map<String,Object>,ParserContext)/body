{
  if (parserContext.indexVersionCreated().before(Version.V_5_0_0_alpha1)) {
    Set<String> unsupportedParameters=new HashSet<>(node.keySet());
    unsupportedParameters.removeAll(SUPPORTED_PARAMETERS_FOR_AUTO_DOWNGRADE_TO_STRING);
    if (false == SUPPORTED_PARAMETERS_FOR_AUTO_DOWNGRADE_TO_STRING.containsAll(node.keySet())) {
      throw new IllegalArgumentException("Automatic downgrade from [keyword] to [string] failed because parameters " + unsupportedParameters + " are not supported for automatic downgrades.");
    }
{
      Object index=node.get("index");
      if (index == null || Boolean.TRUE.equals(index)) {
        index="not_analyzed";
      }
 else       if (Boolean.FALSE.equals(index)) {
        index="no";
      }
 else {
        throw new IllegalArgumentException("Can't parse [index] value [" + index + "] for field ["+ name+ "], expected [true] or [false]");
      }
      node.put("index",index);
    }
    return new StringFieldMapper.TypeParser().parse(name,node,parserContext);
  }
  KeywordFieldMapper.Builder builder=new KeywordFieldMapper.Builder(name);
  parseField(builder,name,node,parserContext);
  for (Iterator<Map.Entry<String,Object>> iterator=node.entrySet().iterator(); iterator.hasNext(); ) {
    Map.Entry<String,Object> entry=iterator.next();
    String propName=entry.getKey();
    Object propNode=entry.getValue();
    if (propName.equals("null_value")) {
      if (propNode == null) {
        throw new MapperParsingException("Property [null_value] cannot be null.");
      }
      builder.nullValue(propNode.toString());
      iterator.remove();
    }
 else     if (propName.equals("ignore_above")) {
      builder.ignoreAbove(XContentMapValues.nodeIntegerValue(propNode,-1));
      iterator.remove();
    }
 else     if (propName.equals("norms")) {
      builder.omitNorms(XContentMapValues.nodeBooleanValue(propNode) == false);
      iterator.remove();
    }
 else     if (propName.equals("eager_global_ordinals")) {
      builder.eagerGlobalOrdinals(XContentMapValues.nodeBooleanValue(propNode));
      iterator.remove();
    }
  }
  return builder;
}
