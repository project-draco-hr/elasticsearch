{
  String keyField=null;
  String valueField=null;
  String valueScript=null;
  String scriptLang=null;
  Map<String,Object> params=null;
  boolean intervalSet=false;
  long interval=1;
  String sInterval=null;
  MutableDateTime dateTime=new MutableDateTime(DateTimeZone.UTC);
  DateHistogramFacet.ComparatorType comparatorType=DateHistogramFacet.ComparatorType.TIME;
  XContentParser.Token token;
  String fieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      fieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("params".equals(fieldName)) {
        params=parser.map();
      }
    }
 else     if (token.isValue()) {
      if ("field".equals(fieldName)) {
        keyField=parser.text();
      }
 else       if ("key_field".equals(fieldName) || "keyField".equals(fieldName)) {
        keyField=parser.text();
      }
 else       if ("value_field".equals(fieldName) || "valueField".equals(fieldName)) {
        valueField=parser.text();
      }
 else       if ("interval".equals(fieldName)) {
        intervalSet=true;
        if (token == XContentParser.Token.VALUE_NUMBER) {
          interval=parser.longValue();
        }
 else {
          sInterval=parser.text();
        }
      }
 else       if ("time_zone".equals(fieldName) || "timeZone".equals(fieldName)) {
        if (token == XContentParser.Token.VALUE_NUMBER) {
          dateTime.setZone(DateTimeZone.forOffsetHours(parser.intValue()));
        }
 else {
          String text=parser.text();
          int index=text.indexOf(':');
          if (index != -1) {
            dateTime.setZone(DateTimeZone.forOffsetHoursMinutes(Integer.parseInt(text.substring(0,index)),Integer.parseInt(text.substring(index + 1))));
          }
 else {
            dateTime.setZone(DateTimeZone.forID(text));
          }
        }
      }
 else       if ("value_script".equals(fieldName) || "valueScript".equals(fieldName)) {
        valueScript=parser.text();
      }
 else       if ("order".equals(fieldName) || "comparator".equals(fieldName)) {
        comparatorType=DateHistogramFacet.ComparatorType.fromString(parser.text());
      }
 else       if ("lang".equals(fieldName)) {
        scriptLang=parser.text();
      }
    }
  }
  if (keyField == null) {
    throw new FacetPhaseExecutionException(facetName,"key field is required to be set for histogram facet, either using [field] or using [key_field]");
  }
  FieldMapper mapper=context.mapperService().smartNameFieldMapper(keyField);
  if (mapper == null) {
    throw new FacetPhaseExecutionException(facetName,"(key) field [" + keyField + "] not found");
  }
  if (mapper.fieldDataType() != FieldDataType.DefaultTypes.LONG) {
    throw new FacetPhaseExecutionException(facetName,"(key) field [" + keyField + "] is not of type date");
  }
  if (!intervalSet) {
    throw new FacetPhaseExecutionException(facetName,"[interval] is required to be set for histogram facet");
  }
  if (sInterval != null) {
    int index=sInterval.indexOf(':');
    if (index != -1) {
      DateFieldParser fieldParser=dateFieldParsers.get(sInterval.substring(0,index));
      if (fieldParser == null) {
        throw new FacetPhaseExecutionException(facetName,"failed to parse interval [" + sInterval + "] with custom rounding using built in intervals (year/month/...)");
      }
      DateTimeField field=fieldParser.parse(dateTime.getChronology());
      int rounding=this.rounding.get(sInterval.substring(index + 1));
      if (rounding == -1) {
        throw new FacetPhaseExecutionException(facetName,"failed to parse interval [" + sInterval + "], rounding type ["+ (sInterval.substring(index + 1))+ "] not found");
      }
      dateTime.setRounding(field,rounding);
    }
 else {
      DateFieldParser fieldParser=dateFieldParsers.get(sInterval);
      if (fieldParser != null) {
        DateTimeField field=fieldParser.parse(dateTime.getChronology());
        dateTime.setRounding(field,MutableDateTime.ROUND_FLOOR);
      }
 else {
        try {
          interval=TimeValue.parseTimeValue(sInterval,null).millis();
        }
 catch (        Exception e) {
          throw new FacetPhaseExecutionException(facetName,"failed to parse interval [" + sInterval + "], tried both as built in intervals (year/month/...) and as a time format");
        }
      }
    }
  }
  if (valueScript != null) {
    return new ValueScriptDateHistogramFacetCollector(facetName,keyField,scriptLang,valueScript,params,dateTime,interval,comparatorType,context);
  }
 else   if (valueField == null) {
    return new CountDateHistogramFacetCollector(facetName,keyField,dateTime,interval,comparatorType,context);
  }
 else {
    return new ValueDateHistogramFacetCollector(facetName,keyField,valueField,dateTime,interval,comparatorType,context);
  }
}
