{
  double oldMinMergeSizeMB=mergePolicy.getMinMergeMB();
  ByteSizeValue minMergeSize=settings.getAsBytesSize(INDEX_MERGE_POLICY_MIN_MERGE_SIZE,DEFAULT_MIN_MERGE_SIZE);
  if (minMergeSize.mbFrac() != oldMinMergeSizeMB) {
    logger.info("updating min_merge_size from [{}mb] to [{}]",oldMinMergeSizeMB,minMergeSize);
    mergePolicy.setMinMergeMB(minMergeSize.mbFrac());
  }
  double oldMaxMergeSizeMB=mergePolicy.getMaxMergeMB();
  ByteSizeValue maxMergeSize=settings.getAsBytesSize(INDEX_MERGE_POLICY_MAX_MERGE_SIZE,DEFAULT_MAX_MERGE_SIZE);
  if (maxMergeSize.mbFrac() != oldMaxMergeSizeMB) {
    logger.info("updating max_merge_size from [{}mb] to [{}]",oldMaxMergeSizeMB,maxMergeSize);
    mergePolicy.setMaxMergeMB(maxMergeSize.mbFrac());
  }
  int oldMaxMergeDocs=mergePolicy.getMaxMergeDocs();
  int maxMergeDocs=settings.getAsInt(INDEX_MERGE_POLICY_MAX_MERGE_DOCS,LogByteSizeMergePolicy.DEFAULT_MAX_MERGE_DOCS);
  if (maxMergeDocs != oldMaxMergeDocs) {
    logger.info("updating max_merge_docs from [{}] to [{}]",oldMaxMergeDocs,maxMergeDocs);
    mergePolicy.setMaxMergeDocs(maxMergeDocs);
  }
  int oldMergeFactor=mergePolicy.getMergeFactor();
  int mergeFactor=settings.getAsInt(INDEX_MERGE_POLICY_MERGE_FACTOR,LogByteSizeMergePolicy.DEFAULT_MERGE_FACTOR);
  if (mergeFactor != oldMergeFactor) {
    logger.info("updating merge_factor from [{}] to [{}]",oldMergeFactor,mergeFactor);
    mergePolicy.setMergeFactor(mergeFactor);
  }
  boolean oldCalibrateSizeByDeletes=mergePolicy.getCalibrateSizeByDeletes();
  boolean calibrateSizeByDeletes=settings.getAsBoolean(INDEX_MERGE_POLICY_CALIBRATE_SIZE_BY_DELETES,true);
  if (calibrateSizeByDeletes != oldCalibrateSizeByDeletes) {
    logger.info("updating calibrate_size_by_deletes from [{}] to [{}]",oldCalibrateSizeByDeletes,calibrateSizeByDeletes);
    mergePolicy.setCalibrateSizeByDeletes(calibrateSizeByDeletes);
  }
  final double noCFSRatio=parseNoCFSRatio(settings.get(INDEX_COMPOUND_FORMAT,Double.toString(LogByteSizeMergePolicyProvider.this.noCFSRatio)));
  if (noCFSRatio != LogByteSizeMergePolicyProvider.this.noCFSRatio) {
    logger.info("updating index.compound_format from [{}] to [{}]",formatNoCFSRatio(LogByteSizeMergePolicyProvider.this.noCFSRatio),formatNoCFSRatio(noCFSRatio));
    LogByteSizeMergePolicyProvider.this.noCFSRatio=noCFSRatio;
    mergePolicy.setNoCFSRatio(noCFSRatio);
  }
}
