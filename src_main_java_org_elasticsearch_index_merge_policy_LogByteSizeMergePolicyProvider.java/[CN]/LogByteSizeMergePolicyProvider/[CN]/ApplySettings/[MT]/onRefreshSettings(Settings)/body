{
  ByteSizeValue minMergeSize=settings.getAsBytesSize(INDEX_MERGE_POLICY_MIN_MERGE_SIZE,LogByteSizeMergePolicyProvider.this.minMergeSize);
  if (!minMergeSize.equals(LogByteSizeMergePolicyProvider.this.minMergeSize)) {
    logger.info("updating min_merge_size from [{}] to [{}]",LogByteSizeMergePolicyProvider.this.minMergeSize,minMergeSize);
    LogByteSizeMergePolicyProvider.this.minMergeSize=minMergeSize;
    for (    CustomLogByteSizeMergePolicy policy : policies) {
      policy.setMinMergeMB(minMergeSize.mbFrac());
    }
  }
  ByteSizeValue maxMergeSize=settings.getAsBytesSize(INDEX_MERGE_POLICY_MAX_MERGE_SIZE,LogByteSizeMergePolicyProvider.this.maxMergeSize);
  if (!maxMergeSize.equals(LogByteSizeMergePolicyProvider.this.maxMergeSize)) {
    logger.info("updating max_merge_size from [{}] to [{}]",LogByteSizeMergePolicyProvider.this.maxMergeSize,maxMergeSize);
    LogByteSizeMergePolicyProvider.this.maxMergeSize=maxMergeSize;
    for (    CustomLogByteSizeMergePolicy policy : policies) {
      policy.setMaxMergeMB(maxMergeSize.mbFrac());
    }
  }
  int maxMergeDocs=settings.getAsInt(INDEX_MERGE_POLICY_MAX_MERGE_DOCS,LogByteSizeMergePolicyProvider.this.maxMergeDocs);
  if (maxMergeDocs != LogByteSizeMergePolicyProvider.this.maxMergeDocs) {
    logger.info("updating max_merge_docs from [{}] to [{}]",LogByteSizeMergePolicyProvider.this.maxMergeDocs,maxMergeDocs);
    LogByteSizeMergePolicyProvider.this.maxMergeDocs=maxMergeDocs;
    for (    CustomLogByteSizeMergePolicy policy : policies) {
      policy.setMaxMergeDocs(maxMergeDocs);
    }
  }
  int mergeFactor=settings.getAsInt(INDEX_MERGE_POLICY_MERGE_FACTOR,LogByteSizeMergePolicyProvider.this.mergeFactor);
  if (mergeFactor != LogByteSizeMergePolicyProvider.this.mergeFactor) {
    logger.info("updating merge_factor from [{}] to [{}]",LogByteSizeMergePolicyProvider.this.mergeFactor,mergeFactor);
    LogByteSizeMergePolicyProvider.this.mergeFactor=mergeFactor;
    for (    CustomLogByteSizeMergePolicy policy : policies) {
      policy.setMergeFactor(mergeFactor);
    }
  }
  final double noCFSRatio=parseNoCFSRatio(settings.get(INDEX_COMPOUND_FORMAT,Double.toString(LogByteSizeMergePolicyProvider.this.noCFSRatio)));
  if (noCFSRatio != LogByteSizeMergePolicyProvider.this.noCFSRatio) {
    logger.info("updating index.compound_format from [{}] to [{}]",formatNoCFSRatio(LogByteSizeMergePolicyProvider.this.noCFSRatio),formatNoCFSRatio(noCFSRatio));
    LogByteSizeMergePolicyProvider.this.noCFSRatio=noCFSRatio;
    for (    CustomLogByteSizeMergePolicy policy : policies) {
      policy.setNoCFSRatio(noCFSRatio);
    }
  }
}
