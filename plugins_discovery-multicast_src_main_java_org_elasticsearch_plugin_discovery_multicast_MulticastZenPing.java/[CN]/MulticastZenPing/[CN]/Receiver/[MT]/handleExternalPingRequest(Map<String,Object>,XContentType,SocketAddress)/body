{
  if (externalPingData.containsKey("response")) {
    logger.trace("got an external ping response (ignoring) from {}, content {}",remoteAddress,externalPingData);
    return;
  }
  if (multicastChannel == null) {
    logger.debug("can't send ping response, no socket, from {}, content {}",remoteAddress,externalPingData);
    return;
  }
  Map<String,Object> request=(Map<String,Object>)externalPingData.get("request");
  if (request == null) {
    logger.warn("malformed external ping request, no 'request' element from {}, content {}",remoteAddress,externalPingData);
    return;
  }
  final String requestClusterName=request.containsKey("cluster_name") ? request.get("cluster_name").toString() : request.containsKey("clusterName") ? request.get("clusterName").toString() : null;
  if (requestClusterName == null) {
    logger.warn("malformed external ping request, missing 'cluster_name' element within request, from {}, content {}",remoteAddress,externalPingData);
    return;
  }
  if (!requestClusterName.equals(clusterName.value())) {
    logger.trace("got request for cluster_name {}, but our cluster_name is {}, from {}, content {}",requestClusterName,clusterName.value(),remoteAddress,externalPingData);
    return;
  }
  if (logger.isTraceEnabled()) {
    logger.trace("got external ping request from {}, content {}",remoteAddress,externalPingData);
  }
  try {
    DiscoveryNode localNode=contextProvider.nodes().localNode();
    XContentBuilder builder=XContentFactory.contentBuilder(contentType);
    builder.startObject().startObject("response");
    builder.field("cluster_name",clusterName.value());
    builder.startObject("version").field("number",version.number()).field("snapshot_build",version.snapshot).endObject();
    builder.field("transport_address",localNode.address().toString());
    if (contextProvider.nodeService() != null) {
      for (      Map.Entry<String,String> attr : contextProvider.nodeService().attributes().entrySet()) {
        builder.field(attr.getKey(),attr.getValue());
      }
    }
    builder.startObject("attributes");
    for (    ObjectObjectCursor<String,String> attr : localNode.attributes()) {
      builder.field(attr.key,attr.value);
    }
    builder.endObject();
    builder.endObject().endObject();
    multicastChannel.send(builder.bytes());
    if (logger.isTraceEnabled()) {
      logger.trace("sending external ping response {}",builder.string());
    }
  }
 catch (  Exception e) {
    logger.warn("failed to send external multicast response",e);
  }
}
