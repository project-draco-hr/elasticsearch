{
  createIndex("test");
  ensureGreen();
  IndicesService indicesService=getInstanceFromNode(IndicesService.class);
  IndexService indexService=indicesService.indexService(resolveIndex("test"));
  IndexShard shard=indexService.getShardOrNull(0);
  client().prepareIndex("test","test","0").setSource("{\"foo\" : \"bar\"}").get();
  client().prepareDelete("test","test","0").get();
  client().prepareIndex("test","test","1").setSource("{\"foo\" : \"bar\"}").setRefreshPolicy(IMMEDIATE).get();
  IndexSearcherWrapper wrapper=new IndexSearcherWrapper(){
  }
;
  shard.close("simon says",false);
  AtomicReference<IndexShard> shardRef=new AtomicReference<>();
  List<Exception> failures=new ArrayList<>();
  IndexingOperationListener listener=new IndexingOperationListener(){
    @Override public void postIndex(    Engine.Index index,    boolean created){
      try {
        assertNotNull(shardRef.get());
        assertTrue(shardRef.get().getIndexBufferRAMBytesUsed() > 0);
        shardRef.get().refresh("test");
      }
 catch (      Exception e) {
        failures.add(e);
        throw e;
      }
    }
    @Override public void postDelete(    Engine.Delete delete){
      try {
        assertNotNull(shardRef.get());
        assertTrue(shardRef.get().getIndexBufferRAMBytesUsed() > 0);
        shardRef.get().refresh("test");
      }
 catch (      Exception e) {
        failures.add(e);
        throw e;
      }
    }
  }
;
  final IndexShard newShard=newIndexShard(indexService,shard,wrapper,listener);
  shardRef.set(newShard);
  recoverShard(newShard);
  try {
    ExceptionsHelper.rethrowAndSuppress(failures);
  }
  finally {
    newShard.close("just do it",randomBoolean());
  }
}
