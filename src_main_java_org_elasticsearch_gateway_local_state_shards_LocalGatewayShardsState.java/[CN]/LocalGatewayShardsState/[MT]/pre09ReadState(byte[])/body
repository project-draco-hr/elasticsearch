{
  XContentParser parser=null;
  try {
    Map<ShardId,ShardStateInfo> shardsState=Maps.newHashMap();
    if (LZF.isCompressed(data)) {
      BytesStreamInput siBytes=new BytesStreamInput(data,false);
      LZFStreamInput siLzf=CachedStreamInput.cachedLzf(siBytes);
      parser=XContentFactory.xContent(XContentType.JSON).createParser(siLzf);
    }
 else {
      parser=XContentFactory.xContent(XContentType.JSON).createParser(data);
    }
    String currentFieldName=null;
    XContentParser.Token token=parser.nextToken();
    if (token == null) {
      return shardsState;
    }
    while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
      if (token == XContentParser.Token.FIELD_NAME) {
        currentFieldName=parser.currentName();
      }
 else       if (token == XContentParser.Token.START_ARRAY) {
        if ("shards".equals(currentFieldName)) {
          while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
            if (token == XContentParser.Token.START_OBJECT) {
              String shardIndex=null;
              int shardId=-1;
              long version=-1;
              while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
                if (token == XContentParser.Token.FIELD_NAME) {
                  currentFieldName=parser.currentName();
                }
 else                 if (token.isValue()) {
                  if ("index".equals(currentFieldName)) {
                    shardIndex=parser.text();
                  }
 else                   if ("id".equals(currentFieldName)) {
                    shardId=parser.intValue();
                  }
 else                   if ("version".equals(currentFieldName)) {
                    version=parser.longValue();
                  }
                }
              }
              shardsState.put(new ShardId(shardIndex,shardId),new ShardStateInfo(version));
            }
          }
        }
      }
    }
    return shardsState;
  }
  finally {
    if (parser != null) {
      parser.close();
    }
  }
}
