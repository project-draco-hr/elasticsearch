{
  long index=-1;
  File latest=null;
  for (  File dataLocation : nodeEnv.nodeDataLocations()) {
    File stateLocation=new File(dataLocation,"_state");
    if (!stateLocation.exists()) {
      continue;
    }
    File[] stateFiles=stateLocation.listFiles();
    if (stateFiles == null) {
      continue;
    }
    for (    File stateFile : stateFiles) {
      if (logger.isTraceEnabled()) {
        logger.trace("[find_latest_state]: processing [" + stateFile.getName() + "]");
      }
      String name=stateFile.getName();
      if (!name.startsWith("shards-")) {
        continue;
      }
      long fileIndex=Long.parseLong(name.substring(name.indexOf('-') + 1));
      if (fileIndex >= index) {
        try {
          byte[] data=Streams.copyToByteArray(new FileInputStream(stateFile));
          if (data.length == 0) {
            logger.debug("[find_latest_state]: not data for [" + name + "], ignoring...");
          }
          pre09ReadState(data);
          index=fileIndex;
          latest=stateFile;
        }
 catch (        IOException e) {
          logger.warn("[find_latest_state]: failed to read state from [" + name + "], ignoring...",e);
        }
      }
    }
  }
  if (latest == null) {
    return;
  }
  logger.info("found old shards state, loading started shards from [{}] and converting to new shards state locations...",latest.getAbsolutePath());
  Map<ShardId,ShardStateInfo> shardsState=pre09ReadState(Streams.copyToByteArray(new FileInputStream(latest)));
  for (  Map.Entry<ShardId,ShardStateInfo> entry : shardsState.entrySet()) {
    writeShardState("upgrade",entry.getKey(),entry.getValue(),null);
  }
  File backupFile=new File(latest.getParentFile(),"backup-" + latest.getName());
  if (!latest.renameTo(backupFile)) {
    throw new IOException("failed to rename old state to backup state [" + latest.getAbsolutePath() + "]");
  }
  for (  File dataLocation : nodeEnv.nodeDataLocations()) {
    File stateLocation=new File(dataLocation,"_state");
    if (!stateLocation.exists()) {
      continue;
    }
    File[] stateFiles=stateLocation.listFiles();
    if (stateFiles == null) {
      continue;
    }
    for (    File stateFile : stateFiles) {
      if (logger.isTraceEnabled()) {
        logger.trace("[find_latest_state]: processing [" + stateFile.getName() + "]");
      }
      String name=stateFile.getName();
      if (!name.startsWith("shards-")) {
        continue;
      }
      stateFile.delete();
    }
  }
  logger.info("conversion to new shards state location and format done, backup create at [{}]",backupFile.getAbsolutePath());
}
