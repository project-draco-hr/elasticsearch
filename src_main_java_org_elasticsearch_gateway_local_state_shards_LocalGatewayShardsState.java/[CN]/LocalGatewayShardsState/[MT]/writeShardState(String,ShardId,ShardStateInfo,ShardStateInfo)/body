{
  logger.trace("[{}][{}] writing shard state, reason [{}]",shardId.index().name(),shardId.id(),reason);
  XContentBuilder builder=XContentFactory.contentBuilder(XContentType.JSON,new BytesStreamOutput());
  builder.prettyPrint();
  builder.startObject();
  builder.field("version",shardStateInfo.version);
  if (shardStateInfo.primary != null) {
    builder.field("primary",shardStateInfo.primary);
  }
  builder.endObject();
  builder.flush();
  Exception lastFailure=null;
  boolean wroteAtLeastOnce=false;
  for (  File shardLocation : nodeEnv.shardLocations(shardId)) {
    File shardStateDir=new File(shardLocation,"_state");
    FileSystemUtils.mkdirs(shardStateDir);
    File stateFile=new File(shardStateDir,"state-" + shardStateInfo.version);
    FileOutputStream fos=null;
    try {
      fos=new FileOutputStream(stateFile);
      BytesReference bytes=builder.bytes();
      bytes.writeTo(fos);
      fos.getChannel().force(true);
      fos.close();
      wroteAtLeastOnce=true;
    }
 catch (    Exception e) {
      lastFailure=e;
    }
 finally {
      IOUtils.closeWhileHandlingException(fos);
    }
  }
  if (!wroteAtLeastOnce) {
    logger.warn("[{}][{}]: failed to write shard state",lastFailure,shardId.index().name(),shardId.id());
    throw new IOException("failed to write shard state for " + shardId,lastFailure);
  }
  if (previousStateInfo != null && previousStateInfo.version != shardStateInfo.version) {
    for (    File shardLocation : nodeEnv.shardLocations(shardId)) {
      File stateFile=new File(new File(shardLocation,"_state"),"state-" + previousStateInfo.version);
      stateFile.delete();
    }
  }
}
