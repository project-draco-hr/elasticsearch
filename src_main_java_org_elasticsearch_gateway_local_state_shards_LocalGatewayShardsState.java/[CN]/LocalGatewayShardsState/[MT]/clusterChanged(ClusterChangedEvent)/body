{
  if (event.state().blocks().disableStatePersistence()) {
    return;
  }
  if (!event.state().nodes().localNode().dataNode()) {
    return;
  }
  if (!event.routingTableChanged()) {
    return;
  }
  Map<ShardId,ShardStateInfo> newState=Maps.newHashMap();
  newState.putAll(this.currentState);
  for (  IndexRoutingTable indexRoutingTable : event.state().routingTable()) {
    for (    IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {
      if (indexShardRoutingTable.countWithState(ShardRoutingState.STARTED) == indexShardRoutingTable.size()) {
        newState.remove(indexShardRoutingTable.shardId());
      }
    }
  }
  for (  ShardId shardId : currentState.keySet()) {
    if (!event.state().metaData().hasIndex(shardId.index().name())) {
      newState.remove(shardId);
    }
  }
  RoutingNode routingNode=event.state().readOnlyRoutingNodes().node(event.state().nodes().localNodeId());
  if (routingNode != null) {
    for (    MutableShardRouting shardRouting : routingNode) {
      if (shardRouting.active()) {
        newState.put(shardRouting.shardId(),new ShardStateInfo(shardRouting.version(),shardRouting.primary()));
      }
    }
  }
  for (Iterator<Map.Entry<ShardId,ShardStateInfo>> it=newState.entrySet().iterator(); it.hasNext(); ) {
    Map.Entry<ShardId,ShardStateInfo> entry=it.next();
    ShardId shardId=entry.getKey();
    ShardStateInfo shardStateInfo=entry.getValue();
    String writeReason=null;
    ShardStateInfo currentShardStateInfo=currentState.get(shardId);
    if (currentShardStateInfo == null) {
      writeReason="freshly started, version [" + shardStateInfo.version + "]";
    }
 else     if (currentShardStateInfo.version != shardStateInfo.version) {
      writeReason="version changed from [" + currentShardStateInfo.version + "] to ["+ shardStateInfo.version+ "]";
    }
    if (writeReason == null) {
      continue;
    }
    try {
      writeShardState(writeReason,shardId,shardStateInfo,currentShardStateInfo);
    }
 catch (    Exception e) {
      it.remove();
    }
  }
  this.currentState=newState;
}
