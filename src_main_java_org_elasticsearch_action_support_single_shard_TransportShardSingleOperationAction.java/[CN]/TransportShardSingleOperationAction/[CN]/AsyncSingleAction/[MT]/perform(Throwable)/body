{
  Throwable lastFailure=this.lastFailure;
  if (lastFailure == null || TransportActions.isReadOverrideException(currentFailure)) {
    lastFailure=currentFailure;
    this.lastFailure=currentFailure;
  }
  final ShardRouting shardRouting=shardIt.nextOrNull();
  if (shardRouting == null) {
    Throwable failure=lastFailure;
    if (failure == null || isShardNotAvailableException(failure)) {
      failure=new NoShardAvailableActionException(shardIt.shardId(),null,failure);
    }
 else {
      if (logger.isDebugEnabled()) {
        logger.debug("{}: failed to execute [{}]",failure,shardIt.shardId(),internalRequest.request());
      }
    }
    listener.onFailure(failure);
    return;
  }
  if (shardRouting.currentNodeId().equals(nodes.localNodeId())) {
    if (logger.isTraceEnabled()) {
      logger.trace("executing [{}] on shard [{}]",internalRequest.request(),shardRouting.shardId());
    }
    try {
      if (internalRequest.request().operationThreaded()) {
        threadPool.executor(executor).execute(new Runnable(){
          @Override public void run(){
            try {
              Response response=shardOperation(internalRequest.request(),shardRouting.shardId());
              listener.onResponse(response);
            }
 catch (            Throwable e) {
              onFailure(shardRouting,e);
            }
          }
        }
);
      }
 else {
        final Response response=shardOperation(internalRequest.request(),shardRouting.shardId());
        listener.onResponse(response);
      }
    }
 catch (    Throwable e) {
      onFailure(shardRouting,e);
    }
  }
 else {
    DiscoveryNode node=nodes.get(shardRouting.currentNodeId());
    if (node == null) {
      onFailure(shardRouting,new NoShardAvailableActionException(shardIt.shardId()));
    }
 else {
      transportService.sendRequest(node,transportShardAction,new ShardSingleOperationRequest(internalRequest.request(),shardRouting.shardId()),new BaseTransportResponseHandler<Response>(){
        @Override public Response newInstance(){
          return newResponse();
        }
        @Override public String executor(){
          return ThreadPool.Names.SAME;
        }
        @Override public void handleResponse(        final Response response){
          listener.onResponse(response);
        }
        @Override public void handleException(        TransportException exp){
          onFailure(shardRouting,exp);
        }
      }
);
    }
  }
}
