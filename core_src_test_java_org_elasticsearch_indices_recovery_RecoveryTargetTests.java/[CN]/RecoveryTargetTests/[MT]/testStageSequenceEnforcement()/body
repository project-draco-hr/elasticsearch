{
  final DiscoveryNode discoveryNode=new DiscoveryNode("1",LocalTransportAddress.buildUnique(),emptyMap(),emptySet(),Version.CURRENT);
  Stage[] stages=Stage.values();
  int i=randomIntBetween(0,stages.length - 1);
  int j;
  do {
    j=randomIntBetween(0,stages.length - 1);
  }
 while (j == i);
  Stage t=stages[i];
  stages[i]=stages[j];
  stages[j]=t;
  try {
    ShardRouting shardRouting=TestShardRouting.newShardRouting(new ShardId("bla","_na_",0),discoveryNode.getId(),randomBoolean(),ShardRoutingState.INITIALIZING);
    RecoveryState state=new RecoveryState(shardRouting,discoveryNode,shardRouting.recoverySource().getType() == RecoverySource.Type.PEER ? discoveryNode : null);
    for (    Stage stage : stages) {
      state.setStage(stage);
    }
    fail("succeeded in performing the illegal sequence [" + Strings.arrayToCommaDelimitedString(stages) + "]");
  }
 catch (  IllegalStateException e) {
  }
  stages=Stage.values();
  i=randomIntBetween(1,stages.length - 1);
  ArrayList<Stage> list=new ArrayList<>(Arrays.asList(Arrays.copyOfRange(stages,0,i)));
  list.addAll(Arrays.asList(stages));
  ShardRouting shardRouting=TestShardRouting.newShardRouting(new ShardId("bla","_na_",0),discoveryNode.getId(),randomBoolean(),ShardRoutingState.INITIALIZING);
  RecoveryState state=new RecoveryState(shardRouting,discoveryNode,shardRouting.recoverySource().getType() == RecoverySource.Type.PEER ? discoveryNode : null);
  for (  Stage stage : list) {
    state.setStage(stage);
  }
  assertThat(state.getStage(),equalTo(Stage.DONE));
}
