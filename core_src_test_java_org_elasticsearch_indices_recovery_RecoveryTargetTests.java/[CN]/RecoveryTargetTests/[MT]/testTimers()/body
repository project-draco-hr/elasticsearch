{
  final Timer timer;
  Streamer<Timer> streamer;
  AtomicBoolean stop=new AtomicBoolean();
  if (randomBoolean()) {
    timer=new Timer();
    streamer=new Streamer<Timer>(stop,timer){
      @Override Timer createObj(){
        return new Timer();
      }
    }
;
  }
 else   if (randomBoolean()) {
    timer=new Index();
    streamer=new Streamer<Timer>(stop,timer){
      @Override Timer createObj(){
        return new Index();
      }
    }
;
  }
 else   if (randomBoolean()) {
    timer=new VerifyIndex();
    streamer=new Streamer<Timer>(stop,timer){
      @Override Timer createObj(){
        return new VerifyIndex();
      }
    }
;
  }
 else {
    timer=new Translog();
    streamer=new Streamer<Timer>(stop,timer){
      @Override Timer createObj(){
        return new Translog();
      }
    }
;
  }
  timer.start();
  assertThat(timer.startTime(),greaterThan(0L));
  assertThat(timer.stopTime(),equalTo(0L));
  Timer lastRead=streamer.serializeDeserialize();
  final long time=lastRead.time();
  assertThat(time,lessThanOrEqualTo(timer.time()));
  assertBusy(new Runnable(){
    @Override public void run(){
      assertThat("timer timer should progress compared to captured one ",time,lessThan(timer.time()));
    }
  }
);
  assertThat("captured time shouldn't change",lastRead.time(),equalTo(time));
  if (randomBoolean()) {
    timer.stop();
    assertThat(timer.stopTime(),greaterThanOrEqualTo(timer.startTime()));
    assertThat(timer.time(),greaterThan(0L));
    lastRead=streamer.serializeDeserialize();
    assertThat(lastRead.startTime(),equalTo(timer.startTime()));
    assertThat(lastRead.time(),equalTo(timer.time()));
    assertThat(lastRead.stopTime(),equalTo(timer.stopTime()));
  }
  timer.reset();
  assertThat(timer.startTime(),equalTo(0L));
  assertThat(timer.time(),equalTo(0L));
  assertThat(timer.stopTime(),equalTo(0L));
  lastRead=streamer.serializeDeserialize();
  assertThat(lastRead.startTime(),equalTo(0L));
  assertThat(lastRead.time(),equalTo(0L));
  assertThat(lastRead.stopTime(),equalTo(0L));
}
