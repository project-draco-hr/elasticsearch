{
  URL[] resources=new URL[paths.length];
  for (int i=0; i < paths.length; i++) {
    resources[i]=Thread.currentThread().getContextClassLoader().getResource("responses/" + paths[i].replace("fail:",""));
    if (resources[i] == null) {
      throw new IllegalArgumentException("Couldn't find [" + paths[i] + "]");
    }
  }
  RemoteScrollableHitSource.AsyncClient client=new RemoteScrollableHitSource.AsyncClient(){
    int responseCount=0;
    @Override public void performRequest(    String method,    String uri,    Map<String,String> params,    HttpEntity entity,    ResponseListener listener){
      try {
        URL resource=resources[responseCount];
        String path=paths[responseCount++];
        InputStream stream=resource.openStream();
        if (path.startsWith("fail:")) {
          String body=Streams.copyToString(new InputStreamReader(entity.getContent(),StandardCharsets.UTF_8));
          if (path.equals("fail:rejection.json")) {
            listener.onRetryableFailure(new RuntimeException(body));
          }
 else {
            listener.onFailure(new RuntimeException(body));
          }
        }
 else {
          listener.onResponse(stream);
        }
      }
 catch (      IOException e) {
        listener.onFailure(e);
      }
    }
    @Override public void close() throws IOException {
    }
  }
;
  TestRemoteScrollableHitSource hitSource=new TestRemoteScrollableHitSource(client){
    @Override void lookupRemoteVersion(    Consumer<Version> onVersion){
      if (mockRemoteVersion) {
        onVersion.accept(Version.CURRENT);
      }
 else {
        super.lookupRemoteVersion(onVersion);
      }
    }
  }
;
  if (mockRemoteVersion) {
    hitSource.remoteVersion=Version.CURRENT;
  }
  return hitSource;
}
