{
  boolean verbose=request.paramAsBoolean("v",false);
  boolean help=request.paramAsBoolean("h",false);
  if (help) {
    int[] width=buildHelpWidths(table,request,verbose);
    StringBuilder out=new StringBuilder();
    for (    Table.Cell cell : table.getHeaders()) {
      pad(new Table.Cell(cell.value),width[0],request,out);
      out.append(" ");
      pad(new Table.Cell(cell.attr.containsKey("desc") ? cell.attr.get("desc") : "not available"),width[1],request,out);
      out.append("\n");
    }
    return new StringRestResponse(RestStatus.OK,out.toString());
  }
  List<String> headers=buildDisplayHeaders(table,request);
  int[] width=buildWidths(table,request,verbose,headers);
  StringBuilder out=new StringBuilder();
  if (verbose) {
    for (int col=0; col < headers.size(); col++) {
      pad(table.findHeaderByName(headers.get(col)),width[col],request,out);
      out.append(" ");
    }
    out.append("\n");
  }
  for (int row=0; row < table.getRows().size(); row++) {
    for (int col=0; col < headers.size(); col++) {
      String header=headers.get(col);
      pad(table.getAsMap().get(header).get(row),width[col],request,out);
      out.append(" ");
    }
    out.append("\n");
  }
  return new StringRestResponse(RestStatus.OK,out.toString());
}
