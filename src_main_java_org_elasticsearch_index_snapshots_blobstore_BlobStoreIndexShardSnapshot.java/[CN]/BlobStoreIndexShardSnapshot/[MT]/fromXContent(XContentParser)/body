{
  String snapshot=null;
  long indexVersion=-1;
  long startTime=0;
  long time=0;
  int numberOfFiles=0;
  long totalSize=0;
  List<FileInfo> indexFiles=newArrayList();
  XContentParser.Token token=parser.currentToken();
  if (token == XContentParser.Token.START_OBJECT) {
    while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
      if (token == XContentParser.Token.FIELD_NAME) {
        String currentFieldName=parser.currentName();
        token=parser.nextToken();
        if (token.isValue()) {
          if (ParseFields.NAME.match(currentFieldName)) {
            snapshot=parser.text();
          }
 else           if (ParseFields.INDEX_VERSION.match(currentFieldName)) {
            indexVersion=parser.longValue();
          }
 else           if (ParseFields.START_TIME.match(currentFieldName)) {
            startTime=parser.longValue();
          }
 else           if (ParseFields.TIME.match(currentFieldName)) {
            time=parser.longValue();
          }
 else           if (ParseFields.NUMBER_OF_FILES.match(currentFieldName)) {
            numberOfFiles=parser.intValue();
          }
 else           if (ParseFields.TOTAL_SIZE.match(currentFieldName)) {
            totalSize=parser.longValue();
          }
 else {
            throw new ElasticsearchParseException("unknown parameter [" + currentFieldName + "]");
          }
        }
 else         if (token == XContentParser.Token.START_ARRAY) {
          if (ParseFields.FILES.match(currentFieldName)) {
            while ((parser.nextToken()) != XContentParser.Token.END_ARRAY) {
              indexFiles.add(FileInfo.fromXContent(parser));
            }
          }
 else {
            throw new ElasticsearchParseException("unknown parameter [" + currentFieldName + "]");
          }
        }
 else {
          throw new ElasticsearchParseException("unexpected token  [" + token + "]");
        }
      }
 else {
        throw new ElasticsearchParseException("unexpected token  [" + token + "]");
      }
    }
  }
  return new BlobStoreIndexShardSnapshot(snapshot,indexVersion,ImmutableList.<FileInfo>copyOf(indexFiles),startTime,time,numberOfFiles,totalSize);
}
