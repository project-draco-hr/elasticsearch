{
  SearchResponse searchResponse=client().prepareSearch("idx").setQuery(matchAllQuery()).addAggregation(global("global").subAggregation(extendedStats("stats").field("value"))).execute().actionGet();
  assertHitCount(searchResponse,10);
  Global global=searchResponse.getAggregations().get("global");
  assertThat(global,notNullValue());
  assertThat(global.getName(),equalTo("global"));
  assertThat(global.getDocCount(),equalTo(10l));
  assertThat(global.getAggregations(),notNullValue());
  assertThat(global.getAggregations().asMap().size(),equalTo(1));
  ExtendedStats stats=global.getAggregations().get("stats");
  assertThat(stats,notNullValue());
  assertThat(stats.getName(),equalTo("stats"));
  ExtendedStats statsFromProperty=(ExtendedStats)global.getProperty("stats");
  assertThat(statsFromProperty,notNullValue());
  assertThat(statsFromProperty,sameInstance(stats));
  double expectedAvgValue=(double)(1 + 2 + 3+ 4+ 5+ 6+ 7+ 8+ 9+ 10) / 10;
  assertThat(stats.getAvg(),equalTo(expectedAvgValue));
  assertThat((double)global.getProperty("stats.avg"),equalTo(expectedAvgValue));
  double expectedMinValue=1.0;
  assertThat(stats.getMin(),equalTo(expectedMinValue));
  assertThat((double)global.getProperty("stats.min"),equalTo(expectedMinValue));
  double expectedMaxValue=10.0;
  assertThat(stats.getMax(),equalTo(expectedMaxValue));
  assertThat((double)global.getProperty("stats.max"),equalTo(expectedMaxValue));
  double expectedSumValue=1 + 2 + 3+ 4+ 5+ 6+ 7+ 8+ 9+ 10;
  assertThat(stats.getSum(),equalTo(expectedSumValue));
  assertThat((double)global.getProperty("stats.sum"),equalTo(expectedSumValue));
  long expectedCountValue=10;
  assertThat(stats.getCount(),equalTo(expectedCountValue));
  assertThat((double)global.getProperty("stats.count"),equalTo((double)expectedCountValue));
  double expectedSumOfSquaresValue=(double)1 + 4 + 9+ 16+ 25+ 36+ 49+ 64+ 81+ 100;
  assertThat(stats.getSumOfSquares(),equalTo(expectedSumOfSquaresValue));
  assertThat((double)global.getProperty("stats.sum_of_squares"),equalTo(expectedSumOfSquaresValue));
  double expectedVarianceValue=variance(1,2,3,4,5,6,7,8,9,10);
  assertThat(stats.getVariance(),equalTo(expectedVarianceValue));
  assertThat((double)global.getProperty("stats.variance"),equalTo(expectedVarianceValue));
  double expectedStdDevValue=stdDev(1,2,3,4,5,6,7,8,9,10);
  assertThat(stats.getStdDeviation(),equalTo(expectedStdDevValue));
  assertThat((double)global.getProperty("stats.std_deviation"),equalTo(expectedStdDevValue));
}
