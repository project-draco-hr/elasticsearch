{
  List<IndexRequestBuilder> indexRequests=new ArrayList<>();
  for (int i=0; i < 20; i++) {
    indexRequests.add(client().prepareIndex("test","type").setId(Integer.toString(i)).setSource(jsonBuilder().startObject().field("number_field",i).field("text","text").endObject()));
  }
  indexRandom(true,true,indexRequests);
  client().admin().indices().prepareRefresh().execute().actionGet();
  ensureYellow();
  SearchResponse response=client().search(searchRequest().searchType(SearchType.QUERY_THEN_FETCH).source(searchSource().explain(true).query(functionScoreQuery(termQuery("text","text"),scriptFunction(new Script("native_explainable_script",ScriptType.INLINE,"native",null))).boostMode(CombineFunction.REPLACE)))).actionGet();
  ElasticsearchAssertions.assertNoFailures(response);
  SearchHits hits=response.getHits();
  assertThat(hits.getTotalHits(),equalTo(20l));
  int idCounter=19;
  for (  SearchHit hit : hits.getHits()) {
    assertThat(hit.getId(),equalTo(Integer.toString(idCounter)));
    assertThat(hit.explanation().toString(),containsString(Double.toString(idCounter) + " = This script returned " + Double.toString(idCounter)));
    assertThat(hit.explanation().toString(),containsString("1.0 = tf(freq=1.0), with freq of"));
    assertThat(hit.explanation().getDetails().length,equalTo(2));
    idCounter--;
  }
}
