{
  if (publishHosts == null || publishHosts.length == 0) {
    if (GLOBAL_NETWORK_PUBLISHHOST_SETTING.exists(settings) || GLOBAL_NETWORK_HOST_SETTING.exists(settings)) {
      publishHosts=GLOBAL_NETWORK_PUBLISHHOST_SETTING.get(settings).toArray(Strings.EMPTY_ARRAY);
    }
 else {
      for (      CustomNameResolver customNameResolver : customNameResolvers) {
        InetAddress addresses[]=customNameResolver.resolveDefault();
        if (addresses != null) {
          return addresses[0];
        }
      }
      publishHosts=GLOBAL_NETWORK_PUBLISHHOST_SETTING.get(settings).toArray(Strings.EMPTY_ARRAY);
    }
  }
  InetAddress addresses[]=resolveInetAddresses(publishHosts);
  if (addresses.length == 1 && addresses[0].isAnyLocalAddress()) {
    HashSet<InetAddress> all=new HashSet<>(Arrays.asList(NetworkUtils.getAllAddresses()));
    addresses=all.toArray(new InetAddress[all.size()]);
  }
  for (  InetAddress address : addresses) {
    if (address.isMulticastAddress()) {
      throw new IllegalArgumentException("publish address: {" + NetworkAddress.format(address) + "} is invalid: multicast address");
    }
    if (address.isAnyLocalAddress()) {
      throw new IllegalArgumentException("publish address: {" + NetworkAddress.format(address) + "} is wildcard, but multiple addresses specified: this makes no sense");
    }
  }
  if (addresses.length > 1) {
    List<InetAddress> sorted=new ArrayList<>(Arrays.asList(addresses));
    NetworkUtils.sortAddresses(sorted);
    addresses=new InetAddress[]{sorted.get(0)};
  }
  return addresses[0];
}
