{
  if (actual.equals(expected)) {
    return null;
  }
switch (actual.sort) {
case BOOL:
switch (expected.sort) {
case DEF:
      return new Cast(actual,Definition.DEF_TYPE,explicit,false,false,true,false);
case OBJECT:
    if (Definition.OBJECT_TYPE.equals(expected) && internal)     return new Cast(actual,actual,explicit,false,false,false,true);
  break;
case BOOL_OBJ:
if (internal) return new Cast(actual,actual,explicit,false,false,false,true);
}
break;
case BYTE:
switch (expected.sort) {
case SHORT:
case INT:
case LONG:
case FLOAT:
case DOUBLE:
return new Cast(actual,expected,explicit);
case CHAR:
if (explicit) return new Cast(actual,expected,true);
break;
case DEF:
return new Cast(actual,Definition.DEF_TYPE,explicit,false,false,true,false);
case OBJECT:
if (Definition.OBJECT_TYPE.equals(expected) && internal) return new Cast(actual,actual,explicit,false,false,false,true);
break;
case NUMBER:
case BYTE_OBJ:
if (internal) return new Cast(actual,actual,explicit,false,false,false,true);
break;
case SHORT_OBJ:
if (internal) return new Cast(actual,Definition.SHORT_TYPE,explicit,false,false,false,true);
break;
case INT_OBJ:
if (internal) return new Cast(actual,Definition.INT_TYPE,explicit,false,false,false,true);
break;
case LONG_OBJ:
if (internal) return new Cast(actual,Definition.LONG_TYPE,explicit,false,false,false,true);
break;
case FLOAT_OBJ:
if (internal) return new Cast(actual,Definition.FLOAT_TYPE,explicit,false,false,false,true);
break;
case DOUBLE_OBJ:
if (internal) return new Cast(actual,Definition.DOUBLE_TYPE,explicit,false,false,false,true);
break;
case CHAR_OBJ:
if (explicit && internal) return new Cast(actual,Definition.CHAR_TYPE,explicit,false,false,false,true);
break;
}
break;
case SHORT:
switch (expected.sort) {
case INT:
case LONG:
case FLOAT:
case DOUBLE:
return new Cast(actual,expected,explicit);
case BYTE:
case CHAR:
if (explicit) return new Cast(actual,expected,true);
break;
case DEF:
return new Cast(actual,Definition.DEF_TYPE,explicit,false,false,true,false);
case OBJECT:
if (Definition.OBJECT_TYPE.equals(expected) && internal) return new Cast(actual,actual,explicit,false,false,false,true);
break;
case NUMBER:
case SHORT_OBJ:
if (internal) return new Cast(actual,actual,explicit,false,false,false,true);
break;
case INT_OBJ:
if (internal) return new Cast(actual,Definition.INT_TYPE,explicit,false,false,false,true);
break;
case LONG_OBJ:
if (internal) return new Cast(actual,Definition.LONG_TYPE,explicit,false,false,false,true);
break;
case FLOAT_OBJ:
if (internal) return new Cast(actual,Definition.FLOAT_TYPE,explicit,false,false,false,true);
break;
case DOUBLE_OBJ:
if (internal) return new Cast(actual,Definition.DOUBLE_TYPE,explicit,false,false,false,true);
break;
case BYTE_OBJ:
if (explicit && internal) return new Cast(actual,Definition.BYTE_TYPE,true,false,false,false,true);
break;
case CHAR_OBJ:
if (explicit && internal) return new Cast(actual,Definition.CHAR_TYPE,true,false,false,false,true);
break;
}
break;
case CHAR:
switch (expected.sort) {
case INT:
case LONG:
case FLOAT:
case DOUBLE:
return new Cast(actual,expected,explicit);
case BYTE:
case SHORT:
if (explicit) return new Cast(actual,expected,true);
break;
case DEF:
return new Cast(actual,Definition.DEF_TYPE,explicit,false,false,true,false);
case OBJECT:
if (Definition.OBJECT_TYPE.equals(expected) && internal) return new Cast(actual,actual,explicit,false,false,false,true);
break;
case NUMBER:
case CHAR_OBJ:
if (internal) return new Cast(actual,actual,explicit,false,false,false,true);
break;
case STRING:
return new Cast(actual,Definition.STRING_TYPE,explicit,false,false,false,false);
case INT_OBJ:
if (internal) return new Cast(actual,Definition.INT_TYPE,explicit,false,false,false,true);
break;
case LONG_OBJ:
if (internal) return new Cast(actual,Definition.LONG_TYPE,explicit,false,false,false,true);
break;
case FLOAT_OBJ:
if (internal) return new Cast(actual,Definition.FLOAT_TYPE,explicit,false,false,false,true);
break;
case DOUBLE_OBJ:
if (internal) return new Cast(actual,Definition.DOUBLE_TYPE,explicit,false,false,false,true);
break;
case BYTE_OBJ:
if (explicit && internal) return new Cast(actual,Definition.BYTE_TYPE,true,false,false,false,true);
break;
case SHORT_OBJ:
if (explicit && internal) return new Cast(actual,Definition.SHORT_TYPE,true,false,false,false,true);
break;
}
break;
case INT:
switch (expected.sort) {
case LONG:
case FLOAT:
case DOUBLE:
return new Cast(actual,expected,explicit);
case BYTE:
case SHORT:
case CHAR:
if (explicit) return new Cast(actual,expected,true);
break;
case DEF:
return new Cast(actual,Definition.DEF_TYPE,explicit,false,false,true,false);
case OBJECT:
if (Definition.OBJECT_TYPE.equals(expected) && internal) return new Cast(actual,actual,explicit,false,false,false,true);
break;
case NUMBER:
case INT_OBJ:
if (internal) return new Cast(actual,actual,explicit,false,false,false,true);
break;
case LONG_OBJ:
if (internal) return new Cast(actual,Definition.LONG_TYPE,explicit,false,false,false,true);
break;
case FLOAT_OBJ:
if (internal) return new Cast(actual,Definition.FLOAT_TYPE,explicit,false,false,false,true);
break;
case DOUBLE_OBJ:
if (internal) return new Cast(actual,Definition.DOUBLE_TYPE,explicit,false,false,false,true);
break;
case BYTE_OBJ:
if (explicit && internal) return new Cast(actual,Definition.BYTE_TYPE,true,false,false,false,true);
break;
case SHORT_OBJ:
if (explicit && internal) return new Cast(actual,Definition.SHORT_TYPE,true,false,false,false,true);
break;
case CHAR_OBJ:
if (explicit && internal) return new Cast(actual,Definition.CHAR_TYPE,true,false,false,false,true);
break;
}
break;
case LONG:
switch (expected.sort) {
case FLOAT:
case DOUBLE:
return new Cast(actual,expected,explicit);
case BYTE:
case SHORT:
case CHAR:
case INT:
if (explicit) return new Cast(actual,expected,true);
break;
case DEF:
return new Cast(actual,Definition.DEF_TYPE,explicit,false,false,true,false);
case OBJECT:
if (Definition.OBJECT_TYPE.equals(expected) && internal) return new Cast(actual,actual,explicit,false,false,false,true);
break;
case NUMBER:
case LONG_OBJ:
if (internal) return new Cast(actual,actual,explicit,false,false,false,true);
break;
case FLOAT_OBJ:
if (internal) return new Cast(actual,Definition.FLOAT_TYPE,explicit,false,false,false,true);
break;
case DOUBLE_OBJ:
if (internal) return new Cast(actual,Definition.DOUBLE_TYPE,explicit,false,false,false,true);
break;
case BYTE_OBJ:
if (explicit && internal) return new Cast(actual,Definition.BYTE_TYPE,true,false,false,false,true);
break;
case SHORT_OBJ:
if (explicit && internal) return new Cast(actual,Definition.SHORT_TYPE,true,false,false,false,true);
break;
case CHAR_OBJ:
if (explicit && internal) return new Cast(actual,Definition.CHAR_TYPE,true,false,false,false,true);
break;
case INT_OBJ:
if (explicit && internal) return new Cast(actual,Definition.INT_TYPE,true,false,false,false,true);
break;
}
break;
case FLOAT:
switch (expected.sort) {
case DOUBLE:
return new Cast(actual,expected,explicit);
case BYTE:
case SHORT:
case CHAR:
case INT:
case FLOAT:
if (explicit) return new Cast(actual,expected,true);
break;
case DEF:
return new Cast(actual,Definition.DEF_TYPE,explicit,false,false,true,false);
case OBJECT:
if (Definition.OBJECT_TYPE.equals(expected) && internal) return new Cast(actual,actual,explicit,false,false,false,true);
break;
case NUMBER:
case FLOAT_OBJ:
if (internal) return new Cast(actual,actual,explicit,false,false,false,true);
break;
case DOUBLE_OBJ:
if (internal) return new Cast(actual,Definition.DOUBLE_TYPE,explicit,false,false,false,true);
break;
case BYTE_OBJ:
if (explicit && internal) return new Cast(actual,Definition.BYTE_TYPE,true,false,false,false,true);
break;
case SHORT_OBJ:
if (explicit && internal) return new Cast(actual,Definition.SHORT_TYPE,true,false,false,false,true);
break;
case CHAR_OBJ:
if (explicit && internal) return new Cast(actual,Definition.CHAR_TYPE,true,false,false,false,true);
break;
case INT_OBJ:
if (explicit && internal) return new Cast(actual,Definition.INT_TYPE,true,false,false,false,true);
break;
case LONG_OBJ:
if (explicit && internal) return new Cast(actual,Definition.LONG_TYPE,true,false,false,false,true);
break;
}
break;
case DOUBLE:
switch (expected.sort) {
case BYTE:
case SHORT:
case CHAR:
case INT:
case FLOAT:
if (explicit) return new Cast(actual,expected,true);
break;
case DEF:
return new Cast(actual,Definition.DEF_TYPE,explicit,false,false,true,false);
case OBJECT:
if (Definition.OBJECT_TYPE.equals(expected) && internal) return new Cast(actual,actual,explicit,false,false,false,true);
break;
case NUMBER:
case DOUBLE_OBJ:
if (internal) return new Cast(actual,actual,explicit,false,false,false,true);
break;
case BYTE_OBJ:
if (explicit && internal) return new Cast(actual,Definition.BYTE_TYPE,true,false,false,false,true);
break;
case SHORT_OBJ:
if (explicit && internal) return new Cast(actual,Definition.SHORT_TYPE,true,false,false,false,true);
break;
case CHAR_OBJ:
if (explicit && internal) return new Cast(actual,Definition.CHAR_TYPE,true,false,false,false,true);
break;
case INT_OBJ:
if (explicit && internal) return new Cast(actual,Definition.INT_TYPE,true,false,false,false,true);
break;
case LONG_OBJ:
if (explicit && internal) return new Cast(actual,Definition.LONG_TYPE,true,false,false,false,true);
break;
case FLOAT_OBJ:
if (explicit && internal) return new Cast(actual,Definition.FLOAT_TYPE,true,false,false,false,true);
break;
}
break;
case OBJECT:
if (Definition.OBJECT_TYPE.equals(actual)) switch (expected.sort) {
case BYTE:
if (internal && explicit) return new Cast(actual,Definition.BYTE_OBJ_TYPE,true,false,true,false,false);
break;
case SHORT:
if (internal && explicit) return new Cast(actual,Definition.SHORT_OBJ_TYPE,true,false,true,false,false);
break;
case CHAR:
if (internal && explicit) return new Cast(actual,Definition.CHAR_OBJ_TYPE,true,false,true,false,false);
break;
case INT:
if (internal && explicit) return new Cast(actual,Definition.INT_OBJ_TYPE,true,false,true,false,false);
break;
case LONG:
if (internal && explicit) return new Cast(actual,Definition.LONG_OBJ_TYPE,true,false,true,false,false);
break;
case FLOAT:
if (internal && explicit) return new Cast(actual,Definition.FLOAT_OBJ_TYPE,true,false,true,false,false);
break;
case DOUBLE:
if (internal && explicit) return new Cast(actual,Definition.DOUBLE_OBJ_TYPE,true,false,true,false,false);
break;
}
break;
case NUMBER:
switch (expected.sort) {
case BYTE:
if (internal && explicit) return new Cast(actual,Definition.BYTE_OBJ_TYPE,true,false,true,false,false);
break;
case SHORT:
if (internal && explicit) return new Cast(actual,Definition.SHORT_OBJ_TYPE,true,false,true,false,false);
break;
case CHAR:
if (internal && explicit) return new Cast(actual,Definition.CHAR_OBJ_TYPE,true,false,true,false,false);
break;
case INT:
if (internal && explicit) return new Cast(actual,Definition.INT_OBJ_TYPE,true,false,true,false,false);
break;
case LONG:
if (internal && explicit) return new Cast(actual,Definition.LONG_OBJ_TYPE,true,false,true,false,false);
break;
case FLOAT:
if (internal && explicit) return new Cast(actual,Definition.FLOAT_OBJ_TYPE,true,false,true,false,false);
break;
case DOUBLE:
if (internal && explicit) return new Cast(actual,Definition.DOUBLE_OBJ_TYPE,true,false,true,false,false);
break;
}
break;
case BOOL_OBJ:
switch (expected.sort) {
case BOOL:
if (internal) return new Cast(actual,expected,explicit,true,false,false,false);
break;
}
break;
case BYTE_OBJ:
switch (expected.sort) {
case BYTE:
case SHORT:
case INT:
case LONG:
case FLOAT:
case DOUBLE:
if (internal) return new Cast(actual,expected,explicit,true,false,false,false);
break;
case CHAR:
if (internal && explicit) return new Cast(actual,expected,true,true,false,false,false);
break;
}
break;
case SHORT_OBJ:
switch (expected.sort) {
case SHORT:
case INT:
case LONG:
case FLOAT:
case DOUBLE:
if (internal) return new Cast(actual,expected,explicit,true,false,false,false);
break;
case BYTE:
case CHAR:
if (internal && explicit) return new Cast(actual,expected,true,true,false,false,false);
break;
}
break;
case CHAR_OBJ:
switch (expected.sort) {
case CHAR:
case INT:
case LONG:
case FLOAT:
case DOUBLE:
if (internal) return new Cast(actual,expected,explicit,true,false,false,false);
break;
case BYTE:
case SHORT:
if (internal && explicit) return new Cast(actual,expected,true,true,false,false,false);
break;
}
break;
case INT_OBJ:
switch (expected.sort) {
case INT:
case LONG:
case FLOAT:
case DOUBLE:
if (internal) return new Cast(actual,expected,explicit,true,false,false,false);
break;
case BYTE:
case SHORT:
case CHAR:
if (internal && explicit) return new Cast(actual,expected,true,true,false,false,false);
break;
}
break;
case LONG_OBJ:
switch (expected.sort) {
case LONG:
case FLOAT:
case DOUBLE:
if (internal) return new Cast(actual,expected,explicit,true,false,false,false);
break;
case BYTE:
case SHORT:
case CHAR:
case INT:
if (internal && explicit) return new Cast(actual,expected,true,true,false,false,false);
break;
}
break;
case FLOAT_OBJ:
switch (expected.sort) {
case FLOAT:
case DOUBLE:
if (internal) return new Cast(actual,expected,explicit,true,false,false,false);
break;
case BYTE:
case SHORT:
case CHAR:
case INT:
case LONG:
if (internal && explicit) return new Cast(actual,expected,true,true,false,false,false);
break;
}
break;
case DOUBLE_OBJ:
switch (expected.sort) {
case FLOAT:
case DOUBLE:
if (internal) return new Cast(actual,expected,explicit,true,false,false,false);
break;
case BYTE:
case SHORT:
case CHAR:
case INT:
case LONG:
if (internal && explicit) return new Cast(actual,expected,true,true,false,false,false);
break;
}
break;
case DEF:
switch (expected.sort) {
case BOOL:
case BYTE:
case SHORT:
case CHAR:
case INT:
case LONG:
case FLOAT:
case DOUBLE:
return new Cast(actual,expected,explicit,true,false,false,false);
}
break;
case STRING:
switch (expected.sort) {
case CHAR:
if (explicit) return new Cast(actual,expected,true,false,false,false,false);
break;
}
break;
}
if (actual.sort == Sort.DEF || expected.sort == Sort.DEF || expected.clazz.isAssignableFrom(actual.clazz) || explicit && actual.clazz.isAssignableFrom(expected.clazz)) {
return new Cast(actual,expected,explicit);
}
 else {
throw location.createError(new ClassCastException("Cannot cast from [" + actual.name + "] to ["+ expected.name+ "]."));
}
}
