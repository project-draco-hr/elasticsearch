{
  final Sort fsort=cast.from.sort;
  final Sort tsort=cast.to.sort;
  if (fsort == tsort) {
    return constant;
  }
 else   if (fsort == Sort.STRING && tsort == Sort.CHAR) {
    return Utility.StringTochar((String)constant);
  }
 else   if (fsort == Sort.CHAR && tsort == Sort.STRING) {
    return Utility.charToString((char)constant);
  }
 else   if (fsort.numeric && tsort.numeric) {
    final Number number;
    if (fsort == Sort.CHAR) {
      number=(int)(char)constant;
    }
 else {
      number=(Number)constant;
    }
switch (tsort) {
case BYTE:
      return number.byteValue();
case SHORT:
    return number.shortValue();
case CHAR:
  return (char)number.intValue();
case INT:
return number.intValue();
case LONG:
return number.longValue();
case FLOAT:
return number.floatValue();
case DOUBLE:
return number.doubleValue();
default :
throw location.createError(new IllegalStateException("Cannot cast from " + "[" + cast.from.clazz.getCanonicalName() + "] to ["+ cast.to.clazz.getCanonicalName()+ "]."));
}
}
 else {
throw location.createError(new IllegalStateException("Cannot cast from " + "[" + cast.from.clazz.getCanonicalName() + "] to ["+ cast.to.clazz.getCanonicalName()+ "]."));
}
}
