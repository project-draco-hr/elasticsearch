{
  double expectedScore;
switch (scoreMode) {
case MULTIPLY:
    expectedScore=1.0;
  break;
case MAX:
expectedScore=Float.MAX_VALUE * -1.0;
break;
case MIN:
expectedScore=Float.MAX_VALUE;
break;
default :
expectedScore=0.0;
break;
}
float weightSum=0;
for (int i=0; i < weights.length; i++) {
double functionScore=(double)weights[i] * scores[i];
weightSum+=weights[i];
switch (scoreMode) {
case AVG:
expectedScore+=functionScore;
break;
case MAX:
expectedScore=Math.max(functionScore,expectedScore);
break;
case MIN:
expectedScore=Math.min(functionScore,expectedScore);
break;
case SUM:
expectedScore+=functionScore;
break;
case MULTIPLY:
expectedScore*=functionScore;
break;
default :
throw new UnsupportedOperationException();
}
}
if (scoreMode == FiltersFunctionScoreQuery.ScoreMode.AVG) {
expectedScore/=weightSum;
}
return expectedScore;
}
