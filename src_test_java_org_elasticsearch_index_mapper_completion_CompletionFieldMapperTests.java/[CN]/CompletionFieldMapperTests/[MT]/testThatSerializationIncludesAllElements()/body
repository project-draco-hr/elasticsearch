{
  String mapping=jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("completion").field("type","completion").field("analyzer","simple").field("search_analyzer","standard").field("payloads",true).field("preserve_separators",false).field("preserve_position_increments",true).field("max_input_length",14).endObject().endObject().endObject().endObject().string();
  DocumentMapper defaultMapper=createIndex("test").mapperService().documentMapperParser().parse(mapping);
  FieldMapper fieldMapper=defaultMapper.mappers().name("completion").mapper();
  assertThat(fieldMapper,instanceOf(CompletionFieldMapper.class));
  CompletionFieldMapper completionFieldMapper=(CompletionFieldMapper)fieldMapper;
  XContentBuilder builder=jsonBuilder().startObject();
  completionFieldMapper.toXContent(builder,null).endObject();
  builder.close();
  Map<String,Object> serializedMap=JsonXContent.jsonXContent.createParser(builder.bytes()).mapAndClose();
  Map<String,Object> configMap=(Map<String,Object>)serializedMap.get("completion");
  assertThat(configMap.get("analyzer").toString(),is("simple"));
  assertThat(configMap.get("search_analyzer").toString(),is("standard"));
  assertThat(Boolean.valueOf(configMap.get("payloads").toString()),is(true));
  assertThat(Boolean.valueOf(configMap.get("preserve_separators").toString()),is(false));
  assertThat(Boolean.valueOf(configMap.get("preserve_position_increments").toString()),is(true));
  assertThat(Integer.valueOf(configMap.get("max_input_length").toString()),is(14));
}
