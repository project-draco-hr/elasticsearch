{
  super(index,indexSettings);
  this.scriptService=scriptService;
  this.analysisService=analysisService;
  this.mapperService=mapperService;
  this.similarityService=similarityService;
  this.indexCache=indexCache;
  this.fieldDataService=fieldDataService;
  this.bitsetFilterCache=bitsetFilterCache;
  this.defaultField=indexSettings.get(DEFAULT_FIELD,AllFieldMapper.NAME);
  this.queryStringLenient=indexSettings.getAsBoolean(QUERY_STRING_LENIENT,false);
  this.strict=indexSettings.getAsBoolean(PARSE_STRICT,false);
  this.defaultAllowUnmappedFields=indexSettings.getAsBoolean(ALLOW_UNMAPPED,true);
  List<QueryParser> queryParsers=newArrayList();
  if (namedQueryParsers != null) {
    Map<String,Settings> queryParserGroups=indexSettings.getGroups(IndexQueryParserService.Defaults.QUERY_PREFIX);
    for (    Map.Entry<String,QueryParserFactory> entry : namedQueryParsers.entrySet()) {
      String queryParserName=entry.getKey();
      QueryParserFactory queryParserFactory=entry.getValue();
      Settings queryParserSettings=queryParserGroups.get(queryParserName);
      if (queryParserSettings == null) {
        queryParserSettings=EMPTY_SETTINGS;
      }
      queryParsers.add(queryParserFactory.create(queryParserName,queryParserSettings));
    }
  }
  Map<String,QueryParser> queryParsersMap=newHashMap();
  queryParsersMap.putAll(indicesQueriesRegistry.queryParsers());
  if (queryParsers != null) {
    for (    QueryParser queryParser : queryParsers) {
      add(queryParsersMap,queryParser);
    }
  }
  this.queryParsers=ImmutableMap.copyOf(queryParsersMap);
}
