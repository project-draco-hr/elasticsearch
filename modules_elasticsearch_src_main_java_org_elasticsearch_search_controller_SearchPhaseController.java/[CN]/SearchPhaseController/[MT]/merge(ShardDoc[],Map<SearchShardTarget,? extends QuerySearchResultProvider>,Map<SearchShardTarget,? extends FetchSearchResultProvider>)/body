{
  boolean sorted=false;
  int sortScoreIndex=-1;
  QuerySearchResult querySearchResult;
  try {
    querySearchResult=Iterables.get(queryResults.values(),0).queryResult();
  }
 catch (  IndexOutOfBoundsException e) {
    return InternalSearchResponse.EMPTY;
  }
  if (querySearchResult.topDocs() instanceof TopFieldDocs) {
    sorted=true;
    TopFieldDocs fieldDocs=(TopFieldDocs)querySearchResult.queryResult().topDocs();
    for (int i=0; i < fieldDocs.fields.length; i++) {
      if (fieldDocs.fields[i].getType() == SortField.SCORE) {
        sortScoreIndex=i;
      }
    }
  }
  InternalFacets facets=null;
  if (!queryResults.isEmpty()) {
    QuerySearchResult queryResult=queryResults.values().iterator().next().queryResult();
    if (queryResult.facets() != null && queryResult.facets().facets() != null && !queryResult.facets().facets().isEmpty()) {
      List<Facet> aggregatedFacets=Lists.newArrayList();
      List<Facet> namedFacets=Lists.newArrayList();
      for (      Facet facet : queryResult.facets()) {
        namedFacets.clear();
        for (        QuerySearchResultProvider queryResultProvider : queryResults.values()) {
          for (          Facet facet1 : queryResultProvider.queryResult().facets()) {
            if (facet.name().equals(facet1.name())) {
              namedFacets.add(facet1);
            }
          }
        }
        Facet aggregatedFacet=facetProcessors.processor(facet.type()).reduce(facet.name(),namedFacets);
        aggregatedFacets.add(aggregatedFacet);
      }
      facets=new InternalFacets(aggregatedFacets);
    }
  }
  long totalHits=0;
  float maxScore=Float.NEGATIVE_INFINITY;
  boolean timedOut=false;
  for (  QuerySearchResultProvider queryResultProvider : queryResults.values()) {
    if (queryResultProvider.queryResult().searchTimedOut()) {
      timedOut=true;
    }
    totalHits+=queryResultProvider.queryResult().topDocs().totalHits;
    if (!Float.isNaN(queryResultProvider.queryResult().topDocs().getMaxScore())) {
      maxScore=Math.max(maxScore,queryResultProvider.queryResult().topDocs().getMaxScore());
    }
  }
  if (Float.isInfinite(maxScore)) {
    maxScore=Float.NaN;
  }
  for (  FetchSearchResultProvider fetchSearchResultProvider : fetchResults.values()) {
    fetchSearchResultProvider.fetchResult().initCounter();
  }
  List<InternalSearchHit> hits=new ArrayList<InternalSearchHit>();
  if (!fetchResults.isEmpty()) {
    for (    ShardDoc shardDoc : sortedDocs) {
      FetchSearchResultProvider fetchResultProvider=fetchResults.get(shardDoc.shardTarget());
      if (fetchResultProvider == null) {
        continue;
      }
      FetchSearchResult fetchResult=fetchResultProvider.fetchResult();
      int index=fetchResult.counterGetAndIncrement();
      if (index < fetchResult.hits().internalHits().length) {
        InternalSearchHit searchHit=fetchResult.hits().internalHits()[index];
        searchHit.score(shardDoc.score());
        searchHit.shard(fetchResult.shardTarget());
        if (sorted) {
          FieldDoc fieldDoc=(FieldDoc)shardDoc;
          searchHit.sortValues(fieldDoc.fields);
          if (sortScoreIndex != -1) {
            searchHit.score(((Number)fieldDoc.fields[sortScoreIndex]).floatValue());
          }
        }
        hits.add(searchHit);
      }
    }
  }
  InternalSearchHits searchHits=new InternalSearchHits(hits.toArray(new InternalSearchHit[hits.size()]),totalHits,maxScore);
  return new InternalSearchResponse(searchHits,facets,timedOut);
}
