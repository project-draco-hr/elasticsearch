{
  Map<String,String> transportHeaders=randomHeaders(randomIntBetween(0,10));
  Map<String,String> restHeaders=randomHeaders(randomIntBetween(0,10));
  Map<String,String> copiedHeaders=randomHeadersFrom(restHeaders);
  Set<String> usefulRestHeaders=new HashSet<>(copiedHeaders.keySet());
  usefulRestHeaders.addAll(randomMap(randomIntBetween(0,10),"useful-").keySet());
  Map<String,String> restContext=randomContext(randomIntBetween(0,10));
  Map<String,String> transportContext=onlyOnLeft(randomContext(randomIntBetween(0,10)),restContext);
  HashMap<String,String> expectedHeaders=new HashMap<>();
  expectedHeaders.putAll(transportHeaders);
  expectedHeaders.putAll(copiedHeaders);
  Map<String,String> expectedContext=new HashMap<>();
  expectedContext.putAll(transportContext);
  expectedContext.putAll(restContext);
  try (Client client=client(new NoOpClient(getTestName()),new FakeRestRequest(restHeaders,restContext),usefulRestHeaders)){
    ActionRequestBuilder requestBuilders[]=new ActionRequestBuilder[]{client.admin().indices().prepareValidateQuery(),client.admin().indices().prepareCreate("test"),client.admin().indices().prepareAliases(),client.admin().indices().prepareAnalyze("text"),client.admin().indices().prepareDeleteWarmer(),client.admin().indices().prepareTypesExists("type"),client.admin().indices().prepareClose()};
    for (    ActionRequestBuilder requestBuilder : requestBuilders) {
      putHeaders(requestBuilder.request(),transportHeaders);
      putContext(requestBuilder.request(),transportContext);
      assertHeaders(requestBuilder.request(),transportHeaders);
      requestBuilder.get();
      assertHeaders(requestBuilder.request(),expectedHeaders);
      assertContext(requestBuilder.request(),expectedContext);
    }
  }
 }
