{
  String processorTag=randomAsciiOfLengthBetween(1,10);
  boolean isSuccessful=randomBoolean();
  boolean isIgnoredException=randomBoolean();
  SimulateProcessorResult simulateProcessorResult;
  if (isSuccessful) {
    IngestDocument ingestDocument=RandomDocumentPicks.randomIngestDocument(random());
    if (isIgnoredException) {
      simulateProcessorResult=new SimulateProcessorResult(processorTag,ingestDocument,new IllegalArgumentException("test"));
    }
 else {
      simulateProcessorResult=new SimulateProcessorResult(processorTag,ingestDocument);
    }
  }
 else {
    simulateProcessorResult=new SimulateProcessorResult(processorTag,new IllegalArgumentException("test"));
  }
  BytesStreamOutput out=new BytesStreamOutput();
  simulateProcessorResult.writeTo(out);
  StreamInput streamInput=out.bytes().streamInput();
  SimulateProcessorResult otherSimulateProcessorResult=new SimulateProcessorResult(streamInput);
  assertThat(otherSimulateProcessorResult.getProcessorTag(),equalTo(simulateProcessorResult.getProcessorTag()));
  if (isSuccessful) {
    assertIngestDocument(otherSimulateProcessorResult.getIngestDocument(),simulateProcessorResult.getIngestDocument());
    if (isIgnoredException) {
      assertThat(otherSimulateProcessorResult.getFailure(),instanceOf(IllegalArgumentException.class));
      IllegalArgumentException e=(IllegalArgumentException)otherSimulateProcessorResult.getFailure();
      assertThat(e.getMessage(),equalTo("test"));
    }
 else {
      assertThat(otherSimulateProcessorResult.getFailure(),nullValue());
    }
  }
 else {
    assertThat(otherSimulateProcessorResult.getIngestDocument(),is(nullValue()));
    assertThat(otherSimulateProcessorResult.getFailure(),instanceOf(IllegalArgumentException.class));
    IllegalArgumentException e=(IllegalArgumentException)otherSimulateProcessorResult.getFailure();
    assertThat(e.getMessage(),equalTo("test"));
  }
}
