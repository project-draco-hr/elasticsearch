{
  Path genericConfigFolder=createTempDir();
  baseSettings=Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(),createTempDir().toString()).put(Environment.PATH_CONF_SETTING.getKey(),genericConfigFolder).put(ScriptService.SCRIPT_MAX_COMPILATIONS_PER_MINUTE.getKey(),10000).build();
  resourceWatcherService=new ResourceWatcherService(baseSettings,null);
  scriptEngineService=new TestEngineService();
  dangerousScriptEngineService=new TestDangerousEngineService();
  TestEngineService defaultScriptServiceEngine=new TestEngineService(Script.DEFAULT_SCRIPT_LANG){
  }
;
  scriptEnginesByLangMap=ScriptModesTests.buildScriptEnginesByLangMap(new HashSet<>(Arrays.asList(scriptEngineService,defaultScriptServiceEngine)));
  int randomInt=randomIntBetween(0,3);
  Map<String,ScriptContext.Plugin> contexts=new HashMap<>();
  for (int i=0; i < randomInt; i++) {
    String plugin;
    do {
      plugin=randomAsciiOfLength(randomIntBetween(1,10));
    }
 while (ScriptContextRegistry.RESERVED_SCRIPT_CONTEXTS.contains(plugin));
    String operation;
    do {
      operation=randomAsciiOfLength(randomIntBetween(1,30));
    }
 while (ScriptContextRegistry.RESERVED_SCRIPT_CONTEXTS.contains(operation));
    String context=plugin + "_" + operation;
    contexts.put(context,new ScriptContext.Plugin(plugin,operation));
  }
  scriptEngineRegistry=new ScriptEngineRegistry(Arrays.asList(scriptEngineService,dangerousScriptEngineService,defaultScriptServiceEngine));
  scriptContextRegistry=new ScriptContextRegistry(contexts.values());
  scriptSettings=new ScriptSettings(scriptEngineRegistry,scriptContextRegistry);
  scriptContexts=scriptContextRegistry.scriptContexts().toArray(new ScriptContext[scriptContextRegistry.scriptContexts().size()]);
  logger.info("--> setup script service");
  scriptsFilePath=genericConfigFolder.resolve("scripts");
  Files.createDirectories(scriptsFilePath);
}
