{
  for (Iterator<Map.Entry<String,JsonNode>> propsIt=propsNode.getFields(); propsIt.hasNext(); ) {
    Map.Entry<String,JsonNode> entry=propsIt.next();
    String propName=entry.getKey();
    JsonNode propNode=entry.getValue();
    String type;
    JsonNode typeNode=propNode.get("type");
    if (typeNode != null) {
      type=typeNode.getTextValue();
    }
 else {
      if (propNode.isObject() && propNode.get("properties") != null) {
        type=JsonObjectMapper.JSON_TYPE;
      }
 else       if (propNode.isObject() && propNode.get("fields") != null) {
        type=JsonMultiFieldMapper.JSON_TYPE;
      }
 else {
        throw new MapperParsingException("No type specified for property [" + propName + "]");
      }
    }
    if (type.equals(JsonStringFieldMapper.JSON_TYPE)) {
      objBuilder.add(parseString(propName,(ObjectNode)propNode));
    }
 else     if (type.equals(JsonDateFieldMapper.JSON_TYPE)) {
      objBuilder.add(parseDate(propName,(ObjectNode)propNode));
    }
 else     if (type.equals(JsonShortFieldMapper.JSON_TYPE)) {
      objBuilder.add(parseShort(propName,(ObjectNode)propNode));
    }
 else     if (type.equals(JsonIntegerFieldMapper.JSON_TYPE)) {
      objBuilder.add(parseInteger(propName,(ObjectNode)propNode));
    }
 else     if (type.equals(JsonLongFieldMapper.JSON_TYPE)) {
      objBuilder.add(parseLong(propName,(ObjectNode)propNode));
    }
 else     if (type.equals(JsonFloatFieldMapper.JSON_TYPE)) {
      objBuilder.add(parseFloat(propName,(ObjectNode)propNode));
    }
 else     if (type.equals(JsonDoubleFieldMapper.JSON_TYPE)) {
      objBuilder.add(parseDouble(propName,(ObjectNode)propNode));
    }
 else     if (type.equals(JsonBooleanFieldMapper.JSON_TYPE)) {
      objBuilder.add(parseBoolean(propName,(ObjectNode)propNode));
    }
 else     if (type.equals(JsonObjectMapper.JSON_TYPE)) {
      objBuilder.add(parseObject(propName,(ObjectNode)propNode));
    }
 else     if (type.equals(JsonMultiFieldMapper.JSON_TYPE)) {
      objBuilder.add(parseMultiField(propName,(ObjectNode)propNode));
    }
 else     if (type.equals(JsonBinaryFieldMapper.JSON_TYPE)) {
      objBuilder.add(parseBinary(propName,(ObjectNode)propNode));
    }
  }
}
