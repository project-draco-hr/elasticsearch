{
  for (Iterator<Map.Entry<String,JsonNode>> propsIt=propsNode.getFields(); propsIt.hasNext(); ) {
    Map.Entry<String,JsonNode> entry=propsIt.next();
    String propName=entry.getKey();
    JsonNode propNode=entry.getValue();
    String type;
    JsonNode typeNode=propNode.get("type");
    if (typeNode != null) {
      type=typeNode.getTextValue();
    }
 else {
      if (propNode.isObject() && propNode.get("properties") != null) {
        type="object";
      }
 else {
        throw new MapperParsingException("No type specified for property [" + propName + "]");
      }
    }
    if (type.equals("string")) {
      objBuilder.add(parseString(propName,(ObjectNode)propNode));
    }
 else     if (type.equals("date")) {
      objBuilder.add(parseDate(propName,(ObjectNode)propNode));
    }
 else     if (type.equals("integer")) {
      objBuilder.add(parseInteger(propName,(ObjectNode)propNode));
    }
 else     if (type.equals("long")) {
      objBuilder.add(parseLong(propName,(ObjectNode)propNode));
    }
 else     if (type.equals("float")) {
      objBuilder.add(parseFloat(propName,(ObjectNode)propNode));
    }
 else     if (type.equals("double")) {
      objBuilder.add(parseDouble(propName,(ObjectNode)propNode));
    }
 else     if (type.equals("boolean")) {
      objBuilder.add(parseBoolean(propName,(ObjectNode)propNode));
    }
 else     if (type.equals("object")) {
      objBuilder.add(parseObject(propName,(ObjectNode)propNode));
    }
 else     if (type.equals("binary")) {
      objBuilder.add(parseBinary(propName,(ObjectNode)propNode));
    }
  }
}
