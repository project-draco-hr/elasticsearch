{
  JsonObjectMapper.Builder builder=object(name);
  for (Iterator<Map.Entry<String,JsonNode>> fieldsIt=node.getFields(); fieldsIt.hasNext(); ) {
    Map.Entry<String,JsonNode> entry=fieldsIt.next();
    String fieldName=entry.getKey();
    JsonNode fieldNode=entry.getValue();
    if (fieldName.equals("dynamic")) {
      builder.dynamic(nodeBooleanValue(fieldNode));
    }
 else     if (fieldName.equals("type")) {
      String type=fieldNode.getTextValue();
      if (!type.equals("object")) {
        throw new MapperParsingException("Trying to parse an object but has a different type [" + type + "] for ["+ name+ "]");
      }
    }
 else     if (fieldName.equals("dateFormats")) {
      List<FormatDateTimeFormatter> dateTimeFormatters=newArrayList();
      if (fieldNode.isArray()) {
        for (        JsonNode node1 : (ArrayNode)fieldNode) {
          dateTimeFormatters.add(parseDateTimeFormatter(fieldName,node1));
        }
      }
 else       if ("none".equals(fieldNode.getValueAsText())) {
        dateTimeFormatters=null;
      }
 else {
        dateTimeFormatters.add(parseDateTimeFormatter(fieldName,fieldNode));
      }
      if (dateTimeFormatters == null) {
        builder.noDateTimeFormatter();
      }
 else {
        builder.dateTimeFormatter(dateTimeFormatters);
      }
    }
 else     if (fieldName.equals("enabled")) {
      builder.enabled(nodeBooleanValue(fieldNode));
    }
 else     if (fieldName.equals("pathType")) {
      builder.pathType(parsePathType(name,fieldNode.getValueAsText()));
    }
 else     if (fieldName.equals("properties")) {
      parseProperties(builder,(ObjectNode)fieldNode);
    }
 else     if (fieldName.equals("includeInAll")) {
      builder.includeInAll(nodeBooleanValue(fieldNode));
    }
  }
  return builder;
}
