{
  ImmutableOpenMap<String,List<Entry>> warmersResult=ImmutableOpenMap.of();
  ImmutableOpenMap<String,ImmutableOpenMap<String,MappingMetaData>> mappingsResult=ImmutableOpenMap.of();
  ImmutableOpenMap<String,List<AliasMetaData>> aliasesResult=ImmutableOpenMap.of();
  ImmutableOpenMap<String,Settings> settings=ImmutableOpenMap.of();
  Feature[] features=request.features();
  boolean doneAliases=false;
  boolean doneMappings=false;
  boolean doneSettings=false;
  boolean doneWarmers=false;
  for (  Feature feature : features) {
switch (feature) {
case WARMERS:
      if (!doneWarmers) {
        warmersResult=state.metaData().findWarmers(concreteIndices,request.types(),Strings.EMPTY_ARRAY);
        doneWarmers=true;
      }
    break;
case MAPPINGS:
  if (!doneMappings) {
    mappingsResult=state.metaData().findMappings(concreteIndices,request.types());
    doneMappings=true;
  }
break;
case ALIASES:
if (!doneAliases) {
aliasesResult=state.metaData().findAliases(Strings.EMPTY_ARRAY,concreteIndices);
doneAliases=true;
}
break;
case SETTINGS:
if (!doneSettings) {
ImmutableOpenMap.Builder<String,Settings> settingsMapBuilder=ImmutableOpenMap.builder();
for (String index : concreteIndices) {
Settings indexSettings=state.metaData().index(index).getSettings();
if (request.humanReadable()) {
indexSettings=IndexMetaData.addHumanReadableSettings(indexSettings);
}
settingsMapBuilder.put(index,indexSettings);
}
settings=settingsMapBuilder.build();
doneSettings=true;
}
break;
default :
throw new IllegalStateException("feature [" + feature + "] is not valid");
}
}
listener.onResponse(new GetIndexResponse(concreteIndices,warmersResult,mappingsResult,aliasesResult,settings));
}
