{
synchronized (mutex) {
    DocumentMapper docMapper=mappers.get(type);
    if (docMapper == null) {
      return;
    }
    docMapper.close();
    mappers=newMapBuilder(mappers).remove(type).immutableMap();
    for (    FieldMapper mapper : docMapper.mappers()) {
      FieldMappers mappers=nameFieldMappers.get(mapper.names().name());
      if (mappers != null) {
        mappers=mappers.remove(mapper);
        if (mappers.isEmpty()) {
          nameFieldMappers=newMapBuilder(nameFieldMappers).remove(mapper.names().name()).immutableMap();
        }
 else {
          nameFieldMappers=newMapBuilder(nameFieldMappers).put(mapper.names().name(),mappers).immutableMap();
        }
      }
      mappers=indexNameFieldMappers.get(mapper.names().indexName());
      if (mappers != null) {
        mappers=mappers.remove(mapper);
        if (mappers.isEmpty()) {
          indexNameFieldMappers=newMapBuilder(indexNameFieldMappers).remove(mapper.names().indexName()).immutableMap();
        }
 else {
          indexNameFieldMappers=newMapBuilder(indexNameFieldMappers).put(mapper.names().indexName(),mappers).immutableMap();
        }
      }
      mappers=fullNameFieldMappers.get(mapper.names().fullName());
      if (mappers != null) {
        mappers=mappers.remove(mapper);
        if (mappers.isEmpty()) {
          fullNameFieldMappers=newMapBuilder(fullNameFieldMappers).remove(mapper.names().fullName()).immutableMap();
        }
 else {
          fullNameFieldMappers=newMapBuilder(fullNameFieldMappers).put(mapper.names().fullName(),mappers).immutableMap();
        }
      }
    }
    for (    ObjectMapper mapper : docMapper.objectMappers().values()) {
      ObjectMappers mappers=objectMappers.get(mapper.fullPath());
      if (mappers != null) {
        mappers=mappers.remove(mapper);
        if (mappers.isEmpty()) {
          objectMappers=newMapBuilder(objectMappers).remove(mapper.fullPath()).immutableMap();
        }
 else {
          objectMappers=newMapBuilder(objectMappers).put(mapper.fullPath(),mappers).immutableMap();
        }
      }
    }
  }
}
