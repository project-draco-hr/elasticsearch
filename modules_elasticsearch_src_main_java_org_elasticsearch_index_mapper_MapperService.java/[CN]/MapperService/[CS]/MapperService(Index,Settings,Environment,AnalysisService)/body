{
  super(index,indexSettings);
  this.documentParser=new XContentDocumentMapperParser(analysisService);
  this.searchAnalyzer=new SmartIndexNameSearchAnalyzer(analysisService.defaultSearchAnalyzer());
  this.dynamic=componentSettings.getAsBoolean("dynamic",true);
  String dynamicMappingLocation=componentSettings.get("dynamic_mapping_location");
  URL dynamicMappingUrl;
  if (dynamicMappingLocation == null) {
    try {
      dynamicMappingUrl=environment.resolveConfig("dynamic-mapping.json");
    }
 catch (    FailedToResolveConfigException e) {
      dynamicMappingUrl=indexSettings.getClassLoader().getResource("org/elasticsearch/index/mapper/xcontent/dynamic-mapping.json");
    }
  }
 else {
    try {
      dynamicMappingUrl=environment.resolveConfig(dynamicMappingLocation);
    }
 catch (    FailedToResolveConfigException e) {
      try {
        dynamicMappingUrl=new File(dynamicMappingLocation).toURI().toURL();
      }
 catch (      MalformedURLException e1) {
        throw new FailedToResolveConfigException("Failed to resolve dynamic mapping location [" + dynamicMappingLocation + "]");
      }
    }
  }
  this.dynamicMappingUrl=dynamicMappingUrl;
  if (dynamicMappingLocation == null) {
    this.dynamicMappingLocation=dynamicMappingUrl.toExternalForm();
  }
 else {
    this.dynamicMappingLocation=dynamicMappingLocation;
  }
  if (dynamic) {
    try {
      dynamicMappingSource=Streams.copyToString(new InputStreamReader(dynamicMappingUrl.openStream(),"UTF-8"));
    }
 catch (    IOException e) {
      throw new MapperException("Failed to load default mapping source from [" + dynamicMappingLocation + "]",e);
    }
  }
 else {
    dynamicMappingSource=null;
  }
  logger.debug("using dynamic[{}] with location[{}] and source[{}]",dynamic,dynamicMappingLocation,dynamicMappingSource);
}
