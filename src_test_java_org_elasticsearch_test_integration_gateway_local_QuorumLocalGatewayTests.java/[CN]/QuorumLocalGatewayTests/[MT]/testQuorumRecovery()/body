{
  logger.info("--> cleaning nodes");
  buildNode("node1",settingsBuilder().put("gateway.type","local").build());
  buildNode("node2",settingsBuilder().put("gateway.type","local").build());
  buildNode("node3",settingsBuilder().put("gateway.type","local").build());
  cleanAndCloseNodes();
  logger.info("--> starting 3 nodes");
  Node node1=startNode("node1",settingsBuilder().put("gateway.type","local").put("index.number_of_shards",2).put("index.number_of_replicas",2).build());
  Node node2=startNode("node2",settingsBuilder().put("gateway.type","local").put("index.number_of_shards",2).put("index.number_of_replicas",2).build());
  Node node3=startNode("node3",settingsBuilder().put("gateway.type","local").put("index.number_of_shards",2).put("index.number_of_replicas",2).build());
  logger.info("--> indexing...");
  node1.client().prepareIndex("test","type1","1").setSource(jsonBuilder().startObject().field("field","value1").endObject()).execute().actionGet();
  node1.client().admin().indices().prepareFlush().execute().actionGet();
  node1.client().prepareIndex("test","type1","2").setSource(jsonBuilder().startObject().field("field","value2").endObject()).execute().actionGet();
  node1.client().admin().indices().prepareRefresh().execute().actionGet();
  logger.info("--> running cluster_health (wait for the shards to startup)");
  ClusterHealthResponse clusterHealth=client("node1").admin().cluster().health(clusterHealthRequest().waitForGreenStatus().waitForActiveShards(6)).actionGet();
  logger.info("--> done cluster_health, status " + clusterHealth.status());
  assertThat(clusterHealth.timedOut(),equalTo(false));
  assertThat(clusterHealth.status(),equalTo(ClusterHealthStatus.GREEN));
  for (int i=0; i < 10; i++) {
    assertThat(node1.client().prepareCount().setQuery(matchAllQuery()).execute().actionGet().count(),equalTo(2l));
  }
  logger.info("--> closing first node, and indexing more data to the second node");
  closeNode("node1");
  logger.info("--> running cluster_health (wait for the shards to startup)");
  clusterHealth=client("node2").admin().cluster().health(clusterHealthRequest().waitForYellowStatus().waitForNodes("2").waitForActiveShards(4)).actionGet();
  logger.info("--> done cluster_health, status " + clusterHealth.status());
  assertThat(clusterHealth.timedOut(),equalTo(false));
  assertThat(clusterHealth.status(),equalTo(ClusterHealthStatus.YELLOW));
  node2.client().prepareIndex("test","type1","3").setSource(jsonBuilder().startObject().field("field","value3").endObject()).execute().actionGet();
  node2.client().admin().indices().prepareRefresh().execute().actionGet();
  for (int i=0; i < 10; i++) {
    assertThat(node2.client().prepareCount().setQuery(matchAllQuery()).execute().actionGet().count(),equalTo(3l));
  }
  logger.info("--> closing the second node and third node");
  closeNode("node2");
  closeNode("node3");
  logger.info("--> starting the nodes back, verifying we got the latest version");
  node1=startNode("node1",settingsBuilder().put("gateway.type","local").build());
  node2=startNode("node2",settingsBuilder().put("gateway.type","local").build());
  node2=startNode("node3",settingsBuilder().put("gateway.type","local").build());
  logger.info("--> running cluster_health (wait for the shards to startup)");
  clusterHealth=client("node1").admin().cluster().health(clusterHealthRequest().waitForGreenStatus().waitForActiveShards(6)).actionGet();
  logger.info("--> done cluster_health, status " + clusterHealth.status());
  assertThat(clusterHealth.timedOut(),equalTo(false));
  assertThat(clusterHealth.status(),equalTo(ClusterHealthStatus.GREEN));
  for (int i=0; i < 10; i++) {
    assertThat(node1.client().prepareCount().setQuery(matchAllQuery()).execute().actionGet().count(),equalTo(3l));
  }
}
