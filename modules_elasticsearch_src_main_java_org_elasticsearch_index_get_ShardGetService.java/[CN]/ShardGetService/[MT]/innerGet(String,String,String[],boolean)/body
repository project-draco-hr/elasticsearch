{
  boolean loadSource=gFields == null || gFields.length > 0;
  Engine.GetResult get=null;
  if (type == null || type.equals("_all")) {
    for (    String typeX : mapperService.types()) {
      get=indexShard.get(new Engine.Get(realtime,UidFieldMapper.TERM_FACTORY.createTerm(Uid.createUid(typeX,id))).loadSource(loadSource));
      if (get.exists()) {
        type=typeX;
        break;
      }
 else {
        get.release();
      }
    }
    if (get == null) {
      return new GetResult(shardId.index().name(),type,id,-1,false,null,null);
    }
    if (!get.exists()) {
      return new GetResult(shardId.index().name(),type,id,-1,false,null,null);
    }
  }
 else {
    get=indexShard.get(new Engine.Get(realtime,UidFieldMapper.TERM_FACTORY.createTerm(Uid.createUid(type,id))).loadSource(loadSource));
    if (!get.exists()) {
      get.release();
      return new GetResult(shardId.index().name(),type,id,-1,false,null,null);
    }
  }
  DocumentMapper docMapper=mapperService.documentMapper(type);
  if (docMapper == null) {
    get.release();
    return new GetResult(shardId.index().name(),type,id,-1,false,null,null);
  }
  try {
    if (get.docIdAndVersion() != null) {
      Map<String,GetField> fields=null;
      byte[] source=null;
      UidField.DocIdAndVersion docIdAndVersion=get.docIdAndVersion();
      ResetFieldSelector fieldSelector=buildFieldSelectors(docMapper,gFields);
      if (fieldSelector != null) {
        fieldSelector.reset();
        Document doc;
        try {
          doc=docIdAndVersion.reader.document(docIdAndVersion.docId,fieldSelector);
        }
 catch (        IOException e) {
          throw new ElasticSearchException("Failed to get type [" + type + "] and id ["+ id+ "]",e);
        }
        source=extractSource(doc,docMapper);
        for (        Object oField : doc.getFields()) {
          Fieldable field=(Fieldable)oField;
          String name=field.name();
          Object value=null;
          FieldMappers fieldMappers=docMapper.mappers().indexName(field.name());
          if (fieldMappers != null) {
            FieldMapper mapper=fieldMappers.mapper();
            if (mapper != null) {
              name=mapper.names().fullName();
              value=mapper.valueForSearch(field);
            }
          }
          if (value == null) {
            if (field.isBinary()) {
              value=field.getBinaryValue();
            }
 else {
              value=field.stringValue();
            }
          }
          if (fields == null) {
            fields=newHashMapWithExpectedSize(2);
          }
          GetField getField=fields.get(name);
          if (getField == null) {
            getField=new GetField(name,new ArrayList<Object>(2));
            fields.put(name,getField);
          }
          getField.values().add(value);
        }
      }
      if (gFields != null && gFields.length > 0) {
        SearchLookup searchLookup=null;
        for (        String field : gFields) {
          String script=null;
          if (field.contains("_source.") || field.contains("doc[")) {
            script=field;
          }
 else {
            FieldMappers x=docMapper.mappers().smartName(field);
            if (x != null && !x.mapper().stored()) {
              script="_source." + x.mapper().names().fullName();
            }
          }
          if (script != null) {
            if (searchLookup == null) {
              searchLookup=new SearchLookup(mapperService,indexCache.fieldData());
            }
            SearchScript searchScript=scriptService.search(searchLookup,"mvel",script,null);
            searchScript.setNextReader(docIdAndVersion.reader);
            searchScript.setNextDocId(docIdAndVersion.docId);
            try {
              Object value=searchScript.run();
              if (fields == null) {
                fields=newHashMapWithExpectedSize(2);
              }
              GetField getField=fields.get(field);
              if (getField == null) {
                getField=new GetField(field,new ArrayList<Object>(2));
                fields.put(field,getField);
              }
              getField.values().add(value);
            }
 catch (            RuntimeException e) {
              if (logger.isTraceEnabled()) {
                logger.trace("failed to execute get request script field [{}]",e,script);
              }
            }
          }
        }
      }
      return new GetResult(shardId.index().name(),type,id,get.version(),get.exists(),source == null ? null : new BytesHolder(source),fields);
    }
 else {
      Translog.Source source=get.source();
      Map<String,GetField> fields=null;
      boolean sourceRequested=false;
      if (gFields == null) {
        sourceRequested=true;
      }
 else       if (gFields.length == 0) {
        sourceRequested=false;
      }
 else {
        Map<String,Object> sourceAsMap=null;
        SearchLookup searchLookup=null;
        for (        String field : gFields) {
          if (field.equals("_source")) {
            sourceRequested=true;
            continue;
          }
          Object value=null;
          if (field.equals(RoutingFieldMapper.NAME) && docMapper.routingFieldMapper().stored()) {
            value=source.routing;
          }
 else           if (field.equals(ParentFieldMapper.NAME) && docMapper.parentFieldMapper() != null && docMapper.parentFieldMapper().stored()) {
            value=source.parent;
          }
 else           if (field.equals(TimestampFieldMapper.NAME) && docMapper.timestampFieldMapper().stored()) {
            value=source.timestamp;
          }
 else {
            String script=null;
            if (field.contains("_source.")) {
              script=field;
            }
 else {
              FieldMappers x=docMapper.mappers().smartName(field);
              if (x != null) {
                script="_source." + x.mapper().names().fullName();
              }
            }
            if (script != null) {
              if (searchLookup == null) {
                searchLookup=new SearchLookup(mapperService,indexCache.fieldData());
              }
              if (sourceAsMap == null) {
                sourceAsMap=SourceLookup.sourceAsMap(source.source.bytes(),source.source.offset(),source.source.length());
              }
              SearchScript searchScript=scriptService.search(searchLookup,"mvel",script,null);
              searchScript.setNextSource(sourceAsMap);
              try {
                value=searchScript.run();
              }
 catch (              RuntimeException e) {
                if (logger.isTraceEnabled()) {
                  logger.trace("failed to execute get request script field [{}]",e,script);
                }
              }
            }
          }
          if (value != null) {
            if (fields == null) {
              fields=newHashMapWithExpectedSize(2);
            }
            GetField getField=fields.get(field);
            if (getField == null) {
              getField=new GetField(field,new ArrayList<Object>(2));
              fields.put(field,getField);
            }
            getField.values().add(value);
          }
        }
      }
      return new GetResult(shardId.index().name(),type,id,get.version(),get.exists(),sourceRequested ? source.source : null,fields);
    }
  }
  finally {
    get.release();
  }
}
