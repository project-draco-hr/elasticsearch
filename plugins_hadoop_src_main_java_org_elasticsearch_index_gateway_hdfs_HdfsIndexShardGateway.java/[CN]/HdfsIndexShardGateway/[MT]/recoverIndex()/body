{
  FileStatus[] files;
  try {
    files=fileSystem.listStatus(indexPath);
  }
 catch (  IOException e) {
    throw new IndexShardGatewayRecoveryException(shardId(),"Failed to list files",e);
  }
  final CountDownLatch latch=new CountDownLatch(files.length);
  final AtomicReference<Exception> lastException=new AtomicReference<Exception>();
  final AtomicLong throttlingWaitTime=new AtomicLong();
  for (  final FileStatus file : files) {
    threadPool.execute(new Runnable(){
      @Override public void run(){
        try {
          long throttlingStartTime=System.currentTimeMillis();
          while (!recoveryThrottler.tryStream(shardId,file.getPath().getName())) {
            Thread.sleep(recoveryThrottler.throttleInterval().millis());
          }
          throttlingWaitTime.addAndGet(System.currentTimeMillis() - throttlingStartTime);
          FSDataInputStream fileStream=fileSystem.open(file.getPath());
          Directories.copyToDirectory(fileStream,store.directory(),file.getPath().getName());
          fileSystem.close();
        }
 catch (        Exception e) {
          logger.debug("Failed to read [" + file + "] into ["+ store+ "]",e);
          lastException.set(e);
        }
 finally {
          recoveryThrottler.streamDone(shardId,file.getPath().getName());
          latch.countDown();
        }
      }
    }
);
  }
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
    lastException.set(e);
  }
  if (lastException.get() != null) {
    throw new IndexShardGatewayRecoveryException(shardId(),"Failed to recover index files",lastException.get());
  }
  long totalSize=0;
  for (  FileStatus file : files) {
    totalSize+=file.getLen();
  }
  long version=-1;
  try {
    if (IndexReader.indexExists(store.directory())) {
      version=IndexReader.getCurrentVersion(store.directory());
    }
  }
 catch (  IOException e) {
    throw new IndexShardGatewayRecoveryException(shardId(),"Failed to fetch index version after copying it over",e);
  }
  return new RecoveryStatus.Index(version,files.length,new SizeValue(totalSize,SizeUnit.BYTES),TimeValue.timeValueMillis(throttlingWaitTime.get()));
}
