{
  XContentBuilder doc=XContentFactory.jsonBuilder().startObject().field("field1",1).field("field2","value").endObject();
  byte[] source=doc.copiedBytes();
  PercolatorService.Response percolate=percolatorService.percolate(new PercolatorService.Request("type1",source));
  assertThat(percolate.matches(),hasSize(0));
  percolatorService.addQuery("test1",termQuery("field2","value"));
  percolate=percolatorService.percolate(new PercolatorService.Request("type1",source));
  assertThat(percolate.matches(),hasSize(1));
  assertThat(percolate.matches(),hasItem("test1"));
  percolatorService.addQuery("test2",termQuery("field1",1));
  percolate=percolatorService.percolate(new PercolatorService.Request("type1",source));
  assertThat(percolate.matches(),hasSize(2));
  assertThat(percolate.matches(),hasItems("test1","test2"));
  percolate=percolatorService.percolate(new PercolatorService.Request("type1",source).match("*2"));
  assertThat(percolate.matches(),hasSize(1));
  assertThat(percolate.matches(),hasItems("test2"));
  percolate=percolatorService.percolate(new PercolatorService.Request("type1",source).match("*").unmatch("*1"));
  assertThat(percolate.matches(),hasSize(1));
  assertThat(percolate.matches(),hasItems("test2"));
  percolatorService.removeQuery("test2");
  percolate=percolatorService.percolate(new PercolatorService.Request("type1",source));
  assertThat(percolate.matches(),hasSize(1));
  assertThat(percolate.matches(),hasItems("test1"));
}
