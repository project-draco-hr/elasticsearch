{
  this.type=type;
  this.source=new CompressedString(XContentFactory.jsonBuilder().map(mapping).string());
  Map<String,Object> withoutType=mapping;
  if (mapping.size() == 1 && mapping.containsKey(type)) {
    withoutType=(Map<String,Object>)mapping.get(type);
  }
  if (withoutType.containsKey("_id")) {
    String path=null;
    Map<String,Object> routingNode=(Map<String,Object>)withoutType.get("_id");
    for (    Map.Entry<String,Object> entry : routingNode.entrySet()) {
      String fieldName=Strings.toUnderscoreCase(entry.getKey());
      Object fieldNode=entry.getValue();
      if (fieldName.equals("path")) {
        path=fieldNode.toString();
      }
    }
    this.id=new Id(path);
  }
 else {
    this.id=Id.EMPTY;
  }
  if (withoutType.containsKey("_routing")) {
    boolean required=false;
    String path=null;
    Map<String,Object> routingNode=(Map<String,Object>)withoutType.get("_routing");
    for (    Map.Entry<String,Object> entry : routingNode.entrySet()) {
      String fieldName=Strings.toUnderscoreCase(entry.getKey());
      Object fieldNode=entry.getValue();
      if (fieldName.equals("required")) {
        required=nodeBooleanValue(fieldNode);
      }
 else       if (fieldName.equals("path")) {
        path=fieldNode.toString();
      }
    }
    this.routing=new Routing(required,path);
  }
 else {
    this.routing=Routing.EMPTY;
  }
  if (withoutType.containsKey("_timestamp")) {
    boolean enabled=false;
    String path=null;
    String format=TimestampFieldMapper.DEFAULT_DATE_TIME_FORMAT;
    Map<String,Object> timestampNode=(Map<String,Object>)withoutType.get("_timestamp");
    for (    Map.Entry<String,Object> entry : timestampNode.entrySet()) {
      String fieldName=Strings.toUnderscoreCase(entry.getKey());
      Object fieldNode=entry.getValue();
      if (fieldName.equals("enabled")) {
        enabled=nodeBooleanValue(fieldNode);
      }
 else       if (fieldName.equals("path")) {
        path=fieldNode.toString();
      }
 else       if (fieldName.equals("format")) {
        format=fieldNode.toString();
      }
    }
    this.timestamp=new Timestamp(enabled,path,format);
  }
 else {
    this.timestamp=Timestamp.EMPTY;
  }
}
