{
  Directory dir=new RAMDirectory();
  IndexWriter indexWriter=new IndexWriter(dir,new IndexWriterConfig(Lucene.VERSION,Lucene.STANDARD_ANALYZER));
  Document document=new Document();
  document.add(new DoubleField("svalue",4,Field.Store.NO));
  document.add(new DoubleField("mvalue",104,Field.Store.NO));
  indexWriter.addDocument(document);
  document=new Document();
  document.add(new DoubleField("svalue",3,Field.Store.NO));
  document.add(new DoubleField("mvalue",104,Field.Store.NO));
  document.add(new DoubleField("mvalue",105,Field.Store.NO));
  indexWriter.addDocument(document);
  document=new Document();
  document.add(new DoubleField("svalue",7,Field.Store.NO));
  indexWriter.addDocument(document);
  document=new Document();
  document.add(new DoubleField("mvalue",102,Field.Store.NO));
  indexWriter.addDocument(document);
  document=new Document();
  document.add(new DoubleField("svalue",4,Field.Store.NO));
  indexWriter.addDocument(document);
  AtomicReader reader=new SlowCompositeReaderWrapper(DirectoryReader.open(indexWriter,true));
  DoubleFieldData sFieldData=DoubleFieldData.load(reader,"svalue");
  DoubleFieldData mFieldData=DoubleFieldData.load(reader,"mvalue");
  assertThat(sFieldData.fieldName(),equalTo("svalue"));
  assertThat(sFieldData.multiValued(),equalTo(false));
  assertThat(mFieldData.fieldName(),equalTo("mvalue"));
  assertThat(mFieldData.multiValued(),equalTo(true));
  assertThat(sFieldData.hasValue(0),equalTo(true));
  assertThat(sFieldData.value(0),equalTo(4d));
  assertThat(sFieldData.docFieldData(0).getValue(),equalTo(4d));
  assertThat(sFieldData.values(0).length,equalTo(1));
  assertThat(sFieldData.values(0)[0],equalTo(4d));
  assertThat(sFieldData.docFieldData(0).getValues()[0],equalTo(4d));
  assertThat(sFieldData.hasValue(1),equalTo(true));
  assertThat(sFieldData.value(1),equalTo(3d));
  assertThat(sFieldData.docFieldData(1).getValue(),equalTo(3d));
  assertThat(sFieldData.values(1).length,equalTo(1));
  assertThat(sFieldData.values(1)[0],equalTo(3d));
  assertThat(sFieldData.docFieldData(1).getValues()[0],equalTo(3d));
  assertThat(sFieldData.hasValue(2),equalTo(true));
  assertThat(sFieldData.value(2),equalTo(7d));
  assertThat(sFieldData.docFieldData(2).getValue(),equalTo(7d));
  assertThat(sFieldData.values(2).length,equalTo(1));
  assertThat(sFieldData.values(2)[0],equalTo(7d));
  assertThat(sFieldData.docFieldData(2).getValues()[0],equalTo(7d));
  assertThat(sFieldData.hasValue(3),equalTo(false));
  assertThat(sFieldData.docFieldData(3).isEmpty(),equalTo(true));
  assertThat(sFieldData.hasValue(4),equalTo(true));
  assertThat(sFieldData.value(4),equalTo(4d));
  assertThat(sFieldData.values(4).length,equalTo(1));
  assertThat(sFieldData.values(4)[0],equalTo(4d));
  final ArrayList<Double> values=new ArrayList<Double>();
  sFieldData.forEachValue(new DoubleFieldData.ValueProc(){
    @Override public void onValue(    double value){
      values.add(value);
    }
  }
);
  assertThat(values.size(),equalTo(3));
  assertThat(values.get(0),equalTo(3d));
  assertThat(values.get(1),equalTo(4d));
  assertThat(values.get(2),equalTo(7d));
  assertThat(mFieldData.hasValue(0),equalTo(true));
  assertThat(mFieldData.docFieldData(0).isEmpty(),equalTo(false));
  assertThat(mFieldData.value(0),equalTo(104d));
  assertThat(mFieldData.docFieldData(0).getValue(),equalTo(104d));
  assertThat(mFieldData.values(0).length,equalTo(1));
  assertThat(mFieldData.values(0)[0],equalTo(104d));
  assertThat(mFieldData.docFieldData(0).getValues()[0],equalTo(104d));
  assertThat(mFieldData.hasValue(1),equalTo(true));
  assertThat(mFieldData.value(1),equalTo(104d));
  assertThat(mFieldData.values(1).length,equalTo(2));
  assertThat(mFieldData.values(1)[0],equalTo(104d));
  assertThat(mFieldData.values(1)[1],equalTo(105d));
  assertThat(mFieldData.hasValue(2),equalTo(false));
  assertThat(mFieldData.hasValue(3),equalTo(true));
  assertThat(mFieldData.value(3),equalTo(102d));
  assertThat(mFieldData.values(3).length,equalTo(1));
  assertThat(mFieldData.values(3)[0],equalTo(102d));
  assertThat(mFieldData.hasValue(4),equalTo(false));
  indexWriter.close();
  values.clear();
  mFieldData.forEachValue(new DoubleFieldData.ValueProc(){
    @Override public void onValue(    double value){
      values.add(value);
    }
  }
);
  assertThat(values.size(),equalTo(3));
  assertThat(values.get(0),equalTo(102d));
  assertThat(values.get(1),equalTo(104d));
  assertThat(values.get(2),equalTo(105d));
}
