{
  try {
    checkIndexTook=0;
    long time=System.currentTimeMillis();
    if (!Lucene.indexExists(store.directory())) {
      return;
    }
    CheckIndex checkIndex=new CheckIndex(store.directory());
    FastByteArrayOutputStream os=new FastByteArrayOutputStream();
    PrintStream out=new PrintStream(os,false,Charsets.UTF_8.name());
    checkIndex.setInfoStream(out);
    out.flush();
    CheckIndex.Status status=checkIndex.checkIndex();
    if (!status.clean) {
      if (state == IndexShardState.CLOSED) {
        return;
      }
      logger.warn("check index [failure]\n{}",new String(os.bytes().toBytes(),Charsets.UTF_8));
      if ("fix".equalsIgnoreCase(checkIndexOnStartup)) {
        if (logger.isDebugEnabled()) {
          logger.debug("fixing index, writing new segments file ...");
        }
        checkIndex.fixIndex(status,null);
        if (logger.isDebugEnabled()) {
          logger.debug("index fixed, wrote new segments file \"{}\"",status.segmentsFileName);
        }
      }
 else {
        if (throwException) {
          throw new IndexShardException(shardId,"index check failure");
        }
      }
    }
 else {
      if (logger.isDebugEnabled()) {
        logger.debug("check index [success]\n{}",new String(os.bytes().toBytes(),Charsets.UTF_8));
      }
    }
    checkIndexTook=System.currentTimeMillis() - time;
  }
 catch (  Exception e) {
    logger.warn("failed to check index",e);
  }
}
