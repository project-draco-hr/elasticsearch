{
  ShardRouting currentRouting=this.shardRouting;
  if (!newRouting.shardId().equals(shardId())) {
    throw new ElasticsearchIllegalArgumentException("Trying to set a routing entry with shardId [" + newRouting.shardId() + "] on a shard with shardId ["+ shardId()+ "]");
  }
  if (currentRouting != null) {
    if (!newRouting.primary() && currentRouting.primary()) {
      logger.warn("suspect illegal state: trying to move shard from primary mode to replica mode");
    }
    if (currentRouting.equals(newRouting)) {
      return this;
    }
  }
  if (state == IndexShardState.POST_RECOVERY) {
    if (newRouting.state() == ShardRoutingState.STARTED || newRouting.state() == ShardRoutingState.RELOCATING) {
      try {
        engine.refresh("cluster_state_started",true);
      }
 catch (      Throwable t) {
        logger.debug("failed to refresh due to move to cluster wide started",t);
      }
      boolean movedToStarted=false;
synchronized (mutex) {
        if (state == IndexShardState.POST_RECOVERY) {
          changeState(IndexShardState.STARTED,"global state is [" + newRouting.state() + "]");
          movedToStarted=true;
        }
 else {
          logger.debug("state [{}] not changed, not in POST_RECOVERY, global state is [{}]",state,newRouting.state());
        }
      }
      if (movedToStarted) {
        indicesLifecycle.afterIndexShardStarted(this);
      }
    }
  }
  this.shardRouting=newRouting;
  indicesLifecycle.shardRoutingChanged(this,currentRouting,newRouting);
  return this;
}
