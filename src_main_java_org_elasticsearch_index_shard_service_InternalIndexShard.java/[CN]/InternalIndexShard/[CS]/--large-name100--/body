{
  super(shardId,indexSettings);
  this.indicesLifecycle=(InternalIndicesLifecycle)indicesLifecycle;
  this.indexSettingsService=indexSettingsService;
  this.store=store;
  this.engine=engine;
  this.mergeScheduler=mergeScheduler;
  this.translog=translog;
  this.threadPool=threadPool;
  this.mapperService=mapperService;
  this.queryParserService=queryParserService;
  this.indexCache=indexCache;
  this.indexAliasesService=indexAliasesService;
  this.indexingService=indexingService;
  this.getService=getService.setIndexShard(this);
  this.termVectorService=termVectorService.setIndexShard(this);
  this.searchService=searchService;
  this.shardWarmerService=shardWarmerService;
  this.shardFilterCache=shardFilterCache;
  this.shardQueryCache=shardQueryCache;
  this.shardFieldData=shardFieldData;
  this.percolatorQueriesRegistry=percolatorQueriesRegistry;
  this.shardPercolateService=shardPercolateService;
  this.indexFieldDataService=indexFieldDataService;
  this.indexService=indexService;
  this.codecService=codecService;
  this.shardSuggestService=shardSuggestService;
  this.shardFixedBitSetFilterCache=shardFixedBitSetFilterCache;
  state=IndexShardState.CREATED;
  this.refreshInterval=indexSettings.getAsTime(INDEX_REFRESH_INTERVAL,engine.defaultRefreshInterval());
  this.mergeInterval=indexSettings.getAsTime("index.merge.async_interval",TimeValue.timeValueSeconds(1));
  indexSettingsService.addListener(applyRefreshSettings);
  logger.debug("state: [CREATED]");
  this.checkIndexOnStartup=indexSettings.get("index.shard.check_on_startup","false");
}
