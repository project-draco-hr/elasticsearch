{
  if (!observer.observedState().nodes().nodeExists(nodeId)) {
    onReplicaFailure(nodeId,null);
    return;
  }
  final ReplicaOperationRequest shardRequest=new ReplicaOperationRequest(shardIt.shardId(),replicaRequest);
  if (!nodeId.equals(observer.observedState().nodes().localNodeId())) {
    final DiscoveryNode node=observer.observedState().nodes().get(nodeId);
    transportService.sendRequest(node,transportReplicaAction,shardRequest,transportOptions,new EmptyTransportResponseHandler(ThreadPool.Names.SAME){
      @Override public void handleResponse(      TransportResponse.Empty vResponse){
        onReplicaSuccess();
      }
      @Override public void handleException(      TransportException exp){
        onReplicaFailure(nodeId,exp);
        logger.trace("[{}] transport failure during replica request [{}] ",exp,node,replicaRequest);
        if (ignoreReplicaException(exp) == false) {
          logger.warn("failed to perform " + actionName + " on remote replica "+ node+ shardIt.shardId(),exp);
          shardStateAction.shardFailed(shard,indexMetaData.getUUID(),"Failed to perform [" + actionName + "] on replica, message ["+ ExceptionsHelper.detailedMessage(exp)+ "]");
        }
      }
    }
);
  }
 else {
    if (replicaRequest.operationThreaded()) {
      try {
        threadPool.executor(executor).execute(new AbstractRunnable(){
          @Override protected void doRun(){
            try {
              shardOperationOnReplica(shardRequest);
              onReplicaSuccess();
            }
 catch (            Throwable e) {
              onReplicaFailure(nodeId,e);
              failReplicaIfNeeded(shard.index(),shard.id(),e);
            }
          }
          @Override public boolean isForceExecution(){
            return true;
          }
          @Override public void onFailure(          Throwable t){
            onReplicaFailure(nodeId,t);
          }
        }
);
      }
 catch (      Throwable e) {
        failReplicaIfNeeded(shard.index(),shard.id(),e);
        onReplicaFailure(nodeId,e);
      }
    }
 else {
      try {
        shardOperationOnReplica(shardRequest);
        onReplicaSuccess();
      }
 catch (      Throwable e) {
        failReplicaIfNeeded(shard.index(),shard.id(),e);
        onReplicaFailure(nodeId,e);
      }
    }
  }
}
