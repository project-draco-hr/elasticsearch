{
  if (!observer.observedState().nodes().nodeExists(nodeId)) {
    if (counter.decrementAndGet() == 0) {
      listener.onResponse(response.response());
    }
    return;
  }
  final ReplicaOperationRequest shardRequest=new ReplicaOperationRequest(shardIt.shardId(),response.replicaRequest());
  if (!nodeId.equals(observer.observedState().nodes().localNodeId())) {
    final DiscoveryNode node=observer.observedState().nodes().get(nodeId);
    transportService.sendRequest(node,transportReplicaAction,shardRequest,transportOptions,new EmptyTransportResponseHandler(ThreadPool.Names.SAME){
      @Override public void handleResponse(      TransportResponse.Empty vResponse){
        finishIfPossible();
      }
      @Override public void handleException(      TransportException exp){
        logger.trace("[{}] Transport failure during replica request [{}] ",exp,node,internalRequest.request());
        if (!ignoreReplicaException(exp)) {
          logger.warn("Failed to perform " + actionName + " on remote replica "+ node+ shardIt.shardId(),exp);
          shardStateAction.shardFailed(shard,indexMetaData.getUUID(),"Failed to perform [" + actionName + "] on replica, message ["+ ExceptionsHelper.detailedMessage(exp)+ "]");
        }
        finishIfPossible();
      }
      private void finishIfPossible(){
        if (counter.decrementAndGet() == 0) {
          listener.onResponse(response.response());
        }
      }
    }
);
  }
 else {
    if (internalRequest.request().operationThreaded()) {
      internalRequest.request().beforeLocalFork();
      try {
        threadPool.executor(executor).execute(new AbstractRunnable(){
          @Override public void run(){
            try {
              shardOperationOnReplica(shardRequest);
            }
 catch (            Throwable e) {
              failReplicaIfNeeded(shard.index(),shard.id(),e);
            }
            if (counter.decrementAndGet() == 0) {
              listener.onResponse(response.response());
            }
          }
          @Override public boolean isForceExecution(){
            return true;
          }
        }
);
      }
 catch (      Throwable e) {
        failReplicaIfNeeded(shard.index(),shard.id(),e);
        if (counter.decrementAndGet() == 0) {
          listener.onResponse(response.response());
        }
      }
    }
 else {
      try {
        shardOperationOnReplica(shardRequest);
      }
 catch (      Throwable e) {
        failReplicaIfNeeded(shard.index(),shard.id(),e);
      }
      if (counter.decrementAndGet() == 0) {
        listener.onResponse(response.response());
      }
    }
  }
}
