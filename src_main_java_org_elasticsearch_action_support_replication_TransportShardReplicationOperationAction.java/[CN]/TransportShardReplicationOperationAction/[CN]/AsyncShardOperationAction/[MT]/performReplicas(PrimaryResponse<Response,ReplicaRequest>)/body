{
  if (ignoreReplicas()) {
    postPrimaryOperation(internalRequest,response);
    listener.onResponse(response.response());
    return;
  }
  ShardRouting shard;
  ClusterState newState=clusterService.state();
  ShardRouting newPrimaryShard=null;
  if (observer.observedState() != newState) {
    shardIt.reset();
    ShardRouting originalPrimaryShard=null;
    while ((shard=shardIt.nextOrNull()) != null) {
      if (shard.primary()) {
        originalPrimaryShard=shard;
        break;
      }
    }
    if (originalPrimaryShard == null || !originalPrimaryShard.active()) {
      throw new ElasticsearchIllegalStateException("unexpected state, failed to find primary shard on an index operation that succeeded");
    }
    observer.reset(newState);
    shardIt=shards(newState,internalRequest);
    while ((shard=shardIt.nextOrNull()) != null) {
      if (shard.primary()) {
        if (originalPrimaryShard.currentNodeId().equals(shard.currentNodeId())) {
          newPrimaryShard=null;
        }
 else {
          newPrimaryShard=shard;
        }
        break;
      }
    }
    shardIt.reset();
    internalRequest.request().setCanHaveDuplicates();
  }
 else {
    shardIt.reset();
    while ((shard=shardIt.nextOrNull()) != null) {
      if (shard.state() != ShardRoutingState.STARTED) {
        internalRequest.request().setCanHaveDuplicates();
      }
    }
    shardIt.reset();
  }
  int replicaCounter=shardIt.assignedReplicasIncludingRelocating();
  if (newPrimaryShard != null) {
    replicaCounter++;
  }
  if (replicaCounter == 0) {
    postPrimaryOperation(internalRequest,response);
    listener.onResponse(response.response());
    return;
  }
  if (replicationType == ReplicationType.ASYNC) {
    postPrimaryOperation(internalRequest,response);
    listener.onResponse(response.response());
    replicaCounter=Integer.MIN_VALUE;
  }
  replicaCounter++;
  AtomicInteger counter=new AtomicInteger(replicaCounter);
  IndexMetaData indexMetaData=observer.observedState().metaData().index(internalRequest.concreteIndex());
  if (newPrimaryShard != null) {
    performOnReplica(response,counter,newPrimaryShard,newPrimaryShard.currentNodeId(),indexMetaData);
  }
  shardIt.reset();
  while ((shard=shardIt.nextOrNull()) != null) {
    if (shard.unassigned()) {
      continue;
    }
    boolean doOnlyOnRelocating=false;
    if (shard.primary()) {
      if (shard.relocating()) {
        doOnlyOnRelocating=true;
      }
 else {
        continue;
      }
    }
    if (!doOnlyOnRelocating) {
      performOnReplica(response,counter,shard,shard.currentNodeId(),indexMetaData);
    }
    if (shard.relocating()) {
      performOnReplica(response,counter,shard,shard.relocatingNodeId(),indexMetaData);
    }
  }
  postPrimaryOperation(internalRequest,response);
  if (counter.decrementAndGet() == 0) {
    listener.onResponse(response.response());
  }
}
