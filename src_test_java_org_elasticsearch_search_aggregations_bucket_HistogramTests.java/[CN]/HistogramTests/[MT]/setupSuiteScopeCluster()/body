{
  createIndex("idx");
  createIndex("idx_unmapped");
  numDocs=randomIntBetween(6,20);
  interval=randomIntBetween(2,5);
  numValueBuckets=numDocs / interval + 1;
  valueCounts=new long[numValueBuckets];
  for (int i=0; i < numDocs; i++) {
    final int bucket=(i + 1) / interval;
    valueCounts[bucket]++;
  }
  numValuesBuckets=(numDocs + 1) / interval + 1;
  valuesCounts=new long[numValuesBuckets];
  for (int i=0; i < numDocs; i++) {
    final int bucket1=(i + 1) / interval;
    final int bucket2=(i + 2) / interval;
    valuesCounts[bucket1]++;
    if (bucket1 != bucket2) {
      valuesCounts[bucket2]++;
    }
  }
  List<IndexRequestBuilder> builders=new ArrayList<>();
  for (int i=0; i < numDocs; i++) {
    builders.add(client().prepareIndex("idx","type").setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME,i + 1).startArray(MULTI_VALUED_FIELD_NAME).value(i + 1).value(i + 2).endArray().field("tag","tag" + i).endObject()));
  }
  assertAcked(prepareCreate("empty_bucket_idx").addMapping("type",SINGLE_VALUED_FIELD_NAME,"type=integer"));
  for (int i=0; i < 2; i++) {
    builders.add(client().prepareIndex("empty_bucket_idx","type","" + i).setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME,i * 2).endObject()));
  }
  indexRandom(true,builders);
  ensureSearchable();
}
