{
  if (!existence && !nullValue) {
    throw new QueryShardException(context,"missing must have either existence, or null_value, or both set to true");
  }
  final FieldNamesFieldMapper.FieldNamesFieldType fieldNamesFieldType=(FieldNamesFieldMapper.FieldNamesFieldType)context.getMapperService().fullName(FieldNamesFieldMapper.NAME);
  if (fieldNamesFieldType == null) {
    return Queries.newMatchNoDocsQuery();
  }
  ObjectMapper objectMapper=context.getObjectMapper(fieldPattern);
  if (objectMapper != null) {
    fieldPattern=fieldPattern + ".*";
  }
  Collection<String> fields=context.simpleMatchToIndexNames(fieldPattern);
  if (fields.isEmpty()) {
    if (existence) {
      return Queries.newMatchAllQuery();
    }
    return null;
  }
  Query existenceFilter=null;
  Query nullFilter=null;
  if (existence) {
    BooleanQuery.Builder boolFilter=new BooleanQuery.Builder();
    for (    String field : fields) {
      MappedFieldType fieldType=context.fieldMapper(field);
      Query filter=null;
      if (fieldNamesFieldType.isEnabled()) {
        final String f;
        if (fieldType != null) {
          f=fieldType.names().indexName();
        }
 else {
          f=field;
        }
        filter=fieldNamesFieldType.termQuery(f,context);
      }
      if (filter == null && fieldType != null) {
        filter=fieldType.rangeQuery(null,null,true,true);
      }
      if (filter == null) {
        filter=new TermRangeQuery(field,null,null,true,true);
      }
      boolFilter.add(filter,BooleanClause.Occur.SHOULD);
    }
    existenceFilter=boolFilter.build();
    existenceFilter=Queries.not(existenceFilter);
    ;
  }
  if (nullValue) {
    for (    String field : fields) {
      MappedFieldType fieldType=context.fieldMapper(field);
      if (fieldType != null) {
        nullFilter=fieldType.nullValueQuery();
      }
    }
  }
  Query filter;
  if (nullFilter != null) {
    if (existenceFilter != null) {
      filter=new BooleanQuery.Builder().add(existenceFilter,BooleanClause.Occur.SHOULD).add(nullFilter,BooleanClause.Occur.SHOULD).build();
    }
 else {
      filter=nullFilter;
    }
  }
 else {
    filter=existenceFilter;
  }
  if (filter == null) {
    return null;
  }
  return new ConstantScoreQuery(filter);
}
