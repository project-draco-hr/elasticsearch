{
  long start=System.currentTimeMillis();
  IndexSettings idxSettings=IndexSettingsModule.newIndexSettings(randomAsciiOfLengthBetween(1,10),Settings.EMPTY);
  AnalysisService mockAnalysisService=new AnalysisService(idxSettings,Collections.emptyMap(),Collections.emptyMap(),Collections.emptyMap(),Collections.emptyMap()){
    @Override public NamedAnalyzer analyzer(    String name){
      return new NamedAnalyzer(name,new WhitespaceAnalyzer());
    }
  }
;
  MapperService mockMapperService=new MapperService(idxSettings,mockAnalysisService,null,new IndicesModule().getMapperRegistry(),null){
    @Override public MappedFieldType fullName(    String fullName){
      return new StringFieldType();
    }
  }
;
  for (int runs=0; runs < NUMBER_OF_RUNS; runs++) {
    DirectCandidateGeneratorBuilder generator=randomCandidateGenerator();
    DirectCandidateGenerator contextGenerator=generator.build(mockMapperService);
    XContentBuilder builder=XContentFactory.contentBuilder(randomFrom(XContentType.values()));
    if (randomBoolean()) {
      builder.prettyPrint();
    }
    generator.toXContent(builder,ToXContent.EMPTY_PARAMS);
    XContentParser parser=XContentHelper.createParser(builder.bytes());
    DirectCandidateGenerator secondGenerator=PhraseSuggestParser.parseCandidateGenerator(parser,mockMapperService,ParseFieldMatcher.EMPTY);
    assertNotSame(contextGenerator,secondGenerator);
    assertEqualGenerators(contextGenerator,secondGenerator);
  }
}
