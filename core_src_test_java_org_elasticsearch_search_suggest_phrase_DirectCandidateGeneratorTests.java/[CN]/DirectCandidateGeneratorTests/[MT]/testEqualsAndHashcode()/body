{
  for (int runs=0; runs < NUMBER_OF_RUNS; runs++) {
    DirectCandidateGeneratorBuilder first=randomCandidateGenerator();
    assertFalse("generator is equal to null",first.equals(null));
    assertFalse("generator is equal to incompatible type",first.equals(""));
    assertTrue("generator is not equal to self",first.equals(first));
    assertThat("same generator's hashcode returns different values if called multiple times",first.hashCode(),equalTo(first.hashCode()));
    DirectCandidateGeneratorBuilder second=serializedCopy(first);
    assertTrue("generator is not equal to self",second.equals(second));
    assertTrue("generator is not equal to its copy",first.equals(second));
    assertTrue("equals is not symmetric",second.equals(first));
    assertThat("generator copy's hashcode is different from original hashcode",second.hashCode(),equalTo(first.hashCode()));
    DirectCandidateGeneratorBuilder third=serializedCopy(second);
    assertTrue("generator is not equal to self",third.equals(third));
    assertTrue("generator is not equal to its copy",second.equals(third));
    assertThat("generator copy's hashcode is different from original hashcode",second.hashCode(),equalTo(third.hashCode()));
    assertTrue("equals is not transitive",first.equals(third));
    assertThat("generator copy's hashcode is different from original hashcode",first.hashCode(),equalTo(third.hashCode()));
    assertTrue("equals is not symmetric",third.equals(second));
    assertTrue("equals is not symmetric",third.equals(first));
    first=new DirectCandidateGeneratorBuilder("aaa");
    assertEquals(first,serializedCopy(first));
    second=new DirectCandidateGeneratorBuilder("bbb");
    assertNotEquals(first,second);
    assertNotEquals(first.accuracy(0.1f),serializedCopy(first).accuracy(0.2f));
    assertNotEquals(first.maxEdits(1),serializedCopy(first).maxEdits(2));
    assertNotEquals(first.maxInspections(1),serializedCopy(first).maxInspections(2));
    assertNotEquals(first.maxTermFreq(0.1f),serializedCopy(first).maxTermFreq(0.2f));
    assertNotEquals(first.minDocFreq(0.1f),serializedCopy(first).minDocFreq(0.2f));
    assertNotEquals(first.minWordLength(1),serializedCopy(first).minWordLength(2));
    assertNotEquals(first.postFilter("postFilter"),serializedCopy(first).postFilter("postFilter_other"));
    assertNotEquals(first.preFilter("preFilter"),serializedCopy(first).preFilter("preFilter_other"));
    assertNotEquals(first.prefixLength(1),serializedCopy(first).prefixLength(2));
    assertNotEquals(first.size(1),serializedCopy(first).size(2));
    assertNotEquals(first.sort("score"),serializedCopy(first).sort("frequency"));
    assertNotEquals(first.stringDistance("levenstein"),serializedCopy(first).sort("ngram"));
    assertNotEquals(first.suggestMode("missing"),serializedCopy(first).suggestMode("always"));
  }
}
