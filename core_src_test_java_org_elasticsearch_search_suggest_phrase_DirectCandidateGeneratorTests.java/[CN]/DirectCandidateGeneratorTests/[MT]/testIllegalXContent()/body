{
  QueryParseContext context=new QueryParseContext(new IndicesQueriesRegistry(Settings.EMPTY,Collections.emptyMap()));
  context.parseFieldMatcher(new ParseFieldMatcher(Settings.EMPTY));
  String directGenerator="{ }";
  XContentParser parser=XContentFactory.xContent(directGenerator).createParser(directGenerator);
  context.reset(parser);
  try {
    DirectCandidateGeneratorBuilder.PROTOTYPE.fromXContent(context);
    fail("expected an exception");
  }
 catch (  IllegalArgumentException e) {
    assertEquals("[direct_generator] expects exactly one field parameter, but found []",e.getMessage());
  }
  directGenerator="{ \"field\" : \"f1\", \"field\" : \"f2\" }";
  parser=XContentFactory.xContent(directGenerator).createParser(directGenerator);
  context.reset(parser);
  try {
    DirectCandidateGeneratorBuilder.PROTOTYPE.fromXContent(context);
    fail("expected an exception");
  }
 catch (  IllegalArgumentException e) {
    assertEquals("[direct_generator] expects exactly one field parameter, but found [f2, f1]",e.getMessage());
  }
  directGenerator="{ \"unknown_param\" : \"f1\" }";
  parser=XContentFactory.xContent(directGenerator).createParser(directGenerator);
  context.reset(parser);
  try {
    DirectCandidateGeneratorBuilder.PROTOTYPE.fromXContent(context);
    fail("expected an exception");
  }
 catch (  IllegalArgumentException e) {
    assertEquals("[direct_generator] unknown field [unknown_param], parser not found",e.getMessage());
  }
  directGenerator="{ \"size\" : \"xxl\" }";
  parser=XContentFactory.xContent(directGenerator).createParser(directGenerator);
  context.reset(parser);
  try {
    DirectCandidateGeneratorBuilder.PROTOTYPE.fromXContent(context);
    fail("expected an exception");
  }
 catch (  ParsingException e) {
    assertEquals("[direct_generator] failed to parse field [size]",e.getMessage());
  }
  directGenerator="{ \"size\" : [ \"xxl\" ] }";
  parser=XContentFactory.xContent(directGenerator).createParser(directGenerator);
  context.reset(parser);
  try {
    DirectCandidateGeneratorBuilder.PROTOTYPE.fromXContent(context);
    fail("expected an exception");
  }
 catch (  IllegalArgumentException e) {
    assertEquals("[direct_generator] size doesn't support values of type: START_ARRAY",e.getMessage());
  }
}
