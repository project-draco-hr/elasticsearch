{
  bind(ShardId.class).toInstance(shardId);
  if (useShadowEngine()) {
    bind(IndexShard.class).to(ShadowIndexShard.class).asEagerSingleton();
  }
 else {
    bind(IndexShard.class).asEagerSingleton();
    bind(TranslogService.class).asEagerSingleton();
  }
  bind(EngineFactory.class).to(settings.getAsClass(ENGINE_FACTORY,DEFAULT_ENGINE_FACTORY_CLASS,ENGINE_PREFIX,ENGINE_SUFFIX));
  bind(ShardIndexWarmerService.class).asEagerSingleton();
  bind(ShardIndexingService.class).asEagerSingleton();
  bind(ShardSlowLogIndexingService.class).asEagerSingleton();
  bind(ShardSearchService.class).asEagerSingleton();
  bind(ShardSlowLogSearchService.class).asEagerSingleton();
  bind(ShardGetService.class).asEagerSingleton();
  bind(ShardFilterCache.class).toInstance(shardFilterCache);
  bind(ShardQueryCache.class).asEagerSingleton();
  bind(ShardBitsetFilterCache.class).asEagerSingleton();
  bind(ShardFieldData.class).asEagerSingleton();
  bind(IndexShardGateway.class).asEagerSingleton();
  bind(IndexShardGatewayService.class).asEagerSingleton();
  bind(PercolatorQueriesRegistry.class).asEagerSingleton();
  bind(ShardPercolateService.class).asEagerSingleton();
  bind(ShardTermVectorsService.class).asEagerSingleton();
  bind(IndexShardSnapshotAndRestoreService.class).asEagerSingleton();
  bind(ShardSuggestService.class).asEagerSingleton();
}
