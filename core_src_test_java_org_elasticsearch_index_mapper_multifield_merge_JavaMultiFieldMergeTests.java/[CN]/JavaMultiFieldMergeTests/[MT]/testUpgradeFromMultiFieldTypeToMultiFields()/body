{
  String mapping=copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json");
  MapperService mapperService=createIndex("test").mapperService();
  DocumentMapper docMapper=mapperService.merge("person",new CompressedXContent(mapping),true,false);
  assertNotSame(IndexOptions.NONE,docMapper.mappers().getMapper("name").fieldType().indexOptions());
  assertThat(docMapper.mappers().getMapper("name.indexed"),nullValue());
  BytesReference json=XContentFactory.jsonBuilder().startObject().field("name","some name").endObject().bytes();
  Document doc=docMapper.parse("test","person","1",json).rootDoc();
  IndexableField f=doc.getField("name");
  assertThat(f,notNullValue());
  f=doc.getField("name.indexed");
  assertThat(f,nullValue());
  mapping=copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json");
  mapperService.merge("person",new CompressedXContent(mapping),false,false);
  assertNotSame(IndexOptions.NONE,docMapper.mappers().getMapper("name").fieldType().indexOptions());
  assertNotSame(IndexOptions.NONE,docMapper.mappers().getMapper("name").fieldType().indexOptions());
  assertThat(docMapper.mappers().getMapper("name.indexed"),notNullValue());
  assertThat(docMapper.mappers().getMapper("name.not_indexed"),notNullValue());
  assertThat(docMapper.mappers().getMapper("name.not_indexed2"),nullValue());
  assertThat(docMapper.mappers().getMapper("name.not_indexed3"),nullValue());
  doc=docMapper.parse("test","person","1",json).rootDoc();
  f=doc.getField("name");
  assertThat(f,notNullValue());
  f=doc.getField("name.indexed");
  assertThat(f,notNullValue());
  mapping=copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json");
  mapperService.merge("person",new CompressedXContent(mapping),false,false);
  assertNotSame(IndexOptions.NONE,docMapper.mappers().getMapper("name").fieldType().indexOptions());
  assertNotSame(IndexOptions.NONE,docMapper.mappers().getMapper("name").fieldType().indexOptions());
  assertThat(docMapper.mappers().getMapper("name.indexed"),notNullValue());
  assertThat(docMapper.mappers().getMapper("name.not_indexed"),notNullValue());
  assertThat(docMapper.mappers().getMapper("name.not_indexed2"),notNullValue());
  assertThat(docMapper.mappers().getMapper("name.not_indexed3"),nullValue());
  mapping=copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json");
  try {
    mapperService.merge("person",new CompressedXContent(mapping),false,false);
    fail();
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage(),containsString("mapper [name] has different [index] values"));
    assertThat(e.getMessage(),containsString("mapper [name] has different [store] values"));
  }
  assertNotSame(IndexOptions.NONE,docMapper.mappers().getMapper("name").fieldType().indexOptions());
  assertThat(docMapper.mappers().getMapper("name.indexed"),notNullValue());
  assertThat(docMapper.mappers().getMapper("name.not_indexed"),notNullValue());
  assertThat(docMapper.mappers().getMapper("name.not_indexed2"),notNullValue());
  assertThat(docMapper.mappers().getMapper("name.not_indexed3"),nullValue());
}
