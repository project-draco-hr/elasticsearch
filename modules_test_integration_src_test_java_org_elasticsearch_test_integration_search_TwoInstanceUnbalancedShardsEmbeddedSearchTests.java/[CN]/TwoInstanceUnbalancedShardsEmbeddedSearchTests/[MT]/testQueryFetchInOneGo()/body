{
  SearchSourceBuilder sourceBuilder=searchSource().query(termQuery("multi","test")).from(0).size(20).explain(true);
  List<DfsSearchResult> dfsResults=newArrayList();
  for (  ShardsIterator shardsIt : clusterService.operationRouting().searchShards(clusterService.state(),new String[]{"test"},null)) {
    for (    ShardRouting shardRouting : shardsIt) {
      InternalSearchRequest searchRequest=searchRequest(shardRouting,sourceBuilder).scroll(new Scroll(new TimeValue(10,TimeUnit.MINUTES)));
      dfsResults.add(nodeToSearchService.get(shardRouting.currentNodeId()).executeDfsPhase(searchRequest));
    }
  }
  AggregatedDfs dfs=searchPhaseController.aggregateDfs(dfsResults);
  Map<SearchShardTarget,QueryFetchSearchResult> queryFetchResults=newHashMap();
  for (  DfsSearchResult dfsResult : dfsResults) {
    QueryFetchSearchResult queryFetchResult=nodeToSearchService.get(dfsResult.shardTarget().nodeId()).executeFetchPhase(new QuerySearchRequest(dfsResult.id(),dfs));
    queryFetchResults.put(queryFetchResult.shardTarget(),queryFetchResult);
  }
  ShardDoc[] sortedShardList=searchPhaseController.sortDocs(queryFetchResults.values());
  SearchHits hits=searchPhaseController.merge(sortedShardList,queryFetchResults,queryFetchResults).hits();
  assertThat(hits.totalHits(),equalTo(100l));
  assertThat(hits.hits().length,equalTo(50));
  for (int i=0; i < 50; i++) {
    SearchHit hit=hits.hits()[i];
  }
}
