{
  assertThat(query.getBoost(),is(queryBuilder.boost()));
  if (queryBuilder.queryName() != null) {
    Query namedQuery=context.copyNamedFilters().get(queryBuilder.queryName());
    assertThat(namedQuery,equalTo(query));
  }
  String fieldName=queryBuilder.fieldName();
  Query expectedQuery;
  if (!fieldName.equals(DATE_FIELD_NAME) && !fieldName.equals(INT_FIELD_NAME)) {
    assertThat(query,instanceOf(TermRangeQuery.class));
    expectedQuery=new TermRangeQuery(queryBuilder.fieldName(),BytesRefs.toBytesRef(queryBuilder.from()),BytesRefs.toBytesRef(queryBuilder.to()),queryBuilder.includeLower(),queryBuilder.includeUpper());
    expectedQuery.setBoost(queryBuilder.boost());
  }
 else   if (fieldName.equals(DATE_FIELD_NAME)) {
    assertThat(query,instanceOf(LateParsingQuery.class));
    Long min=expectedDateLong(queryBuilder.from(),queryBuilder,context);
    Long max=expectedDateLong(queryBuilder.to(),queryBuilder,context);
    expectedQuery=NumericRangeQuery.newLongRange(DATE_FIELD_NAME,min,max,queryBuilder.includeLower(),queryBuilder.includeUpper());
    expectedQuery=expectedQuery.rewrite(null);
    query=query.rewrite(null);
  }
 else {
    assertThat(query,instanceOf(NumericRangeQuery.class));
    expectedQuery=NumericRangeQuery.newIntRange(INT_FIELD_NAME,(Integer)queryBuilder.from(),(Integer)queryBuilder.to(),queryBuilder.includeLower(),queryBuilder.includeUpper());
    expectedQuery.setBoost(testQuery.boost());
  }
  assertEquals(expectedQuery,query);
}
