{
  out.writeOptionalString(name);
  out.writeOptionalString(nestedPath);
  out.writeOptionalString(parentChildType);
  out.writeVInt(from);
  out.writeVInt(size);
  out.writeBoolean(explain);
  out.writeBoolean(version);
  out.writeBoolean(trackScores);
  out.writeGenericValue(fieldNames);
  out.writeGenericValue(fieldDataFields);
  boolean hasScriptFields=scriptFields != null;
  out.writeBoolean(hasScriptFields);
  if (hasScriptFields) {
    out.writeList(scriptFields);
  }
  out.writeOptionalStreamable(fetchSourceContext);
  boolean hasSorts=sorts != null;
  out.writeBoolean(hasSorts);
  if (hasSorts) {
    out.writeVInt(sorts.size());
    for (    SortBuilder<?> sort : sorts) {
      out.writeNamedWriteable(sort);
    }
  }
  out.writeOptionalWriteable(highlightBuilder);
  out.writeNamedWriteable(query);
  boolean hasChildInnerHits=childInnerHits != null;
  out.writeBoolean(hasChildInnerHits);
  if (hasChildInnerHits) {
    out.writeVInt(childInnerHits.size());
    for (    Map.Entry<String,InnerHitBuilder> entry : childInnerHits.entrySet()) {
      out.writeString(entry.getKey());
      entry.getValue().writeTo(out);
    }
  }
}
