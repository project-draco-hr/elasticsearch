{
  NestedAggregator closestNestedAggregator=findClosestNestedAggregator(parent);
  if (closestNestedAggregator == null) {
    throw new SearchParseException(context.searchContext(),"Reverse nested aggregation [" + name + "] can only be used inside a [nested] aggregation");
  }
  final ObjectMapper objectMapper;
  if (path != null) {
    MapperService.SmartNameObjectMapper mapper=SearchContext.current().smartNameObjectMapper(path);
    if (mapper == null) {
      return new Unmapped(name,context,parent,metaData);
    }
    objectMapper=mapper.mapper();
    if (objectMapper == null) {
      return new Unmapped(name,context,parent,metaData);
    }
    if (!objectMapper.nested().isNested()) {
      throw new AggregationExecutionException("[reverse_nested] nested path [" + path + "] is not nested");
    }
  }
 else {
    objectMapper=null;
  }
  return new ReverseNestedAggregator(name,factories,objectMapper,context,parent,metaData);
}
