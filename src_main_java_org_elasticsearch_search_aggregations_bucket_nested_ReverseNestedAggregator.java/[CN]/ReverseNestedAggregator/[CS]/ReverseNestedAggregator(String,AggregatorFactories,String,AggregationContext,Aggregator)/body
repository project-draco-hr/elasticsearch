{
  super(name,factories,aggregationContext,parent);
  NestedAggregator closestNestedAggregator=findClosestNestedAggregator(parent);
  if (closestNestedAggregator == null) {
    throw new SearchParseException(context.searchContext(),"Reverse nested aggregation [" + name + "] can only be used inside a [nested] aggregation");
  }
  if (nestedPath == null) {
    parentFilter=SearchContext.current().filterCache().cache(NonNestedDocsFilter.INSTANCE);
  }
 else {
    MapperService.SmartNameObjectMapper mapper=SearchContext.current().smartNameObjectMapper(nestedPath);
    if (mapper == null) {
      throw new AggregationExecutionException("[reverse_nested] nested path [" + nestedPath + "] not found");
    }
    ObjectMapper objectMapper=mapper.mapper();
    if (objectMapper == null) {
      throw new AggregationExecutionException("[reverse_nested] nested path [" + nestedPath + "] not found");
    }
    if (!objectMapper.nested().isNested()) {
      throw new AggregationExecutionException("[reverse_nested] nested path [" + nestedPath + "] is not nested");
    }
    parentFilter=SearchContext.current().filterCache().cache(objectMapper.nestedTypeFilter());
  }
  bucketOrdToLastCollectedParentDocRecycler=aggregationContext.searchContext().cacheRecycler().longIntMap(32);
  bucketOrdToLastCollectedParentDoc=bucketOrdToLastCollectedParentDocRecycler.v();
  aggregationContext.ensureScoreDocsInOrder();
}
