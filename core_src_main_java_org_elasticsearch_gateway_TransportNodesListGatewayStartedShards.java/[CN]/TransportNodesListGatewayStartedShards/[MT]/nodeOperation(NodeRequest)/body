{
  try {
    final ShardId shardId=request.getShardId();
    final String indexUUID=request.getIndexUUID();
    logger.trace("{} loading local shard state info",shardId);
    ShardStateMetaData shardStateMetaData=ShardStateMetaData.FORMAT.loadLatestState(logger,nodeEnv.availableShardPaths(request.shardId));
    if (shardStateMetaData != null) {
      final IndexMetaData metaData=clusterService.state().metaData().index(shardId.index().name());
      if (metaData != null) {
        ShardPath shardPath=null;
        try {
          IndexSettings indexSettings=new IndexSettings(metaData,settings,Collections.emptyList());
          shardPath=ShardPath.loadShardPath(logger,nodeEnv,shardId,indexSettings);
          if (shardPath == null) {
            throw new IllegalStateException(shardId + " no shard path found");
          }
          Store.tryOpenIndex(shardPath.resolveIndex());
        }
 catch (        Exception exception) {
          logger.trace("{} can't open index for shard [{}] in path [{}]",exception,shardId,shardStateMetaData,(shardPath != null) ? shardPath.resolveIndex() : "");
          String allocationId=shardStateMetaData.allocationId != null ? shardStateMetaData.allocationId.getId() : null;
          return new NodeGatewayStartedShards(clusterService.localNode(),shardStateMetaData.version,allocationId,exception);
        }
      }
      if (indexUUID.equals(shardStateMetaData.indexUUID) == false && IndexMetaData.INDEX_UUID_NA_VALUE.equals(shardStateMetaData.indexUUID) == false) {
        logger.warn("{} shard state info found but indexUUID didn't match expected [{}] actual [{}]",shardId,indexUUID,shardStateMetaData.indexUUID);
      }
 else {
        logger.debug("{} shard state info found: [{}]",shardId,shardStateMetaData);
        String allocationId=shardStateMetaData.allocationId != null ? shardStateMetaData.allocationId.getId() : null;
        return new NodeGatewayStartedShards(clusterService.localNode(),shardStateMetaData.version,allocationId);
      }
    }
    logger.trace("{} no local shard info found",shardId);
    return new NodeGatewayStartedShards(clusterService.localNode(),-1,null);
  }
 catch (  Exception e) {
    throw new ElasticsearchException("failed to load started shards",e);
  }
}
