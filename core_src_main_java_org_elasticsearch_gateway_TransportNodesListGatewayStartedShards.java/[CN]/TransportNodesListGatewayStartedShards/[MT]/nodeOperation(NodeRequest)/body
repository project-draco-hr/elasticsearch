{
  try {
    final ShardId shardId=request.getShardId();
    logger.trace("{} loading local shard state info",shardId);
    ShardStateMetaData shardStateMetaData=ShardStateMetaData.FORMAT.loadLatestState(logger,nodeEnv.availableShardPaths(request.shardId));
    if (shardStateMetaData != null) {
      IndexMetaData metaData=clusterService.state().metaData().index(shardId.getIndex());
      if (metaData == null) {
        metaData=IndexMetaData.FORMAT.loadLatestState(logger,nodeEnv.indexPaths(shardId.getIndex()));
      }
      if (metaData == null) {
        ElasticsearchException e=new ElasticsearchException("failed to find local IndexMetaData");
        e.setShard(request.shardId);
        throw e;
      }
      ShardPath shardPath=null;
      try {
        IndexSettings indexSettings=new IndexSettings(metaData,settings);
        shardPath=ShardPath.loadShardPath(logger,nodeEnv,shardId,indexSettings);
        if (shardPath == null) {
          throw new IllegalStateException(shardId + " no shard path found");
        }
        Store.tryOpenIndex(shardPath.resolveIndex(),shardId,logger);
      }
 catch (      Exception exception) {
        logger.trace("{} can't open index for shard [{}] in path [{}]",exception,shardId,shardStateMetaData,(shardPath != null) ? shardPath.resolveIndex() : "");
        String allocationId=shardStateMetaData.allocationId != null ? shardStateMetaData.allocationId.getId() : null;
        return new NodeGatewayStartedShards(clusterService.localNode(),shardStateMetaData.legacyVersion,allocationId,shardStateMetaData.primary,exception);
      }
      logger.debug("{} shard state info found: [{}]",shardId,shardStateMetaData);
      String allocationId=shardStateMetaData.allocationId != null ? shardStateMetaData.allocationId.getId() : null;
      return new NodeGatewayStartedShards(clusterService.localNode(),shardStateMetaData.legacyVersion,allocationId,shardStateMetaData.primary);
    }
    logger.trace("{} no local shard info found",shardId);
    return new NodeGatewayStartedShards(clusterService.localNode(),ShardStateMetaData.NO_VERSION,null,false);
  }
 catch (  Exception e) {
    throw new ElasticsearchException("failed to load started shards",e);
  }
}
