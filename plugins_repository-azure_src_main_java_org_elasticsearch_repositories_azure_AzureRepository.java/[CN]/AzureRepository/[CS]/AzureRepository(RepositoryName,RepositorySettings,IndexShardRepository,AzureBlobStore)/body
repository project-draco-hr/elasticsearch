{
  super(name.getName(),repositorySettings,indexShardRepository);
  String container=getRepositorySettings(repositorySettings,Repository.CONTAINER,Storage.CONTAINER,Defaults.CONTAINER);
  this.blobStore=azureBlobStore;
  this.chunkSize=getRepositorySettingsAsBytesSize(repositorySettings,Repository.CHUNK_SIZE,Storage.CHUNK_SIZE,Defaults.CHUNK_SIZE);
  if (this.chunkSize.getMb() > 64) {
    logger.warn("azure repository does not support yet size > 64mb. Fall back to 64mb.");
    this.chunkSize=new ByteSizeValue(64,ByteSizeUnit.MB);
  }
  this.compress=getRepositorySettingsAsBoolean(repositorySettings,Repository.COMPRESS,Storage.COMPRESS,Defaults.COMPRESS);
  String modeStr=getRepositorySettings(repositorySettings,Repository.LOCATION_MODE,Storage.LOCATION_MODE,null);
  if (modeStr != null) {
    LocationMode locationMode=LocationMode.valueOf(modeStr.toUpperCase(Locale.ROOT));
    if (locationMode == LocationMode.SECONDARY_ONLY) {
      readonly=true;
    }
 else {
      readonly=false;
    }
  }
 else {
    readonly=false;
  }
  String basePath=getRepositorySettings(repositorySettings,Repository.BASE_PATH,Storage.BASE_PATH,null);
  if (Strings.hasLength(basePath)) {
    basePath=Strings.trimLeadingCharacter(basePath,'/');
    BlobPath path=new BlobPath();
    for (    String elem : Strings.splitStringToArray(basePath,'/')) {
      path=path.add(elem);
    }
    this.basePath=path;
  }
 else {
    this.basePath=BlobPath.cleanPath();
  }
  logger.debug("using container [{}], chunk_size [{}], compress [{}], base_path [{}]",container,chunkSize,compress,basePath);
}
