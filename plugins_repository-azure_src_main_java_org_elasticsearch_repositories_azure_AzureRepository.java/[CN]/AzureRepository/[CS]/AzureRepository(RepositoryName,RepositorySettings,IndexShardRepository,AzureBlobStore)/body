{
  super(name.getName(),repositorySettings,indexShardRepository);
  String container=getValue(repositorySettings,Repository.CONTAINER_SETTING,Storage.CONTAINER_SETTING);
  this.blobStore=azureBlobStore;
  ByteSizeValue configuredChunkSize=getValue(repositorySettings,Repository.CHUNK_SIZE_SETTING,Storage.CHUNK_SIZE_SETTING);
  if (configuredChunkSize.getMb() > MAX_CHUNK_SIZE.getMb()) {
    Setting<ByteSizeValue> setting=getEffectiveSetting(repositorySettings,Repository.CHUNK_SIZE_SETTING,Storage.CHUNK_SIZE_SETTING);
    throw new SettingsException("[" + setting.getKey() + "] must not exceed ["+ MAX_CHUNK_SIZE+ "] but is set to ["+ configuredChunkSize+ "].");
  }
 else {
    this.chunkSize=configuredChunkSize;
  }
  this.compress=getValue(repositorySettings,Repository.COMPRESS_SETTING,Storage.COMPRESS_SETTING);
  String modeStr=getValue(repositorySettings,Repository.LOCATION_MODE_SETTING,Storage.LOCATION_MODE_SETTING);
  if (Strings.hasLength(modeStr)) {
    LocationMode locationMode=LocationMode.valueOf(modeStr.toUpperCase(Locale.ROOT));
    readonly=locationMode == LocationMode.SECONDARY_ONLY;
  }
 else {
    readonly=false;
  }
  String basePath=getValue(repositorySettings,Repository.BASE_PATH_SETTING,Storage.BASE_PATH_SETTING);
  if (Strings.hasLength(basePath)) {
    basePath=Strings.trimLeadingCharacter(basePath,'/');
    BlobPath path=new BlobPath();
    for (    String elem : basePath.split("/")) {
      path=path.add(elem);
    }
    this.basePath=path;
  }
 else {
    this.basePath=BlobPath.cleanPath();
  }
  logger.debug("using container [{}], chunk_size [{}], compress [{}], base_path [{}]",container,chunkSize,compress,basePath);
}
