{
  SearchRequest searchRequest=prepareBlockingScriptQuery();
  final BenchmarkRequest request=BenchmarkTestUtil.randomRequest(client(),indices,numExecutorNodes,competitionSettingsMap,searchRequest);
  logger.info("--> Submitting benchmark - competitors [{}] iterations [{}]",request.competitors().size(),request.settings().iterations());
  final ActionFuture<BenchmarkResponse> future=client().bench(request);
  try {
    waitForQuery.await();
    final BenchmarkStatusResponse statusResponse=client().prepareBenchStatus().execute().actionGet();
    waitForTestLatch.countDown();
    assertThat(statusResponse.benchmarkResponses().size(),greaterThan(0));
    for (    BenchmarkResponse benchmarkResponse : statusResponse.benchmarkResponses()) {
      assertThat(benchmarkResponse.benchmarkName(),equalTo(BENCHMARK_NAME));
      assertThat(benchmarkResponse.state(),equalTo(BenchmarkResponse.State.RUNNING));
      assertFalse(benchmarkResponse.hasErrors());
      for (      CompetitionResult result : benchmarkResponse.competitionResults().values()) {
        assertThat(result.nodeResults().size(),lessThanOrEqualTo(numExecutorNodes));
        validateCompetitionResult(result,competitionSettingsMap.get(result.competitionName()),false);
      }
    }
  }
  finally {
    if (waitForTestLatch.getCount() == 1) {
      waitForTestLatch.countDown();
    }
    client().prepareAbortBench(BENCHMARK_NAME).get();
    assertThat(client().prepareBenchStatus().execute().actionGet().totalActiveBenchmarks(),equalTo(0));
    assertThat(waitForTestLatch.getCount(),is(0l));
  }
  assertThat(future.get().state(),isOneOf(BenchmarkResponse.State.ABORTED,BenchmarkResponse.State.COMPLETE));
}
