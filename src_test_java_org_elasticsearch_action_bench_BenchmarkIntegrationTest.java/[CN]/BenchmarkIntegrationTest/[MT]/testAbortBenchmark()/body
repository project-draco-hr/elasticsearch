{
  final int iters=between(1,3);
  for (int i=0; i < iters; i++) {
    SearchRequest searchRequest=prepareBlockingScriptQuery();
    final BenchmarkRequest request=BenchmarkTestUtil.randomRequest(client(),indices,numExecutorNodes,competitionSettingsMap,searchRequest);
    request.settings().iterations(Integer.MAX_VALUE,true);
    logger.info("--> Submitting benchmark - competitors [{}] iterations [{}]",request.competitors().size(),request.settings().iterations());
    boolean aborted=false;
    final ActionFuture<BenchmarkResponse> benchmarkResponse=client().bench(request);
    try {
      waitForQuery.await();
      final AbortBenchmarkResponse abortResponse=client().prepareAbortBench(BENCHMARK_NAME).get();
      aborted=true;
      assertAcked(abortResponse);
      final BenchmarkStatusResponse statusResponse=client().prepareBenchStatus().execute().actionGet();
      waitForTestLatch.countDown();
      assertThat(statusResponse.totalActiveBenchmarks(),equalTo(0));
      assertThat(benchmarkResponse.get().state(),is(BenchmarkResponse.State.ABORTED));
    }
  finally {
      if (waitForTestLatch.getCount() == 1) {
        waitForTestLatch.countDown();
      }
      if (!aborted) {
        client().prepareAbortBench(BENCHMARK_NAME).get();
      }
      assertThat(waitForTestLatch.getCount(),is(0l));
    }
  }
}
