{
  SearchRequest searchRequest=prepareBlockingScriptQuery();
  final BenchmarkRequest request=BenchmarkTestUtil.randomRequest(client(),indices,numExecutorNodes,competitionSettingsMap,searchRequest);
  request.settings().iterations(Integer.MAX_VALUE,true);
  logger.info("--> Submitting benchmark - competitors [{}] iterations [{}] [{}]",request.competitors().size(),request.settings().iterations(),request);
  final ActionFuture<BenchmarkResponse> benchmarkResponse=client().bench(request);
  assertTrue(waitForQuery.await(5l,TimeUnit.SECONDS));
  final AbortBenchmarkResponse abortResponse=client().prepareAbortBench(BENCHMARK_NAME).execute().actionGet();
  waitForTestLatch.countDown();
  assertThat(abortResponse.getNodeResponses().size(),lessThanOrEqualTo(numExecutorNodes));
  assertThat(abortResponse.getBenchmarkName(),equalTo(BENCHMARK_NAME));
  for (  AbortBenchmarkNodeResponse nodeResponse : abortResponse.getNodeResponses()) {
    assertThat(nodeResponse.benchmarkName(),equalTo(BENCHMARK_NAME));
    assertThat(nodeResponse.errorMessage(),nullValue());
    assertThat(nodeResponse.nodeName(),notNullValue());
  }
  final BenchmarkStatusResponse statusResponse=client().prepareBenchStatus().execute().actionGet();
  assertThat(statusResponse.totalActiveBenchmarks(),equalTo(0));
  assertThat(benchmarkResponse.get().state(),is(BenchmarkResponse.State.ABORTED));
}
