{
  final BenchmarkRequest request=BenchmarkTestUtil.randomRequest(client(),indices,numExecutorNodes,competitionSettingsMap,BenchmarkTestUtil.MIN_LARGE_INTERVAL,BenchmarkTestUtil.MAX_LARGE_INTERVAL);
  logger.info("--> Submitting benchmark - competitors [{}] iterations [{}]",request.competitors().size(),request.settings().iterations());
  final ActionFuture<BenchmarkResponse> benchmarkResponse=client().bench(request);
  final boolean ret=awaitBusy(statusPredicate,TIMEOUT,TIME_UNIT);
  assertTrue(ret);
  final AbortBenchmarkResponse abortResponse=client().prepareAbortBench(BENCHMARK_NAME).execute().actionGet();
  assertThat(abortResponse.getNodeResponses().size(),lessThanOrEqualTo(numExecutorNodes));
  assertThat(abortResponse.getBenchmarkName(),equalTo(BENCHMARK_NAME));
  for (  AbortBenchmarkNodeResponse nodeResponse : abortResponse.getNodeResponses()) {
    assertThat(nodeResponse.benchmarkName(),equalTo(BENCHMARK_NAME));
    assertThat(nodeResponse.errorMessage(),nullValue());
    assertThat(nodeResponse.nodeName(),notNullValue());
  }
  final BenchmarkStatusResponse statusResponse=client().prepareBenchStatus().execute().actionGet();
  assertThat(statusResponse.totalActiveBenchmarks(),equalTo(0));
  assertThat(benchmarkResponse.get().state(),equalTo(BenchmarkResponse.State.ABORTED));
}
