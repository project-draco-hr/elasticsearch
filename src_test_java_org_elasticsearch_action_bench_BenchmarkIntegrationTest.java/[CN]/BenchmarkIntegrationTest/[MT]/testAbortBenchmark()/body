{
  SearchRequest searchRequest=prepareBlockingScriptQuery();
  final BenchmarkRequest request=BenchmarkTestUtil.randomRequest(client(),indices,numExecutorNodes,competitionSettingsMap,searchRequest);
  request.settings().iterations(Integer.MAX_VALUE,true);
  logger.info("--> Submitting benchmark - competitors [{}] iterations [{}]",request.competitors().size(),request.settings().iterations());
  boolean aborted=false;
  final ActionFuture<BenchmarkResponse> benchmarkResponse=client().bench(request);
  try {
    waitForQuery.await();
    final AbortBenchmarkResponse abortResponse=client().prepareAbortBench(BENCHMARK_NAME).get();
    aborted=true;
    assertThat(abortResponse.getNodeResponses().size(),lessThanOrEqualTo(numExecutorNodes));
    assertThat(abortResponse.getBenchmarkName(),equalTo(BENCHMARK_NAME));
    for (    AbortBenchmarkNodeResponse nodeResponse : abortResponse.getNodeResponses()) {
      assertThat(nodeResponse.benchmarkName(),equalTo(BENCHMARK_NAME));
      assertThat(nodeResponse.errorMessage(),nullValue());
      assertThat(nodeResponse.nodeName(),notNullValue());
    }
    final BenchmarkStatusResponse statusResponse=client().prepareBenchStatus().execute().actionGet();
    waitForTestLatch.countDown();
    assertThat(statusResponse.totalActiveBenchmarks(),equalTo(0));
    assertThat(benchmarkResponse.get().state(),is(BenchmarkResponse.State.ABORTED));
  }
  finally {
    if (waitForTestLatch.getCount() == 1) {
      waitForTestLatch.countDown();
    }
    if (!aborted) {
      client().prepareAbortBench(BENCHMARK_NAME).get();
    }
    assertThat(waitForTestLatch.getCount(),is(0l));
  }
}
