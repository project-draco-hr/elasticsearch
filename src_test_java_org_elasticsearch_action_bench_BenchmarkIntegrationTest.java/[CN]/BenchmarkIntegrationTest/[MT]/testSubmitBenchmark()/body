{
  final int iters=between(1,3);
  for (int i=0; i < iters; i++) {
    final BenchmarkRequest request=BenchmarkTestUtil.randomRequest(client(),indices,numExecutorNodes,competitionSettingsMap);
    logger.info("--> Submitting benchmark - competitors [{}] iterations [{}]",request.competitors().size(),request.settings().iterations());
    final BenchmarkResponse response=client().bench(request).actionGet();
    assertThat(response,notNullValue());
    assertThat(response.state(),equalTo(BenchmarkResponse.State.COMPLETE));
    assertFalse(response.hasErrors());
    assertThat(response.benchmarkName(),equalTo(BENCHMARK_NAME));
    assertThat(response.competitionResults().size(),equalTo(request.competitors().size()));
    for (    CompetitionResult result : response.competitionResults().values()) {
      assertThat(result.nodeResults().size(),equalTo(numExecutorNodes));
      validateCompetitionResult(result,competitionSettingsMap.get(result.competitionName()),true);
    }
  }
}
