{
  assertTrue("serviceA is not connected to nodeA",serviceA.nodeConnected(nodeA));
  if (((TransportService)serviceA).getLocalNodeId() != null) {
    serviceA.disconnectFromNode(nodeA);
  }
  final AtomicReference<Exception> exception=new AtomicReference<>();
  serviceA.registerHandler("localNode",new BaseTransportRequestHandler<StringMessageRequest>(){
    @Override public StringMessageRequest newInstance(){
      return new StringMessageRequest();
    }
    @Override public String executor(){
      return ThreadPool.Names.GENERIC;
    }
    @Override public void messageReceived(    StringMessageRequest request,    TransportChannel channel){
      try {
        channel.sendResponse(new StringMessageResponse(request.message));
      }
 catch (      IOException e) {
        exception.set(e);
      }
    }
  }
);
  final AtomicReference<String> responseString=new AtomicReference<>();
  final CountDownLatch responseLatch=new CountDownLatch(1);
  serviceA.sendRequest(nodeA,"localNode",new StringMessageRequest("test"),new TransportResponseHandler<StringMessageResponse>(){
    @Override public StringMessageResponse newInstance(){
      return new StringMessageResponse();
    }
    @Override public void handleResponse(    StringMessageResponse response){
      responseString.set(response.message);
      responseLatch.countDown();
    }
    @Override public void handleException(    TransportException exp){
      exception.set(exp);
      responseLatch.countDown();
    }
    @Override public String executor(){
      return ThreadPool.Names.GENERIC;
    }
  }
);
  responseLatch.await();
  assertNull(exception.get());
  assertThat(responseString.get(),equalTo("test"));
}
