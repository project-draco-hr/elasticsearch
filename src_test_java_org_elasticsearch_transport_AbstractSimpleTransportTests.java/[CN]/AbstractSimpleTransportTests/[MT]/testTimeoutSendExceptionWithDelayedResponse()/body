{
  serviceA.registerRequestHandler("sayHelloTimeoutDelayedResponse",StringMessageRequest.class,ThreadPool.Names.GENERIC,new TransportRequestHandler<StringMessageRequest>(){
    @Override public void messageReceived(    StringMessageRequest request,    TransportChannel channel){
      TimeValue sleep=TimeValue.parseTimeValue(request.message,null);
      try {
        Thread.sleep(sleep.millis());
      }
 catch (      InterruptedException e) {
      }
      try {
        channel.sendResponse(new StringMessageResponse("hello " + request.message));
      }
 catch (      IOException e) {
        e.printStackTrace();
        assertThat(e.getMessage(),false,equalTo(true));
      }
    }
  }
);
  final CountDownLatch latch=new CountDownLatch(1);
  TransportFuture<StringMessageResponse> res=serviceB.submitRequest(nodeA,"sayHelloTimeoutDelayedResponse",new StringMessageRequest("300ms"),options().withTimeout(100),new BaseTransportResponseHandler<StringMessageResponse>(){
    @Override public StringMessageResponse newInstance(){
      return new StringMessageResponse();
    }
    @Override public String executor(){
      return ThreadPool.Names.GENERIC;
    }
    @Override public void handleResponse(    StringMessageResponse response){
      latch.countDown();
      fail("got response instead of exception");
    }
    @Override public void handleException(    TransportException exp){
      latch.countDown();
      assertThat(exp,instanceOf(ReceiveTimeoutTransportException.class));
    }
  }
);
  try {
    StringMessageResponse message=res.txGet();
    fail("exception should be thrown");
  }
 catch (  Exception e) {
    assertThat(e,instanceOf(ReceiveTimeoutTransportException.class));
  }
  latch.await();
  for (int i=0; i < 10; i++) {
    final int counter=i;
    res=serviceB.submitRequest(nodeA,"sayHelloTimeoutDelayedResponse",new StringMessageRequest(counter + "ms"),options().withTimeout(3000),new BaseTransportResponseHandler<StringMessageResponse>(){
      @Override public StringMessageResponse newInstance(){
        return new StringMessageResponse();
      }
      @Override public String executor(){
        return ThreadPool.Names.GENERIC;
      }
      @Override public void handleResponse(      StringMessageResponse response){
        assertThat("hello " + counter + "ms",equalTo(response.message));
      }
      @Override public void handleException(      TransportException exp){
        exp.printStackTrace();
        fail("got exception instead of a response for " + counter + ": "+ exp.getDetailedMessage());
      }
    }
);
    StringMessageResponse message=res.txGet();
    assertThat(message.message,equalTo("hello " + counter + "ms"));
  }
  serviceA.removeHandler("sayHelloTimeoutDelayedResponse");
}
