{
  final MapperService mapperService=indexShard.mapperService();
  final Map<String,MappedFieldType> warmUp=new HashMap<>();
  for (  DocumentMapper docMapper : mapperService.docMappers(false)) {
    for (    FieldMapper fieldMapper : docMapper.mappers()) {
      final FieldDataType fieldDataType=fieldMapper.fieldType().fieldDataType();
      if (fieldDataType == null) {
        continue;
      }
      if (fieldDataType.getLoading() == Loading.LAZY) {
        continue;
      }
      final String indexName=fieldMapper.fieldType().names().indexName();
      if (warmUp.containsKey(indexName)) {
        continue;
      }
      warmUp.put(indexName,fieldMapper.fieldType());
    }
  }
  final IndexFieldDataService indexFieldDataService=indexShard.indexFieldDataService();
  final Executor executor=threadPool.executor(executor());
  final CountDownLatch latch=new CountDownLatch(context.searcher().reader().leaves().size() * warmUp.size());
  for (  final LeafReaderContext ctx : context.searcher().reader().leaves()) {
    for (    final MappedFieldType fieldType : warmUp.values()) {
      executor.execute(new Runnable(){
        @Override public void run(){
          try {
            final long start=System.nanoTime();
            indexFieldDataService.getForField(fieldType).load(ctx);
            if (indexShard.warmerService().logger().isTraceEnabled()) {
              indexShard.warmerService().logger().trace("warmed fielddata for [{}], took [{}]",fieldType.names().fullName(),TimeValue.timeValueNanos(System.nanoTime() - start));
            }
          }
 catch (          Throwable t) {
            indexShard.warmerService().logger().warn("failed to warm-up fielddata for [{}]",t,fieldType.names().fullName());
          }
 finally {
            latch.countDown();
          }
        }
      }
);
    }
  }
  return new TerminationHandle(){
    @Override public void awaitTermination() throws InterruptedException {
      latch.await();
    }
  }
;
}
