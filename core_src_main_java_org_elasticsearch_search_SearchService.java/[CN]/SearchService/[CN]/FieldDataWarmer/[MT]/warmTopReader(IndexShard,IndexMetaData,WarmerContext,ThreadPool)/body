{
  final MapperService mapperService=indexShard.mapperService();
  final Map<String,MappedFieldType> warmUpGlobalOrdinals=new HashMap<>();
  for (  DocumentMapper docMapper : mapperService.docMappers(false)) {
    for (    FieldMapper fieldMapper : docMapper.mappers()) {
      final FieldDataType fieldDataType;
      final String indexName;
      if (fieldMapper instanceof ParentFieldMapper) {
        MappedFieldType joinFieldType=((ParentFieldMapper)fieldMapper).getChildJoinFieldType();
        if (joinFieldType == null) {
          continue;
        }
        fieldDataType=joinFieldType.fieldDataType();
        indexName=fieldMapper.fieldType().names().indexName();
      }
 else {
        fieldDataType=fieldMapper.fieldType().fieldDataType();
        indexName=fieldMapper.fieldType().names().indexName();
      }
      if (fieldDataType == null) {
        continue;
      }
      if (fieldDataType.getLoading() != Loading.EAGER_GLOBAL_ORDINALS) {
        continue;
      }
      if (warmUpGlobalOrdinals.containsKey(indexName)) {
        continue;
      }
      warmUpGlobalOrdinals.put(indexName,fieldMapper.fieldType());
    }
  }
  final IndexFieldDataService indexFieldDataService=indexShard.indexFieldDataService();
  final Executor executor=threadPool.executor(executor());
  final CountDownLatch latch=new CountDownLatch(warmUpGlobalOrdinals.size());
  for (  final MappedFieldType fieldType : warmUpGlobalOrdinals.values()) {
    executor.execute(new Runnable(){
      @Override public void run(){
        try {
          final long start=System.nanoTime();
          IndexFieldData.Global ifd=indexFieldDataService.getForField(fieldType);
          ifd.loadGlobal(context.reader());
          if (indexShard.warmerService().logger().isTraceEnabled()) {
            indexShard.warmerService().logger().trace("warmed global ordinals for [{}], took [{}]",fieldType.names().fullName(),TimeValue.timeValueNanos(System.nanoTime() - start));
          }
        }
 catch (        Throwable t) {
          indexShard.warmerService().logger().warn("failed to warm-up global ordinals for [{}]",t,fieldType.names().fullName());
        }
 finally {
          latch.countDown();
        }
      }
    }
);
  }
  return new TerminationHandle(){
    @Override public void awaitTermination() throws InterruptedException {
      latch.await();
    }
  }
;
}
