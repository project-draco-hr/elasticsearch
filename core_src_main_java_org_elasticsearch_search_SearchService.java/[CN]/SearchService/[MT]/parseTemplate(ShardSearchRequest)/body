{
  final ExecutableScript executable;
  if (request.template() != null) {
    executable=this.scriptService.executable(request.template(),ScriptContext.Standard.SEARCH);
  }
 else {
    if (!hasLength(request.templateSource())) {
      return;
    }
    XContentParser parser=null;
    Template template=null;
    try {
      parser=XContentFactory.xContent(request.templateSource()).createParser(request.templateSource());
      template=TemplateQueryParser.parse(parser,"params","template");
      if (template.getType() == ScriptService.ScriptType.INLINE) {
        parser=null;
        try {
          byte[] templateBytes=template.getScript().getBytes(Charsets.UTF_8);
          parser=XContentFactory.xContent(templateBytes).createParser(templateBytes);
        }
 catch (        ElasticsearchParseException epe) {
          template=new Template(template.getScript(),ScriptService.ScriptType.FILE,MustacheScriptEngineService.NAME,null,template.getParams());
        }
        if (parser != null) {
          try {
            Template innerTemplate=TemplateQueryParser.parse(parser);
            if (hasLength(innerTemplate.getScript()) && !innerTemplate.getType().equals(ScriptService.ScriptType.INLINE)) {
              template=new Template(innerTemplate.getScript(),innerTemplate.getType(),MustacheScriptEngineService.NAME,null,template.getParams());
            }
          }
 catch (          ScriptParseException e) {
          }
        }
      }
    }
 catch (    IOException e) {
      throw new ElasticsearchParseException("Failed to parse template",e);
    }
 finally {
      Releasables.closeWhileHandlingException(parser);
    }
    if (!hasLength(template.getScript())) {
      throw new ElasticsearchParseException("Template must have [template] field configured");
    }
    executable=this.scriptService.executable(template,ScriptContext.Standard.SEARCH);
  }
  BytesReference processedQuery=(BytesReference)executable.run();
  request.source(processedQuery);
}
