{
  final int[] docIdsToLoad;
  int docsOffset=0;
  final Suggest suggest=context.queryResult().suggest();
  int numSuggestDocs=0;
  final List<CompletionSuggestion> completionSuggestions;
  if (suggest != null && suggest.hasScoreDocs()) {
    completionSuggestions=suggest.filter(CompletionSuggestion.class);
    for (    CompletionSuggestion completionSuggestion : completionSuggestions) {
      numSuggestDocs+=completionSuggestion.getOptions().size();
    }
  }
 else {
    completionSuggestions=Collections.emptyList();
  }
  if (context.request().scroll() != null) {
    TopDocs topDocs=context.queryResult().topDocs();
    docIdsToLoad=new int[topDocs.scoreDocs.length + numSuggestDocs];
    for (int i=0; i < topDocs.scoreDocs.length; i++) {
      docIdsToLoad[docsOffset++]=topDocs.scoreDocs[i].doc;
    }
  }
 else {
    TopDocs topDocs=context.queryResult().topDocs();
    if (topDocs.scoreDocs.length < context.from()) {
      docIdsToLoad=new int[numSuggestDocs];
    }
 else {
      int totalSize=context.from() + context.size();
      docIdsToLoad=new int[Math.min(topDocs.scoreDocs.length - context.from(),context.size()) + numSuggestDocs];
      for (int i=context.from(); i < Math.min(totalSize,topDocs.scoreDocs.length); i++) {
        docIdsToLoad[docsOffset++]=topDocs.scoreDocs[i].doc;
      }
    }
  }
  for (  CompletionSuggestion completionSuggestion : completionSuggestions) {
    for (    CompletionSuggestion.Entry.Option option : completionSuggestion.getOptions()) {
      docIdsToLoad[docsOffset++]=option.getDoc().doc;
    }
  }
  context.docIdsToLoad(docIdsToLoad,0,docIdsToLoad.length);
}
