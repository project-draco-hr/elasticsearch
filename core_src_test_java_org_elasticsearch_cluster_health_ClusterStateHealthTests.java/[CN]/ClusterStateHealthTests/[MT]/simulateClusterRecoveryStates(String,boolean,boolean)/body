{
  final int numberOfShards=randomIntBetween(1,5);
  final int numberOfReplicas=randomIntBetween(1,numberOfShards);
  IndexMetaData indexMetaData=IndexMetaData.builder(indexName).settings(settings(Version.CURRENT).put(IndexMetaData.SETTING_INDEX_UUID,UUIDs.randomBase64UUID())).numberOfShards(numberOfShards).numberOfReplicas(numberOfReplicas).state(IndexMetaData.State.OPEN).build();
  if (withPreviousAllocationIds) {
    final IndexMetaData.Builder idxMetaWithAllocationIds=IndexMetaData.builder(indexMetaData);
    boolean atLeastOne=false;
    for (int i=0; i < numberOfShards; i++) {
      if (atLeastOne == false || randomBoolean()) {
        idxMetaWithAllocationIds.putActiveAllocationIds(i,Sets.newHashSet(UUIDs.randomBase64UUID()));
        atLeastOne=true;
      }
    }
    indexMetaData=idxMetaWithAllocationIds.build();
  }
  final MetaData metaData=MetaData.builder().put(indexMetaData,true).build();
  final RoutingTable routingTable=RoutingTable.builder().addAsRecovery(indexMetaData).build();
  ClusterState clusterState=ClusterState.builder(new ClusterName("test_cluster")).metaData(metaData).routingTable(routingTable).build();
  return generateClusterStates(clusterState,indexName,numberOfReplicas,withPrimaryAllocationFailures);
}
