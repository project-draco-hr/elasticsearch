{
  assertAcked(prepareCreate("test").addMapping("test","string","type=text","date","type=date","double","type=double","float","type=float","long","type=long","integer","type=integer","short","type=short","byte","type=byte"));
  ensureGreen("test");
  assertAcked(prepareCreate("test1").addMapping("test","string","type=text,index=false","date","type=date,index=false","double","type=double,index=false","float","type=float,index=false","long","type=long,index=false","integer","type=integer,index=false","short","type=short,index=false","byte","type=byte,index=false"));
  ensureGreen("test1");
  assertAcked(prepareCreate("test3").addMapping("test","string","type=text,index=false","date","type=date,index=false","double","type=double,index=false","float","type=float,index=false","long","type=long,index=false","integer","type=integer,index=false","short","type=short,index=false","byte","type=byte,index=false"));
  ensureGreen("test3");
  long minByte=Byte.MAX_VALUE;
  long maxByte=Byte.MIN_VALUE;
  long minShort=Short.MAX_VALUE;
  long maxShort=Short.MIN_VALUE;
  long minInt=Integer.MAX_VALUE;
  long maxInt=Integer.MIN_VALUE;
  long minLong=Long.MAX_VALUE;
  long maxLong=Long.MIN_VALUE;
  double minFloat=Float.MAX_VALUE;
  double maxFloat=Float.MIN_VALUE;
  double minDouble=Double.MAX_VALUE;
  double maxDouble=Double.MIN_VALUE;
  String minString=new String(Character.toChars(1114111));
  String maxString="0";
  int numDocs=scaledRandomIntBetween(128,1024);
  List<IndexRequestBuilder> request=new ArrayList<>(numDocs);
  for (int doc=0; doc < numDocs; doc++) {
    byte b=randomByte();
    minByte=Math.min(minByte,b);
    maxByte=Math.max(maxByte,b);
    short s=randomShort();
    minShort=Math.min(minShort,s);
    maxShort=Math.max(maxShort,s);
    int i=randomInt();
    minInt=Math.min(minInt,i);
    maxInt=Math.max(maxInt,i);
    long l=randomLong();
    minLong=Math.min(minLong,l);
    maxLong=Math.max(maxLong,l);
    float f=randomFloat();
    minFloat=Math.min(minFloat,f);
    maxFloat=Math.max(maxFloat,f);
    double d=randomDouble();
    minDouble=Math.min(minDouble,d);
    maxDouble=Math.max(maxDouble,d);
    String str=randomRealisticUnicodeOfLength(3);
    if (str.compareTo(minString) < 0) {
      minString=str;
    }
    if (str.compareTo(maxString) > 0) {
      maxString=str;
    }
    request.add(client().prepareIndex("test","test",Integer.toString(doc)).setSource("byte",b,"short",s,"integer",i,"long",l,"float",f,"double",d,"string",str));
  }
  indexRandom(true,false,request);
  FieldStatsResponse response=client().prepareFieldStats().setFields("byte","short","integer","long","float","double","string").get();
  assertAllSuccessful(response);
  for (  FieldStats stats : response.getAllFieldStats().values()) {
    assertThat(stats.getMaxDoc(),equalTo((long)numDocs));
    assertThat(stats.getDocCount(),equalTo((long)numDocs));
    assertThat(stats.getDensity(),equalTo(100));
  }
  assertThat(response.getAllFieldStats().get("byte").getMinValue(),equalTo(minByte));
  assertThat(response.getAllFieldStats().get("byte").getMaxValue(),equalTo(maxByte));
  assertThat(response.getAllFieldStats().get("short").getMinValue(),equalTo(minShort));
  assertThat(response.getAllFieldStats().get("short").getMaxValue(),equalTo(maxShort));
  assertThat(response.getAllFieldStats().get("integer").getMinValue(),equalTo(minInt));
  assertThat(response.getAllFieldStats().get("integer").getMaxValue(),equalTo(maxInt));
  assertThat(response.getAllFieldStats().get("long").getMinValue(),equalTo(minLong));
  assertThat(response.getAllFieldStats().get("long").getMaxValue(),equalTo(maxLong));
  assertThat(response.getAllFieldStats().get("float").getMinValue(),equalTo(minFloat));
  assertThat(response.getAllFieldStats().get("float").getMaxValue(),equalTo(maxFloat));
  assertThat(response.getAllFieldStats().get("double").getMinValue(),equalTo(minDouble));
  assertThat(response.getAllFieldStats().get("double").getMaxValue(),equalTo(maxDouble));
}
