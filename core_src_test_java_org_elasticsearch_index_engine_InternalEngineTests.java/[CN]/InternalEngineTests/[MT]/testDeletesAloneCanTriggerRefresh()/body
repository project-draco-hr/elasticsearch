{
  Settings settings=Settings.builder().put(defaultSettings).put(EngineConfig.INDEX_BUFFER_SIZE_SETTING,"1kb").put(IndexingMemoryController.SHARD_MEMORY_INTERVAL_TIME_SETTING,"100ms").build();
  try (Store store=createStore();Engine engine=new InternalEngine(config(settings,store,createTempDir(),new MergeSchedulerConfig(defaultSettings),newMergePolicy()),false)){
    for (int i=0; i < 100; i++) {
      String id=Integer.toString(i);
      ParsedDocument doc=testParsedDocument(id,id,"test",null,-1,-1,testDocument(),B_1,null);
      engine.index(new Engine.Index(newUid(id),doc,2,VersionType.EXTERNAL,Engine.Operation.Origin.PRIMARY,System.nanoTime()));
    }
    engine.forceMerge(true,1,false,false,false);
    Searcher s=engine.acquireSearcher("test");
    final long version1=((DirectoryReader)s.reader()).getVersion();
    s.close();
    for (int i=0; i < 100; i++) {
      String id=Integer.toString(i);
      engine.delete(new Engine.Delete("test",id,newUid(id),10,VersionType.EXTERNAL,Engine.Operation.Origin.PRIMARY,System.nanoTime(),false));
    }
    assertBusy(new Runnable(){
      @Override public void run(){
        Searcher s2=engine.acquireSearcher("test");
        long version2=((DirectoryReader)s2.reader()).getVersion();
        s2.close();
        assertThat(version2,greaterThan(version1));
      }
    }
);
  }
 }
