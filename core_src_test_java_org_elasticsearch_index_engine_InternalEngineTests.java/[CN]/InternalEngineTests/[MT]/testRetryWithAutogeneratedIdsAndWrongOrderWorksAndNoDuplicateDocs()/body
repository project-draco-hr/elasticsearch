{
  ParsedDocument doc=testParsedDocument("1","1","test",null,-1,-1,testDocument(),B_1,null);
  boolean canHaveDuplicates=true;
  boolean autoGeneratedId=true;
  Engine.Create firstIndexRequest=new Engine.Create(newUid("1"),doc,Versions.MATCH_ANY,VersionType.INTERNAL,PRIMARY,System.nanoTime(),canHaveDuplicates,autoGeneratedId);
  engine.create(firstIndexRequest);
  assertThat(firstIndexRequest.version(),equalTo(1l));
  Engine.Create firstIndexRequestReplica=new Engine.Create(newUid("1"),doc,firstIndexRequest.version(),firstIndexRequest.versionType().versionTypeForReplicationAndRecovery(),REPLICA,System.nanoTime(),canHaveDuplicates,autoGeneratedId);
  replicaEngine.create(firstIndexRequestReplica);
  assertThat(firstIndexRequestReplica.version(),equalTo(1l));
  canHaveDuplicates=false;
  Engine.Create secondIndexRequest=new Engine.Create(newUid("1"),doc,Versions.MATCH_ANY,VersionType.INTERNAL,PRIMARY,System.nanoTime(),canHaveDuplicates,autoGeneratedId);
  try {
    engine.create(secondIndexRequest);
    fail();
  }
 catch (  DocumentAlreadyExistsException e) {
  }
  engine.refresh("test");
  Engine.Searcher searcher=engine.acquireSearcher("test");
  TopDocs topDocs=searcher.searcher().search(new MatchAllDocsQuery(),10);
  assertThat(topDocs.totalHits,equalTo(1));
  Engine.Create secondIndexRequestReplica=new Engine.Create(newUid("1"),doc,firstIndexRequest.version(),firstIndexRequest.versionType().versionTypeForReplicationAndRecovery(),REPLICA,System.nanoTime(),canHaveDuplicates,autoGeneratedId);
  try {
    replicaEngine.create(secondIndexRequestReplica);
    fail();
  }
 catch (  VersionConflictEngineException e) {
  }
  replicaEngine.refresh("test");
  Engine.Searcher replicaSearcher=replicaEngine.acquireSearcher("test");
  topDocs=replicaSearcher.searcher().search(new MatchAllDocsQuery(),10);
  assertThat(topDocs.totalHits,equalTo(1));
  searcher.close();
  replicaSearcher.close();
}
