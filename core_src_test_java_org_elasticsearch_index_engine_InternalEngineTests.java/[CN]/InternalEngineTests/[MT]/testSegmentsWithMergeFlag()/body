{
  try (Store store=createStore();Engine engine=createEngine(defaultSettings,store,createTempDir(),new MergeSchedulerConfig(defaultSettings),new TieredMergePolicy())){
    ParsedDocument doc=testParsedDocument("1","1","test",null,-1,-1,testDocument(),B_1,null);
    Engine.Index index=new Engine.Index(null,newUid("1"),doc);
    engine.index(index);
    engine.flush();
    assertThat(engine.segments(false).size(),equalTo(1));
    index=new Engine.Index(null,newUid("2"),doc);
    engine.index(index);
    engine.flush();
    List<Segment> segments=engine.segments(false);
    assertThat(segments.size(),equalTo(2));
    for (    Segment segment : segments) {
      assertThat(segment.getMergeId(),nullValue());
    }
    index=new Engine.Index(null,newUid("3"),doc);
    engine.index(index);
    engine.flush();
    segments=engine.segments(false);
    assertThat(segments.size(),equalTo(3));
    for (    Segment segment : segments) {
      assertThat(segment.getMergeId(),nullValue());
    }
    index=new Engine.Index(null,newUid("4"),doc);
    engine.index(index);
    engine.flush();
    final long gen1=store.readLastCommittedSegmentsInfo().getGeneration();
    engine.forceMerge(true);
    for (    Segment segment : engine.segments(false)) {
      assertThat(segment.getMergeId(),nullValue());
    }
    assertTrue(store.readLastCommittedSegmentsInfo().getGeneration() > gen1);
    final boolean flush=randomBoolean();
    final long gen2=store.readLastCommittedSegmentsInfo().getGeneration();
    engine.forceMerge(flush);
    for (    Segment segment : engine.segments(false)) {
      assertThat(segment.getMergeId(),nullValue());
    }
    if (flush) {
      assertEquals(gen2 + 1,store.readLastCommittedSegmentsInfo().getLastGeneration());
    }
  }
 }
