{
  final String syncId=randomUnicodeOfCodepointLengthBetween(10,20);
  ParsedDocument doc=testParsedDocument("1","1","test",null,-1,-1,testDocumentWithTextField(),B_1,null);
  engine.create(new Engine.Create(null,newUid("1"),doc));
  final Engine.CommitId commitID=engine.flush();
  assertEquals("should succeed to flush commit with right id and no pending doc",engine.syncFlush(syncId,commitID),Engine.SyncedFlushResult.SUCCESS);
  assertEquals(store.readLastCommittedSegmentsInfo().getUserData().get(Engine.SYNC_COMMIT_ID),syncId);
  assertEquals(engine.getLastCommittedSegmentInfos().getUserData().get(Engine.SYNC_COMMIT_ID),syncId);
  doc=testParsedDocument("2","2","test",null,-1,-1,testDocumentWithTextField(),new BytesArray("{}"),null);
  engine.create(new Engine.Create(null,newUid("2"),doc));
  EngineConfig config=engine.config();
  engine.close();
  final MockDirectoryWrapper directory=DirectoryUtils.getLeaf(store.directory(),MockDirectoryWrapper.class);
  if (directory != null) {
    directory.setPreventDoubleWrite(false);
  }
  engine=new InternalEngine(config,false);
  assertNull("Sync ID must be gone since we have a document to replay",engine.getLastCommittedSegmentInfos().getUserData().get(Engine.SYNC_COMMIT_ID));
}
