{
  List<Path> indexes=new ArrayList<>();
  try (DirectoryStream<Path> stream=Files.newDirectoryStream(getBwcIndicesPath(),"index-*.zip")){
    for (    Path path : stream) {
      indexes.add(path);
    }
  }
   Collections.shuffle(indexes,random());
  for (  Path indexFile : indexes.subList(0,scaledRandomIntBetween(1,indexes.size() / 2))) {
    final String indexName=indexFile.getFileName().toString().replace(".zip","").toLowerCase(Locale.ROOT);
    Version version=Version.fromString(indexName.replace("index-",""));
    if (version.onOrAfter(Version.V_2_0_0_beta1)) {
      continue;
    }
    Path unzipDir=createTempDir();
    Path unzipDataDir=unzipDir.resolve("data");
    try (InputStream stream=Files.newInputStream(indexFile)){
      TestUtil.unzip(stream,unzipDir);
    }
     assertTrue(Files.exists(unzipDataDir));
    Path[] list=filterExtraFSFiles(FileSystemUtils.files(unzipDataDir));
    if (list.length != 1) {
      throw new IllegalStateException("Backwards index must contain exactly one cluster but was " + list.length + " "+ Arrays.toString(list));
    }
    Path src=list[0].resolve("nodes/0/indices/" + indexName);
    Path translog=list[0].resolve("nodes/0/indices/" + indexName).resolve("0").resolve("translog");
    assertTrue("[" + indexFile + "] missing index dir: "+ src.toString(),Files.exists(src));
    assertTrue("[" + indexFile + "] missing translog dir: "+ translog.toString(),Files.exists(translog));
    Path[] tlogFiles=filterExtraFSFiles(FileSystemUtils.files(translog));
    assertEquals(Arrays.toString(tlogFiles),tlogFiles.length,1);
    final long size=Files.size(tlogFiles[0]);
    final long generation=TranslogTests.parseLegacyTranslogFile(tlogFiles[0]);
    assertTrue(generation >= 1);
    logger.debug("upgrading index {} file: {} size: {}",indexName,tlogFiles[0].getFileName(),size);
    Directory directory=newFSDirectory(src.resolve("0").resolve("index"));
    Store store=createStore(directory);
    final int iters=randomIntBetween(0,2);
    int numDocs=-1;
    for (int i=0; i < iters; i++) {
      try (InternalEngine engine=createEngine(store,translog)){
        try (Searcher searcher=engine.acquireSearcher("test")){
          if (i > 0) {
            assertEquals(numDocs,searcher.reader().numDocs());
          }
          TopDocs search=searcher.searcher().search(new MatchAllDocsQuery(),1);
          numDocs=searcher.reader().numDocs();
          assertTrue(search.totalHits > 1);
        }
         CommitStats commitStats=engine.commitStats();
        Map<String,String> userData=commitStats.getUserData();
        assertTrue("userdata dosn't contain uuid",userData.containsKey(Translog.TRANSLOG_UUID_KEY));
        assertTrue("userdata doesn't contain generation key",userData.containsKey(Translog.TRANSLOG_GENERATION_KEY));
        assertFalse("userdata contains legacy marker",userData.containsKey("translog_id"));
      }
     }
    try (InternalEngine engine=createEngine(store,translog)){
      if (numDocs == -1) {
        try (Searcher searcher=engine.acquireSearcher("test")){
          numDocs=searcher.reader().numDocs();
        }
       }
      final int numExtraDocs=randomIntBetween(1,10);
      for (int i=0; i < numExtraDocs; i++) {
        ParsedDocument doc=testParsedDocument("extra" + Integer.toString(i),"extra" + Integer.toString(i),"test",null,-1,-1,testDocument(),new BytesArray("{}"),null);
        Engine.Create firstIndexRequest=new Engine.Create(newUid(Integer.toString(i)),doc,Versions.MATCH_ANY,VersionType.INTERNAL,PRIMARY,System.nanoTime(),false,false);
        engine.create(firstIndexRequest);
        assertThat(firstIndexRequest.version(),equalTo(1l));
      }
      engine.refresh("test");
      try (Engine.Searcher searcher=engine.acquireSearcher("test")){
        TopDocs topDocs=searcher.searcher().search(new MatchAllDocsQuery(),randomIntBetween(numDocs,numDocs + numExtraDocs));
        assertThat(topDocs.totalHits,equalTo(numDocs + numExtraDocs));
      }
     }
     IOUtils.close(store,directory);
  }
}
