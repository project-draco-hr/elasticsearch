{
  final int numDocs=randomIntBetween(1,10);
  for (int i=0; i < numDocs; i++) {
    ParsedDocument doc=testParsedDocument(Integer.toString(i),Integer.toString(i),"test",null,-1,-1,testDocument(),new BytesArray("{}"),null);
    Engine.Index firstIndexRequest=new Engine.Index(newUid(Integer.toString(i)),doc,Versions.MATCH_ANY,VersionType.INTERNAL,PRIMARY,System.nanoTime());
    engine.index(firstIndexRequest);
    assertThat(firstIndexRequest.version(),equalTo(1L));
  }
  DocsStats docStats=engine.getDocStats();
  assertEquals(numDocs,docStats.getCount());
  assertEquals(0,docStats.getDeleted());
  engine.forceMerge(randomBoolean(),1,false,false,false);
  ParsedDocument doc=testParsedDocument(Integer.toString(0),Integer.toString(0),"test",null,-1,-1,testDocument(),new BytesArray("{}"),null);
  Engine.Index firstIndexRequest=new Engine.Index(newUid(Integer.toString(0)),doc,Versions.MATCH_ANY,VersionType.INTERNAL,PRIMARY,System.nanoTime());
  engine.index(firstIndexRequest);
  assertThat(firstIndexRequest.version(),equalTo(2L));
  engine.flush();
  docStats=engine.getDocStats();
  assertEquals(1,docStats.getDeleted());
  assertEquals(numDocs,docStats.getCount());
  engine.forceMerge(randomBoolean(),1,false,false,false);
  docStats=engine.getDocStats();
  assertEquals(0,docStats.getDeleted());
  assertEquals(numDocs,docStats.getCount());
}
