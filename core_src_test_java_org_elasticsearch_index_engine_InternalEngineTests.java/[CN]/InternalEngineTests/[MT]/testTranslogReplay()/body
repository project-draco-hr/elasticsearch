{
  final int numDocs=randomIntBetween(1,10);
  for (int i=0; i < numDocs; i++) {
    ParsedDocument doc=testParsedDocument(Integer.toString(i),Integer.toString(i),"test",null,-1,-1,testDocument(),new BytesArray("{}"),null);
    Engine.Index firstIndexRequest=new Engine.Index(newUid(Integer.toString(i)),doc,Versions.MATCH_DELETED,VersionType.INTERNAL,PRIMARY,System.nanoTime());
    engine.index(firstIndexRequest);
    assertThat(firstIndexRequest.version(),equalTo(1L));
  }
  engine.refresh("test");
  try (Engine.Searcher searcher=engine.acquireSearcher("test")){
    TopDocs topDocs=searcher.searcher().search(new MatchAllDocsQuery(),randomIntBetween(numDocs,numDocs + 10));
    assertThat(topDocs.totalHits,equalTo(numDocs));
  }
   TranslogHandler parser=(TranslogHandler)engine.config().getTranslogRecoveryPerformer();
  parser.mappingUpdate=dynamicUpdate();
  engine.close();
  engine=new InternalEngine(copy(engine.config(),EngineConfig.OpenMode.OPEN_INDEX_AND_TRANSLOG));
  engine.recoverFromTranslog();
  try (Engine.Searcher searcher=engine.acquireSearcher("test")){
    TopDocs topDocs=searcher.searcher().search(new MatchAllDocsQuery(),randomIntBetween(numDocs,numDocs + 10));
    assertThat(topDocs.totalHits,equalTo(numDocs));
  }
   parser=(TranslogHandler)engine.config().getTranslogRecoveryPerformer();
  assertEquals(numDocs,parser.recoveredOps.get());
  if (parser.mappingUpdate != null) {
    assertEquals(1,parser.getRecoveredTypes().size());
    assertTrue(parser.getRecoveredTypes().containsKey("test"));
  }
 else {
    assertEquals(0,parser.getRecoveredTypes().size());
  }
  engine.close();
  engine=createEngine(store,primaryTranslogDir);
  try (Engine.Searcher searcher=engine.acquireSearcher("test")){
    TopDocs topDocs=searcher.searcher().search(new MatchAllDocsQuery(),randomIntBetween(numDocs,numDocs + 10));
    assertThat(topDocs.totalHits,equalTo(numDocs));
  }
   parser=(TranslogHandler)engine.config().getTranslogRecoveryPerformer();
  assertEquals(0,parser.recoveredOps.get());
  final boolean flush=randomBoolean();
  int randomId=randomIntBetween(numDocs + 1,numDocs + 10);
  String uuidValue="test#" + Integer.toString(randomId);
  ParsedDocument doc=testParsedDocument(uuidValue,Integer.toString(randomId),"test",null,-1,-1,testDocument(),new BytesArray("{}"),null);
  Engine.Index firstIndexRequest=new Engine.Index(newUid(uuidValue),doc,1,VersionType.EXTERNAL,PRIMARY,System.nanoTime());
  engine.index(firstIndexRequest);
  assertThat(firstIndexRequest.version(),equalTo(1L));
  if (flush) {
    engine.flush();
  }
  doc=testParsedDocument(uuidValue,Integer.toString(randomId),"test",null,-1,-1,testDocument(),new BytesArray("{}"),null);
  Engine.Index idxRequest=new Engine.Index(newUid(uuidValue),doc,2,VersionType.EXTERNAL,PRIMARY,System.nanoTime());
  engine.index(idxRequest);
  engine.refresh("test");
  assertThat(idxRequest.version(),equalTo(2L));
  try (Engine.Searcher searcher=engine.acquireSearcher("test")){
    TopDocs topDocs=searcher.searcher().search(new MatchAllDocsQuery(),numDocs + 1);
    assertThat(topDocs.totalHits,equalTo(numDocs + 1));
  }
   engine.close();
  engine=createEngine(store,primaryTranslogDir);
  try (Engine.Searcher searcher=engine.acquireSearcher("test")){
    TopDocs topDocs=searcher.searcher().search(new MatchAllDocsQuery(),numDocs + 1);
    assertThat(topDocs.totalHits,equalTo(numDocs + 1));
  }
   parser=(TranslogHandler)engine.config().getTranslogRecoveryPerformer();
  assertEquals(flush ? 1 : 2,parser.recoveredOps.get());
  engine.delete(new Engine.Delete("test",Integer.toString(randomId),newUid(uuidValue)));
  if (randomBoolean()) {
    engine.refresh("test");
  }
 else {
    engine.close();
    engine=createEngine(store,primaryTranslogDir);
  }
  try (Engine.Searcher searcher=engine.acquireSearcher("test")){
    TopDocs topDocs=searcher.searcher().search(new MatchAllDocsQuery(),numDocs);
    assertThat(topDocs.totalHits,equalTo(numDocs));
  }
 }
