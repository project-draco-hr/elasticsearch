{
  boolean canHaveDuplicates=true;
  boolean autoGeneratedId=true;
  final int numDocs=randomIntBetween(1,10);
  for (int i=0; i < numDocs; i++) {
    ParsedDocument doc=testParsedDocument(Integer.toString(i),Integer.toString(i),"test",null,-1,-1,testDocument(),new BytesArray("{}"),null);
    Engine.Create firstIndexRequest=new Engine.Create(newUid(Integer.toString(i)),doc,Versions.MATCH_ANY,VersionType.INTERNAL,PRIMARY,System.nanoTime(),canHaveDuplicates,autoGeneratedId);
    engine.create(firstIndexRequest);
    assertThat(firstIndexRequest.version(),equalTo(1l));
  }
  engine.refresh("test");
  try (Engine.Searcher searcher=engine.acquireSearcher("test")){
    TopDocs topDocs=searcher.searcher().search(new MatchAllDocsQuery(),randomIntBetween(numDocs,numDocs + 10));
    assertThat(topDocs.totalHits,equalTo(numDocs));
  }
   final MockDirectoryWrapper directory=DirectoryUtils.getLeaf(store.directory(),MockDirectoryWrapper.class);
  if (directory != null) {
    directory.setPreventDoubleWrite(false);
  }
  engine.close();
  engine=new InternalEngine(engine.config(),true);
  try (Engine.Searcher searcher=engine.acquireSearcher("test")){
    TopDocs topDocs=searcher.searcher().search(new MatchAllDocsQuery(),randomIntBetween(numDocs,numDocs + 10));
    assertThat(topDocs.totalHits,equalTo(0));
  }
 }
