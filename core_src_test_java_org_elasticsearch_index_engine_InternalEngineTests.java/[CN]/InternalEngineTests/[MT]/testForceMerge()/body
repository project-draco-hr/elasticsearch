{
  try (Store store=createStore();Engine engine=new InternalEngine(config(defaultSettings,store,createTempDir(),new LogByteSizeMergePolicy())).recoverFromTranslog()){
    int numDocs=randomIntBetween(10,100);
    for (int i=0; i < numDocs; i++) {
      ParsedDocument doc=testParsedDocument(Integer.toString(i),Integer.toString(i),"test",null,-1,-1,testDocument(),B_1,null);
      Engine.Index index=new Engine.Index(newUid(Integer.toString(i)),doc);
      engine.index(index);
      engine.refresh("test");
    }
    try (Engine.Searcher test=engine.acquireSearcher("test")){
      assertEquals(numDocs,test.reader().numDocs());
    }
     engine.forceMerge(true,1,false,false,false);
    assertEquals(engine.segments(true).size(),1);
    ParsedDocument doc=testParsedDocument(Integer.toString(0),Integer.toString(0),"test",null,-1,-1,testDocument(),B_1,null);
    Engine.Index index=new Engine.Index(newUid(Integer.toString(0)),doc);
    engine.delete(new Engine.Delete(index.type(),index.id(),index.uid()));
    engine.forceMerge(true,10,true,false,false);
    assertEquals(engine.segments(true).size(),1);
    try (Engine.Searcher test=engine.acquireSearcher("test")){
      assertEquals(numDocs - 1,test.reader().numDocs());
      assertEquals(engine.config().getMergePolicy().toString(),numDocs - 1,test.reader().maxDoc());
    }
     doc=testParsedDocument(Integer.toString(1),Integer.toString(1),"test",null,-1,-1,testDocument(),B_1,null);
    index=new Engine.Index(newUid(Integer.toString(1)),doc);
    engine.delete(new Engine.Delete(index.type(),index.id(),index.uid()));
    engine.forceMerge(true,10,false,false,false);
    assertEquals(engine.segments(true).size(),1);
    try (Engine.Searcher test=engine.acquireSearcher("test")){
      assertEquals(numDocs - 2,test.reader().numDocs());
      assertEquals(numDocs - 1,test.reader().maxDoc());
    }
   }
 }
