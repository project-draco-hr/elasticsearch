{
  AtomicReference<Exception> exception=new AtomicReference<>();
  String operation=randomFrom("optimize","refresh","flush");
  Thread mergeThread=new Thread(){
    @Override public void run(){
      boolean stop=false;
      logger.info("try with {}",operation);
      while (stop == false) {
        try {
switch (operation) {
case "optimize":
{
              engine.forceMerge(true,1,false,false,false);
              break;
            }
case "refresh":
{
            engine.refresh("test refresh");
            break;
          }
case "flush":
{
          engine.flush(true,false);
          break;
        }
    }
  }
 catch (  Exception e) {
    exception.set(e);
    stop=true;
  }
}
}
}
;
mergeThread.start();
engine.close();
mergeThread.join();
logger.info("exception caught: ",exception.get());
assertTrue("expected an Exception that signals shard is not available",TransportActions.isShardNotAvailableException(exception.get()));
}
