{
  byte[] data=Streams.copyToBytesFromClasspath("/org/elasticsearch/action/percolate/mpercolate2.json");
  MultiPercolateRequest request=new MultiPercolateRequest();
  request.indices("my-index1").documentType("my-type1").ignoreIndices(IgnoreIndices.MISSING);
  request.add(data,0,data.length,false);
  assertThat(request.requests().size(),equalTo(2));
  PercolateRequest percolateRequest=request.requests().get(0);
  assertThat(percolateRequest.indices()[0],equalTo("my-index1"));
  assertThat(percolateRequest.documentType(),equalTo("my-type1"));
  assertThat(percolateRequest.routing(),equalTo("my-routing-1"));
  assertThat(percolateRequest.preference(),equalTo("_local"));
  assertThat(percolateRequest.ignoreIndices(),equalTo(IgnoreIndices.MISSING));
  assertThat(percolateRequest.onlyCount(),equalTo(false));
  assertThat(percolateRequest.getRequest(),nullValue());
  assertThat(percolateRequest.source(),notNullValue());
  Map sourceMap=XContentFactory.xContent(percolateRequest.source()).createParser(percolateRequest.source()).map();
  assertThat(sourceMap.get("doc"),equalTo((Object)MapBuilder.newMapBuilder().put("field1","value1").map()));
  percolateRequest=request.requests().get(1);
  assertThat(percolateRequest.indices()[0],equalTo("my-index1"));
  assertThat(percolateRequest.documentType(),equalTo("my-type1"));
  assertThat(percolateRequest.routing(),equalTo("my-routing-1"));
  assertThat(percolateRequest.preference(),equalTo("_local"));
  assertThat(percolateRequest.ignoreIndices(),equalTo(IgnoreIndices.MISSING));
  assertThat(percolateRequest.onlyCount(),equalTo(false));
  assertThat(percolateRequest.getRequest(),nullValue());
  assertThat(percolateRequest.source(),notNullValue());
  sourceMap=XContentFactory.xContent(percolateRequest.source()).createParser(percolateRequest.source()).map();
  assertThat(sourceMap.get("doc"),equalTo((Object)MapBuilder.newMapBuilder().put("field1","value2").map()));
}
