{
  List<Facet> facets=context.facets();
  if (facets.size() == 1) {
    InternalCountDateHistogramFacet histoFacet=(InternalCountDateHistogramFacet)facets.get(0);
    Arrays.sort(histoFacet.entries,histoFacet.comparatorType.comparator());
    return facets.get(0);
  }
  Recycler.V<TLongLongHashMap> counts=context.cacheRecycler().longLongMap(-1);
  for (  Facet facet : facets) {
    InternalCountDateHistogramFacet histoFacet=(InternalCountDateHistogramFacet)facet;
    for (    CountEntry entry : histoFacet.entries) {
      counts.v().adjustOrPutValue(entry.getTime(),entry.getCount(),entry.getCount());
    }
  }
  CountEntry[] entries=new CountEntry[counts.v().size()];
  int i=0;
  for (TLongLongIterator it=counts.v().iterator(); it.hasNext(); ) {
    it.advance();
    entries[i++]=new CountEntry(it.key(),it.value());
  }
  counts.release();
  Arrays.sort(entries,comparatorType.comparator());
  return new InternalCountDateHistogramFacet(getName(),comparatorType,entries);
}
