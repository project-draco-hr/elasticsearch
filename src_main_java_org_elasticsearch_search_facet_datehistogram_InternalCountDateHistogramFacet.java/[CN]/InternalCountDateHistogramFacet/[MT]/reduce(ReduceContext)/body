{
  List<Facet> facets=context.facets();
  if (facets.size() == 1) {
    InternalCountDateHistogramFacet histoFacet=(InternalCountDateHistogramFacet)facets.get(0);
    Arrays.sort(histoFacet.entries,histoFacet.comparatorType.comparator());
    return facets.get(0);
  }
  Recycler.V<LongLongOpenHashMap> counts=context.cacheRecycler().longLongMap(-1);
  for (  Facet facet : facets) {
    InternalCountDateHistogramFacet histoFacet=(InternalCountDateHistogramFacet)facet;
    for (    CountEntry entry : histoFacet.entries) {
      counts.v().addTo(entry.getTime(),entry.getCount());
    }
  }
  CountEntry[] countEntries=new CountEntry[counts.v().size()];
  final boolean[] states=counts.v().allocated;
  final long[] keys=counts.v().keys;
  final long[] values=counts.v().values;
  int entriesIndex=0;
  for (int i=0; i < states.length; i++) {
    if (states[i]) {
      countEntries[entriesIndex++]=new CountEntry(keys[i],values[i]);
    }
  }
  counts.close();
  Arrays.sort(countEntries,comparatorType.comparator());
  return new InternalCountDateHistogramFacet(getName(),comparatorType,countEntries);
}
