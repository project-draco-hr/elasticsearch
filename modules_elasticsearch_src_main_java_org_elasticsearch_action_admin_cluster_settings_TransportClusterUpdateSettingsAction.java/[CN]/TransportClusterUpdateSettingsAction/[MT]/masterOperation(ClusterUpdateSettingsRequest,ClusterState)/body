{
  final AtomicReference<Throwable> failureRef=new AtomicReference<Throwable>();
  final CountDownLatch latch=new CountDownLatch(1);
  clusterService.submitStateUpdateTask("cluster_update_settings",new ClusterStateUpdateTask(){
    @Override public ClusterState execute(    ClusterState currentState){
      try {
        boolean changed=false;
        ImmutableSettings.Builder transientSettings=ImmutableSettings.settingsBuilder();
        transientSettings.put(currentState.metaData().transientSettings());
        for (        Map.Entry<String,String> entry : request.transientSettings().getAsMap().entrySet()) {
          if (MetaData.dynamicSettings().contains(entry.getKey()) || entry.getKey().startsWith("logger.")) {
            transientSettings.put(entry.getKey(),entry.getValue());
            changed=true;
          }
 else {
            logger.warn("ignoring transient setting [{}], not dynamically updateable",entry.getKey());
          }
        }
        ImmutableSettings.Builder persistentSettings=ImmutableSettings.settingsBuilder();
        persistentSettings.put(currentState.metaData().persistentSettings());
        for (        Map.Entry<String,String> entry : request.persistentSettings().getAsMap().entrySet()) {
          if (MetaData.dynamicSettings().contains(entry.getKey()) || entry.getKey().startsWith("logger.")) {
            changed=true;
            persistentSettings.put(entry.getKey(),entry.getValue());
          }
 else {
            logger.warn("ignoring persistent setting [{}], not dynamically updateable",entry.getKey());
          }
        }
        if (!changed) {
          return currentState;
        }
        MetaData.Builder metaData=MetaData.builder().metaData(currentState.metaData()).persistentSettings(persistentSettings.build()).transientSettings(transientSettings.build());
        return ClusterState.builder().state(currentState).metaData(metaData).build();
      }
  finally {
        latch.countDown();
      }
    }
  }
);
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
    failureRef.set(e);
  }
  if (failureRef.get() != null) {
    if (failureRef.get() instanceof ElasticSearchException) {
      throw (ElasticSearchException)failureRef.get();
    }
 else {
      throw new ElasticSearchException(failureRef.get().getMessage(),failureRef.get());
    }
  }
  return new ClusterUpdateSettingsResponse();
}
