{
  int overridePositionIncrementGap=TextFieldMapper.Defaults.POSITION_INCREMENT_GAP;
  if (analyzerFactory instanceof CustomAnalyzerProvider) {
    ((CustomAnalyzerProvider)analyzerFactory).build(this);
    overridePositionIncrementGap=Integer.MIN_VALUE;
  }
  Analyzer analyzerF=analyzerFactory.get();
  if (analyzerF == null) {
    throw new IllegalArgumentException("analyzer [" + analyzerFactory.name() + "] created null analyzer");
  }
  NamedAnalyzer analyzer;
  if (analyzerF instanceof NamedAnalyzer) {
    analyzer=(NamedAnalyzer)analyzerF;
    if (overridePositionIncrementGap >= 0 && analyzer.getPositionIncrementGap(analyzer.name()) != overridePositionIncrementGap) {
      analyzer=new NamedAnalyzer(analyzer,overridePositionIncrementGap);
    }
  }
 else {
    analyzer=new NamedAnalyzer(name,analyzerFactory.scope(),analyzerF,overridePositionIncrementGap);
  }
  if (analyzers.containsKey(name)) {
    throw new IllegalStateException("already registered analyzer with name: " + name);
  }
  analyzers.put(name,analyzer);
  String strAliases=this.indexSettings.getSettings().get("index.analysis.analyzer." + analyzerFactory.name() + ".alias");
  Set<String> aliases=new HashSet<>();
  if (strAliases != null) {
    aliases.addAll(Strings.commaDelimitedListToSet(strAliases));
  }
  aliases.addAll(Arrays.asList(this.indexSettings.getSettings().getAsArray("index.analysis.analyzer." + analyzerFactory.name() + ".alias")));
  for (  String alias : aliases) {
    if (analyzerAliases.putIfAbsent(alias,analyzer) != null) {
      throw new IllegalStateException("alias [" + alias + "] is already used by ["+ analyzerAliases.get(alias).name()+ "]");
    }
  }
}
