{
  AllocationService allocation=createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries",10).build());
  logger.info("creating an index with 1 shard, no replica");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").numberOfShards(1).numberOfReplicas(0)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder().metaData(metaData).routingTable(routingTable).build();
  assertThat(clusterState.routingTable().index("test").shard(0).primaryAllocatedPostApi(),equalTo(false));
  logger.info("adding two nodes and performing rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1")).put(newNode("node2"))).build();
  RoutingAllocation.Result rerouteResult=allocation.reroute(clusterState);
  clusterState=ClusterState.builder(clusterState).routingTable(rerouteResult.routingTable()).build();
  assertThat(clusterState.routingTable().index("test").shard(0).primaryAllocatedPostApi(),equalTo(false));
  logger.info("start primary shard");
  rerouteResult=allocation.applyStartedShards(clusterState,clusterState.routingNodes().shardsWithState(INITIALIZING));
  clusterState=ClusterState.builder(clusterState).routingTable(rerouteResult.routingTable()).build();
  assertThat(clusterState.routingTable().index("test").shard(0).primaryAllocatedPostApi(),equalTo(true));
}
