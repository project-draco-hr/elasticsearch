{
  super(settings);
  this.probe=probe;
  this.timerService=timerService;
  this.refreshInterval=componentSettings.getAsTime("refresh_interval",TimeValue.timeValueSeconds(5));
  logger.debug("Using probe [{}] with refresh_interval [{}]",probe,refreshInterval);
  this.info=probe.networkInfo();
  this.info.refreshInterval=refreshInterval.millis();
  this.cachedStats=probe.networkStats();
  if (logger.isDebugEnabled()) {
    StringBuilder netDebug=new StringBuilder("net_info");
    try {
      Enumeration<NetworkInterface> enum_=NetworkInterface.getNetworkInterfaces();
      String hostName=InetAddress.getLocalHost().getHostName();
      netDebug.append("\nhost [").append(hostName).append("]\n");
      while (enum_.hasMoreElements()) {
        NetworkInterface net=enum_.nextElement();
        netDebug.append(net.getName()).append('\t').append("display_name [").append(net.getDisplayName()).append("]\n");
        Enumeration<InetAddress> addresses=net.getInetAddresses();
        netDebug.append("\t\taddress ");
        while (addresses.hasMoreElements()) {
          netDebug.append("[").append(addresses.nextElement()).append("] ");
        }
        netDebug.append('\n');
        netDebug.append("\t\tmtu [").append(net.getMTU()).append("] multicast [").append(net.supportsMulticast()).append("] ptp [").append(net.isPointToPoint()).append("] loopback [").append(net.isLoopback()).append("] up [").append(net.isUp()).append("] virtual [").append(net.isVirtual()).append("]").append('\n');
      }
    }
 catch (    Exception ex) {
      netDebug.append("Failed to get Network Interface Info [" + ex.getMessage() + "]");
    }
    logger.debug(netDebug.toString());
  }
  if (logger.isTraceEnabled()) {
    logger.trace("ifconfig\n\n" + ifconfig());
  }
}
