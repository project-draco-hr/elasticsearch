{
  try {
    List<SnapshotInfo> snapshotInfoBuilder=new ArrayList<>();
    if (isAllSnapshots(request.snapshots())) {
      snapshotInfoBuilder.addAll(snapshotsService.snapshots(request.repository(),request.ignoreUnavailable()));
    }
 else     if (isCurrentSnapshots(request.snapshots())) {
      snapshotInfoBuilder.addAll(snapshotsService.currentSnapshots(request.repository()));
    }
 else {
      Set<String> snapshotsToGet=new LinkedHashSet<>();
      List<SnapshotInfo> snapshots=null;
      for (      String snapshotOrPattern : request.snapshots()) {
        if (Regex.isSimpleMatchPattern(snapshotOrPattern) == false) {
          snapshotsToGet.add(snapshotOrPattern);
        }
 else {
          if (snapshots == null) {
            snapshots=snapshotsService.snapshots(request.repository(),request.ignoreUnavailable());
          }
          for (          SnapshotInfo snapshot : snapshots) {
            if (Regex.simpleMatch(snapshotOrPattern,snapshot.name())) {
              snapshotsToGet.add(snapshot.name());
            }
          }
        }
      }
      for (      String snapshot : snapshotsToGet) {
        SnapshotId snapshotId=new SnapshotId(request.repository(),snapshot);
        snapshotInfoBuilder.add(snapshotsService.snapshot(snapshotId));
      }
    }
    listener.onResponse(new GetSnapshotsResponse(Collections.unmodifiableList(snapshotInfoBuilder)));
  }
 catch (  Throwable t) {
    listener.onFailure(t);
  }
}
