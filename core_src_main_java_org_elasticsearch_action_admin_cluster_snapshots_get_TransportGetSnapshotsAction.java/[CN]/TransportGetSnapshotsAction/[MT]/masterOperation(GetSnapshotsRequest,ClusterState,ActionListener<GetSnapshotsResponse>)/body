{
  try {
    final String repository=request.repository();
    List<SnapshotInfo> snapshotInfoBuilder=new ArrayList<>();
    if (isAllSnapshots(request.snapshots())) {
      snapshotInfoBuilder.addAll(snapshotsService.currentSnapshots(repository));
      snapshotInfoBuilder.addAll(snapshotsService.snapshots(repository,snapshotsService.snapshotIds(repository),request.ignoreUnavailable()));
    }
 else     if (isCurrentSnapshots(request.snapshots())) {
      snapshotInfoBuilder.addAll(snapshotsService.currentSnapshots(repository));
    }
 else {
      final Map<String,SnapshotId> allSnapshotIds=new HashMap<>();
      for (      SnapshotInfo snapshotInfo : snapshotsService.currentSnapshots(repository)) {
        SnapshotId snapshotId=snapshotInfo.snapshotId();
        allSnapshotIds.put(snapshotId.getName(),snapshotId);
      }
      for (      SnapshotId snapshotId : snapshotsService.snapshotIds(repository)) {
        allSnapshotIds.put(snapshotId.getName(),snapshotId);
      }
      final Set<SnapshotId> toResolve=new LinkedHashSet<>();
      for (      String snapshotOrPattern : request.snapshots()) {
        if (Regex.isSimpleMatchPattern(snapshotOrPattern) == false) {
          if (allSnapshotIds.containsKey(snapshotOrPattern)) {
            toResolve.add(allSnapshotIds.get(snapshotOrPattern));
          }
 else           if (request.ignoreUnavailable() == false) {
            throw new SnapshotMissingException(repository,snapshotOrPattern);
          }
        }
 else {
          for (          Map.Entry<String,SnapshotId> entry : allSnapshotIds.entrySet()) {
            if (Regex.simpleMatch(snapshotOrPattern,entry.getKey())) {
              toResolve.add(entry.getValue());
            }
          }
        }
      }
      if (toResolve.isEmpty() && request.ignoreUnavailable() == false) {
        throw new SnapshotMissingException(repository,request.snapshots()[0]);
      }
      snapshotInfoBuilder.addAll(snapshotsService.snapshots(repository,new ArrayList<>(toResolve),request.ignoreUnavailable()));
    }
    listener.onResponse(new GetSnapshotsResponse(snapshotInfoBuilder));
  }
 catch (  Exception e) {
    listener.onFailure(e);
  }
}
