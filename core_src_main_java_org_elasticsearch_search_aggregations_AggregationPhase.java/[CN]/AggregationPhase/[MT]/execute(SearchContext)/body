{
  if (context.aggregations() == null) {
    context.queryResult().aggregations(null);
    return;
  }
  if (context.queryResult().aggregations() != null) {
    return;
  }
  Aggregator[] aggregators=context.aggregations().aggregators();
  List<Aggregator> globals=new ArrayList<>();
  for (int i=0; i < aggregators.length; i++) {
    if (aggregators[i] instanceof GlobalAggregator) {
      globals.add(aggregators[i]);
    }
  }
  if (!globals.isEmpty()) {
    BucketCollector globalsCollector=BucketCollector.wrap(globals);
    Query query=Queries.newMatchAllQuery();
    Query searchFilter=context.searchFilter(context.types());
    if (searchFilter != null) {
      BooleanQuery filtered=new BooleanQuery();
      filtered.add(query,Occur.MUST);
      filtered.add(searchFilter,Occur.FILTER);
      query=filtered;
    }
    try {
      globalsCollector.preCollection();
      context.searcher().search(query,globalsCollector);
    }
 catch (    Exception e) {
      throw new QueryPhaseExecutionException(context,"Failed to execute global aggregators",e);
    }
 finally {
      context.clearReleasables(SearchContext.Lifetime.COLLECTION);
    }
  }
  List<InternalAggregation> aggregations=new ArrayList<>(aggregators.length);
  for (  Aggregator aggregator : context.aggregations().aggregators()) {
    try {
      aggregator.postCollection();
      aggregations.add(aggregator.buildAggregation(0));
    }
 catch (    IOException e) {
      throw new AggregationExecutionException("Failed to build aggregation [" + aggregator.name() + "]",e);
    }
  }
  context.queryResult().aggregations(new InternalAggregations(aggregations));
  try {
    List<PipelineAggregator> pipelineAggregators=context.aggregations().factories().createPipelineAggregators();
    List<SiblingPipelineAggregator> siblingPipelineAggregators=new ArrayList<>(pipelineAggregators.size());
    for (    PipelineAggregator pipelineAggregator : pipelineAggregators) {
      if (pipelineAggregator instanceof SiblingPipelineAggregator) {
        siblingPipelineAggregators.add((SiblingPipelineAggregator)pipelineAggregator);
      }
 else {
        throw new AggregationExecutionException("Invalid pipeline aggregation named [" + pipelineAggregator.name() + "] of type ["+ pipelineAggregator.type().name()+ "]. Only sibling pipeline aggregations are allowed at the top level");
      }
    }
    context.queryResult().pipelineAggregators(siblingPipelineAggregators);
  }
 catch (  IOException e) {
    throw new AggregationExecutionException("Failed to build top level pipeline aggregators",e);
  }
  context.aggregations(null);
  context.queryCollectors().remove(AggregationPhase.class);
}
