{
  ValuesSourceParser<ValuesSource.Numeric> vsParser=ValuesSourceParser.numeric(aggregationName,InternalIPv4Range.TYPE,context).targetValueType(ValueType.IP).formattable(false).build();
  List<RangeAggregator.Range> ranges=null;
  boolean keyed=false;
  XContentParser.Token token;
  String currentFieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (vsParser.token(currentFieldName,token,parser)) {
      continue;
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if ("ranges".equals(currentFieldName)) {
        ranges=new ArrayList<>();
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          double from=Double.NEGATIVE_INFINITY;
          String fromAsStr=null;
          double to=Double.POSITIVE_INFINITY;
          String toAsStr=null;
          String key=null;
          String mask=null;
          String toOrFromOrMaskOrKey=null;
          while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
            if (token == XContentParser.Token.FIELD_NAME) {
              toOrFromOrMaskOrKey=parser.currentName();
            }
 else             if (token == XContentParser.Token.VALUE_NUMBER) {
              if ("from".equals(toOrFromOrMaskOrKey)) {
                from=parser.doubleValue();
              }
 else               if ("to".equals(toOrFromOrMaskOrKey)) {
                to=parser.doubleValue();
              }
            }
 else             if (token == XContentParser.Token.VALUE_STRING) {
              if ("from".equals(toOrFromOrMaskOrKey)) {
                fromAsStr=parser.text();
              }
 else               if ("to".equals(toOrFromOrMaskOrKey)) {
                toAsStr=parser.text();
              }
 else               if ("key".equals(toOrFromOrMaskOrKey)) {
                key=parser.text();
              }
 else               if ("mask".equals(toOrFromOrMaskOrKey)) {
                mask=parser.text();
              }
            }
          }
          RangeAggregator.Range range=new RangeAggregator.Range(key,from,fromAsStr,to,toAsStr);
          if (mask != null) {
            parseMaskRange(mask,range,aggregationName,context);
          }
          ranges.add(range);
        }
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].",parser.getTokenLocation());
      }
    }
 else     if (token == XContentParser.Token.VALUE_BOOLEAN) {
      if ("keyed".equals(currentFieldName)) {
        keyed=parser.booleanValue();
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].",parser.getTokenLocation());
      }
    }
 else {
      throw new SearchParseException(context,"Unexpected token " + token + " in ["+ aggregationName+ "].",parser.getTokenLocation());
    }
  }
  if (ranges == null) {
    throw new SearchParseException(context,"Missing [ranges] in ranges aggregator [" + aggregationName + "]",parser.getTokenLocation());
  }
  return new RangeAggregator.Factory(aggregationName,vsParser.input(),InternalIPv4Range.FACTORY,ranges,keyed);
}
