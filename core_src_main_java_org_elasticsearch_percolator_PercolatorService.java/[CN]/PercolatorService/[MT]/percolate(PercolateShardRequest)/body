{
  IndexService percolateIndexService=indicesService.indexServiceSafe(request.shardId().getIndex());
  IndexShard indexShard=percolateIndexService.shardSafe(request.shardId().id());
  indexShard.readAllowed();
  ShardPercolateService shardPercolateService=indexShard.shardPercolateService();
  shardPercolateService.prePercolate();
  long startTime=System.nanoTime();
  String[] filteringAliases=indexNameExpressionResolver.filteringAliases(clusterService.state(),indexShard.shardId().index().name(),request.indices());
  Query aliasFilter=percolateIndexService.aliasesService().aliasFilter(filteringAliases);
  SearchShardTarget searchShardTarget=new SearchShardTarget(clusterService.localNode().id(),request.shardId().getIndex(),request.shardId().id());
  final PercolateContext context=new PercolateContext(request,searchShardTarget,indexShard,percolateIndexService,pageCacheRecycler,bigArrays,scriptService,aliasFilter,parseFieldMatcher);
  try {
    ParsedDocument parsedDocument=parseRequest(percolateIndexService,request,context);
    if (context.percolateQueries().isEmpty()) {
      return new PercolateShardResponse(context,request.shardId());
    }
    if (request.docSource() != null && request.docSource().length() != 0) {
      parsedDocument=parseFetchedDoc(context,request.docSource(),percolateIndexService,request.documentType());
    }
 else     if (parsedDocument == null) {
      throw new IllegalArgumentException("Nothing to percolate");
    }
    if (context.percolateQuery() == null && (context.trackScores() || context.doSort || context.aggregations() != null) || context.aliasFilter() != null) {
      context.percolateQuery(new MatchAllDocsQuery());
    }
    if (context.doSort && !context.limit) {
      throw new IllegalArgumentException("Can't sort if size isn't specified");
    }
    if (context.highlight() != null && !context.limit) {
      throw new IllegalArgumentException("Can't highlight if size isn't specified");
    }
    if (context.size() < 0) {
      context.size(0);
    }
    PercolatorIndex percolatorIndex;
    boolean isNested=indexShard.mapperService().documentMapper(request.documentType()).hasNestedObjects();
    if (parsedDocument.docs().size() > 1) {
      assert isNested;
      percolatorIndex=multi;
    }
 else {
      percolatorIndex=single;
    }
    PercolatorType action;
    if (request.onlyCount()) {
      action=context.percolateQuery() != null ? queryCountPercolator : countPercolator;
    }
 else {
      if (context.doSort) {
        action=topMatchingPercolator;
      }
 else       if (context.percolateQuery() != null) {
        action=context.trackScores() ? scoringPercolator : queryPercolator;
      }
 else {
        action=matchPercolator;
      }
    }
    context.percolatorTypeId=action.id();
    percolatorIndex.prepare(context,parsedDocument);
    return action.doPercolate(request,context,isNested);
  }
  finally {
    context.close();
    shardPercolateService.postPercolate(System.nanoTime() - startTime);
  }
}
