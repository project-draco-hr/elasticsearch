{
  try {
    final Map<Tuple<Integer,Integer>,FsInfo.DeviceStats> deviceMap=new HashMap<>();
    if (previous != null && previous.getIoStats() != null && previous.getIoStats().devicesStats != null) {
      for (int i=0; i < previous.getIoStats().devicesStats.length; i++) {
        FsInfo.DeviceStats deviceStats=previous.getIoStats().devicesStats[i];
        deviceMap.put(Tuple.tuple(deviceStats.majorDeviceNumber,deviceStats.minorDeviceNumber),deviceStats);
      }
    }
    List<FsInfo.DeviceStats> devicesStats=new ArrayList<>();
    List<String> lines=readProcDiskStats();
    if (!lines.isEmpty()) {
      for (      String line : lines) {
        String fields[]=line.trim().split("\\s+");
        final int majorDeviceNumber=Integer.parseInt(fields[0]);
        final int minorDeviceNumber=Integer.parseInt(fields[1]);
        if (!devicesNumbers.contains(Tuple.tuple(majorDeviceNumber,minorDeviceNumber))) {
          continue;
        }
        final String deviceName=fields[2];
        final long readsCompleted=Long.parseLong(fields[3]);
        final long sectorsRead=Long.parseLong(fields[5]);
        final long writesCompleted=Long.parseLong(fields[7]);
        final long sectorsWritten=Long.parseLong(fields[9]);
        final FsInfo.DeviceStats deviceStats=new FsInfo.DeviceStats(majorDeviceNumber,minorDeviceNumber,deviceName,readsCompleted,sectorsRead,writesCompleted,sectorsWritten,deviceMap.get(Tuple.tuple(majorDeviceNumber,minorDeviceNumber)));
        devicesStats.add(deviceStats);
      }
    }
    return new FsInfo.IoStats(devicesStats.toArray(new FsInfo.DeviceStats[devicesStats.size()]));
  }
 catch (  Exception e) {
    logger.debug(new ParameterizedMessage("unexpected exception processing /proc/diskstats for devices {}",devicesNumbers),e);
    return null;
  }
}
