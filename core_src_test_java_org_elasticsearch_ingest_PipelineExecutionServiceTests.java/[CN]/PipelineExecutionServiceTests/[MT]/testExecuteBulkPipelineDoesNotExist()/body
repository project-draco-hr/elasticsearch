{
  CompoundProcessor processor=mock(CompoundProcessor.class);
  when(store.get("_id")).thenReturn(new Pipeline("_id","_description",processor));
  BulkRequest bulkRequest=new BulkRequest();
  IndexRequest indexRequest1=new IndexRequest("_index","_type","_id").source(Collections.emptyMap()).pipeline("_id");
  bulkRequest.add(indexRequest1);
  IndexRequest indexRequest2=new IndexRequest("_index","_type","_id").source(Collections.emptyMap()).pipeline("does_not_exist");
  bulkRequest.add(indexRequest2);
  @SuppressWarnings("unchecked") Consumer<Tuple<IndexRequest,Throwable>> failureHandler=mock(Consumer.class);
  @SuppressWarnings("unchecked") Consumer<Boolean> completionHandler=mock(Consumer.class);
  executionService.execute(bulkRequest.requests(),failureHandler,completionHandler);
  verify(failureHandler,times(1)).accept(argThat(new CustomTypeSafeMatcher<Tuple<IndexRequest,Throwable>>("failure handler was not called with the expected arguments"){
    @Override protected boolean matchesSafely(    Tuple<IndexRequest,Throwable> item){
      if (item.v1() != indexRequest2) {
        return false;
      }
      if (item.v2() instanceof IllegalArgumentException == false) {
        return false;
      }
      IllegalArgumentException iae=(IllegalArgumentException)item.v2();
      return "pipeline with id [does_not_exist] does not exist".equals(iae.getMessage());
    }
  }
));
  verify(completionHandler,times(1)).accept(anyBoolean());
}
