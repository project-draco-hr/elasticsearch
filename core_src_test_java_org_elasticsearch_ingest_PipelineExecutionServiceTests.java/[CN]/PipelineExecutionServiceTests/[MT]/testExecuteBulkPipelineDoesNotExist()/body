{
  CompoundProcessor processor=mock(CompoundProcessor.class);
  when(store.get("_id")).thenReturn(new Pipeline("_id","_description",processor));
  BulkRequest bulkRequest=new BulkRequest();
  IndexRequest indexRequest1=new IndexRequest("_index","_type","_id").source(Collections.emptyMap()).setPipeline("_id");
  bulkRequest.add(indexRequest1);
  IndexRequest indexRequest2=new IndexRequest("_index","_type","_id").source(Collections.emptyMap()).setPipeline("does_not_exist");
  bulkRequest.add(indexRequest2);
  @SuppressWarnings("unchecked") BiConsumer<IndexRequest,Throwable> failureHandler=mock(BiConsumer.class);
  @SuppressWarnings("unchecked") Consumer<Throwable> completionHandler=mock(Consumer.class);
  executionService.execute(bulkRequest.requests(),failureHandler,completionHandler);
  verify(failureHandler,times(1)).accept(argThat(new CustomTypeSafeMatcher<IndexRequest>("failure handler was not called with the expected arguments"){
    @Override protected boolean matchesSafely(    IndexRequest item){
      return item == indexRequest2;
    }
  }
),argThat(new CustomTypeSafeMatcher<IllegalArgumentException>("failure handler was not called with the expected arguments"){
    @Override protected boolean matchesSafely(    IllegalArgumentException iae){
      return "pipeline with id [does_not_exist] does not exist".equals(iae.getMessage());
    }
  }
));
  verify(completionHandler,times(1)).accept(null);
}
