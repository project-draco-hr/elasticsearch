{
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field1").field("type","string").field("similarity","my_similarity").endObject().endObject().endObject().endObject().string();
  Settings indexSettings=Settings.settingsBuilder().put("index.similarity.my_similarity.type","IB").put("index.similarity.my_similarity.distribution","spl").put("index.similarity.my_similarity.lambda","ttf").put("index.similarity.my_similarity.normalization","h2").put("index.similarity.my_similarity.normalization.h2.c",3f).build();
  SimilarityService similarityService=createIndex("foo",indexSettings).similarityService();
  DocumentMapper documentMapper=similarityService.mapperService().documentMapperParser().parse(mapping);
  assertThat(documentMapper.mappers().getMapper("field1").fieldType().similarity(),instanceOf(IBSimilarityProvider.class));
  IBSimilarity similarity=(IBSimilarity)documentMapper.mappers().getMapper("field1").fieldType().similarity().get();
  assertThat(similarity.getDistribution(),instanceOf(DistributionSPL.class));
  assertThat(similarity.getLambda(),instanceOf(LambdaTTF.class));
  assertThat(similarity.getNormalization(),instanceOf(NormalizationH2.class));
  assertThat(((NormalizationH2)similarity.getNormalization()).getC(),equalTo(3f));
}
