{
  if (!channel.isConnected()) {
    throw new ConnectException("Connection refused to " + channel.getRemoteAddress());
  }
  channel.getPipeline().getContext(NettyAsyncHttpProvider.class).setAttachment(future);
  channel.write(nettyRequest);
  try {
    future.setReaperFuture(config.reaper().schedule(new Callable<Object>(){
      public Object call(){
        if (!future.isDone() && !future.isCancelled()) {
          future.abort(new TimeoutException());
          channel.getPipeline().getContext(NettyAsyncHttpProvider.class).setAttachment(ClosedEvent.class);
          channel.close();
        }
        return null;
      }
    }
,config.getRequestTimeoutInMs(),TimeUnit.MILLISECONDS));
  }
 catch (  RejectedExecutionException ex) {
    future.abort(ex);
  }
}
