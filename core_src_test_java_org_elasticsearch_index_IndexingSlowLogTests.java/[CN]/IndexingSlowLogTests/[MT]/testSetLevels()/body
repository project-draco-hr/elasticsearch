{
  IndexMetaData metaData=newIndexMeta("index",Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED,Version.CURRENT).put(IndexingSlowLog.INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_TRACE_SETTING.getKey(),"100ms").put(IndexingSlowLog.INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_DEBUG_SETTING.getKey(),"200ms").put(IndexingSlowLog.INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_INFO_SETTING.getKey(),"300ms").put(IndexingSlowLog.INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_WARN_SETTING.getKey(),"400ms").build());
  IndexSettings settings=new IndexSettings(metaData,Settings.EMPTY);
  IndexingSlowLog log=new IndexingSlowLog(settings);
  assertEquals(TimeValue.timeValueMillis(100).nanos(),log.getIndexTraceThreshold());
  assertEquals(TimeValue.timeValueMillis(200).nanos(),log.getIndexDebugThreshold());
  assertEquals(TimeValue.timeValueMillis(300).nanos(),log.getIndexInfoThreshold());
  assertEquals(TimeValue.timeValueMillis(400).nanos(),log.getIndexWarnThreshold());
  settings.updateIndexMetaData(newIndexMeta("index",Settings.builder().put(IndexingSlowLog.INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_TRACE_SETTING.getKey(),"120ms").put(IndexingSlowLog.INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_DEBUG_SETTING.getKey(),"220ms").put(IndexingSlowLog.INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_INFO_SETTING.getKey(),"320ms").put(IndexingSlowLog.INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_WARN_SETTING.getKey(),"420ms").build()));
  assertEquals(TimeValue.timeValueMillis(120).nanos(),log.getIndexTraceThreshold());
  assertEquals(TimeValue.timeValueMillis(220).nanos(),log.getIndexDebugThreshold());
  assertEquals(TimeValue.timeValueMillis(320).nanos(),log.getIndexInfoThreshold());
  assertEquals(TimeValue.timeValueMillis(420).nanos(),log.getIndexWarnThreshold());
  metaData=newIndexMeta("index",Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED,Version.CURRENT).build());
  settings.updateIndexMetaData(metaData);
  assertEquals(TimeValue.timeValueMillis(-1).nanos(),log.getIndexTraceThreshold());
  assertEquals(TimeValue.timeValueMillis(-1).nanos(),log.getIndexDebugThreshold());
  assertEquals(TimeValue.timeValueMillis(-1).nanos(),log.getIndexInfoThreshold());
  assertEquals(TimeValue.timeValueMillis(-1).nanos(),log.getIndexWarnThreshold());
  settings=new IndexSettings(metaData,Settings.EMPTY);
  log=new IndexingSlowLog(settings);
  assertEquals(TimeValue.timeValueMillis(-1).nanos(),log.getIndexTraceThreshold());
  assertEquals(TimeValue.timeValueMillis(-1).nanos(),log.getIndexDebugThreshold());
  assertEquals(TimeValue.timeValueMillis(-1).nanos(),log.getIndexInfoThreshold());
  assertEquals(TimeValue.timeValueMillis(-1).nanos(),log.getIndexWarnThreshold());
  try {
    settings.updateIndexMetaData(newIndexMeta("index",Settings.builder().put(IndexingSlowLog.INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_TRACE_SETTING.getKey(),"NOT A TIME VALUE").build()));
    fail();
  }
 catch (  IllegalArgumentException ex) {
    assertEquals(ex.getMessage(),"failed to parse setting [index.indexing.slowlog.threshold.index.trace] with value [NOT A TIME VALUE] as a time value: unit is missing or unrecognized");
  }
  try {
    settings.updateIndexMetaData(newIndexMeta("index",Settings.builder().put(IndexingSlowLog.INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_DEBUG_SETTING.getKey(),"NOT A TIME VALUE").build()));
    fail();
  }
 catch (  IllegalArgumentException ex) {
    assertEquals(ex.getMessage(),"failed to parse setting [index.indexing.slowlog.threshold.index.debug] with value [NOT A TIME VALUE] as a time value: unit is missing or unrecognized");
  }
  try {
    settings.updateIndexMetaData(newIndexMeta("index",Settings.builder().put(IndexingSlowLog.INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_INFO_SETTING.getKey(),"NOT A TIME VALUE").build()));
    fail();
  }
 catch (  IllegalArgumentException ex) {
    assertEquals(ex.getMessage(),"failed to parse setting [index.indexing.slowlog.threshold.index.info] with value [NOT A TIME VALUE] as a time value: unit is missing or unrecognized");
  }
  try {
    settings.updateIndexMetaData(newIndexMeta("index",Settings.builder().put(IndexingSlowLog.INDEX_INDEXING_SLOWLOG_THRESHOLD_INDEX_WARN_SETTING.getKey(),"NOT A TIME VALUE").build()));
    fail();
  }
 catch (  IllegalArgumentException ex) {
    assertEquals(ex.getMessage(),"failed to parse setting [index.indexing.slowlog.threshold.index.warn] with value [NOT A TIME VALUE] as a time value: unit is missing or unrecognized");
  }
}
