{
  XContentParser parser=XContentFactory.xContent(data).createParser(data);
  try {
    XContentParser.Token token;
    String currentFieldName=null;
    List<String> ids=null;
    while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
      if (token == XContentParser.Token.FIELD_NAME) {
        currentFieldName=parser.currentName();
      }
 else       if (token == XContentParser.Token.START_ARRAY) {
        if ("docs".equals(currentFieldName)) {
          while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
            if (token != XContentParser.Token.START_OBJECT) {
              throw new ElasticsearchIllegalArgumentException("docs array element should include an object");
            }
            TermVectorRequest termVectorRequest=new TermVectorRequest(template);
            TermVectorRequest.parseRequest(termVectorRequest,parser);
            add(termVectorRequest);
          }
        }
 else         if ("ids".equals(currentFieldName)) {
          ids=new ArrayList<String>();
          while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
            if (!token.isValue()) {
              throw new ElasticsearchIllegalArgumentException("ids array element should only contain ids");
            }
            ids.add(parser.text());
          }
        }
 else {
          throw new ElasticsearchParseException("No parameter named " + currentFieldName + "and type ARRAY");
        }
      }
 else       if (token == XContentParser.Token.START_OBJECT && currentFieldName != null) {
        if ("parameters".equals(currentFieldName)) {
          TermVectorRequest.parseRequest(template,parser);
        }
 else {
          throw new ElasticsearchParseException("No parameter named " + currentFieldName + "and type OBJECT");
        }
      }
 else       if (currentFieldName != null) {
        throw new ElasticsearchParseException("_mtermvectors: Parameter " + currentFieldName + "not supported");
      }
    }
    if (ids != null) {
      for (      String id : ids) {
        TermVectorRequest curRequest=new TermVectorRequest(template);
        curRequest.id(id);
        requests.add(curRequest);
      }
    }
  }
  finally {
    parser.close();
  }
}
