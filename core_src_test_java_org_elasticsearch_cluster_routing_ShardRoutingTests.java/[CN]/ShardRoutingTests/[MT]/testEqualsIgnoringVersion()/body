{
  ShardRouting routing=randomShardRouting("test",0);
  ShardRouting otherRouting=new ShardRouting(routing);
  assertTrue("expected equality\nthis  " + routing + ",\nother "+ otherRouting,routing.equalsIgnoringMetaData(otherRouting));
  otherRouting=new ShardRouting(routing,1);
  assertTrue("expected equality\nthis  " + routing + ",\nother "+ otherRouting,routing.equalsIgnoringMetaData(otherRouting));
  otherRouting=new ShardRouting(routing);
  Integer[] changeIds=new Integer[]{0,1,2,3,4,5,6};
  for (  int changeId : randomSubsetOf(randomIntBetween(1,changeIds.length),changeIds)) {
switch (changeId) {
case 0:
      otherRouting=TestShardRouting.newShardRouting(otherRouting.index() + "a",otherRouting.id(),otherRouting.currentNodeId(),otherRouting.relocatingNodeId(),otherRouting.restoreSource(),otherRouting.primary(),otherRouting.state(),otherRouting.version(),otherRouting.unassignedInfo());
    break;
case 1:
  otherRouting=TestShardRouting.newShardRouting(otherRouting.index(),otherRouting.id() + 1,otherRouting.currentNodeId(),otherRouting.relocatingNodeId(),otherRouting.restoreSource(),otherRouting.primary(),otherRouting.state(),otherRouting.version(),otherRouting.unassignedInfo());
break;
case 2:
otherRouting=TestShardRouting.newShardRouting(otherRouting.index(),otherRouting.id(),otherRouting.currentNodeId() == null ? "1" : otherRouting.currentNodeId() + "_1",otherRouting.relocatingNodeId(),otherRouting.restoreSource(),otherRouting.primary(),otherRouting.state(),otherRouting.version(),otherRouting.unassignedInfo());
break;
case 3:
otherRouting=TestShardRouting.newShardRouting(otherRouting.index(),otherRouting.id(),otherRouting.currentNodeId(),otherRouting.relocatingNodeId() == null ? "1" : otherRouting.relocatingNodeId() + "_1",otherRouting.restoreSource(),otherRouting.primary(),otherRouting.state(),otherRouting.version(),otherRouting.unassignedInfo());
break;
case 4:
otherRouting=TestShardRouting.newShardRouting(otherRouting.index(),otherRouting.id(),otherRouting.currentNodeId(),otherRouting.relocatingNodeId(),otherRouting.restoreSource() == null ? new RestoreSource(new SnapshotId("test","s1"),Version.CURRENT,"test") : new RestoreSource(otherRouting.restoreSource().snapshotId(),Version.CURRENT,otherRouting.index() + "_1"),otherRouting.primary(),otherRouting.state(),otherRouting.version(),otherRouting.unassignedInfo());
break;
case 5:
otherRouting=TestShardRouting.newShardRouting(otherRouting.index(),otherRouting.id(),otherRouting.currentNodeId(),otherRouting.relocatingNodeId(),otherRouting.restoreSource(),otherRouting.primary() == false,otherRouting.state(),otherRouting.version(),otherRouting.unassignedInfo());
break;
case 6:
ShardRoutingState newState;
do {
newState=randomFrom(ShardRoutingState.values());
}
 while (newState == otherRouting.state());
UnassignedInfo unassignedInfo=otherRouting.unassignedInfo();
if (unassignedInfo == null && (newState == ShardRoutingState.UNASSIGNED || newState == ShardRoutingState.INITIALIZING)) {
unassignedInfo=new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,"test");
}
otherRouting=TestShardRouting.newShardRouting(otherRouting.index(),otherRouting.id(),otherRouting.currentNodeId(),otherRouting.relocatingNodeId(),otherRouting.restoreSource(),otherRouting.primary(),newState,otherRouting.version(),unassignedInfo);
break;
}
if (randomBoolean()) {
otherRouting=new ShardRouting(otherRouting,otherRouting.version() + 1);
}
if (randomBoolean()) {
otherRouting=TestShardRouting.newShardRouting(otherRouting.index(),otherRouting.id(),otherRouting.currentNodeId(),otherRouting.relocatingNodeId(),otherRouting.restoreSource(),otherRouting.primary(),otherRouting.state(),otherRouting.version(),otherRouting.unassignedInfo() == null ? new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,"test") : new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,otherRouting.unassignedInfo().getMessage() + "_1"));
}
logger.debug("comparing\nthis  {} to\nother {}",routing,otherRouting);
assertFalse("expected non-equality\nthis  " + routing + ",\nother "+ otherRouting,routing.equalsIgnoringMetaData(otherRouting));
}
}
