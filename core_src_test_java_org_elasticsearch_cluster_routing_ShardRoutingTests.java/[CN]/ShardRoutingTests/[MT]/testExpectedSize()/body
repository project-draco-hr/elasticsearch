{
  final int iters=randomIntBetween(10,100);
  for (int i=0; i < iters; i++) {
    ShardRouting routing=randomShardRouting("test",0);
    long byteSize=randomIntBetween(0,Integer.MAX_VALUE);
    if (routing.unassigned()) {
      routing=ShardRoutingHelper.initialize(routing,"foo",byteSize);
    }
 else     if (routing.started()) {
      routing=ShardRoutingHelper.relocate(routing,"foo",byteSize);
    }
 else {
      byteSize=-1;
    }
    if (randomBoolean()) {
      BytesStreamOutput out=new BytesStreamOutput();
      routing.writeTo(out);
      routing=new ShardRouting(StreamInput.wrap(out.bytes()));
    }
    if (routing.initializing() || routing.relocating()) {
      assertEquals(routing.toString(),byteSize,routing.getExpectedShardSize());
      if (byteSize >= 0) {
        assertTrue(routing.toString(),routing.toString().contains("expected_shard_size[" + byteSize + "]"));
      }
      if (routing.initializing()) {
        routing=routing.moveToStarted();
        assertEquals(-1,routing.getExpectedShardSize());
        assertFalse(routing.toString(),routing.toString().contains("expected_shard_size[" + byteSize + "]"));
      }
    }
 else {
      assertFalse(routing.toString(),routing.toString().contains("expected_shard_size [" + byteSize + "]"));
      assertEquals(byteSize,routing.getExpectedShardSize());
    }
  }
}
