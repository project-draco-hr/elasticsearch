{
  final Settings settings=Settings.builder().put("http.pipelining",false).put("http.port","0").build();
  try (final HttpServerTransport httpServerTransport=new CustomNettyHttpServerTransport(settings)){
    httpServerTransport.start();
    final InetSocketTransportAddress transportAddress=(InetSocketTransportAddress)randomFrom(httpServerTransport.boundAddress().boundAddresses());
    final int numberOfRequests=randomIntBetween(4,16);
    final int numberOfSlowRequests=scaledRandomIntBetween(1,numberOfRequests);
    final List<String> requests=new ArrayList<>(numberOfRequests);
    for (int i=0; i < numberOfRequests - numberOfSlowRequests; i++) {
      requests.add("/" + i);
    }
    for (int i=0; i < numberOfSlowRequests; i++) {
      requests.add("/slow?sleep=" + sleep(i));
    }
    try (Netty4HttpClient nettyHttpClient=new Netty4HttpClient()){
      Collection<FullHttpResponse> responses=nettyHttpClient.get(transportAddress.address(),requests.toArray(new String[]{}));
      List<String> responseBodies=new ArrayList<>(Netty4HttpClient.returnHttpResponseBodies(responses));
      assertThat(responseBodies,hasSize(numberOfRequests));
      for (int i=0; i < numberOfSlowRequests; i++) {
        assertThat(responseBodies.get(numberOfRequests - numberOfSlowRequests + i),equalTo("/slow?sleep=" + sleep(i)));
      }
    }
   }
 }
