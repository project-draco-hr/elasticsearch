{
  final Settings settings=Settings.builder().put("http.pipelining",false).put("http.port","0").build();
  try (final HttpServerTransport httpServerTransport=new CustomNettyHttpServerTransport(settings)){
    httpServerTransport.start();
    final InetSocketTransportAddress transportAddress=(InetSocketTransportAddress)randomFrom(httpServerTransport.boundAddress().boundAddresses());
    final int numberOfRequests=randomIntBetween(4,16);
    final Set<Integer> slowIds=new HashSet<>();
    final List<String> requests=new ArrayList<>(numberOfRequests);
    int numberOfSlowRequests=0;
    for (int i=0; i < numberOfRequests; i++) {
      if (rarely()) {
        requests.add("/slow/" + i);
        slowIds.add(i);
        numberOfSlowRequests++;
      }
 else {
        requests.add("/" + i);
      }
    }
    try (Netty4HttpClient nettyHttpClient=new Netty4HttpClient()){
      Collection<FullHttpResponse> responses=nettyHttpClient.get(transportAddress.address(),requests.toArray(new String[]{}));
      List<String> responseBodies=new ArrayList<>(Netty4HttpClient.returnHttpResponseBodies(responses));
      assertThat(responseBodies,hasSize(numberOfRequests));
      for (int i=0; i < numberOfRequests - numberOfSlowRequests; i++) {
        assertThat(responseBodies.get(i),matches("/\\d+"));
      }
      final Set<Integer> ids=new HashSet<>();
      for (int i=0; i < numberOfSlowRequests; i++) {
        final String response=responseBodies.get(numberOfRequests - numberOfSlowRequests + i);
        assertThat(response,matches("/slow/\\d+"));
        assertTrue(ids.add(Integer.parseInt(response.split("/")[2])));
      }
      assertThat(slowIds,equalTo(ids));
    }
   }
 }
