{
  final Settings settings=Settings.builder().put("http.pipelining",true).put("http.port","0").build();
  try (final HttpServerTransport httpServerTransport=new CustomNettyHttpServerTransport(settings)){
    httpServerTransport.start();
    final InetSocketTransportAddress transportAddress=(InetSocketTransportAddress)randomFrom(httpServerTransport.boundAddress().boundAddresses());
    final int numberOfRequests=randomIntBetween(4,16);
    final List<String> requests=new ArrayList<>(numberOfRequests);
    for (int i=0; i < numberOfRequests; i++) {
      if (rarely()) {
        requests.add("/slow/" + i);
      }
 else {
        requests.add("/" + i);
      }
    }
    try (Netty4HttpClient nettyHttpClient=new Netty4HttpClient()){
      Collection<FullHttpResponse> responses=nettyHttpClient.get(transportAddress.address(),requests.toArray(new String[]{}));
      Collection<String> responseBodies=Netty4HttpClient.returnHttpResponseBodies(responses);
      assertThat(responseBodies,contains(requests.toArray()));
    }
   }
 }
