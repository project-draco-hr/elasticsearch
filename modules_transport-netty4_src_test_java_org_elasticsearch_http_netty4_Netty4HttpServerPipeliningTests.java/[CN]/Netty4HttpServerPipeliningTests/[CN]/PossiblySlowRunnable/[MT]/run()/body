{
  final String uri;
  if (pipelinedRequest != null && pipelinedRequest.last() instanceof FullHttpRequest) {
    uri=((FullHttpRequest)pipelinedRequest.last()).uri();
  }
 else {
    uri=fullHttpRequest.uri();
  }
  final ByteBuf buffer=Unpooled.copiedBuffer(uri,StandardCharsets.UTF_8);
  final DefaultFullHttpResponse httpResponse=new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK,buffer);
  httpResponse.headers().add(HttpHeaderNames.CONTENT_LENGTH,buffer.readableBytes());
  final QueryStringDecoder decoder=new QueryStringDecoder(uri);
  final int timeout=uri.startsWith("/slow") && decoder.parameters().containsKey("sleep") ? Integer.valueOf(decoder.parameters().get("sleep").get(0)) : 0;
  if (timeout > 0) {
    try {
      Thread.sleep(timeout);
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
  if (pipelinedRequest != null) {
    ctx.writeAndFlush(pipelinedRequest.createHttpResponse(httpResponse,ctx.channel().newPromise()));
  }
 else {
    ctx.writeAndFlush(httpResponse);
  }
}
