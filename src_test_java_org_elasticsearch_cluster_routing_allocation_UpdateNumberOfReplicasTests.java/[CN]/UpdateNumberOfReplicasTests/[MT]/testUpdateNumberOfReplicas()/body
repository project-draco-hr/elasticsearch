{
  AllocationService strategy=createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries",10).build());
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").numberOfShards(1).numberOfReplicas(1)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build();
  assertThat(routingTable.index("test").shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).size(),equalTo(2));
  assertThat(routingTable.index("test").shard(0).shards().size(),equalTo(2));
  assertThat(routingTable.index("test").shard(0).shards().get(0).state(),equalTo(UNASSIGNED));
  assertThat(routingTable.index("test").shard(0).shards().get(1).state(),equalTo(UNASSIGNED));
  assertThat(routingTable.index("test").shard(0).shards().get(0).currentNodeId(),nullValue());
  assertThat(routingTable.index("test").shard(0).shards().get(1).currentNodeId(),nullValue());
  logger.info("Adding two nodes and performing rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1")).put(newNode("node2"))).build();
  RoutingTable prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  logger.info("Start all the primary shards");
  RoutingNodes routingNodes=clusterState.routingNodes();
  prevRoutingTable=routingTable;
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  logger.info("Start all the replica shards");
  routingNodes=clusterState.routingNodes();
  prevRoutingTable=routingTable;
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  final String nodeHoldingPrimary=routingTable.index("test").shard(0).primaryShard().currentNodeId();
  final String nodeHoldingReplica=routingTable.index("test").shard(0).replicaShards().get(0).currentNodeId();
  assertThat(nodeHoldingPrimary,not(equalTo(nodeHoldingReplica)));
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).size(),equalTo(2));
  assertThat(routingTable.index("test").shard(0).shards().size(),equalTo(2));
  assertThat(routingTable.index("test").shard(0).primaryShard().state(),equalTo(STARTED));
  assertThat(routingTable.index("test").shard(0).primaryShard().currentNodeId(),equalTo(nodeHoldingPrimary));
  assertThat(routingTable.index("test").shard(0).replicaShards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).replicaShards().get(0).state(),equalTo(STARTED));
  assertThat(routingTable.index("test").shard(0).replicaShards().get(0).currentNodeId(),equalTo(nodeHoldingReplica));
  logger.info("add another replica");
  routingNodes=clusterState.routingNodes();
  prevRoutingTable=routingTable;
  routingTable=RoutingTable.builder(routingTable).updateNumberOfReplicas(2).build();
  metaData=MetaData.builder(clusterState.metaData()).updateNumberOfReplicas(2).build();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).metaData(metaData).build();
  assertThat(clusterState.metaData().index("test").numberOfReplicas(),equalTo(2));
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).size(),equalTo(3));
  assertThat(routingTable.index("test").shard(0).primaryShard().state(),equalTo(STARTED));
  assertThat(routingTable.index("test").shard(0).primaryShard().currentNodeId(),equalTo(nodeHoldingPrimary));
  assertThat(routingTable.index("test").shard(0).replicaShards().size(),equalTo(2));
  assertThat(routingTable.index("test").shard(0).replicaShards().get(0).state(),equalTo(STARTED));
  assertThat(routingTable.index("test").shard(0).replicaShards().get(0).currentNodeId(),equalTo(nodeHoldingReplica));
  assertThat(routingTable.index("test").shard(0).replicaShards().get(1).state(),equalTo(UNASSIGNED));
  logger.info("Add another node and start the added replica");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).put(newNode("node3"))).build();
  prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).size(),equalTo(3));
  assertThat(routingTable.index("test").shard(0).primaryShard().state(),equalTo(STARTED));
  assertThat(routingTable.index("test").shard(0).primaryShard().currentNodeId(),equalTo(nodeHoldingPrimary));
  assertThat(routingTable.index("test").shard(0).replicaShards().size(),equalTo(2));
  assertThat(routingTable.index("test").shard(0).replicaShardsWithState(STARTED).size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).replicaShardsWithState(STARTED).get(0).currentNodeId(),equalTo(nodeHoldingReplica));
  assertThat(routingTable.index("test").shard(0).replicaShardsWithState(INITIALIZING).size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).replicaShardsWithState(INITIALIZING).get(0).currentNodeId(),equalTo("node3"));
  routingNodes=clusterState.routingNodes();
  prevRoutingTable=routingTable;
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).size(),equalTo(3));
  assertThat(routingTable.index("test").shard(0).primaryShard().state(),equalTo(STARTED));
  assertThat(routingTable.index("test").shard(0).primaryShard().currentNodeId(),equalTo(nodeHoldingPrimary));
  assertThat(routingTable.index("test").shard(0).replicaShards().size(),equalTo(2));
  assertThat(routingTable.index("test").shard(0).replicaShardsWithState(STARTED).size(),equalTo(2));
  assertThat(routingTable.index("test").shard(0).replicaShardsWithState(STARTED).get(0).currentNodeId(),anyOf(equalTo(nodeHoldingReplica),equalTo("node3")));
  assertThat(routingTable.index("test").shard(0).replicaShardsWithState(STARTED).get(1).currentNodeId(),anyOf(equalTo(nodeHoldingReplica),equalTo("node3")));
  logger.info("now remove a replica");
  routingNodes=clusterState.routingNodes();
  prevRoutingTable=routingTable;
  routingTable=RoutingTable.builder(routingTable).updateNumberOfReplicas(1).build();
  metaData=MetaData.builder(clusterState.metaData()).updateNumberOfReplicas(1).build();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).metaData(metaData).build();
  assertThat(clusterState.metaData().index("test").numberOfReplicas(),equalTo(1));
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).size(),equalTo(2));
  assertThat(routingTable.index("test").shard(0).primaryShard().state(),equalTo(STARTED));
  assertThat(routingTable.index("test").shard(0).primaryShard().currentNodeId(),equalTo(nodeHoldingPrimary));
  assertThat(routingTable.index("test").shard(0).replicaShards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).replicaShards().get(0).state(),equalTo(STARTED));
  assertThat(routingTable.index("test").shard(0).replicaShards().get(0).currentNodeId(),anyOf(equalTo(nodeHoldingReplica),equalTo("node3")));
  logger.info("do a reroute, should remain the same");
  prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable != routingTable,equalTo(false));
}
