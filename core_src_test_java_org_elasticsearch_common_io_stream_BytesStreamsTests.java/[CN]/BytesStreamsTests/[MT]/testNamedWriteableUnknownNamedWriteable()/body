{
  NamedWriteableRegistry namedWriteableRegistry=new NamedWriteableRegistry();
  namedWriteableRegistry.registerPrototype(BaseNamedWriteable.class,new TestNamedWriteable(null,null));
  BytesStreamOutput out=new BytesStreamOutput();
  out.writeNamedWriteable(new NamedWriteable(){
    @Override public String getWriteableName(){
      return "unknown";
    }
    @Override public void writeTo(    StreamOutput out) throws IOException {
    }
    @Override public Object readFrom(    StreamInput in) throws IOException {
      return null;
    }
  }
);
  StreamInput in=new NamedWriteableAwareStreamInput(StreamInput.wrap(out.bytes().toBytes()),namedWriteableRegistry);
  try {
    in.readNamedWriteable(BaseNamedWriteable.class);
    fail("read should have failed");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage(),equalTo("unknown named writeable with name [unknown] within category [" + BaseNamedWriteable.class.getName() + "]"));
  }
}
