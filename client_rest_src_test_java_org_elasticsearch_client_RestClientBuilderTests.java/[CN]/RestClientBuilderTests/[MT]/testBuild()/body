{
  try {
    RestClient.builder((HttpHost[])null);
    fail("should have failed");
  }
 catch (  IllegalArgumentException e) {
    assertEquals("no hosts provided",e.getMessage());
  }
  try {
    RestClient.builder();
    fail("should have failed");
  }
 catch (  IllegalArgumentException e) {
    assertEquals("no hosts provided",e.getMessage());
  }
  try {
    RestClient.builder(new HttpHost[]{new HttpHost("localhost",9200),null}).build();
    fail("should have failed");
  }
 catch (  NullPointerException e) {
    assertEquals("host cannot be null",e.getMessage());
  }
  try {
    RestClient.builder(new HttpHost("localhost",9200)).setMaxRetryTimeoutMillis(RandomInts.randomIntBetween(getRandom(),Integer.MIN_VALUE,0));
    fail("should have failed");
  }
 catch (  IllegalArgumentException e) {
    assertEquals("maxRetryTimeoutMillis must be greater than 0",e.getMessage());
  }
  try {
    RestClient.builder(new HttpHost("localhost",9200)).setDefaultHeaders(null);
    fail("should have failed");
  }
 catch (  NullPointerException e) {
    assertEquals("defaultHeaders must not be null",e.getMessage());
  }
  try {
    RestClient.builder(new HttpHost("localhost",9200)).setDefaultHeaders(new Header[]{null});
    fail("should have failed");
  }
 catch (  NullPointerException e) {
    assertEquals("default header must not be null",e.getMessage());
  }
  try {
    RestClient.builder(new HttpHost("localhost",9200)).setFailureListener(null);
    fail("should have failed");
  }
 catch (  NullPointerException e) {
    assertEquals("failureListener must not be null",e.getMessage());
  }
  try {
    RestClient.builder(new HttpHost("localhost",9200)).setHttpClientConfigCallback(null);
    fail("should have failed");
  }
 catch (  NullPointerException e) {
    assertEquals("httpClientConfigCallback must not be null",e.getMessage());
  }
  try {
    RestClient.builder(new HttpHost("localhost",9200)).setRequestConfigCallback(null);
    fail("should have failed");
  }
 catch (  NullPointerException e) {
    assertEquals("requestConfigCallback must not be null",e.getMessage());
  }
  int numNodes=RandomInts.randomIntBetween(getRandom(),1,5);
  HttpHost[] hosts=new HttpHost[numNodes];
  for (int i=0; i < numNodes; i++) {
    hosts[i]=new HttpHost("localhost",9200 + i);
  }
  RestClient.Builder builder=RestClient.builder(hosts);
  if (getRandom().nextBoolean()) {
    builder.setHttpClientConfigCallback(new RestClient.HttpClientConfigCallback(){
      @Override public void customizeHttpClient(      HttpClientBuilder httpClientBuilder){
      }
    }
);
  }
  if (getRandom().nextBoolean()) {
    builder.setRequestConfigCallback(new RestClient.RequestConfigCallback(){
      @Override public void customizeRequestConfig(      RequestConfig.Builder requestConfigBuilder){
      }
    }
);
  }
  if (getRandom().nextBoolean()) {
    int numHeaders=RandomInts.randomIntBetween(getRandom(),1,5);
    Header[] headers=new Header[numHeaders];
    for (int i=0; i < numHeaders; i++) {
      headers[i]=new BasicHeader("header" + i,"value");
    }
    builder.setDefaultHeaders(headers);
  }
  if (getRandom().nextBoolean()) {
    builder.setMaxRetryTimeoutMillis(RandomInts.randomIntBetween(getRandom(),1,Integer.MAX_VALUE));
  }
  try (RestClient restClient=builder.build()){
    assertNotNull(restClient);
  }
 }
