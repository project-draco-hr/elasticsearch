{
  super(settings);
  int cacheMaxSize=componentSettings.getAsInt("cache.max_size",500);
  TimeValue cacheExpire=componentSettings.getAsTime("cache.expire",null);
  logger.debug("using script cache with max_size [{}], expire [{}]",cacheMaxSize,cacheExpire);
  this.defaultLang=componentSettings.get("default_lang","mvel");
  this.disableDynamic=componentSettings.getAsBoolean("disable_dynamic",true);
  CacheBuilder cacheBuilder=CacheBuilder.newBuilder();
  if (cacheMaxSize >= 0) {
    cacheBuilder.maximumSize(cacheMaxSize);
  }
  if (cacheExpire != null) {
    cacheBuilder.expireAfterAccess(cacheExpire.nanos(),TimeUnit.NANOSECONDS);
  }
  this.cache=cacheBuilder.build();
  ImmutableMap.Builder<String,ScriptEngineService> builder=ImmutableMap.builder();
  for (  ScriptEngineService scriptEngine : scriptEngines) {
    for (    String type : scriptEngine.types()) {
      builder.put(type,scriptEngine);
    }
  }
  this.scriptEngines=builder.build();
  staticCache.put("doc.score",new CompiledScript("native",new DocScoreNativeScriptFactory()));
  scriptsDirectory=new File(env.configFile(),"scripts");
  FileWatcher fileWatcher=new FileWatcher(scriptsDirectory);
  fileWatcher.addListener(new ScriptChangesListener());
  if (componentSettings.getAsBoolean("auto_reload_enabled",true)) {
    resourceWatcherService.add(fileWatcher);
  }
 else {
    fileWatcher.init();
  }
}
