{
  if (indexExpressions == null || indexExpressions.length == 0) {
    indexExpressions=new String[]{MetaData.ALL};
  }
  MetaData metaData=context.getState().metaData();
  IndicesOptions options=context.getOptions();
  boolean failClosed=options.forbidClosedIndices() && options.ignoreUnavailable() == false;
  boolean failNoIndices=options.ignoreUnavailable() == false;
  if (indexExpressions.length == 1) {
    failNoIndices=options.allowNoIndices() == false;
  }
  List<String> expressions=Arrays.asList(indexExpressions);
  for (  ExpressionResolver expressionResolver : expressionResolvers) {
    expressions=expressionResolver.resolve(context,expressions);
  }
  if (expressions.isEmpty()) {
    if (!options.allowNoIndices()) {
      IndexNotFoundException infe=new IndexNotFoundException((String)null);
      infe.setResources("index_expression",indexExpressions);
      throw infe;
    }
 else {
      return Strings.EMPTY_ARRAY;
    }
  }
  final Set<String> concreteIndices=new HashSet<>(expressions.size());
  for (  String expression : expressions) {
    AliasOrIndex aliasOrIndex=metaData.getAliasAndIndexLookup().get(expression);
    if (aliasOrIndex == null) {
      if (failNoIndices) {
        IndexNotFoundException infe=new IndexNotFoundException(expression);
        infe.setResources("index_expression",expression);
        throw infe;
      }
 else {
        continue;
      }
    }
    Collection<IndexMetaData> resolvedIndices=aliasOrIndex.getIndices();
    if (resolvedIndices.size() > 1 && !options.allowAliasesToMultipleIndices()) {
      String[] indexNames=new String[resolvedIndices.size()];
      int i=0;
      for (      IndexMetaData indexMetaData : resolvedIndices) {
        indexNames[i++]=indexMetaData.getIndex();
      }
      throw new IllegalArgumentException("Alias [" + expression + "] has more than one indices associated with it ["+ Arrays.toString(indexNames)+ "], can't execute a single index op");
    }
    for (    IndexMetaData index : resolvedIndices) {
      if (index.getState() == IndexMetaData.State.CLOSE) {
        if (failClosed) {
          throw new IndexClosedException(new Index(index.getIndex()));
        }
 else {
          if (options.forbidClosedIndices() == false) {
            concreteIndices.add(index.getIndex());
          }
        }
      }
 else       if (index.getState() == IndexMetaData.State.OPEN) {
        concreteIndices.add(index.getIndex());
      }
 else {
        throw new IllegalStateException("index state [" + index.getState() + "] not supported");
      }
    }
  }
  if (options.allowNoIndices() == false && concreteIndices.isEmpty()) {
    IndexNotFoundException infe=new IndexNotFoundException((String)null);
    infe.setResources("index_expression",indexExpressions);
    throw infe;
  }
  return concreteIndices.toArray(new String[concreteIndices.size()]);
}
