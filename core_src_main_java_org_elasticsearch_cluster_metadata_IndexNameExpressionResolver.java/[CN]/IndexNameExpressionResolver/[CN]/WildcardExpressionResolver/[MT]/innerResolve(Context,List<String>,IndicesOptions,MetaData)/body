{
  Set<String> result=null;
  for (int i=0; i < expressions.size(); i++) {
    String expression=expressions.get(i);
    if (aliasOrIndexExists(metaData,expression)) {
      if (result != null) {
        result.add(expression);
      }
      continue;
    }
    if (Strings.isEmpty(expression)) {
      throw infe(expression);
    }
    boolean add=true;
    if (expression.charAt(0) == '+') {
      if (i == 0) {
        result=new HashSet<>();
      }
      expression=expression.substring(1);
    }
 else     if (expression.charAt(0) == '-') {
      if (i == 0) {
        List<String> concreteIndices=resolveEmptyOrTrivialWildcard(options,metaData,false);
        result=new HashSet<>(concreteIndices);
      }
      add=false;
      expression=expression.substring(1);
    }
    if (!Regex.isSimpleMatchPattern(expression)) {
      if (!unavailableIgnoredOrExists(options,metaData,expression)) {
        throw infe(expression);
      }
      if (result != null) {
        if (add) {
          result.add(expression);
        }
 else {
          result.remove(expression);
        }
      }
      continue;
    }
    if (result == null) {
      result=new HashSet<>(expressions.subList(0,i));
    }
    final IndexMetaData.State excludeState=excludeState(options);
    final Map<String,AliasOrIndex> matches=matches(metaData,expression);
    Set<String> expand=expand(context,excludeState,matches);
    if (add) {
      result.addAll(expand);
    }
 else {
      result.removeAll(expand);
    }
    if (!noIndicesAllowedOrMatches(options,matches)) {
      throw infe(expression);
    }
  }
  return result;
}
