{
  Settings.Builder updatedSettingsBuilder=Settings.settingsBuilder();
  updatedSettingsBuilder.put(request.settings).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);
  request.settings(updatedSettingsBuilder.build());
  if (request.name == null) {
    listener.onFailure(new IllegalArgumentException("index_template must provide a name"));
    return;
  }
  if (request.template == null) {
    listener.onFailure(new IllegalArgumentException("index_template must provide a template"));
    return;
  }
  try {
    validate(request);
  }
 catch (  Throwable e) {
    listener.onFailure(e);
    return;
  }
  IndexTemplateMetaData.Builder templateBuilder;
  try {
    templateBuilder=IndexTemplateMetaData.builder(request.name);
    templateBuilder.order(request.order);
    templateBuilder.template(request.template);
    templateBuilder.settings(request.settings);
    for (    Map.Entry<String,String> entry : request.mappings.entrySet()) {
      templateBuilder.putMapping(entry.getKey(),entry.getValue());
    }
    for (    Alias alias : request.aliases) {
      AliasMetaData aliasMetaData=AliasMetaData.builder(alias.name()).filter(alias.filter()).indexRouting(alias.indexRouting()).searchRouting(alias.searchRouting()).build();
      templateBuilder.putAlias(aliasMetaData);
    }
    for (    Map.Entry<String,IndexMetaData.Custom> entry : request.customs.entrySet()) {
      templateBuilder.putCustom(entry.getKey(),entry.getValue());
    }
  }
 catch (  Throwable e) {
    listener.onFailure(e);
    return;
  }
  final IndexTemplateMetaData template=templateBuilder.build();
  clusterService.submitStateUpdateTask("create-index-template [" + request.name + "], cause ["+ request.cause+ "]",Priority.URGENT,new TimeoutClusterStateUpdateTask(){
    @Override public TimeValue timeout(){
      return request.masterTimeout;
    }
    @Override public void onFailure(    String source,    Throwable t){
      listener.onFailure(t);
    }
    @Override public ClusterState execute(    ClusterState currentState){
      if (request.create && currentState.metaData().templates().containsKey(request.name)) {
        throw new IndexTemplateAlreadyExistsException(request.name);
      }
      MetaData.Builder builder=MetaData.builder(currentState.metaData()).put(template);
      return ClusterState.builder(currentState).metaData(builder).build();
    }
    @Override public void clusterStateProcessed(    String source,    ClusterState oldState,    ClusterState newState){
      listener.onResponse(new PutResponse(true,template));
    }
  }
);
}
