{
  String suggestFSTFile=IndexFileNames.segmentFileName(state.segmentInfo.name,state.segmentSuffix,EXTENSION);
  IndexInput input=state.directory.openInput(suggestFSTFile,state.context);
  version=CodecUtil.checkHeader(input,CODEC_NAME,SUGGEST_CODEC_VERSION,SUGGEST_VERSION_CURRENT);
  FieldsProducer delegateProducer=null;
  boolean success=false;
  try {
    PostingsFormat delegatePostingsFormat=PostingsFormat.forName(input.readString());
    String providerName=input.readString();
    CompletionLookupProvider completionLookupProvider=PROVIDERS.get(providerName);
    if (completionLookupProvider == null) {
      throw new IllegalStateException("no provider with name [" + providerName + "] registered");
    }
    delegateProducer=delegatePostingsFormat.fieldsProducer(state);
    if (state.context.context != Context.MERGE) {
      this.lookupFactory=completionLookupProvider.load(input);
    }
 else {
      this.lookupFactory=null;
    }
    this.delegateProducer=delegateProducer;
    success=true;
  }
  finally {
    if (!success) {
      IOUtils.closeWhileHandlingException(delegateProducer,input);
    }
 else {
      IOUtils.close(input);
    }
  }
}
