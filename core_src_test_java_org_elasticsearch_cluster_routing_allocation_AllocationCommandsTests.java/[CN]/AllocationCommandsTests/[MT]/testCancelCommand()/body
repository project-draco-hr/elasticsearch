{
  AllocationService allocation=createAllocationService(Settings.builder().put(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE_SETTING.getKey(),"none").put(EnableAllocationDecider.CLUSTER_ROUTING_REBALANCE_ENABLE_SETTING.getKey(),"none").build());
  logger.info("--> building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build();
  logger.info("--> adding 3 nodes");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2")).add(newNode("node3"))).build();
  clusterState=allocation.reroute(clusterState,"reroute");
  assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(),equalTo(0));
  logger.info("--> allocating empty primary shard with accept_data_loss flag set to true");
  ClusterState newState=allocation.reroute(clusterState,new AllocationCommands(new AllocateEmptyPrimaryAllocationCommand("test",0,"node1",true)),false,false).getClusterState();
  assertThat(newState,not(equalTo(clusterState)));
  clusterState=newState;
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(INITIALIZING).size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(0));
  logger.info("--> cancel primary allocation, make sure it fails...");
  try {
    allocation.reroute(clusterState,new AllocationCommands(new CancelAllocationCommand("test",0,"node1",false)),false,false);
    fail();
  }
 catch (  IllegalArgumentException e) {
  }
  logger.info("--> start the primary shard");
  clusterState=allocation.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING));
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(STARTED).size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(0));
  logger.info("--> cancel primary allocation, make sure it fails...");
  try {
    allocation.reroute(clusterState,new AllocationCommands(new CancelAllocationCommand("test",0,"node1",false)),false,false);
    fail();
  }
 catch (  IllegalArgumentException e) {
  }
  logger.info("--> allocate the replica shard on on the second node");
  newState=allocation.reroute(clusterState,new AllocationCommands(new AllocateReplicaAllocationCommand("test",0,"node2")),false,false).getClusterState();
  assertThat(newState,not(equalTo(clusterState)));
  clusterState=newState;
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(STARTED).size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").shardsWithState(INITIALIZING).size(),equalTo(1));
  logger.info("--> cancel the relocation allocation");
  newState=allocation.reroute(clusterState,new AllocationCommands(new CancelAllocationCommand("test",0,"node2",false)),false,false).getClusterState();
  assertThat(newState,not(equalTo(clusterState)));
  clusterState=newState;
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(STARTED).size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(0));
  assertThat(clusterState.getRoutingNodes().node("node3").size(),equalTo(0));
  logger.info("--> allocate the replica shard on on the second node");
  newState=allocation.reroute(clusterState,new AllocationCommands(new AllocateReplicaAllocationCommand("test",0,"node2")),false,false).getClusterState();
  assertThat(newState,not(equalTo(clusterState)));
  clusterState=newState;
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(STARTED).size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").shardsWithState(INITIALIZING).size(),equalTo(1));
  logger.info("--> cancel the primary being replicated, make sure it fails");
  try {
    allocation.reroute(clusterState,new AllocationCommands(new CancelAllocationCommand("test",0,"node1",false)),false,false);
    fail();
  }
 catch (  IllegalArgumentException e) {
  }
  logger.info("--> start the replica shard");
  clusterState=allocation.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING));
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(STARTED).size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").shardsWithState(STARTED).size(),equalTo(1));
  logger.info("--> cancel allocation of the replica shard");
  newState=allocation.reroute(clusterState,new AllocationCommands(new CancelAllocationCommand("test",0,"node2",false)),false,false).getClusterState();
  assertThat(newState,not(equalTo(clusterState)));
  clusterState=newState;
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(STARTED).size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(0));
  assertThat(clusterState.getRoutingNodes().node("node3").size(),equalTo(0));
  logger.info("--> allocate the replica shard on on the second node");
  newState=allocation.reroute(clusterState,new AllocationCommands(new AllocateReplicaAllocationCommand("test",0,"node2")),false,false).getClusterState();
  assertThat(newState,not(equalTo(clusterState)));
  clusterState=newState;
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(STARTED).size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").shardsWithState(INITIALIZING).size(),equalTo(1));
  logger.info("--> start the replica shard");
  clusterState=allocation.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING));
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(STARTED).size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").shardsWithState(STARTED).size(),equalTo(1));
  logger.info("--> move the replica shard");
  clusterState=allocation.reroute(clusterState,new AllocationCommands(new MoveAllocationCommand("test",0,"node2","node3")),false,false).getClusterState();
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(STARTED).size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").shardsWithState(RELOCATING).size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node3").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node3").shardsWithState(INITIALIZING).size(),equalTo(1));
  if (randomBoolean()) {
    logger.info("--> cancel the primary allocation (with allow_primary set to true)");
    newState=allocation.reroute(clusterState,new AllocationCommands(new CancelAllocationCommand("test",0,"node1",true)),false,false).getClusterState();
    assertThat(newState,not(equalTo(clusterState)));
    clusterState=newState;
    assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(0));
    assertThat(clusterState.getRoutingNodes().node("node2").shardsWithState(STARTED).iterator().next().primary(),equalTo(true));
    assertThat(clusterState.getRoutingNodes().node("node3").size(),equalTo(0));
  }
 else {
    logger.info("--> cancel the move of the replica shard");
    clusterState=allocation.reroute(clusterState,new AllocationCommands(new CancelAllocationCommand("test",0,"node3",false)),false,false).getClusterState();
    assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
    assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(STARTED).size(),equalTo(1));
    assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(1));
    assertThat(clusterState.getRoutingNodes().node("node2").shardsWithState(STARTED).size(),equalTo(1));
    logger.info("--> move the replica shard again");
    clusterState=allocation.reroute(clusterState,new AllocationCommands(new MoveAllocationCommand("test",0,"node2","node3")),false,false).getClusterState();
    assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
    assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(STARTED).size(),equalTo(1));
    assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(1));
    assertThat(clusterState.getRoutingNodes().node("node2").shardsWithState(RELOCATING).size(),equalTo(1));
    assertThat(clusterState.getRoutingNodes().node("node3").size(),equalTo(1));
    assertThat(clusterState.getRoutingNodes().node("node3").shardsWithState(INITIALIZING).size(),equalTo(1));
    logger.info("--> cancel the source replica shard");
    clusterState=allocation.reroute(clusterState,new AllocationCommands(new CancelAllocationCommand("test",0,"node2",false)),false,false).getClusterState();
    assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
    assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(STARTED).size(),equalTo(1));
    assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(0));
    assertThat(clusterState.getRoutingNodes().node("node3").size(),equalTo(1));
    assertThat(clusterState.getRoutingNodes().node("node3").shardsWithState(INITIALIZING).size(),equalTo(1));
    assertThat(clusterState.getRoutingNodes().node("node3").shardsWithState(INITIALIZING).get(0).relocatingNodeId(),nullValue());
    logger.info("--> start the former target replica shard");
    clusterState=allocation.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING));
    assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
    assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(STARTED).size(),equalTo(1));
    assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(0));
    assertThat(clusterState.getRoutingNodes().node("node3").shardsWithState(STARTED).size(),equalTo(1));
    logger.info("--> cancel the primary allocation (with allow_primary set to true)");
    newState=allocation.reroute(clusterState,new AllocationCommands(new CancelAllocationCommand("test",0,"node1",true)),false,false).getClusterState();
    assertThat(newState,not(equalTo(clusterState)));
    clusterState=newState;
    assertThat(clusterState.getRoutingNodes().node("node3").shardsWithState(STARTED).iterator().next().primary(),equalTo(true));
    assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(0));
    assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(0));
  }
}
