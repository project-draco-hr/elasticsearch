{
  AllocationService allocation=createAllocationService(Settings.builder().put(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE_SETTING.getKey(),"none").put(EnableAllocationDecider.CLUSTER_ROUTING_REBALANCE_ENABLE_SETTING.getKey(),"none").build());
  final String index="test";
  logger.info("--> building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder(index).settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsRecovery(metaData.index(index)).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build();
  final ShardId shardId=new ShardId(metaData.index(index).getIndex(),0);
  logger.info("--> adding 3 nodes on same rack and do rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2")).add(newNode("node3")).add(newNode("node4",singleton(DiscoveryNode.Role.MASTER)))).build();
  RoutingAllocation.Result rerouteResult=allocation.reroute(clusterState,"reroute");
  clusterState=ClusterState.builder(clusterState).routingTable(rerouteResult.routingTable()).build();
  assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(),equalTo(0));
  logger.info("--> allocating to non-existent node, should fail");
  try {
    allocation.reroute(clusterState,new AllocationCommands(randomAllocateCommand(index,shardId.id(),"node42")),false,false);
    fail("expected IllegalArgumentException when allocating to non-existing node");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage(),containsString("failed to resolve [node42], no matching nodes"));
  }
  logger.info("--> allocating to non-data node, should fail");
  try {
    allocation.reroute(clusterState,new AllocationCommands(randomAllocateCommand(index,shardId.id(),"node4")),false,false);
    fail("expected IllegalArgumentException when allocating to non-data node");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage(),containsString("allocation can only be done on data nodes"));
  }
  logger.info("--> allocating non-existing shard, should fail");
  try {
    allocation.reroute(clusterState,new AllocationCommands(randomAllocateCommand("test",1,"node2")),false,false);
    fail("expected ShardNotFoundException when allocating non-existing shard");
  }
 catch (  ShardNotFoundException e) {
    assertThat(e.getMessage(),containsString("no such shard"));
  }
  logger.info("--> allocating non-existing index, should fail");
  try {
    allocation.reroute(clusterState,new AllocationCommands(randomAllocateCommand("test2",0,"node2")),false,false);
    fail("expected ShardNotFoundException when allocating non-existing index");
  }
 catch (  IndexNotFoundException e) {
    assertThat(e.getMessage(),containsString("no such index"));
  }
  logger.info("--> allocating empty primary with acceptDataLoss flag set to false");
  try {
    allocation.reroute(clusterState,new AllocationCommands(new AllocateEmptyPrimaryAllocationCommand("test",0,"node1",false)),false,false);
    fail("expected IllegalArgumentException when allocating empty primary with acceptDataLoss flag set to false");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage(),containsString("allocating an empty primary for " + shardId + " can result in data loss. Please confirm by setting the accept_data_loss parameter to true"));
  }
  logger.info("--> allocating stale primary with acceptDataLoss flag set to false");
  try {
    allocation.reroute(clusterState,new AllocationCommands(new AllocateStalePrimaryAllocationCommand(index,shardId.id(),"node1",false)),false,false);
    fail("expected IllegalArgumentException when allocating stale primary with acceptDataLoss flag set to false");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage(),containsString("allocating an empty primary for " + shardId + " can result in data loss. Please confirm by setting the accept_data_loss parameter to true"));
  }
  logger.info("--> allocating empty primary with acceptDataLoss flag set to true");
  rerouteResult=allocation.reroute(clusterState,new AllocationCommands(new AllocateEmptyPrimaryAllocationCommand("test",0,"node1",true)),false,false);
  assertThat(rerouteResult.changed(),equalTo(true));
  clusterState=ClusterState.builder(clusterState).routingTable(rerouteResult.routingTable()).build();
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(INITIALIZING).size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(0));
  logger.info("--> start the primary shard");
  rerouteResult=allocation.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING));
  clusterState=ClusterState.builder(clusterState).routingTable(rerouteResult.routingTable()).build();
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(STARTED).size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(0));
  logger.info("--> allocate the replica shard on the primary shard node, should fail");
  try {
    allocation.reroute(clusterState,new AllocationCommands(new AllocateReplicaAllocationCommand("test",0,"node1")),false,false);
    fail("expected IllegalArgumentException when allocating replica shard on the primary shard node");
  }
 catch (  IllegalArgumentException e) {
  }
  logger.info("--> allocate the replica shard on on the second node");
  rerouteResult=allocation.reroute(clusterState,new AllocationCommands(new AllocateReplicaAllocationCommand("test",0,"node2")),false,false);
  assertThat(rerouteResult.changed(),equalTo(true));
  clusterState=ClusterState.builder(clusterState).routingTable(rerouteResult.routingTable()).build();
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(STARTED).size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").shardsWithState(INITIALIZING).size(),equalTo(1));
  logger.info("--> start the replica shard");
  rerouteResult=allocation.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING));
  clusterState=ClusterState.builder(clusterState).routingTable(rerouteResult.routingTable()).build();
  assertThat(clusterState.getRoutingNodes().node("node1").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(STARTED).size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").size(),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").shardsWithState(STARTED).size(),equalTo(1));
  logger.info("--> verify that we fail when there are no unassigned shards");
  try {
    allocation.reroute(clusterState,new AllocationCommands(randomAllocateCommand("test",0,"node3")),false,false);
    fail("expected IllegalArgumentException when allocating shard while no unassigned shard available");
  }
 catch (  IllegalArgumentException e) {
  }
}
