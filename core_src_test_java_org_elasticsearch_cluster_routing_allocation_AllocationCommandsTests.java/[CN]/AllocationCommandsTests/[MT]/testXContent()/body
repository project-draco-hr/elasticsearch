{
  String commands="{\n" + "    \"commands\" : [\n" + "        {\"allocate_empty_primary\" : {\"index\" : \"test\", \"shard\" : 1, \"node\" : \"node1\", \"accept_data_loss\" : true}}\n"+ "       ,{\"allocate_stale_primary\" : {\"index\" : \"test\", \"shard\" : 2, \"node\" : \"node1\", \"accept_data_loss\" : true}}\n"+ "       ,{\"allocate_replica\" : {\"index\" : \"test\", \"shard\" : 2, \"node\" : \"node1\"}}\n"+ "       ,{\"move\" : {\"index\" : \"test\", \"shard\" : 3, \"from_node\" : \"node2\", \"to_node\" : \"node3\"}} \n"+ "       ,{\"cancel\" : {\"index\" : \"test\", \"shard\" : 4, \"node\" : \"node5\", \"allow_primary\" : true}} \n"+ "    ]\n"+ "}\n";
  XContentParser parser=XContentFactory.xContent(XContentType.JSON).createParser(commands);
  parser.nextToken();
  parser.nextToken();
  AllocationCommandRegistry registry=new NetworkModule(null,Settings.EMPTY,true,new NamedWriteableRegistry()).getAllocationCommandRegistry();
  AllocationCommands sCommands=AllocationCommands.fromXContent(parser,ParseFieldMatcher.STRICT,registry);
  assertThat(sCommands.commands().size(),equalTo(5));
  assertThat(((AllocateEmptyPrimaryAllocationCommand)(sCommands.commands().get(0))).shardId(),equalTo(1));
  assertThat(((AllocateEmptyPrimaryAllocationCommand)(sCommands.commands().get(0))).index(),equalTo("test"));
  assertThat(((AllocateEmptyPrimaryAllocationCommand)(sCommands.commands().get(0))).node(),equalTo("node1"));
  assertThat(((AllocateEmptyPrimaryAllocationCommand)(sCommands.commands().get(0))).acceptDataLoss(),equalTo(true));
  assertThat(((AllocateStalePrimaryAllocationCommand)(sCommands.commands().get(1))).shardId(),equalTo(2));
  assertThat(((AllocateStalePrimaryAllocationCommand)(sCommands.commands().get(1))).index(),equalTo("test"));
  assertThat(((AllocateStalePrimaryAllocationCommand)(sCommands.commands().get(1))).node(),equalTo("node1"));
  assertThat(((AllocateStalePrimaryAllocationCommand)(sCommands.commands().get(1))).acceptDataLoss(),equalTo(true));
  assertThat(((AllocateReplicaAllocationCommand)(sCommands.commands().get(2))).shardId(),equalTo(2));
  assertThat(((AllocateReplicaAllocationCommand)(sCommands.commands().get(2))).index(),equalTo("test"));
  assertThat(((AllocateReplicaAllocationCommand)(sCommands.commands().get(2))).node(),equalTo("node1"));
  assertThat(((MoveAllocationCommand)(sCommands.commands().get(3))).shardId(),equalTo(3));
  assertThat(((MoveAllocationCommand)(sCommands.commands().get(3))).index(),equalTo("test"));
  assertThat(((MoveAllocationCommand)(sCommands.commands().get(3))).fromNode(),equalTo("node2"));
  assertThat(((MoveAllocationCommand)(sCommands.commands().get(3))).toNode(),equalTo("node3"));
  assertThat(((CancelAllocationCommand)(sCommands.commands().get(4))).shardId(),equalTo(4));
  assertThat(((CancelAllocationCommand)(sCommands.commands().get(4))).index(),equalTo("test"));
  assertThat(((CancelAllocationCommand)(sCommands.commands().get(4))).node(),equalTo("node5"));
  assertThat(((CancelAllocationCommand)(sCommands.commands().get(4))).allowPrimary(),equalTo(true));
}
