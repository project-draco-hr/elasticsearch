{
  AllocationCommands commands=new AllocationCommands(new AllocateEmptyPrimaryAllocationCommand("test",1,"node1",true),new AllocateStalePrimaryAllocationCommand("test",2,"node1",true),new AllocateReplicaAllocationCommand("test",2,"node1"),new MoveAllocationCommand("test",3,"node2","node3"),new CancelAllocationCommand("test",4,"node5",true));
  BytesStreamOutput bytes=new BytesStreamOutput();
  AllocationCommands.writeTo(commands,bytes);
  StreamInput in=bytes.bytes().streamInput();
  NetworkModule networkModule=new NetworkModule(null,Settings.EMPTY,true);
  NamedWriteableRegistry namedWriteableRegistry=new NamedWriteableRegistry(networkModule.getNamedWriteables());
  in=new NamedWriteableAwareStreamInput(in,namedWriteableRegistry);
  AllocationCommands sCommands=AllocationCommands.readFrom(in);
  assertThat(sCommands.commands().size(),equalTo(5));
  assertThat(((AllocateEmptyPrimaryAllocationCommand)(sCommands.commands().get(0))).shardId(),equalTo(1));
  assertThat(((AllocateEmptyPrimaryAllocationCommand)(sCommands.commands().get(0))).index(),equalTo("test"));
  assertThat(((AllocateEmptyPrimaryAllocationCommand)(sCommands.commands().get(0))).node(),equalTo("node1"));
  assertThat(((AllocateEmptyPrimaryAllocationCommand)(sCommands.commands().get(0))).acceptDataLoss(),equalTo(true));
  assertThat(((AllocateStalePrimaryAllocationCommand)(sCommands.commands().get(1))).shardId(),equalTo(2));
  assertThat(((AllocateStalePrimaryAllocationCommand)(sCommands.commands().get(1))).index(),equalTo("test"));
  assertThat(((AllocateStalePrimaryAllocationCommand)(sCommands.commands().get(1))).node(),equalTo("node1"));
  assertThat(((AllocateStalePrimaryAllocationCommand)(sCommands.commands().get(1))).acceptDataLoss(),equalTo(true));
  assertThat(((AllocateReplicaAllocationCommand)(sCommands.commands().get(2))).shardId(),equalTo(2));
  assertThat(((AllocateReplicaAllocationCommand)(sCommands.commands().get(2))).index(),equalTo("test"));
  assertThat(((AllocateReplicaAllocationCommand)(sCommands.commands().get(2))).node(),equalTo("node1"));
  assertThat(((MoveAllocationCommand)(sCommands.commands().get(3))).shardId(),equalTo(3));
  assertThat(((MoveAllocationCommand)(sCommands.commands().get(3))).index(),equalTo("test"));
  assertThat(((MoveAllocationCommand)(sCommands.commands().get(3))).fromNode(),equalTo("node2"));
  assertThat(((MoveAllocationCommand)(sCommands.commands().get(3))).toNode(),equalTo("node3"));
  assertThat(((CancelAllocationCommand)(sCommands.commands().get(4))).shardId(),equalTo(4));
  assertThat(((CancelAllocationCommand)(sCommands.commands().get(4))).index(),equalTo("test"));
  assertThat(((CancelAllocationCommand)(sCommands.commands().get(4))).node(),equalTo("node5"));
  assertThat(((CancelAllocationCommand)(sCommands.commands().get(4))).allowPrimary(),equalTo(true));
}
