{
  XContentParser parser=context.getParser();
  if (token == XContentParser.Token.START_ARRAY) {
    if (context.matchField(currentFieldName,keysField())) {
      DoubleArrayList values=new DoubleArrayList(10);
      while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
        double value=parser.doubleValue();
        values.add(value);
      }
      double[] keys=values.toArray();
      otherOptions.put(keysField(),keys);
      return true;
    }
 else {
      return false;
    }
  }
 else   if (token == XContentParser.Token.VALUE_BOOLEAN) {
    if (context.matchField(currentFieldName,KEYED_FIELD)) {
      boolean keyed=parser.booleanValue();
      otherOptions.put(KEYED_FIELD,keyed);
      return true;
    }
 else {
      return false;
    }
  }
 else   if (token == XContentParser.Token.START_OBJECT) {
    PercentilesMethod method=PercentilesMethod.resolveFromName(currentFieldName);
    if (method == null) {
      return false;
    }
 else {
      otherOptions.put(METHOD_FIELD,method);
switch (method) {
case TDIGEST:
        while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
          if (token == XContentParser.Token.FIELD_NAME) {
            currentFieldName=parser.currentName();
          }
 else           if (token == XContentParser.Token.VALUE_NUMBER) {
            if (context.matchField(currentFieldName,COMPRESSION_FIELD)) {
              double compression=parser.doubleValue();
              otherOptions.put(COMPRESSION_FIELD,compression);
            }
 else {
              return false;
            }
          }
 else {
            return false;
          }
        }
      break;
case HDR:
    while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
      if (token == XContentParser.Token.FIELD_NAME) {
        currentFieldName=parser.currentName();
      }
 else       if (token == XContentParser.Token.VALUE_NUMBER) {
        if (context.matchField(currentFieldName,NUMBER_SIGNIFICANT_DIGITS_FIELD)) {
          int numberOfSignificantValueDigits=parser.intValue();
          otherOptions.put(NUMBER_SIGNIFICANT_DIGITS_FIELD,numberOfSignificantValueDigits);
        }
 else {
          return false;
        }
      }
 else {
        return false;
      }
    }
  break;
}
return true;
}
}
return false;
}
