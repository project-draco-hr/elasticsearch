{
  Double[] badPercents={-1.0,110.0};
  try {
    client().prepareSearch("idx").addAggregation(terms("terms").field("tag").order(Terms.Order.term(true)).subAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).extendedBounds((long)minRandomValue,(long)maxRandomValue)).subAggregation(percentilesBucket("percentiles_bucket").setBucketsPaths("histo>_count").percents(badPercents))).execute().actionGet();
    fail("Illegal percent's were provided but no exception was thrown.");
  }
 catch (  SearchPhaseExecutionException exception) {
    ElasticsearchException[] rootCauses=exception.guessRootCauses();
    assertThat(rootCauses.length,equalTo(1));
    ElasticsearchException rootCause=rootCauses[0];
    assertThat(rootCause.getMessage(),containsString("must only contain non-null doubles from 0.0-100.0 inclusive"));
  }
}
