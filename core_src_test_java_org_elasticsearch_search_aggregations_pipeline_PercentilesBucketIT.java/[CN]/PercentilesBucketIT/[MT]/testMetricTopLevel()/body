{
  SearchResponse response=client().prepareSearch("idx").addAggregation(terms("terms").field("tag").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME))).addAggregation(percentilesBucket("percentiles_bucket","terms>sum").percents(PERCENTS)).execute().actionGet();
  assertSearchResponse(response);
  Terms terms=response.getAggregations().get("terms");
  assertThat(terms,notNullValue());
  assertThat(terms.getName(),equalTo("terms"));
  List<Terms.Bucket> buckets=terms.getBuckets();
  assertThat(buckets.size(),equalTo(interval));
  double[] values=new double[interval];
  for (int i=0; i < interval; ++i) {
    Terms.Bucket bucket=buckets.get(i);
    assertThat(bucket,notNullValue());
    assertThat((String)bucket.getKey(),equalTo("tag" + (i % interval)));
    assertThat(bucket.getDocCount(),greaterThan(0L));
    Sum sum=bucket.getAggregations().get("sum");
    assertThat(sum,notNullValue());
    values[i]=sum.value();
  }
  Arrays.sort(values);
  PercentilesBucket percentilesBucketValue=response.getAggregations().get("percentiles_bucket");
  assertThat(percentilesBucketValue,notNullValue());
  assertThat(percentilesBucketValue.getName(),equalTo("percentiles_bucket"));
  for (  Double p : PERCENTS) {
    double expected=values[(int)((p / 100) * values.length)];
    assertThat(percentilesBucketValue.percentile(p),equalTo(expected));
  }
}
