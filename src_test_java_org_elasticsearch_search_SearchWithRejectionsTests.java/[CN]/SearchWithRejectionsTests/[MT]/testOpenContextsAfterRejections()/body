{
  createIndex("test");
  ensureGreen("test");
  final int docs=scaledRandomIntBetween(20,50);
  for (int i=0; i < docs; i++) {
    client().prepareIndex("test","type",Integer.toString(i)).setSource("field","value").execute().actionGet();
  }
  IndicesStatsResponse indicesStats=client().admin().indices().prepareStats().execute().actionGet();
  assertThat(indicesStats.getTotal().getSearch().getOpenContexts(),equalTo(0l));
  refresh();
  int numSearches=10;
  Future<SearchResponse>[] responses=new Future[numSearches];
  SearchType searchType=randomFrom(SearchType.DEFAULT,SearchType.QUERY_AND_FETCH,SearchType.QUERY_THEN_FETCH,SearchType.DFS_QUERY_AND_FETCH,SearchType.DFS_QUERY_THEN_FETCH);
  logger.info("search type is {}",searchType);
  for (int i=0; i < numSearches; i++) {
    responses[i]=client().prepareSearch().setQuery(matchAllQuery()).setSearchType(searchType).execute();
  }
  int failures=0;
  for (int i=0; i < numSearches; i++) {
    try {
      SearchResponse searchResponse=responses[i].get();
      if (searchResponse.getFailedShards() > 0) {
        failures++;
      }
    }
 catch (    Throwable t) {
      failures++;
    }
  }
  assertThat(failures,greaterThanOrEqualTo(1));
  awaitBusy(new Predicate<Object>(){
    @Override public boolean apply(    Object input){
      return client().admin().indices().prepareStats().execute().actionGet().getTotal().getSearch().getOpenContexts() == 0;
    }
  }
,1,TimeUnit.SECONDS);
  indicesStats=client().admin().indices().prepareStats().execute().actionGet();
  assertThat(indicesStats.getTotal().getSearch().getOpenContexts(),equalTo(0l));
}
