{
  int minTerms=1;
  int maxTerms=50;
  int maxIter=100;
  int warmerIter=10;
  boolean runMVEL=false;
  init(maxTerms);
  List<Results> allResults=new ArrayList<>();
  Settings settings=settingsBuilder().put("plugin.types",NativeScriptExamplesPlugin.class.getName()).build();
  String clusterName=ScriptsScoreBenchmark.class.getSimpleName();
  Node node1=nodeBuilder().clusterName(clusterName).settings(settingsBuilder().put(settings).put("name","node1")).node();
  Client client=node1.client();
  client.admin().cluster().prepareHealth("test").setWaitForGreenStatus().setTimeout("10s").execute().actionGet();
  indexData(10000,client,false);
  client.admin().cluster().prepareHealth("test").setWaitForGreenStatus().setTimeout("10s").execute().actionGet();
  Results results=new Results();
  results.init(maxTerms - minTerms,"native tfidf script score dense posting list","Results for native script score with dense posting list:","black","--");
  List<Entry<String,RequestInfo>> searchRequests=initNativeSearchRequests(minTerms,maxTerms,NativeNaiveTFIDFScoreScript.NATIVE_NAIVE_TFIDF_SCRIPT_SCORE,true);
  runBenchmark(client,maxIter,results,searchRequests,minTerms,warmerIter);
  allResults.add(results);
  results=new Results();
  results.init(maxTerms - minTerms,"term query dense posting list","Results for term query with dense posting lists:","green","--");
  searchRequests=initTermQueries(minTerms,maxTerms);
  runBenchmark(client,maxIter,results,searchRequests,minTerms,warmerIter);
  allResults.add(results);
  if (runMVEL) {
    results=new Results();
    results.init(maxTerms - minTerms,"mvel tfidf dense posting list","Results for mvel score with dense posting list:","red","--");
    searchRequests=initNativeSearchRequests(minTerms,maxTerms,"score = 0.0; fi= _terminfo[\"text\"]; for(i=0; i<text.size(); i++){terminfo = fi[text.get(i)]; score = score + terminfo.tf()*fi.getDocCount()/terminfo.df();} return score;",false);
    runBenchmark(client,maxIter,results,searchRequests,minTerms,warmerIter);
    allResults.add(results);
  }
  indexData(10000,client,true);
  results=new Results();
  results.init(maxTerms - minTerms,"native tfidf script score sparse posting list","Results for native script scorewith sparse posting list:","black","-.");
  searchRequests=initNativeSearchRequests(minTerms,maxTerms,NativeNaiveTFIDFScoreScript.NATIVE_NAIVE_TFIDF_SCRIPT_SCORE,true);
  runBenchmark(client,maxIter,results,searchRequests,minTerms,warmerIter);
  allResults.add(results);
  results=new Results();
  results.init(maxTerms - minTerms,"term query sparse posting list","Results for term query with sparse posting lists:","green","-.");
  searchRequests=initTermQueries(minTerms,maxTerms);
  runBenchmark(client,maxIter,results,searchRequests,minTerms,warmerIter);
  allResults.add(results);
  if (runMVEL) {
    results=new Results();
    results.init(maxTerms - minTerms,"mvel tfidf sparse posting list","Results for mvel score with sparse posting list:","red","-.");
    searchRequests=initNativeSearchRequests(minTerms,maxTerms,"score = 0.0; fi= _terminfo[\"text\"]; for(i=0; i<text.size(); i++){terminfo = fi[text.get(i)]; score = score + terminfo.tf()*fi.getDocCount()/terminfo.df();} return score;",false);
    runBenchmark(client,maxIter,results,searchRequests,minTerms,warmerIter);
    allResults.add(results);
  }
  printOctaveScript(allResults,args);
  client.close();
  node1.close();
}
