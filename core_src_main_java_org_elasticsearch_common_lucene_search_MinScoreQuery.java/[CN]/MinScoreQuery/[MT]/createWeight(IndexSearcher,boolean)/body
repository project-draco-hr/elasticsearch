{
  final Weight weight=searcher.createWeight(query,true);
  final Query key=new MinScoreQuery(query,minScore,searcher);
  return new Weight(key){
    @Override public Scorer scorer(    LeafReaderContext context) throws IOException {
      Scorer scorer=weight.scorer(context);
      if (scorer == null) {
        return null;
      }
      return new MinScoreScorer(this,scorer,minScore);
    }
    @Override public BulkScorer bulkScorer(    LeafReaderContext context) throws IOException {
      BulkScorer bulkScorer=weight.bulkScorer(context);
      if (bulkScorer == null) {
        return null;
      }
      return new MinScoreBulkScorer(bulkScorer,minScore);
    }
    @Override public void normalize(    float norm,    float boost){
      weight.normalize(norm,boost);
    }
    @Override public float getValueForNormalization() throws IOException {
      return weight.getValueForNormalization();
    }
    @Override public void extractTerms(    Set<Term> terms){
      weight.extractTerms(terms);
    }
    @Override public Explanation explain(    LeafReaderContext context,    int doc) throws IOException {
      Explanation expl=weight.explain(context,doc);
      if (expl.isMatch() == false || expl.getValue() >= minScore) {
        return expl;
      }
 else {
        return Explanation.noMatch("Min score is less than the configured min score=" + minScore,expl);
      }
    }
  }
;
}
