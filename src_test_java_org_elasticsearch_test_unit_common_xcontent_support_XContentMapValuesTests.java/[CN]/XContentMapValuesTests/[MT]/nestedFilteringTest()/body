{
  Map<String,Object> map=new HashMap<String,Object>();
  map.put("field","value");
  map.put("array",Arrays.asList(1,new HashMap<String,Object>(){
{
      put("nested",2);
      put("nested_2",3);
    }
  }
));
  Map<String,Object> falteredMap=XContentMapValues.filter(map,new String[]{"array.nested"},Strings.EMPTY_ARRAY);
  assertThat(falteredMap.size(),equalTo(1));
  assertThat((Integer)((List)falteredMap.get("array")).get(0),equalTo(1));
  assertThat(((Map<String,Object>)((List)falteredMap.get("array")).get(1)).size(),equalTo(1));
  assertThat((Integer)((Map<String,Object>)((List)falteredMap.get("array")).get(1)).get("nested"),equalTo(2));
  falteredMap=XContentMapValues.filter(map,new String[]{"array.*"},Strings.EMPTY_ARRAY);
  assertThat(falteredMap.size(),equalTo(1));
  assertThat((Integer)((List)falteredMap.get("array")).get(0),equalTo(1));
  assertThat(((Map<String,Object>)((List)falteredMap.get("array")).get(1)).size(),equalTo(2));
  map.clear();
  map.put("field","value");
  map.put("obj",new HashMap<String,Object>(){
{
      put("field","value");
      put("field2","value2");
    }
  }
);
  falteredMap=XContentMapValues.filter(map,new String[]{"obj.field"},Strings.EMPTY_ARRAY);
  assertThat(falteredMap.size(),equalTo(1));
  assertThat(((Map<String,Object>)falteredMap.get("obj")).size(),equalTo(1));
  assertThat((String)((Map<String,Object>)falteredMap.get("obj")).get("field"),equalTo("value"));
  falteredMap=XContentMapValues.filter(map,new String[]{"obj.*"},Strings.EMPTY_ARRAY);
  assertThat(falteredMap.size(),equalTo(1));
  assertThat(((Map<String,Object>)falteredMap.get("obj")).size(),equalTo(2));
  assertThat((String)((Map<String,Object>)falteredMap.get("obj")).get("field"),equalTo("value"));
  assertThat((String)((Map<String,Object>)falteredMap.get("obj")).get("field2"),equalTo("value2"));
}
