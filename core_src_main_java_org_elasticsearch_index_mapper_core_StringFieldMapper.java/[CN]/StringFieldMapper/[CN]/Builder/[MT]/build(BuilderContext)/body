{
  if (positionOffsetGap > 0) {
    fieldType.setIndexAnalyzer(new NamedAnalyzer(fieldType.indexAnalyzer(),positionOffsetGap));
    fieldType.setSearchAnalyzer(new NamedAnalyzer(fieldType.searchAnalyzer(),positionOffsetGap));
    fieldType.setSearchQuoteAnalyzer(new NamedAnalyzer(fieldType.searchQuoteAnalyzer(),positionOffsetGap));
  }
  MappedFieldType defaultFieldType=Defaults.FIELD_TYPE.clone();
  if (fieldType.indexOptions() != IndexOptions.NONE && !fieldType.tokenized()) {
    defaultFieldType.setOmitNorms(true);
    defaultFieldType.setIndexOptions(IndexOptions.DOCS);
    if (!omitNormsSet && fieldType.boost() == Defaults.BOOST) {
      fieldType.setOmitNorms(true);
    }
    if (!indexOptionsSet) {
      fieldType.setIndexOptions(IndexOptions.DOCS);
    }
  }
  defaultFieldType.freeze();
  setupFieldType(context);
  StringFieldMapper fieldMapper=new StringFieldMapper(name,fieldType,defaultFieldType,docValues,positionOffsetGap,ignoreAbove,fieldDataSettings,context.indexSettings(),multiFieldsBuilder.build(this,context),copyTo);
  fieldMapper.includeInAll(includeInAll);
  return fieldMapper;
}
