{
  StringFieldMapper.Builder builder=stringField(name);
  parseField(builder,name,node,parserContext);
  for (Iterator<Map.Entry<String,Object>> iterator=node.entrySet().iterator(); iterator.hasNext(); ) {
    Map.Entry<String,Object> entry=iterator.next();
    String propName=Strings.toUnderscoreCase(entry.getKey());
    Object propNode=entry.getValue();
    if (propName.equals("null_value")) {
      if (propNode == null) {
        throw new MapperParsingException("Property [null_value] cannot be null.");
      }
      builder.nullValue(propNode.toString());
      iterator.remove();
    }
 else     if (propName.equals("search_quote_analyzer")) {
      NamedAnalyzer analyzer=parserContext.analysisService().analyzer(propNode.toString());
      if (analyzer == null) {
        throw new MapperParsingException("Analyzer [" + propNode.toString() + "] not found for field ["+ name+ "]");
      }
      builder.searchQuotedAnalyzer(analyzer);
      iterator.remove();
    }
 else     if (propName.equals("position_increment_gap") || parserContext.indexVersionCreated().before(Version.V_2_0_0) && propName.equals("position_offset_gap")) {
      int newPositionIncrementGap=XContentMapValues.nodeIntegerValue(propNode,-1);
      if (newPositionIncrementGap < 0) {
        throw new MapperParsingException("positions_increment_gap less than 0 aren't allowed.");
      }
      builder.positionIncrementGap(newPositionIncrementGap);
      if (builder.fieldType().indexAnalyzer() == null) {
        builder.fieldType().setIndexAnalyzer(parserContext.analysisService().defaultIndexAnalyzer());
      }
      if (builder.fieldType().searchAnalyzer() == null) {
        builder.fieldType().setSearchAnalyzer(parserContext.analysisService().defaultSearchAnalyzer());
      }
      if (builder.fieldType().searchQuoteAnalyzer() == null) {
        builder.fieldType().setSearchQuoteAnalyzer(parserContext.analysisService().defaultSearchQuoteAnalyzer());
      }
      iterator.remove();
    }
 else     if (propName.equals("ignore_above")) {
      builder.ignoreAbove(XContentMapValues.nodeIntegerValue(propNode,-1));
      iterator.remove();
    }
 else     if (parseMultiField(builder,name,parserContext,propName,propNode)) {
      iterator.remove();
    }
  }
  return builder;
}
