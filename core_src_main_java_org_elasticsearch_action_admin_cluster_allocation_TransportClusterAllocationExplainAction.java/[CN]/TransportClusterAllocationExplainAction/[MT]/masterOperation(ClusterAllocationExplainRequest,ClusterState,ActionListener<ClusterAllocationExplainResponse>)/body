{
  final RoutingNodes routingNodes=state.getRoutingNodes();
  final RoutingAllocation allocation=new RoutingAllocation(allocationDeciders,routingNodes,state,clusterInfoService.getClusterInfo(),System.nanoTime(),false);
  ShardRouting foundShard=null;
  if (request.useAnyUnassignedShard()) {
    RoutingNodes.UnassignedShards.UnassignedIterator ui=routingNodes.unassigned().iterator();
    if (ui.hasNext()) {
      foundShard=ui.next();
    }
  }
 else {
    String index=request.getIndex();
    int shard=request.getShard();
    if (request.isPrimary()) {
      foundShard=allocation.routingTable().shardRoutingTable(index,shard).primaryShard();
    }
 else {
      List<ShardRouting> replicaShardRoutings=allocation.routingTable().shardRoutingTable(index,shard).replicaShards();
      if (replicaShardRoutings.size() > 0) {
        foundShard=replicaShardRoutings.get(0);
        for (        ShardRouting replica : replicaShardRoutings) {
          if (replica.unassigned()) {
            foundShard=replica;
            break;
          }
        }
      }
    }
  }
  if (foundShard == null) {
    listener.onFailure(new ElasticsearchException("unable to find any shards to explain [{}] in the routing table",request));
    return;
  }
  final ShardRouting shardRouting=foundShard;
  logger.debug("explaining the allocation for [{}], found shard [{}]",request,shardRouting);
  getShardStores(shardRouting,new ActionListener<IndicesShardStoresResponse>(){
    @Override public void onResponse(    IndicesShardStoresResponse shardStoreResponse){
      ImmutableOpenIntMap<List<IndicesShardStoresResponse.StoreStatus>> shardStatuses=shardStoreResponse.getStoreStatuses().get(shardRouting.getIndexName());
      List<IndicesShardStoresResponse.StoreStatus> shardStoreStatus=shardStatuses.get(shardRouting.id());
      ClusterAllocationExplanation cae=explainShard(shardRouting,allocation,routingNodes,request.includeYesDecisions(),shardAllocator,shardStoreStatus,gatewayAllocator);
      listener.onResponse(new ClusterAllocationExplainResponse(cae));
    }
    @Override public void onFailure(    Exception e){
      listener.onFailure(e);
    }
  }
);
}
