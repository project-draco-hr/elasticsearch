{
  allocation.debugDecision(true);
  UnassignedInfo ui=shard.unassignedInfo();
  Map<DiscoveryNode,Decision> nodeToDecision=new HashMap<>();
  for (  RoutingNode node : routingNodes) {
    DiscoveryNode discoNode=node.node();
    if (discoNode.isDataNode()) {
      Decision d=tryShardOnNode(shard,node,allocation,includeYesDecisions);
      nodeToDecision.put(discoNode,d);
    }
  }
  long remainingDelayMillis=0;
  final MetaData metadata=allocation.metaData();
  final IndexMetaData indexMetaData=metadata.index(shard.index());
  long allocationDelayMillis=INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.get(indexMetaData.getSettings()).getMillis();
  if (ui != null && ui.isDelayed()) {
    long remainingDelayNanos=ui.getRemainingDelay(System.nanoTime(),indexMetaData.getSettings());
    remainingDelayMillis=TimeValue.timeValueNanos(remainingDelayNanos).millis();
  }
  Map<DiscoveryNode,Float> weights=shardAllocator.weighShard(allocation,shard);
  Map<DiscoveryNode,IndicesShardStoresResponse.StoreStatus> nodeToStatus=new HashMap<>(shardStores.size());
  for (  IndicesShardStoresResponse.StoreStatus status : shardStores) {
    nodeToStatus.put(status.getNode(),status);
  }
  Map<DiscoveryNode,NodeExplanation> explanations=new HashMap<>(shardStores.size());
  for (  Map.Entry<DiscoveryNode,Decision> entry : nodeToDecision.entrySet()) {
    DiscoveryNode node=entry.getKey();
    Decision decision=entry.getValue();
    Float weight=weights.get(node);
    IndicesShardStoresResponse.StoreStatus storeStatus=nodeToStatus.get(node);
    NodeExplanation nodeExplanation=calculateNodeExplanation(shard,indexMetaData,node,decision,weight,storeStatus,shard.currentNodeId(),indexMetaData.inSyncAllocationIds(shard.getId()),allocation.hasPendingAsyncFetch());
    explanations.put(node,nodeExplanation);
  }
  return new ClusterAllocationExplanation(shard.shardId(),shard.primary(),shard.currentNodeId(),allocationDelayMillis,remainingDelayMillis,ui,gatewayAllocator.hasFetchPending(shard.shardId(),shard.primary()),explanations,clusterInfo);
}
