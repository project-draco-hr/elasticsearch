{
  ClusterAllocationExplanation.FinalDecision finalDecision;
  ClusterAllocationExplanation.StoreCopy storeCopy;
  String finalExplanation;
  if (node.getId().equals(assignedNodeId)) {
    finalDecision=ClusterAllocationExplanation.FinalDecision.ALREADY_ASSIGNED;
    finalExplanation="the shard is already assigned to this node";
  }
 else   if (nodeDecision.type() == Decision.Type.NO) {
    finalDecision=ClusterAllocationExplanation.FinalDecision.NO;
    finalExplanation="the shard cannot be assigned because one or more allocation decider returns a 'NO' decision";
  }
 else {
    finalDecision=ClusterAllocationExplanation.FinalDecision.YES;
    finalExplanation="the shard can be assigned";
  }
  if (storeStatus != null) {
    final Throwable storeErr=storeStatus.getStoreException();
    if (storeErr != null && shard.primary() && shard.allocatedPostIndexCreate(indexMetaData) == false) {
      finalDecision=ClusterAllocationExplanation.FinalDecision.NO;
      if (ExceptionsHelper.unwrapCause(storeErr) instanceof CorruptIndexException) {
        storeCopy=ClusterAllocationExplanation.StoreCopy.CORRUPT;
        finalExplanation="the copy of data in the shard store is corrupt";
      }
 else {
        storeCopy=ClusterAllocationExplanation.StoreCopy.IO_ERROR;
        finalExplanation="there was an IO error reading from data in the shard store";
      }
    }
 else     if (activeAllocationIds.isEmpty()) {
      storeCopy=ClusterAllocationExplanation.StoreCopy.UNKNOWN;
    }
 else     if (activeAllocationIds.contains(storeStatus.getAllocationId())) {
      storeCopy=ClusterAllocationExplanation.StoreCopy.AVAILABLE;
      if (finalDecision == ClusterAllocationExplanation.FinalDecision.YES) {
        finalExplanation="the shard can be assigned and the node contains a valid copy of the shard data";
      }
    }
 else {
      storeCopy=ClusterAllocationExplanation.StoreCopy.STALE;
      finalExplanation="the copy of the shard is stale, allocation ids do not match";
      finalDecision=ClusterAllocationExplanation.FinalDecision.NO;
    }
  }
 else {
    storeCopy=ClusterAllocationExplanation.StoreCopy.NONE;
  }
  return new NodeExplanation(node,nodeDecision,nodeWeight,storeStatus,finalDecision,finalExplanation,storeCopy);
}
