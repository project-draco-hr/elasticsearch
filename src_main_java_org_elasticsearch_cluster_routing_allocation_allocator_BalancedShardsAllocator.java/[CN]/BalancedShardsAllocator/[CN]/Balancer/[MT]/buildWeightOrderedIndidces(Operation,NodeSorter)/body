{
  final String[] indices=this.indices.toArray(new String[this.indices.size()]);
  final float[] deltas=new float[indices.length];
  for (int i=0; i < deltas.length; i++) {
    sorter.reset(operation,indices[i]);
    deltas[i]=sorter.delta();
  }
  new IntroSorter(){
    float pivotWeight;
    @Override protected void swap(    int i,    int j){
      final String tmpIdx=indices[i];
      indices[i]=indices[j];
      indices[j]=tmpIdx;
      final float tmpDelta=deltas[i];
      deltas[i]=deltas[j];
      deltas[j]=tmpDelta;
    }
    @Override protected int compare(    int i,    int j){
      return Float.compare(deltas[j],deltas[i]);
    }
    @Override protected void setPivot(    int i){
      pivotWeight=deltas[i];
    }
    @Override protected int comparePivot(    int j){
      return Float.compare(deltas[j],pivotWeight);
    }
  }
.sort(0,deltas.length);
  return indices;
}
