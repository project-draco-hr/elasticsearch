{
  ObjectLongMap<DiscoveryNode> nodesToSize=new ObjectLongHashMap<>();
  for (  Map.Entry<DiscoveryNode,TransportNodesListShardStoreMetaData.NodeStoreFilesMetaData> nodeStoreEntry : data.getData().entrySet()) {
    DiscoveryNode discoNode=nodeStoreEntry.getKey();
    TransportNodesListShardStoreMetaData.StoreFilesMetaData storeFilesMetaData=nodeStoreEntry.getValue().storeFilesMetaData();
    if (storeFilesMetaData == null) {
      continue;
    }
    RoutingNode node=allocation.routingNodes().node(discoNode.getId());
    if (node == null) {
      continue;
    }
    Decision decision=allocation.deciders().canAllocate(shard,node,allocation);
    if (decision.type() == Decision.Type.NO) {
      continue;
    }
    if (storeFilesMetaData.allocated()) {
      continue;
    }
    if (storeFilesMetaData.iterator().hasNext() == false) {
      continue;
    }
    String primarySyncId=primaryStore.syncId();
    String replicaSyncId=storeFilesMetaData.syncId();
    if (replicaSyncId != null && replicaSyncId.equals(primarySyncId)) {
      logger.trace("{}: node [{}] has same sync id {} as primary",shard,discoNode.name(),replicaSyncId);
      nodesToSize.put(discoNode,Long.MAX_VALUE);
    }
 else {
      long sizeMatched=0;
      for (      StoreFileMetaData storeFileMetaData : storeFilesMetaData) {
        String metaDataFileName=storeFileMetaData.name();
        if (primaryStore.fileExists(metaDataFileName) && primaryStore.file(metaDataFileName).isSame(storeFileMetaData)) {
          sizeMatched+=storeFileMetaData.length();
        }
      }
      logger.trace("{}: node [{}] has [{}/{}] bytes of re-usable data",shard,discoNode.name(),new ByteSizeValue(sizeMatched),sizeMatched);
      nodesToSize.put(discoNode,sizeMatched);
    }
  }
  return new MatchingNodes(nodesToSize);
}
