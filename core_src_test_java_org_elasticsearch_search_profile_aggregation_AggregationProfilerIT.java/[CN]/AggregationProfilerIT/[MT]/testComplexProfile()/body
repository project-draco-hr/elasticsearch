{
  SearchResponse response=client().prepareSearch("idx").setProfile(true).addAggregation(histogram("histo").field(NUMBER_FIELD).interval(1L).subAggregation(terms("tags").field(TAG_FIELD).subAggregation(avg("avg").field(NUMBER_FIELD)).subAggregation(max("max").field(NUMBER_FIELD))).subAggregation(terms("strings").field(STRING_FIELD).subAggregation(avg("avg").field(NUMBER_FIELD)).subAggregation(max("max").field(NUMBER_FIELD)).subAggregation(terms("tags").field(TAG_FIELD).subAggregation(avg("avg").field(NUMBER_FIELD)).subAggregation(max("max").field(NUMBER_FIELD))))).get();
  assertSearchResponse(response);
  Map<String,ProfileShardResult> profileResults=response.getProfileResults();
  assertThat(profileResults,notNullValue());
  assertThat(profileResults.size(),equalTo(getNumShards("idx").numPrimaries));
  for (  ProfileShardResult profileShardResult : profileResults.values()) {
    assertThat(profileShardResult,notNullValue());
    AggregationProfileShardResult aggProfileResults=profileShardResult.getAggregationProfileResults();
    assertThat(aggProfileResults,notNullValue());
    List<ProfileResult> aggProfileResultsList=aggProfileResults.getProfileResults();
    assertThat(aggProfileResultsList,notNullValue());
    assertThat(aggProfileResultsList.size(),equalTo(1));
    ProfileResult histoAggResult=aggProfileResultsList.get(0);
    assertThat(histoAggResult,notNullValue());
    assertThat(histoAggResult.getQueryName(),equalTo("org.elasticsearch.search.aggregations.bucket.histogram.HistogramAggregator"));
    assertThat(histoAggResult.getLuceneDescription(),equalTo("histo"));
    assertThat(histoAggResult.getTime(),greaterThan(0L));
    Map<String,Long> histoBreakdown=histoAggResult.getTimeBreakdown();
    assertThat(histoBreakdown,notNullValue());
    assertThat(histoBreakdown.get(AggregationTimingType.INITIALIZE.toString()),notNullValue());
    assertThat(histoBreakdown.get(AggregationTimingType.INITIALIZE.toString()),greaterThan(0L));
    assertThat(histoBreakdown.get(AggregationTimingType.COLLECT.toString()),notNullValue());
    assertThat(histoBreakdown.get(AggregationTimingType.COLLECT.toString()),greaterThan(0L));
    assertThat(histoBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()),notNullValue());
    assertThat(histoBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()),greaterThan(0L));
    assertThat(histoBreakdown.get(AggregationTimingType.REDUCE.toString()),notNullValue());
    assertThat(histoBreakdown.get(AggregationTimingType.REDUCE.toString()),equalTo(0L));
    assertThat(histoAggResult.getProfiledChildren().size(),equalTo(2));
    ProfileResult tagsAggResult=histoAggResult.getProfiledChildren().get(0);
    assertThat(tagsAggResult,notNullValue());
    assertThat(tagsAggResult.getQueryName(),equalTo(GlobalOrdinalsStringTermsAggregator.WithHash.class.getName()));
    assertThat(tagsAggResult.getLuceneDescription(),equalTo("tags"));
    assertThat(tagsAggResult.getTime(),greaterThan(0L));
    Map<String,Long> tagsBreakdown=tagsAggResult.getTimeBreakdown();
    assertThat(tagsBreakdown,notNullValue());
    assertThat(tagsBreakdown.get(AggregationTimingType.INITIALIZE.toString()),notNullValue());
    assertThat(tagsBreakdown.get(AggregationTimingType.INITIALIZE.toString()),greaterThan(0L));
    assertThat(tagsBreakdown.get(AggregationTimingType.COLLECT.toString()),notNullValue());
    assertThat(tagsBreakdown.get(AggregationTimingType.COLLECT.toString()),greaterThan(0L));
    assertThat(tagsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()),notNullValue());
    assertThat(tagsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()),greaterThan(0L));
    assertThat(tagsBreakdown.get(AggregationTimingType.REDUCE.toString()),notNullValue());
    assertThat(tagsBreakdown.get(AggregationTimingType.REDUCE.toString()),equalTo(0L));
    assertThat(tagsAggResult.getProfiledChildren().size(),equalTo(2));
    ProfileResult avgAggResult=tagsAggResult.getProfiledChildren().get(0);
    assertThat(avgAggResult,notNullValue());
    assertThat(avgAggResult.getQueryName(),equalTo(AvgAggregator.class.getName()));
    assertThat(avgAggResult.getLuceneDescription(),equalTo("avg"));
    assertThat(avgAggResult.getTime(),greaterThan(0L));
    Map<String,Long> avgBreakdown=tagsAggResult.getTimeBreakdown();
    assertThat(avgBreakdown,notNullValue());
    assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()),notNullValue());
    assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()),greaterThan(0L));
    assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()),notNullValue());
    assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()),greaterThan(0L));
    assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()),notNullValue());
    assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()),greaterThan(0L));
    assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()),notNullValue());
    assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()),equalTo(0L));
    assertThat(avgAggResult.getProfiledChildren().size(),equalTo(0));
    ProfileResult maxAggResult=tagsAggResult.getProfiledChildren().get(1);
    assertThat(maxAggResult,notNullValue());
    assertThat(maxAggResult.getQueryName(),equalTo(MaxAggregator.class.getName()));
    assertThat(maxAggResult.getLuceneDescription(),equalTo("max"));
    assertThat(maxAggResult.getTime(),greaterThan(0L));
    Map<String,Long> maxBreakdown=tagsAggResult.getTimeBreakdown();
    assertThat(maxBreakdown,notNullValue());
    assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()),notNullValue());
    assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()),greaterThan(0L));
    assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()),notNullValue());
    assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()),greaterThan(0L));
    assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()),notNullValue());
    assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()),greaterThan(0L));
    assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()),notNullValue());
    assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()),equalTo(0L));
    assertThat(maxAggResult.getProfiledChildren().size(),equalTo(0));
    ProfileResult stringsAggResult=histoAggResult.getProfiledChildren().get(1);
    assertThat(stringsAggResult,notNullValue());
    assertThat(stringsAggResult.getQueryName(),equalTo(GlobalOrdinalsStringTermsAggregator.WithHash.class.getName()));
    assertThat(stringsAggResult.getLuceneDescription(),equalTo("strings"));
    assertThat(stringsAggResult.getTime(),greaterThan(0L));
    Map<String,Long> stringsBreakdown=stringsAggResult.getTimeBreakdown();
    assertThat(stringsBreakdown,notNullValue());
    assertThat(stringsBreakdown.get(AggregationTimingType.INITIALIZE.toString()),notNullValue());
    assertThat(stringsBreakdown.get(AggregationTimingType.INITIALIZE.toString()),greaterThan(0L));
    assertThat(stringsBreakdown.get(AggregationTimingType.COLLECT.toString()),notNullValue());
    assertThat(stringsBreakdown.get(AggregationTimingType.COLLECT.toString()),greaterThan(0L));
    assertThat(stringsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()),notNullValue());
    assertThat(stringsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()),greaterThan(0L));
    assertThat(stringsBreakdown.get(AggregationTimingType.REDUCE.toString()),notNullValue());
    assertThat(stringsBreakdown.get(AggregationTimingType.REDUCE.toString()),equalTo(0L));
    assertThat(stringsAggResult.getProfiledChildren().size(),equalTo(3));
    avgAggResult=stringsAggResult.getProfiledChildren().get(0);
    assertThat(avgAggResult,notNullValue());
    assertThat(avgAggResult.getQueryName(),equalTo(AvgAggregator.class.getName()));
    assertThat(avgAggResult.getLuceneDescription(),equalTo("avg"));
    assertThat(avgAggResult.getTime(),greaterThan(0L));
    avgBreakdown=stringsAggResult.getTimeBreakdown();
    assertThat(avgBreakdown,notNullValue());
    assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()),notNullValue());
    assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()),greaterThan(0L));
    assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()),notNullValue());
    assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()),greaterThan(0L));
    assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()),notNullValue());
    assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()),greaterThan(0L));
    assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()),notNullValue());
    assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()),equalTo(0L));
    assertThat(avgAggResult.getProfiledChildren().size(),equalTo(0));
    maxAggResult=stringsAggResult.getProfiledChildren().get(1);
    assertThat(maxAggResult,notNullValue());
    assertThat(maxAggResult.getQueryName(),equalTo(MaxAggregator.class.getName()));
    assertThat(maxAggResult.getLuceneDescription(),equalTo("max"));
    assertThat(maxAggResult.getTime(),greaterThan(0L));
    maxBreakdown=stringsAggResult.getTimeBreakdown();
    assertThat(maxBreakdown,notNullValue());
    assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()),notNullValue());
    assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()),greaterThan(0L));
    assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()),notNullValue());
    assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()),greaterThan(0L));
    assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()),notNullValue());
    assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()),greaterThan(0L));
    assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()),notNullValue());
    assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()),equalTo(0L));
    assertThat(maxAggResult.getProfiledChildren().size(),equalTo(0));
    tagsAggResult=stringsAggResult.getProfiledChildren().get(2);
    assertThat(tagsAggResult,notNullValue());
    assertThat(tagsAggResult.getQueryName(),equalTo(GlobalOrdinalsStringTermsAggregator.WithHash.class.getName()));
    assertThat(tagsAggResult.getLuceneDescription(),equalTo("tags"));
    assertThat(tagsAggResult.getTime(),greaterThan(0L));
    tagsBreakdown=tagsAggResult.getTimeBreakdown();
    assertThat(tagsBreakdown,notNullValue());
    assertThat(tagsBreakdown.get(AggregationTimingType.INITIALIZE.toString()),notNullValue());
    assertThat(tagsBreakdown.get(AggregationTimingType.INITIALIZE.toString()),greaterThan(0L));
    assertThat(tagsBreakdown.get(AggregationTimingType.COLLECT.toString()),notNullValue());
    assertThat(tagsBreakdown.get(AggregationTimingType.COLLECT.toString()),greaterThan(0L));
    assertThat(tagsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()),notNullValue());
    assertThat(tagsBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()),greaterThan(0L));
    assertThat(tagsBreakdown.get(AggregationTimingType.REDUCE.toString()),notNullValue());
    assertThat(tagsBreakdown.get(AggregationTimingType.REDUCE.toString()),equalTo(0L));
    assertThat(tagsAggResult.getProfiledChildren().size(),equalTo(2));
    avgAggResult=tagsAggResult.getProfiledChildren().get(0);
    assertThat(avgAggResult,notNullValue());
    assertThat(avgAggResult.getQueryName(),equalTo(AvgAggregator.class.getName()));
    assertThat(avgAggResult.getLuceneDescription(),equalTo("avg"));
    assertThat(avgAggResult.getTime(),greaterThan(0L));
    avgBreakdown=tagsAggResult.getTimeBreakdown();
    assertThat(avgBreakdown,notNullValue());
    assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()),notNullValue());
    assertThat(avgBreakdown.get(AggregationTimingType.INITIALIZE.toString()),greaterThan(0L));
    assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()),notNullValue());
    assertThat(avgBreakdown.get(AggregationTimingType.COLLECT.toString()),greaterThan(0L));
    assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()),notNullValue());
    assertThat(avgBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()),greaterThan(0L));
    assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()),notNullValue());
    assertThat(avgBreakdown.get(AggregationTimingType.REDUCE.toString()),equalTo(0L));
    assertThat(avgAggResult.getProfiledChildren().size(),equalTo(0));
    maxAggResult=tagsAggResult.getProfiledChildren().get(1);
    assertThat(maxAggResult,notNullValue());
    assertThat(maxAggResult.getQueryName(),equalTo(MaxAggregator.class.getName()));
    assertThat(maxAggResult.getLuceneDescription(),equalTo("max"));
    assertThat(maxAggResult.getTime(),greaterThan(0L));
    maxBreakdown=tagsAggResult.getTimeBreakdown();
    assertThat(maxBreakdown,notNullValue());
    assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()),notNullValue());
    assertThat(maxBreakdown.get(AggregationTimingType.INITIALIZE.toString()),greaterThan(0L));
    assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()),notNullValue());
    assertThat(maxBreakdown.get(AggregationTimingType.COLLECT.toString()),greaterThan(0L));
    assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()),notNullValue());
    assertThat(maxBreakdown.get(AggregationTimingType.BUILD_AGGREGATION.toString()),greaterThan(0L));
    assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()),notNullValue());
    assertThat(maxBreakdown.get(AggregationTimingType.REDUCE.toString()),equalTo(0L));
    assertThat(maxAggResult.getProfiledChildren().size(),equalTo(0));
  }
}
