{
  Settings settings=Settings.builder().put(requiredSettings()).put("client.transport.nodes_sampler_interval","1s").put("name","transport_client_sniff_mode").put(ClusterName.CLUSTER_NAME_SETTING.getKey(),cluster().getClusterName()).put("client.transport.sniff",true).build();
  CompositeTestCluster compositeTestCluster=backwardsCluster();
  TransportAddress transportAddress=compositeTestCluster.externalTransportAddress();
  try (TransportClient client=TransportClient.builder().settings(settings).build()){
    client.addTransportAddress(transportAddress);
    assertAcked(client.admin().indices().prepareCreate("test"));
    ensureYellow("test");
    int numDocs=iterations(10,100);
    IndexRequestBuilder[] indexRequestBuilders=new IndexRequestBuilder[numDocs];
    for (int i=0; i < numDocs; i++) {
      String id="id" + i;
      indexRequestBuilders[i]=client.prepareIndex("test","test",id).setSource("field","value" + i);
    }
    indexRandom(false,indexRequestBuilders);
    String randomId="id" + randomInt(numDocs - 1);
    GetResponse getResponse=client.prepareGet("test","test",randomId).get();
    assertThat(getResponse.isExists(),equalTo(true));
    refresh();
    SearchResponse searchResponse=client.prepareSearch("test").get();
    assertThat(searchResponse.getHits().totalHits(),equalTo((long)numDocs));
    int randomDocId=randomInt(numDocs - 1);
    String fieldValue="value" + randomDocId;
    String id="id" + randomDocId;
    searchResponse=client.prepareSearch("test").setQuery(QueryBuilders.termQuery("field",fieldValue)).get();
    assertSearchHits(searchResponse,id);
  }
 }
