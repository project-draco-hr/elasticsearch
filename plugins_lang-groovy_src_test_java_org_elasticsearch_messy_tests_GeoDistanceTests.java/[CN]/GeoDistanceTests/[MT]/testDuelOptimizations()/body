{
  Version version=VersionUtils.randomVersionBetween(random(),Version.V_2_0_0,Version.CURRENT);
  Settings settings=Settings.settingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED,version).build();
  if (version.before(Version.V_2_2_0)) {
    assertAcked(prepareCreate("index").setSettings(settings).addMapping("type","location","type=geo_point,lat_lon=true"));
  }
 else {
    assertAcked(prepareCreate("index").setSettings(settings).addMapping("type","location","type=geo_point"));
  }
  final int numDocs=scaledRandomIntBetween(3000,10000);
  List<IndexRequestBuilder> docs=new ArrayList<>();
  for (int i=0; i < numDocs; ++i) {
    docs.add(client().prepareIndex("index","type").setSource(jsonBuilder().startObject().startObject("location").field("lat",randomLat()).field("lon",randomLon()).endObject().endObject()));
  }
  indexRandom(true,docs);
  ensureSearchable();
  for (int i=0; i < 10; ++i) {
    final double originLat=randomLat();
    final double originLon=randomLon();
    final String distance=DistanceUnit.KILOMETERS.toString(randomInt(10000));
    for (    GeoDistance geoDistance : Arrays.asList(GeoDistance.ARC,GeoDistance.SLOPPY_ARC)) {
      logger.info("Now testing GeoDistance={}, distance={}, origin=({}, {})",geoDistance,distance,originLat,originLon);
      GeoDistanceQueryBuilder qb=QueryBuilders.geoDistanceQuery("location").point(originLat,originLon).distance(distance).geoDistance(geoDistance);
      long matches;
      if (version.before(Version.V_2_2_0)) {
        for (        String optimizeBbox : Arrays.asList("none","memory","indexed")) {
          qb.optimizeBbox(optimizeBbox);
          SearchResponse resp=client().prepareSearch("index").setSize(0).setQuery(QueryBuilders.constantScoreQuery(qb)).execute().actionGet();
          matches=assertDuelOptimization(resp);
          logger.info("{} -> {} hits",optimizeBbox,matches);
        }
      }
 else {
        SearchResponse resp=client().prepareSearch("index").setSize(0).setQuery(QueryBuilders.constantScoreQuery(qb)).execute().actionGet();
        matches=assertDuelOptimization(resp);
        logger.info("{} hits",matches);
      }
    }
  }
}
