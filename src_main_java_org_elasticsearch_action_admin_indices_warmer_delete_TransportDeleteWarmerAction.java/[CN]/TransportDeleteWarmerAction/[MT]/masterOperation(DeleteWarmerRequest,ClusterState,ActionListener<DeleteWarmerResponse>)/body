{
  clusterService.submitStateUpdateTask("delete_warmer [" + request.name() + "]",new AckedClusterStateUpdateTask(){
    @Override public boolean mustAck(    DiscoveryNode discoveryNode){
      return true;
    }
    @Override public void onAllNodesAcked(    @Nullable Throwable t){
      listener.onResponse(new DeleteWarmerResponse(true));
    }
    @Override public void onAckTimeout(){
      listener.onResponse(new DeleteWarmerResponse(false));
    }
    @Override public TimeValue ackTimeout(){
      return request.timeout();
    }
    @Override public TimeValue timeout(){
      return request.masterNodeTimeout();
    }
    @Override public void onFailure(    String source,    Throwable t){
      logger.debug("failed to delete warmer [{}] on indices [{}]",t,request.name(),request.indices());
      listener.onFailure(t);
    }
    @Override public ClusterState execute(    ClusterState currentState){
      MetaData.Builder mdBuilder=MetaData.builder(currentState.metaData());
      boolean globalFoundAtLeastOne=false;
      for (      String index : request.indices()) {
        IndexMetaData indexMetaData=currentState.metaData().index(index);
        if (indexMetaData == null) {
          throw new IndexMissingException(new Index(index));
        }
        IndexWarmersMetaData warmers=indexMetaData.custom(IndexWarmersMetaData.TYPE);
        if (warmers != null) {
          List<IndexWarmersMetaData.Entry> entries=Lists.newArrayList();
          for (          IndexWarmersMetaData.Entry entry : warmers.entries()) {
            if (request.name() == null || Regex.simpleMatch(request.name(),entry.name())) {
              globalFoundAtLeastOne=true;
            }
 else {
              entries.add(entry);
            }
          }
          if (entries.size() != warmers.entries().size()) {
            warmers=new IndexWarmersMetaData(entries.toArray(new IndexWarmersMetaData.Entry[entries.size()]));
            IndexMetaData.Builder indexBuilder=IndexMetaData.newIndexMetaDataBuilder(indexMetaData).putCustom(IndexWarmersMetaData.TYPE,warmers);
            mdBuilder.put(indexBuilder);
          }
        }
      }
      if (!globalFoundAtLeastOne) {
        if (request.name() == null) {
          return currentState;
        }
        throw new IndexWarmerMissingException(request.name());
      }
      if (logger.isInfoEnabled()) {
        for (        String index : request.indices()) {
          IndexMetaData indexMetaData=currentState.metaData().index(index);
          if (indexMetaData == null) {
            throw new IndexMissingException(new Index(index));
          }
          IndexWarmersMetaData warmers=indexMetaData.custom(IndexWarmersMetaData.TYPE);
          if (warmers != null) {
            for (            IndexWarmersMetaData.Entry entry : warmers.entries()) {
              if (Regex.simpleMatch(request.name(),entry.name())) {
                logger.info("[{}] delete warmer [{}]",index,entry.name());
              }
            }
          }
        }
      }
      return ClusterState.builder().state(currentState).metaData(mdBuilder).build();
    }
    @Override public void clusterStateProcessed(    String source,    ClusterState oldState,    ClusterState newState){
    }
  }
);
}
