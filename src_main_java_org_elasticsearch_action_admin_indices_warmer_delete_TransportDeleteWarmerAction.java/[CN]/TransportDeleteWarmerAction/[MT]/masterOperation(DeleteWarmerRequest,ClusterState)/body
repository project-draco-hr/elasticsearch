{
  final AtomicReference<Throwable> failureRef=new AtomicReference<Throwable>();
  final CountDownLatch latch=new CountDownLatch(1);
  clusterService.submitStateUpdateTask("delete_warmer [" + request.name() + "]",new TimeoutClusterStateUpdateTask(){
    @Override public TimeValue timeout(){
      return request.masterNodeTimeout();
    }
    @Override public void onTimeout(    TimeValue timeout,    String source){
      failureRef.set(new ProcessClusterEventTimeoutException(timeout,source));
      latch.countDown();
    }
    @Override public ClusterState execute(    ClusterState currentState){
      try {
        MetaData.Builder mdBuilder=MetaData.builder().metaData(currentState.metaData());
        boolean globalFoundAtLeastOne=false;
        for (        String index : request.indices()) {
          IndexMetaData indexMetaData=currentState.metaData().index(index);
          if (indexMetaData == null) {
            throw new IndexMissingException(new Index(index));
          }
          IndexWarmersMetaData warmers=indexMetaData.custom(IndexWarmersMetaData.TYPE);
          if (warmers != null) {
            List<IndexWarmersMetaData.Entry> entries=Lists.newArrayList();
            for (            IndexWarmersMetaData.Entry entry : warmers.entries()) {
              if (request.name() == null || Regex.simpleMatch(request.name(),entry.name())) {
                globalFoundAtLeastOne=true;
              }
 else {
                entries.add(entry);
              }
            }
            if (entries.size() != warmers.entries().size()) {
              warmers=new IndexWarmersMetaData(entries.toArray(new IndexWarmersMetaData.Entry[entries.size()]));
              IndexMetaData.Builder indexBuilder=IndexMetaData.newIndexMetaDataBuilder(indexMetaData).putCustom(IndexWarmersMetaData.TYPE,warmers);
              mdBuilder.put(indexBuilder);
            }
          }
        }
        if (!globalFoundAtLeastOne) {
          if (request.name() == null) {
            return currentState;
          }
          throw new IndexWarmerMissingException(request.name());
        }
        if (logger.isInfoEnabled()) {
          for (          String index : request.indices()) {
            IndexMetaData indexMetaData=currentState.metaData().index(index);
            if (indexMetaData == null) {
              throw new IndexMissingException(new Index(index));
            }
            IndexWarmersMetaData warmers=indexMetaData.custom(IndexWarmersMetaData.TYPE);
            if (warmers != null) {
              for (              IndexWarmersMetaData.Entry entry : warmers.entries()) {
                if (Regex.simpleMatch(request.name(),entry.name())) {
                  logger.info("[{}] delete warmer [{}]",index,entry.name());
                }
              }
            }
          }
        }
        return ClusterState.builder().state(currentState).metaData(mdBuilder).build();
      }
 catch (      Exception ex) {
        failureRef.set(ex);
        latch.countDown();
        return currentState;
      }
    }
    @Override public void clusterStateProcessed(    ClusterState clusterState){
      latch.countDown();
    }
  }
);
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
    failureRef.set(e);
  }
  if (failureRef.get() != null) {
    if (failureRef.get() instanceof ElasticSearchException) {
      throw (ElasticSearchException)failureRef.get();
    }
 else {
      throw new ElasticSearchException(failureRef.get().getMessage(),failureRef.get());
    }
  }
  return new DeleteWarmerResponse(true);
}
