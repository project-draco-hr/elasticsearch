{
  AllocationService strategy=createAllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries",10).put("cluster.routing.allocation.node_initial_primaries_recoveries",10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),"always").put("cluster.routing.allocation.cluster_concurrent_rebalance",-1).build());
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(3).numberOfReplicas(1)).put(IndexMetaData.builder("test1").settings(settings(Version.CURRENT)).numberOfShards(3).numberOfReplicas(1)).build();
  RoutingTable initialRoutingTable=RoutingTable.builder().addAsNew(metaData.index("test")).addAsNew(metaData.index("test1")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();
  assertThat(clusterState.routingTable().index("test").shards().size(),equalTo(3));
  for (int i=0; i < clusterState.routingTable().index("test").shards().size(); i++) {
    assertThat(clusterState.routingTable().index("test").shard(i).size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test").shard(i).shards().size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test").shard(i).shards().get(0).state(),equalTo(UNASSIGNED));
    assertThat(clusterState.routingTable().index("test").shard(i).shards().get(1).state(),equalTo(UNASSIGNED));
    assertThat(clusterState.routingTable().index("test").shard(i).shards().get(0).currentNodeId(),nullValue());
    assertThat(clusterState.routingTable().index("test").shard(i).shards().get(1).currentNodeId(),nullValue());
  }
  assertThat(clusterState.routingTable().index("test1").shards().size(),equalTo(3));
  for (int i=0; i < clusterState.routingTable().index("test1").shards().size(); i++) {
    assertThat(clusterState.routingTable().index("test1").shard(i).size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test1").shard(i).shards().size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test1").shard(i).shards().get(0).state(),equalTo(UNASSIGNED));
    assertThat(clusterState.routingTable().index("test1").shard(i).shards().get(1).state(),equalTo(UNASSIGNED));
    assertThat(clusterState.routingTable().index("test1").shard(i).shards().get(0).currentNodeId(),nullValue());
    assertThat(clusterState.routingTable().index("test1").shard(i).shards().get(1).currentNodeId(),nullValue());
  }
  logger.info("Adding three node and performing rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2")).add(newNode("node3"))).build();
  RoutingAllocation.Result routingResult=strategy.reroute(clusterState,"reroute");
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  assertTrue(routingResult.changed());
  assertThat(clusterState.routingTable().index("test").shards().size(),equalTo(3));
  for (int i=0; i < clusterState.routingTable().index("test").shards().size(); i++) {
    assertThat(clusterState.routingTable().index("test").shard(i).size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test").shard(i).shards().size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test").shard(i).primaryShard().state(),equalTo(INITIALIZING));
    assertThat(clusterState.routingTable().index("test").shard(i).replicaShards().size(),equalTo(1));
    assertThat(clusterState.routingTable().index("test").shard(i).replicaShards().get(0).state(),equalTo(UNASSIGNED));
    assertThat(clusterState.routingTable().index("test").shard(i).replicaShards().get(0).currentNodeId(),nullValue());
  }
  logger.info("Another round of rebalancing");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())).build();
  routingResult=strategy.reroute(clusterState,"reroute");
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  assertFalse(routingResult.changed());
  RoutingNodes routingNodes=clusterState.getRoutingNodes();
  routingResult=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  assertTrue(routingResult.changed());
  assertThat(clusterState.routingTable().index("test").shards().size(),equalTo(3));
  for (int i=0; i < clusterState.routingTable().index("test").shards().size(); i++) {
    assertThat(clusterState.routingTable().index("test").shard(i).size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test").shard(i).shards().size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test").shard(i).primaryShard().state(),equalTo(STARTED));
    assertThat(clusterState.routingTable().index("test").shard(i).replicaShards().size(),equalTo(1));
    assertThat(clusterState.routingTable().index("test").shard(i).replicaShards().get(0).state(),equalTo(INITIALIZING));
  }
  logger.info("Reroute, nothing should change");
  routingResult=strategy.reroute(clusterState,"reroute");
  assertFalse(routingResult.changed());
  logger.info("Start the more shards");
  routingNodes=clusterState.getRoutingNodes();
  routingResult=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  routingNodes=clusterState.getRoutingNodes();
  assertTrue(routingResult.changed());
  assertThat(clusterState.routingTable().index("test").shards().size(),equalTo(3));
  for (int i=0; i < clusterState.routingTable().index("test").shards().size(); i++) {
    assertThat(clusterState.routingTable().index("test").shard(i).size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test").shard(i).shards().size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test").shard(i).primaryShard().state(),equalTo(STARTED));
    assertThat(clusterState.routingTable().index("test").shard(i).replicaShards().size(),equalTo(1));
    assertThat(clusterState.routingTable().index("test").shard(i).replicaShards().get(0).state(),equalTo(STARTED));
  }
  assertThat(clusterState.routingTable().index("test1").shards().size(),equalTo(3));
  for (int i=0; i < clusterState.routingTable().index("test1").shards().size(); i++) {
    assertThat(clusterState.routingTable().index("test1").shard(i).size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test1").shard(i).shards().size(),equalTo(2));
    assertThat(clusterState.routingTable().index("test1").shard(i).primaryShard().state(),equalTo(STARTED));
    assertThat(clusterState.routingTable().index("test1").shard(i).replicaShards().size(),equalTo(1));
    assertThat(clusterState.routingTable().index("test1").shard(i).replicaShards().get(0).state(),equalTo(STARTED));
  }
  assertThat(routingNodes.node("node1").numberOfShardsWithState(STARTED),equalTo(4));
  assertThat(routingNodes.node("node2").numberOfShardsWithState(STARTED),equalTo(4));
  assertThat(routingNodes.node("node3").numberOfShardsWithState(STARTED),equalTo(4));
  assertThat(routingNodes.node("node1").shardsWithState("test",STARTED).size(),equalTo(2));
  assertThat(routingNodes.node("node2").shardsWithState("test",STARTED).size(),equalTo(2));
  assertThat(routingNodes.node("node3").shardsWithState("test",STARTED).size(),equalTo(2));
  assertThat(routingNodes.node("node1").shardsWithState("test1",STARTED).size(),equalTo(2));
  assertThat(routingNodes.node("node2").shardsWithState("test1",STARTED).size(),equalTo(2));
  assertThat(routingNodes.node("node3").shardsWithState("test1",STARTED).size(),equalTo(2));
}
