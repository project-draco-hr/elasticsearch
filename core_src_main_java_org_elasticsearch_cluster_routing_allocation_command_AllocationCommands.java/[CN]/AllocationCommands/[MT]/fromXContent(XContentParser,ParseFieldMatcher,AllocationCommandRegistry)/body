{
  AllocationCommands commands=new AllocationCommands();
  XContentParser.Token token=parser.currentToken();
  if (token == null) {
    throw new ElasticsearchParseException("No commands");
  }
  if (token == XContentParser.Token.FIELD_NAME) {
    if (!parser.currentName().equals("commands")) {
      throw new ElasticsearchParseException("expected field name to be named [commands], got [{}] instead",parser.currentName());
    }
    if (!parser.currentName().equals("commands")) {
      throw new ElasticsearchParseException("expected field name to be named [commands], got [{}] instead",parser.currentName());
    }
    token=parser.nextToken();
    if (token != XContentParser.Token.START_ARRAY) {
      throw new ElasticsearchParseException("commands should follow with an array element");
    }
  }
 else   if (token == XContentParser.Token.START_ARRAY) {
  }
 else {
    throw new ElasticsearchParseException("expected either field name [commands], or start array, got [{}] instead",token);
  }
  while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
    if (token == XContentParser.Token.START_OBJECT) {
      token=parser.nextToken();
      String commandName=parser.currentName();
      token=parser.nextToken();
      commands.add(registry.lookup(commandName,parser,parseFieldMatcher).fromXContent(parser));
      if (parser.nextToken() != XContentParser.Token.END_OBJECT) {
        throw new ElasticsearchParseException("allocation command is malformed, done parsing a command, but didn't get END_OBJECT, got [{}] instead",token);
      }
    }
 else {
      throw new ElasticsearchParseException("allocation command is malformed, got [{}] instead",token);
    }
  }
  return commands;
}
