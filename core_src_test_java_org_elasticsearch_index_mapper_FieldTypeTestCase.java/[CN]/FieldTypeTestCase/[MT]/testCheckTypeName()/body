{
  final MappedFieldType fieldType=createNamedDefaultFieldType("foo");
  List<String> conflicts=new ArrayList<>();
  fieldType.checkTypeName(fieldType,conflicts);
  assertTrue(conflicts.toString(),conflicts.isEmpty());
  MappedFieldType bogus=new MappedFieldType(){
    @Override public MappedFieldType clone(){
      return null;
    }
    @Override public String typeName(){
      return fieldType.typeName();
    }
  }
;
  try {
    fieldType.checkTypeName(bogus,conflicts);
    fail("expected bad types exception");
  }
 catch (  IllegalStateException e) {
    assertTrue(e.getMessage().contains("Type names equal"));
  }
  assertTrue(conflicts.toString(),conflicts.isEmpty());
  MappedFieldType other=new MappedFieldType(){
    @Override public MappedFieldType clone(){
      return null;
    }
    @Override public String typeName(){
      return "othertype";
    }
  }
;
  fieldType.checkTypeName(other,conflicts);
  assertFalse(conflicts.isEmpty());
  assertTrue(conflicts.get(0).contains("cannot be changed from type"));
  assertEquals(1,conflicts.size());
}
