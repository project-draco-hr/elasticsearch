{
  final MappedFieldType fieldType=createNamedDefaultFieldType();
  List<String> conflicts=new ArrayList<>();
  fieldType.checkCompatibility(fieldType,conflicts,random().nextBoolean());
  assertTrue(conflicts.toString(),conflicts.isEmpty());
  MappedFieldType bogus=new MappedFieldType(){
    @Override public MappedFieldType clone(){
      return null;
    }
    @Override public String typeName(){
      return fieldType.typeName();
    }
  }
;
  try {
    fieldType.checkCompatibility(bogus,conflicts,random().nextBoolean());
    fail("expected bad types exception");
  }
 catch (  IllegalStateException e) {
    assertTrue(e.getMessage().contains("Type names equal"));
  }
  assertTrue(conflicts.toString(),conflicts.isEmpty());
  MappedFieldType other=new MappedFieldType(){
    @Override public MappedFieldType clone(){
      return null;
    }
    @Override public String typeName(){
      return "othertype";
    }
  }
;
  try {
    fieldType.checkCompatibility(other,conflicts,random().nextBoolean());
    fail();
  }
 catch (  IllegalArgumentException e) {
    assertTrue(e.getMessage(),e.getMessage().contains("cannot be changed from type"));
  }
  assertTrue(conflicts.toString(),conflicts.isEmpty());
}
