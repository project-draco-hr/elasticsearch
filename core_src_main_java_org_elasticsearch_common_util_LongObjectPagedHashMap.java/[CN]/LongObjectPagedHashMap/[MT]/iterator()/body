{
  return new Iterator<Cursor<T>>(){
    boolean cached;
    final Cursor<T> cursor;
{
      cursor=new Cursor<>();
      cursor.index=-1;
      cached=false;
    }
    @Override public boolean hasNext(){
      if (!cached) {
        while (true) {
          ++cursor.index;
          if (cursor.index >= capacity()) {
            break;
          }
 else           if (used(cursor.index)) {
            cursor.key=keys.get(cursor.index);
            cursor.value=values.get(cursor.index);
            break;
          }
        }
        cached=true;
      }
      return cursor.index < capacity();
    }
    @Override public Cursor<T> next(){
      if (!hasNext()) {
        throw new NoSuchElementException();
      }
      cached=false;
      return cursor;
    }
    @Override public final void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
