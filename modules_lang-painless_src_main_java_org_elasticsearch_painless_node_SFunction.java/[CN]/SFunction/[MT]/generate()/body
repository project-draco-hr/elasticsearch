{
  try {
    rtnType=Definition.getType(rtnTypeStr);
  }
 catch (  IllegalArgumentException exception) {
    throw createError(new IllegalArgumentException("Illegal return type [" + rtnTypeStr + "] for function ["+ name+ "]."));
  }
  if (paramTypeStrs.size() != paramNameStrs.size()) {
    throw createError(new IllegalStateException("Illegal tree structure."));
  }
  Class<?>[] paramClasses=new Class<?>[this.paramTypeStrs.size()];
  List<Type> paramTypes=new ArrayList<>();
  for (int param=0; param < this.paramTypeStrs.size(); ++param) {
    try {
      Type paramType=Definition.getType(this.paramTypeStrs.get(param));
      paramClasses[param]=paramType.clazz;
      paramTypes.add(paramType);
      parameters.add(new Parameter(location,paramNameStrs.get(param),paramType));
    }
 catch (    IllegalArgumentException exception) {
      throw createError(new IllegalArgumentException("Illegal parameter type [" + this.paramTypeStrs.get(param) + "] for function ["+ name+ "]."));
    }
  }
  org.objectweb.asm.commons.Method method=new org.objectweb.asm.commons.Method(name,MethodType.methodType(rtnType.clazz,paramClasses).toMethodDescriptorString());
  this.method=new Method(name,null,rtnType,paramTypes,method,Modifier.STATIC | Modifier.PRIVATE,null);
}
