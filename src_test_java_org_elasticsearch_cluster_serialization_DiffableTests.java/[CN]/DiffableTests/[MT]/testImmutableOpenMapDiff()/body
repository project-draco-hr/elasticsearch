{
  ImmutableOpenMap.Builder<String,TestDiffable> builder=ImmutableOpenMap.builder();
  builder.put("foo",new TestDiffable("1"));
  builder.put("bar",new TestDiffable("2"));
  builder.put("baz",new TestDiffable("3"));
  ImmutableOpenMap<String,TestDiffable> before=builder.build();
  builder=ImmutableOpenMap.builder(before);
  builder.remove("bar");
  builder.put("baz",new TestDiffable("4"));
  builder.put("new",new TestDiffable("5"));
  ImmutableOpenMap<String,TestDiffable> after=builder.build();
  Diff diff=DiffableUtils.diff(before,after);
  BytesStreamOutput out=new BytesStreamOutput();
  diff.writeTo(out);
  BytesStreamInput in=new BytesStreamInput(out.bytes());
  ImmutableOpenMap<String,TestDiffable> serialized=DiffableUtils.readImmutableOpenMapDiff(in,new KeyedReader<TestDiffable>(){
    @Override public TestDiffable readFrom(    StreamInput in,    String key) throws IOException {
      return new TestDiffable(in.readString());
    }
    @Override public Diff<TestDiffable> readDiffFrom(    StreamInput in,    String key) throws IOException {
      return AbstractDiffable.readDiffFrom(new StreamableReader<TestDiffable>(){
        @Override public TestDiffable readFrom(        StreamInput in) throws IOException {
          return new TestDiffable(in.readString());
        }
      }
,in);
    }
  }
).apply(before);
  assertThat(serialized.size(),equalTo(3));
  assertThat(serialized.get("foo").value(),equalTo("1"));
  assertThat(serialized.get("baz").value(),equalTo("4"));
  assertThat(serialized.get("new").value(),equalTo("5"));
}
