{
  super(settings);
  this.threadPool=threadPool;
  this.transportService=transportService;
  this.indicesService=indicesService;
  int concurrentStreams=componentSettings.getAsInt("concurrent_streams",5);
  this.concurrentStreamPool=DynamicExecutors.newScalingThreadPool(1,concurrentStreams,TimeValue.timeValueSeconds(5).millis(),EsExecutors.daemonThreadFactory(settings,"[recovery_stream]"));
  this.fileChunkSize=componentSettings.getAsBytesSize("file_chunk_size",new ByteSizeValue(100,ByteSizeUnit.KB));
  this.translogBatchSize=componentSettings.getAsInt("translog_batch_size",100);
  this.compress=componentSettings.getAsBoolean("compress",true);
  logger.debug("using concurrent_streams [{}], file_chunk_size [{}], translog_batch_size [{}], and compress [{}]",concurrentStreams,fileChunkSize,translogBatchSize,compress);
  transportService.registerHandler(Actions.START_RECOVERY,new StartRecoveryTransportRequestHandler());
}
