{
  SearchResponse response=client().prepareSearch("idx").addAggregation(dateHistogram("histo").field("date").dateHistogramInterval(DateHistogramInterval.MONTH).minDocCount(0).subAggregation(sum("sum").field("value")).subAggregation(derivative("deriv","sum"))).execute().actionGet();
  assertSearchResponse(response);
  Histogram histo=response.getAggregations().get("histo");
  assertThat(histo,notNullValue());
  assertThat(histo.getName(),equalTo("histo"));
  List<? extends Bucket> buckets=histo.getBuckets();
  assertThat(buckets.size(),equalTo(3));
  Object[] propertiesKeys=(Object[])histo.getProperty("_key");
  Object[] propertiesDocCounts=(Object[])histo.getProperty("_count");
  Object[] propertiesCounts=(Object[])histo.getProperty("sum.value");
  DateTime key=new DateTime(2012,1,1,0,0,DateTimeZone.UTC);
  Histogram.Bucket bucket=buckets.get(0);
  assertThat(bucket,notNullValue());
  assertThat((DateTime)bucket.getKey(),equalTo(key));
  assertThat(bucket.getDocCount(),equalTo(1L));
  assertThat(bucket.getAggregations().asList().isEmpty(),is(false));
  Sum sum=bucket.getAggregations().get("sum");
  assertThat(sum,notNullValue());
  assertThat(sum.getValue(),equalTo(1.0));
  SimpleValue deriv=bucket.getAggregations().get("deriv");
  assertThat(deriv,nullValue());
  assertThat((DateTime)propertiesKeys[0],equalTo(key));
  assertThat((long)propertiesDocCounts[0],equalTo(1L));
  assertThat((double)propertiesCounts[0],equalTo(1.0));
  key=new DateTime(2012,2,1,0,0,DateTimeZone.UTC);
  bucket=buckets.get(1);
  assertThat(bucket,notNullValue());
  assertThat((DateTime)bucket.getKey(),equalTo(key));
  assertThat(bucket.getDocCount(),equalTo(2L));
  assertThat(bucket.getAggregations().asList().isEmpty(),is(false));
  sum=bucket.getAggregations().get("sum");
  assertThat(sum,notNullValue());
  assertThat(sum.getValue(),equalTo(5.0));
  deriv=bucket.getAggregations().get("deriv");
  assertThat(deriv,notNullValue());
  assertThat(deriv.value(),equalTo(4.0));
  assertThat((double)bucket.getProperty("histo",AggregationPath.parse("deriv.value").getPathElementsAsStringList()),equalTo(4.0));
  assertThat((DateTime)propertiesKeys[1],equalTo(key));
  assertThat((long)propertiesDocCounts[1],equalTo(2L));
  assertThat((double)propertiesCounts[1],equalTo(5.0));
  key=new DateTime(2012,3,1,0,0,DateTimeZone.UTC);
  bucket=buckets.get(2);
  assertThat(bucket,notNullValue());
  assertThat((DateTime)bucket.getKey(),equalTo(key));
  assertThat(bucket.getDocCount(),equalTo(3L));
  assertThat(bucket.getAggregations().asList().isEmpty(),is(false));
  sum=bucket.getAggregations().get("sum");
  assertThat(sum,notNullValue());
  assertThat(sum.getValue(),equalTo(15.0));
  deriv=bucket.getAggregations().get("deriv");
  assertThat(deriv,notNullValue());
  assertThat(deriv.value(),equalTo(10.0));
  assertThat((double)bucket.getProperty("histo",AggregationPath.parse("deriv.value").getPathElementsAsStringList()),equalTo(10.0));
  assertThat((DateTime)propertiesKeys[2],equalTo(key));
  assertThat((long)propertiesDocCounts[2],equalTo(3L));
  assertThat((double)propertiesCounts[2],equalTo(15.0));
}
