{
  this.logger=logger;
  this.queries=context.percolateQueries();
  this.searcher=context.docSearcher();
  final MappedFieldType uidMapper=context.mapperService().smartNameFieldType(UidFieldMapper.NAME);
  this.uidFieldData=context.fieldData().getForField(uidMapper);
  this.isNestedDoc=isNestedDoc;
  List<Aggregator> aggregatorCollectors=new ArrayList<>();
  if (context.aggregations() != null) {
    AggregationContext aggregationContext=new AggregationContext(context);
    context.aggregations().aggregationContext(aggregationContext);
    context.aggregations().factories().init(aggregationContext);
    Aggregator[] aggregators=context.aggregations().factories().createTopLevelAggregators();
    for (int i=0; i < aggregators.length; i++) {
      if (!(aggregators[i] instanceof GlobalAggregator)) {
        Aggregator aggregator=aggregators[i];
        aggregatorCollectors.add(aggregator);
      }
    }
    context.aggregations().aggregators(aggregators);
  }
  aggregatorCollector=BucketCollector.wrap(aggregatorCollectors);
  aggregatorCollector.preCollection();
}
