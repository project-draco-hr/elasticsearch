{
  String defaultType=DiscoveryNode.localNode(settings) ? "local" : "zen";
  String discoveryType=settings.get(DISCOVERY_TYPE_KEY,defaultType);
  Class<? extends Discovery> discoveryClass=discoveryTypes.get(discoveryType);
  if (discoveryClass == null) {
    throw new IllegalArgumentException("Unknown Discovery type [" + discoveryType + "]");
  }
  if (discoveryType.equals("local") == false) {
    String masterServiceTypeKey=settings.get(ZEN_MASTER_SERVICE_TYPE_KEY,"zen");
    final Class<? extends ElectMasterService> masterService=masterServiceType.get(masterServiceTypeKey);
    if (masterService == null) {
      throw new IllegalArgumentException("Unknown master service type [" + masterServiceTypeKey + "]");
    }
    if (masterService == ElectMasterService.class) {
      bind(ElectMasterService.class).asEagerSingleton();
    }
 else {
      bind(ElectMasterService.class).to(masterService).asEagerSingleton();
    }
    bind(ZenPingService.class).asEagerSingleton();
    Multibinder<UnicastHostsProvider> unicastHostsProviderMultibinder=Multibinder.newSetBinder(binder(),UnicastHostsProvider.class);
    for (    Class<? extends UnicastHostsProvider> unicastHostProvider : unicastHostProviders) {
      unicastHostsProviderMultibinder.addBinding().to(unicastHostProvider);
    }
    zenPings.bind(binder());
  }
  bind(Discovery.class).to(discoveryClass).asEagerSingleton();
  bind(DiscoveryService.class).asEagerSingleton();
}
