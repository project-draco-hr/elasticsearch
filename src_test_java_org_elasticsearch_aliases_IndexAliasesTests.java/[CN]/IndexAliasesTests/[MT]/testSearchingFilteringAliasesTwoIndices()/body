{
  logger.info("--> creating index [test1]");
  assertAcked(prepareCreate("test1").addMapping("type1","name","type=string"));
  logger.info("--> creating index [test2]");
  assertAcked(prepareCreate("test2").addMapping("type1","name","type=string"));
  ensureGreen();
  logger.info("--> adding filtering aliases to index [test1]");
  assertAcked(admin().indices().prepareAliases().addAlias("test1","aliasToTest1"));
  assertAcked(admin().indices().prepareAliases().addAlias("test1","aliasToTests"));
  assertAcked(admin().indices().prepareAliases().addAlias("test1","foos",termFilter("name","foo")));
  assertAcked(admin().indices().prepareAliases().addAlias("test1","bars",termFilter("name","bar")));
  logger.info("--> adding filtering aliases to index [test2]");
  assertAcked(admin().indices().prepareAliases().addAlias("test2","aliasToTest2"));
  assertAcked(admin().indices().prepareAliases().addAlias("test2","aliasToTests"));
  assertAcked(admin().indices().prepareAliases().addAlias("test2","foos",termFilter("name","foo")));
  logger.info("--> indexing against [test1]");
  client().index(indexRequest("test1").type("type1").id("1").source(source("1","foo test"))).get();
  client().index(indexRequest("test1").type("type1").id("2").source(source("2","bar test"))).get();
  client().index(indexRequest("test1").type("type1").id("3").source(source("3","baz test"))).get();
  client().index(indexRequest("test1").type("type1").id("4").source(source("4","something else"))).get();
  logger.info("--> indexing against [test2]");
  client().index(indexRequest("test2").type("type1").id("5").source(source("5","foo test"))).get();
  client().index(indexRequest("test2").type("type1").id("6").source(source("6","bar test"))).get();
  client().index(indexRequest("test2").type("type1").id("7").source(source("7","baz test"))).get();
  client().index(indexRequest("test2").type("type1").id("8").source(source("8","something else"))).get();
  refresh();
  logger.info("--> checking filtering alias for two indices");
  SearchResponse searchResponse=client().prepareSearch("foos").setQuery(QueryBuilders.matchAllQuery()).get();
  assertHits(searchResponse.getHits(),"1","5");
  assertThat(client().prepareCount("foos").setQuery(QueryBuilders.matchAllQuery()).get().getCount(),equalTo(2L));
  logger.info("--> checking filtering alias for one index");
  searchResponse=client().prepareSearch("bars").setQuery(QueryBuilders.matchAllQuery()).get();
  assertHits(searchResponse.getHits(),"2");
  assertThat(client().prepareCount("bars").setQuery(QueryBuilders.matchAllQuery()).get().getCount(),equalTo(1L));
  logger.info("--> checking filtering alias for two indices and one complete index");
  searchResponse=client().prepareSearch("foos","test1").setQuery(QueryBuilders.matchAllQuery()).get();
  assertHits(searchResponse.getHits(),"1","2","3","4","5");
  assertThat(client().prepareCount("foos","test1").setQuery(QueryBuilders.matchAllQuery()).get().getCount(),equalTo(5L));
  logger.info("--> checking filtering alias for two indices and non-filtering alias for one index");
  searchResponse=client().prepareSearch("foos","aliasToTest1").setQuery(QueryBuilders.matchAllQuery()).get();
  assertHits(searchResponse.getHits(),"1","2","3","4","5");
  assertThat(client().prepareCount("foos","aliasToTest1").setQuery(QueryBuilders.matchAllQuery()).get().getCount(),equalTo(5L));
  logger.info("--> checking filtering alias for two indices and non-filtering alias for both indices");
  searchResponse=client().prepareSearch("foos","aliasToTests").setQuery(QueryBuilders.matchAllQuery()).get();
  assertThat(searchResponse.getHits().totalHits(),equalTo(8L));
  assertThat(client().prepareCount("foos","aliasToTests").setQuery(QueryBuilders.matchAllQuery()).get().getCount(),equalTo(8L));
  logger.info("--> checking filtering alias for two indices and non-filtering alias for both indices");
  searchResponse=client().prepareSearch("foos","aliasToTests").setQuery(QueryBuilders.termQuery("name","something")).get();
  assertHits(searchResponse.getHits(),"4","8");
  assertThat(client().prepareCount("foos","aliasToTests").setQuery(QueryBuilders.termQuery("name","something")).get().getCount(),equalTo(2L));
}
