{
  if (indexShard.state() == IndexShardState.CLOSED) {
    listener.onIgnoreRecovery("shard closed");
    return;
  }
  if (!indexShard.routingEntry().primary()) {
    listener.onRecoveryFailed(new IndexShardGatewayRecoveryException(shardId,"Trying to recover when the shard is in backup state",null));
    return;
  }
  try {
    if (indexShard.routingEntry().restoreSource() != null) {
      indexShard.recovering("from snapshot",RecoveryState.Type.SNAPSHOT,indexShard.routingEntry().restoreSource());
    }
 else {
      indexShard.recovering("from gateway",RecoveryState.Type.GATEWAY,clusterService.localNode());
    }
  }
 catch (  IllegalIndexShardStateException e) {
    listener.onIgnoreRecovery("already in recovering process, " + e.getMessage());
    return;
  }
  final RecoveryState recoveryState=indexShard.recoveryState();
  threadPool.generic().execute(new Runnable(){
    @Override public void run(){
      recoveryState.getTimer().startTime(System.currentTimeMillis());
      recoveryState.setStage(RecoveryState.Stage.INIT);
      try {
        if (indexShard.routingEntry().restoreSource() != null) {
          logger.debug("restoring from {} ...",indexShard.routingEntry().restoreSource());
          snapshotService.restore(recoveryState);
        }
 else {
          logger.debug("starting recovery from {} ...",shardGateway);
          shardGateway.recover(indexShouldExists,recoveryState);
        }
        IndexShardState shardState=indexShard.state();
        if (shardState != IndexShardState.POST_RECOVERY && shardState != IndexShardState.STARTED) {
          indexShard.postRecovery("post recovery from gateway");
        }
        indexShard.refresh("post_gateway");
        recoveryState.setStage(RecoveryState.Stage.DONE);
        if (logger.isTraceEnabled()) {
          StringBuilder sb=new StringBuilder();
          sb.append("recovery completed from ").append(shardGateway).append(", took [").append(timeValueMillis(recoveryState.getTimer().time())).append("]\n");
          RecoveryState.Index index=recoveryState.getIndex();
          sb.append("    index    : files           [").append(index.totalFileCount()).append("] with total_size [").append(new ByteSizeValue(index.totalBytes())).append("], took[").append(TimeValue.timeValueMillis(index.time())).append("]\n");
          sb.append("             : recovered_files [").append(index.recoveredFileCount()).append("] with total_size [").append(new ByteSizeValue(index.recoveredBytes())).append("]\n");
          sb.append("             : reusing_files   [").append(index.reusedFileCount()).append("] with total_size [").append(new ByteSizeValue(index.reusedBytes())).append("]\n");
          sb.append("    start    : took [").append(TimeValue.timeValueMillis(recoveryState.getStart().time())).append("], check_index [").append(timeValueMillis(recoveryState.getStart().checkIndexTime())).append("]\n");
          sb.append("    translog : number_of_operations [").append(recoveryState.getTranslog().currentTranslogOperations()).append("], took [").append(TimeValue.timeValueMillis(recoveryState.getTranslog().time())).append("]");
          logger.trace(sb.toString());
        }
 else         if (logger.isDebugEnabled()) {
          logger.debug("recovery completed from [{}], took [{}]",shardGateway,timeValueMillis(recoveryState.getTimer().time()));
        }
        listener.onRecoveryDone();
      }
 catch (      IndexShardGatewayRecoveryException e) {
        if (indexShard.state() == IndexShardState.CLOSED) {
          listener.onIgnoreRecovery("shard closed");
          return;
        }
        if ((e.getCause() instanceof IndexShardClosedException) || (e.getCause() instanceof IndexShardNotStartedException)) {
          listener.onIgnoreRecovery("shard closed");
          return;
        }
        listener.onRecoveryFailed(e);
      }
catch (      IndexShardClosedException e) {
        listener.onIgnoreRecovery("shard closed");
      }
catch (      IndexShardNotStartedException e) {
        listener.onIgnoreRecovery("shard closed");
      }
catch (      Exception e) {
        if (indexShard.state() == IndexShardState.CLOSED) {
          listener.onIgnoreRecovery("shard closed");
          return;
        }
        listener.onRecoveryFailed(new IndexShardGatewayRecoveryException(shardId,"failed recovery",e));
      }
    }
  }
);
}
