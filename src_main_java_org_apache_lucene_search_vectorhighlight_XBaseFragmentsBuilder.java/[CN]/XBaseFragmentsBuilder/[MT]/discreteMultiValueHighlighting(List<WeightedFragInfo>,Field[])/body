{
  Map<String,List<WeightedFragInfo>> fieldNameToFragInfos=new HashMap<String,List<WeightedFragInfo>>();
  for (  Field field : fields) {
    fieldNameToFragInfos.put(field.name(),new ArrayList<WeightedFragInfo>());
  }
  fragInfos:   for (  WeightedFragInfo fragInfo : fragInfos) {
    int fieldStart;
    int fieldEnd=0;
    for (    Field field : fields) {
      if (field.stringValue().isEmpty()) {
        fieldEnd++;
        continue;
      }
      fieldStart=fieldEnd;
      fieldEnd+=field.stringValue().length() + 1;
      if (fragInfo.getStartOffset() >= fieldStart && fragInfo.getEndOffset() >= fieldStart && fragInfo.getStartOffset() <= fieldEnd && fragInfo.getEndOffset() <= fieldEnd) {
        fieldNameToFragInfos.get(field.name()).add(fragInfo);
        continue fragInfos;
      }
      if (fragInfo.getSubInfos().isEmpty()) {
        continue fragInfos;
      }
      Toffs firstToffs=fragInfo.getSubInfos().get(0).getTermsOffsets().get(0);
      if (fragInfo.getStartOffset() >= fieldEnd || firstToffs.getStartOffset() >= fieldEnd) {
        continue;
      }
      int fragStart=fieldStart;
      if (fragInfo.getStartOffset() > fieldStart && fragInfo.getStartOffset() < fieldEnd) {
        fragStart=fragInfo.getStartOffset();
      }
      int fragEnd=fieldEnd;
      if (fragInfo.getEndOffset() > fieldStart && fragInfo.getEndOffset() < fieldEnd) {
        fragEnd=fragInfo.getEndOffset();
      }
      List<SubInfo> subInfos=new ArrayList<SubInfo>();
      WeightedFragInfo weightedFragInfo=new WeightedFragInfo(fragStart,fragEnd,subInfos,fragInfo.getTotalBoost());
      Iterator<SubInfo> subInfoIterator=fragInfo.getSubInfos().iterator();
      while (subInfoIterator.hasNext()) {
        SubInfo subInfo=subInfoIterator.next();
        List<Toffs> toffsList=new ArrayList<Toffs>();
        Iterator<Toffs> toffsIterator=subInfo.getTermsOffsets().iterator();
        while (toffsIterator.hasNext()) {
          Toffs toffs=toffsIterator.next();
          if (toffs.getStartOffset() >= fieldStart && toffs.getEndOffset() <= fieldEnd) {
            toffsList.add(toffs);
            toffsIterator.remove();
          }
        }
        if (!toffsList.isEmpty()) {
          subInfos.add(new SubInfo(subInfo.getText(),toffsList,subInfo.getSeqnum()));
        }
        if (subInfo.getTermsOffsets().isEmpty()) {
          subInfoIterator.remove();
        }
      }
      fieldNameToFragInfos.get(field.name()).add(weightedFragInfo);
    }
  }
  List<WeightedFragInfo> result=new ArrayList<WeightedFragInfo>();
  for (  List<WeightedFragInfo> weightedFragInfos : fieldNameToFragInfos.values()) {
    result.addAll(weightedFragInfos);
  }
  CollectionUtil.timSort(result,new Comparator<WeightedFragInfo>(){
    @Override public int compare(    XFieldFragList.WeightedFragInfo info1,    XFieldFragList.WeightedFragInfo info2){
      return info1.getStartOffset() - info2.getStartOffset();
    }
  }
);
  return result;
}
