{
  if (!quoted && queryText.length() > 1) {
    if (queryText.charAt(0) == '>') {
      if (queryText.length() > 2) {
        if (queryText.charAt(1) == '=') {
          return getRangeQuerySingle(field,queryText.substring(2),null,true,true);
        }
      }
      return getRangeQuerySingle(field,queryText.substring(1),null,false,true);
    }
 else     if (queryText.charAt(0) == '<') {
      if (queryText.length() > 2) {
        if (queryText.charAt(1) == '=') {
          return getRangeQuerySingle(field,null,queryText.substring(2),true,true);
        }
      }
      return getRangeQuerySingle(field,null,queryText.substring(1),true,false);
    }
  }
  currentMapper=null;
  Analyzer oldAnalyzer=analyzer;
  try {
    MapperService.SmartNameFieldMappers fieldMappers=null;
    if (quoted) {
      analyzer=quoteAnalyzer;
      if (quoteFieldSuffix != null) {
        fieldMappers=parseContext.smartFieldMappers(field + quoteFieldSuffix);
      }
    }
    if (fieldMappers == null) {
      fieldMappers=parseContext.smartFieldMappers(field);
    }
    if (fieldMappers != null) {
      if (quoted) {
        if (!forcedQuoteAnalyzer) {
          analyzer=fieldMappers.searchQuoteAnalyzer();
        }
      }
 else {
        if (!forcedAnalyzer) {
          analyzer=fieldMappers.searchAnalyzer();
        }
      }
      currentMapper=fieldMappers.fieldMappers().mapper();
      if (currentMapper != null) {
        Query query=null;
        if (currentMapper.useTermQueryWithQueryString()) {
          try {
            if (fieldMappers.explicitTypeInNameWithDocMapper()) {
              String[] previousTypes=QueryParseContext.setTypesWithPrevious(new String[]{fieldMappers.docMapper().type()});
              try {
                query=currentMapper.termQuery(queryText,parseContext);
              }
  finally {
                QueryParseContext.setTypes(previousTypes);
              }
            }
 else {
              query=currentMapper.termQuery(queryText,parseContext);
            }
          }
 catch (          RuntimeException e) {
            if (settings.lenient()) {
              return null;
            }
 else {
              throw e;
            }
          }
        }
        if (query == null) {
          query=super.getFieldQuery(currentMapper.names().indexName(),queryText,quoted);
        }
        return wrapSmartNameQuery(query,fieldMappers,parseContext);
      }
    }
    return super.getFieldQuery(field,queryText,quoted);
  }
  finally {
    analyzer=oldAnalyzer;
  }
}
