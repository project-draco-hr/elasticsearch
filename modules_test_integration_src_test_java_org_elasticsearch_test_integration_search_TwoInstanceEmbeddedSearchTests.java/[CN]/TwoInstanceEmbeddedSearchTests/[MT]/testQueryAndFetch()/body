{
  SearchSourceBuilder sourceBuilder=searchSource().query(termQuery("multi","test")).from(0).size(20).explain(true);
  Set<String> expectedIds=Sets.newHashSet();
  for (int i=0; i < 100; i++) {
    expectedIds.add(Integer.toString(i));
  }
  Map<SearchShardTarget,QueryFetchSearchResult> queryFetchResults=newHashMap();
  for (  ShardsIterator shardsIt : clusterService.operationRouting().searchShards(clusterService.state(),new String[]{"test"},null,null)) {
    for (    ShardRouting shardRouting : shardsIt) {
      InternalSearchRequest searchRequest=searchRequest(shardRouting,sourceBuilder).scroll(new Scroll(new TimeValue(10,TimeUnit.MINUTES)));
      QueryFetchSearchResult queryFetchResult=nodeToSearchService.get(shardRouting.currentNodeId()).executeFetchPhase(searchRequest);
      queryFetchResults.put(queryFetchResult.shardTarget(),queryFetchResult);
    }
  }
  ShardDoc[] sortedShardList=searchPhaseController.sortDocs(queryFetchResults.values());
  SearchHits hits=searchPhaseController.merge(sortedShardList,queryFetchResults,queryFetchResults).hits();
  assertThat(hits.totalHits(),equalTo(100l));
  assertThat(hits.hits().length,equalTo(60));
  for (int i=0; i < 60; i++) {
    SearchHit hit=hits.hits()[i];
    assertThat("make sure we don't have duplicates",expectedIds.remove(hit.id()),notNullValue());
  }
  Map<SearchShardTarget,QueryFetchSearchResult> scrollQueryFetchResults=newHashMap();
  for (  QueryFetchSearchResult searchResult : queryFetchResults.values()) {
    QueryFetchSearchResult queryFetchResult=nodeToSearchService.get(searchResult.shardTarget().nodeId()).executeFetchPhase(new InternalScrollSearchRequest(searchResult.id()).scroll(new Scroll(timeValueMinutes(10)))).result();
    scrollQueryFetchResults.put(queryFetchResult.shardTarget(),queryFetchResult);
  }
  queryFetchResults=scrollQueryFetchResults;
  sortedShardList=searchPhaseController.sortDocs(queryFetchResults.values());
  hits=searchPhaseController.merge(sortedShardList,queryFetchResults,queryFetchResults).hits();
  assertThat(hits.totalHits(),equalTo(100l));
  assertThat(hits.hits().length,equalTo(40));
  for (int i=0; i < 40; i++) {
    SearchHit hit=hits.hits()[i];
    assertThat("make sure we don't have duplicates",expectedIds.remove(hit.id()),notNullValue());
  }
  assertThat("make sure we got all [" + expectedIds + "]",expectedIds.size(),equalTo(0));
}
