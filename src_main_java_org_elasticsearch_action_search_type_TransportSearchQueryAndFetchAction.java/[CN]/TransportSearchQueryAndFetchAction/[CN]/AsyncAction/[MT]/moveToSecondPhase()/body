{
  try {
    threadPool.executor(ThreadPool.Names.SEARCH).execute(new Runnable(){
      @Override public void run(){
        try {
          boolean useScroll=!useSlowScroll && request.scroll() != null;
          sortedShardList=searchPhaseController.sortDocs(useScroll,firstResults);
          final InternalSearchResponse internalResponse=searchPhaseController.merge(sortedShardList,firstResults,firstResults);
          String scrollId=null;
          if (request.scroll() != null) {
            scrollId=buildScrollId(request.searchType(),firstResults,null);
          }
          listener.onResponse(new SearchResponse(internalResponse,scrollId,expectedSuccessfulOps,successfulOps.get(),buildTookInMillis(),buildShardFailures()));
        }
 catch (        Throwable e) {
          ReduceSearchPhaseException failure=new ReduceSearchPhaseException("merge","",e,buildShardFailures());
          if (logger.isDebugEnabled()) {
            logger.debug("failed to reduce search",failure);
          }
          listener.onFailure(failure);
        }
      }
    }
);
  }
 catch (  EsRejectedExecutionException ex) {
    listener.onFailure(ex);
  }
}
