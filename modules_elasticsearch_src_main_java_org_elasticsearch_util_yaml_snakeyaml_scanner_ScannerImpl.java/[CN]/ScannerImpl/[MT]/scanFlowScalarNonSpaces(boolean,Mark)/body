{
  StringBuilder chunks=new StringBuilder();
  while (true) {
    int length=0;
    while (Constant.NULL_BL_T_LINEBR.hasNo(reader.peek(length),"\'\"\\")) {
      length++;
    }
    if (length != 0) {
      chunks.append(reader.prefix(length));
      reader.forward(length);
    }
    char ch=reader.peek();
    if (!_double && ch == '\'' && reader.peek(1) == '\'') {
      chunks.append("'");
      reader.forward(2);
    }
 else     if ((_double && ch == '\'') || (!_double && "\"\\".indexOf(ch) != -1)) {
      chunks.append(ch);
      reader.forward();
    }
 else     if (_double && ch == '\\') {
      reader.forward();
      ch=reader.peek();
      if (ESCAPE_REPLACEMENTS.containsKey(new Character(ch))) {
        chunks.append(ESCAPE_REPLACEMENTS.get(new Character(ch)));
        reader.forward();
      }
 else       if (ESCAPE_CODES.containsKey(new Character(ch))) {
        length=((Integer)ESCAPE_CODES.get(new Character(ch))).intValue();
        reader.forward();
        String hex=reader.prefix(length);
        if (NOT_HEXA.matcher(hex).find()) {
          throw new ScannerException("while scanning a double-quoted scalar",startMark,"expected escape sequence of " + length + " hexadecimal numbers, but found: "+ hex,reader.getMark());
        }
        char unicode=(char)Integer.parseInt(hex,16);
        chunks.append(unicode);
        reader.forward(length);
      }
 else       if (Constant.FULL_LINEBR.has(ch)) {
        scanLineBreak();
        chunks.append(scanFlowScalarBreaks(startMark));
      }
 else {
        throw new ScannerException("while scanning a double-quoted scalar",startMark,"found unknown escape character " + ch + "("+ ((int)ch)+ ")",reader.getMark());
      }
    }
 else {
      return chunks.toString();
    }
  }
}
