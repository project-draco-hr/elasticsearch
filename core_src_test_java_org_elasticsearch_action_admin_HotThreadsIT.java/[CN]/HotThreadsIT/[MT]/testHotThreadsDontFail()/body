{
  createIndex("test");
  final int iters=scaledRandomIntBetween(2,20);
  final AtomicBoolean hasErrors=new AtomicBoolean(false);
  for (int i=0; i < iters; i++) {
    final String type;
    NodesHotThreadsRequestBuilder nodesHotThreadsRequestBuilder=client().admin().cluster().prepareNodesHotThreads();
    if (randomBoolean()) {
      TimeValue timeValue=new TimeValue(rarely() ? randomIntBetween(500,5000) : randomIntBetween(20,500));
      nodesHotThreadsRequestBuilder.setInterval(timeValue);
    }
    if (randomBoolean()) {
      nodesHotThreadsRequestBuilder.setThreads(rarely() ? randomIntBetween(500,5000) : randomIntBetween(1,500));
    }
    nodesHotThreadsRequestBuilder.setIgnoreIdleThreads(randomBoolean());
    if (randomBoolean()) {
switch (randomIntBetween(0,2)) {
case 2:
        type="cpu";
      break;
case 1:
    type="wait";
  break;
default :
type="block";
break;
}
assertThat(type,notNullValue());
nodesHotThreadsRequestBuilder.setType(type);
}
 else {
type=null;
}
final CountDownLatch latch=new CountDownLatch(1);
nodesHotThreadsRequestBuilder.execute(new ActionListener<NodesHotThreadsResponse>(){
@Override public void onResponse(NodesHotThreadsResponse nodeHotThreads){
boolean success=false;
try {
assertThat(nodeHotThreads,notNullValue());
Map<String,NodeHotThreads> nodesMap=nodeHotThreads.getNodesMap();
assertThat(nodesMap.size(),equalTo(cluster().size()));
for (NodeHotThreads ht : nodeHotThreads) {
assertNotNull(ht.getHotThreads());
}
success=true;
}
  finally {
if (!success) {
hasErrors.set(true);
}
latch.countDown();
}
}
@Override public void onFailure(Throwable e){
logger.error("FAILED",e);
hasErrors.set(true);
latch.countDown();
fail();
}
}
);
indexRandom(true,client().prepareIndex("test","type1","1").setSource("field1","value1"),client().prepareIndex("test","type1","2").setSource("field1","value2"),client().prepareIndex("test","type1","3").setSource("field1","value3"));
ensureSearchable();
while (latch.getCount() > 0) {
assertHitCount(client().prepareSearch().setQuery(matchAllQuery()).setPostFilter(boolQuery().must(matchAllQuery()).mustNot(boolQuery().must(termQuery("field1","value1")).must(termQuery("field1","value2")))).get(),3l);
}
latch.await();
assertThat(hasErrors.get(),is(false));
}
}
