{
  assumeFalse("Consistenty fails on windows ('could not remove the following files')",Constants.WINDOWS);
  Path path=PathUtils.get(createTempDir().toString());
  String[] paths=new String[]{path.resolve("a").toString(),path.resolve("b").toString()};
  Settings settings=Settings.builder().put("path.home",path).putArray("path.data",paths).build();
  NodeEnvironment nodeEnv=new NodeEnvironment(settings,new Environment(settings));
  NodePath[] nodePaths=nodeEnv.nodePaths();
  assertEquals(2,nodePaths.length);
  assertEquals("mocka",nodePaths[0].fileStore.name());
  assertEquals("mockb",nodePaths[1].fileStore.name());
  aFileStore.usableSpace=100000;
  bFileStore.usableSpace=1000;
  ShardId shardId=new ShardId("index",0);
  ShardPath result=ShardPath.selectNewPathForShard(nodeEnv,shardId,Settings.EMPTY,100,Collections.<Path,Integer>emptyMap());
  assertTrue(result.getDataPath().toString().contains(aPathPart));
  aFileStore.usableSpace=1000;
  bFileStore.usableSpace=100000;
  shardId=new ShardId("index",0);
  result=ShardPath.selectNewPathForShard(nodeEnv,shardId,Settings.EMPTY,100,Collections.<Path,Integer>emptyMap());
  assertTrue(result.getDataPath().toString().contains(bPathPart));
  aFileStore.usableSpace=100000;
  bFileStore.usableSpace=100000;
  Map<Path,Integer> dataPathToShardCount=new HashMap<>();
  ShardPath result1=ShardPath.selectNewPathForShard(nodeEnv,shardId,Settings.EMPTY,100,dataPathToShardCount);
  dataPathToShardCount.put(NodeEnvironment.shardStatePathToDataPath(result1.getDataPath()),1);
  ShardPath result2=ShardPath.selectNewPathForShard(nodeEnv,shardId,Settings.EMPTY,100,dataPathToShardCount);
  assertNotEquals(result1.getDataPath(),result2.getDataPath());
}
