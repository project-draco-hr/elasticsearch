{
  if (!settings.analyzeWildcard()) {
    return super.getPrefixQuery(field,termStr);
  }
  List<List<String>> tlist;
  TokenStream source=null;
  try {
    try {
      source=getAnalyzer().tokenStream(field,termStr);
      source.reset();
    }
 catch (    IOException e) {
      return super.getPrefixQuery(field,termStr);
    }
    tlist=new ArrayList<>();
    List<String> currentPos=new ArrayList<>();
    CharTermAttribute termAtt=source.addAttribute(CharTermAttribute.class);
    PositionIncrementAttribute posAtt=source.addAttribute(PositionIncrementAttribute.class);
    while (true) {
      try {
        if (!source.incrementToken())         break;
      }
 catch (      IOException e) {
        break;
      }
      if (currentPos.isEmpty() == false && posAtt.getPositionIncrement() > 0) {
        tlist.add(currentPos);
        currentPos=new ArrayList<>();
      }
      currentPos.add(termAtt.toString());
    }
    if (currentPos.isEmpty() == false) {
      tlist.add(currentPos);
    }
  }
  finally {
    if (source != null) {
      IOUtils.closeWhileHandlingException(source);
    }
  }
  if (tlist.size() == 0) {
    return null;
  }
  if (tlist.size() == 1 && tlist.get(0).size() == 1) {
    return super.getPrefixQuery(field,tlist.get(0).get(0));
  }
  List<BooleanClause> clauses=new ArrayList<>();
  for (int pos=0; pos < tlist.size(); pos++) {
    List<String> plist=tlist.get(pos);
    boolean isLastPos=(pos == tlist.size() - 1);
    Query posQuery;
    if (plist.size() == 1) {
      if (isLastPos) {
        posQuery=super.getPrefixQuery(field,plist.get(0));
      }
 else {
        posQuery=newTermQuery(new Term(field,plist.get(0)));
      }
    }
 else     if (isLastPos == false) {
      Term[] terms=new Term[plist.size()];
      for (int i=0; i < plist.size(); i++) {
        terms[i]=new Term(field,plist.get(i));
      }
      posQuery=new SynonymQuery(terms);
    }
 else {
      List<BooleanClause> innerClauses=new ArrayList<>();
      for (      String token : plist) {
        innerClauses.add(new BooleanClause(super.getPrefixQuery(field,token),BooleanClause.Occur.SHOULD));
      }
      posQuery=getBooleanQueryCoordDisabled(innerClauses);
    }
    clauses.add(new BooleanClause(posQuery,getDefaultOperator() == Operator.AND ? BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD));
  }
  return getBooleanQuery(clauses);
}
