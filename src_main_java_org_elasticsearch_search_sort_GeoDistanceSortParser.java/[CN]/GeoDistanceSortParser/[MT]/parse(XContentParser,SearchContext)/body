{
  String fieldName=null;
  GeoPoint point=new GeoPoint();
  DistanceUnit unit=DistanceUnit.KILOMETERS;
  GeoDistance geoDistance=GeoDistance.ARC;
  boolean reverse=false;
  SortMode sortMode=null;
  boolean normalizeLon=true;
  boolean normalizeLat=true;
  XContentParser.Token token;
  String currentName=parser.currentName();
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      token=parser.nextToken();
      point.resetLon(parser.doubleValue());
      token=parser.nextToken();
      point.resetLat(parser.doubleValue());
      while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
      }
      fieldName=currentName;
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      fieldName=currentName;
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          currentName=parser.currentName();
        }
 else         if (token.isValue()) {
          if (currentName.equals(GeoPointFieldMapper.Names.LAT)) {
            point.resetLat(parser.doubleValue());
          }
 else           if (currentName.equals(GeoPointFieldMapper.Names.LON)) {
            point.resetLon(parser.doubleValue());
          }
 else           if (currentName.equals(GeoPointFieldMapper.Names.GEOHASH)) {
            GeoHashUtils.decode(parser.text(),point);
          }
        }
      }
    }
 else     if (token.isValue()) {
      if ("reverse".equals(currentName)) {
        reverse=parser.booleanValue();
      }
 else       if ("order".equals(currentName)) {
        reverse="desc".equals(parser.text());
      }
 else       if (currentName.equals("unit")) {
        unit=DistanceUnit.fromString(parser.text());
      }
 else       if (currentName.equals("distance_type") || currentName.equals("distanceType")) {
        geoDistance=GeoDistance.fromString(parser.text());
      }
 else       if ("normalize".equals(currentName)) {
        normalizeLat=parser.booleanValue();
        normalizeLon=parser.booleanValue();
      }
 else       if ("mode".equals(currentName)) {
        sortMode=SortMode.fromString(parser.text());
      }
 else {
        point.resetFromString(parser.text());
        fieldName=currentName;
      }
    }
  }
  if (normalizeLat || normalizeLon) {
    GeoUtils.normalizePoint(point,normalizeLat,normalizeLon);
  }
  if (sortMode == null) {
    sortMode=reverse ? SortMode.MAX : SortMode.MIN;
  }
  FieldMapper mapper=context.smartNameFieldMapper(fieldName);
  if (mapper == null) {
    throw new ElasticSearchIllegalArgumentException("failed to find mapper for [" + fieldName + "] for geo distance based sort");
  }
  IndexGeoPointFieldData indexFieldData=context.fieldData().getForField(mapper);
  return new SortField(fieldName,new GeoDistanceComparatorSource(indexFieldData,point.lat(),point.lon(),unit,geoDistance,sortMode),reverse);
}
