{
  internalCluster().startNodesAsync(2,Settings.builder().put(DiscoveryModule.DISCOVERY_TYPE_KEY,"zen").build()).get();
  assertFalse(client().admin().cluster().prepareHealth().setWaitForNodes("2").get().isTimedOut());
  prepareCreate("test").setSettings(IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS,true).addMapping("type").get();
  ensureGreen("test");
  assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(Settings.builder().put(DiscoverySettings.PUBLISH_TIMEOUT_SETTING.getKey(),"0")));
  Set<String> nodes=new HashSet<>(Arrays.asList(internalCluster().getNodeNames()));
  nodes.remove(internalCluster().getMasterName());
  BlockClusterStateProcessing disruption=new BlockClusterStateProcessing(nodes.iterator().next(),getRandom());
  internalCluster().setDisruptionScheme(disruption);
  logger.info("--> indexing a doc");
  index("test","type","1");
  refresh();
  disruption.startDisrupting();
  logger.info("--> delete index and recreate it");
  assertFalse(client().admin().indices().prepareDelete("test").setTimeout("200ms").get().isAcknowledged());
  assertFalse(prepareCreate("test").setTimeout("200ms").setSettings(IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS,true).get().isAcknowledged());
  logger.info("--> letting cluster proceed");
  disruption.stopDisrupting();
  ensureGreen(TimeValue.timeValueMinutes(30),"test");
  assertHitCount(client().prepareSearch("test").get(),0);
}
