{
  try (ReleasableLock lock=writeLock.acquire()){
    logger.trace("updating translogs on commit of [{}]",translogId);
    if (translogId < lastCommittedTranslogId) {
      throw new IllegalArgumentException("committed translog id can only go up (current [" + lastCommittedTranslogId + "], got ["+ translogId+ "]");
    }
    boolean found=false;
    if (current.translogId() == translogId) {
      found=true;
    }
 else {
      if (translogId > current.translogId()) {
        throw new IllegalArgumentException("committed translog id must be lower or equal to current id (current [" + current.translogId() + "], got ["+ translogId+ "]");
      }
    }
    if (found == false) {
      for (      ChannelImmutableReader translog : uncommittedTranslogs) {
        if (translog.translogId() == translogId) {
          found=true;
          break;
        }
      }
    }
    if (found == false) {
      ArrayList<Long> currentIds=new ArrayList<>();
      for (      ChannelReader translog : Iterables.concat(uncommittedTranslogs,Collections.singletonList(current))) {
        currentIds.add(translog.translogId());
      }
      throw new FileNotFoundException("committed translog id can not be found (current [" + Strings.collectionToCommaDelimitedString(currentIds) + "], got ["+ translogId+ "]");
    }
    lastCommittedTranslogId=translogId;
    while (uncommittedTranslogs.isEmpty() == false && uncommittedTranslogs.get(0).translogId() < translogId) {
      ChannelReader old=uncommittedTranslogs.remove(0);
      logger.trace("removed [{}] from uncommitted translog list",old.translogId());
      try {
        old.close();
      }
 catch (      IOException e) {
        logger.error("failed to closed old translog [{}] (committed id [{}])",e,old,translogId);
      }
    }
  }
 }
