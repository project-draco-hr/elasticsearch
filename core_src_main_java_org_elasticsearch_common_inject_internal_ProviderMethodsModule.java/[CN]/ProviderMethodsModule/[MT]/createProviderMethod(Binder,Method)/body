{
  binder=binder.withSource(method);
  Errors errors=new Errors(method);
  List<Dependency<?>> dependencies=new ArrayList<>();
  List<Provider<?>> parameterProviders=new ArrayList<>();
  List<TypeLiteral<?>> parameterTypes=typeLiteral.getParameterTypes(method);
  Annotation[][] parameterAnnotations=method.getParameterAnnotations();
  for (int i=0; i < parameterTypes.size(); i++) {
    Key<?> key=getKey(errors,parameterTypes.get(i),method,parameterAnnotations[i]);
    dependencies.add(Dependency.get(key));
    parameterProviders.add(binder.getProvider(key));
  }
  @SuppressWarnings("unchecked") TypeLiteral<T> returnType=(TypeLiteral<T>)typeLiteral.getReturnType(method);
  Key<T> key=getKey(errors,returnType,method,method.getAnnotations());
  Class<? extends Annotation> scopeAnnotation=Annotations.findScopeAnnotation(errors,method.getAnnotations());
  for (  Message message : errors.getMessages()) {
    binder.addError(message);
  }
  return new ProviderMethod<>(key,method,delegate,ImmutableSet.copyOf(dependencies),parameterProviders,scopeAnnotation);
}
