{
  this.logger=logger;
  this.searchTransportService=searchTransportService;
  this.indexNameExpressionResolver=indexNameExpressionResolver;
  this.searchPhaseController=searchPhaseController;
  this.threadPool=threadPool;
  this.request=request;
  this.listener=listener;
  this.clusterState=clusterService.state();
  nodes=clusterState.nodes();
  clusterState.blocks().globalBlockedRaiseException(ClusterBlockLevel.READ);
  String[] concreteIndices=indexNameExpressionResolver.concreteIndexNames(clusterState,request.indicesOptions(),startTime(),request.indices());
  for (  String index : concreteIndices) {
    clusterState.blocks().indexBlockedRaiseException(ClusterBlockLevel.READ,index);
  }
  Map<String,Set<String>> routingMap=indexNameExpressionResolver.resolveSearchRouting(clusterState,request.routing(),request.indices());
  shardsIts=clusterService.operationRouting().searchShards(clusterState,concreteIndices,routingMap,request.preference());
  final int shardCount=shardsIts.size();
  failIfOverShardCountLimit(clusterService,shardCount);
  expectedSuccessfulOps=shardCount;
  expectedTotalOps=shardsIts.totalSizeWith1ForEmpty();
  firstResults=new AtomicArray<>(shardsIts.size());
}
