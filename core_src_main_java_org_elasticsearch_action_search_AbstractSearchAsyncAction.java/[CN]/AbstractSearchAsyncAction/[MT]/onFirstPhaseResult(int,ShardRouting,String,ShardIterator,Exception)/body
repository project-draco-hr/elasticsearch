{
  SearchShardTarget shardTarget=new SearchShardTarget(nodeId,shardIt.shardId().getIndex(),shardIt.shardId().getId());
  addShardFailure(shardIndex,shardTarget,e);
  if (totalOps.incrementAndGet() == expectedTotalOps) {
    if (logger.isDebugEnabled()) {
      if (e != null && !TransportActions.isShardNotAvailableException(e)) {
        logger.debug("{}: Failed to execute [{}]",e,shard != null ? shard.shortSummary() : shardIt.shardId(),request);
      }
 else       if (logger.isTraceEnabled()) {
        logger.trace("{}: Failed to execute [{}]",e,shard,request);
      }
    }
    final ShardSearchFailure[] shardSearchFailures=buildShardFailures();
    if (successfulOps.get() == 0) {
      if (logger.isDebugEnabled()) {
        logger.debug("All shards failed for phase: [{}]",e,firstPhaseName());
      }
      raiseEarlyFailure(new SearchPhaseExecutionException(firstPhaseName(),"all shards failed",e,shardSearchFailures));
    }
 else {
      try {
        innerMoveToSecondPhase();
      }
 catch (      Exception inner) {
        inner.addSuppressed(e);
        raiseEarlyFailure(new ReduceSearchPhaseException(firstPhaseName(),"",inner,shardSearchFailures));
      }
    }
  }
 else {
    final ShardRouting nextShard=shardIt.nextOrNull();
    final boolean lastShard=nextShard == null;
    if (logger.isTraceEnabled()) {
      logger.trace("{}: Failed to execute [{}] lastShard [{}]",e,shard != null ? shard.shortSummary() : shardIt.shardId(),request,lastShard);
    }
    if (!lastShard) {
      try {
        performFirstPhase(shardIndex,shardIt,nextShard);
      }
 catch (      Exception inner) {
        inner.addSuppressed(e);
        onFirstPhaseResult(shardIndex,shard,shard.currentNodeId(),shardIt,inner);
      }
    }
 else {
      if (logger.isDebugEnabled() && !logger.isTraceEnabled()) {
        if (e != null && !TransportActions.isShardNotAvailableException(e)) {
          logger.debug("{}: Failed to execute [{}] lastShard [{}]",e,shard != null ? shard.shortSummary() : shardIt.shardId(),request,lastShard);
        }
      }
    }
  }
}
