{
  final int NUM_THREADS=5;
  final int BYTES_PER_THREAD=1000;
  final Thread[] threads=new Thread[NUM_THREADS];
  final AtomicInteger tripped=new AtomicInteger(0);
  final AtomicReference<Throwable> lastException=new AtomicReference<>(null);
  final AtomicInteger parentTripped=new AtomicInteger(0);
  final AtomicReference<ChildMemoryCircuitBreaker> breakerRef=new AtomicReference<>(null);
  final CircuitBreakerService service=new HierarchyCircuitBreakerService(ImmutableSettings.EMPTY,new NodeSettingsService(ImmutableSettings.EMPTY)){
    @Override public CircuitBreaker getBreaker(    CircuitBreaker.Name type){
      return breakerRef.get();
    }
    @Override public void checkParentLimit(    String label) throws CircuitBreakingException {
      if (getBreaker(CircuitBreaker.Name.REQUEST).getUsed() > (BYTES_PER_THREAD * NUM_THREADS) - 2) {
        parentTripped.incrementAndGet();
        throw new CircuitBreakingException("parent tripped");
      }
    }
  }
;
  final BreakerSettings settings=new BreakerSettings(CircuitBreaker.Name.REQUEST,(BYTES_PER_THREAD * NUM_THREADS) - 1,1.0);
  final ChildMemoryCircuitBreaker breaker=new ChildMemoryCircuitBreaker(settings,logger,(HierarchyCircuitBreakerService)service,CircuitBreaker.Name.REQUEST);
  breakerRef.set(breaker);
  for (int i=0; i < NUM_THREADS; i++) {
    threads[i]=new Thread(new Runnable(){
      @Override public void run(){
        for (int j=0; j < BYTES_PER_THREAD; j++) {
          try {
            breaker.addEstimateBytesAndMaybeBreak(1L,"test");
          }
 catch (          CircuitBreakingException e) {
            tripped.incrementAndGet();
            if (tripped.get() > 2) {
              assertThat("tripped too many times: " + tripped.get(),true,equalTo(false));
            }
          }
catch (          Throwable e2) {
            lastException.set(e2);
          }
        }
      }
    }
);
    threads[i].start();
  }
  for (  Thread t : threads) {
    t.join();
  }
  assertThat("no other exceptions were thrown",lastException.get(),equalTo(null));
  assertThat("breaker was tripped exactly once",breaker.getTrippedCount(),equalTo(0L));
  assertThat("parent breaker was tripped exactly twice",parentTripped.get(),equalTo(2));
  assertThat("total breaker was tripped exactly twice",tripped.get(),equalTo(2));
}
