{
  final Map<ShardId,QueryCacheStats> stats=new HashMap<>();
  for (  Map.Entry<ShardId,Stats> entry : shardStats.entrySet()) {
    stats.put(entry.getKey(),entry.getValue().toQueryCacheStats());
  }
  QueryCacheStats shardStats=new QueryCacheStats();
  QueryCacheStats info=stats.get(shard);
  if (info == null) {
    info=new QueryCacheStats();
  }
  shardStats.add(info);
  long totalSize=0;
  for (  QueryCacheStats s : stats.values()) {
    totalSize+=s.getCacheSize();
  }
  final double weight=totalSize == 0 ? 1d / stats.size() : shardStats.getCacheSize() / totalSize;
  final long additionalRamBytesUsed=Math.round(weight * sharedRamBytesUsed);
  shardStats.add(new QueryCacheStats(additionalRamBytesUsed,0,0,0,0));
  return shardStats;
}
