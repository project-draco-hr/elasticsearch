{
  currentKeysToClean.clear();
  currentFullClean.clear();
  for (Iterator<CleanupKey> iterator=keysToClean.iterator(); iterator.hasNext(); ) {
    CleanupKey cleanupKey=iterator.next();
    iterator.remove();
    if (cleanupKey.readerVersion == -1 || cleanupKey.indexShard.state() == IndexShardState.CLOSED) {
      currentFullClean.add(cleanupKey.indexShard);
    }
 else {
      currentKeysToClean.add(cleanupKey);
    }
  }
  if (!currentKeysToClean.isEmpty() || !currentFullClean.isEmpty()) {
    CleanupKey lookupKey=new CleanupKey(null,-1);
    for (Iterator<Key> iterator=cache.asMap().keySet().iterator(); iterator.hasNext(); ) {
      Key key=iterator.next();
      if (currentFullClean.contains(key.shard)) {
        iterator.remove();
      }
 else {
        lookupKey.indexShard=key.shard;
        lookupKey.readerVersion=key.readerVersion;
        if (currentKeysToClean.contains(lookupKey)) {
          iterator.remove();
        }
      }
    }
  }
  cache.cleanUp();
  currentKeysToClean.clear();
  currentFullClean.clear();
}
