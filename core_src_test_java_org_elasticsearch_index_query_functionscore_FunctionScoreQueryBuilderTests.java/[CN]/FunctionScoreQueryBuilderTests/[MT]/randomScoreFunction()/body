{
  if (randomBoolean()) {
    return new WeightBuilder().setWeight(randomFloat());
  }
  ScoreFunctionBuilder<?> functionBuilder;
switch (randomIntBetween(0,3)) {
case 0:
    DecayFunctionBuilder<?> decayFunctionBuilder=createRandomDecayFunction();
  if (randomBoolean()) {
    decayFunctionBuilder.setMultiValueMode(randomFrom(MultiValueMode.values()));
  }
functionBuilder=decayFunctionBuilder;
break;
case 1:
FieldValueFactorFunctionBuilder fieldValueFactorFunctionBuilder=fieldValueFactorFunction(fieldValueFactorCompatibleField());
if (randomBoolean()) {
fieldValueFactorFunctionBuilder.factor(randomFloat());
}
if (randomBoolean()) {
fieldValueFactorFunctionBuilder.missing(randomDouble());
}
if (randomBoolean()) {
fieldValueFactorFunctionBuilder.modifier(randomFrom(FieldValueFactorFunction.Modifier.values()));
}
functionBuilder=fieldValueFactorFunctionBuilder;
break;
case 2:
String script="1";
Map<String,Object> params=Collections.emptyMap();
functionBuilder=new ScriptScoreFunctionBuilder(new Script(script,ScriptService.ScriptType.INLINE,MockScriptEngine.NAME,params));
break;
case 3:
RandomScoreFunctionBuilder randomScoreFunctionBuilder=new RandomScoreFunctionBuilderWithFixedSeed();
if (randomBoolean()) {
randomScoreFunctionBuilder.seed(randomLong());
}
 else if (randomBoolean()) {
randomScoreFunctionBuilder.seed(randomInt());
}
 else {
randomScoreFunctionBuilder.seed(randomAsciiOfLengthBetween(1,10));
}
functionBuilder=randomScoreFunctionBuilder;
break;
default :
throw new UnsupportedOperationException();
}
if (randomBoolean()) {
functionBuilder.setWeight(randomFloat());
}
return functionBuilder;
}
