{
  assumeTrue("test runs only when at least a type is registered",getCurrentTypes().length > 0);
  String queryString=jsonBuilder().startObject().startObject("function_score").startArray("functions").startObject().startObject("field_value_factor").field("field",INT_FIELD_NAME).endObject().field("weight",1.0).endObject().endArray().endObject().endObject().string();
  QueryBuilder query=parseQuery(queryString);
  assertThat(query,instanceOf(FunctionScoreQueryBuilder.class));
  FunctionScoreQueryBuilder functionScoreQueryBuilder=(FunctionScoreQueryBuilder)query;
  assertThat(functionScoreQueryBuilder.filterFunctionBuilders()[0].getScoreFunction(),instanceOf(FieldValueFactorFunctionBuilder.class));
  FieldValueFactorFunctionBuilder fieldValueFactorFunctionBuilder=(FieldValueFactorFunctionBuilder)functionScoreQueryBuilder.filterFunctionBuilders()[0].getScoreFunction();
  assertThat(fieldValueFactorFunctionBuilder.fieldName(),equalTo(INT_FIELD_NAME));
  assertThat(fieldValueFactorFunctionBuilder.factor(),equalTo(FieldValueFactorFunctionBuilder.DEFAULT_FACTOR));
  assertThat(fieldValueFactorFunctionBuilder.modifier(),equalTo(FieldValueFactorFunctionBuilder.DEFAULT_MODIFIER));
  assertThat(fieldValueFactorFunctionBuilder.getWeight(),equalTo(1f));
  assertThat(fieldValueFactorFunctionBuilder.missing(),nullValue());
  Query luceneQuery=query.toQuery(createShardContext());
  assertThat(luceneQuery,instanceOf(FunctionScoreQuery.class));
  FunctionScoreQuery functionScoreQuery=(FunctionScoreQuery)luceneQuery;
  assertThat(functionScoreQuery.getFunction(),instanceOf(WeightFactorFunction.class));
  WeightFactorFunction weightFactorFunction=(WeightFactorFunction)functionScoreQuery.getFunction();
  assertThat(weightFactorFunction.getWeight(),equalTo(1.0f));
  assertThat(weightFactorFunction.getScoreFunction(),instanceOf(FieldValueFactorFunction.class));
}
