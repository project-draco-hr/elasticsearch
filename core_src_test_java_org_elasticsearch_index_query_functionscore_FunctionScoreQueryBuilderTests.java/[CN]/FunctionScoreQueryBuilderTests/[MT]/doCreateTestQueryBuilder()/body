{
  FunctionScoreQueryBuilder functionScoreQueryBuilder;
switch (randomIntBetween(0,3)) {
case 0:
    int numFunctions=randomIntBetween(0,3);
  FunctionScoreQueryBuilder.FilterFunctionBuilder[] filterFunctionBuilders=new FunctionScoreQueryBuilder.FilterFunctionBuilder[numFunctions];
for (int i=0; i < numFunctions; i++) {
  filterFunctionBuilders[i]=new FunctionScoreQueryBuilder.FilterFunctionBuilder(RandomQueryBuilder.createQuery(random()),randomScoreFunction());
}
if (randomBoolean()) {
functionScoreQueryBuilder=new FunctionScoreQueryBuilder(RandomQueryBuilder.createQuery(random()),filterFunctionBuilders);
}
 else {
functionScoreQueryBuilder=new FunctionScoreQueryBuilder(filterFunctionBuilders);
}
break;
case 1:
functionScoreQueryBuilder=new FunctionScoreQueryBuilder(randomScoreFunction());
break;
case 2:
functionScoreQueryBuilder=new FunctionScoreQueryBuilder(RandomQueryBuilder.createQuery(random()),randomScoreFunction());
break;
case 3:
functionScoreQueryBuilder=new FunctionScoreQueryBuilder(RandomQueryBuilder.createQuery(random()));
break;
default :
throw new UnsupportedOperationException();
}
if (randomBoolean()) {
functionScoreQueryBuilder.boostMode(randomFrom(CombineFunction.values()));
}
if (randomBoolean()) {
functionScoreQueryBuilder.scoreMode(randomFrom(FiltersFunctionScoreQuery.ScoreMode.values()));
}
if (randomBoolean()) {
functionScoreQueryBuilder.maxBoost(randomFloat());
}
if (randomBoolean()) {
functionScoreQueryBuilder.setMinScore(randomFloat());
}
return functionScoreQueryBuilder;
}
