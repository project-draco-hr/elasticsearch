{
  String field=randomFrom(INT_FIELD_NAME,DOUBLE_FIELD_NAME,DATE_FIELD_NAME,GEO_POINT_FIELD_NAME);
  Object origin;
  Object scale;
  Object offset;
switch (field) {
case GEO_POINT_FIELD_NAME:
    origin=new GeoPoint(randomDouble(),randomDouble()).geohash();
  scale=randomFrom(DistanceUnit.values()).toString(randomDouble());
offset=randomFrom(DistanceUnit.values()).toString(randomDouble());
break;
case DATE_FIELD_NAME:
origin=new DateTime(System.currentTimeMillis() - randomIntBetween(0,1000000),DateTimeZone.UTC).toString();
scale=randomTimeValue();
offset=randomTimeValue();
break;
default :
origin=randomBoolean() ? randomInt() : randomFloat();
scale=randomBoolean() ? abs(randomInt()) : abs(randomFloat());
offset=randomBoolean() ? abs(randomInt()) : abs(randomFloat());
break;
}
offset=randomBoolean() ? null : offset;
double decay=randomDouble();
switch (randomIntBetween(0,2)) {
case 0:
return new GaussDecayFunctionBuilder(field,origin,scale,offset,decay);
case 1:
return new ExponentialDecayFunctionBuilder(field,origin,scale,offset,decay);
case 2:
return new LinearDecayFunctionBuilder(field,origin,scale,offset,decay);
default :
throw new UnsupportedOperationException();
}
}
