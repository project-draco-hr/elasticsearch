{
  Path emptyPolicyFile=Files.createTempFile(tmpDir,"empty","tmp");
  final Policy emptyPolicy;
  try {
    emptyPolicy=Policy.getInstance("JavaPolicy",new URIParameter(emptyPolicyFile.toUri()));
  }
 catch (  NoSuchAlgorithmException e) {
    throw new RuntimeException(e);
  }
  IOUtils.rm(emptyPolicyFile);
  final Policy policy;
  try {
    policy=Policy.getInstance("JavaPolicy",new URIParameter(file.toUri()));
  }
 catch (  NoSuchAlgorithmException e) {
    throw new RuntimeException(e);
  }
  PermissionCollection permissions=policy.getPermissions(PluginSecurity.class.getProtectionDomain());
  if (permissions == Policy.UNSUPPORTED_EMPTY_COLLECTION) {
    throw new UnsupportedOperationException("JavaPolicy implementation does not support retrieving permissions");
  }
  PermissionCollection actualPermissions=new Permissions();
  for (  Permission permission : Collections.list(permissions.elements())) {
    if (!emptyPolicy.implies(PluginSecurity.class.getProtectionDomain(),permission)) {
      actualPermissions.add(permission);
    }
  }
  actualPermissions.setReadOnly();
  return actualPermissions;
}
