{
  if (!(mergeWith instanceof XContentMultiFieldMapper)) {
    mergeContext.addConflict("Can't merge a non multi_field mapping [" + mergeWith.name() + "] with a multi_field mapping ["+ name()+ "]");
    return;
  }
  XContentMultiFieldMapper mergeWithMultiField=(XContentMultiFieldMapper)mergeWith;
synchronized (mutex) {
    if (defaultMapper == null) {
      if (mergeWithMultiField.defaultMapper != null) {
        if (!mergeContext.mergeFlags().simulate()) {
          defaultMapper=mergeWithMultiField.defaultMapper;
          mergeContext.docMapper().addFieldMapper((FieldMapper)defaultMapper);
        }
      }
    }
 else {
      if (mergeWithMultiField.defaultMapper != null) {
        defaultMapper.merge(mergeWithMultiField.defaultMapper,mergeContext);
      }
    }
    for (    XContentMapper mergeWithMapper : mergeWithMultiField.mappers.values()) {
      XContentMapper mergeIntoMapper=mappers.get(mergeWithMapper.name());
      if (mergeIntoMapper == null) {
        if (!mergeContext.mergeFlags().simulate()) {
          if (mergeWithMapper instanceof XContentIncludeInAllMapper) {
            ((XContentIncludeInAllMapper)mergeWithMapper).includeInAll(false);
          }
          mappers=newMapBuilder(mappers).put(mergeWithMapper.name(),mergeWithMapper).immutableMap();
          if (mergeWithMapper instanceof XContentFieldMapper) {
            mergeContext.docMapper().addFieldMapper((FieldMapper)mergeWithMapper);
          }
        }
      }
 else {
        mergeIntoMapper.merge(mergeWithMapper,mergeContext);
      }
    }
  }
}
