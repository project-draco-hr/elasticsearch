{
  HashEntry<K,V>[] oldTable=table;
  int oldCapacity=oldTable.length;
  if (oldCapacity >= MAXIMUM_CAPACITY) {
    return 0;
  }
  HashEntry<K,V>[] newTable=HashEntry.newArray(oldCapacity << 1);
  threshold=(int)(newTable.length * loadFactor);
  int sizeMask=newTable.length - 1;
  int reduce=0;
  for (int i=0; i < oldCapacity; i++) {
    HashEntry<K,V> e=oldTable[i];
    if (e != null) {
      HashEntry<K,V> next=e.next;
      int idx=e.hash & sizeMask;
      if (next == null) {
        newTable[idx]=e;
      }
 else {
        HashEntry<K,V> lastRun=e;
        int lastIdx=idx;
        for (HashEntry<K,V> last=next; last != null; last=last.next) {
          int k=last.hash & sizeMask;
          if (k != lastIdx) {
            lastIdx=k;
            lastRun=last;
          }
        }
        newTable[lastIdx]=lastRun;
        for (HashEntry<K,V> p=e; p != lastRun; p=p.next) {
          K key=p.key();
          if (key == null) {
            reduce++;
            continue;
          }
          int k=p.hash & sizeMask;
          HashEntry<K,V> n=newTable[k];
          newTable[k]=newHashEntry(key,p.hash,n,p.value());
        }
      }
    }
  }
  table=newTable;
  return reduce;
}
