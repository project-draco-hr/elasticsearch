{
  IndexService indexService=indicesService.indexService(shardId.index().name());
  if (indexService != null) {
    InternalIndexShard indexShard=(InternalIndexShard)indexService.shard(shardId.id());
    if (indexShard != null) {
      return new StoreFilesMetaData(true,shardId,indexShard.store().list());
    }
  }
  IndexMetaData metaData=clusterService.state().metaData().index(shardId.index().name());
  if (metaData == null) {
    return new StoreFilesMetaData(false,shardId,ImmutableMap.<String,StoreFileMetaData>of());
  }
  String storeType=metaData.settings().get("index.store.type","fs");
  if (!storeType.contains("fs")) {
    return new StoreFilesMetaData(false,shardId,ImmutableMap.<String,StoreFileMetaData>of());
  }
  File[] shardLocations=nodeEnv.shardLocations(shardId);
  File[] shardIndexLocations=new File[shardLocations.length];
  for (int i=0; i < shardLocations.length; i++) {
    shardIndexLocations[i]=new File(shardLocations[i],"index");
  }
  boolean exists=false;
  for (  File shardIndexLocation : shardIndexLocations) {
    if (shardIndexLocation.exists()) {
      exists=true;
      break;
    }
  }
  if (!exists) {
    return new StoreFilesMetaData(false,shardId,ImmutableMap.<String,StoreFileMetaData>of());
  }
  Map<String,String> checksums=Store.readChecksums(shardIndexLocations);
  if (checksums == null) {
    checksums=ImmutableMap.of();
  }
  Map<String,StoreFileMetaData> files=Maps.newHashMap();
  for (  File shardIndexLocation : shardIndexLocations) {
    File[] listedFiles=shardIndexLocation.listFiles();
    if (listedFiles == null) {
      continue;
    }
    for (    File file : listedFiles) {
      if (file.getName().endsWith(".cks")) {
        continue;
      }
      if (Store.isChecksum(file.getName())) {
        continue;
      }
      files.put(file.getName(),new StoreFileMetaData(file.getName(),file.length(),file.lastModified(),checksums.get(file.getName())));
    }
  }
  return new StoreFilesMetaData(false,shardId,files);
}
