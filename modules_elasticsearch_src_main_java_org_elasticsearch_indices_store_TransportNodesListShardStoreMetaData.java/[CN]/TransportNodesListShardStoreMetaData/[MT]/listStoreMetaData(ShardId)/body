{
  IndexService indexService=indicesService.indexService(shardId.index().name());
  if (indexService != null) {
    InternalIndexShard indexShard=(InternalIndexShard)indexService.shard(shardId.id());
    if (indexShard != null) {
      return new StoreFilesMetaData(true,shardId,indexShard.store().list());
    }
  }
  IndexMetaData metaData=clusterService.state().metaData().index(shardId.index().name());
  if (metaData == null) {
    return new StoreFilesMetaData(false,shardId,ImmutableMap.<String,StoreFileMetaData>of());
  }
  String storeType=metaData.settings().get("index.store.type","fs");
  if (!storeType.contains("fs")) {
    return new StoreFilesMetaData(false,shardId,ImmutableMap.<String,StoreFileMetaData>of());
  }
  File indexFile=new File(nodeEnv.shardLocation(shardId),"index");
  if (!indexFile.exists()) {
    return new StoreFilesMetaData(false,shardId,ImmutableMap.<String,StoreFileMetaData>of());
  }
  Map<String,StoreFileMetaData> files=Maps.newHashMap();
  FSDirectory directory=FSDirectory.open(indexFile);
  Map<String,String> checksums=null;
  try {
    checksums=AbstractStore.readChecksums(directory);
    for (    File file : indexFile.listFiles()) {
      if (file.getName().endsWith(".cks")) {
        continue;
      }
      if (AbstractStore.isChecksum(file.getName())) {
        continue;
      }
      files.put(file.getName(),new StoreFileMetaData(file.getName(),file.length(),file.lastModified(),checksums.get(file.getName())));
    }
  }
  finally {
    directory.close();
  }
  for (  File file : indexFile.listFiles()) {
    if (file.getName().endsWith(".cks")) {
      continue;
    }
    if (file.getName().startsWith("_checksums")) {
      continue;
    }
    String checksum=null;
    File checksumFile=new File(file.getParentFile(),file.getName() + ".cks");
    if (checksumFile.exists() && (checksums == null || !checksums.containsKey(file.getName()))) {
      byte[] checksumBytes=Streams.copyToByteArray(checksumFile);
      if (checksumBytes.length > 0) {
        checksum=Unicode.fromBytes(checksumBytes);
      }
      files.put(file.getName(),new StoreFileMetaData(file.getName(),file.length(),file.lastModified(),checksum));
    }
  }
  return new StoreFilesMetaData(false,shardId,files);
}
