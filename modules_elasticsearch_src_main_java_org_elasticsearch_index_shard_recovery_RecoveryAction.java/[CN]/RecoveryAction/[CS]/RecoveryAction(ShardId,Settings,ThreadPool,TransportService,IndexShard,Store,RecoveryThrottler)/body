{
  super(shardId,indexSettings);
  this.threadPool=threadPool;
  this.transportService=transportService;
  this.indexShard=(InternalIndexShard)indexShard;
  this.store=store;
  this.recoveryThrottler=recoveryThrottler;
  startTransportAction=shardId.index().name() + "/" + shardId.id()+ "/recovery/start";
  transportService.registerHandler(startTransportAction,new StartRecoveryTransportRequestHandler());
  fileChunkTransportAction=shardId.index().name() + "/" + shardId.id()+ "/recovery/fileChunk";
  transportService.registerHandler(fileChunkTransportAction,new FileChunkTransportRequestHandler());
  cleanFilesTransportAction=shardId.index().name() + "/" + shardId.id()+ "/recovery/cleanFiles";
  transportService.registerHandler(cleanFilesTransportAction,new CleanFilesRequestHandler());
  prepareForTranslogOperationsTransportAction=shardId.index().name() + "/" + shardId.id()+ "/recovery/prepareForTranslog";
  transportService.registerHandler(prepareForTranslogOperationsTransportAction,new PrepareForTranslogOperationsRequestHandler());
  translogOperationsTransportAction=shardId.index().name() + "/" + shardId.id()+ "/recovery/translogOperations";
  transportService.registerHandler(translogOperationsTransportAction,new TranslogOperationsRequestHandler());
  finalizeRecoveryTransportAction=shardId.index().name() + "/" + shardId.id()+ "/recovery/finalizeRecovery";
  transportService.registerHandler(finalizeRecoveryTransportAction,new FinalizeRecoveryRequestHandler());
  this.fileChunkSize=componentSettings.getAsBytesSize("file_chunk_size",new ByteSizeValue(100,ByteSizeUnit.KB));
  logger.trace("recovery action registered, using file_chunk_size[{}]",fileChunkSize);
}
