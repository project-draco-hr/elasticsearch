{
  final CountDownLatch countDown=new CountDownLatch(1);
  final AtomicReference<SyncedFlushService.SyncedFlushResult> result=new AtomicReference<>();
  final AtomicReference<Throwable> exception=new AtomicReference<>();
  service.attemptSyncedFlush(shardId,new ActionListener<SyncedFlushService.SyncedFlushResult>(){
    @Override public void onResponse(    SyncedFlushService.SyncedFlushResult syncedFlushResult){
      result.compareAndSet(null,syncedFlushResult);
      countDown.countDown();
    }
    @Override public void onFailure(    Throwable e){
      exception.compareAndSet(null,e);
      countDown.countDown();
    }
  }
);
  try {
    countDown.await();
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
  }
  if (exception.get() != null) {
    throw ExceptionsHelper.convertToElastic(exception.get());
  }
  return result.get();
}
