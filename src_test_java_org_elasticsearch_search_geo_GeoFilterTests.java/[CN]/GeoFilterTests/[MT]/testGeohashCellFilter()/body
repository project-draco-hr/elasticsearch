{
  String geohash=randomhash(10);
  logger.info("Testing geohash_cell filter for [{}]",geohash);
  Collection<? extends CharSequence> neighbors=GeoHashUtils.neighbors(geohash);
  Collection<? extends CharSequence> parentNeighbors=GeoHashUtils.neighbors(geohash.substring(0,geohash.length() - 1));
  logger.info("Neighbors {}",neighbors);
  logger.info("Parent Neighbors {}",parentNeighbors);
  ensureYellow();
  client().admin().indices().prepareCreate("locations").addMapping("location","pin","type=geo_point,geohash_prefix=true,latlon=false").execute().actionGet();
  client().prepareIndex("locations","location","1").setCreate(true).setSource("pin",geohash).execute().actionGet();
  Iterator<? extends CharSequence> iterator=neighbors.iterator();
  for (int i=0; iterator.hasNext(); i++) {
    client().prepareIndex("locations","location","N" + i).setCreate(true).setSource("pin",iterator.next()).execute().actionGet();
  }
  client().prepareIndex("locations","location","p").setCreate(true).setSource("pin",geohash.substring(0,geohash.length() - 1)).execute().actionGet();
  iterator=parentNeighbors.iterator();
  for (int i=0; iterator.hasNext(); i++) {
    client().prepareIndex("locations","location","p" + i).setCreate(true).setSource("pin",iterator.next()).execute().actionGet();
  }
  client().admin().indices().prepareRefresh("locations").execute().actionGet();
  SearchResponse results1=client().prepareSearch("locations").setQuery(QueryBuilders.matchAllQuery()).setPostFilter("{\"geohash_cell\": {\"pin\": \"" + geohash + "\", \"neighbors\": false}}").execute().actionGet();
  assertHitCount(results1,1);
  results1=client().prepareSearch("locations").setQuery(QueryBuilders.matchAllQuery()).setPostFilter(geoHashCellFilter("pin",geohash,false)).execute().actionGet();
  assertHitCount(results1,1);
  SearchResponse results2=client().prepareSearch("locations").setQuery(QueryBuilders.matchAllQuery()).setPostFilter("{\"geohash_cell\": {\"pin\": \"" + geohash.substring(0,geohash.length() - 1) + "\", \"neighbors\": true}}").execute().actionGet();
  assertHitCount(results2,2 + neighbors.size() + parentNeighbors.size());
  GeoPoint point=GeoHashUtils.decode(geohash);
  int precision=geohash.length();
  logger.info("Testing lat/lon format");
  String pointTest1="{\"geohash_cell\": {\"pin\": {\"lat\": " + point.lat() + ",\"lon\": "+ point.lon()+ "},\"precision\": "+ precision+ ",\"neighbors\": true}}";
  SearchResponse results3=client().prepareSearch("locations").setQuery(QueryBuilders.matchAllQuery()).setPostFilter(pointTest1).execute().actionGet();
  assertHitCount(results3,neighbors.size() + 1);
  logger.info("Testing String format");
  String pointTest2="{\"geohash_cell\": {\"pin\": \"" + point.lat() + ","+ point.lon()+ "\",\"precision\": "+ precision+ ",\"neighbors\": true}}";
  SearchResponse results4=client().prepareSearch("locations").setQuery(QueryBuilders.matchAllQuery()).setPostFilter(pointTest2).execute().actionGet();
  assertHitCount(results4,neighbors.size() + 1);
  logger.info("Testing Array format");
  String pointTest3="{\"geohash_cell\": {\"pin\": [" + point.lon() + ","+ point.lat()+ "],\"precision\": "+ precision+ ",\"neighbors\": true}}";
  SearchResponse results5=client().prepareSearch("locations").setQuery(QueryBuilders.matchAllQuery()).setPostFilter(pointTest3).execute().actionGet();
  assertHitCount(results5,neighbors.size() + 1);
}
