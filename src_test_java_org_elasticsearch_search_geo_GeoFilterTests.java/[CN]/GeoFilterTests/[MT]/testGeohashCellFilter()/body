{
  String geohash=randomhash(10);
  logger.info("Testing geohash_cell filter for [{}]",geohash);
  Collection<? extends CharSequence> neighbors=GeoHashUtils.neighbors(geohash);
  Collection<? extends CharSequence> parentNeighbors=GeoHashUtils.neighbors(geohash.substring(0,geohash.length() - 1));
  logger.info("Neighbors {}",neighbors);
  logger.info("Parent Neighbors {}",parentNeighbors);
  ensureYellow();
  client().admin().indices().prepareCreate("locations").addMapping("location","pin","type=geo_point,geohash_prefix=true,latlon=false").execute().actionGet();
  client().prepareIndex("locations","location","1").setCreate(true).setSource("pin",geohash).execute().actionGet();
  Iterator<? extends CharSequence> iterator=neighbors.iterator();
  for (int i=0; iterator.hasNext(); i++) {
    client().prepareIndex("locations","location","N" + i).setCreate(true).setSource("pin",iterator.next()).execute().actionGet();
  }
  client().prepareIndex("locations","location","p").setCreate(true).setSource("pin",geohash.substring(0,geohash.length() - 1)).execute().actionGet();
  iterator=parentNeighbors.iterator();
  for (int i=0; iterator.hasNext(); i++) {
    client().prepareIndex("locations","location","p" + i).setCreate(true).setSource("pin",iterator.next()).execute().actionGet();
  }
  client().admin().indices().prepareRefresh("locations").execute().actionGet();
  Map<GeohashCellFilter.Builder,Long> expectedCounts=new HashMap<>();
  Map<GeohashCellFilter.Builder,String[]> expectedResults=new HashMap<>();
  Map<GeohashCellFilter.Builder,String> cacheKeys=new HashMap<>();
  expectedCounts.put(geoHashCellFilter("pin",geohash,false),1L);
  expectedCounts.put(geoHashCellFilter("pin",geohash.substring(0,geohash.length() - 1),true),2L + neighbors.size() + parentNeighbors.size());
  GeoPoint point=GeoHashUtils.decode(geohash);
  int precision=geohash.length();
  expectedCounts.put(geoHashCellFilter("pin",point).neighbors(true).precision(precision),1L + neighbors.size());
  logger.info("random testing of setting");
  List<GeohashCellFilter.Builder> filterBuilders=new ArrayList<>(expectedCounts.keySet());
  for (int j=filterBuilders.size() * 2 * randomIntBetween(1,5); j > 0; j--) {
    Collections.shuffle(filterBuilders,getRandom());
    for (    GeohashCellFilter.Builder builder : filterBuilders) {
      if (randomBoolean()) {
        builder.cache(randomBoolean());
      }
      if (randomBoolean()) {
        String cacheKey=cacheKeys.get(builder);
        if (cacheKey == null) {
          cacheKey=randomUnicodeOfLength(6);
          cacheKeys.put(builder,cacheKey);
        }
        builder.cacheKey(cacheKey);
      }
 else {
        builder.cacheKey(null);
      }
      try {
        SearchResponse response=client().prepareSearch("locations").setQuery(QueryBuilders.matchAllQuery()).setPostFilter(builder).get();
        assertHitCount(response,expectedCounts.get(builder));
        String[] expectedIds=expectedResults.get(builder);
        if (expectedIds == null) {
          ArrayList<String> ids=new ArrayList<>();
          for (          SearchHit hit : response.getHits()) {
            ids.add(hit.id());
          }
          expectedResults.put(builder,ids.toArray(Strings.EMPTY_ARRAY));
          continue;
        }
        assertSearchHits(response,expectedIds);
      }
 catch (      AssertionError error) {
        throw new AssertionError(error.getMessage() + "\n geohash_cell filter:" + builder,error);
      }
    }
  }
  logger.info("Testing lat/lon format");
  String pointTest1="{\"geohash_cell\": {\"pin\": {\"lat\": " + point.lat() + ",\"lon\": "+ point.lon()+ "},\"precision\": "+ precision+ ",\"neighbors\": true}}";
  SearchResponse results3=client().prepareSearch("locations").setQuery(QueryBuilders.matchAllQuery()).setPostFilter(pointTest1).execute().actionGet();
  assertHitCount(results3,neighbors.size() + 1);
  logger.info("Testing String format");
  String pointTest2="{\"geohash_cell\": {\"pin\": \"" + point.lat() + ","+ point.lon()+ "\",\"precision\": "+ precision+ ",\"neighbors\": true}}";
  SearchResponse results4=client().prepareSearch("locations").setQuery(QueryBuilders.matchAllQuery()).setPostFilter(pointTest2).execute().actionGet();
  assertHitCount(results4,neighbors.size() + 1);
  logger.info("Testing Array format");
  String pointTest3="{\"geohash_cell\": {\"pin\": [" + point.lon() + ","+ point.lat()+ "],\"precision\": "+ precision+ ",\"neighbors\": true}}";
  SearchResponse results5=client().prepareSearch("locations").setQuery(QueryBuilders.matchAllQuery()).setPostFilter(pointTest3).execute().actionGet();
  assertHitCount(results5,neighbors.size() + 1);
}
