{
  Path configDir=newTempDirPath();
  Path mappingsDir=configDir.resolve("mappings");
  Path indexMappings=mappingsDir.resolve("index").resolve("type.json");
  Path defaultMappings=mappingsDir.resolve("_default").resolve("type.json");
  try {
    Files.createDirectories(indexMappings.getParent());
    Files.createDirectories(defaultMappings.getParent());
    try (OutputStream stream=Files.newOutputStream(indexMappings);XContentBuilder builder=new XContentBuilder(JsonXContent.jsonXContent,stream)){
      builder.startObject().startObject("type").startObject("properties").startObject("f").field("type","string").endObject().endObject().endObject().endObject();
    }
     try (OutputStream stream=Files.newOutputStream(defaultMappings);XContentBuilder builder=new XContentBuilder(JsonXContent.jsonXContent,stream)){
      builder.startObject().startObject("type").startObject("properties").startObject("g").field("type","string").endObject().endObject().endObject().endObject();
    }
     Settings settings=ImmutableSettings.builder().put(ClusterName.SETTING,NAME).put("node.name",NAME).put("path.home",newTempDirPath()).put("path.conf",configDir.toAbsolutePath()).put("http.enabled",false).build();
    try (Node node=NodeBuilder.nodeBuilder().local(true).data(true).settings(settings).node()){
      assertAcked(node.client().admin().indices().prepareCreate("index").addMapping("type","h","type=string").get());
      try {
        final GetMappingsResponse response=node.client().admin().indices().prepareGetMappings("index").get();
        assertTrue(response.mappings().toString(),response.mappings().containsKey("index"));
        MappingMetaData mappings=response.mappings().get("index").get("type");
        assertNotNull(mappings);
        Map<?,?> properties=(Map<?,?>)(mappings.getSourceAsMap().get("properties"));
        assertNotNull(properties);
        assertEquals(ImmutableSet.of("f","g","h"),properties.keySet());
      }
  finally {
        assertAcked(node.client().admin().indices().prepareDelete("index"));
      }
    }
   }
  finally {
    IOUtils.rm(configDir);
  }
}
