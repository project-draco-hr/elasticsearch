{
  File configDir=Files.createTempDir();
  File mappingsDir=new File(configDir,"mappings");
  File indexMappings=new File(new File(mappingsDir,"index"),"type.json");
  File defaultMappings=new File(new File(mappingsDir,"_default"),"type.json");
  try {
    indexMappings.getParentFile().mkdirs();
    defaultMappings.getParentFile().mkdirs();
    try (XContentBuilder builder=new XContentBuilder(JsonXContent.jsonXContent,new FileOutputStream(indexMappings))){
      builder.startObject().startObject("type").startObject("properties").startObject("f").field("type","string").endObject().endObject().endObject().endObject();
    }
     try (XContentBuilder builder=new XContentBuilder(JsonXContent.jsonXContent,new FileOutputStream(defaultMappings))){
      builder.startObject().startObject("type").startObject("properties").startObject("g").field("type","string").endObject().endObject().endObject().endObject();
    }
     Settings settings=ImmutableSettings.builder().put(ClusterName.SETTING,NAME).put("node.name",NAME).put("path.conf",configDir.getAbsolutePath()).put("http.enabled",false).put("index.store.type","ram").put("gateway.type","none").build();
    try (Node node=NodeBuilder.nodeBuilder().local(true).data(true).settings(settings).build()){
      node.start();
      assertAcked(node.client().admin().indices().prepareCreate("index").addMapping("type","h","type=string").get());
      final GetMappingsResponse response=node.client().admin().indices().prepareGetMappings("index").get();
      assertTrue(response.mappings().toString(),response.mappings().containsKey("index"));
      MappingMetaData mappings=response.mappings().get("index").get("type");
      assertNotNull(mappings);
      Map<?,?> properties=(Map<?,?>)(mappings.getSourceAsMap().get("properties"));
      assertNotNull(properties);
      assertEquals(ImmutableSet.of("f","g","h"),properties.keySet());
    }
   }
  finally {
    FileSystemUtils.deleteRecursively(configDir);
  }
}
