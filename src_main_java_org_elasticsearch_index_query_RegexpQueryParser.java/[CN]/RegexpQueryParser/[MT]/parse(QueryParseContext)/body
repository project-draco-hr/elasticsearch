{
  XContentParser parser=parseContext.parser();
  XContentParser.Token token=parser.nextToken();
  if (token != XContentParser.Token.FIELD_NAME) {
    throw new QueryParsingException(parseContext.index(),"[regexp] query malformed, no field");
  }
  String fieldName=parser.currentName();
  String rewriteMethod=null;
  Object value=null;
  float boost=1.0f;
  int flagsValue=-1;
  String queryName=null;
  token=parser.nextToken();
  if (token == XContentParser.Token.START_OBJECT) {
    String currentFieldName=null;
    while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
      if (token == XContentParser.Token.FIELD_NAME) {
        currentFieldName=parser.currentName();
      }
 else       if (token.isValue()) {
        if ("value".equals(currentFieldName)) {
          value=parser.objectBytes();
        }
 else         if ("boost".equals(currentFieldName)) {
          boost=parser.floatValue();
        }
 else         if ("rewrite".equals(currentFieldName)) {
          rewriteMethod=parser.textOrNull();
        }
 else         if ("flags".equals(currentFieldName)) {
          String flags=parser.textOrNull();
          flagsValue=RegexpFlag.resolveValue(flags);
        }
 else         if ("flags_value".equals(currentFieldName)) {
          flagsValue=parser.intValue();
          if (flagsValue < 0) {
            flagsValue=RegExp.ALL;
          }
        }
 else         if ("_name".equals(currentFieldName)) {
          queryName=parser.text();
        }
      }
 else {
        throw new QueryParsingException(parseContext.index(),"[regexp] query does not support [" + currentFieldName + "]");
      }
    }
    parser.nextToken();
  }
 else {
    value=parser.objectBytes();
    parser.nextToken();
  }
  if (value == null) {
    throw new QueryParsingException(parseContext.index(),"No value specified for regexp query");
  }
  MultiTermQuery.RewriteMethod method=QueryParsers.parseRewriteMethod(rewriteMethod,null);
  Query query=null;
  MapperService.SmartNameFieldMappers smartNameFieldMappers=parseContext.smartFieldMappers(fieldName);
  if (smartNameFieldMappers != null && smartNameFieldMappers.hasMapper()) {
    if (smartNameFieldMappers.explicitTypeInNameWithDocMapper()) {
      String[] previousTypes=QueryParseContext.setTypesWithPrevious(new String[]{smartNameFieldMappers.docMapper().type()});
      try {
        query=smartNameFieldMappers.mapper().regexpQuery(value,flagsValue,method,parseContext);
      }
  finally {
        QueryParseContext.setTypes(previousTypes);
      }
    }
 else {
      query=smartNameFieldMappers.mapper().regexpQuery(value,flagsValue,method,parseContext);
    }
  }
  if (query == null) {
    RegexpQuery regexpQuery=new RegexpQuery(new Term(fieldName,BytesRefs.toBytesRef(value)),flagsValue);
    if (method != null) {
      regexpQuery.setRewriteMethod(method);
    }
    query=regexpQuery;
  }
  query.setBoost(boost);
  query=wrapSmartNameQuery(query,smartNameFieldMappers,parseContext);
  if (queryName != null) {
    parseContext.addNamedQuery(queryName,query);
  }
  return query;
}
