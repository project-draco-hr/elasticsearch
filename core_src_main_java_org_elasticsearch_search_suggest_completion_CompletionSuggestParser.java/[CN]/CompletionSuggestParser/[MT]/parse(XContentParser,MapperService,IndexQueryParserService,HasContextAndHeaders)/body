{
  XContentParser.Token token;
  String fieldName=null;
  CompletionSuggestionContext suggestion=new CompletionSuggestionContext(completionSuggester);
  XContentParser contextParser=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      fieldName=parser.currentName();
    }
 else     if (token.isValue()) {
      if (!parseSuggestContext(parser,mapperService,fieldName,suggestion,queryParserService.parseFieldMatcher())) {
        if (token == XContentParser.Token.VALUE_BOOLEAN && "fuzzy".equals(fieldName)) {
          suggestion.setFuzzy(parser.booleanValue());
        }
      }
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("fuzzy".equals(fieldName)) {
        suggestion.setFuzzy(true);
        String fuzzyConfigName=null;
        while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
          if (token == XContentParser.Token.FIELD_NAME) {
            fuzzyConfigName=parser.currentName();
          }
 else           if (token.isValue()) {
            if (queryParserService.parseFieldMatcher().match(fuzzyConfigName,FUZZINESS)) {
              suggestion.setFuzzyEditDistance(Fuzziness.parse(parser).asDistance());
            }
 else             if ("transpositions".equals(fuzzyConfigName)) {
              suggestion.setFuzzyTranspositions(parser.booleanValue());
            }
 else             if ("min_length".equals(fuzzyConfigName) || "minLength".equals(fuzzyConfigName)) {
              suggestion.setFuzzyMinLength(parser.intValue());
            }
 else             if ("prefix_length".equals(fuzzyConfigName) || "prefixLength".equals(fuzzyConfigName)) {
              suggestion.setFuzzyPrefixLength(parser.intValue());
            }
 else             if ("unicode_aware".equals(fuzzyConfigName) || "unicodeAware".equals(fuzzyConfigName)) {
              suggestion.setFuzzyUnicodeAware(parser.booleanValue());
            }
          }
        }
      }
 else       if ("context".equals(fieldName)) {
        XContentBuilder builder=XContentFactory.contentBuilder(parser.contentType());
        builder.copyCurrentStructure(parser);
        BytesReference bytes=builder.bytes();
        contextParser=parser.contentType().xContent().createParser(bytes);
      }
 else {
        throw new IllegalArgumentException("suggester [completion] doesn't support field [" + fieldName + "]");
      }
    }
 else {
      throw new IllegalArgumentException("suggester[completion]  doesn't support field [" + fieldName + "]");
    }
  }
  suggestion.fieldType((CompletionFieldMapper.CompletionFieldType)mapperService.smartNameFieldType(suggestion.getField()));
  CompletionFieldMapper.CompletionFieldType fieldType=suggestion.fieldType();
  if (fieldType != null) {
    if (fieldType.requiresContext()) {
      if (contextParser == null) {
        throw new IllegalArgumentException("suggester [completion] requires context to be setup");
      }
 else {
        contextParser.nextToken();
        List<ContextQuery> contextQueries=ContextQuery.parseQueries(fieldType.getContextMapping(),contextParser);
        suggestion.setContextQuery(contextQueries);
      }
    }
 else     if (contextParser != null) {
      throw new IllegalArgumentException("suggester [completion] doesn't expect any context");
    }
  }
  return suggestion;
}
