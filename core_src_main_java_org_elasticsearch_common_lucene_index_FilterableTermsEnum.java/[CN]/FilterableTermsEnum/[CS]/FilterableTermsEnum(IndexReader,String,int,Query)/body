{
  if ((docsEnumFlag != PostingsEnum.FREQS) && (docsEnumFlag != PostingsEnum.NONE)) {
    throw new IllegalArgumentException("invalid docsEnumFlag of " + docsEnumFlag);
  }
  this.docsEnumFlag=docsEnumFlag;
  List<LeafReaderContext> leaves=reader.leaves();
  List<Holder> enums=new ArrayList<>(leaves.size());
  final Weight weight;
  if (filter == null) {
    weight=null;
  }
 else {
    final IndexSearcher searcher=new IndexSearcher(reader);
    searcher.setQueryCache(null);
    weight=searcher.createNormalizedWeight(filter,false);
  }
  for (  LeafReaderContext context : leaves) {
    Terms terms=context.reader().terms(field);
    if (terms == null) {
      continue;
    }
    TermsEnum termsEnum=terms.iterator();
    if (termsEnum == null) {
      continue;
    }
    BitSet bits=null;
    if (weight != null) {
      Scorer scorer=weight.scorer(context);
      if (scorer == null) {
        continue;
      }
      DocIdSetIterator docs=scorer.iterator();
      final Bits liveDocs=context.reader().getLiveDocs();
      if (liveDocs != null) {
        docs=new FilteredDocIdSetIterator(docs){
          @Override protected boolean match(          int doc){
            return liveDocs.get(doc);
          }
        }
;
      }
      bits=BitSet.of(docs,context.reader().maxDoc());
    }
    enums.add(new Holder(termsEnum,bits));
  }
  this.enums=enums.toArray(new Holder[enums.size()]);
}
