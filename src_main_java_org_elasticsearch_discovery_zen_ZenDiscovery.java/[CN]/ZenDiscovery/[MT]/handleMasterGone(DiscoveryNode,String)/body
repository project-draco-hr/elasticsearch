{
  if (lifecycleState() != Lifecycle.State.STARTED) {
    return;
  }
  if (master) {
    return;
  }
  logger.info("master_left [{}], reason [{}]",masterNode,reason);
  clusterService.submitStateUpdateTask("zen-disco-master_failed (" + masterNode + ")",new ProcessedClusterStateUpdateTask(){
    @Override public ClusterState execute(    ClusterState currentState){
      if (!masterNode.id().equals(currentState.nodes().masterNodeId())) {
        return currentState;
      }
      DiscoveryNodes.Builder nodesBuilder=DiscoveryNodes.newNodesBuilder().putAll(currentState.nodes()).remove(masterNode.id()).masterNodeId(null);
      if (!electMaster.hasEnoughMasterNodes(nodesBuilder.build())) {
        return rejoin(ClusterState.builder().state(currentState).nodes(nodesBuilder).build(),"not enough master nodes after master left (reason = " + reason + ")");
      }
      final DiscoveryNode electedMaster=electMaster.electMaster(nodesBuilder.build());
      if (localNode.equals(electedMaster)) {
        master=true;
        masterFD.stop("got elected as new master since master left (reason = " + reason + ")");
        nodesFD.start();
        nodesBuilder.masterNodeId(localNode.id());
        latestDiscoNodes=nodesBuilder.build();
        return newClusterStateBuilder().state(currentState).nodes(latestDiscoNodes).build();
      }
 else {
        nodesFD.stop();
        if (electedMaster != null) {
          nodesBuilder.masterNodeId(electedMaster.id());
          masterFD.restart(electedMaster,"possible elected master since master left (reason = " + reason + ")");
          latestDiscoNodes=nodesBuilder.build();
          return newClusterStateBuilder().state(currentState).nodes(latestDiscoNodes).build();
        }
 else {
          return rejoin(newClusterStateBuilder().state(currentState).nodes(nodesBuilder.build()).build(),"master_left and no other node elected to become master");
        }
      }
    }
    @Override public void clusterStateProcessed(    ClusterState clusterState){
      sendInitialStateEventIfNeeded();
    }
  }
);
}
