{
  if (lifecycleState() != Lifecycle.State.STARTED) {
    return;
  }
  if (master) {
    return;
  }
  logger.info("master_left [{}], reason [{}]",masterNode,reason);
  clusterService.submitStateUpdateTask("zen-disco-master_failed (" + masterNode + ")",Priority.IMMEDIATE,new ProcessedClusterStateNonMasterUpdateTask(){
    @Override public ClusterState execute(    ClusterState currentState){
      if (!masterNode.id().equals(currentState.nodes().masterNodeId())) {
        return currentState;
      }
      DiscoveryNodes discoveryNodes=DiscoveryNodes.builder(currentState.nodes()).remove(masterNode.id()).masterNodeId(null).build();
      latestDiscoNodes=discoveryNodes;
      ArrayList<ProcessClusterState> pendingNewClusterStates=new ArrayList<>();
      processNewClusterStates.drainTo(pendingNewClusterStates);
      logger.trace("removed [{}] pending cluster states",pendingNewClusterStates.size());
      if (rejoinOnMasterGone) {
        return rejoin(ClusterState.builder(currentState).nodes(discoveryNodes).build(),"master left (reason = " + reason + ")");
      }
      if (!electMaster.hasEnoughMasterNodes(discoveryNodes)) {
        return rejoin(ClusterState.builder(currentState).nodes(discoveryNodes).build(),"not enough master nodes after master left (reason = " + reason + ")");
      }
      final DiscoveryNode electedMaster=electMaster.electMaster(discoveryNodes);
      if (localNode.equals(electedMaster)) {
        master=true;
        masterFD.stop("got elected as new master since master left (reason = " + reason + ")");
        nodesFD.start();
        discoveryNodes=DiscoveryNodes.builder(discoveryNodes).masterNodeId(localNode.id()).build();
        latestDiscoNodes=discoveryNodes;
        return ClusterState.builder(currentState).nodes(latestDiscoNodes).build();
      }
 else {
        nodesFD.stop();
        if (electedMaster != null) {
          discoveryNodes=DiscoveryNodes.builder(discoveryNodes).masterNodeId(electedMaster.id()).build();
          masterFD.restart(electedMaster,"possible elected master since master left (reason = " + reason + ")");
          latestDiscoNodes=discoveryNodes;
          return ClusterState.builder(currentState).nodes(latestDiscoNodes).build();
        }
 else {
          return rejoin(ClusterState.builder(currentState).nodes(discoveryNodes).build(),"master_left and no other node elected to become master");
        }
      }
    }
    @Override public void onFailure(    String source,    Throwable t){
      logger.error("unexpected failure during [{}]",t,source);
    }
    @Override public void clusterStateProcessed(    String source,    ClusterState oldState,    ClusterState newState){
      sendInitialStateEventIfNeeded();
    }
  }
);
}
