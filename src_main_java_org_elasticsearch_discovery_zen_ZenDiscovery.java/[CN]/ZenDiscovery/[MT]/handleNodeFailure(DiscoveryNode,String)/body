{
  if (lifecycleState() != Lifecycle.State.STARTED) {
    return;
  }
  if (!master) {
    return;
  }
  clusterService.submitStateUpdateTask("zen-disco-node_failed(" + node + "), reason "+ reason,Priority.URGENT,new ProcessedClusterStateUpdateTask(){
    @Override public ClusterState execute(    ClusterState currentState){
      DiscoveryNodes.Builder builder=new DiscoveryNodes.Builder().putAll(currentState.nodes()).remove(node.id());
      latestDiscoNodes=builder.build();
      currentState=ClusterState.builder(currentState).nodes(latestDiscoNodes).build();
      if (!electMaster.hasEnoughMasterNodes(currentState.nodes())) {
        return rejoin(currentState,"not enough master nodes");
      }
      RoutingAllocation.Result routingResult=allocationService.reroute(ClusterState.builder(currentState).build());
      return ClusterState.builder(currentState).routingResult(routingResult).build();
    }
    @Override public void onFailure(    String source,    Throwable t){
      logger.error("unexpected failure during [{}]",t,source);
    }
    @Override public void clusterStateProcessed(    String source,    ClusterState oldState,    ClusterState newState){
      sendInitialStateEventIfNeeded();
    }
  }
);
}
