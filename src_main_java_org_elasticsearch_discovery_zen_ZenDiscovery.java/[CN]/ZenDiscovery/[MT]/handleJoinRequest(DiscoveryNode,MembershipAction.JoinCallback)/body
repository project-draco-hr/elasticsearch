{
  if (!master) {
    throw new ElasticsearchIllegalStateException("Node [" + localNode + "] not master for join request from ["+ node+ "]");
  }
  if (!transportService.addressSupported(node.address().getClass())) {
    logger.warn("received a wrong address type from [{}], ignoring...",node);
  }
 else {
    transportService.connectToNode(node);
    membership.sendValidateJoinRequestBlocking(node,joinTimeout);
    clusterService.submitStateUpdateTask("zen-disco-receive(join from node[" + node + "])",Priority.IMMEDIATE,new ProcessedClusterStateUpdateTask(){
      @Override public ClusterState execute(      ClusterState currentState){
        if (currentState.nodes().nodeExists(node.id())) {
          logger.info("received a join request for an existing node [{}]",node);
          return ClusterState.builder(currentState).build();
        }
        DiscoveryNodes.Builder builder=DiscoveryNodes.builder(currentState.nodes());
        for (        DiscoveryNode existingNode : currentState.nodes()) {
          if (node.address().equals(existingNode.address())) {
            builder.remove(existingNode.id());
            logger.warn("received join request from node [{}], but found existing node {} with same address, removing existing node",node,existingNode);
          }
        }
        latestDiscoNodes=builder.build();
        return ClusterState.builder(currentState).nodes(latestDiscoNodes.newNode(node)).build();
      }
      @Override public void onFailure(      String source,      Throwable t){
        if (t instanceof ClusterService.NoLongerMasterException) {
          logger.debug("not processing [{}] as we are no longer master",source);
        }
 else {
          logger.error("unexpected failure during [{}]",t,source);
        }
        callback.onFailure(t);
      }
      @Override public void clusterStateProcessed(      String source,      ClusterState oldState,      ClusterState newState){
        callback.onSuccess();
      }
    }
);
  }
}
