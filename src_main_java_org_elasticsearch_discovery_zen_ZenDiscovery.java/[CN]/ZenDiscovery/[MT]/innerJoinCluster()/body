{
  boolean retry=true;
  while (retry) {
    if (lifecycle.stoppedOrClosed()) {
      return;
    }
    retry=false;
    DiscoveryNode masterNode=findMaster();
    if (masterNode == null) {
      logger.trace("no masterNode returned");
      retry=true;
      continue;
    }
    if (localNode.equals(masterNode)) {
      this.master=true;
      nodesFD.start();
      clusterService.submitStateUpdateTask("zen-disco-join (elected_as_master)",Priority.IMMEDIATE,new ProcessedClusterStateNonMasterUpdateTask(){
        @Override public ClusterState execute(        ClusterState currentState){
          DiscoveryNodes.Builder builder=new DiscoveryNodes.Builder(latestDiscoNodes).localNodeId(localNode.id()).masterNodeId(localNode.id()).put(localNode);
          latestDiscoNodes=builder.build();
          ClusterBlocks clusterBlocks=ClusterBlocks.builder().blocks(currentState.blocks()).removeGlobalBlock(discoverySettings.getNoMasterBlock()).build();
          currentState=ClusterState.builder(currentState).nodes(latestDiscoNodes).blocks(clusterBlocks).build();
          RoutingAllocation.Result result=allocationService.reroute(currentState);
          return ClusterState.builder(currentState).routingResult(result).build();
        }
        @Override public void onFailure(        String source,        Throwable t){
          logger.error("unexpected failure during [{}]",t,source);
        }
        @Override public void clusterStateProcessed(        String source,        ClusterState oldState,        ClusterState newState){
          sendInitialStateEventIfNeeded();
          long count=clusterJoinsCounter.incrementAndGet();
          logger.trace("cluster joins counter set to [{}] (elected as master)",count);
        }
      }
);
    }
 else {
      this.master=false;
      retry=!joinElectedMaster(masterNode);
      if (retry) {
        continue;
      }
      if (latestDiscoNodes.masterNode() == null) {
        logger.debug("no master node is set, despite of join request completing. retrying pings");
        retry=true;
        continue;
      }
      masterFD.start(masterNode,"initial_join");
      long count=clusterJoinsCounter.incrementAndGet();
      logger.trace("cluster joins counter set to [{}] (joined master)",count);
    }
  }
}
