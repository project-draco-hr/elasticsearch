{
  boolean retry=true;
  while (retry) {
    if (lifecycle.stoppedOrClosed()) {
      return;
    }
    retry=false;
    DiscoveryNode masterNode=findMaster();
    if (masterNode == null) {
      logger.trace("no masterNode returned");
      retry=true;
      continue;
    }
    if (localNode.equals(masterNode)) {
      this.master=true;
      nodesFD.start();
      clusterService.submitStateUpdateTask("zen-disco-join (elected_as_master)",Priority.URGENT,new ProcessedClusterStateUpdateTask(){
        @Override public ClusterState execute(        ClusterState currentState){
          DiscoveryNodes.Builder builder=new DiscoveryNodes.Builder().localNodeId(localNode.id()).masterNodeId(localNode.id()).put(localNode);
          latestDiscoNodes=builder.build();
          ClusterBlocks clusterBlocks=ClusterBlocks.builder().blocks(currentState.blocks()).removeGlobalBlock(discoverySettings.getNoMasterBlock()).build();
          return ClusterState.builder(currentState).nodes(latestDiscoNodes).blocks(clusterBlocks).build();
        }
        @Override public void onFailure(        String source,        Throwable t){
          logger.error("unexpected failure during [{}]",t,source);
        }
        @Override public void clusterStateProcessed(        String source,        ClusterState oldState,        ClusterState newState){
          sendInitialStateEventIfNeeded();
        }
      }
);
    }
 else {
      this.master=false;
      try {
        transportService.connectToNode(masterNode);
      }
 catch (      Exception e) {
        logger.warn("failed to connect to master [{}], retrying...",e,masterNode);
        retry=true;
        continue;
      }
      try {
        membership.sendJoinRequestBlocking(masterNode,localNode,joinTimeout);
      }
 catch (      Exception e) {
        if (e instanceof ElasticsearchException) {
          logger.info("failed to send join request to master [{}], reason [{}]",masterNode,((ElasticsearchException)e).getDetailedMessage());
        }
 else {
          logger.info("failed to send join request to master [{}], reason [{}]",masterNode,e.getMessage());
        }
        if (logger.isTraceEnabled()) {
          logger.trace("detailed failed reason",e);
        }
        retry=true;
        continue;
      }
      masterFD.start(masterNode,"initial_join");
    }
  }
}
