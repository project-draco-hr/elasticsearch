{
  if (master) {
    clusterService.submitStateUpdateTask("zen-disco-master_receive_cluster_state_from_another_master [" + newState.nodes().masterNode() + "]",Priority.URGENT,new ClusterStateUpdateTask(){
      @Override public ClusterState execute(      ClusterState currentState){
        if (newState.version() > currentState.version()) {
          logger.warn("received cluster state from [{}] which is also master but with a newer cluster_state, rejoining to cluster...",newState.nodes().masterNode());
          return rejoin(currentState,"zen-disco-master_receive_cluster_state_from_another_master [" + newState.nodes().masterNode() + "]");
        }
 else {
          logger.warn("received cluster state from [{}] which is also master but with an older cluster_state, telling [{}] to rejoin the cluster",newState.nodes().masterNode(),newState.nodes().masterNode());
          transportService.sendRequest(newState.nodes().masterNode(),RejoinClusterRequestHandler.ACTION,new RejoinClusterRequest(currentState.nodes().localNodeId()),new EmptyTransportResponseHandler(ThreadPool.Names.SAME){
            @Override public void handleException(            TransportException exp){
              logger.warn("failed to send rejoin request to [{}]",exp,newState.nodes().masterNode());
            }
          }
);
          return currentState;
        }
      }
    }
);
  }
 else {
    if (newState.nodes().localNode() == null) {
      logger.warn("received a cluster state from [{}] and not part of the cluster, should not happen",newState.nodes().masterNode());
    }
 else {
      if (currentJoinThread != null) {
        logger.debug("got a new state from master node, though we are already trying to rejoin the cluster");
      }
      clusterService.submitStateUpdateTask("zen-disco-receive(from master [" + newState.nodes().masterNode() + "])",Priority.URGENT,new ProcessedClusterStateUpdateTask(){
        @Override public ClusterState execute(        ClusterState currentState){
          latestDiscoNodes=newState.nodes();
          if (masterFD.masterNode() == null || !masterFD.masterNode().equals(latestDiscoNodes.masterNode())) {
            masterFD.restart(latestDiscoNodes.masterNode(),"new cluster state received and we are monitoring the wrong master [" + masterFD.masterNode() + "]");
          }
          ClusterState.Builder builder=ClusterState.builder().state(newState);
          if (newState.routingTable().version() == currentState.routingTable().version()) {
            builder.routingTable(currentState.routingTable());
          }
          if (newState.metaData().version() == currentState.metaData().version()) {
            builder.metaData(currentState.metaData());
          }
 else {
            MetaData.Builder metaDataBuilder=MetaData.builder().metaData(newState.metaData()).removeAllIndices();
            for (            IndexMetaData indexMetaData : newState.metaData()) {
              IndexMetaData currentIndexMetaData=currentState.metaData().index(indexMetaData.index());
              if (currentIndexMetaData == null || currentIndexMetaData.version() != indexMetaData.version()) {
                metaDataBuilder.put(indexMetaData,false);
              }
 else {
                metaDataBuilder.put(currentIndexMetaData,false);
              }
            }
            builder.metaData(metaDataBuilder);
          }
          return builder.build();
        }
        @Override public void clusterStateProcessed(        ClusterState clusterState){
          sendInitialStateEventIfNeeded();
        }
      }
);
    }
  }
}
