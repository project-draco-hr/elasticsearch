{
  super(settings);
  this.clusterName=clusterName;
  this.threadPool=threadPool;
  this.clusterService=clusterService;
  this.transportService=transportService;
  this.discoveryNodeService=discoveryNodeService;
  this.pingService=pingService;
  this.pingTimeout=settings.getAsTime("discovery.zen.ping.timeout",settings.getAsTime("discovery.zen.ping_timeout",componentSettings.getAsTime("ping_timeout",componentSettings.getAsTime("initial_ping_timeout",timeValueSeconds(3)))));
  this.sendLeaveRequest=componentSettings.getAsBoolean("send_leave_request",true);
  this.masterElectionFilterClientNodes=settings.getAsBoolean("discovery.zen.master_election.filter_client",true);
  this.masterElectionFilterDataNodes=settings.getAsBoolean("discovery.zen.master_election.filter_data",false);
  logger.debug("using ping.timeout [{}], master_election.filter_client [{}], master_election.filter_data [{}]",pingTimeout,masterElectionFilterClientNodes,masterElectionFilterDataNodes);
  this.electMaster=new ElectMasterService(settings);
  nodeSettingsService.addListener(new ApplySettings());
  this.masterFD=new MasterFaultDetection(settings,threadPool,transportService,this);
  this.masterFD.addListener(new MasterNodeFailureListener());
  this.nodesFD=new NodesFaultDetection(settings,threadPool,transportService);
  this.nodesFD.addListener(new NodeFailureListener());
  this.publishClusterState=new PublishClusterStateAction(settings,transportService,this,new NewClusterStateListener());
  this.pingService.setNodesProvider(this);
  this.membership=new MembershipAction(settings,transportService,this,new MembershipListener());
  transportService.registerHandler(RejoinClusterRequestHandler.ACTION,new RejoinClusterRequestHandler());
}
