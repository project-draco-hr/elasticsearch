{
  String releventHeaderName="relevant_" + randomHeaderKey;
  for (  RestController restController : internalCluster().getDataNodeInstances(RestController.class)) {
    restController.registerRelevantHeaders(releventHeaderName);
  }
  CloseableHttpClient httpClient=HttpClients.createDefault();
  HttpResponse response=new HttpRequestBuilder(httpClient).httpTransport(internalCluster().getDataNodeInstance(HttpServerTransport.class)).addHeader(randomHeaderKey,randomHeaderValue).addHeader(releventHeaderName,randomHeaderValue).path("/" + queryIndex + "/_search").execute();
  assertThat(response,hasStatus(OK));
  List<SearchRequest> searchRequests=ActionRecordingPlugin.requestsOfType(SearchRequest.class);
  assertThat(searchRequests,hasSize(greaterThan(0)));
  for (  SearchRequest searchRequest : searchRequests) {
    assertThat(searchRequest.hasHeader(releventHeaderName),is(true));
    assertThat(searchRequest.hasHeader(randomHeaderKey),is(false));
  }
}
