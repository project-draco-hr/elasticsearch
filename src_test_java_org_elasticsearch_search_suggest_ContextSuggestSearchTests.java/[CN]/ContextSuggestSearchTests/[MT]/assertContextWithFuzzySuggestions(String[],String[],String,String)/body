{
  String suggestionName=RandomStrings.randomAsciiOfLength(new Random(),10);
  CompletionSuggestionFuzzyBuilder context=new CompletionSuggestionFuzzyBuilder(suggestionName).field(FIELD).text(suggest).size(hits.length + 10).addContextField("st",prefix1).addContextField("nd",prefix2).setFuzziness(Fuzziness.TWO);
  SuggestRequestBuilder suggestionRequest=client().prepareSuggest(INDEX).addSuggestion(context);
  SuggestResponse suggestResponse=suggestionRequest.execute().actionGet();
  ArrayList<String> suggestions=new ArrayList<>();
  Suggest suggest2=suggestResponse.getSuggest();
  assertTrue(suggest2.iterator().hasNext());
  for (  Suggestion<? extends Entry<? extends Option>> s : suggest2) {
    CompletionSuggestion suggestion=(CompletionSuggestion)s;
    for (    CompletionSuggestion.Entry entry : suggestion) {
      List<CompletionSuggestion.Entry.Option> options=entry.getOptions();
      for (      CompletionSuggestion.Entry.Option option : options) {
        Map<String,Object> payload=option.getPayloadAsMap();
        String text=option.getText().string();
        assertThat(prefix1,Matchers.hasItemInArray(payload.get("categoryA")));
        assertThat(prefix2,Matchers.hasItemInArray(payload.get("categoryB")));
        suggestions.add(text);
      }
    }
  }
  assertSuggestionsMatch(suggestions,hits);
}
