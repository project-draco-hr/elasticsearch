{
  if (logger.isDebugEnabled()) {
    logger.debug("using profile[{}], worker_count[{}], port[{}], bind_host[{}], publish_host[{}], compress[{}], " + "connect_timeout[{}], connections_per_node[{}/{}/{}/{}/{}], receive_predictor[{}->{}]",name,workerCount,settings.get("port"),settings.get("bind_host"),settings.get("publish_host"),compress,connectTimeout,connectionsPerNodeRecovery,connectionsPerNodeBulk,connectionsPerNodeReg,connectionsPerNodeState,connectionsPerNodePing,receivePredictorMin,receivePredictorMax);
  }
  final ThreadFactory workerFactory=daemonThreadFactory(this.settings,HTTP_SERVER_WORKER_THREAD_NAME_PREFIX,name);
  final ServerBootstrap serverBootstrap=new ServerBootstrap();
  if (TCP_BLOCKING_SERVER.get(settings)) {
    serverBootstrap.group(new OioEventLoopGroup(workerCount,workerFactory));
    serverBootstrap.channel(OioServerSocketChannel.class);
  }
 else {
    serverBootstrap.group(new NioEventLoopGroup(workerCount,workerFactory));
    serverBootstrap.channel(NioServerSocketChannel.class);
  }
  serverBootstrap.childHandler(getServerChannelInitializer(name,settings));
  serverBootstrap.childOption(ChannelOption.TCP_NODELAY,TCP_NO_DELAY.get(settings));
  serverBootstrap.childOption(ChannelOption.SO_KEEPALIVE,TCP_KEEP_ALIVE.get(settings));
  final ByteSizeValue tcpSendBufferSize=TCP_SEND_BUFFER_SIZE.getDefault(settings);
  if (tcpSendBufferSize != null && tcpSendBufferSize.bytes() > 0) {
    serverBootstrap.childOption(ChannelOption.SO_SNDBUF,Math.toIntExact(tcpSendBufferSize.bytes()));
  }
  final ByteSizeValue tcpReceiveBufferSize=TCP_RECEIVE_BUFFER_SIZE.getDefault(settings);
  if (tcpReceiveBufferSize != null && tcpReceiveBufferSize.bytes() > 0) {
    serverBootstrap.childOption(ChannelOption.SO_RCVBUF,Math.toIntExact(tcpReceiveBufferSize.bytesAsInt()));
  }
  serverBootstrap.option(ChannelOption.RCVBUF_ALLOCATOR,recvByteBufAllocator);
  serverBootstrap.childOption(ChannelOption.RCVBUF_ALLOCATOR,recvByteBufAllocator);
  final boolean reuseAddress=TCP_REUSE_ADDRESS.get(settings);
  serverBootstrap.option(ChannelOption.SO_REUSEADDR,reuseAddress);
  serverBootstrap.childOption(ChannelOption.SO_REUSEADDR,reuseAddress);
  serverBootstrap.validate();
  serverBootstraps.put(name,serverBootstrap);
}
