{
  if (aggregator.isEmpty()) {
    return new InternalStringTermsFacet(facetName,comparatorType,size,ImmutableList.<InternalStringTermsFacet.TermEntry>of(),missing,total);
  }
 else {
    if (shardSize < EntryPriorityQueue.LIMIT) {
      EntryPriorityQueue ordered=new EntryPriorityQueue(shardSize,comparatorType.comparator());
      BytesRefCountIterator iter=aggregator.getIter();
      while (iter.next() != null) {
        ordered.insertWithOverflow(new InternalStringTermsFacet.TermEntry(iter.makeSafe(),iter.count()));
      }
      InternalStringTermsFacet.TermEntry[] list=new InternalStringTermsFacet.TermEntry[ordered.size()];
      for (int i=ordered.size() - 1; i >= 0; i--) {
        list[i]=((InternalStringTermsFacet.TermEntry)ordered.pop());
      }
      return new InternalStringTermsFacet(facetName,comparatorType,size,Arrays.asList(list),missing,total);
    }
 else {
      BoundedTreeSet<InternalStringTermsFacet.TermEntry> ordered=new BoundedTreeSet<InternalStringTermsFacet.TermEntry>(comparatorType.comparator(),shardSize);
      BytesRefCountIterator iter=aggregator.getIter();
      while (iter.next() != null) {
        ordered.add(new InternalStringTermsFacet.TermEntry(iter.makeSafe(),iter.count()));
      }
      return new InternalStringTermsFacet(facetName,comparatorType,size,ordered,missing,total);
    }
  }
}
