{
  MultiTermVectorsRequest multiTermVectorsRequest=new MultiTermVectorsRequest();
  multiTermVectorsRequest.listenerThreaded(false);
  multiTermVectorsRequest.preference(request.param("preference"));
  String[] sFields=null;
  String sField=request.param("fields");
  if (sField != null) {
    sFields=Strings.splitStringByCommaToArray(sField);
  }
  try {
    multiTermVectorsRequest.add(request.param("index"),request.param("type"),sFields,request.content());
  }
 catch (  Throwable t) {
    try {
      channel.sendResponse(new XContentThrowableRestResponse(request,t));
    }
 catch (    Throwable tIO) {
      logger.error("Failed to send failure response",tIO);
    }
    return;
  }
  client.multiTermVectors(multiTermVectorsRequest,new ActionListener<MultiTermVectorsResponse>(){
    @Override public void onResponse(    MultiTermVectorsResponse response){
      try {
        XContentBuilder builder=restContentBuilder(request);
        response.toXContent(builder,request);
        channel.sendResponse(new XContentRestResponse(request,OK,builder));
      }
 catch (      Throwable t) {
        onFailure(t);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      Throwable t) {
        logger.error("Failed to send failure response",t);
      }
    }
  }
);
}
