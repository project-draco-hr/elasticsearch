{
  MultiTermVectorsRequest multiTermVectorsRequest=new MultiTermVectorsRequest();
  multiTermVectorsRequest.listenerThreaded(false);
  TermVectorRequest template=new TermVectorRequest();
  template.index(request.param("index"));
  template.type(request.param("type"));
  RestTermVectorAction.readURIParameters(template,request);
  multiTermVectorsRequest.ids(Strings.commaDelimitedListToStringArray(request.param("ids")));
  BytesReference content=request.content();
  if (!request.hasContent()) {
    String source=request.param("source");
    if (source != null) {
      content=new BytesArray(source);
    }
  }
  try {
    multiTermVectorsRequest.add(template,content);
  }
 catch (  Throwable t) {
    try {
      channel.sendResponse(new XContentThrowableRestResponse(request,t));
    }
 catch (    Throwable tIO) {
      logger.error("Failed to send failure response",tIO);
    }
    return;
  }
  client.multiTermVectors(multiTermVectorsRequest,new ActionListener<MultiTermVectorsResponse>(){
    @Override public void onResponse(    MultiTermVectorsResponse response){
      try {
        XContentBuilder builder=restContentBuilder(request);
        response.toXContent(builder,request);
        channel.sendResponse(new XContentRestResponse(request,OK,builder));
      }
 catch (      Throwable t) {
        onFailure(t);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      Throwable t) {
        logger.error("Failed to send failure response",t);
      }
    }
  }
);
}
