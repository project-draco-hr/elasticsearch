{
  SearchResponse response=client().prepareSearch("idx").addAggregation(filters("tags").filter("tag1",termFilter("tag","tag1")).filter("tag2",termFilter("tag","tag2")).subAggregation(avg("avg_value").field("value"))).execute().actionGet();
  assertSearchResponse(response);
  Filters filters=response.getAggregations().get("tags");
  assertThat(filters,notNullValue());
  assertThat(filters.getName(),equalTo("tags"));
  assertThat(filters.getBuckets().size(),equalTo(2));
  Filters.Bucket bucket=filters.getBucketByKey("tag1");
  assertThat(bucket,Matchers.notNullValue());
  assertThat(bucket.getDocCount(),equalTo((long)numTag1Docs));
  long sum=0;
  for (int i=0; i < numTag1Docs; ++i) {
    sum+=i + 1;
  }
  assertThat(bucket.getAggregations().asList().isEmpty(),is(false));
  Avg avgValue=bucket.getAggregations().get("avg_value");
  assertThat(avgValue,notNullValue());
  assertThat(avgValue.getName(),equalTo("avg_value"));
  assertThat(avgValue.getValue(),equalTo((double)sum / numTag1Docs));
  bucket=filters.getBucketByKey("tag2");
  assertThat(bucket,Matchers.notNullValue());
  assertThat(bucket.getDocCount(),equalTo((long)numTag2Docs));
  sum=0;
  for (int i=numTag1Docs; i < numDocs; ++i) {
    sum+=i;
  }
  assertThat(bucket.getAggregations().asList().isEmpty(),is(false));
  avgValue=bucket.getAggregations().get("avg_value");
  assertThat(avgValue,notNullValue());
  assertThat(avgValue.getName(),equalTo("avg_value"));
  assertThat(avgValue.getValue(),equalTo((double)sum / numTag2Docs));
}
