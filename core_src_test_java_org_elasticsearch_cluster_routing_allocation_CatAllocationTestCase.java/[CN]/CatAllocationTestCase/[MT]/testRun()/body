{
  Set<String> nodes=new HashSet<>();
  Map<String,Idx> indices=new HashMap<>();
  try (BufferedReader reader=Files.newBufferedReader(getCatPath(),StandardCharsets.UTF_8)){
    String line=null;
    Pattern pattern=Pattern.compile("^(.+)\\s+(\\d)\\s+([rp])\\s+(STARTED|RELOCATING|INITIALIZING|UNASSIGNED)" + "\\s+\\d+\\s+[0-9.a-z]+\\s+(\\d+\\.\\d+\\.\\d+\\.\\d+).*$");
    while ((line=reader.readLine()) != null) {
      final Matcher matcher;
      if ((matcher=pattern.matcher(line)).matches()) {
        final String index=matcher.group(1);
        Idx idx=indices.get(index);
        if (idx == null) {
          idx=new Idx(index);
          indices.put(index,idx);
        }
        final int shard=Integer.parseInt(matcher.group(2));
        final boolean primary=matcher.group(3).equals("p");
        ShardRoutingState state=ShardRoutingState.valueOf(matcher.group(4));
        String ip=matcher.group(5);
        nodes.add(ip);
        ShardRouting routing=TestShardRouting.newShardRouting(index,shard,ip,null,primary,state);
        idx.add(routing);
        logger.debug("Add routing {}",routing);
      }
 else {
        fail("can't read line: " + line);
      }
    }
  }
   logger.info("Building initial routing table");
  MetaData.Builder builder=MetaData.builder();
  RoutingTable.Builder routingTableBuilder=RoutingTable.builder();
  for (  Idx idx : indices.values()) {
    IndexMetaData.Builder idxMetaBuilder=IndexMetaData.builder(idx.name).settings(settings(Version.CURRENT)).numberOfShards(idx.numShards()).numberOfReplicas(idx.numReplicas());
    for (    ShardRouting shardRouting : idx.routing) {
      if (shardRouting.active()) {
        Set<String> allocationIds=idxMetaBuilder.getInSyncAllocationIds(shardRouting.id());
        if (allocationIds == null) {
          allocationIds=new HashSet<>();
        }
 else {
          allocationIds=new HashSet<>(allocationIds);
        }
        allocationIds.add(shardRouting.allocationId().getId());
        idxMetaBuilder.putInSyncAllocationIds(shardRouting.id(),allocationIds);
      }
    }
    IndexMetaData idxMeta=idxMetaBuilder.build();
    builder.put(idxMeta,false);
    IndexRoutingTable.Builder tableBuilder=new IndexRoutingTable.Builder(idxMeta.getIndex()).initializeAsRecovery(idxMeta);
    Map<Integer,IndexShardRoutingTable> shardIdToRouting=new HashMap<>();
    for (    ShardRouting r : idx.routing) {
      IndexShardRoutingTable refData=new IndexShardRoutingTable.Builder(r.shardId()).addShard(r).build();
      if (shardIdToRouting.containsKey(r.getId())) {
        refData=new IndexShardRoutingTable.Builder(shardIdToRouting.get(r.getId())).addShard(r).build();
      }
      shardIdToRouting.put(r.getId(),refData);
    }
    for (    IndexShardRoutingTable t : shardIdToRouting.values()) {
      tableBuilder.addIndexShard(t);
    }
    IndexRoutingTable table=tableBuilder.build();
    routingTableBuilder.add(table);
  }
  MetaData metaData=builder.build();
  RoutingTable routingTable=routingTableBuilder.build();
  DiscoveryNodes.Builder builderDiscoNodes=DiscoveryNodes.builder();
  for (  String node : nodes) {
    builderDiscoNodes.add(newNode(node));
  }
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).nodes(builderDiscoNodes.build()).build();
  if (balanceFirst()) {
    clusterState=rebalance(clusterState);
  }
  clusterState=allocateNew(clusterState);
}
