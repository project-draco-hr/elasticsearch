{
  SearchRequest firstSearchRequest=createSearchRequest();
  assertNotNull("search request is equal to null",firstSearchRequest);
  assertNotEquals("search request  is equal to incompatible type",firstSearchRequest,"");
  assertEquals("search request is not equal to self",firstSearchRequest,firstSearchRequest);
  assertEquals("same source builder's hashcode returns different values if called multiple times",firstSearchRequest.hashCode(),firstSearchRequest.hashCode());
  SearchRequest secondSearchRequest=copyRequest(firstSearchRequest);
  assertEquals("search request  is not equal to self",secondSearchRequest,secondSearchRequest);
  assertEquals("search request is not equal to its copy",firstSearchRequest,secondSearchRequest);
  assertEquals("search request is not symmetric",secondSearchRequest,firstSearchRequest);
  assertEquals("search request copy's hashcode is different from original hashcode",firstSearchRequest.hashCode(),secondSearchRequest.hashCode());
  SearchRequest thirdSearchRequest=copyRequest(secondSearchRequest);
  assertEquals("search request is not equal to self",thirdSearchRequest,thirdSearchRequest);
  assertEquals("search request is not equal to its copy",secondSearchRequest,thirdSearchRequest);
  assertEquals("search request copy's hashcode is different from original hashcode",secondSearchRequest.hashCode(),thirdSearchRequest.hashCode());
  assertEquals("equals is not transitive",firstSearchRequest,thirdSearchRequest);
  assertEquals("search request copy's hashcode is different from original hashcode",firstSearchRequest.hashCode(),thirdSearchRequest.hashCode());
  assertEquals("equals is not symmetric",thirdSearchRequest,secondSearchRequest);
  assertEquals("equals is not symmetric",thirdSearchRequest,firstSearchRequest);
  boolean changed=false;
  if (randomBoolean()) {
    secondSearchRequest.indices(generateRandomStringArray(10,10,false,false));
    if (Arrays.equals(secondSearchRequest.indices(),firstSearchRequest.indices()) == false) {
      changed=true;
    }
  }
  if (randomBoolean()) {
    secondSearchRequest.indicesOptions(IndicesOptions.fromOptions(randomBoolean(),randomBoolean(),randomBoolean(),randomBoolean()));
    if (secondSearchRequest.indicesOptions().equals(firstSearchRequest.indicesOptions()) == false) {
      changed=true;
    }
  }
  if (randomBoolean()) {
    secondSearchRequest.types(generateRandomStringArray(10,10,false,false));
    if (Arrays.equals(secondSearchRequest.types(),firstSearchRequest.types()) == false) {
      changed=true;
    }
  }
  if (randomBoolean()) {
    secondSearchRequest.preference(randomAsciiOfLengthBetween(3,10));
    if (secondSearchRequest.preference().equals(firstSearchRequest.preference()) == false) {
      changed=true;
    }
  }
  if (randomBoolean()) {
    secondSearchRequest.routing(randomAsciiOfLengthBetween(3,10));
    if (secondSearchRequest.routing().equals(firstSearchRequest.routing()) == false) {
      changed=true;
    }
  }
  if (randomBoolean()) {
    secondSearchRequest.requestCache(randomBoolean());
    if (secondSearchRequest.requestCache().equals(firstSearchRequest.requestCache()) == false) {
      changed=true;
    }
  }
  if (randomBoolean()) {
    secondSearchRequest.scroll(randomPositiveTimeValue());
    if (secondSearchRequest.scroll().equals(firstSearchRequest.scroll()) == false) {
      changed=true;
    }
  }
  if (randomBoolean()) {
    secondSearchRequest.searchType(randomFrom(SearchType.values()));
    if (secondSearchRequest.searchType() != firstSearchRequest.searchType()) {
      changed=true;
    }
  }
  if (randomBoolean()) {
    secondSearchRequest.source(createSearchSourceBuilder());
    if (secondSearchRequest.source().equals(firstSearchRequest.source()) == false) {
      changed=true;
    }
  }
  if (changed) {
    assertNotEquals(firstSearchRequest,secondSearchRequest);
    assertNotEquals(firstSearchRequest.hashCode(),secondSearchRequest.hashCode());
  }
 else {
    assertEquals(firstSearchRequest,secondSearchRequest);
    assertEquals(firstSearchRequest.hashCode(),secondSearchRequest.hashCode());
  }
}
