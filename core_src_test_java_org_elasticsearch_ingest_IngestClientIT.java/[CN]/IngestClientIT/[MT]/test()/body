{
  new PutPipelineRequestBuilder(client(),PutPipelineAction.INSTANCE).setId("_id").setSource(jsonBuilder().startObject().field("description","my_pipeline").startArray("processors").startObject().startObject("test").endObject().endObject().endArray().endObject().bytes()).get();
  GetPipelineResponse getResponse=new GetPipelineRequestBuilder(client(),GetPipelineAction.INSTANCE).setIds("_id").get();
  assertThat(getResponse.isFound(),is(true));
  assertThat(getResponse.pipelines().size(),equalTo(1));
  assertThat(getResponse.pipelines().get(0).getId(),equalTo("_id"));
  client().prepareIndex("test","type","1").setSource("field","value","fail",false).putHeader(IngestActionFilter.PIPELINE_ID_PARAM,"_id").get();
  Map<String,Object> doc=client().prepareGet("test","type","1").get().getSourceAsMap();
  assertThat(doc.get("field"),equalTo("value"));
  assertThat(doc.get("processed"),equalTo(true));
  client().prepareBulk().add(client().prepareIndex("test","type","2").setSource("field","value2","fail",false)).putHeader(IngestActionFilter.PIPELINE_ID_PARAM,"_id").get();
  doc=client().prepareGet("test","type","2").get().getSourceAsMap();
  assertThat(doc.get("field"),equalTo("value2"));
  assertThat(doc.get("processed"),equalTo(true));
  DeleteResponse response=new DeletePipelineRequestBuilder(client(),DeletePipelineAction.INSTANCE).setId("_id").get();
  assertThat(response.isFound(),is(true));
  assertThat(response.getId(),equalTo("_id"));
  getResponse=new GetPipelineRequestBuilder(client(),GetPipelineAction.INSTANCE).setIds("_id").get();
  assertThat(getResponse.isFound(),is(false));
  assertThat(getResponse.pipelines().size(),equalTo(0));
}
