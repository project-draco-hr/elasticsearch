{
  createIndex("index");
  BytesReference source=jsonBuilder().startObject().field("description","my_pipeline").startArray("processors").startObject().startObject("test").endObject().endObject().endArray().endObject().bytes();
  PutPipelineRequest putPipelineRequest=new PutPipelineRequest("_id",source);
  client().admin().cluster().putPipeline(putPipelineRequest).get();
  int numRequests=scaledRandomIntBetween(32,128);
  BulkRequest bulkRequest=new BulkRequest();
  for (int i=0; i < numRequests; i++) {
    IndexRequest indexRequest=new IndexRequest("index","type",Integer.toString(i)).setPipeline("_id");
    indexRequest.source("field","value","fail",i % 2 == 0);
    bulkRequest.add(indexRequest);
  }
  BulkResponse response=client().bulk(bulkRequest).actionGet();
  assertThat(response.getItems().length,equalTo(bulkRequest.requests().size()));
  for (int i=0; i < bulkRequest.requests().size(); i++) {
    BulkItemResponse itemResponse=response.getItems()[i];
    if (i % 2 == 0) {
      BulkItemResponse.Failure failure=itemResponse.getFailure();
      assertThat(failure.getMessage(),equalTo("java.lang.IllegalArgumentException: test processor failed"));
    }
 else {
      IndexResponse indexResponse=itemResponse.getResponse();
      assertThat("Expected a successful response but found failure [" + itemResponse.getFailure() + "].",itemResponse.isFailed(),is(false));
      assertThat(indexResponse,notNullValue());
      assertThat(indexResponse.getId(),equalTo(Integer.toString(i)));
      assertThat(indexResponse.isCreated(),is(true));
    }
  }
}
