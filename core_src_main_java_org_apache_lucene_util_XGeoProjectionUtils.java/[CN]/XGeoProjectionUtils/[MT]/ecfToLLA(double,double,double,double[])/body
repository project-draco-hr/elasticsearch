{
  boolean atPole=false;
  final double ad_c=1.0026000D;
  final double e2=(SEMIMAJOR_AXIS2 - SEMIMINOR_AXIS2) / (SEMIMAJOR_AXIS2);
  final double ep2=(SEMIMAJOR_AXIS2 - SEMIMINOR_AXIS2) / (SEMIMINOR_AXIS2);
  final double cos67P5=0.38268343236508977D;
  if (lla == null) {
    lla=new double[3];
  }
  if (x != 0.0) {
    lla[0]=StrictMath.atan2(y,x);
  }
 else {
    if (y > 0) {
      lla[0]=PI_OVER_2;
    }
 else     if (y < 0) {
      lla[0]=-PI_OVER_2;
    }
 else {
      atPole=true;
      lla[0]=0.0D;
      if (z > 0.0) {
        lla[1]=PI_OVER_2;
      }
 else       if (z < 0.0) {
        lla[1]=-PI_OVER_2;
      }
 else {
        lla[1]=PI_OVER_2;
        lla[2]=-SEMIMINOR_AXIS;
        return lla;
      }
    }
  }
  final double w2=x * x + y * y;
  final double w=StrictMath.sqrt(w2);
  final double t0=z * ad_c;
  final double s0=StrictMath.sqrt(t0 * t0 + w2);
  final double sinB0=t0 / s0;
  final double cosB0=w / s0;
  final double sin3B0=sinB0 * sinB0 * sinB0;
  final double t1=z + SEMIMINOR_AXIS * ep2 * sin3B0;
  final double sum=w - SEMIMAJOR_AXIS * e2 * cosB0* cosB0* cosB0;
  final double s1=StrictMath.sqrt(t1 * t1 + sum * sum);
  final double sinP1=t1 / s1;
  final double cosP1=sum / s1;
  final double rn=SEMIMAJOR_AXIS / StrictMath.sqrt(1.0D - e2 * sinP1 * sinP1);
  if (cosP1 >= cos67P5) {
    lla[2]=w / cosP1 - rn;
  }
 else   if (cosP1 <= -cos67P5) {
    lla[2]=w / -cosP1 - rn;
  }
 else {
    lla[2]=z / sinP1 + rn * (e2 - 1.0);
  }
  if (!atPole) {
    lla[1]=StrictMath.atan(sinP1 / cosP1);
  }
  lla[0]=StrictMath.toDegrees(lla[0]);
  lla[1]=StrictMath.toDegrees(lla[1]);
  return lla;
}
