{
  if (allocation.shouldIgnoreShardForNode(shardRouting.shardId(),node.nodeId())) {
    return Decision.NO;
  }
  Decision.Multi ret=new Decision.Multi();
  for (  AllocationDecider allocationDecider : allocations) {
    Decision decision=allocationDecider.canAllocate(shardRouting,node,allocation);
    if (decision == Decision.NO) {
      if (logger.isTraceEnabled()) {
        logger.trace("Can not allocate [{}] on node [{}] due to [{}]",shardRouting,node.nodeId(),allocationDecider.getClass().getSimpleName());
      }
      return decision;
    }
 else     if (decision != Decision.ALWAYS) {
      ret.add(decision);
    }
  }
  return ret;
}
