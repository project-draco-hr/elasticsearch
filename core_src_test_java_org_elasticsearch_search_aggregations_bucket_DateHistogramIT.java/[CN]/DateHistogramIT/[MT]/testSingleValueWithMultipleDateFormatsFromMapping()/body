{
  String mappingJson=jsonBuilder().startObject().startObject("type").startObject("properties").startObject("date").field("type","date").field("format","dateOptionalTime||dd-MM-yyyy").endObject().endObject().endObject().endObject().string();
  prepareCreate("idx2").addMapping("type",mappingJson).execute().actionGet();
  IndexRequestBuilder[] reqs=new IndexRequestBuilder[5];
  for (int i=0; i < reqs.length; i++) {
    reqs[i]=client().prepareIndex("idx2","type","" + i).setSource(jsonBuilder().startObject().field("date","10-03-2014").endObject());
  }
  indexRandom(true,reqs);
  SearchResponse response=client().prepareSearch("idx2").setQuery(matchAllQuery()).addAggregation(dateHistogram("date_histo").field("date").dateHistogramInterval(DateHistogramInterval.DAY)).execute().actionGet();
  assertSearchHits(response,"0","1","2","3","4");
  Histogram histo=response.getAggregations().get("date_histo");
  List<? extends Histogram.Bucket> buckets=histo.getBuckets();
  assertThat(buckets.size(),equalTo(1));
  DateTime key=new DateTime(2014,3,10,0,0,DateTimeZone.UTC);
  Histogram.Bucket bucket=buckets.get(0);
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKeyAsString(),equalTo(getBucketKeyAsString(key)));
  assertThat(((DateTime)bucket.getKey()),equalTo(key));
  assertThat(bucket.getDocCount(),equalTo(5l));
}
