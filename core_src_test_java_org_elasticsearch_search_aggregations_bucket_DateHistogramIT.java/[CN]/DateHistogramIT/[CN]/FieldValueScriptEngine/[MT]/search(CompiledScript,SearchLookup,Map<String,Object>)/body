{
  return new SearchScript(){
    private Map<String,Object> vars=new HashMap<>(2);
    @Override public LeafSearchScript getLeafSearchScript(    LeafReaderContext context) throws IOException {
      final LeafSearchLookup leafLookup=lookup.getLeafSearchLookup(context);
      return new LeafSearchScript(){
        @Override public Object unwrap(        Object value){
          throw new UnsupportedOperationException();
        }
        @Override public void setNextVar(        String name,        Object value){
          vars.put(name,value);
        }
        @Override public Object run(){
          throw new UnsupportedOperationException();
        }
        @Override public void setScorer(        Scorer scorer){
        }
        @Override public void setSource(        Map<String,Object> source){
        }
        @Override public void setDocument(        int doc){
          if (leafLookup != null) {
            leafLookup.setDocument(doc);
          }
        }
        @Override public long runAsLong(){
          return new DateTime((long)vars.get("_value"),DateTimeZone.UTC).plusMonths(1).getMillis();
        }
        @Override public float runAsFloat(){
          throw new UnsupportedOperationException();
        }
        @Override public double runAsDouble(){
          return new DateTime(new Double((double)vars.get("_value")).longValue(),DateTimeZone.UTC).plusMonths(1).getMillis();
        }
      }
;
    }
    @Override public boolean needsScores(){
      return false;
    }
  }
;
}
