{
  final ListIterator<F> delegate=fromList.listIterator(index);
  return new ListIterator<T>(){
    public void add(    T e){
      throw new UnsupportedOperationException();
    }
    public boolean hasNext(){
      return delegate.hasNext();
    }
    public boolean hasPrevious(){
      return delegate.hasPrevious();
    }
    public T next(){
      return function.apply(delegate.next());
    }
    public int nextIndex(){
      return delegate.nextIndex();
    }
    public T previous(){
      return function.apply(delegate.previous());
    }
    public int previousIndex(){
      return delegate.previousIndex();
    }
    public void remove(){
      delegate.remove();
    }
    public void set(    T e){
      throw new UnsupportedOperationException("not supported");
    }
  }
;
}
