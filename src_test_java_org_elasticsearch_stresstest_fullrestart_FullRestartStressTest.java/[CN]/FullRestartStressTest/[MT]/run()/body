{
  long numberOfRounds=0;
  Random random=new Random(0);
  long testStart=System.currentTimeMillis();
  while (true) {
    Node[] nodes=new Node[numberOfNodes];
    for (int i=0; i < nodes.length; i++) {
      nodes[i]=NodeBuilder.nodeBuilder().settings(settings).node();
    }
    Node client=NodeBuilder.nodeBuilder().settings(settings).client(true).node();
    for (int i=0; i < numberOfIndices; i++) {
      try {
        client.client().admin().indices().prepareCreate("test" + i).execute().actionGet();
      }
 catch (      Exception e) {
      }
    }
    logger.info("*** Waiting for GREEN status");
    try {
      ClusterHealthResponse clusterHealth=client.client().admin().cluster().prepareHealth().setWaitForGreenStatus().setTimeout("10m").execute().actionGet();
      if (clusterHealth.isTimedOut()) {
        logger.warn("timed out waiting for green status....");
      }
    }
 catch (    Exception e) {
      logger.warn("failed to execute cluster health....");
    }
    CountResponse count=client.client().prepareCount().setQuery(matchAllQuery()).execute().actionGet();
    logger.info("*** index_count [{}], expected_count [{}]",count.getCount(),indexCounter.get());
    for (int i=0; i < (nodes.length * 5); i++) {
      count=client.client().prepareCount().setQuery(matchAllQuery()).execute().actionGet();
      logger.debug("index_count [{}], expected_count [{}]",count.getCount(),indexCounter.get());
      if (count.getCount() != indexCounter.get()) {
        logger.warn("!!! count does not match, index_count [{}], expected_count [{}]",count.getCount(),indexCounter.get());
        throw new Exception("failed test, count does not match...");
      }
    }
    for (int i=0; i < (nodes.length * 5); i++) {
      SearchResponse search=client.client().prepareSearch().setQuery(matchAllQuery().normsField("field")).execute().actionGet();
      logger.debug("index_count [{}], expected_count [{}]",search.getHits().totalHits(),indexCounter.get());
      if (count.getCount() != indexCounter.get()) {
        logger.warn("!!! search does not match, index_count [{}], expected_count [{}]",search.getHits().totalHits(),indexCounter.get());
        throw new Exception("failed test, count does not match...");
      }
    }
    logger.info("*** ROUND {}",++numberOfRounds);
    int numberOfBulks=numberOfDocsPerRound / bulkSize;
    for (int b=0; b < numberOfBulks; b++) {
      BulkRequestBuilder bulk=client.client().prepareBulk();
      for (int k=0; k < bulkSize; k++) {
        StringBuffer sb=new StringBuffer();
        XContentBuilder json=XContentFactory.jsonBuilder().startObject().field("field","value" + ThreadLocalRandom.current().nextInt());
        int fields=ThreadLocalRandom.current().nextInt() % numberOfFields;
        for (int i=0; i < fields; i++) {
          json.field("num_" + i,ThreadLocalRandom.current().nextDouble());
          int tokens=ThreadLocalRandom.current().nextInt() % textTokens;
          sb.setLength(0);
          for (int j=0; j < tokens; j++) {
            sb.append(Strings.randomBase64UUID(random)).append(' ');
          }
          json.field("text_" + i,sb.toString());
        }
        json.endObject();
        bulk.add(Requests.indexRequest("test" + (Math.abs(ThreadLocalRandom.current().nextInt()) % numberOfIndices)).type("type1").source(json));
        indexCounter.incrementAndGet();
      }
      bulk.execute().actionGet();
    }
    client.close();
    for (    Node node : nodes) {
      File[] nodeDatas=((InternalNode)node).injector().getInstance(NodeEnvironment.class).nodeDataLocations();
      node.close();
      if (clearNodeWork && !settings.get("gateway.type").equals("local")) {
        FileSystemUtils.deleteRecursively(nodeDatas);
      }
    }
    if ((System.currentTimeMillis() - testStart) > period.millis()) {
      logger.info("test finished, full_restart_rounds [{}]",numberOfRounds);
      break;
    }
  }
}
