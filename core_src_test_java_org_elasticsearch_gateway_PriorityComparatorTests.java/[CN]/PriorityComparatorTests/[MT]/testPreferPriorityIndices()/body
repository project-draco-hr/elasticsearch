{
  RoutingNodes.UnassignedShards shards=new RoutingNodes.UnassignedShards(mock(RoutingNodes.class));
  List<ShardRouting> shardRoutings=Arrays.asList(TestShardRouting.newShardRouting("oldest",0,null,null,randomBoolean(),ShardRoutingState.UNASSIGNED,new UnassignedInfo(randomFrom(UnassignedInfo.Reason.values()),"foobar")),TestShardRouting.newShardRouting("newest",0,null,null,randomBoolean(),ShardRoutingState.UNASSIGNED,new UnassignedInfo(randomFrom(UnassignedInfo.Reason.values()),"foobar")));
  Collections.shuffle(shardRoutings,random());
  for (  ShardRouting routing : shardRoutings) {
    shards.add(routing);
  }
  shards.sort(new PriorityComparator(){
    @Override protected Settings getIndexSettings(    Index index){
      if ("oldest".equals(index.getName())) {
        return Settings.builder().put(IndexMetaData.SETTING_CREATION_DATE,10).put(IndexMetaData.SETTING_PRIORITY,100).build();
      }
 else       if ("newest".equals(index.getName())) {
        return Settings.builder().put(IndexMetaData.SETTING_CREATION_DATE,100).put(IndexMetaData.SETTING_PRIORITY,1).build();
      }
      return Settings.EMPTY;
    }
  }
);
  RoutingNodes.UnassignedShards.UnassignedIterator iterator=shards.iterator();
  ShardRouting next=iterator.next();
  assertEquals("oldest",next.getIndexName());
  next=iterator.next();
  assertEquals("newest",next.getIndexName());
  assertFalse(iterator.hasNext());
}
