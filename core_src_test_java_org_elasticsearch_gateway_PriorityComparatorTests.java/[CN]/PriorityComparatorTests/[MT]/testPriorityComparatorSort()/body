{
  RoutingNodes.UnassignedShards shards=new RoutingNodes.UnassignedShards((RoutingNodes)null);
  int numIndices=randomIntBetween(3,99);
  IndexMeta[] indices=new IndexMeta[numIndices];
  final Map<String,IndexMeta> map=new HashMap<>();
  for (int i=0; i < indices.length; i++) {
    if (frequently()) {
      indices[i]=new IndexMeta("idx_2015_04_" + String.format(Locale.ROOT,"%02d",i),randomIntBetween(1,1000),randomIntBetween(1,10000));
    }
 else {
      indices[i]=new IndexMeta("idx_2015_04_" + String.format(Locale.ROOT,"%02d",i));
    }
    map.put(indices[i].name,indices[i]);
  }
  int numShards=randomIntBetween(10,100);
  for (int i=0; i < numShards; i++) {
    IndexMeta indexMeta=randomFrom(indices);
    shards.add(TestShardRouting.newShardRouting(indexMeta.name,randomIntBetween(1,5),null,null,null,randomBoolean(),ShardRoutingState.UNASSIGNED,new UnassignedInfo(randomFrom(UnassignedInfo.Reason.values()),"foobar")));
  }
  shards.sort(new PriorityComparator(){
    @Override protected Settings getIndexSettings(    Index index){
      IndexMeta indexMeta=map.get(index.getName());
      return indexMeta.settings;
    }
  }
);
  ShardRouting previous=null;
  for (  ShardRouting routing : shards) {
    if (previous != null) {
      IndexMeta prevMeta=map.get(previous.getIndexName());
      IndexMeta currentMeta=map.get(routing.getIndexName());
      if (prevMeta.priority == currentMeta.priority) {
        if (prevMeta.creationDate == currentMeta.creationDate) {
          if (prevMeta.name.equals(currentMeta.name) == false) {
            assertTrue("indexName mismatch, expected:" + currentMeta.name + " after "+ prevMeta.name+ " "+ prevMeta.name.compareTo(currentMeta.name),prevMeta.name.compareTo(currentMeta.name) > 0);
          }
        }
 else {
          assertTrue("creationDate mismatch, expected:" + currentMeta.creationDate + " after "+ prevMeta.creationDate,prevMeta.creationDate > currentMeta.creationDate);
        }
      }
 else {
        assertTrue("priority mismatch, expected:" + currentMeta.priority + " after "+ prevMeta.priority,prevMeta.priority > currentMeta.priority);
      }
    }
    previous=routing;
  }
}
