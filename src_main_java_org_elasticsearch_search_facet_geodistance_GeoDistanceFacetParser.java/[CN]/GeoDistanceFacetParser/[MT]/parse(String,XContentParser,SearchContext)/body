{
  String fieldName=null;
  String valueFieldName=null;
  String valueScript=null;
  String scriptLang=null;
  Map<String,Object> params=null;
  GeoPoint point=new GeoPoint();
  DistanceUnit unit=DistanceUnit.DEFAULT;
  GeoDistance geoDistance=GeoDistance.DEFAULT;
  List<GeoDistanceFacet.Entry> entries=Lists.newArrayList();
  boolean normalizeLon=true;
  boolean normalizeLat=true;
  XContentParser.Token token;
  String currentName=parser.currentName();
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if ("ranges".equals(currentName) || "entries".equals(currentName)) {
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          double from=Double.NEGATIVE_INFINITY;
          double to=Double.POSITIVE_INFINITY;
          while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
            if (token == XContentParser.Token.FIELD_NAME) {
              currentName=parser.currentName();
            }
 else             if (token.isValue()) {
              if ("from".equals(currentName)) {
                from=parser.doubleValue();
              }
 else               if ("to".equals(currentName)) {
                to=parser.doubleValue();
              }
            }
          }
          entries.add(new GeoDistanceFacet.Entry(from,to,0,0,0,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY));
        }
      }
 else {
        GeoUtils.parseGeoPoint(parser,point);
        fieldName=currentName;
      }
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("params".equals(currentName)) {
        params=parser.map();
      }
 else {
        fieldName=currentName;
        GeoUtils.parseGeoPoint(parser,point);
      }
    }
 else     if (token.isValue()) {
      if (currentName.equals("unit")) {
        unit=DistanceUnit.fromString(parser.text());
      }
 else       if (currentName.equals("distance_type") || currentName.equals("distanceType")) {
        geoDistance=GeoDistance.fromString(parser.text());
      }
 else       if ("value_field".equals(currentName) || "valueField".equals(currentName)) {
        valueFieldName=parser.text();
      }
 else       if ("value_script".equals(currentName) || "valueScript".equals(currentName)) {
        valueScript=parser.text();
      }
 else       if ("lang".equals(currentName)) {
        scriptLang=parser.text();
      }
 else       if ("normalize".equals(currentName)) {
        normalizeLat=parser.booleanValue();
        normalizeLon=parser.booleanValue();
      }
 else {
        point.resetFromString(parser.text());
        fieldName=currentName;
      }
    }
  }
  if (entries.isEmpty()) {
    throw new FacetPhaseExecutionException(facetName,"no ranges defined for geo_distance facet");
  }
  if (normalizeLat || normalizeLon) {
    GeoUtils.normalizePoint(point,normalizeLat,normalizeLon);
  }
  FieldMapper keyFieldMapper=context.smartNameFieldMapper(fieldName);
  if (keyFieldMapper == null) {
    throw new FacetPhaseExecutionException(facetName,"failed to find mapping for [" + fieldName + "]");
  }
  IndexGeoPointFieldData keyIndexFieldData=context.fieldData().getForField(keyFieldMapper);
  if (valueFieldName != null) {
    FieldMapper valueFieldMapper=context.smartNameFieldMapper(valueFieldName);
    if (valueFieldMapper == null) {
      throw new FacetPhaseExecutionException(facetName,"failed to find mapping for [" + valueFieldName + "]");
    }
    IndexNumericFieldData valueIndexFieldData=context.fieldData().getForField(valueFieldMapper);
    return new ValueGeoDistanceFacetExecutor(keyIndexFieldData,point.lat(),point.lon(),unit,geoDistance,entries.toArray(new GeoDistanceFacet.Entry[entries.size()]),context,valueIndexFieldData);
  }
  if (valueScript != null) {
    return new ScriptGeoDistanceFacetExecutor(keyIndexFieldData,point.lat(),point.lon(),unit,geoDistance,entries.toArray(new GeoDistanceFacet.Entry[entries.size()]),context,scriptLang,valueScript,params);
  }
  return new GeoDistanceFacetExecutor(keyIndexFieldData,point.lat(),point.lon(),unit,geoDistance,entries.toArray(new GeoDistanceFacet.Entry[entries.size()]),context);
}
