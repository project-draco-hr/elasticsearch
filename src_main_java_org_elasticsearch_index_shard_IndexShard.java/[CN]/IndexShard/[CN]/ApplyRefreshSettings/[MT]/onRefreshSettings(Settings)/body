{
  boolean change=false;
synchronized (mutex) {
    if (state == IndexShardState.CLOSED) {
      return;
    }
    TimeValue refreshInterval=settings.getAsTime(INDEX_REFRESH_INTERVAL,IndexShard.this.refreshInterval);
    if (!refreshInterval.equals(IndexShard.this.refreshInterval)) {
      logger.info("updating refresh_interval from [{}] to [{}]",IndexShard.this.refreshInterval,refreshInterval);
      if (refreshScheduledFuture != null) {
        FutureUtils.cancel(refreshScheduledFuture);
        refreshScheduledFuture=null;
      }
      IndexShard.this.refreshInterval=refreshInterval;
      if (refreshInterval.millis() > 0) {
        refreshScheduledFuture=threadPool.schedule(refreshInterval,ThreadPool.Names.SAME,new EngineRefresher());
      }
    }
    long gcDeletesInMillis=settings.getAsTime(EngineConfig.INDEX_GC_DELETES_SETTING,TimeValue.timeValueMillis(config.getGcDeletesInMillis())).millis();
    if (gcDeletesInMillis != config.getGcDeletesInMillis()) {
      logger.info("updating {} from [{}] to [{}]",EngineConfig.INDEX_GC_DELETES_SETTING,TimeValue.timeValueMillis(config.getGcDeletesInMillis()),TimeValue.timeValueMillis(gcDeletesInMillis));
      config.setGcDeletesInMillis(gcDeletesInMillis);
      change=true;
    }
    final boolean compoundOnFlush=settings.getAsBoolean(EngineConfig.INDEX_COMPOUND_ON_FLUSH,config.isCompoundOnFlush());
    if (compoundOnFlush != config.isCompoundOnFlush()) {
      logger.info("updating {} from [{}] to [{}]",EngineConfig.INDEX_COMPOUND_ON_FLUSH,config.isCompoundOnFlush(),compoundOnFlush);
      config.setCompoundOnFlush(compoundOnFlush);
      change=true;
    }
    final boolean failEngineOnCorruption=settings.getAsBoolean(EngineConfig.INDEX_FAIL_ON_CORRUPTION_SETTING,config.isFailEngineOnCorruption());
    if (failEngineOnCorruption != config.isFailEngineOnCorruption()) {
      logger.info("updating {} from [{}] to [{}]",EngineConfig.INDEX_FAIL_ON_CORRUPTION_SETTING,config.isFailEngineOnCorruption(),failEngineOnCorruption);
      config.setFailEngineOnCorruption(failEngineOnCorruption);
      change=true;
    }
    final boolean failOnMergeFailure=settings.getAsBoolean(EngineConfig.INDEX_FAIL_ON_MERGE_FAILURE_SETTING,config.isFailOnMergeFailure());
    if (failOnMergeFailure != config.isFailOnMergeFailure()) {
      logger.info("updating {} from [{}] to [{}]",EngineConfig.INDEX_FAIL_ON_MERGE_FAILURE_SETTING,config.isFailOnMergeFailure(),failOnMergeFailure);
      config.setFailOnMergeFailure(failOnMergeFailure);
      change=true;
    }
  }
  if (change) {
    refresh("apply settings");
  }
}
