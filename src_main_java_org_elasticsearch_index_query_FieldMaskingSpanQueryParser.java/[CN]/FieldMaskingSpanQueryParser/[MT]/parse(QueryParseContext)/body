{
  XContentParser parser=parseContext.parser();
  float boost=1.0f;
  SpanQuery inner=null;
  String field=null;
  String queryName=null;
  String currentFieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("query".equals(currentFieldName)) {
        Query query=parseContext.parseInnerQuery();
        if (!(query instanceof SpanQuery)) {
          throw new QueryParsingException(parseContext.index(),"[field_masking_span] query] must be of type span query");
        }
        inner=(SpanQuery)query;
      }
 else {
        throw new QueryParsingException(parseContext.index(),"[field_masking_span] query does not support [" + currentFieldName + "]");
      }
    }
 else {
      if ("boost".equals(currentFieldName)) {
        boost=parser.floatValue();
      }
 else       if ("field".equals(currentFieldName)) {
        field=parser.text();
      }
 else       if ("_name".equals(currentFieldName)) {
        queryName=parser.text();
      }
 else {
        throw new QueryParsingException(parseContext.index(),"[field_masking_span] query does not support [" + currentFieldName + "]");
      }
    }
  }
  if (inner == null) {
    throw new QueryParsingException(parseContext.index(),"field_masking_span must have [query] span query clause");
  }
  if (field == null) {
    throw new QueryParsingException(parseContext.index(),"field_masking_span must have [field] set for it");
  }
  FieldMapper mapper=parseContext.fieldMapper(field);
  if (mapper != null) {
    field=mapper.names().indexName();
  }
  FieldMaskingSpanQuery query=new FieldMaskingSpanQuery(inner,field);
  query.setBoost(boost);
  if (queryName != null) {
    parseContext.addNamedQuery(queryName,query);
  }
  return query;
}
