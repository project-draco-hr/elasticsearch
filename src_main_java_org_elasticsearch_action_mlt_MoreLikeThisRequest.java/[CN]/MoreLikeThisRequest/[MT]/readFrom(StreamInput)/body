{
  super.readFrom(in);
  index=in.readString();
  type=in.readString();
  id=in.readString();
  int size=in.readVInt();
  if (size == 0) {
    fields=Strings.EMPTY_ARRAY;
  }
 else {
    fields=new String[size];
    for (int i=0; i < size; i++) {
      fields[i]=in.readString();
    }
  }
  minimumShouldMatch(in.readString());
  minTermFreq=in.readVInt();
  maxQueryTerms=in.readVInt();
  size=in.readVInt();
  if (size > 0) {
    stopWords=new String[size];
    for (int i=0; i < size; i++) {
      stopWords[i]=in.readString();
    }
  }
  minDocFreq=in.readVInt();
  maxDocFreq=in.readVInt();
  minWordLength=in.readVInt();
  maxWordLength=in.readVInt();
  boostTerms=in.readFloat();
  include=in.readBoolean();
  searchType=SearchType.fromId(in.readByte());
  size=in.readVInt();
  if (size == 0) {
    searchIndices=null;
  }
 else   if (size == 1) {
    searchIndices=Strings.EMPTY_ARRAY;
  }
 else {
    searchIndices=new String[size - 1];
    for (int i=0; i < searchIndices.length; i++) {
      searchIndices[i]=in.readString();
    }
  }
  size=in.readVInt();
  if (size == 0) {
    searchTypes=null;
  }
 else   if (size == 1) {
    searchTypes=Strings.EMPTY_ARRAY;
  }
 else {
    searchTypes=new String[size - 1];
    for (int i=0; i < searchTypes.length; i++) {
      searchTypes[i]=in.readString();
    }
  }
  if (in.readBoolean()) {
    searchScroll=readScroll(in);
  }
  searchSourceUnsafe=false;
  searchSource=in.readBytesReference();
  searchSize=in.readVInt();
  searchFrom=in.readVInt();
  routing=in.readOptionalString();
}
