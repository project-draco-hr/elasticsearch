{
  final Type type;
  try {
    type=Definition.getType(this.type);
  }
 catch (  IllegalArgumentException exception) {
    throw createError(new IllegalArgumentException("Not a type [" + this.type + "]."));
  }
  resolvedType=type.sort.primitive ? type.sort.boxed : type.clazz;
  expression.analyze(locals);
  expression.expected=expression.actual;
  expression=expression.cast(locals);
  primitiveExpression=expression.actual.sort.primitive;
  expressionType=expression.actual.sort.primitive ? expression.actual.sort.boxed : type.clazz;
  actual=Definition.BOOLEAN_TYPE;
}
