{
  Expression expr=(Expression)compiledScript;
  MapperService mapper=lookup.doc().mapperService();
  XSimpleBindings bindings=new XSimpleBindings();
  ReplaceableConstValueSource specialValue=null;
  for (  String variable : expr.variables) {
    if (variable.equals("_score")) {
      bindings.add(new SortField("_score",SortField.Type.SCORE));
    }
 else     if (variable.equals("_value")) {
      specialValue=new ReplaceableConstValueSource();
      bindings.add("_value",specialValue);
    }
 else     if (vars != null && vars.containsKey(variable)) {
      Object value=vars.get(variable);
      if (value instanceof Number) {
        bindings.add(variable,new DoubleConstValueSource(((Number)value).doubleValue()));
      }
 else {
        throw new ExpressionScriptCompilationException("Parameter [" + variable + "] must be a numeric type");
      }
    }
 else {
      XVariableContext[] parts=XVariableContext.parse(variable);
      if (parts[0].text.equals("doc") == false) {
        throw new ExpressionScriptCompilationException("Unknown variable [" + parts[0].text + "] in expression");
      }
      if (parts.length < 2 || parts[1].type != XVariableContext.Type.STR_INDEX) {
        throw new ExpressionScriptCompilationException("Variable 'doc' in expression must be used with a specific field like: doc['myfield'].value");
      }
      if (parts.length < 3 || parts[2].type != XVariableContext.Type.MEMBER || parts[2].text.equals("value") == false) {
        throw new ExpressionScriptCompilationException("Invalid member for field data in expression.  Only '.value' is currently supported.");
      }
      String fieldname=parts[1].text;
      FieldMapper<?> field=mapper.smartNameFieldMapper(fieldname);
      if (field == null) {
        throw new ExpressionScriptCompilationException("Field [" + fieldname + "] used in expression does not exist in mappings");
      }
      if (field.isNumeric() == false) {
        throw new ExpressionScriptCompilationException("Field [" + fieldname + "] used in expression must be numeric");
      }
      IndexFieldData<?> fieldData=lookup.doc().fieldDataService().getForField((NumberFieldMapper)field);
      bindings.add(variable,new FieldDataValueSource(fieldData));
    }
  }
  return new ExpressionScript((Expression)compiledScript,bindings,specialValue);
}
