{
  final PythonScriptEngineService se=new PythonScriptEngineService(Settings.Builder.EMPTY_SETTINGS);
  final Object compiled=se.compile("x + y");
  final AtomicBoolean failed=new AtomicBoolean();
  Thread[] threads=new Thread[4];
  final CountDownLatch latch=new CountDownLatch(threads.length);
  final CyclicBarrier barrier=new CyclicBarrier(threads.length + 1);
  for (int i=0; i < threads.length; i++) {
    threads[i]=new Thread(new Runnable(){
      @Override public void run(){
        try {
          barrier.await();
          Map<String,Object> runtimeVars=new HashMap<String,Object>();
          for (int i=0; i < 10000; i++) {
            long x=ThreadLocalRandom.current().nextInt();
            long y=ThreadLocalRandom.current().nextInt();
            long addition=x + y;
            runtimeVars.put("x",x);
            runtimeVars.put("y",y);
            long result=((Number)se.execute(compiled,runtimeVars)).longValue();
            assertThat(result,equalTo(addition));
          }
        }
 catch (        Throwable t) {
          failed.set(true);
          logger.error("failed",t);
        }
 finally {
          latch.countDown();
        }
      }
    }
);
  }
  for (int i=0; i < threads.length; i++) {
    threads[i].start();
  }
  barrier.await();
  latch.await();
  assertThat(failed.get(),equalTo(false));
}
