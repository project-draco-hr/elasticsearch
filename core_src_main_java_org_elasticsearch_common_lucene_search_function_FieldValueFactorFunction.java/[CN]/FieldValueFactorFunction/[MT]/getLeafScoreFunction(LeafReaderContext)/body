{
  final SortedNumericDoubleValues values;
  if (indexFieldData == null) {
    values=null;
  }
 else {
    values=this.indexFieldData.load(ctx).getDoubleValues();
  }
  return new LeafScoreFunction(){
    @Override public double score(    int docId,    float subQueryScore){
      final int numValues;
      if (values == null) {
        numValues=0;
      }
 else {
        values.setDocument(docId);
        numValues=values.count();
      }
      double value;
      if (numValues > 0) {
        value=values.valueAt(0);
      }
 else       if (missing != null) {
        value=missing;
      }
 else {
        throw new ElasticsearchException("Missing value for field [" + field + "]");
      }
      double val=value * boostFactor;
      double result=modifier.apply(val);
      if (Double.isNaN(result) || Double.isInfinite(result)) {
        throw new ElasticsearchException("Result of field modification [" + modifier.toString() + "("+ val+ ")] must be a number");
      }
      return result;
    }
    @Override public Explanation explainScore(    int docId,    Explanation subQueryScore){
      String modifierStr=modifier != null ? modifier.toString() : "";
      String defaultStr=missing != null ? "?:" + missing : "";
      double score=score(docId,subQueryScore.getValue());
      return Explanation.match(CombineFunction.toFloat(score),String.format(Locale.ROOT,"field value function: %s(doc['%s'].value%s * factor=%s)",modifierStr,field,defaultStr,boostFactor));
    }
  }
;
}
