{
  if (facets.size() == 1) {
    return facets.get(0);
  }
  InternalByteTermsFacet first=(InternalByteTermsFacet)facets.get(0);
  TByteIntHashMap aggregated=aggregateCache.get().get();
  aggregated.clear();
  long missing=0;
  for (  Facet facet : facets) {
    InternalByteTermsFacet mFacet=(InternalByteTermsFacet)facet;
    missing+=mFacet.missingCount();
    for (    ByteEntry entry : mFacet.entries) {
      aggregated.adjustOrPutValue(entry.term,entry.count(),entry.count());
    }
  }
  BoundedTreeSet<ByteEntry> ordered=new BoundedTreeSet<ByteEntry>(first.comparatorType().comparator(),first.requiredSize);
  for (TByteIntIterator it=aggregated.iterator(); it.hasNext(); ) {
    it.advance();
    ordered.add(new ByteEntry(it.key(),it.value()));
  }
  first.entries=ordered;
  first.missing=missing;
  return first;
}
