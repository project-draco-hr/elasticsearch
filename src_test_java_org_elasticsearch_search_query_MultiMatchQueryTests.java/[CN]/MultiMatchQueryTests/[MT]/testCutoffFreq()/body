{
  final long numDocs=client().prepareCount("test").setQuery(matchAllQuery()).get().getCount();
  MatchQueryBuilder.Type type=randomBoolean() ? null : MatchQueryBuilder.Type.BOOLEAN;
  Float cutoffFrequency=randomBoolean() ? Math.min(1,numDocs * 1.f / between(10,20)) : 1.f / between(10,20);
  SearchResponse searchResponse=client().prepareSearch("test").setQuery(multiMatchQuery("marvel hero captain america","full_name","first_name","last_name","category").operator(MatchQueryBuilder.Operator.OR).cutoffFrequency(cutoffFrequency)).get();
  Set<String> topNIds=Sets.newHashSet("theone","theother");
  for (int i=0; i < searchResponse.getHits().hits().length; i++) {
    topNIds.remove(searchResponse.getHits().getAt(i).getId());
  }
  assertThat(topNIds,empty());
  assertThat(searchResponse.getHits().hits()[0].getScore(),greaterThanOrEqualTo(searchResponse.getHits().hits()[1].getScore()));
  cutoffFrequency=randomBoolean() ? Math.min(1,numDocs * 1.f / between(10,20)) : 1.f / between(10,20);
  searchResponse=client().prepareSearch("test").setQuery(multiMatchQuery("marvel hero captain america","full_name","first_name","last_name","category").operator(MatchQueryBuilder.Operator.OR).useDisMax(false).cutoffFrequency(cutoffFrequency).type(type)).get();
  assertFirstHit(searchResponse,anyOf(hasId("theone"),hasId("theother")));
  assertThat(searchResponse.getHits().hits()[0].getScore(),greaterThan(searchResponse.getHits().hits()[1].getScore()));
  long size=searchResponse.getHits().getTotalHits();
  searchResponse=client().prepareSearch("test").setQuery(multiMatchQuery("marvel hero captain america","full_name","first_name","last_name","category").operator(MatchQueryBuilder.Operator.OR).useDisMax(false).type(type)).get();
  assertFirstHit(searchResponse,anyOf(hasId("theone"),hasId("theother")));
  assertThat("common terms expected to be a way smaller result set",size,lessThan(searchResponse.getHits().getTotalHits()));
  cutoffFrequency=randomBoolean() ? Math.min(1,numDocs * 1.f / between(10,20)) : 1.f / between(10,20);
  searchResponse=client().prepareSearch("test").setQuery(multiMatchQuery("marvel hero","full_name","first_name","last_name","category").operator(MatchQueryBuilder.Operator.OR).cutoffFrequency(cutoffFrequency).type(type)).get();
  assertFirstHit(searchResponse,hasId("theother"));
  searchResponse=client().prepareSearch("test").setQuery(multiMatchQuery("captain america","full_name","first_name","last_name","category").operator(MatchQueryBuilder.Operator.AND).cutoffFrequency(cutoffFrequency).type(type)).get();
  assertHitCount(searchResponse,1l);
  assertFirstHit(searchResponse,hasId("theone"));
  searchResponse=client().prepareSearch("test").setQuery(multiMatchQuery("captain america","full_name","first_name","last_name","category").operator(MatchQueryBuilder.Operator.AND).cutoffFrequency(cutoffFrequency).type(type)).get();
  assertHitCount(searchResponse,1l);
  assertFirstHit(searchResponse,hasId("theone"));
}
