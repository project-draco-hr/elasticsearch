{
  XContentParser.Token token;
  final SearchContextHighlight.FieldOptions.Builder fieldOptionsBuilder=new SearchContextHighlight.FieldOptions.Builder();
  String fieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      fieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if ("pre_tags".equals(fieldName) || "preTags".equals(fieldName)) {
        List<String> preTagsList=new ArrayList<>();
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          preTagsList.add(parser.text());
        }
        fieldOptionsBuilder.preTags(preTagsList.toArray(new String[preTagsList.size()]));
      }
 else       if ("post_tags".equals(fieldName) || "postTags".equals(fieldName)) {
        List<String> postTagsList=new ArrayList<>();
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          postTagsList.add(parser.text());
        }
        fieldOptionsBuilder.postTags(postTagsList.toArray(new String[postTagsList.size()]));
      }
 else       if ("matched_fields".equals(fieldName) || "matchedFields".equals(fieldName)) {
        Set<String> matchedFields=new HashSet<>();
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          matchedFields.add(parser.text());
        }
        fieldOptionsBuilder.matchedFields(matchedFields);
      }
    }
 else     if (token.isValue()) {
      if ("fragment_size".equals(fieldName) || "fragmentSize".equals(fieldName)) {
        fieldOptionsBuilder.fragmentCharSize(parser.intValue());
      }
 else       if ("number_of_fragments".equals(fieldName) || "numberOfFragments".equals(fieldName)) {
        fieldOptionsBuilder.numberOfFragments(parser.intValue());
      }
 else       if ("fragment_offset".equals(fieldName) || "fragmentOffset".equals(fieldName)) {
        fieldOptionsBuilder.fragmentOffset(parser.intValue());
      }
 else       if ("highlight_filter".equals(fieldName) || "highlightFilter".equals(fieldName)) {
        fieldOptionsBuilder.highlightFilter(parser.booleanValue());
      }
 else       if ("order".equals(fieldName)) {
        fieldOptionsBuilder.scoreOrdered("score".equals(parser.text()));
      }
 else       if ("require_field_match".equals(fieldName) || "requireFieldMatch".equals(fieldName)) {
        fieldOptionsBuilder.requireFieldMatch(parser.booleanValue());
      }
 else       if ("boundary_max_scan".equals(fieldName) || "boundaryMaxScan".equals(fieldName)) {
        fieldOptionsBuilder.boundaryMaxScan(parser.intValue());
      }
 else       if ("boundary_chars".equals(fieldName) || "boundaryChars".equals(fieldName)) {
        char[] charsArr=parser.text().toCharArray();
        Character[] boundaryChars=new Character[charsArr.length];
        for (int i=0; i < charsArr.length; i++) {
          boundaryChars[i]=charsArr[i];
        }
        fieldOptionsBuilder.boundaryChars(boundaryChars);
      }
 else       if ("type".equals(fieldName)) {
        fieldOptionsBuilder.highlighterType(parser.text());
      }
 else       if ("fragmenter".equals(fieldName)) {
        fieldOptionsBuilder.fragmenter(parser.text());
      }
 else       if ("no_match_size".equals(fieldName) || "noMatchSize".equals(fieldName)) {
        fieldOptionsBuilder.noMatchSize(parser.intValue());
      }
 else       if ("force_source".equals(fieldName) || "forceSource".equals(fieldName)) {
        fieldOptionsBuilder.forceSource(parser.booleanValue());
      }
 else       if ("phrase_limit".equals(fieldName) || "phraseLimit".equals(fieldName)) {
        fieldOptionsBuilder.phraseLimit(parser.intValue());
      }
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("highlight_query".equals(fieldName) || "highlightQuery".equals(fieldName)) {
        fieldOptionsBuilder.highlightQuery(queryShardContext.parse(parser).query());
      }
 else       if ("options".equals(fieldName)) {
        fieldOptionsBuilder.options(parser.map());
      }
    }
  }
  return fieldOptionsBuilder;
}
