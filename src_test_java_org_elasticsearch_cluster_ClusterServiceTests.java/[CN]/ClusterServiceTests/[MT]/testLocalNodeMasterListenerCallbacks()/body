{
  Settings settings=settingsBuilder().put("discovery.type","zen").put("discovery.zen.minimum_master_nodes",1).put("discovery.zen.ping_timeout","400ms").put("discovery.initial_state_timeout","500ms").put("plugin.types",TestPlugin.class.getName()).build();
  String node_0=internalCluster().startNode(settings);
  ClusterService clusterService=internalCluster().getInstance(ClusterService.class);
  MasterAwareService testService=internalCluster().getInstance(MasterAwareService.class);
  ClusterHealthResponse clusterHealth=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNodes("1").get();
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterService.state().nodes().masterNode(),notNullValue());
  assertThat(clusterService.state().nodes().localNodeMaster(),is(true));
  assertThat(testService.master(),is(true));
  String node_1=internalCluster().startNode(settings);
  final ClusterService clusterService1=internalCluster().getInstance(ClusterService.class,node_1);
  MasterAwareService testService1=internalCluster().getInstance(MasterAwareService.class,node_1);
  clusterHealth=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNodes("2").get();
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterService1.state().nodes().localNodeMaster(),is(false));
  assertThat(testService1.master(),is(false));
  internalCluster().stopCurrentMasterNode();
  clusterHealth=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNodes("1").get();
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterService1.state().nodes().localNodeMaster(),is(true));
  assertThat(testService1.master(),is(true));
  internalCluster().startNode(ImmutableSettings.builder().put(settings));
  assertFalse(client().admin().cluster().prepareHealth().setWaitForNodes("2").get().isTimedOut());
  Settings transientSettings=settingsBuilder().put("discovery.zen.minimum_master_nodes",2).build();
  client().admin().cluster().prepareUpdateSettings().setTransientSettings(transientSettings).get();
  internalCluster().stopRandomNonMasterNode();
  awaitBusy(new Predicate<Object>(){
    public boolean apply(    Object obj){
      return clusterService1.state().nodes().masterNode() == null && clusterService1.state().status() == ClusterState.ClusterStateStatus.APPLIED;
    }
  }
);
  assertThat(testService1.master(),is(false));
  String node_2=internalCluster().startNode(ImmutableSettings.builder().put(settings).put(transientSettings));
  ClusterService clusterService2=internalCluster().getInstance(ClusterService.class,node_2);
  MasterAwareService testService2=internalCluster().getInstance(MasterAwareService.class,node_2);
  assertThat(internalCluster().client(node_1).admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setLocal(true).setWaitForNodes("2").get().isTimedOut(),is(false));
  assertThat(internalCluster().client(node_2).admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setLocal(true).setWaitForNodes("2").get().isTimedOut(),is(false));
  assertThat(clusterService2.state().nodes().masterNode(),is(notNullValue()));
  if (node_2.equals(clusterService2.state().nodes().masterNode().name())) {
    assertThat(testService1.master(),is(false));
    assertThat(testService2.master(),is(true));
  }
 else {
    assertThat(testService1.master(),is(true));
    assertThat(testService2.master(),is(false));
  }
}
