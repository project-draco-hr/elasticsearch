{
  Settings settings=settingsBuilder().put("discovery.type","zen").put("discovery.zen.minimum_master_nodes",1).put("discovery.zen.ping_timeout","200ms").put("discovery.initial_state_timeout","500ms").put("plugin.types",TestPlugin.class.getName()).build();
  internalCluster().startNode(settings);
  ClusterService clusterService1=internalCluster().getInstance(ClusterService.class);
  MasterAwareService testService1=internalCluster().getInstance(MasterAwareService.class);
  ClusterHealthResponse clusterHealth=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNodes("1").get();
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterService1.state().nodes().masterNode(),notNullValue());
  assertThat(clusterService1.state().nodes().localNodeMaster(),is(true));
  assertThat(testService1.master(),is(true));
  String node_1=internalCluster().startNode(settings);
  final ClusterService clusterService2=internalCluster().getInstance(ClusterService.class,node_1);
  MasterAwareService testService2=internalCluster().getInstance(MasterAwareService.class,node_1);
  clusterHealth=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNodes("2").get();
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterService2.state().nodes().localNodeMaster(),is(false));
  assertThat(testService2.master(),is(false));
  internalCluster().stopCurrentMasterNode();
  clusterHealth=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNodes("1").get();
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterService2.state().nodes().localNodeMaster(),is(true));
  assertThat(testService2.master(),is(true));
  Settings newSettings=settingsBuilder().put("discovery.zen.minimum_master_nodes",2).put("discovery.type","zen").build();
  client().admin().cluster().prepareUpdateSettings().setTransientSettings(newSettings).get();
  awaitBusy(new Predicate<Object>(){
    public boolean apply(    Object obj){
      return clusterService2.state().nodes().masterNode() == null;
    }
  }
);
  assertThat(testService2.master(),is(false));
  String node_2=internalCluster().startNode(settings);
  clusterService1=internalCluster().getInstance(ClusterService.class,node_2);
  testService1=internalCluster().getInstance(MasterAwareService.class,node_2);
  assertThat(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setLocal(true).setWaitForNodes("2").get().isTimedOut(),is(false));
  assertThat(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setLocal(true).setWaitForNodes("2").get().isTimedOut(),is(false));
  assertThat(clusterService1.state().nodes().masterNode(),is(notNullValue()));
  if (node_2.equals(clusterService1.state().nodes().masterNode().name())) {
    assertThat(testService1.master(),is(true));
    assertThat(testService2.master(),is(false));
  }
 else {
    assertThat(testService1.master(),is(false));
    assertThat(testService2.master(),is(true));
  }
}
