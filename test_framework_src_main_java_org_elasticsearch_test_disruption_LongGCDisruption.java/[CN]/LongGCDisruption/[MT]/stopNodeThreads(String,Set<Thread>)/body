{
  Thread[] allThreads=null;
  while (allThreads == null) {
    allThreads=new Thread[Thread.activeCount()];
    if (Thread.enumerate(allThreads) > allThreads.length) {
      allThreads=null;
    }
  }
  boolean liveThreadsFound=false;
  final String nodeThreadNamePart="[" + node + "]";
  for (  Thread thread : allThreads) {
    if (thread == null) {
      continue;
    }
    String name=thread.getName();
    if (name.contains(nodeThreadNamePart)) {
      if (thread.isAlive() && nodeThreads.add(thread)) {
        liveThreadsFound=true;
        logger.trace("stopping thread [{}]",name);
        thread.suspend();
        boolean safe=true;
        safe:         for (        StackTraceElement stackElement : thread.getStackTrace()) {
          String className=stackElement.getClassName();
          for (          Pattern unsafePattern : getUnsafeClasses()) {
            if (unsafePattern.matcher(className).find()) {
              safe=false;
              break safe;
            }
          }
        }
        if (!safe) {
          logger.trace("resuming thread [{}] as it is in a critical section",name);
          thread.resume();
          nodeThreads.remove(thread);
        }
      }
    }
  }
  return liveThreadsFound;
}
