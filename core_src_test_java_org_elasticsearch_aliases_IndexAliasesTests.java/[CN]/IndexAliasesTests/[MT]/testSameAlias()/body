{
  logger.info("--> creating index [test]");
  assertAcked(prepareCreate("test").addMapping("type","name","type=string"));
  ensureGreen();
  logger.info("--> creating alias1 ");
  assertAcked((admin().indices().prepareAliases().addAlias("test","alias1")));
  TimeValue timeout=TimeValue.timeValueSeconds(2);
  logger.info("--> recreating alias1 ");
  StopWatch stopWatch=new StopWatch();
  stopWatch.start();
  assertAcked((admin().indices().prepareAliases().addAlias("test","alias1").setTimeout(timeout)));
  assertThat(stopWatch.stop().lastTaskTime().millis(),lessThan(timeout.millis()));
  logger.info("--> modifying alias1 to have a filter");
  stopWatch.start();
  assertAcked((admin().indices().prepareAliases().addAlias("test","alias1",termQuery("name","foo")).setTimeout(timeout)));
  assertThat(stopWatch.stop().lastTaskTime().millis(),lessThan(timeout.millis()));
  logger.info("--> recreating alias1 with the same filter");
  stopWatch.start();
  assertAcked((admin().indices().prepareAliases().addAlias("test","alias1",termQuery("name","foo")).setTimeout(timeout)));
  assertThat(stopWatch.stop().lastTaskTime().millis(),lessThan(timeout.millis()));
  logger.info("--> recreating alias1 with a different filter");
  stopWatch.start();
  assertAcked((admin().indices().prepareAliases().addAlias("test","alias1",termQuery("name","bar")).setTimeout(timeout)));
  assertThat(stopWatch.stop().lastTaskTime().millis(),lessThan(timeout.millis()));
  logger.info("--> verify that filter was updated");
  AliasMetaData aliasMetaData=internalCluster().clusterService().state().metaData().aliases().get("alias1").get("test");
  assertThat(aliasMetaData.getFilter().toString(),equalTo("{\"term\":{\"name\":{\"value\":\"bar\",\"boost\":1.0}}}"));
  logger.info("--> deleting alias1");
  stopWatch.start();
  assertAcked((admin().indices().prepareAliases().removeAlias("test","alias1").setTimeout(timeout)));
  assertThat(stopWatch.stop().lastTaskTime().millis(),lessThan(timeout.millis()));
}
