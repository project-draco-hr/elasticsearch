{
  MyRefCounted counted=new MyRefCounted();
  int incs=randomIntBetween(1,100);
  for (int i=0; i < incs; i++) {
    if (randomBoolean()) {
      counted.incRef();
    }
 else {
      assertTrue(counted.tryIncRef());
    }
    counted.ensureOpen();
  }
  for (int i=0; i < incs; i++) {
    counted.decRef();
    counted.ensureOpen();
  }
  counted.incRef();
  counted.decRef();
  for (int i=0; i < incs; i++) {
    if (randomBoolean()) {
      counted.incRef();
    }
 else {
      assertTrue(counted.tryIncRef());
    }
    counted.ensureOpen();
  }
  for (int i=0; i < incs; i++) {
    counted.decRef();
    counted.ensureOpen();
  }
  counted.decRef();
  assertFalse(counted.tryIncRef());
  try {
    counted.incRef();
    fail(" expected exception");
  }
 catch (  AlreadyClosedException ex) {
    assertThat(ex.getMessage(),equalTo("test is already closed can't increment refCount current count [0]"));
  }
  try {
    counted.ensureOpen();
    fail(" expected exception");
  }
 catch (  AlreadyClosedException ex) {
    assertThat(ex.getMessage(),equalTo("closed"));
  }
}
