{
  final MyRefCounted counted=new MyRefCounted();
  Thread[] threads=new Thread[randomIntBetween(2,5)];
  final CountDownLatch latch=new CountDownLatch(1);
  final CopyOnWriteArrayList<Exception> exceptions=new CopyOnWriteArrayList<>();
  for (int i=0; i < threads.length; i++) {
    threads[i]=new Thread(){
      @Override public void run(){
        try {
          latch.await();
          for (int j=0; j < 10000; j++) {
            counted.incRef();
            try {
              counted.ensureOpen();
            }
  finally {
              counted.decRef();
            }
          }
        }
 catch (        Exception e) {
          exceptions.add(e);
        }
      }
    }
;
    threads[i].start();
  }
  latch.countDown();
  for (int i=0; i < threads.length; i++) {
    threads[i].join();
  }
  counted.decRef();
  try {
    counted.ensureOpen();
    fail("expected to be closed");
  }
 catch (  AlreadyClosedException ex) {
    assertThat(ex.getMessage(),equalTo("closed"));
  }
  assertThat(counted.refCount(),is(0));
  assertThat(exceptions,Matchers.emptyIterable());
}
