{
  IndexService indexService=indicesService.indexServiceSafe(request.index());
  BloomCache bloomCache=indexService.cache().bloomCache();
  IndexShard indexShard=indexService.shardSafe(shardId);
  DocumentMapper docMapper=indexService.mapperService().documentMapper(request.type());
  if (docMapper == null) {
    throw new TypeMissingException(new Index(request.index()),request.type());
  }
  if (request.refresh()) {
    indexShard.refresh(new Engine.Refresh(false));
  }
  Engine.Searcher searcher=indexShard.searcher();
  boolean exists=false;
  byte[] source=null;
  Map<String,GetField> fields=null;
  long version=-1;
  try {
    UidField.DocIdAndVersion docIdAndVersion=loadCurrentVersionFromIndex(bloomCache,searcher,docMapper.uidMapper().term(request.type(),request.id()));
    if (docIdAndVersion != null && docIdAndVersion.docId != Lucene.NO_DOC) {
      if (docIdAndVersion.version > 0) {
        version=docIdAndVersion.version;
      }
      exists=true;
      FieldSelector fieldSelector=buildFieldSelectors(docMapper,request.fields());
      if (fieldSelector != null) {
        Document doc=docIdAndVersion.reader.document(docIdAndVersion.docId,fieldSelector);
        source=extractSource(doc,docMapper);
        for (        Object oField : doc.getFields()) {
          Fieldable field=(Fieldable)oField;
          String name=field.name();
          Object value=null;
          FieldMappers fieldMappers=docMapper.mappers().indexName(field.name());
          if (fieldMappers != null) {
            FieldMapper mapper=fieldMappers.mapper();
            if (mapper != null) {
              name=mapper.names().fullName();
              value=mapper.valueForSearch(field);
            }
          }
          if (value == null) {
            if (field.isBinary()) {
              value=field.getBinaryValue();
            }
 else {
              value=field.stringValue();
            }
          }
          if (fields == null) {
            fields=newHashMapWithExpectedSize(2);
          }
          GetField getField=fields.get(name);
          if (getField == null) {
            getField=new GetField(name,new ArrayList<Object>(2));
            fields.put(name,getField);
          }
          getField.values().add(value);
        }
      }
      if (request.fields() != null && request.fields().length > 0) {
        SearchLookup searchLookup=null;
        for (        String field : request.fields()) {
          String script=null;
          if (field.contains("_source.") || field.contains("doc[")) {
            script=field;
          }
 else {
            FieldMappers x=docMapper.mappers().smartName(field);
            if (x != null && !x.mapper().stored()) {
              script="_source." + x.mapper().names().fullName();
            }
          }
          if (script != null) {
            if (searchLookup == null) {
              searchLookup=new SearchLookup(indexService.mapperService(),indexService.cache().fieldData());
            }
            SearchScript searchScript=scriptService.search(searchLookup,"mvel",script,null);
            searchScript.setNextReader(docIdAndVersion.reader);
            searchScript.setNextDocId(docIdAndVersion.docId);
            try {
              Object value=searchScript.run();
              if (fields == null) {
                fields=newHashMapWithExpectedSize(2);
              }
              GetField getField=fields.get(field);
              if (getField == null) {
                getField=new GetField(field,new ArrayList<Object>(2));
                fields.put(field,getField);
              }
              getField.values().add(value);
            }
 catch (            RuntimeException e) {
              if (logger.isTraceEnabled()) {
                logger.trace("failed to execute get request script field [{}]",e,script);
              }
            }
          }
        }
      }
    }
  }
 catch (  IOException e) {
    throw new ElasticSearchException("Failed to get type [" + request.type() + "] and id ["+ request.id()+ "]",e);
  }
 finally {
    searcher.release();
  }
  return new GetResponse(request.index(),request.type(),request.id(),version,exists,source,fields);
}
