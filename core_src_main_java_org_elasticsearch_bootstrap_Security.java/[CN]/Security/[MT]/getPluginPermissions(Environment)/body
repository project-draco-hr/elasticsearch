{
  Map<String,Policy> map=new HashMap<>();
  List<Path> pluginsAndModules=new ArrayList<>();
  if (Files.exists(environment.pluginsFile())) {
    try (DirectoryStream<Path> stream=Files.newDirectoryStream(environment.pluginsFile())){
      for (      Path plugin : stream) {
        pluginsAndModules.add(plugin);
      }
    }
   }
  if (Files.exists(environment.modulesFile())) {
    try (DirectoryStream<Path> stream=Files.newDirectoryStream(environment.modulesFile())){
      for (      Path plugin : stream) {
        pluginsAndModules.add(plugin);
      }
    }
   }
  for (  Path plugin : pluginsAndModules) {
    Path policyFile=plugin.resolve(PluginInfo.ES_PLUGIN_POLICY);
    if (Files.exists(policyFile)) {
      List<URL> codebases=new ArrayList<>();
      try (DirectoryStream<Path> jarStream=Files.newDirectoryStream(plugin,"*.jar")){
        for (        Path jar : jarStream) {
          codebases.add(jar.toRealPath().toUri().toURL());
        }
      }
       Policy policy=readPolicy(policyFile.toUri().toURL(),codebases.toArray(new URL[codebases.size()]));
      for (      URL url : codebases) {
        if (map.put(url.getFile(),policy) != null) {
          throw new IllegalStateException("per-plugin permissions already granted for jar file: " + url);
        }
      }
    }
  }
  return Collections.unmodifiableMap(map);
}
