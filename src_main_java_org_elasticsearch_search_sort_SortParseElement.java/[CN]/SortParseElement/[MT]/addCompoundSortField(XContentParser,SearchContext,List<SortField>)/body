{
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      String fieldName=parser.currentName();
      boolean reverse=false;
      String missing=null;
      String innerJsonName=null;
      String unmappedType=null;
      MultiValueMode sortMode=null;
      Filter nestedFilter=null;
      String nestedPath=null;
      token=parser.nextToken();
      if (token == XContentParser.Token.VALUE_STRING) {
        String direction=parser.text();
        if (direction.equals("asc")) {
          reverse=SCORE_FIELD_NAME.equals(fieldName);
        }
 else         if (direction.equals("desc")) {
          reverse=!SCORE_FIELD_NAME.equals(fieldName);
        }
 else {
          throw new ElasticsearchIllegalArgumentException("sort direction [" + fieldName + "] not supported");
        }
        addSortField(context,sortFields,fieldName,reverse,unmappedType,missing,sortMode,nestedPath,nestedFilter);
      }
 else {
        if (parsers.containsKey(fieldName)) {
          sortFields.add(parsers.get(fieldName).parse(parser,context));
        }
 else {
          while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
            if (token == XContentParser.Token.FIELD_NAME) {
              innerJsonName=parser.currentName();
            }
 else             if (token.isValue()) {
              if ("reverse".equals(innerJsonName)) {
                reverse=parser.booleanValue();
              }
 else               if ("order".equals(innerJsonName)) {
                if ("asc".equals(parser.text())) {
                  reverse=SCORE_FIELD_NAME.equals(fieldName);
                }
 else                 if ("desc".equals(parser.text())) {
                  reverse=!SCORE_FIELD_NAME.equals(fieldName);
                }
              }
 else               if ("missing".equals(innerJsonName)) {
                missing=parser.textOrNull();
              }
 else               if (IGNORE_UNMAPPED.match(innerJsonName)) {
                if (unmappedType == null && parser.booleanValue()) {
                  unmappedType=LongFieldMapper.CONTENT_TYPE;
                }
              }
 else               if (UNMAPPED_TYPE.match(innerJsonName)) {
                unmappedType=parser.textOrNull();
              }
 else               if ("mode".equals(innerJsonName)) {
                sortMode=MultiValueMode.fromString(parser.text());
              }
 else               if ("nested_path".equals(innerJsonName) || "nestedPath".equals(innerJsonName)) {
                nestedPath=parser.text();
              }
 else {
                throw new ElasticsearchIllegalArgumentException("sort option [" + innerJsonName + "] not supported");
              }
            }
 else             if (token == XContentParser.Token.START_OBJECT) {
              if ("nested_filter".equals(innerJsonName) || "nestedFilter".equals(innerJsonName)) {
                ParsedFilter parsedFilter=context.queryParserService().parseInnerFilter(parser);
                nestedFilter=parsedFilter == null ? null : parsedFilter.filter();
              }
 else {
                throw new ElasticsearchIllegalArgumentException("sort option [" + innerJsonName + "] not supported");
              }
            }
          }
          addSortField(context,sortFields,fieldName,reverse,unmappedType,missing,sortMode,nestedPath,nestedFilter);
        }
      }
    }
  }
}
