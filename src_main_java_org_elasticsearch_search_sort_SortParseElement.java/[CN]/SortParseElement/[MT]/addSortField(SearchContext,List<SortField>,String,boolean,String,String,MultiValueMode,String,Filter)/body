{
  if (SCORE_FIELD_NAME.equals(fieldName)) {
    if (reverse) {
      sortFields.add(SORT_SCORE_REVERSE);
    }
 else {
      sortFields.add(SORT_SCORE);
    }
  }
 else   if (DOC_FIELD_NAME.equals(fieldName)) {
    if (reverse) {
      sortFields.add(SORT_DOC_REVERSE);
    }
 else {
      sortFields.add(SORT_DOC);
    }
  }
 else {
    FieldMapper<?> fieldMapper=context.smartNameFieldMapper(fieldName);
    if (fieldMapper == null) {
      if (unmappedType != null) {
        fieldMapper=context.mapperService().unmappedFieldMapper(unmappedType);
      }
 else {
        throw new SearchParseException(context,"No mapping found for [" + fieldName + "] in order to sort on");
      }
    }
    if (!fieldMapper.isSortable()) {
      throw new SearchParseException(context,"Sorting not supported for field[" + fieldName + "]");
    }
    if (!(fieldMapper instanceof NumberFieldMapper) && (sortMode == MultiValueMode.SUM || sortMode == MultiValueMode.AVG)) {
      sortMode=null;
    }
    if (sortMode == null) {
      sortMode=resolveDefaultSortMode(reverse);
    }
    ObjectMapper objectMapper=null;
    if (nestedPath != null) {
      ObjectMappers objectMappers=context.mapperService().objectMapper(nestedPath);
      if (objectMappers == null) {
        throw new ElasticsearchIllegalArgumentException("failed to find nested object mapping for explicit nested path [" + nestedPath + "]");
      }
      objectMapper=objectMappers.mapper();
      if (!objectMapper.nested().isNested()) {
        throw new ElasticsearchIllegalArgumentException("mapping for explicit nested path is not mapped as nested: [" + nestedPath + "]");
      }
    }
 else     if (!(context instanceof SubSearchContext)) {
      objectMapper=context.mapperService().resolveClosestNestedObjectMapper(fieldName);
    }
    final Nested nested;
    if (objectMapper != null && objectMapper.nested().isNested()) {
      BitDocIdSetFilter rootDocumentsFilter=context.bitsetFilterCache().getBitDocIdSetFilter(NonNestedDocsFilter.INSTANCE);
      BitDocIdSetFilter innerDocumentsFilter;
      if (nestedFilter != null) {
        innerDocumentsFilter=context.bitsetFilterCache().getBitDocIdSetFilter(nestedFilter);
      }
 else {
        innerDocumentsFilter=context.bitsetFilterCache().getBitDocIdSetFilter(objectMapper.nestedTypeFilter());
      }
      nested=new Nested(rootDocumentsFilter,innerDocumentsFilter);
    }
 else {
      nested=null;
    }
    IndexFieldData.XFieldComparatorSource fieldComparatorSource=context.fieldData().getForField(fieldMapper).comparatorSource(missing,sortMode,nested);
    sortFields.add(new SortField(fieldMapper.names().indexName(),fieldComparatorSource,reverse));
  }
}
