{
  XContentParser parser=parseContext.parser();
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  Integer slop=null;
  boolean inOrder=SpanNearQueryBuilder.DEFAULT_IN_ORDER;
  boolean collectPayloads=SpanNearQueryBuilder.DEFAULT_COLLECT_PAYLOADS;
  String queryName=null;
  List<SpanQueryBuilder> clauses=newArrayList();
  String currentFieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if ("clauses".equals(currentFieldName)) {
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          QueryBuilder query=parseContext.parseInnerQueryBuilder();
          if (!(query instanceof SpanQueryBuilder)) {
            throw new QueryParsingException(parseContext,"spanNear [clauses] must be of type span query");
          }
          clauses.add((SpanQueryBuilder)query);
        }
      }
 else {
        throw new QueryParsingException(parseContext,"[span_near] query does not support [" + currentFieldName + "]");
      }
    }
 else     if (token.isValue()) {
      if ("in_order".equals(currentFieldName) || "inOrder".equals(currentFieldName)) {
        inOrder=parser.booleanValue();
      }
 else       if ("collect_payloads".equals(currentFieldName) || "collectPayloads".equals(currentFieldName)) {
        collectPayloads=parser.booleanValue();
      }
 else       if ("slop".equals(currentFieldName)) {
        slop=Integer.valueOf(parser.intValue());
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=parser.floatValue();
      }
 else       if ("_name".equals(currentFieldName)) {
        queryName=parser.text();
      }
 else {
        throw new QueryParsingException(parseContext,"[span_near] query does not support [" + currentFieldName + "]");
      }
    }
 else {
      throw new QueryParsingException(parseContext,"[span_near] query does not support [" + currentFieldName + "]");
    }
  }
  if (slop == null) {
    throw new QueryParsingException(parseContext,"span_near must include [slop]");
  }
  SpanNearQueryBuilder queryBuilder=new SpanNearQueryBuilder(slop);
  for (  SpanQueryBuilder subQuery : clauses) {
    queryBuilder.clause(subQuery);
  }
  queryBuilder.inOrder(inOrder);
  queryBuilder.collectPayloads(collectPayloads);
  queryBuilder.boost(boost);
  queryBuilder.queryName(queryName);
  return queryBuilder;
}
