{
  XContentParser parser=parseContext.parser();
  float boost=1.0f;
  Integer slop=null;
  boolean inOrder=true;
  boolean collectPayloads=true;
  String queryName=null;
  List<SpanQuery> clauses=newArrayList();
  String currentFieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if ("clauses".equals(currentFieldName)) {
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          Query query=parseContext.parseInnerQuery();
          if (!(query instanceof SpanQuery)) {
            throw new QueryParsingException(parseContext,"spanNear [clauses] must be of type span query");
          }
          clauses.add((SpanQuery)query);
        }
      }
 else {
        throw new QueryParsingException(parseContext,"[span_near] query does not support [" + currentFieldName + "]");
      }
    }
 else     if (token.isValue()) {
      if ("in_order".equals(currentFieldName) || "inOrder".equals(currentFieldName)) {
        inOrder=parser.booleanValue();
      }
 else       if ("collect_payloads".equals(currentFieldName) || "collectPayloads".equals(currentFieldName)) {
        collectPayloads=parser.booleanValue();
      }
 else       if ("slop".equals(currentFieldName)) {
        slop=Integer.valueOf(parser.intValue());
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=parser.floatValue();
      }
 else       if ("_name".equals(currentFieldName)) {
        queryName=parser.text();
      }
 else {
        throw new QueryParsingException(parseContext,"[span_near] query does not support [" + currentFieldName + "]");
      }
    }
 else {
      throw new QueryParsingException(parseContext,"[span_near] query does not support [" + currentFieldName + "]");
    }
  }
  if (clauses.isEmpty()) {
    throw new QueryParsingException(parseContext,"span_near must include [clauses]");
  }
  if (slop == null) {
    throw new QueryParsingException(parseContext,"span_near must include [slop]");
  }
  SpanNearQuery query=new SpanNearQuery(clauses.toArray(new SpanQuery[clauses.size()]),slop.intValue(),inOrder,collectPayloads);
  query.setBoost(boost);
  if (queryName != null) {
    parseContext.addNamedQuery(queryName,query);
  }
  return query;
}
