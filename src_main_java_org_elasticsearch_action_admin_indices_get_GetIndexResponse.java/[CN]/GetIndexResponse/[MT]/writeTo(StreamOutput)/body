{
  super.writeTo(out);
  out.writeStringArray(indices);
  out.writeVInt(warmers.size());
  for (  ObjectObjectCursor<String,ImmutableList<IndexWarmersMetaData.Entry>> indexEntry : warmers) {
    out.writeString(indexEntry.key);
    out.writeVInt(indexEntry.value.size());
    for (    IndexWarmersMetaData.Entry warmerEntry : indexEntry.value) {
      out.writeString(warmerEntry.name());
      out.writeStringArray(warmerEntry.types());
      out.writeOptionalBoolean(warmerEntry.queryCache());
      out.writeBytesReference(warmerEntry.source());
    }
  }
  out.writeVInt(mappings.size());
  for (  ObjectObjectCursor<String,ImmutableOpenMap<String,MappingMetaData>> indexEntry : mappings) {
    out.writeString(indexEntry.key);
    out.writeVInt(indexEntry.value.size());
    for (    ObjectObjectCursor<String,MappingMetaData> mappingEntry : indexEntry.value) {
      out.writeString(mappingEntry.key);
      MappingMetaData.writeTo(mappingEntry.value,out);
    }
  }
  out.writeVInt(aliases.size());
  for (  ObjectObjectCursor<String,ImmutableList<AliasMetaData>> indexEntry : aliases) {
    out.writeString(indexEntry.key);
    out.writeVInt(indexEntry.value.size());
    for (    AliasMetaData aliasEntry : indexEntry.value) {
      AliasMetaData.Builder.writeTo(aliasEntry,out);
    }
  }
  out.writeVInt(settings.size());
  for (  ObjectObjectCursor<String,Settings> indexEntry : settings) {
    out.writeString(indexEntry.key);
    ImmutableSettings.writeSettingsToStream(indexEntry.value,out);
  }
}
