{
  super.readFrom(in);
  this.indices=in.readStringArray();
  int warmersSize=in.readVInt();
  ImmutableOpenMap.Builder<String,ImmutableList<IndexWarmersMetaData.Entry>> warmersMapBuilder=ImmutableOpenMap.builder();
  for (int i=0; i < warmersSize; i++) {
    String key=in.readString();
    int valueSize=in.readVInt();
    ImmutableList.Builder<IndexWarmersMetaData.Entry> warmerEntryBuilder=ImmutableList.builder();
    for (int j=0; j < valueSize; j++) {
      warmerEntryBuilder.add(new IndexWarmersMetaData.Entry(in.readString(),in.readStringArray(),in.readOptionalBoolean(),in.readBytesReference()));
    }
    warmersMapBuilder.put(key,warmerEntryBuilder.build());
  }
  warmers=warmersMapBuilder.build();
  int mappingsSize=in.readVInt();
  ImmutableOpenMap.Builder<String,ImmutableOpenMap<String,MappingMetaData>> mappingsMapBuilder=ImmutableOpenMap.builder();
  for (int i=0; i < mappingsSize; i++) {
    String key=in.readString();
    int valueSize=in.readVInt();
    ImmutableOpenMap.Builder<String,MappingMetaData> mappingEntryBuilder=ImmutableOpenMap.builder();
    for (int j=0; j < valueSize; j++) {
      mappingEntryBuilder.put(in.readString(),MappingMetaData.PROTO.readFrom(in));
    }
    mappingsMapBuilder.put(key,mappingEntryBuilder.build());
  }
  mappings=mappingsMapBuilder.build();
  int aliasesSize=in.readVInt();
  ImmutableOpenMap.Builder<String,ImmutableList<AliasMetaData>> aliasesMapBuilder=ImmutableOpenMap.builder();
  for (int i=0; i < aliasesSize; i++) {
    String key=in.readString();
    int valueSize=in.readVInt();
    ImmutableList.Builder<AliasMetaData> aliasEntryBuilder=ImmutableList.builder();
    for (int j=0; j < valueSize; j++) {
      aliasEntryBuilder.add(AliasMetaData.Builder.readFrom(in));
    }
    aliasesMapBuilder.put(key,aliasEntryBuilder.build());
  }
  aliases=aliasesMapBuilder.build();
  int settingsSize=in.readVInt();
  ImmutableOpenMap.Builder<String,Settings> settingsMapBuilder=ImmutableOpenMap.builder();
  for (int i=0; i < settingsSize; i++) {
    String key=in.readString();
    settingsMapBuilder.put(key,ImmutableSettings.readSettingsFromStream(in));
  }
  settings=settingsMapBuilder.build();
}
