{
  AllocationService strategy=new AllocationService(settingsBuilder().put("cluster.routing.allocation.allow_rebalance",ClusterRebalanceAllocationDecider.ClusterRebalanceType.ALWAYS.toString()).build());
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test1").numberOfShards(1).numberOfReplicas(1)).put(IndexMetaData.builder("test2").numberOfShards(1).numberOfReplicas(1)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test1")).addAsNew(metaData.index("test2")).build();
  ClusterState clusterState=newClusterStateBuilder().metaData(metaData).routingTable(routingTable).build();
  logger.info("start 4 nodes");
  clusterState=newClusterStateBuilder().state(clusterState).nodes(newNodesBuilder().put(newNode("node1")).put(newNode("node2")).put(newNode("node3")).put(newNode("node4"))).build();
  RoutingTable prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  logger.info("start all the primary shards, replicas will start initializing");
  RoutingNodes routingNodes=clusterState.routingNodes();
  prevRoutingTable=routingTable;
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  routingNodes=clusterState.routingNodes();
  logger.info("start the replica shards");
  routingNodes=clusterState.routingNodes();
  prevRoutingTable=routingTable;
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  routingNodes=clusterState.routingNodes();
  assertThat(routingNodes.node("node1").numberOfShardsWithState(STARTED),equalTo(1));
  assertThat(routingNodes.node("node2").numberOfShardsWithState(STARTED),equalTo(1));
  assertThat(routingNodes.node("node3").numberOfShardsWithState(STARTED),equalTo(1));
  assertThat(routingNodes.node("node4").numberOfShardsWithState(STARTED),equalTo(1));
  logger.info("remove 2 nodes where primaries are allocated, reroute");
  clusterState=newClusterStateBuilder().state(clusterState).nodes(newNodesBuilder().putAll(clusterState.nodes()).remove(routingTable.index("test1").shard(0).primaryShard().currentNodeId()).remove(routingTable.index("test2").shard(0).primaryShard().currentNodeId())).build();
  prevRoutingTable=routingTable;
  routingTable=strategy.rerouteWithNoReassign(clusterState).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  routingNodes=clusterState.routingNodes();
  for (  RoutingNode routingNode : routingNodes) {
    assertThat(routingNode.numberOfShardsWithState(STARTED),equalTo(1));
  }
  assertThat(routingNodes.unassigned().size(),equalTo(2));
}
