{
  final PostingsFormat delegate=getDefaultWrapped();
  final BloomFilteredFieldsConsumer fieldsConsumer=new BloomFilterPostingsFormat(delegate,BloomFilter.Factory.DEFAULT){
    @Override public BloomFilteredFieldsConsumer fieldsConsumer(    SegmentWriteState state) throws IOException {
      return new BloomFilteredFieldsConsumer(delegate.fieldsConsumer(state),state,delegate);
    }
  }
.fieldsConsumer(state);
  return new FieldsConsumer(){
    @Override public void write(    Fields fields) throws IOException {
      Fields maskedFields=new FilterLeafReader.FilterFields(fields){
        @Override public Iterator<String> iterator(){
          return StreamSupport.stream(this.in.spliterator(),false).filter(UID_FIELD_FILTER.negate()).iterator();
        }
      }
;
      fieldsConsumer.getDelegate().write(maskedFields);
      maskedFields=new FilterLeafReader.FilterFields(fields){
        @Override public Iterator<String> iterator(){
          return Iterators.singletonIterator(UidFieldMapper.NAME);
        }
      }
;
      fieldsConsumer.write(maskedFields);
    }
    @Override public void close() throws IOException {
      fieldsConsumer.close();
    }
  }
;
}
