{
  ValuesSourceConfig<NumericValuesSource> config=new ValuesSourceConfig<NumericValuesSource>(NumericValuesSource.class);
  String field=null;
  List<RangeAggregator.Range> ranges=null;
  String script=null;
  String scriptLang=null;
  Map<String,Object> scriptParams=null;
  boolean keyed=false;
  boolean assumeSorted=false;
  XContentParser.Token token;
  String currentFieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.VALUE_STRING) {
      if ("field".equals(currentFieldName)) {
        field=parser.text();
      }
 else       if ("script".equals(currentFieldName)) {
        script=parser.text();
      }
 else       if ("lang".equals(currentFieldName)) {
        scriptLang=parser.text();
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if ("ranges".equals(currentFieldName)) {
        ranges=new ArrayList<RangeAggregator.Range>();
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          double from=Double.NEGATIVE_INFINITY;
          String fromAsStr=null;
          double to=Double.POSITIVE_INFINITY;
          String toAsStr=null;
          String key=null;
          String mask=null;
          String toOrFromOrMaskOrKey=null;
          while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
            if (token == XContentParser.Token.FIELD_NAME) {
              toOrFromOrMaskOrKey=parser.currentName();
            }
 else             if (token == XContentParser.Token.VALUE_NUMBER) {
              if ("from".equals(toOrFromOrMaskOrKey)) {
                from=parser.doubleValue();
              }
 else               if ("to".equals(toOrFromOrMaskOrKey)) {
                to=parser.doubleValue();
              }
            }
 else             if (token == XContentParser.Token.VALUE_STRING) {
              if ("from".equals(toOrFromOrMaskOrKey)) {
                fromAsStr=parser.text();
              }
 else               if ("to".equals(toOrFromOrMaskOrKey)) {
                toAsStr=parser.text();
              }
 else               if ("key".equals(toOrFromOrMaskOrKey)) {
                key=parser.text();
              }
 else               if ("mask".equals(toOrFromOrMaskOrKey)) {
                mask=parser.text();
              }
            }
          }
          RangeAggregator.Range range=new RangeAggregator.Range(key,from,fromAsStr,to,toAsStr);
          if (mask != null) {
            parseMaskRange(mask,range,aggregationName,context);
          }
          ranges.add(range);
        }
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("params".equals(currentFieldName)) {
        scriptParams=parser.map();
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else     if (token == XContentParser.Token.VALUE_BOOLEAN) {
      if ("keyed".equals(currentFieldName)) {
        keyed=parser.booleanValue();
      }
 else       if ("script_values_sorted".equals(currentFieldName) || "scriptValuesSorted".equals(currentFieldName)) {
        assumeSorted=parser.booleanValue();
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else {
      throw new SearchParseException(context,"Unexpected token " + token + " in ["+ aggregationName+ "].");
    }
  }
  if (ranges == null) {
    throw new SearchParseException(context,"Missing [ranges] in ranges aggregator [" + aggregationName + "]");
  }
  if (script != null) {
    config.script(context.scriptService().search(context.lookup(),scriptLang,script,scriptParams));
  }
  if (!assumeSorted) {
    config.ensureSorted(true);
  }
  config.formatter(ValueFormatter.IPv4);
  config.parser(ValueParser.IPv4);
  if (field == null) {
    return new RangeAggregator.Factory(aggregationName,config,InternalIPv4Range.FACTORY,ranges,keyed);
  }
  FieldMapper<?> mapper=context.smartNameFieldMapper(field);
  if (mapper == null) {
    config.unmapped(true);
    return new RangeAggregator.Factory(aggregationName,config,InternalIPv4Range.FACTORY,ranges,keyed);
  }
  if (!(mapper instanceof IpFieldMapper)) {
    throw new AggregationExecutionException("ip_range aggregation can only be applied to ip fields which is not the case with field [" + field + "]");
  }
  IndexFieldData<?> indexFieldData=context.fieldData().getForField(mapper);
  config.fieldContext(new FieldContext(field,indexFieldData));
  return new RangeAggregator.Factory(aggregationName,config,InternalIPv4Range.FACTORY,ranges,keyed);
}
