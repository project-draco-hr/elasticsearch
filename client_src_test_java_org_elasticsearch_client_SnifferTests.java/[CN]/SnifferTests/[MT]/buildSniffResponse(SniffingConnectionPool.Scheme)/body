{
  int numNodes=RandomInts.randomIntBetween(random(),1,5);
  List<Node> nodes=new ArrayList<>(numNodes);
  JsonFactory jsonFactory=new JsonFactory();
  StringWriter writer=new StringWriter();
  JsonGenerator generator=jsonFactory.createGenerator(writer);
  generator.writeStartObject();
  if (random().nextBoolean()) {
    generator.writeStringField("cluster_name","elasticsearch");
  }
  if (random().nextBoolean()) {
    generator.writeObjectFieldStart("bogus_object");
    generator.writeEndObject();
  }
  generator.writeObjectFieldStart("nodes");
  for (int i=0; i < numNodes; i++) {
    String nodeId=RandomStrings.randomAsciiOfLengthBetween(random(),5,10);
    generator.writeObjectFieldStart(nodeId);
    if (random().nextBoolean()) {
      generator.writeObjectFieldStart("bogus_object");
      generator.writeEndObject();
    }
    if (random().nextBoolean()) {
      generator.writeArrayFieldStart("bogus_array");
      generator.writeStartObject();
      generator.writeEndObject();
      generator.writeEndArray();
    }
    boolean isHttpEnabled=rarely() == false;
    int numRoles=RandomInts.randomIntBetween(random(),0,3);
    Set<Node.Role> nodeRoles=new HashSet<>(numRoles);
    for (int j=0; j < numRoles; j++) {
      Node.Role role;
      do {
        role=RandomPicks.randomFrom(random(),Node.Role.values());
      }
 while (nodeRoles.add(role) == false);
    }
    int numAttributes=RandomInts.randomIntBetween(random(),0,3);
    Map<String,String> attributes=new HashMap<>(numAttributes);
    for (int j=0; j < numAttributes; j++) {
      attributes.put("attr" + j,"value" + j);
    }
    if (isHttpEnabled) {
      String host="host" + i;
      int port=RandomInts.randomIntBetween(random(),9200,9299);
      HttpHost httpHost=new HttpHost(host,port,scheme.toString());
      nodes.add(new Node(httpHost,nodeRoles,attributes));
      generator.writeObjectFieldStart("http");
      if (random().nextBoolean()) {
        generator.writeArrayFieldStart("bound_address");
        generator.writeString("[fe80::1]:" + port);
        generator.writeString("[::1]:" + port);
        generator.writeString("127.0.0.1:" + port);
        generator.writeEndArray();
      }
      if (random().nextBoolean()) {
        generator.writeObjectFieldStart("bogus_object");
        generator.writeEndObject();
      }
      generator.writeStringField("publish_address",httpHost.toHostString());
      if (random().nextBoolean()) {
        generator.writeNumberField("max_content_length_in_bytes",104857600);
      }
      generator.writeEndObject();
    }
    generator.writeArrayFieldStart("roles");
    for (    Node.Role nodeRole : nodeRoles) {
      generator.writeString(nodeRole.toString());
    }
    generator.writeEndArray();
    if (numAttributes > 0) {
      generator.writeObjectFieldStart("attributes");
    }
    for (    Map.Entry<String,String> entry : attributes.entrySet()) {
      generator.writeStringField(entry.getKey(),entry.getValue());
    }
    if (numAttributes > 0) {
      generator.writeEndObject();
    }
    generator.writeEndObject();
  }
  generator.writeEndObject();
  generator.writeEndObject();
  generator.close();
  return SniffResponse.buildResponse(writer.toString(),nodes);
}
