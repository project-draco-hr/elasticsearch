{
  CloseableHttpClient client=HttpClientBuilder.create().build();
  Sniffer sniffer=new Sniffer(client,RequestConfig.DEFAULT,sniffRequestTimeout,scheme.toString());
  HttpHost httpHost=new HttpHost(server.getHostName(),server.getPort());
  try {
    List<Node> sniffedNodes=sniffer.sniffNodes(new Node(httpHost));
    if (sniffResponse.isFailure) {
      fail("sniffNodes should have failed");
    }
    assertThat(sniffedNodes.size(),equalTo(sniffResponse.nodes.size()));
    Iterator<Node> responseNodesIterator=sniffResponse.nodes.iterator();
    for (    Node sniffedNode : sniffedNodes) {
      Node responseNode=responseNodesIterator.next();
      assertThat(sniffedNode.getHttpHost(),equalTo(responseNode.getHttpHost()));
      assertThat(sniffedNode.getRoles(),equalTo(responseNode.getRoles()));
      assertThat(sniffedNode.getAttributes(),equalTo(responseNode.getAttributes()));
    }
  }
 catch (  ElasticsearchResponseException e) {
    if (sniffResponse.isFailure) {
      assertThat(e.getMessage(),containsString("GET http://localhost:" + server.getPort() + "/_nodes/http?timeout="+ sniffRequestTimeout));
      assertThat(e.getMessage(),containsString(Integer.toString(sniffResponse.nodesInfoResponseCode)));
      assertThat(e.getNode().getHttpHost(),equalTo(httpHost));
      assertThat(e.getStatusLine().getStatusCode(),equalTo(sniffResponse.nodesInfoResponseCode));
      assertThat(e.getRequestLine().toString(),equalTo("GET /_nodes/http?timeout=" + sniffRequestTimeout + "ms HTTP/1.1"));
    }
 else {
      fail("sniffNodes should have succeeded: " + e.getStatusLine());
    }
  }
}
