{
  final ObjectIntOpenHashMap<String> nodeCounts=new ObjectIntOpenHashMap<String>();
  for (  RoutingNode node : allocation.routingNodes()) {
    for (int i=0; i < node.shards().size(); i++) {
      ShardRouting shardRouting=node.shards().get(i);
      String nodeId=shardRouting.relocating() ? shardRouting.relocatingNodeId() : shardRouting.currentNodeId();
      nodeCounts.addTo(nodeId,1);
    }
  }
  RoutingNode[] nodes=allocation.routingNodes().nodesToShards().values().toArray(new RoutingNode[allocation.routingNodes().nodesToShards().values().size()]);
  Arrays.sort(nodes,new Comparator<RoutingNode>(){
    @Override public int compare(    RoutingNode o1,    RoutingNode o2){
      return nodeCounts.get(o1.nodeId()) - nodeCounts.get(o2.nodeId());
    }
  }
);
  return nodes;
}
