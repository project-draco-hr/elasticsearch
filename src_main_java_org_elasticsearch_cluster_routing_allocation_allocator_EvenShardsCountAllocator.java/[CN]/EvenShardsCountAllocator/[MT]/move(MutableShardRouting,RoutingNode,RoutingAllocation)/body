{
  if (!shardRouting.started()) {
    return false;
  }
  boolean changed=false;
  RoutingNode[] sortedNodesLeastToHigh=sortedNodesLeastToHigh(allocation);
  if (sortedNodesLeastToHigh.length == 0) {
    return false;
  }
  for (  RoutingNode nodeToCheck : sortedNodesLeastToHigh) {
    if (nodeToCheck.nodeId().equals(node.nodeId())) {
      continue;
    }
    Decision decision=allocation.deciders().canAllocate(shardRouting,nodeToCheck,allocation);
    if (decision.type() == Decision.Type.YES) {
      nodeToCheck.add(new MutableShardRouting(shardRouting.index(),shardRouting.id(),nodeToCheck.nodeId(),shardRouting.currentNodeId(),shardRouting.restoreSource(),shardRouting.primary(),INITIALIZING,shardRouting.version() + 1));
      shardRouting.relocate(nodeToCheck.nodeId());
      changed=true;
      break;
    }
  }
  return changed;
}
