{
  Settings settings=settingsBuilder().put("gateway.type","local").put("gateway.local.auto_import_dangled","no").build();
  logger.info("--> starting two nodes");
  final String node_1=internalCluster().startNodesAsync(2,settings).get().get(0);
  internalCluster().startNode(settings);
  logger.info("--> indexing a simple document");
  client().prepareIndex("test","type1","1").setSource("field1","value1").setRefresh(true).execute().actionGet();
  logger.info("--> waiting for green status");
  ensureGreen();
  logger.info("--> verify 1 doc in the index");
  for (int i=0; i < 10; i++) {
    assertHitCount(client().prepareCount().setQuery(matchAllQuery()).get(),1l);
  }
  assertThat(client().prepareGet("test","type1","1").execute().actionGet().isExists(),equalTo(true));
  logger.info("--> restarting the nodes");
  final Gateway gateway1=internalCluster().getInstance(Gateway.class,node_1);
  internalCluster().fullRestart(new RestartCallback(){
    @Override public Settings onNodeStopped(    String nodeName) throws Exception {
      if (node_1.equals(nodeName)) {
        logger.info("--> deleting the data for the first node");
        gateway1.reset();
      }
      return null;
    }
  }
);
  logger.info("--> waiting for green status");
  ensureGreen();
  Thread.sleep(500);
  logger.info("--> verify that the dangling index does not exists");
  assertThat(client().admin().indices().prepareExists("test").execute().actionGet().isExists(),equalTo(false));
  logger.info("--> restart start the nodes, but make sure we do recovery only after we have 2 nodes in the cluster");
  internalCluster().fullRestart(new RestartCallback(){
    @Override public Settings onNodeStopped(    String nodeName) throws Exception {
      return settingsBuilder().put("gateway.recover_after_nodes",2).build();
    }
  }
);
  logger.info("--> waiting for green status");
  ensureGreen();
  logger.info("--> verify that the dangling index does exists now!");
  assertThat(client().admin().indices().prepareExists("test").execute().actionGet().isExists(),equalTo(true));
  logger.info("--> verify the doc is there");
  assertThat(client().prepareGet("test","type1","1").execute().actionGet().isExists(),equalTo(true));
}
