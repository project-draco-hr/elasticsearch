{
  OptimizeRequest optimizeRequest=new OptimizeRequest(RestActions.splitIndices(request.param("index")));
  try {
    optimizeRequest.waitForMerge(request.paramAsBoolean("wait_for_merge",optimizeRequest.waitForMerge()));
    optimizeRequest.maxNumSegments(request.paramAsInt("max_num_segments",optimizeRequest.maxNumSegments()));
    optimizeRequest.onlyExpungeDeletes(request.paramAsBoolean("only_expunge_deletes",optimizeRequest.onlyExpungeDeletes()));
    optimizeRequest.flush(request.paramAsBoolean("flush",optimizeRequest.flush()));
    optimizeRequest.refresh(request.paramAsBoolean("refresh",optimizeRequest.refresh()));
    optimizeRequest.listenerThreaded(false);
    BroadcastOperationThreading operationThreading=BroadcastOperationThreading.fromString(request.param("operation_threading"),BroadcastOperationThreading.SINGLE_THREAD);
    if (operationThreading == BroadcastOperationThreading.NO_THREADS) {
      operationThreading=BroadcastOperationThreading.THREAD_PER_SHARD;
    }
    optimizeRequest.operationThreading(operationThreading);
  }
 catch (  Exception e) {
    try {
      JsonBuilder builder=RestJsonBuilder.restJsonBuilder(request);
      channel.sendResponse(new JsonRestResponse(request,BAD_REQUEST,builder.startObject().field("error",e.getMessage()).endObject()));
    }
 catch (    IOException e1) {
      logger.error("Failed to send failure response",e1);
    }
    return;
  }
  client.admin().indices().optimize(optimizeRequest,new ActionListener<OptimizeResponse>(){
    @Override public void onResponse(    OptimizeResponse response){
      try {
        JsonBuilder builder=RestJsonBuilder.restJsonBuilder(request);
        builder.startObject();
        builder.field("ok",true);
        buildBroadcastShardsHeader(builder,response);
        builder.endObject();
        channel.sendResponse(new JsonRestResponse(request,OK,builder));
      }
 catch (      Exception e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new JsonThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
