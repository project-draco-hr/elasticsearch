{
  Set<String> nodesIds=Sets.newHashSet();
  nodesIds.addAll(clusterService.state().nodes().masterNodes().keySet());
  TransportNodesListGatewayMetaState.NodesLocalGatewayMetaState nodesState=listGatewayMetaState.list(nodesIds,null).actionGet();
  if (nodesState.failures().length > 0) {
    for (    FailedNodeException failedNodeException : nodesState.failures()) {
      logger.warn("failed to fetch state from node",failedNodeException);
    }
  }
  TransportNodesListGatewayMetaState.NodeLocalGatewayMetaState electedState=null;
  for (  TransportNodesListGatewayMetaState.NodeLocalGatewayMetaState nodeState : nodesState) {
    if (nodeState.state() == null) {
      continue;
    }
    if (electedState == null) {
      electedState=nodeState;
    }
 else     if (nodeState.state().version() > electedState.state().version()) {
      electedState=nodeState;
    }
  }
  if (electedState == null) {
    logger.debug("no state elected");
    listener.onSuccess();
    return;
  }
  logger.debug("elected state from [{}]",electedState.node());
  final LocalGatewayMetaState state=electedState.state();
  final AtomicInteger indicesCounter=new AtomicInteger(state.metaData().indices().size());
  clusterService.submitStateUpdateTask("local-gateway-elected-state",new ProcessedClusterStateUpdateTask(){
    @Override public ClusterState execute(    ClusterState currentState){
      MetaData.Builder metaDataBuilder=newMetaDataBuilder().metaData(currentState.metaData());
      metaDataBuilder.markAsRecoveredFromGateway();
      for (      Map.Entry<String,IndexTemplateMetaData> entry : state.metaData().templates().entrySet()) {
        metaDataBuilder.put(entry.getValue());
      }
      return newClusterStateBuilder().state(currentState).version(state.version()).metaData(metaDataBuilder).build();
    }
    @Override public void clusterStateProcessed(    ClusterState clusterState){
      if (state.metaData().indices().isEmpty()) {
        listener.onSuccess();
        return;
      }
      for (      final IndexMetaData indexMetaData : state.metaData()) {
        try {
          createIndexService.createIndex(new MetaDataCreateIndexService.Request(MetaDataCreateIndexService.Request.Origin.GATEWAY,"gateway",indexMetaData.index()).settings(indexMetaData.settings()).mappingsMetaData(indexMetaData.mappings()).state(indexMetaData.state()).timeout(timeValueSeconds(30)),new MetaDataCreateIndexService.Listener(){
            @Override public void onResponse(            MetaDataCreateIndexService.Response response){
              if (indicesCounter.decrementAndGet() == 0) {
                listener.onSuccess();
              }
            }
            @Override public void onFailure(            Throwable t){
              logger.error("failed to create index [{}]",t,indexMetaData.index());
              if (indicesCounter.decrementAndGet() == 0) {
                listener.onSuccess();
              }
            }
          }
);
        }
 catch (        IOException e) {
          logger.error("failed to create index [{}]",e,indexMetaData.index());
        }
      }
    }
  }
);
}
