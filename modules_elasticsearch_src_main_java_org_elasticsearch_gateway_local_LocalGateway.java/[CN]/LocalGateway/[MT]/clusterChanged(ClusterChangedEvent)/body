{
  if (!event.state().metaData().recoveredFromGateway()) {
    return;
  }
  if (location == null) {
    return;
  }
  if (event.state().nodes().localNodeMaster()) {
    for (    Map.Entry<String,ImmutableSet<ClusterBlock>> entry : event.state().blocks().indices().entrySet()) {
      final String index=entry.getKey();
      ImmutableSet<ClusterBlock> indexBlocks=entry.getValue();
      if (indexBlocks.contains(INDEX_NOT_RECOVERED_BLOCK)) {
        IndexRoutingTable indexRoutingTable=event.state().routingTable().index(index);
        if (indexRoutingTable != null && indexRoutingTable.allPrimaryShardsActive()) {
          clusterService.submitStateUpdateTask("remove-index-block (all primary shards active for [" + index + "])",new ClusterStateUpdateTask(){
            @Override public ClusterState execute(            ClusterState currentState){
              ClusterBlocks.Builder blocks=ClusterBlocks.builder().blocks(currentState.blocks());
              blocks.removeIndexBlock(index,INDEX_NOT_RECOVERED_BLOCK);
              return ClusterState.builder().state(currentState).blocks(blocks).build();
            }
          }
);
        }
      }
    }
  }
  if (event.state().nodes().localNode().masterNode() && event.metaDataChanged()) {
    LocalGatewayMetaState.Builder builder=LocalGatewayMetaState.builder();
    if (currentMetaState != null) {
      builder.state(currentMetaState);
    }
    builder.version(event.state().version());
    builder.metaData(event.state().metaData());
    try {
      LocalGatewayMetaState stateToWrite=builder.build();
      XContentBuilder xContentBuilder=XContentFactory.contentBuilder(XContentType.JSON);
      xContentBuilder.prettyPrint();
      xContentBuilder.startObject();
      LocalGatewayMetaState.Builder.toXContent(stateToWrite,xContentBuilder,ToXContent.EMPTY_PARAMS);
      xContentBuilder.endObject();
      File stateFile=new File(location,"metadata-" + event.state().version());
      FileOutputStream fos=new FileOutputStream(stateFile);
      fos.write(xContentBuilder.unsafeBytes(),0,xContentBuilder.unsafeBytesLength());
      fos.close();
      FileSystemUtils.syncFile(stateFile);
      currentMetaState=stateToWrite;
      File[] files=location.listFiles(new FilenameFilter(){
        @Override public boolean accept(        File dir,        String name){
          return name.startsWith("metadata-") && !name.equals("metadata-" + event.state().version());
        }
      }
);
      for (      File file : files) {
        file.delete();
      }
    }
 catch (    IOException e) {
      logger.warn("failed to write updated state",e);
    }
  }
  if (event.state().nodes().localNode().dataNode() && event.routingTableChanged()) {
    LocalGatewayStartedShards.Builder builder=LocalGatewayStartedShards.builder();
    if (currentStartedShards != null) {
      builder.state(currentStartedShards);
    }
    builder.version(event.state().version());
    for (    IndexRoutingTable indexRoutingTable : event.state().routingTable()) {
      for (      IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {
        if (indexShardRoutingTable.primaryShard().active()) {
          builder.remove(indexShardRoutingTable.shardId());
        }
      }
    }
    RoutingNode routingNode=event.state().readOnlyRoutingNodes().node(event.state().nodes().localNodeId());
    if (routingNode != null) {
      for (      MutableShardRouting shardRouting : routingNode) {
        if (shardRouting.active()) {
          builder.put(shardRouting.shardId(),event.state().version());
        }
      }
    }
    try {
      LocalGatewayStartedShards stateToWrite=builder.build();
      XContentBuilder xContentBuilder=XContentFactory.contentBuilder(XContentType.JSON);
      xContentBuilder.prettyPrint();
      xContentBuilder.startObject();
      LocalGatewayStartedShards.Builder.toXContent(stateToWrite,xContentBuilder,ToXContent.EMPTY_PARAMS);
      xContentBuilder.endObject();
      File stateFile=new File(location,"shards-" + event.state().version());
      FileOutputStream fos=new FileOutputStream(stateFile);
      fos.write(xContentBuilder.unsafeBytes(),0,xContentBuilder.unsafeBytesLength());
      fos.close();
      FileSystemUtils.syncFile(stateFile);
      currentStartedShards=stateToWrite;
    }
 catch (    IOException e) {
      logger.warn("failed to write updated state",e);
    }
    File[] files=location.listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.startsWith("shards-") && !name.equals("shards-" + event.state().version());
      }
    }
);
    for (    File file : files) {
      file.delete();
    }
  }
}
