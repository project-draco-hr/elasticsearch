{
  try {
    File stateLocation=new File(nodeEnv.nodeDataLocations()[0],"_state");
    if (!stateLocation.exists()) {
      FileSystemUtils.mkdirs(stateLocation);
    }
    File stateFile=new File(stateLocation,"shards-" + event.state().version());
    OutputStream fos=new FileOutputStream(stateFile);
    if (compress) {
      fos=new LZFOutputStream(fos);
    }
    XContentBuilder xContentBuilder=XContentFactory.contentBuilder(XContentType.JSON,fos);
    if (prettyPrint) {
      xContentBuilder.prettyPrint();
    }
    xContentBuilder.startObject();
    LocalGatewayStartedShards.Builder.toXContent(stateToWrite,xContentBuilder,ToXContent.EMPTY_PARAMS);
    xContentBuilder.endObject();
    xContentBuilder.close();
    fos.close();
    FileSystemUtils.syncFile(stateFile);
    currentStartedShards=stateToWrite;
  }
 catch (  IOException e) {
    logger.warn("failed to write updated state",e);
    return;
  }
  for (  File dataLocation : nodeEnv.nodeDataLocations()) {
    File stateLocation=new File(dataLocation,"_state");
    if (!stateLocation.exists()) {
      continue;
    }
    File[] files=stateLocation.listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.startsWith("shards-") && !name.equals("shards-" + event.state().version());
      }
    }
);
    if (files != null) {
      for (      File file : files) {
        file.delete();
      }
    }
  }
}
