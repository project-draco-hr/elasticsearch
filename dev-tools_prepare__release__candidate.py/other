import fnmatch
import argparse
from prepare_release_update_documentation import update_reference_docs
import subprocess
import tempfile
import re
import os
import shutil
VERSION_FILE = 'core/src/main/java/org/elasticsearch/Version.java'
POM_FILE = 'pom.xml'
MAIL_TEMPLATE = '\nHi all\n\nThe new release candidate for %(version)s based on this commit[1]  is now available, including the x-plugins, and RPM/deb repos:\n\n   - ZIP [2]\n   - tar.gz [3]\n   - RPM [4]\n   - deb [5]\n\nPlugins can be installed as follows,\n\n    bin/plugin -Des.plugins.staging=true install cloud-aws\n\nThe same goes for the x-plugins:\n\n    bin/plugin -Des.plugins.staging=true install license\n    bin/plugin -Des.plugins.staging=true install shield\n    bin/plugin -Des.plugins.staging=true install watcher\n\nTo install the deb from an APT repo:\n\nAPT line sources.list line:\n\ndeb http://download.elasticsearch.org/elasticsearch/staging/%(version)s-%(hash)s/repos/elasticsearch/%(major_minor_version)s/debian/ stable main\n\nTo install the RPM, create a YUM file like:\n\n    /etc/yum.repos.d/elasticsearch.repo\n\ncontaining:\n\n[elasticsearch-2.0]\nname=Elasticsearch repository for packages\nbaseurl=http://download.elasticsearch.org/elasticsearch/staging/%(version)s-%(hash)s/repos/elasticsearch/%(major_minor_version)s/centos\ngpgcheck=1\ngpgkey=http://packages.elastic.co/GPG-KEY-elasticsearch\nenabled=1\n\nTo smoke-test the release please run:\n\n python3 -B ./dev-tools/smoke_tests_rc.py --version %(version)s --hash %(hash)s --plugins license,shield,watcher\n\nNOTE: this script requires JAVA_HOME to point to a Java 7 Runtime \n\n[1] https://github.com/elastic/elasticsearch/commit/%(hash)s\n[2] http://download.elasticsearch.org/elasticsearch/staging/%(version)s-%(hash)s/org/elasticsearch/distribution/zip/elasticsearch/%(version)s/elasticsearch-%(version)s.zip\n[3] http://download.elasticsearch.org/elasticsearch/staging/%(version)s-%(hash)s/org/elasticsearch/distribution/tar/elasticsearch/%(version)s/elasticsearch-%(version)s.tar.gz\n[4] http://download.elasticsearch.org/elasticsearch/staging/%(version)s-%(hash)s/org/elasticsearch/distribution/rpm/elasticsearch/%(version)s/elasticsearch-%(version)s.rpm\n[5] http://download.elasticsearch.org/elasticsearch/staging/%(version)s-%(hash)s/org/elasticsearch/distribution/deb/elasticsearch/%(version)s/elasticsearch-%(version)s.deb\n'
VERBOSE = True
if (__name__ == '__main__'):
    parser = argparse.ArgumentParser(description='Builds and publishes a Elasticsearch Release')
    parser.add_argument('--deploy', '-d', dest='deploy', action='store_true', help='Installs and Deploys the release on a sonartype staging repository.')
    parser.add_argument('--skipDocCheck', '-c', dest='skip_doc_check', action='store_false', help='Skips any checks for pending documentation changes')
    parser.add_argument('--push-s3', '-p', dest='push', action='store_true', help='Pushes artifacts to the S3 staging area')
    parser.add_argument('--install_only', '-i', dest='install_only', action='store_true', help='Only runs a maven install to skip the remove deployment step')
    parser.add_argument('--gpg-key', '-k', dest='gpg_key', default='D88E42B4', help='Allows you to specify a different gpg_key to be used instead of the default release key')
    parser.add_argument('--verbose', '-b', dest='verbose', help='Runs the script in verbose mode')
    parser.set_defaults(deploy=False)
    parser.set_defaults(skip_doc_check=False)
    parser.set_defaults(push=False)
    parser.set_defaults(install_only=False)
    parser.set_defaults(verbose=False)
    args = parser.parse_args()
    install_and_deploy = args.deploy
    skip_doc_check = args.skip_doc_check
    push = args.push
    gpg_key = args.gpg_key
    install_only = args.install_only
    VERBOSE = args.verbose
    ensure_checkout_is_clean()
    release_version = find_release_version()
    if (not re.match('(\\d+\\.\\d+)\\.*', release_version)):
        raise RuntimeError(('illegal release version format: %s' % release_version))
    major_minor_version = re.match('(\\d+\\.\\d+)\\.*', release_version).group(1)
    print ('*** Preparing release version: [%s]' % release_version)
    if (not skip_doc_check):
        print '*** Check for pending documentation changes'
        pending_files = update_reference_docs(release_version)
        if pending_files:
            raise RuntimeError(('pending coming[%s] documentation changes found in %s' % (release_version, pending_files)))
    run(('cd dev-tools && mvn versions:set -DnewVersion=%s -DgenerateBackupPoms=false' % release_version))
    run(('cd rest-api-spec && mvn versions:set -DnewVersion=%s -DgenerateBackupPoms=false' % release_version))
    run(('mvn versions:set -DnewVersion=%s -DgenerateBackupPoms=false' % release_version))
    remove_version_snapshot(VERSION_FILE, release_version)
    print '*** Done removing snapshot version. DO NOT COMMIT THIS, WHEN CREATING A RELEASE CANDIDATE.'
    shortHash = subprocess.check_output('git log --pretty=format:"%h" -n 1', shell=True).decode('utf-8')
    localRepo = ('/tmp/elasticsearch-%s-%s' % (release_version, shortHash))
    localRepoElasticsearch = (localRepo + '/org/elasticsearch')
    if os.path.exists(localRepoElasticsearch):
        print ('clean local repository %s' % localRepoElasticsearch)
        shutil.rmtree(localRepoElasticsearch)
    if install_only:
        mvn_target = 'install'
    else:
        mvn_target = 'deploy'
    install_command = ('mvn clean %s -Prelease -Dskip.integ.tests=true -Dgpg.keyname="%s" -Dpackaging.rpm.rpmbuild=/usr/bin/rpmbuild -Drpm.sign=true -Dmaven.repo.local=%s -Dno.commit.pattern="\\bno(n|)commit\\b" -Dforbidden.test.signatures=""' % (mvn_target, gpg_key, localRepo))
    clean_repo_command = ('find %s -name _remote.repositories -exec rm {} \\;' % localRepoElasticsearch)
    rename_metadata_files_command = ('for i in $(find %s -name "maven-metadata-local.xml*") ; do mv "$i" "${i/-local/}" ; done' % localRepoElasticsearch)
    s3_sync_command = ('s3cmd sync %s s3://download.elasticsearch.org/elasticsearch/staging/%s-%s/org/' % (localRepoElasticsearch, release_version, shortHash))
    s3_bucket_sync_to = ('download.elasticsearch.org/elasticsearch/staging/%s-%s/repos' % (release_version, shortHash))
    build_repo_command = ('dev-tools/build_repositories.sh %s' % major_minor_version)
    if install_and_deploy:
        for cmd in [install_command, clean_repo_command]:
            run(cmd)
        rename_local_meta_files(localRepoElasticsearch)
    else:
        print ''
        print '*** To create a release candidate run: '
        print ('  %s' % install_command)
        print ('  1. Remove all _remote.repositories: %s' % clean_repo_command)
        print ('  2. Rename all maven metadata files: %s' % rename_metadata_files_command)
    if push:
        run(s3_sync_command)
        env_vars = {'S3_BUCKET_SYNC_TO': s3_bucket_sync_to, }
        run(build_repo_command, env_vars)
    else:
        print ''
        print '*** To push a release candidate to s3 run: '
        print ('  1. Sync %s into S3 bucket' % localRepoElasticsearch)
        print ('    %s' % s3_sync_command)
        print '  2. Create repositories: '
        print ('    export S3_BUCKET_SYNC_TO="%s"' % s3_bucket_sync_to)
        print ('     %s' % build_repo_command)
        print ''
        print 'NOTE: the above mvn command will promt you several times for the GPG passphrase of the key you specified you can alternatively pass it via -Dgpg.passphrase=yourPassPhrase'
        print " since RPM signing doesn't support gpg-agents the recommended way to set the password is to add a release profile to your settings.xml:"
        print '\n  <profiles>\n    <profile>\n      <id>release</id>\n      <properties>\n        <gpg.passphrase>YourPasswordGoesHere</gpg.passphrase>\n      </properties>\n    </profile>\n  </profiles>\n    '
        print 'NOTE: Running s3cmd might require you to create a config file with your credentials, if the s3cmd does not support suppliying them via the command line!'
    print '*** Once the release is deployed and published send out the following mail to dev@elastic.co:'
    print (MAIL_TEMPLATE % {'version': release_version, 'hash': shortHash, 'major_minor_version': major_minor_version, })
