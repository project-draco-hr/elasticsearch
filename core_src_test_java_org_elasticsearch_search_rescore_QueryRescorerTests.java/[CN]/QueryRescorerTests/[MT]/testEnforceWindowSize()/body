{
  createIndex("test");
  int iters=scaledRandomIntBetween(10,20);
  for (int i=0; i < iters; i++) {
    client().prepareIndex("test","type",Integer.toString(i)).setSource("f",Integer.toString(i)).execute().actionGet();
  }
  ensureYellow();
  refresh();
  int numShards=getNumShards("test").numPrimaries;
  for (int j=0; j < iters; j++) {
    SearchResponse searchResponse=client().prepareSearch().setQuery(QueryBuilders.matchAllQuery()).setRescorer(RescoreBuilder.queryRescorer(QueryBuilders.functionScoreQuery(QueryBuilders.matchAllQuery()).boostMode("replace").add(ScoreFunctionBuilders.factorFunction(100))).setQueryWeight(0.0f).setRescoreQueryWeight(1.0f)).setRescoreWindow(1).setSize(randomIntBetween(2,10)).execute().actionGet();
    assertSearchResponse(searchResponse);
    assertFirstHit(searchResponse,hasScore(100.f));
    int numDocsWith100AsAScore=0;
    for (int i=0; i < searchResponse.getHits().hits().length; i++) {
      float score=searchResponse.getHits().hits()[i].getScore();
      if (score == 100f) {
        numDocsWith100AsAScore+=1;
      }
    }
    assertThat(numDocsWith100AsAScore,lessThanOrEqualTo(numShards));
  }
}
