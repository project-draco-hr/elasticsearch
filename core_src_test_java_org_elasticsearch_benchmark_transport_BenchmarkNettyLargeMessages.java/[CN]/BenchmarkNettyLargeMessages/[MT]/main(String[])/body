{
  final ByteSizeValue payloadSize=new ByteSizeValue(10,ByteSizeUnit.MB);
  final int NUMBER_OF_ITERATIONS=100000;
  final int NUMBER_OF_CLIENTS=5;
  final byte[] payload=new byte[(int)payloadSize.bytes()];
  Settings settings=Settings.settingsBuilder().build();
  NetworkService networkService=new NetworkService(settings);
  NodeSettingsService settingsService=new NodeSettingsService(settings);
  DynamicSettings dynamicSettings=new DynamicSettings();
  final ThreadPool threadPool=new ThreadPool("BenchmarkNettyLargeMessages");
  final TransportService transportServiceServer=new TransportService(new NettyTransport(settings,threadPool,networkService,BigArrays.NON_RECYCLING_INSTANCE,Version.CURRENT),threadPool).start();
  final TransportService transportServiceClient=new TransportService(new NettyTransport(settings,threadPool,networkService,BigArrays.NON_RECYCLING_INSTANCE,Version.CURRENT),threadPool).start();
  final DiscoveryNode bigNode=new DiscoveryNode("big",new InetSocketTransportAddress("localhost",9300),Version.CURRENT);
  final DiscoveryNode smallNode=bigNode;
  transportServiceClient.connectToNode(bigNode);
  transportServiceClient.connectToNode(smallNode);
  transportServiceServer.registerRequestHandler("benchmark",BenchmarkMessageRequest.class,ThreadPool.Names.GENERIC,new TransportRequestHandler<BenchmarkMessageRequest>(){
    @Override public void messageReceived(    BenchmarkMessageRequest request,    TransportChannel channel) throws Exception {
      channel.sendResponse(new BenchmarkMessageResponse(request));
    }
  }
);
  final CountDownLatch latch=new CountDownLatch(NUMBER_OF_CLIENTS);
  for (int i=0; i < NUMBER_OF_CLIENTS; i++) {
    new Thread(new Runnable(){
      @Override public void run(){
        for (int i=0; i < NUMBER_OF_ITERATIONS; i++) {
          BenchmarkMessageRequest message=new BenchmarkMessageRequest(1,payload);
          transportServiceClient.submitRequest(bigNode,"benchmark",message,options().withType(TransportRequestOptions.Type.BULK),new BaseTransportResponseHandler<BenchmarkMessageResponse>(){
            @Override public BenchmarkMessageResponse newInstance(){
              return new BenchmarkMessageResponse();
            }
            @Override public String executor(){
              return ThreadPool.Names.SAME;
            }
            @Override public void handleResponse(            BenchmarkMessageResponse response){
            }
            @Override public void handleException(            TransportException exp){
              exp.printStackTrace();
            }
          }
).txGet();
        }
        latch.countDown();
      }
    }
).start();
  }
  new Thread(new Runnable(){
    @Override public void run(){
      for (int i=0; i < 1; i++) {
        BenchmarkMessageRequest message=new BenchmarkMessageRequest(2,BytesRef.EMPTY_BYTES);
        long start=System.currentTimeMillis();
        transportServiceClient.submitRequest(smallNode,"benchmark",message,options().withType(TransportRequestOptions.Type.STATE),new BaseTransportResponseHandler<BenchmarkMessageResponse>(){
          @Override public BenchmarkMessageResponse newInstance(){
            return new BenchmarkMessageResponse();
          }
          @Override public String executor(){
            return ThreadPool.Names.SAME;
          }
          @Override public void handleResponse(          BenchmarkMessageResponse response){
          }
          @Override public void handleException(          TransportException exp){
            exp.printStackTrace();
          }
        }
).txGet();
        long took=System.currentTimeMillis() - start;
        System.out.println("Took " + took + "ms");
      }
    }
  }
).start();
  latch.await();
}
