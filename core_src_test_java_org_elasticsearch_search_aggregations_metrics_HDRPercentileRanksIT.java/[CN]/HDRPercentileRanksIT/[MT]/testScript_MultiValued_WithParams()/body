{
  int sigDigits=randomSignificantDigits();
  Map<String,Object> params=new HashMap<>();
  params.put("dec",1);
  final double[] pcts=randomPercents(minValues - 1,maxValues - 1);
  SearchResponse searchResponse=client().prepareSearch("idx").setQuery(matchAllQuery()).addAggregation(percentileRanks("percentile_ranks").method(PercentilesMethod.HDR).numberOfSignificantValueDigits(sigDigits).script(new Script("List values = doc['values'].values; double[] res = new double[values.size()]; for (int i = 0; i < res.length; i++) { res[i] = values.get(i) - dec; }; return res;",ScriptType.INLINE,null,params)).percentiles(pcts)).execute().actionGet();
  assertThat(searchResponse.getHits().getTotalHits(),equalTo(10l));
  final PercentileRanks percentiles=searchResponse.getAggregations().get("percentile_ranks");
  assertConsistent(pcts,percentiles,minValues - 1,maxValues - 1,sigDigits);
}
