{
  ShardId shard=new ShardId("test","uuid",0);
  Map<DiscoveryNode,Decision> nodeToDecisions=new HashMap<>();
  Map<DiscoveryNode,Float> nodeToWeight=new HashMap<>();
  for (int i=randomIntBetween(2,5); i > 0; i--) {
    DiscoveryNode dn=new DiscoveryNode("node-" + i,DummyTransportAddress.INSTANCE,emptyMap(),emptySet(),Version.CURRENT);
    Decision.Multi d=new Decision.Multi();
    d.add(Decision.single(Decision.Type.NO,"no label","because I said no"));
    d.add(Decision.single(Decision.Type.YES,"yes label","yes please"));
    d.add(Decision.single(Decision.Type.THROTTLE,"throttle label","wait a sec"));
    nodeToDecisions.put(dn,d);
    nodeToWeight.put(dn,randomFloat());
  }
  long remainingDelay=randomIntBetween(0,500);
  ClusterAllocationExplanation cae=new ClusterAllocationExplanation(shard,true,"assignedNode",null,nodeToDecisions,nodeToWeight,remainingDelay);
  BytesStreamOutput out=new BytesStreamOutput();
  cae.writeTo(out);
  StreamInput in=StreamInput.wrap(out.bytes());
  ClusterAllocationExplanation cae2=new ClusterAllocationExplanation(in);
  assertEquals(shard,cae2.getShard());
  assertTrue(cae2.isPrimary());
  assertTrue(cae2.isAssigned());
  assertEquals("assignedNode",cae2.getAssignedNodeId());
  assertNull(cae2.getUnassignedInfo());
  for (  Map.Entry<DiscoveryNode,Decision> entry : cae2.getNodeDecisions().entrySet()) {
    assertEquals(nodeToDecisions.get(entry.getKey()),entry.getValue());
  }
  assertEquals(nodeToWeight,cae2.getNodeWeights());
  assertEquals(remainingDelay,cae2.getRemainingDelayNanos());
}
