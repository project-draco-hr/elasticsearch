{
  ShardId shard=new ShardId("test","uuid",0);
  Map<DiscoveryNode,Decision> nodeToDecisions=new HashMap<>();
  Map<DiscoveryNode,Float> nodeToWeight=new HashMap<>();
  DiscoveryNode dn=new DiscoveryNode("node1",DummyTransportAddress.INSTANCE,emptyMap(),emptySet(),Version.CURRENT);
  Decision.Multi d=new Decision.Multi();
  d.add(Decision.single(Decision.Type.NO,"no label","because I said no"));
  d.add(Decision.single(Decision.Type.YES,"yes label","yes please"));
  d.add(Decision.single(Decision.Type.THROTTLE,"throttle label","wait a sec"));
  nodeToDecisions.put(dn,d);
  nodeToWeight.put(dn,1.5f);
  long remainingDelay=42;
  DiscoveryNode nodeWithStore=new DiscoveryNode("node1",DummyTransportAddress.INSTANCE,emptyMap(),emptySet(),Version.CURRENT);
  IndicesShardStoresResponse.StoreStatus storeStatus=new IndicesShardStoresResponse.StoreStatus(nodeWithStore,42,"eggplant",IndicesShardStoresResponse.StoreStatus.AllocationStatus.PRIMARY,null);
  List<IndicesShardStoresResponse.StoreStatus> storeStatusList=Collections.singletonList(storeStatus);
  Set<String> allocationIds=new HashSet<>();
  allocationIds.add("potato");
  ClusterAllocationExplanation cae=new ClusterAllocationExplanation(shard,true,"assignedNode",null,nodeToDecisions,nodeToWeight,remainingDelay,storeStatusList,allocationIds);
  XContentBuilder builder=XContentFactory.jsonBuilder();
  cae.toXContent(builder,ToXContent.EMPTY_PARAMS);
  assertEquals("{\"shard\":{\"index\":\"test\",\"index_uuid\":\"uuid\",\"id\":0,\"primary\":true}," + "\"assigned\":true,\"assigned_node_id\":\"assignedNode\"," + "\"nodes\":{\"node1\":{\"node_name\":\"\",\"node_attributes\":{},\"store\":{\"shard_copy\":\"STALE_COPY\"},"+ "\"final_decision\":\"STORE_STALE\",\"weight\":1.5,\"decisions\":[{\"decider\":\"no label\",\"decision\":\"NO\","+ "\"explanation\":\"because I said no\"},{\"decider\":\"yes label\",\"decision\":\"YES\","+ "\"explanation\":\"yes please\"},{\"decider\":\"throttle label\",\"decision\":\"THROTTLE\","+ "\"explanation\":\"wait a sec\"}]}}}",builder.string());
}
