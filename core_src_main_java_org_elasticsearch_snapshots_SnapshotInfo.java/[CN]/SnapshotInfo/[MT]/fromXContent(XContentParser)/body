{
  String name=null;
  Version version=Version.CURRENT;
  SnapshotState state=SnapshotState.IN_PROGRESS;
  String reason=null;
  List<String> indices=Collections.emptyList();
  long startTime=0;
  long endTime=0;
  int totalShard=0;
  int successfulShards=0;
  List<SnapshotShardFailure> shardFailures=Collections.emptyList();
  if (parser.currentToken() == null) {
    parser.nextToken();
  }
  if (parser.currentToken() == XContentParser.Token.START_OBJECT) {
    parser.nextToken();
  }
  XContentParser.Token token;
  if ((token=parser.nextToken()) == XContentParser.Token.START_OBJECT) {
    String currentFieldName=parser.currentName();
    if (SNAPSHOT.equals(currentFieldName)) {
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          currentFieldName=parser.currentName();
          token=parser.nextToken();
          if (token.isValue()) {
            if (NAME.equals(currentFieldName)) {
              name=parser.text();
            }
 else             if (STATE.equals(currentFieldName)) {
              state=SnapshotState.valueOf(parser.text());
            }
 else             if (REASON.equals(currentFieldName)) {
              reason=parser.text();
            }
 else             if (START_TIME.equals(currentFieldName)) {
              startTime=parser.longValue();
            }
 else             if (END_TIME.equals(currentFieldName)) {
              endTime=parser.longValue();
            }
 else             if (TOTAL_SHARDS.equals(currentFieldName)) {
              totalShard=parser.intValue();
            }
 else             if (SUCCESSFUL_SHARDS.equals(currentFieldName)) {
              successfulShards=parser.intValue();
            }
 else             if (VERSION_ID.equals(currentFieldName)) {
              version=Version.fromId(parser.intValue());
            }
          }
 else           if (token == XContentParser.Token.START_ARRAY) {
            if (INDICES.equals(currentFieldName)) {
              ArrayList<String> indicesArray=new ArrayList<>();
              while (parser.nextToken() != XContentParser.Token.END_ARRAY) {
                indicesArray.add(parser.text());
              }
              indices=Collections.unmodifiableList(indicesArray);
            }
 else             if (FAILURES.equals(currentFieldName)) {
              ArrayList<SnapshotShardFailure> shardFailureArrayList=new ArrayList<>();
              while (parser.nextToken() != XContentParser.Token.END_ARRAY) {
                shardFailureArrayList.add(SnapshotShardFailure.fromXContent(parser));
              }
              shardFailures=Collections.unmodifiableList(shardFailureArrayList);
            }
 else {
              parser.skipChildren();
            }
          }
 else           if (token == XContentParser.Token.START_OBJECT) {
            parser.skipChildren();
          }
        }
      }
    }
  }
 else {
    throw new ElasticsearchParseException("unexpected token  [" + token + "]");
  }
  return new SnapshotInfo(name,indices,state,reason,version,startTime,endTime,totalShard,successfulShards,shardFailures);
}
