{
  final Settings.Builder transientUpdates=Settings.settingsBuilder();
  final Settings.Builder persistentUpdates=Settings.settingsBuilder();
  clusterService.submitStateUpdateTask("cluster_update_settings",new AckedClusterStateUpdateTask<ClusterUpdateSettingsResponse>(Priority.IMMEDIATE,request,listener){
    private volatile boolean changed=false;
    @Override protected ClusterUpdateSettingsResponse newResponse(    boolean acknowledged){
      return new ClusterUpdateSettingsResponse(acknowledged,transientUpdates.build(),persistentUpdates.build());
    }
    @Override public void onAllNodesAcked(    @Nullable Throwable t){
      if (changed) {
        reroute(true);
      }
 else {
        super.onAllNodesAcked(t);
      }
    }
    @Override public void onAckTimeout(){
      if (changed) {
        reroute(false);
      }
 else {
        super.onAckTimeout();
      }
    }
    private void reroute(    final boolean updateSettingsAcked){
      if (!clusterService.state().nodes().localNodeMaster()) {
        logger.debug("Skipping reroute after cluster update settings, because node is no longer master");
        listener.onResponse(new ClusterUpdateSettingsResponse(updateSettingsAcked,transientUpdates.build(),persistentUpdates.build()));
        return;
      }
      clusterService.submitStateUpdateTask("reroute_after_cluster_update_settings",new AckedClusterStateUpdateTask<ClusterUpdateSettingsResponse>(Priority.URGENT,request,listener){
        @Override public boolean mustAck(        DiscoveryNode discoveryNode){
          return updateSettingsAcked;
        }
        @Override protected ClusterUpdateSettingsResponse newResponse(        boolean acknowledged){
          return new ClusterUpdateSettingsResponse(updateSettingsAcked && acknowledged,transientUpdates.build(),persistentUpdates.build());
        }
        @Override public void onNoLongerMaster(        String source){
          logger.debug("failed to preform reroute after cluster settings were updated - current node is no longer a master");
          listener.onResponse(new ClusterUpdateSettingsResponse(updateSettingsAcked,transientUpdates.build(),persistentUpdates.build()));
        }
        @Override public void onFailure(        String source,        Throwable t){
          logger.debug("failed to perform [{}]",t,source);
          listener.onFailure(new ElasticsearchException("reroute after update settings failed",t));
        }
        @Override public ClusterState execute(        final ClusterState currentState){
          RoutingAllocation.Result routingResult=allocationService.reroute(currentState,"reroute after cluster update settings");
          if (!routingResult.changed()) {
            return currentState;
          }
          return ClusterState.builder(currentState).routingResult(routingResult).build();
        }
      }
);
    }
    @Override public void onFailure(    String source,    Throwable t){
      logger.debug("failed to perform [{}]",t,source);
      super.onFailure(source,t);
    }
    @Override public ClusterState execute(    final ClusterState currentState){
      Settings.Builder transientSettings=Settings.settingsBuilder();
      transientSettings.put(currentState.metaData().transientSettings());
      for (      Map.Entry<String,String> entry : request.transientSettings().getAsMap().entrySet()) {
        if (dynamicSettings.isDynamicOrLoggingSetting(entry.getKey())) {
          String error=dynamicSettings.validateDynamicSetting(entry.getKey(),entry.getValue(),clusterService.state());
          if (error == null) {
            transientSettings.put(entry.getKey(),entry.getValue());
            transientUpdates.put(entry.getKey(),entry.getValue());
            changed=true;
          }
 else {
            logger.warn("ignoring transient setting [{}], [{}]",entry.getKey(),error);
          }
        }
 else {
          logger.warn("ignoring transient setting [{}], not dynamically updateable",entry.getKey());
        }
      }
      Settings.Builder persistentSettings=Settings.settingsBuilder();
      persistentSettings.put(currentState.metaData().persistentSettings());
      for (      Map.Entry<String,String> entry : request.persistentSettings().getAsMap().entrySet()) {
        if (dynamicSettings.isDynamicOrLoggingSetting(entry.getKey())) {
          String error=dynamicSettings.validateDynamicSetting(entry.getKey(),entry.getValue(),clusterService.state());
          if (error == null) {
            persistentSettings.put(entry.getKey(),entry.getValue());
            persistentUpdates.put(entry.getKey(),entry.getValue());
            changed=true;
          }
 else {
            logger.warn("ignoring persistent setting [{}], [{}]",entry.getKey(),error);
          }
        }
 else {
          logger.warn("ignoring persistent setting [{}], not dynamically updateable",entry.getKey());
        }
      }
      if (!changed) {
        return currentState;
      }
      MetaData.Builder metaData=MetaData.builder(currentState.metaData()).persistentSettings(persistentSettings.build()).transientSettings(transientSettings.build());
      ClusterBlocks.Builder blocks=ClusterBlocks.builder().blocks(currentState.blocks());
      boolean updatedReadOnly=metaData.persistentSettings().getAsBoolean(MetaData.SETTING_READ_ONLY,false) || metaData.transientSettings().getAsBoolean(MetaData.SETTING_READ_ONLY,false);
      if (updatedReadOnly) {
        blocks.addGlobalBlock(MetaData.CLUSTER_READ_ONLY_BLOCK);
      }
 else {
        blocks.removeGlobalBlock(MetaData.CLUSTER_READ_ONLY_BLOCK);
      }
      return builder(currentState).metaData(metaData).blocks(blocks).build();
    }
  }
);
}
