{
  final SettingsUpdater updater=new SettingsUpdater(clusterSettings);
  clusterService.submitStateUpdateTask("cluster_update_settings",new AckedClusterStateUpdateTask<ClusterUpdateSettingsResponse>(Priority.IMMEDIATE,request,listener){
    private volatile boolean changed=false;
    @Override protected ClusterUpdateSettingsResponse newResponse(    boolean acknowledged){
      return new ClusterUpdateSettingsResponse(acknowledged,updater.getTransientUpdates(),updater.getPersistentUpdate());
    }
    @Override public void onAllNodesAcked(    @Nullable Exception e){
      if (changed) {
        reroute(true);
      }
 else {
        super.onAllNodesAcked(e);
      }
    }
    @Override public void onAckTimeout(){
      if (changed) {
        reroute(false);
      }
 else {
        super.onAckTimeout();
      }
    }
    private void reroute(    final boolean updateSettingsAcked){
      if (!clusterService.state().nodes().isLocalNodeElectedMaster()) {
        logger.debug("Skipping reroute after cluster update settings, because node is no longer master");
        listener.onResponse(new ClusterUpdateSettingsResponse(updateSettingsAcked,updater.getTransientUpdates(),updater.getPersistentUpdate()));
        return;
      }
      clusterService.submitStateUpdateTask("reroute_after_cluster_update_settings",new AckedClusterStateUpdateTask<ClusterUpdateSettingsResponse>(Priority.URGENT,request,listener){
        @Override public boolean mustAck(        DiscoveryNode discoveryNode){
          return updateSettingsAcked;
        }
        @Override protected ClusterUpdateSettingsResponse newResponse(        boolean acknowledged){
          return new ClusterUpdateSettingsResponse(updateSettingsAcked && acknowledged,updater.getTransientUpdates(),updater.getPersistentUpdate());
        }
        @Override public void onNoLongerMaster(        String source){
          logger.debug("failed to preform reroute after cluster settings were updated - current node is no longer a master");
          listener.onResponse(new ClusterUpdateSettingsResponse(updateSettingsAcked,updater.getTransientUpdates(),updater.getPersistentUpdate()));
        }
        @Override public void onFailure(        String source,        Exception e){
          logger.debug("failed to perform [{}]",e,source);
          listener.onFailure(new ElasticsearchException("reroute after update settings failed",e));
        }
        @Override public ClusterState execute(        final ClusterState currentState){
          RoutingAllocation.Result routingResult=allocationService.reroute(currentState,"reroute after cluster update settings");
          if (!routingResult.changed()) {
            return currentState;
          }
          return ClusterState.builder(currentState).routingResult(routingResult).build();
        }
      }
);
    }
    @Override public void onFailure(    String source,    Exception e){
      logger.debug("failed to perform [{}]",e,source);
      super.onFailure(source,e);
    }
    @Override public ClusterState execute(    final ClusterState currentState){
      ClusterState clusterState=updater.updateSettings(currentState,request.transientSettings(),request.persistentSettings());
      changed=clusterState != currentState;
      return clusterState;
    }
  }
);
}
