{
  ClusterState clusterState=clusterService.state();
  clusterState.blocks().globalBlockedRaiseException(ClusterBlockLevel.WRITE);
  MetaData metaData=clusterState.metaData();
  for (  ActionRequest request : bulkRequest.requests) {
    if (request instanceof IndexRequest) {
      IndexRequest indexRequest=(IndexRequest)request;
      String aliasOrIndex=indexRequest.getIndex();
      indexRequest.setIndex(clusterState.metaData().concreteIndex(indexRequest.getIndex()));
      MappingMetaData mappingMd=null;
      if (metaData.hasIndex(indexRequest.getIndex())) {
        mappingMd=metaData.index(indexRequest.getIndex()).mappingOrDefault(indexRequest.getType());
      }
      indexRequest.process(metaData,aliasOrIndex,mappingMd,allowIdGeneration);
    }
 else     if (request instanceof DeleteRequest) {
      DeleteRequest deleteRequest=(DeleteRequest)request;
      deleteRequest.setRouting(clusterState.metaData().resolveIndexRouting(deleteRequest.getRouting(),deleteRequest.getIndex()));
      deleteRequest.setIndex(clusterState.metaData().concreteIndex(deleteRequest.getIndex()));
    }
  }
  final BulkItemResponse[] responses=new BulkItemResponse[bulkRequest.requests.size()];
  Map<ShardId,List<BulkItemRequest>> requestsByShard=Maps.newHashMap();
  for (int i=0; i < bulkRequest.requests.size(); i++) {
    ActionRequest request=bulkRequest.requests.get(i);
    if (request instanceof IndexRequest) {
      IndexRequest indexRequest=(IndexRequest)request;
      ShardId shardId=clusterService.operationRouting().indexShards(clusterState,indexRequest.getIndex(),indexRequest.getType(),indexRequest.getId(),indexRequest.getRouting()).shardId();
      List<BulkItemRequest> list=requestsByShard.get(shardId);
      if (list == null) {
        list=Lists.newArrayList();
        requestsByShard.put(shardId,list);
      }
      list.add(new BulkItemRequest(i,request));
    }
 else     if (request instanceof DeleteRequest) {
      DeleteRequest deleteRequest=(DeleteRequest)request;
      MappingMetaData mappingMd=clusterState.metaData().index(deleteRequest.getIndex()).mappingOrDefault(deleteRequest.getType());
      if (mappingMd != null && mappingMd.routing().required() && deleteRequest.getRouting() == null) {
        GroupShardsIterator groupShards=clusterService.operationRouting().broadcastDeleteShards(clusterState,deleteRequest.getIndex());
        for (        ShardIterator shardIt : groupShards) {
          List<BulkItemRequest> list=requestsByShard.get(shardIt.shardId());
          if (list == null) {
            list=Lists.newArrayList();
            requestsByShard.put(shardIt.shardId(),list);
          }
          list.add(new BulkItemRequest(i,new DeleteRequest(deleteRequest)));
        }
      }
 else {
        ShardId shardId=clusterService.operationRouting().deleteShards(clusterState,deleteRequest.getIndex(),deleteRequest.getType(),deleteRequest.getId(),deleteRequest.getRouting()).shardId();
        List<BulkItemRequest> list=requestsByShard.get(shardId);
        if (list == null) {
          list=Lists.newArrayList();
          requestsByShard.put(shardId,list);
        }
        list.add(new BulkItemRequest(i,request));
      }
    }
  }
  if (requestsByShard.isEmpty()) {
    listener.onResponse(new BulkResponse(responses,System.currentTimeMillis() - startTime));
    return;
  }
  final AtomicInteger counter=new AtomicInteger(requestsByShard.size());
  for (  Map.Entry<ShardId,List<BulkItemRequest>> entry : requestsByShard.entrySet()) {
    final ShardId shardId=entry.getKey();
    final List<BulkItemRequest> requests=entry.getValue();
    BulkShardRequest bulkShardRequest=new BulkShardRequest(shardId.index().name(),shardId.id(),bulkRequest.refresh(),requests.toArray(new BulkItemRequest[requests.size()]));
    bulkShardRequest.setReplicationType(bulkRequest.replicationType());
    bulkShardRequest.setConsistencyLevel(bulkRequest.consistencyLevel());
    shardBulkAction.execute(bulkShardRequest,new ActionListener<BulkShardResponse>(){
      @Override public void onResponse(      BulkShardResponse bulkShardResponse){
synchronized (responses) {
          for (          BulkItemResponse bulkItemResponse : bulkShardResponse.getResponses()) {
            responses[bulkItemResponse.getItemId()]=bulkItemResponse;
          }
        }
        if (counter.decrementAndGet() == 0) {
          finishHim();
        }
      }
      @Override public void onFailure(      Throwable e){
        String message=ExceptionsHelper.detailedMessage(e);
synchronized (responses) {
          for (          BulkItemRequest request : requests) {
            if (request.getRequest() instanceof IndexRequest) {
              IndexRequest indexRequest=(IndexRequest)request.getRequest();
              responses[request.getId()]=new BulkItemResponse(request.getId(),indexRequest.getOpType().toString().toLowerCase(Locale.ENGLISH),new BulkItemResponse.Failure(indexRequest.getIndex(),indexRequest.getType(),indexRequest.getId(),message));
            }
 else             if (request.getRequest() instanceof DeleteRequest) {
              DeleteRequest deleteRequest=(DeleteRequest)request.getRequest();
              responses[request.getId()]=new BulkItemResponse(request.getId(),"delete",new BulkItemResponse.Failure(deleteRequest.getIndex(),deleteRequest.getType(),deleteRequest.getId(),message));
            }
          }
        }
        if (counter.decrementAndGet() == 0) {
          finishHim();
        }
      }
      private void finishHim(){
        listener.onResponse(new BulkResponse(responses,System.currentTimeMillis() - startTime));
      }
    }
);
  }
}
