{
  final DocIdSetIterator iterator=twoPhase ? DocIdSetIterator.all(maxDoc) : iterator(docs);
  return new Scorer(null){
    public DocIdSetIterator iterator(){
      if (twoPhase) {
        return TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator());
      }
 else {
        return iterator;
      }
    }
    public TwoPhaseIterator twoPhaseIterator(){
      if (twoPhase) {
        return new TwoPhaseIterator(iterator){
          @Override public boolean matches() throws IOException {
            return Arrays.binarySearch(docs,iterator.docID()) >= 0;
          }
          @Override public float matchCost(){
            return 10;
          }
        }
;
      }
 else {
        return null;
      }
    }
    @Override public int docID(){
      return iterator.docID();
    }
    @Override public float score() throws IOException {
      final int idx=Arrays.binarySearch(docs,docID());
      return scores[idx];
    }
    @Override public int freq() throws IOException {
      return 1;
    }
  }
;
}
