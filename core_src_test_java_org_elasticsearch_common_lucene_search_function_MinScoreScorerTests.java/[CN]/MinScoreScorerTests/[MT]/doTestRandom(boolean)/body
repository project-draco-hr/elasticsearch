{
  final int maxDoc=TestUtil.nextInt(random(),10,10000);
  final int numDocs=TestUtil.nextInt(random(),1,maxDoc / 2);
  final Set<Integer> uniqueDocs=new HashSet<>();
  while (uniqueDocs.size() < numDocs) {
    uniqueDocs.add(random().nextInt(maxDoc));
  }
  final int[] docs=new int[numDocs];
  int i=0;
  for (  int doc : uniqueDocs) {
    docs[i++]=doc;
  }
  Arrays.sort(docs);
  final float[] scores=new float[numDocs];
  for (i=0; i < numDocs; ++i) {
    scores[i]=random().nextFloat();
  }
  Scorer scorer=scorer(maxDoc,docs,scores,twoPhase);
  final float minScore=random().nextFloat();
  Scorer minScoreScorer=new MinScoreScorer(null,scorer,minScore);
  int doc=-1;
  while (doc != DocIdSetIterator.NO_MORE_DOCS) {
    final int target;
    if (random().nextBoolean()) {
      target=doc + 1;
      doc=minScoreScorer.iterator().nextDoc();
    }
 else {
      target=doc + TestUtil.nextInt(random(),1,10);
      doc=minScoreScorer.iterator().advance(target);
    }
    int idx=Arrays.binarySearch(docs,target);
    if (idx < 0) {
      idx=-1 - idx;
    }
    while (idx < docs.length && scores[idx] < minScore) {
      idx+=1;
    }
    if (idx == docs.length) {
      assertEquals(DocIdSetIterator.NO_MORE_DOCS,doc);
    }
 else {
      assertEquals(docs[idx],doc);
      assertEquals(scores[idx],scorer.score(),0f);
    }
  }
}
