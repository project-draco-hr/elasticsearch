{
  QB firstQuery=createTestQueryBuilder();
  assertFalse("query is equal to null",firstQuery.equals(null));
  assertFalse("query is equal to incompatible type",firstQuery.equals(""));
  assertTrue("query is not equal to self",firstQuery.equals(firstQuery));
  assertThat("same query's hashcode returns different values if called multiple times",firstQuery.hashCode(),equalTo(firstQuery.hashCode()));
  QB secondQuery=copyQuery(firstQuery);
  assertTrue("query is not equal to self",secondQuery.equals(secondQuery));
  assertTrue("query is not equal to its copy",firstQuery.equals(secondQuery));
  assertTrue("equals is not symmetric",secondQuery.equals(firstQuery));
  assertThat("query copy's hashcode is different from original hashcode",secondQuery.hashCode(),equalTo(firstQuery.hashCode()));
  QB thirdQuery=copyQuery(secondQuery);
  assertTrue("query is not equal to self",thirdQuery.equals(thirdQuery));
  assertTrue("query is not equal to its copy",secondQuery.equals(thirdQuery));
  assertThat("query copy's hashcode is different from original hashcode",secondQuery.hashCode(),equalTo(thirdQuery.hashCode()));
  assertTrue("equals is not transitive",firstQuery.equals(thirdQuery));
  assertThat("query copy's hashcode is different from original hashcode",firstQuery.hashCode(),equalTo(thirdQuery.hashCode()));
  assertTrue("equals is not symmetric",thirdQuery.equals(secondQuery));
  assertTrue("equals is not symmetric",thirdQuery.equals(firstQuery));
  if (randomBoolean()) {
    secondQuery.queryName(secondQuery.queryName() == null ? randomAsciiOfLengthBetween(1,30) : secondQuery.queryName() + randomAsciiOfLengthBetween(1,10));
  }
 else {
    secondQuery.boost(firstQuery.boost() + 1f + randomFloat());
  }
  assertThat("different queries should not be equal",secondQuery,not(equalTo(firstQuery)));
  assertThat("different queries should have different hashcode",secondQuery.hashCode(),not(equalTo(firstQuery.hashCode())));
}
