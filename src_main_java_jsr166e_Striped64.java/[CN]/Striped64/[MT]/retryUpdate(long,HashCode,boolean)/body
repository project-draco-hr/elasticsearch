{
  int h=hc.code;
  boolean collide=false;
  for (; ; ) {
    Cell[] as;
    Cell a;
    int n;
    long v;
    if ((as=cells) != null && (n=as.length) > 0) {
      if ((a=as[(n - 1) & h]) == null) {
        if (busy == 0) {
          Cell r=new Cell(x);
          if (busy == 0 && casBusy()) {
            boolean created=false;
            try {
              Cell[] rs;
              int m, j;
              if ((rs=cells) != null && (m=rs.length) > 0 && rs[j=(m - 1) & h] == null) {
                rs[j]=r;
                created=true;
              }
            }
  finally {
              busy=0;
            }
            if (created)             break;
            continue;
          }
        }
        collide=false;
      }
 else       if (!wasUncontended)       wasUncontended=true;
 else       if (a.cas(v=a.value,fn(v,x)))       break;
 else       if (n >= NCPU || cells != as)       collide=false;
 else       if (!collide)       collide=true;
 else       if (busy == 0 && casBusy()) {
        try {
          if (cells == as) {
            Cell[] rs=new Cell[n << 1];
            for (int i=0; i < n; ++i)             rs[i]=as[i];
            cells=rs;
          }
        }
  finally {
          busy=0;
        }
        collide=false;
        continue;
      }
      h^=h << 13;
      h^=h >>> 17;
      h^=h << 5;
    }
 else     if (busy == 0 && cells == as && casBusy()) {
      boolean init=false;
      try {
        if (cells == as) {
          Cell[] rs=new Cell[2];
          rs[h & 1]=new Cell(x);
          cells=rs;
          init=true;
        }
      }
  finally {
        busy=0;
      }
      if (init)       break;
    }
 else     if (casBase(v=base,fn(v,x)))     break;
  }
  hc.code=h;
}
