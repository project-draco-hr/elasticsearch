{
  Path descriptor=dir.resolve(ES_PLUGIN_PROPERTIES);
  Properties props=new Properties();
  try (InputStream stream=Files.newInputStream(descriptor)){
    props.load(stream);
  }
   String name=props.getProperty("name");
  if (name == null || name.isEmpty()) {
    throw new IllegalArgumentException("Property [name] is missing in [" + descriptor + "]");
  }
  String description=props.getProperty("description");
  if (description == null) {
    throw new IllegalArgumentException("Property [description] is missing for plugin [" + name + "]");
  }
  String version=props.getProperty("version");
  if (version == null) {
    throw new IllegalArgumentException("Property [version] is missing for plugin [" + name + "]");
  }
  String esVersionString=props.getProperty("elasticsearch.version");
  if (esVersionString == null) {
    throw new IllegalArgumentException("Property [elasticsearch.version] is missing for plugin [" + name + "]");
  }
  Version esVersion=Version.fromString(esVersionString);
  if (esVersion.equals(Version.CURRENT) == false) {
    throw new IllegalArgumentException("Plugin [" + name + "] is incompatible with Elasticsearch ["+ Version.CURRENT.toString()+ "]. Was designed for version ["+ esVersionString+ "]");
  }
  String javaVersionString=props.getProperty("java.version");
  if (javaVersionString == null) {
    throw new IllegalArgumentException("Property [java.version] is missing for plugin [" + name + "]");
  }
  JarHell.checkVersionFormat(javaVersionString);
  JarHell.checkJavaVersion(name,javaVersionString);
  boolean isolated=Boolean.parseBoolean(props.getProperty("isolated","true"));
  String classname=props.getProperty("classname");
  if (classname == null) {
    throw new IllegalArgumentException("Property [classname] is missing for plugin [" + name + "]");
  }
  return new PluginInfo(name,description,version,classname,isolated);
}
