{
  Path homeFolder=newTempDir().toPath();
  Path genericConfigFolder=newTempDir().toPath();
  Settings settings=settingsBuilder().put("path.conf",genericConfigFolder).put("path.home",homeFolder).build();
  Environment environment=new Environment(settings);
  ResourceWatcherService resourceWatcherService=new ResourceWatcherService(settings,null);
  logger.info("--> setup script service");
  ScriptService scriptService=new ScriptService(settings,environment,ImmutableSet.of(new TestEngineService()),resourceWatcherService);
  Path scriptsFile=genericConfigFolder.resolve("scripts");
  Files.createDirectories(scriptsFile);
  resourceWatcherService.notifyNow();
  logger.info("--> setup two test files one with extension and another without");
  Path testFileNoExt=scriptsFile.resolve("test_no_ext");
  Path testFileWithExt=scriptsFile.resolve("test_script.tst");
  Streams.copy("test_file_no_ext".getBytes("UTF-8"),Files.newOutputStream(testFileNoExt));
  Streams.copy("test_file".getBytes("UTF-8"),Files.newOutputStream(testFileWithExt));
  resourceWatcherService.notifyNow();
  logger.info("--> verify that file with extension was correctly processed");
  CompiledScript compiledScript=scriptService.compile("test","test_script",ScriptService.ScriptType.FILE);
  assertThat(compiledScript.compiled(),equalTo((Object)"compiled_test_file"));
  logger.info("--> delete both files");
  Files.delete(testFileNoExt);
  Files.delete(testFileWithExt);
  resourceWatcherService.notifyNow();
  logger.info("--> verify that file with extension was correctly removed");
  try {
    scriptService.compile("test","test_script",ScriptService.ScriptType.FILE);
    fail("the script test_script should no longe exist");
  }
 catch (  ElasticsearchIllegalArgumentException ex) {
    assertThat(ex.getMessage(),containsString("Unable to find on disk script test_script"));
  }
}
