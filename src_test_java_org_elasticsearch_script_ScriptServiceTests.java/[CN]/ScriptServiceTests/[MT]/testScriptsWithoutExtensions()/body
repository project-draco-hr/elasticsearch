{
  buildScriptService(ImmutableSettings.EMPTY);
  logger.info("--> setup two test files one with extension and another without");
  Path testFileNoExt=scriptsFilePath.resolve("test_no_ext");
  Path testFileWithExt=scriptsFilePath.resolve("test_script.tst");
  Streams.copy("test_file_no_ext".getBytes("UTF-8"),Files.newOutputStream(testFileNoExt));
  Streams.copy("test_file".getBytes("UTF-8"),Files.newOutputStream(testFileWithExt));
  resourceWatcherService.notifyNow();
  logger.info("--> verify that file with extension was correctly processed");
  CompiledScript compiledScript=scriptService.compile(new Script("test","test_script",ScriptType.FILE,null),ScriptContext.Standard.SEARCH);
  assertThat(compiledScript.compiled(),equalTo((Object)"compiled_test_file"));
  logger.info("--> delete both files");
  Files.delete(testFileNoExt);
  Files.delete(testFileWithExt);
  resourceWatcherService.notifyNow();
  logger.info("--> verify that file with extension was correctly removed");
  try {
    scriptService.compile(new Script("test","test_script",ScriptType.FILE,null),ScriptContext.Standard.SEARCH);
    fail("the script test_script should no longer exist");
  }
 catch (  IllegalArgumentException ex) {
    assertThat(ex.getMessage(),containsString("Unable to find on disk script test_script"));
  }
}
