{
  final LongObjectOpenHashMap<Object> map1=new LongObjectOpenHashMap<Object>();
  final LongObjectPagedHashMap<Object> map2=new LongObjectPagedHashMap<Object>(randomInt(42),0.6f + randomFloat() * 0.39f,BigArraysTests.randombigArrays());
  final int maxKey=randomIntBetween(1,10000);
  final int iters=atLeast(10000);
  for (int i=0; i < iters; ++i) {
    final boolean put=randomBoolean();
    final int iters2=randomIntBetween(1,100);
    for (int j=0; j < iters2; ++j) {
      final long key=randomInt(maxKey);
      if (put) {
        final Object value=new Object();
        assertSame(map1.put(key,value),map2.put(key,value));
      }
 else {
        assertSame(map1.remove(key),map2.remove(key));
      }
      assertEquals(map1.size(),map2.size());
    }
  }
  for (int i=0; i <= maxKey; ++i) {
    assertSame(map1.get(i),map2.get(i));
  }
  final LongObjectOpenHashMap<Object> copy=new LongObjectOpenHashMap<Object>();
  for (  LongObjectPagedHashMap.Cursor<Object> cursor : map2) {
    copy.put(cursor.key,cursor.value);
  }
  map2.release();
  assertEquals(map1,copy);
}
