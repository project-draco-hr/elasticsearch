{
  ScalarNode scalar=(ScalarNode)node;
  String nodeValue=scalar.getValue();
  Matcher match=YMD_REGEXP.matcher(nodeValue);
  if (match.matches()) {
    String year_s=match.group(1);
    String month_s=match.group(2);
    String day_s=match.group(3);
    calendar=Calendar.getInstance(TimeZone.getTimeZone("UTC"));
    calendar.clear();
    calendar.set(Calendar.YEAR,Integer.parseInt(year_s));
    calendar.set(Calendar.MONTH,Integer.parseInt(month_s) - 1);
    calendar.set(Calendar.DAY_OF_MONTH,Integer.parseInt(day_s));
    return calendar.getTime();
  }
 else {
    match=TIMESTAMP_REGEXP.matcher(nodeValue);
    if (!match.matches()) {
      throw new YAMLException("Unexpected timestamp: " + nodeValue);
    }
    String year_s=match.group(1);
    String month_s=match.group(2);
    String day_s=match.group(3);
    String hour_s=match.group(4);
    String min_s=match.group(5);
    String sec_s=match.group(6);
    String fract_s=match.group(7);
    String timezoneh_s=match.group(8);
    String timezonem_s=match.group(9);
    int usec=0;
    if (fract_s != null) {
      usec=Integer.parseInt(fract_s);
      if (usec != 0) {
        while (10 * usec < 1000) {
          usec*=10;
        }
      }
    }
    TimeZone timeZone;
    if (timezoneh_s != null) {
      String time=timezonem_s != null ? ":" + timezonem_s : "00";
      timeZone=TimeZone.getTimeZone("GMT" + timezoneh_s + time);
    }
 else {
      timeZone=TimeZone.getTimeZone("UTC");
    }
    calendar=Calendar.getInstance(timeZone);
    calendar.set(Calendar.YEAR,Integer.parseInt(year_s));
    calendar.set(Calendar.MONTH,Integer.parseInt(month_s) - 1);
    calendar.set(Calendar.DAY_OF_MONTH,Integer.parseInt(day_s));
    calendar.set(Calendar.HOUR_OF_DAY,Integer.parseInt(hour_s));
    calendar.set(Calendar.MINUTE,Integer.parseInt(min_s));
    calendar.set(Calendar.SECOND,Integer.parseInt(sec_s));
    calendar.set(Calendar.MILLISECOND,usec);
    return calendar.getTime();
  }
}
