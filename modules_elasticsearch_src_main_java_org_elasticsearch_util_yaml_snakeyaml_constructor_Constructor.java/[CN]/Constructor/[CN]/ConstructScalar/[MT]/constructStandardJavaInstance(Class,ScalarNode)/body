{
  Object result;
  if (type == String.class) {
    Construct stringConstructor=yamlConstructors.get(Tag.STR);
    result=stringConstructor.construct((ScalarNode)node);
  }
 else   if (type == Boolean.class || type == Boolean.TYPE) {
    Construct boolConstructor=yamlConstructors.get(Tag.BOOL);
    result=boolConstructor.construct((ScalarNode)node);
  }
 else   if (type == Character.class || type == Character.TYPE) {
    Construct charConstructor=yamlConstructors.get(Tag.STR);
    String ch=(String)charConstructor.construct((ScalarNode)node);
    if (ch.length() == 0) {
      result=null;
    }
 else     if (ch.length() != 1) {
      throw new YAMLException("Invalid node Character: '" + ch + "'; length: "+ ch.length());
    }
 else {
      result=new Character(ch.charAt(0));
    }
  }
 else   if (Date.class.isAssignableFrom(type)) {
    Construct dateConstructor=yamlConstructors.get(Tag.TIMESTAMP);
    Date date=(Date)dateConstructor.construct((ScalarNode)node);
    if (type == Date.class) {
      result=date;
    }
 else {
      try {
        java.lang.reflect.Constructor<?> constr=type.getConstructor(long.class);
        result=constr.newInstance(date.getTime());
      }
 catch (      Exception e) {
        throw new YAMLException("Cannot construct: '" + type + "'");
      }
    }
  }
 else   if (type == Float.class || type == Double.class || type == Float.TYPE || type == Double.TYPE || type == BigDecimal.class) {
    if (type == BigDecimal.class) {
      result=new BigDecimal(node.getValue());
    }
 else {
      Construct doubleConstructor=yamlConstructors.get(Tag.FLOAT);
      result=doubleConstructor.construct(node);
      if (type == Float.class || type == Float.TYPE) {
        result=new Float((Double)result);
      }
    }
  }
 else   if (type == Byte.class || type == Short.class || type == Integer.class || type == Long.class || type == BigInteger.class || type == Byte.TYPE || type == Short.TYPE || type == Integer.TYPE || type == Long.TYPE) {
    Construct intConstructor=yamlConstructors.get(Tag.INT);
    result=intConstructor.construct(node);
    if (type == Byte.class || type == Byte.TYPE) {
      result=new Byte(result.toString());
    }
 else     if (type == Short.class || type == Short.TYPE) {
      result=new Short(result.toString());
    }
 else     if (type == Integer.class || type == Integer.TYPE) {
      result=new Integer(result.toString());
    }
 else     if (type == Long.class || type == Long.TYPE) {
      result=new Long(result.toString());
    }
 else {
      result=new BigInteger(result.toString());
    }
  }
 else   if (Enum.class.isAssignableFrom(type)) {
    String enumValueName=node.getValue();
    try {
      result=Enum.valueOf(type,enumValueName);
    }
 catch (    Exception ex) {
      throw new YAMLException("Unable to find enum value '" + enumValueName + "' for enum class: "+ type.getName());
    }
  }
 else   if (Calendar.class.isAssignableFrom(type)) {
    ConstructYamlTimestamp contr=new ConstructYamlTimestamp();
    contr.construct(node);
    result=contr.getCalendar();
  }
 else {
    throw new YAMLException("Unsupported class: " + type);
  }
  return result;
}
