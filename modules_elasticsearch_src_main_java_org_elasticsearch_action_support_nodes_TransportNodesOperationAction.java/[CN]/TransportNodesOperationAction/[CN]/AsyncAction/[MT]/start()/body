{
  for (  final String nodeId : nodesIds) {
    final Node node=clusterState.nodes().nodes().get(nodeId);
    if (nodeId.equals("_local") || nodeId.equals(clusterState.nodes().localNodeId())) {
      threadPool.execute(new Runnable(){
        @Override public void run(){
          try {
            onOperation(nodeOperation(newNodeRequest(clusterState.nodes().localNodeId(),request)));
          }
 catch (          Exception e) {
            onFailure(clusterState.nodes().localNodeId(),e);
          }
        }
      }
);
    }
 else     if (nodeId.equals("_master")) {
      threadPool.execute(new Runnable(){
        @Override public void run(){
          try {
            onOperation(nodeOperation(newNodeRequest(clusterState.nodes().masterNodeId(),request)));
          }
 catch (          Exception e) {
            onFailure(clusterState.nodes().masterNodeId(),e);
          }
        }
      }
);
    }
 else {
      if (node == null) {
        onFailure(nodeId,new NoSuchNodeException(nodeId));
      }
 else {
        NodeRequest nodeRequest=newNodeRequest(nodeId,request);
        transportService.sendRequest(node,transportNodeAction(),nodeRequest,new BaseTransportResponseHandler<NodeResponse>(){
          @Override public NodeResponse newInstance(){
            return newNodeResponse();
          }
          @Override public void handleResponse(          NodeResponse response){
            onOperation(response);
          }
          @Override public void handleException(          RemoteTransportException exp){
            onFailure(node.id(),exp);
          }
          @Override public boolean spawn(){
            return false;
          }
        }
);
      }
    }
  }
}
