{
  final Index index=indexSettings.getIndex();
  IndexMetaData loadLatestState=indexMetaDataStateFormat.loadLatestState(logger,nodeEnv.indexPaths(index));
  assertNotNull(loadLatestState);
  assertEquals(loadLatestState.getIndex(),index);
  for (int shardId=0; shardId < indexSettings.getNumberOfShards(); shardId++) {
    ShardPath targetShardPath=ShardPath.loadShardPath(logger,nodeEnv,new ShardId(index,shardId),indexSettings);
    assertNotNull(targetShardPath);
    final Path translog=targetShardPath.resolveTranslog();
    final Path idx=targetShardPath.resolveIndex();
    assertEquals(numTranslogFiles,FileSystemUtils.files(translog).length);
    assertEquals(numIdxFiles,FileSystemUtils.files(idx).length);
    Path[] files=FileSystemUtils.files(translog);
    final HashSet<Path> translogFiles=new HashSet<>(Arrays.asList(files));
    for (int i=0; i < numTranslogFiles; i++) {
      final String name=Integer.toString(i);
      translogFiles.contains(translog.resolve(name + ".translog"));
      byte[] content=Files.readAllBytes(translog.resolve(name + ".translog"));
      assertEquals(name,new String(content,StandardCharsets.UTF_8));
    }
    Path[] indexFileList=FileSystemUtils.files(idx);
    final HashSet<Path> idxFiles=new HashSet<>(Arrays.asList(indexFileList));
    for (int i=0; i < numIdxFiles; i++) {
      final String name=Integer.toString(i);
      idxFiles.contains(idx.resolve(name + ".tst"));
      byte[] content=Files.readAllBytes(idx.resolve(name + ".tst"));
      assertEquals(name,new String(content,StandardCharsets.UTF_8));
    }
  }
}
