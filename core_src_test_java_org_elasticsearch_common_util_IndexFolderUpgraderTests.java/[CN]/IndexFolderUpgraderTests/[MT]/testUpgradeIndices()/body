{
  final Settings nodeSettings=Settings.builder().put(NodeEnvironment.ADD_NODE_ID_TO_CUSTOM_PATH.getKey(),randomBoolean()).build();
  try (NodeEnvironment nodeEnv=newNodeEnvironment(nodeSettings)){
    Map<IndexSettings,Tuple<Integer,Integer>> indexSettingsMap=new HashMap<>();
    for (int i=0; i < randomIntBetween(2,5); i++) {
      final Index index=new Index(randomAsciiOfLength(10),UUIDs.randomBase64UUID());
      Settings settings=Settings.builder().put(nodeSettings).put(IndexMetaData.SETTING_INDEX_UUID,index.getUUID()).put(IndexMetaData.SETTING_VERSION_CREATED,Version.V_2_0_0).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,randomIntBetween(1,5)).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,0).build();
      IndexMetaData indexState=IndexMetaData.builder(index.getName()).settings(settings).build();
      Tuple<Integer,Integer> fileCounts=new Tuple<>(randomIntBetween(1,5),randomIntBetween(1,5));
      IndexSettings indexSettings=new IndexSettings(indexState,nodeSettings);
      indexSettingsMap.put(indexSettings,fileCounts);
      writeIndex(nodeEnv,indexSettings,fileCounts.v1(),fileCounts.v2());
    }
    IndexFolderUpgrader.upgradeIndicesIfNeeded(nodeSettings,nodeEnv);
    for (    Map.Entry<IndexSettings,Tuple<Integer,Integer>> entry : indexSettingsMap.entrySet()) {
      checkIndex(nodeEnv,entry.getKey(),entry.getValue().v1(),entry.getValue().v2());
    }
  }
 }
