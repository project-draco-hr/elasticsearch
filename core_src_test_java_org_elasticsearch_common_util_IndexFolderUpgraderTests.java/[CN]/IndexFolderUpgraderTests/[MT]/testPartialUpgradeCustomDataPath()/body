{
  Path customPath=createTempDir();
  final Settings nodeSettings=Settings.builder().put(NodeEnvironment.ADD_NODE_LOCK_ID_TO_CUSTOM_PATH.getKey(),randomBoolean()).put(Environment.PATH_SHARED_DATA_SETTING.getKey(),customPath.toAbsolutePath().toString()).build();
  try (NodeEnvironment nodeEnv=newNodeEnvironment(nodeSettings)){
    final Index index=new Index(randomAsciiOfLength(10),UUIDs.randomBase64UUID());
    Settings settings=Settings.builder().put(nodeSettings).put(IndexMetaData.SETTING_INDEX_UUID,index.getUUID()).put(IndexMetaData.SETTING_VERSION_CREATED,Version.V_2_0_0).put(IndexMetaData.SETTING_DATA_PATH,customPath.toAbsolutePath().toString()).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,randomIntBetween(1,5)).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,0).build();
    IndexMetaData indexState=IndexMetaData.builder(index.getName()).settings(settings).build();
    int numIdxFiles=randomIntBetween(1,5);
    int numTranslogFiles=randomIntBetween(1,5);
    IndexSettings indexSettings=new IndexSettings(indexState,nodeSettings);
    writeIndex(nodeEnv,indexSettings,numIdxFiles,numTranslogFiles);
    IndexFolderUpgrader helper=new IndexFolderUpgrader(settings,nodeEnv){
      @Override void upgrade(      Index index,      Path source,      Path target) throws IOException {
        if (randomBoolean()) {
          throw new FileNotFoundException("simulated");
        }
      }
    }
;
    try {
      helper.upgrade(index.getName());
    }
 catch (    IOException e) {
      assertTrue(e instanceof FileNotFoundException);
    }
    helper=new IndexFolderUpgrader(settings,nodeEnv);
    helper.upgrade(indexSettings.getIndex().getName());
    checkIndex(nodeEnv,indexSettings,numIdxFiles,numTranslogFiles);
  }
 }
