{
  if (needsScores == false && minScore == null) {
    return subQuery.createWeight(searcher,needsScores);
  }
  boolean subQueryNeedsScores=combineFunction != CombineFunction.REPLACE;
  Weight[] filterWeights=new Weight[filterFunctions.length];
  for (int i=0; i < filterFunctions.length; ++i) {
    subQueryNeedsScores|=filterFunctions[i].function.needsScores();
    filterWeights[i]=searcher.createNormalizedWeight(filterFunctions[i].filter,false);
  }
  Weight subQueryWeight=subQuery.createWeight(searcher,subQueryNeedsScores);
  return new CustomBoostFactorWeight(this,subQueryWeight,filterWeights,subQueryNeedsScores);
}
