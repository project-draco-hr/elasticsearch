{
  Explanation expl=subQueryWeight.explain(context,doc);
  if (!expl.isMatch()) {
    return expl;
  }
  List<Explanation> filterExplanations=new ArrayList<>();
  for (int i=0; i < filterFunctions.length; ++i) {
    Bits docSet=Lucene.asSequentialAccessBits(context.reader().maxDoc(),filterWeights[i].scorer(context));
    if (docSet.get(doc)) {
      FilterFunction filterFunction=filterFunctions[i];
      Explanation functionExplanation=filterFunction.function.getLeafScoreFunction(context).explainScore(doc,expl);
      double factor=functionExplanation.getValue();
      float sc=CombineFunction.toFloat(factor);
      Explanation filterExplanation=Explanation.match(sc,"function score, product of:",Explanation.match(1.0f,"match filter: " + filterFunction.filter.toString()),functionExplanation);
      filterExplanations.add(filterExplanation);
    }
  }
  FiltersFunctionFactorScorer scorer=functionScorer(context);
  int actualDoc=scorer.iterator().advance(doc);
  assert(actualDoc == doc);
  double score=scorer.computeScore(doc,expl.getValue());
  Explanation factorExplanation;
  if (filterExplanations.size() > 0) {
    factorExplanation=Explanation.match(CombineFunction.toFloat(score),"function score, score mode [" + scoreMode.toString().toLowerCase(Locale.ROOT) + "]",filterExplanations);
  }
 else {
    factorExplanation=Explanation.match(1.0f,"No function matched",Collections.emptyList());
  }
  expl=combineFunction.explain(expl,factorExplanation,maxBoost);
  if (minScore != null && minScore > expl.getValue()) {
    expl=Explanation.noMatch("Score value is too low, expected at least " + minScore + " but got "+ expl.getValue(),expl);
  }
  return expl;
}
