{
  Explanation subQueryExpl=subQueryWeight.explain(context,doc);
  if (!subQueryExpl.isMatch()) {
    return subQueryExpl;
  }
  List<Explanation> filterExplanations=new ArrayList<>();
  float weightSum=0;
  for (int i=0; i < filterFunctions.length; ++i) {
    FilterFunction filterFunction=filterFunctions[i];
    if (filterFunction.function instanceof WeightFactorFunction) {
      weightSum+=((WeightFactorFunction)filterFunction.function).getWeight();
    }
 else {
      weightSum++;
    }
    Bits docSet=Lucene.asSequentialAccessBits(context.reader().maxDoc(),filterWeights[i].scorer(context));
    if (docSet.get(doc)) {
      Explanation functionExplanation=filterFunction.function.getLeafScoreFunction(context).explainScore(doc,subQueryExpl);
      double factor=functionExplanation.getValue();
      float sc=CombineFunction.toFloat(factor);
      Explanation filterExplanation=Explanation.match(sc,"function score, product of:",Explanation.match(1.0f,"match filter: " + filterFunction.filter.toString()),functionExplanation);
      filterExplanations.add(filterExplanation);
    }
  }
  if (filterExplanations.size() == 0) {
    return subQueryExpl;
  }
  double factor=1.0;
switch (scoreMode) {
case FIRST:
    factor=filterExplanations.get(0).getValue();
  break;
case MAX:
factor=Double.NEGATIVE_INFINITY;
for (Explanation filterExplanation : filterExplanations) {
factor=Math.max(filterExplanation.getValue(),factor);
}
break;
case MIN:
factor=Double.POSITIVE_INFINITY;
for (Explanation filterExplanation : filterExplanations) {
factor=Math.min(filterExplanation.getValue(),factor);
}
break;
case MULTIPLY:
for (Explanation filterExplanation : filterExplanations) {
factor*=filterExplanation.getValue();
}
break;
default :
double totalFactor=0.0f;
for (Explanation filterExplanation : filterExplanations) {
totalFactor+=filterExplanation.getValue();
}
if (weightSum != 0) {
factor=totalFactor;
if (scoreMode == ScoreMode.AVG) {
factor/=weightSum;
}
}
}
Explanation factorExplanation=Explanation.match(CombineFunction.toFloat(factor),"function score, score mode [" + scoreMode.toString().toLowerCase(Locale.ROOT) + "]",filterExplanations);
return combineFunction.explain(subQueryExpl,factorExplanation,maxBoost);
}
