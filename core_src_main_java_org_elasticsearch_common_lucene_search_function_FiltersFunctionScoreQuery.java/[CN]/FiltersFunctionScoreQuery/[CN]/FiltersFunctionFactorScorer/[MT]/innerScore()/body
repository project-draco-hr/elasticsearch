{
  int docId=scorer.docID();
  double factor=1.0f;
  float subQueryScore=needsScores ? scorer.score() : 0f;
switch (scoreMode) {
case FIRST:
    for (int i=0; i < filterFunctions.length; i++) {
      if (docSets[i].get(docId)) {
        factor=functions[i].score(docId,subQueryScore);
        break;
      }
    }
  break;
case MAX:
double maxFactor=Double.NEGATIVE_INFINITY;
for (int i=0; i < filterFunctions.length; i++) {
if (docSets[i].get(docId)) {
  maxFactor=Math.max(functions[i].score(docId,subQueryScore),maxFactor);
}
}
if (maxFactor != Float.NEGATIVE_INFINITY) {
factor=maxFactor;
}
break;
case MIN:
double minFactor=Double.POSITIVE_INFINITY;
for (int i=0; i < filterFunctions.length; i++) {
if (docSets[i].get(docId)) {
minFactor=Math.min(functions[i].score(docId,subQueryScore),minFactor);
}
}
if (minFactor != Float.POSITIVE_INFINITY) {
factor=minFactor;
}
break;
case MULTIPLY:
for (int i=0; i < filterFunctions.length; i++) {
if (docSets[i].get(docId)) {
factor*=functions[i].score(docId,subQueryScore);
}
}
break;
default :
double totalFactor=0.0f;
double weightSum=0;
for (int i=0; i < filterFunctions.length; i++) {
if (docSets[i].get(docId)) {
totalFactor+=functions[i].score(docId,subQueryScore);
if (filterFunctions[i].function instanceof WeightFactorFunction) {
weightSum+=((WeightFactorFunction)filterFunctions[i].function).getWeight();
}
 else {
weightSum+=1.0;
}
}
}
if (weightSum != 0) {
factor=totalFactor;
if (scoreMode == ScoreMode.AVG) {
factor/=weightSum;
}
}
break;
}
return scoreCombiner.combine(subQueryScore,factor,maxBoost);
}
