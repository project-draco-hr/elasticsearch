{
  int docId=scorer.docID();
  double factor=1.0f;
  float subQueryScore=needsScores ? scorer.score() : 0f;
  if (scoreMode == ScoreMode.First) {
    for (int i=0; i < filterFunctions.length; i++) {
      if (docSets[i].get(docId)) {
        factor=functions[i].score(docId,subQueryScore);
        break;
      }
    }
  }
 else   if (scoreMode == ScoreMode.Max) {
    double maxFactor=Double.NEGATIVE_INFINITY;
    for (int i=0; i < filterFunctions.length; i++) {
      if (docSets[i].get(docId)) {
        maxFactor=Math.max(functions[i].score(docId,subQueryScore),maxFactor);
      }
    }
    if (maxFactor != Float.NEGATIVE_INFINITY) {
      factor=maxFactor;
    }
  }
 else   if (scoreMode == ScoreMode.Min) {
    double minFactor=Double.POSITIVE_INFINITY;
    for (int i=0; i < filterFunctions.length; i++) {
      if (docSets[i].get(docId)) {
        minFactor=Math.min(functions[i].score(docId,subQueryScore),minFactor);
      }
    }
    if (minFactor != Float.POSITIVE_INFINITY) {
      factor=minFactor;
    }
  }
 else   if (scoreMode == ScoreMode.Multiply) {
    for (int i=0; i < filterFunctions.length; i++) {
      if (docSets[i].get(docId)) {
        factor*=functions[i].score(docId,subQueryScore);
      }
    }
  }
 else {
    double totalFactor=0.0f;
    float weightSum=0;
    for (int i=0; i < filterFunctions.length; i++) {
      if (docSets[i].get(docId)) {
        totalFactor+=functions[i].score(docId,subQueryScore);
        if (filterFunctions[i].function instanceof WeightFactorFunction) {
          weightSum+=((WeightFactorFunction)filterFunctions[i].function).getWeight();
        }
 else {
          weightSum++;
        }
      }
    }
    if (weightSum != 0) {
      factor=totalFactor;
      if (scoreMode == ScoreMode.Avg) {
        factor/=weightSum;
      }
    }
  }
  return scoreCombiner.combine(subQueryBoost,subQueryScore,factor,maxBoost);
}
