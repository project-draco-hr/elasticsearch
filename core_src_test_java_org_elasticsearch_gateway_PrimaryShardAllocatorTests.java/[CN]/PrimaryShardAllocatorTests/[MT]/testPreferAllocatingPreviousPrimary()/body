{
  String primaryAllocId=Strings.randomBase64UUID();
  String replicaAllocId=Strings.randomBase64UUID();
  RoutingAllocation allocation=routingAllocationWithOnePrimaryNoReplicas(yesAllocationDeciders(),false,randomFrom(Version.V_2_0_0,Version.CURRENT),primaryAllocId,replicaAllocId);
  boolean node1HasPrimaryShard=randomBoolean();
  testAllocator.addData(node1,ShardStateMetaData.NO_VERSION,node1HasPrimaryShard ? primaryAllocId : replicaAllocId,node1HasPrimaryShard);
  testAllocator.addData(node2,ShardStateMetaData.NO_VERSION,node1HasPrimaryShard ? replicaAllocId : primaryAllocId,!node1HasPrimaryShard);
  boolean changed=testAllocator.allocateUnassigned(allocation);
  assertThat(changed,equalTo(true));
  assertThat(allocation.routingNodes().unassigned().ignored().isEmpty(),equalTo(true));
  assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(),equalTo(1));
  DiscoveryNode allocatedNode=node1HasPrimaryShard ? node1 : node2;
  assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).currentNodeId(),equalTo(allocatedNode.getId()));
}
