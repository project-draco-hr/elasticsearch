{
  ShardRouting shard=TestShardRouting.newShardRouting("test",0,null,null,null,false,ShardRoutingState.UNASSIGNED,0,new UnassignedInfo(UnassignedInfo.Reason.CLUSTER_RECOVERED,null));
  Map<DiscoveryNode,TransportNodesListGatewayStartedShards.NodeGatewayStartedShards> data=new HashMap<>();
  data.put(node1,new TransportNodesListGatewayStartedShards.NodeGatewayStartedShards(node1,1));
  data.put(node2,new TransportNodesListGatewayStartedShards.NodeGatewayStartedShards(node2,5));
  data.put(node3,new TransportNodesListGatewayStartedShards.NodeGatewayStartedShards(node3,-1));
  AsyncShardFetch.FetchResult<TransportNodesListGatewayStartedShards.NodeGatewayStartedShards> fetches=new AsyncShardFetch.FetchResult(shardId,data,new HashSet<>(),new HashSet<>());
  PrimaryShardAllocator.NodesAndVersions nAndV=testAllocator.buildNodesAndVersions(shard,false,new HashSet<String>(),fetches);
  assertThat(nAndV.allocationsFound,equalTo(2));
  assertThat(nAndV.highestVersion,equalTo(5L));
  assertThat(nAndV.nodes,contains(node2));
  nAndV=testAllocator.buildNodesAndVersions(shard,true,new HashSet<String>(),fetches);
  assertThat(nAndV.allocationsFound,equalTo(3));
  assertThat(nAndV.highestVersion,equalTo(5L));
  assertThat(nAndV.nodes,contains(node2,node1,node3));
}
