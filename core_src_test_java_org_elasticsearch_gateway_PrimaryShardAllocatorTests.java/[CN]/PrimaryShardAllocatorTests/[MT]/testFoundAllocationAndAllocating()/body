{
  final RoutingAllocation allocation;
  boolean useAllocationIds=randomBoolean();
  if (useAllocationIds) {
    allocation=routingAllocationWithOnePrimaryNoReplicas(yesAllocationDeciders(),false,randomFrom(Version.V_2_0_0,Version.CURRENT),"allocId1");
    testAllocator.addData(node1,ShardStateMetaData.NO_VERSION,"allocId1",randomBoolean());
  }
 else {
    allocation=routingAllocationWithOnePrimaryNoReplicas(yesAllocationDeciders(),false,Version.V_2_2_0);
    testAllocator.addData(node1,3,null,randomBoolean());
  }
  boolean changed=testAllocator.allocateUnassigned(allocation);
  assertThat(changed,equalTo(true));
  assertThat(allocation.routingNodes().unassigned().ignored().isEmpty(),equalTo(true));
  assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(),equalTo(1));
  assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).currentNodeId(),equalTo(node1.getId()));
  if (useAllocationIds) {
    assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).allocationId().getId(),equalTo("allocId1"));
  }
}
