{
  if (client != null) {
    return client;
  }
  ClientConfiguration clientConfiguration=new ClientConfiguration();
  clientConfiguration.setResponseMetadataCacheSize(0);
  clientConfiguration.setProtocol(CLOUD_EC2.PROTOCOL_SETTING.get(settings));
  String key=CLOUD_EC2.KEY_SETTING.get(settings);
  String secret=CLOUD_EC2.SECRET_SETTING.get(settings);
  String proxyHost=CLOUD_EC2.PROXY_HOST_SETTING.get(settings);
  if (proxyHost != null) {
    Integer proxyPort=CLOUD_EC2.PROXY_PORT_SETTING.get(settings);
    String proxyUsername=CLOUD_EC2.PROXY_USERNAME_SETTING.get(settings);
    String proxyPassword=CLOUD_EC2.PROXY_PASSWORD_SETTING.get(settings);
    clientConfiguration.withProxyHost(proxyHost).withProxyPort(proxyPort).withProxyUsername(proxyUsername).withProxyPassword(proxyPassword);
  }
  String awsSigner=CLOUD_EC2.SIGNER_SETTING.get(settings);
  if (Strings.hasText(awsSigner)) {
    logger.debug("using AWS API signer [{}]",awsSigner);
    AwsSigner.configureSigner(awsSigner,clientConfiguration);
  }
  final Random rand=Randomness.get();
  RetryPolicy retryPolicy=new RetryPolicy(RetryPolicy.RetryCondition.NO_RETRY_CONDITION,new RetryPolicy.BackoffStrategy(){
    @Override public long delayBeforeNextRetry(    AmazonWebServiceRequest originalRequest,    AmazonClientException exception,    int retriesAttempted){
      logger.warn("EC2 API request failed, retry again. Reason was:",exception);
      return 1000L * (long)(10d * Math.pow(2,retriesAttempted / 2.0d) * (1.0d + rand.nextDouble()));
    }
  }
,10,false);
  clientConfiguration.setRetryPolicy(retryPolicy);
  AWSCredentialsProvider credentials;
  if (key == null && secret == null) {
    credentials=new AWSCredentialsProviderChain(new EnvironmentVariableCredentialsProvider(),new SystemPropertiesCredentialsProvider(),new InstanceProfileCredentialsProvider());
  }
 else {
    credentials=new AWSCredentialsProviderChain(new StaticCredentialsProvider(new BasicAWSCredentials(key,secret)));
  }
  this.client=new AmazonEC2Client(credentials,clientConfiguration);
  String endpoint=CLOUD_EC2.ENDPOINT_SETTING.get(settings);
  if (endpoint != null) {
    logger.debug("using explicit ec2 endpoint [{}]",endpoint);
    client.setEndpoint(endpoint);
  }
 else   if (CLOUD_EC2.REGION_SETTING.exists(settings)) {
    String region=CLOUD_EC2.REGION_SETTING.get(settings);
    if (region.equals("us-east-1") || region.equals("us-east")) {
      endpoint="ec2.us-east-1.amazonaws.com";
    }
 else     if (region.equals("us-west") || region.equals("us-west-1")) {
      endpoint="ec2.us-west-1.amazonaws.com";
    }
 else     if (region.equals("us-west-2")) {
      endpoint="ec2.us-west-2.amazonaws.com";
    }
 else     if (region.equals("ap-southeast") || region.equals("ap-southeast-1")) {
      endpoint="ec2.ap-southeast-1.amazonaws.com";
    }
 else     if (region.equals("us-gov-west") || region.equals("us-gov-west-1")) {
      endpoint="ec2.us-gov-west-1.amazonaws.com";
    }
 else     if (region.equals("ap-southeast-2")) {
      endpoint="ec2.ap-southeast-2.amazonaws.com";
    }
 else     if (region.equals("ap-northeast") || region.equals("ap-northeast-1")) {
      endpoint="ec2.ap-northeast-1.amazonaws.com";
    }
 else     if (region.equals("ap-northeast-2")) {
      endpoint="ec2.ap-northeast-2.amazonaws.com";
    }
 else     if (region.equals("eu-west") || region.equals("eu-west-1")) {
      endpoint="ec2.eu-west-1.amazonaws.com";
    }
 else     if (region.equals("eu-central") || region.equals("eu-central-1")) {
      endpoint="ec2.eu-central-1.amazonaws.com";
    }
 else     if (region.equals("sa-east") || region.equals("sa-east-1")) {
      endpoint="ec2.sa-east-1.amazonaws.com";
    }
 else     if (region.equals("cn-north") || region.equals("cn-north-1")) {
      endpoint="ec2.cn-north-1.amazonaws.com.cn";
    }
 else {
      throw new IllegalArgumentException("No automatic endpoint could be derived from region [" + region + "]");
    }
    logger.debug("using ec2 region [{}], with endpoint [{}]",region,endpoint);
    client.setEndpoint(endpoint);
  }
  return this.client;
}
