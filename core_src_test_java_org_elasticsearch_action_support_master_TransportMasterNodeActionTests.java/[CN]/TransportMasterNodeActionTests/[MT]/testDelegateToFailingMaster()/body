{
  boolean failsWithConnectTransportException=randomBoolean();
  Request request=new Request().masterNodeTimeout(TimeValue.timeValueSeconds(failsWithConnectTransportException ? 60 : 0));
  setState(clusterService,ClusterStateCreationUtils.state(localNode,remoteNode,allNodes));
  PlainActionFuture<Response> listener=new PlainActionFuture<>();
  new Action(Settings.EMPTY,"testAction",transportService,clusterService,threadPool).execute(request,listener);
  assertThat(transport.capturedRequests().length,equalTo(1));
  CapturingTransport.CapturedRequest capturedRequest=transport.capturedRequests()[0];
  assertTrue(capturedRequest.node.isMasterNode());
  assertThat(capturedRequest.request,equalTo(request));
  assertThat(capturedRequest.action,equalTo("testAction"));
  if (failsWithConnectTransportException) {
    transport.handleRemoteError(capturedRequest.requestId,new ConnectTransportException(remoteNode,"Fake error"));
    assertFalse(listener.isDone());
    setState(clusterService,ClusterStateCreationUtils.state(localNode,localNode,allNodes));
    assertTrue(listener.isDone());
    listener.get();
  }
 else {
    ElasticsearchException t=new ElasticsearchException("test");
    t.addHeader("header","is here");
    transport.handleRemoteError(capturedRequest.requestId,t);
    assertTrue(listener.isDone());
    try {
      listener.get();
      fail("Expected exception but returned proper result");
    }
 catch (    ExecutionException ex) {
      final Throwable cause=ex.getCause().getCause();
      assertThat(cause,instanceOf(ElasticsearchException.class));
      final ElasticsearchException es=(ElasticsearchException)cause;
      assertThat(es.getMessage(),equalTo(t.getMessage()));
      assertThat(es.getHeader("header"),equalTo(t.getHeader("header")));
    }
  }
}
