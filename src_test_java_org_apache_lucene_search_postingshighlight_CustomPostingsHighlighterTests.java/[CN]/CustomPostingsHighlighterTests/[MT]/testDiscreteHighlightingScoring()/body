{
  Directory dir=newDirectory();
  IndexWriterConfig iwc=newIndexWriterConfig(TEST_VERSION_CURRENT,new MockAnalyzer(random()));
  iwc.setMergePolicy(newLogMergePolicy());
  RandomIndexWriter iw=new RandomIndexWriter(random(),dir,iwc);
  FieldType offsetsType=new FieldType(TextField.TYPE_STORED);
  offsetsType.setIndexOptions(FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
  final String firstValue="This is a test. Just a test1 highlighting from postings highlighter.";
  Field body=new Field("body","",offsetsType);
  Document doc=new Document();
  doc.add(body);
  body.setStringValue(firstValue);
  final String secondValue="This is the second highlighting value to perform highlighting on a longer text that gets scored lower.";
  Field body2=new Field("body","",offsetsType);
  doc.add(body2);
  body2.setStringValue(secondValue);
  final String thirdValue="This is highlighting the third short highlighting value.";
  Field body3=new Field("body","",offsetsType);
  doc.add(body3);
  body3.setStringValue(thirdValue);
  final String fourthValue="Just a test4 highlighting from postings highlighter.";
  Field body4=new Field("body","",offsetsType);
  doc.add(body4);
  body4.setStringValue(fourthValue);
  iw.addDocument(doc);
  IndexReader ir=iw.getReader();
  iw.close();
  String firstHlValue="Just a test1 <b>highlighting</b> from postings highlighter.";
  String secondHlValue="This is the second <b>highlighting</b> value to perform <b>highlighting</b> on a longer text that gets scored lower.";
  String thirdHlValue="This is <b>highlighting</b> the third short <b>highlighting</b> value.";
  String fourthHlValue="Just a test4 <b>highlighting</b> from postings highlighter.";
  IndexSearcher searcher=newSearcher(ir);
  Query query=new TermQuery(new Term("body","highlighting"));
  BytesRef[] queryTerms=filterTerms(extractTerms(query),"body",true);
  TopDocs topDocs=searcher.search(query,null,10,Sort.INDEXORDER);
  assertThat(topDocs.totalHits,equalTo(1));
  int docId=topDocs.scoreDocs[0].doc;
  List<Object> fieldValues=new ArrayList<>();
  fieldValues.add(firstValue);
  fieldValues.add(secondValue);
  fieldValues.add(thirdValue);
  fieldValues.add(fourthValue);
  boolean mergeValues=true;
  CustomPostingsHighlighter highlighter=new CustomPostingsHighlighter(new CustomPassageFormatter("<b>","</b>",new DefaultEncoder()),fieldValues,mergeValues,Integer.MAX_VALUE - 1,0);
  Snippet[] snippets=highlighter.highlightDoc("body",queryTerms,searcher,docId,5);
  assertThat(snippets.length,equalTo(4));
  assertThat(snippets[0].getText(),equalTo(firstHlValue));
  assertThat(snippets[1].getText(),equalTo(secondHlValue));
  assertThat(snippets[2].getText(),equalTo(thirdHlValue));
  assertThat(snippets[3].getText(),equalTo(fourthHlValue));
  mergeValues=false;
  highlighter=new CustomPostingsHighlighter(new CustomPassageFormatter("<b>","</b>",new DefaultEncoder()),fieldValues,mergeValues,Integer.MAX_VALUE - 1,0);
  List<Snippet> snippets2=new ArrayList<>();
  for (int i=0; i < fieldValues.size(); i++) {
    snippets2.addAll(Arrays.asList(highlighter.highlightDoc("body",queryTerms,searcher,docId,5)));
  }
  assertThat(snippets2.size(),equalTo(4));
  assertThat(snippets2.get(0).getText(),equalTo(firstHlValue));
  assertThat(snippets2.get(1).getText(),equalTo(secondHlValue));
  assertThat(snippets2.get(2).getText(),equalTo(thirdHlValue));
  assertThat(snippets2.get(3).getText(),equalTo(fourthHlValue));
  Comparator<Snippet> comparator=new Comparator<Snippet>(){
    @Override public int compare(    Snippet o1,    Snippet o2){
      return (int)Math.signum(o1.getScore() - o2.getScore());
    }
  }
;
  Arrays.sort(snippets,comparator);
  Collections.sort(snippets2,comparator);
  for (int i=0; i < snippets.length; i++) {
    assertThat(snippets[i].getText(),equalTo(snippets2.get(i).getText()));
  }
  ir.close();
  dir.close();
}
