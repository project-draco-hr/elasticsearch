{
  Directory dir=newDirectory();
  IndexWriterConfig iwc=newIndexWriterConfig(new MockAnalyzer(random()));
  iwc.setMergePolicy(newLogMergePolicy());
  RandomIndexWriter iw=new RandomIndexWriter(random(),dir,iwc);
  FieldType offsetsType=new FieldType(TextField.TYPE_STORED);
  offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
  final String firstValue="This is a test. Just a test1 highlighting from postings highlighter.";
  Field body=new Field("body","",offsetsType);
  Document doc=new Document();
  doc.add(body);
  body.setStringValue(firstValue);
  final String secondValue="This is the second highlighting value to perform highlighting on a longer text that gets scored lower.";
  Field body2=new Field("body","",offsetsType);
  doc.add(body2);
  body2.setStringValue(secondValue);
  final String thirdValue="This is highlighting the third short highlighting value.";
  Field body3=new Field("body","",offsetsType);
  doc.add(body3);
  body3.setStringValue(thirdValue);
  final String fourthValue="Just a test4 highlighting from postings highlighter.";
  Field body4=new Field("body","",offsetsType);
  doc.add(body4);
  body4.setStringValue(fourthValue);
  iw.addDocument(doc);
  IndexReader ir=iw.getReader();
  iw.close();
  String firstHlValue="Just a test1 <b>highlighting</b> from postings highlighter.";
  String secondHlValue="This is the second <b>highlighting</b> value to perform <b>highlighting</b> on a longer text that gets scored lower.";
  String thirdHlValue="This is <b>highlighting</b> the third short <b>highlighting</b> value.";
  String fourthHlValue="Just a test4 <b>highlighting</b> from postings highlighter.";
  IndexSearcher searcher=newSearcher(ir);
  Query query=new TermQuery(new Term("body","highlighting"));
  BytesRef[] queryTerms=filterTerms(extractTerms(searcher,query),"body",true);
  TopDocs topDocs=searcher.search(query,10,Sort.INDEXORDER);
  assertThat(topDocs.totalHits,equalTo(1));
  int docId=topDocs.scoreDocs[0].doc;
  List<Object> fieldValues=new ArrayList<>();
  fieldValues.add(firstValue);
  fieldValues.add(secondValue);
  fieldValues.add(thirdValue);
  fieldValues.add(fourthValue);
  boolean mergeValues=true;
  CustomPostingsHighlighter highlighter=new CustomPostingsHighlighter(new CustomPassageFormatter("<b>","</b>",new DefaultEncoder()),fieldValues,mergeValues,Integer.MAX_VALUE - 1,0);
  Snippet[] snippets=highlighter.highlightDoc("body",queryTerms,ir,docId,5);
  assertThat(snippets.length,equalTo(4));
  assertThat(snippets[0].getText(),equalTo(firstHlValue));
  assertThat(snippets[1].getText(),equalTo(secondHlValue));
  assertThat(snippets[2].getText(),equalTo(thirdHlValue));
  assertThat(snippets[3].getText(),equalTo(fourthHlValue));
  XPostingsHighlighter highlighter2=new XPostingsHighlighter(Integer.MAX_VALUE - 1){
    @Override protected char getMultiValuedSeparator(    String field){
      return HighlightUtils.PARAGRAPH_SEPARATOR;
    }
    @Override protected PassageFormatter getFormatter(    String field){
      return new CustomPassageFormatter("<b>","</b>",new DefaultEncoder());
    }
  }
;
  Map<String,Object[]> highlightMap=highlighter2.highlightFieldsAsObjects(new String[]{"body"},query,searcher,new int[]{docId},new int[]{5});
  Object[] objects=highlightMap.get("body");
  assertThat(objects,notNullValue());
  assertThat(objects.length,equalTo(1));
  Snippet[] normalSnippets=(Snippet[])objects[0];
  assertThat(normalSnippets.length,equalTo(4));
  assertThat(normalSnippets[0].getText(),equalTo(firstHlValue));
  assertThat(normalSnippets[1].getText(),equalTo(secondHlValue));
  assertThat(normalSnippets[2].getText(),equalTo(thirdHlValue));
  assertThat(normalSnippets[3].getText(),equalTo(fourthHlValue));
  for (int i=0; i < normalSnippets.length; i++) {
    Snippet normalSnippet=snippets[0];
    Snippet customSnippet=normalSnippets[0];
    assertThat(customSnippet.getText(),equalTo(normalSnippet.getText()));
    assertThat(customSnippet.getScore(),equalTo(normalSnippet.getScore()));
  }
  ir.close();
  dir.close();
}
