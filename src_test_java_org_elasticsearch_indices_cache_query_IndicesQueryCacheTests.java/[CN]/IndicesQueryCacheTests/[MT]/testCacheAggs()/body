{
  assertAcked(client().admin().indices().prepareCreate("index").addMapping("type","f","type=date").setSettings(IndicesQueryCache.INDEX_CACHE_QUERY_ENABLED,true).get());
  indexRandom(true,client().prepareIndex("index","type").setSource("f","2014-03-10T00:00:00.000Z"),client().prepareIndex("index","type").setSource("f","2014-05-13T00:00:00.000Z"));
  ensureSearchable("index");
  final SearchResponse r1=client().prepareSearch("index").setSize(0).setSearchType(SearchType.QUERY_THEN_FETCH).addAggregation(dateHistogram("histo").field("f").timeZone("+01:00").minDocCount(0).interval(DateHistogramInterval.MONTH)).get();
  assertSearchResponse(r1);
  System.out.println(r1);
  assertThat(client().admin().indices().prepareStats("index").setQueryCache(true).get().getTotal().getQueryCache().getMemorySizeInBytes(),greaterThan(0l));
  for (int i=0; i < 10; ++i) {
    final SearchResponse r2=client().prepareSearch("index").setSize(0).setSearchType(SearchType.QUERY_THEN_FETCH).addAggregation(dateHistogram("histo").field("f").timeZone("+01:00").minDocCount(0).interval(DateHistogramInterval.MONTH)).get();
    assertSearchResponse(r2);
    Histogram h1=r1.getAggregations().get("histo");
    Histogram h2=r2.getAggregations().get("histo");
    final List<? extends Bucket> buckets1=h1.getBuckets();
    final List<? extends Bucket> buckets2=h2.getBuckets();
    assertEquals(buckets1.size(),buckets2.size());
    for (int j=0; j < buckets1.size(); ++j) {
      final Bucket b1=buckets1.get(j);
      final Bucket b2=buckets2.get(j);
      assertEquals(b1.getKey(),b2.getKey());
      assertEquals(b1.getDocCount(),b2.getDocCount());
    }
  }
}
