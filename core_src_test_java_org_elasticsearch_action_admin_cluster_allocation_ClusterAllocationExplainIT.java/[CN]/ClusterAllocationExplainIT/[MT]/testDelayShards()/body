{
  logger.info("--> starting 3 nodes");
  List<String> nodes=internalCluster().startNodesAsync(3).get();
  logger.info("--> waiting for 3 nodes to be up");
  assertBusy(new Runnable(){
    @Override public void run(){
      NodesStatsResponse resp=client().admin().cluster().prepareNodesStats().get();
      assertThat(resp.getNodes().length,equalTo(3));
    }
  }
);
  logger.info("--> creating 'test' index");
  prepareCreate("test").setSettings(Settings.settingsBuilder().put("index.unassigned.node_left.delayed_timeout","1m").put("number_of_shards",5).put("number_of_replicas",1)).get();
  ensureGreen("test");
  logger.info("--> stopping a random node");
  assertTrue(internalCluster().stopRandomDataNode());
  ensureYellow("test");
  ClusterAllocationExplainResponse resp=client().admin().cluster().prepareAllocationExplain().useAnyUnassignedShard().get();
  ClusterAllocationExplanation cae=resp.getExplanation();
  assertThat(cae.getShard().getIndexName(),equalTo("test"));
  assertFalse(cae.isPrimary());
  assertFalse(cae.isAssigned());
  assertThat("expecting a remaining delay, got: " + cae.getRemainingDelayNanos(),cae.getRemainingDelayNanos(),greaterThan(0L));
}
