{
  logger.info("--> starting 3 nodes");
  List<String> nodes=internalCluster().startNodesAsync(3).get();
  logger.info("--> waiting for 3 nodes to be up");
  assertBusy(new Runnable(){
    @Override public void run(){
      NodesStatsResponse resp=client().admin().cluster().prepareNodesStats().get();
      assertThat(resp.getNodes().length,equalTo(3));
    }
  }
);
  logger.info("--> creating 'test' index");
  prepareCreate("test").setSettings(Settings.builder().put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey(),"1m").put(IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING.getKey(),5).put(IndexMetaData.INDEX_NUMBER_OF_REPLICAS_SETTING.getKey(),1)).get();
  ensureGreen("test");
  logger.info("--> stopping a random node");
  assertTrue(internalCluster().stopRandomDataNode());
  ensureYellow("test");
  ClusterAllocationExplainResponse resp=client().admin().cluster().prepareAllocationExplain().useAnyUnassignedShard().get();
  ClusterAllocationExplanation cae=resp.getExplanation();
  assertThat(cae.getShard().getIndexName(),equalTo("test"));
  assertFalse(cae.isPrimary());
  assertFalse(cae.isAssigned());
  assertThat("expecting a remaining delay, got: " + cae.getRemainingDelayNanos(),cae.getRemainingDelayNanos(),greaterThan(0L));
}
