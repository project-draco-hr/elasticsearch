{
  if (expectedValue instanceof String) {
    String expValue=((String)expectedValue).trim();
    if (expValue.length() > 2 && expValue.startsWith("/") && expValue.endsWith("/")) {
      assertThat("field [" + getField() + "] was expected to be of type String but is an instanceof ["+ actualValue.getClass()+ "]",actualValue,instanceOf(String.class));
      String stringValue=(String)actualValue;
      String regex=expValue.substring(1,expValue.length() - 1);
      logger.trace("assert that [{}] matches [{}]",stringValue,regex);
      assertThat("field [" + getField() + "] was expected to match the provided regex but didn't",stringValue,matches(regex,Pattern.COMMENTS));
      return;
    }
  }
  assertThat(errorMessage(),actualValue,notNullValue());
  logger.trace("assert that [{}] matches [{}] (field [{}])",actualValue,expectedValue,getField());
  if (!actualValue.getClass().equals(expectedValue.getClass())) {
    if (actualValue instanceof Number && expectedValue instanceof Number) {
      assertThat(errorMessage(),((Number)actualValue).doubleValue(),equalTo(((Number)expectedValue).doubleValue()));
      return;
    }
  }
  assertThat(errorMessage(),actualValue,equalTo(expectedValue));
}
