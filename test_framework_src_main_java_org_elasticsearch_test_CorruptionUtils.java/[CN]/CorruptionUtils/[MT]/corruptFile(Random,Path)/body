{
  assertTrue("files must be non-empty",files.length > 0);
  final Path fileToCorrupt=RandomPicks.randomFrom(random,files);
  assertTrue(fileToCorrupt + " is not a file",Files.isRegularFile(fileToCorrupt));
  try (Directory dir=FSDirectory.open(fileToCorrupt.toAbsolutePath().getParent())){
    long checksumBeforeCorruption;
    try (IndexInput input=dir.openInput(fileToCorrupt.getFileName().toString(),IOContext.DEFAULT)){
      checksumBeforeCorruption=CodecUtil.retrieveChecksum(input);
    }
     try (FileChannel raf=FileChannel.open(fileToCorrupt,StandardOpenOption.READ,StandardOpenOption.WRITE)){
      raf.position(random.nextInt((int)Math.min(Integer.MAX_VALUE,raf.size())));
      long filePointer=raf.position();
      ByteBuffer bb=ByteBuffer.wrap(new byte[1]);
      raf.read(bb);
      bb.flip();
      byte oldValue=bb.get(0);
      byte newValue=(byte)(oldValue + 1);
      bb.put(0,newValue);
      raf.position(filePointer);
      raf.write(bb);
      logger.info("Corrupting file --  flipping at position {} from {} to {} file: {}",filePointer,Integer.toHexString(oldValue),Integer.toHexString(newValue),fileToCorrupt.getFileName());
    }
     long checksumAfterCorruption;
    long actualChecksumAfterCorruption;
    try (ChecksumIndexInput input=dir.openChecksumInput(fileToCorrupt.getFileName().toString(),IOContext.DEFAULT)){
      assertThat(input.getFilePointer(),is(0L));
      input.seek(input.length() - 8);
      checksumAfterCorruption=input.getChecksum();
      actualChecksumAfterCorruption=input.readLong();
    }
     StringBuilder msg=new StringBuilder();
    msg.append("Checksum before: [").append(checksumBeforeCorruption).append("]");
    msg.append(" after: [").append(checksumAfterCorruption).append("]");
    msg.append(" checksum value after corruption: ").append(actualChecksumAfterCorruption).append("]");
    msg.append(" file: ").append(fileToCorrupt.getFileName()).append(" length: ").append(dir.fileLength(fileToCorrupt.getFileName().toString()));
    logger.info(msg.toString());
    assumeTrue("Checksum collision - " + msg.toString(),checksumAfterCorruption != checksumBeforeCorruption || actualChecksumAfterCorruption != checksumBeforeCorruption);
    assertThat("no file corrupted",fileToCorrupt,notNullValue());
  }
 }
