{
  client1.admin().indices().prepareDelete().execute().actionGet();
  logger.info("--> creating index [test]");
  client1.admin().indices().create(createIndexRequest("test")).actionGet();
  logger.info("--> running cluster_health");
  ClusterHealthResponse clusterHealth=client1.admin().cluster().health(clusterHealthRequest().setWaitForGreenStatus()).actionGet();
  logger.info("--> done cluster_health, status " + clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.GREEN));
  logger.info("--> creating alias1 ");
  assertThat(client2.admin().indices().prepareAliases().addAlias("test","alias1").execute().actionGet().isAcknowledged(),equalTo(true));
  TimeValue timeout=TimeValue.timeValueSeconds(2);
  logger.info("--> recreating alias1 ");
  StopWatch stopWatch=new StopWatch();
  stopWatch.start();
  assertThat(client2.admin().indices().prepareAliases().addAlias("test","alias1").setTimeout(timeout).execute().actionGet().isAcknowledged(),equalTo(true));
  assertThat(stopWatch.stop().lastTaskTime().millis(),lessThan(timeout.millis()));
  logger.info("--> modifying alias1 to have a filter");
  stopWatch.start();
  assertThat(client2.admin().indices().prepareAliases().addAlias("test","alias1",termFilter("name","foo")).setTimeout(timeout).execute().actionGet().isAcknowledged(),equalTo(true));
  assertThat(stopWatch.stop().lastTaskTime().millis(),lessThan(timeout.millis()));
  logger.info("--> recreating alias1 with the same filter");
  stopWatch.start();
  assertThat(client2.admin().indices().prepareAliases().addAlias("test","alias1",termFilter("name","foo")).setTimeout(timeout).execute().actionGet().isAcknowledged(),equalTo(true));
  assertThat(stopWatch.stop().lastTaskTime().millis(),lessThan(timeout.millis()));
  logger.info("--> recreating alias1 with a different filter");
  stopWatch.start();
  assertThat(client2.admin().indices().prepareAliases().addAlias("test","alias1",termFilter("name","bar")).setTimeout(timeout).execute().actionGet().isAcknowledged(),equalTo(true));
  assertThat(stopWatch.stop().lastTaskTime().millis(),lessThan(timeout.millis()));
  logger.info("--> verify that filter was updated");
  AliasMetaData aliasMetaData=((InternalNode)node("server1")).injector().getInstance(ClusterService.class).state().metaData().aliases().get("alias1").get("test");
  assertThat(aliasMetaData.getFilter().toString(),equalTo("{\"term\":{\"name\":\"bar\"}}"));
  logger.info("--> deleting alias1");
  stopWatch.start();
  assertThat(client2.admin().indices().prepareAliases().removeAlias("test","alias1").setTimeout(timeout).execute().actionGet().isAcknowledged(),equalTo(true));
  assertThat(stopWatch.stop().lastTaskTime().millis(),lessThan(timeout.millis()));
  logger.info("--> deleting alias1 one more time");
  stopWatch.start();
  assertThat(client2.admin().indices().prepareAliases().removeAlias("test","alias1").setTimeout(timeout).execute().actionGet().isAcknowledged(),equalTo(true));
  assertThat(stopWatch.stop().lastTaskTime().millis(),lessThan(timeout.millis()));
}
