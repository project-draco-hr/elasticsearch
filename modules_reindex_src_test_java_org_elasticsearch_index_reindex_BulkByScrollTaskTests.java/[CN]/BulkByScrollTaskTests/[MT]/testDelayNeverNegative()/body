{
  ThreadPool threadPool=new ThreadPool("test"){
    public ScheduledFuture<?> schedule(    TimeValue delay,    String name,    Runnable command){
      return new ScheduledFuture<Void>(){
        @Override public long getDelay(        TimeUnit unit){
          return -1;
        }
        @Override public int compareTo(        Delayed o){
          throw new UnsupportedOperationException();
        }
        @Override public boolean cancel(        boolean mayInterruptIfRunning){
          throw new UnsupportedOperationException();
        }
        @Override public boolean isCancelled(){
          throw new UnsupportedOperationException();
        }
        @Override public boolean isDone(){
          throw new UnsupportedOperationException();
        }
        @Override public Void get() throws InterruptedException, ExecutionException {
          throw new UnsupportedOperationException();
        }
        @Override public Void get(        long timeout,        TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
          throw new UnsupportedOperationException();
        }
      }
;
    }
  }
;
  try {
    task.delayPrepareBulkRequest(threadPool,timeValueSeconds(0),new AbstractRunnable(){
      @Override protected void doRun() throws Exception {
      }
      @Override public void onFailure(      Throwable t){
        throw new UnsupportedOperationException();
      }
    }
);
    assertEquals(timeValueSeconds(0),task.getStatus().getThrottledUntil());
  }
  finally {
    threadPool.shutdown();
  }
}
