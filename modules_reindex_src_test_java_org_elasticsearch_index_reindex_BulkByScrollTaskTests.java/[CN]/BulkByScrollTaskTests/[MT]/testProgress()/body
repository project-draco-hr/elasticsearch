{
  long created=0;
  long updated=0;
  long deleted=0;
  long versionConflicts=0;
  long noops=0;
  int batch=0;
  BulkByScrollTask.Status status=task.getStatus();
  assertEquals(0,status.getTotal());
  assertEquals(created,status.getCreated());
  assertEquals(updated,status.getUpdated());
  assertEquals(deleted,status.getDeleted());
  assertEquals(versionConflicts,status.getVersionConflicts());
  assertEquals(batch,status.getBatches());
  assertEquals(noops,status.getNoops());
  long totalHits=randomIntBetween(10,1000);
  task.setTotal(totalHits);
  for (long p=0; p < totalHits; p++) {
    status=task.getStatus();
    assertEquals(totalHits,status.getTotal());
    assertEquals(created,status.getCreated());
    assertEquals(updated,status.getUpdated());
    assertEquals(deleted,status.getDeleted());
    assertEquals(versionConflicts,status.getVersionConflicts());
    assertEquals(batch,status.getBatches());
    assertEquals(noops,status.getNoops());
    if (randomBoolean()) {
      created++;
      task.countCreated();
    }
 else     if (randomBoolean()) {
      updated++;
      task.countUpdated();
    }
 else {
      deleted++;
      task.countDeleted();
    }
    if (rarely()) {
      versionConflicts++;
      task.countVersionConflict();
    }
    if (rarely()) {
      batch++;
      task.countBatch();
    }
    if (rarely()) {
      noops++;
      task.countNoop();
    }
  }
  status=task.getStatus();
  assertEquals(totalHits,status.getTotal());
  assertEquals(created,status.getCreated());
  assertEquals(updated,status.getUpdated());
  assertEquals(deleted,status.getDeleted());
  assertEquals(versionConflicts,status.getVersionConflicts());
  assertEquals(batch,status.getBatches());
  assertEquals(noops,status.getNoops());
}
