{
  boolean http10=request.getProtocolVersion().equals(HttpVersion.HTTP_1_0);
  boolean close=HttpHeaders.Values.CLOSE.equalsIgnoreCase(request.getHeader(HttpHeaders.Names.CONNECTION)) || (http10 && !HttpHeaders.Values.KEEP_ALIVE.equalsIgnoreCase(request.getHeader(HttpHeaders.Names.CONNECTION)));
  HttpResponseStatus status=getStatus(response.status());
  org.jboss.netty.handler.codec.http.HttpResponse resp;
  if (http10) {
    resp=new DefaultHttpResponse(HttpVersion.HTTP_1_0,status);
    if (!close) {
      resp.addHeader(HttpHeaders.Names.CONNECTION,"Keep-Alive");
    }
  }
 else {
    resp=new DefaultHttpResponse(HttpVersion.HTTP_1_1,status);
  }
  if (RestUtils.isBrowser(request.getHeader(HttpHeaders.Names.USER_AGENT))) {
    if (transport.settings().getAsBoolean("http.cors.enabled",true)) {
      resp.addHeader("Access-Control-Allow-Origin",transport.settings().get("http.cors.allow-origin","*"));
      if (request.getMethod() == HttpMethod.OPTIONS) {
        resp.addHeader("Access-Control-Max-Age",transport.settings().getAsInt("http.cors.max-age",1728000));
        resp.addHeader("Access-Control-Allow-Methods",transport.settings().get("http.cors.allow-methods","OPTIONS, HEAD, GET, POST, PUT, DELETE"));
        resp.addHeader("Access-Control-Allow-Headers",transport.settings().get("http.cors.allow-headers","X-Requested-With, Content-Type, Content-Length"));
      }
    }
  }
  String opaque=request.getHeader("X-Opaque-Id");
  if (opaque != null) {
    resp.addHeader("X-Opaque-Id",opaque);
  }
  Map<String,List<String>> customHeaders=response.getHeaders();
  if (customHeaders != null) {
    for (    Map.Entry<String,List<String>> headerEntry : customHeaders.entrySet()) {
      for (      String headerValue : headerEntry.getValue()) {
        resp.addHeader(headerEntry.getKey(),headerValue);
      }
    }
  }
  ChannelBuffer buf;
  try {
    if (response instanceof XContentRestResponse) {
      XContentBuilder builder=((XContentRestResponse)response).builder();
      if (response.contentThreadSafe()) {
        buf=builder.bytes().toChannelBuffer();
      }
 else {
        buf=builder.bytes().copyBytesArray().toChannelBuffer();
      }
    }
 else {
      if (response.contentThreadSafe()) {
        buf=ChannelBuffers.wrappedBuffer(response.content(),response.contentOffset(),response.contentLength());
      }
 else {
        buf=ChannelBuffers.copiedBuffer(response.content(),response.contentOffset(),response.contentLength());
      }
    }
  }
 catch (  IOException e) {
    throw new HttpException("Failed to convert response to bytes",e);
  }
  if (response.prefixContent() != null || response.suffixContent() != null) {
    ChannelBuffer prefixBuf=ChannelBuffers.EMPTY_BUFFER;
    if (response.prefixContent() != null) {
      prefixBuf=ChannelBuffers.copiedBuffer(response.prefixContent(),response.prefixContentOffset(),response.prefixContentLength());
    }
    ChannelBuffer suffixBuf=ChannelBuffers.EMPTY_BUFFER;
    if (response.suffixContent() != null) {
      suffixBuf=ChannelBuffers.copiedBuffer(response.suffixContent(),response.suffixContentOffset(),response.suffixContentLength());
    }
    buf=ChannelBuffers.wrappedBuffer(prefixBuf,buf,suffixBuf);
  }
  resp.setContent(buf);
  resp.setHeader(HttpHeaders.Names.CONTENT_TYPE,response.contentType());
  resp.setHeader(HttpHeaders.Names.CONTENT_LENGTH,String.valueOf(buf.readableBytes()));
  if (transport.resetCookies) {
    String cookieString=request.getHeader(HttpHeaders.Names.COOKIE);
    if (cookieString != null) {
      CookieDecoder cookieDecoder=new CookieDecoder();
      Set<Cookie> cookies=cookieDecoder.decode(cookieString);
      if (!cookies.isEmpty()) {
        CookieEncoder cookieEncoder=new CookieEncoder(true);
        for (        Cookie cookie : cookies) {
          cookieEncoder.addCookie(cookie);
        }
        resp.addHeader(HttpHeaders.Names.SET_COOKIE,cookieEncoder.encode());
      }
    }
  }
  ChannelFuture future=channel.write(resp);
  if (close) {
    future.addListener(ChannelFutureListener.CLOSE);
  }
}
