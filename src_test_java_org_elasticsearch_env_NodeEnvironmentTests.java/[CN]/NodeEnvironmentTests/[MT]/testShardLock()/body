{
  final NodeEnvironment env=newNodeEnvironment();
  ShardLock fooLock=env.shardLock(new ShardId("foo",1));
  assertEquals(new ShardId("foo",1),fooLock.getShardId());
  try {
    env.shardLock(new ShardId("foo",1));
    fail("shard is locked");
  }
 catch (  LockObtainFailedException ex) {
  }
  for (  Path path : env.indexPaths(new Index("foo"),settings)) {
    Files.createDirectories(path.resolve("1"));
    Files.createDirectories(path.resolve("2"));
  }
  try {
    env.lockAllForIndex(new Index("foo"));
    fail("shard 1 is locked");
  }
 catch (  LockObtainFailedException ex) {
  }
  fooLock.close();
  env.shardLock(new ShardId("foo",1)).close();
  List<ShardLock> locks=env.lockAllForIndex(new Index("foo"));
  try {
    env.shardLock(new ShardId("foo",randomBoolean() ? 1 : 2));
    fail("shard is locked");
  }
 catch (  LockObtainFailedException ex) {
  }
  IOUtils.close(locks);
  assertTrue("LockedShards: " + env.lockedShards(),env.lockedShards().isEmpty());
  env.close();
}
