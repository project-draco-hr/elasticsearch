{
  String[] dataPaths=tmpPaths();
  NodeEnvironment env=newNodeEnvironment(dataPaths,ImmutableSettings.EMPTY);
  Settings s1=ImmutableSettings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,1).build();
  Settings s2=ImmutableSettings.builder().put(IndexMetaData.SETTING_DATA_PATH,"/tmp/foo").build();
  ShardId sid=new ShardId("myindex",0);
  Index i=new Index("myindex");
  assertFalse("no settings should mean no custom data path",NodeEnvironment.hasCustomDataPath(s1));
  assertTrue("settings with path_data should have a custom data path",NodeEnvironment.hasCustomDataPath(s2));
  assertThat(env.shardDataPaths(sid,s1),equalTo(env.shardPaths(sid)));
  assertThat(env.shardDataPaths(sid,s2),equalTo(new Path[]{PathUtils.get("/tmp/foo/0/myindex/0")}));
  assertThat("shard paths with a custom data_path should contain only regular paths",env.shardPaths(sid),equalTo(stringsToPaths(dataPaths,"elasticsearch/nodes/0/indices/myindex/0")));
  assertThat("index paths uses the regular template",env.indexPaths(i),equalTo(stringsToPaths(dataPaths,"elasticsearch/nodes/0/indices/myindex")));
  env.close();
  NodeEnvironment env2=newNodeEnvironment(dataPaths,ImmutableSettings.builder().put(NodeEnvironment.ADD_NODE_ID_TO_CUSTOM_PATH,false).build());
  assertThat(env2.shardDataPaths(sid,s1),equalTo(env2.shardPaths(sid)));
  assertThat(env2.shardDataPaths(sid,s2),equalTo(new Path[]{PathUtils.get("/tmp/foo/myindex/0")}));
  assertThat("shard paths with a custom data_path should contain only regular paths",env2.shardPaths(sid),equalTo(stringsToPaths(dataPaths,"elasticsearch/nodes/0/indices/myindex/0")));
  assertThat("index paths uses the regular template",env2.indexPaths(i),equalTo(stringsToPaths(dataPaths,"elasticsearch/nodes/0/indices/myindex")));
  env2.close();
}
