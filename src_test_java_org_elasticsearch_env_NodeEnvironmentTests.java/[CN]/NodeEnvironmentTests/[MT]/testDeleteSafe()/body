{
  final NodeEnvironment env=newNodeEnvironment();
  ShardLock fooLock=env.shardLock(new ShardId("foo",1));
  assertEquals(new ShardId("foo",1),fooLock.getShardId());
  for (  Path path : env.indexPaths(new Index("foo"))) {
    Files.createDirectories(path.resolve("1"));
    Files.createDirectories(path.resolve("2"));
  }
  try {
    env.deleteShardDirectorySafe(new ShardId("foo",1));
    fail("shard is locked");
  }
 catch (  LockObtainFailedException ex) {
  }
  for (  Path path : env.indexPaths(new Index("foo"))) {
    assertTrue(Files.exists(path.resolve("1")));
    assertTrue(Files.exists(path.resolve("2")));
  }
  env.deleteShardDirectorySafe(new ShardId("foo",2));
  for (  Path path : env.indexPaths(new Index("foo"))) {
    assertTrue(Files.exists(path.resolve("1")));
    assertFalse(Files.exists(path.resolve("2")));
  }
  try {
    env.deleteIndexDirectorySafe(new Index("foo"),randomIntBetween(0,10));
    fail("shard is locked");
  }
 catch (  LockObtainFailedException ex) {
  }
  fooLock.close();
  for (  Path path : env.indexPaths(new Index("foo"))) {
    assertTrue(Files.exists(path));
  }
  final AtomicReference<Throwable> threadException=new AtomicReference<>();
  if (randomBoolean()) {
    Thread t=new Thread(new AbstractRunnable(){
      @Override public void onFailure(      Throwable t){
        logger.error("unexpected error",t);
        threadException.set(t);
      }
      @Override protected void doRun() throws Exception {
        try (ShardLock fooLock=env.shardLock(new ShardId("foo",1))){
          Thread.sleep(100);
        }
       }
    }
);
    t.start();
  }
  env.deleteIndexDirectorySafe(new Index("foo"),5000);
  assertNull(threadException.get());
  for (  Path path : env.indexPaths(new Index("foo"))) {
    assertFalse(Files.exists(path));
  }
  assertTrue("LockedShards: " + env.lockedShards(),env.lockedShards().isEmpty());
  env.close();
}
