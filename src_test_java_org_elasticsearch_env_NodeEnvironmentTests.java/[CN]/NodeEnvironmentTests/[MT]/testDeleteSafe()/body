{
  Settings settings=nodeEnvSettings(tmpPaths());
  NodeEnvironment env=new NodeEnvironment(settings,new Environment(settings));
  ShardLock fooLock=env.shardLock(new ShardId("foo",1));
  assertEquals(new ShardId("foo",1),fooLock.getShardId());
  for (  Path path : env.indexPaths(new Index("foo"))) {
    Files.createDirectories(path.resolve("1"));
    Files.createDirectories(path.resolve("2"));
  }
  try {
    env.deleteShardDirectorySafe(new ShardId("foo",1));
    fail("shard is locked");
  }
 catch (  LockObtainFailedException ex) {
  }
  for (  Path path : env.indexPaths(new Index("foo"))) {
    assertTrue(Files.exists(path.resolve("1")));
    assertTrue(Files.exists(path.resolve("2")));
  }
  env.deleteShardDirectorySafe(new ShardId("foo",2));
  for (  Path path : env.indexPaths(new Index("foo"))) {
    assertTrue(Files.exists(path.resolve("1")));
    assertFalse(Files.exists(path.resolve("2")));
  }
  try {
    env.deleteIndexDirectorySafe(new Index("foo"));
    fail("shard is locked");
  }
 catch (  LockObtainFailedException ex) {
  }
  fooLock.close();
  for (  Path path : env.indexPaths(new Index("foo"))) {
    assertTrue(Files.exists(path));
  }
  env.deleteIndexDirectorySafe(new Index("foo"));
  for (  Path path : env.indexPaths(new Index("foo"))) {
    assertFalse(Files.exists(path));
  }
  assertTrue("LockedShards: " + env.lockedShards(),env.lockedShards().isEmpty());
}
