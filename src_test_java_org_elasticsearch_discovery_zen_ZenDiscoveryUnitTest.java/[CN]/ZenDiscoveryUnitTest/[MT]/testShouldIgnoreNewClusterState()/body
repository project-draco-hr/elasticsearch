{
  ClusterName clusterName=new ClusterName("abc");
  DiscoveryNodes.Builder currentNodes=DiscoveryNodes.builder();
  currentNodes.masterNodeId("a");
  DiscoveryNodes.Builder newNodes=DiscoveryNodes.builder();
  newNodes.masterNodeId("a");
  ClusterState.Builder currentState=ClusterState.builder(clusterName);
  currentState.nodes(currentNodes);
  ClusterState.Builder newState=ClusterState.builder(clusterName);
  newState.nodes(newNodes);
  currentState.version(2);
  newState.version(1);
  assertTrue("should ignore, because new state's version is lower to current state's version",shouldIgnoreOrRejectNewClusterState(logger,currentState.build(),newState.build()));
  currentState.version(1);
  newState.version(1);
  assertFalse("should not ignore, because new state's version is equal to current state's version",shouldIgnoreOrRejectNewClusterState(logger,currentState.build(),newState.build()));
  currentState.version(1);
  newState.version(2);
  assertFalse("should not ignore, because new state's version is higher to current state's version",shouldIgnoreOrRejectNewClusterState(logger,currentState.build(),newState.build()));
  currentNodes=DiscoveryNodes.builder();
  currentNodes.masterNodeId("b");
  if (randomBoolean()) {
    currentState.version(2);
    newState.version(1);
  }
 else {
    currentState.version(1);
    newState.version(2);
  }
  currentState.nodes(currentNodes);
  try {
    shouldIgnoreOrRejectNewClusterState(logger,currentState.build(),newState.build());
    fail("should ignore, because current state's master is not equal to new state's master");
  }
 catch (  ElasticsearchIllegalStateException e) {
    assertThat(e.getMessage(),containsString("cluster state from a different master then the current one, rejecting"));
  }
  currentNodes=DiscoveryNodes.builder();
  currentNodes.masterNodeId(null);
  currentState.nodes(currentNodes);
  if (randomBoolean()) {
    currentState.version(2);
    newState.version(1);
  }
 else {
    currentState.version(1);
    newState.version(2);
  }
  assertFalse("should not ignore, because current state doesn't have a master",shouldIgnoreOrRejectNewClusterState(logger,currentState.build(),newState.build()));
}
