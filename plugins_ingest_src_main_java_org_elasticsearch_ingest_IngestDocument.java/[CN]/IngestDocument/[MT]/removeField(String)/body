{
  FieldPath fieldPath=new FieldPath(path);
  Object context=fieldPath.initialContext;
  for (int i=0; i < fieldPath.pathElements.length - 1; i++) {
    context=resolve(fieldPath.pathElements[i],path,context);
  }
  String leafKey=fieldPath.pathElements[fieldPath.pathElements.length - 1];
  if (context instanceof Map) {
    @SuppressWarnings("unchecked") Map<String,Object> map=(Map<String,Object>)context;
    if (map.containsKey(leafKey)) {
      map.remove(leafKey);
      return;
    }
    throw new IllegalArgumentException("field [" + leafKey + "] not present as part of path ["+ path+ "]");
  }
  if (context instanceof List) {
    @SuppressWarnings("unchecked") List<Object> list=(List<Object>)context;
    int index;
    try {
      index=Integer.parseInt(leafKey);
    }
 catch (    NumberFormatException e) {
      throw new IllegalArgumentException("[" + leafKey + "] is not an integer, cannot be used as an index as part of path ["+ path+ "]",e);
    }
    if (index < 0 || index >= list.size()) {
      throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length ["+ list.size()+ "] as part of path ["+ path+ "]");
    }
    list.remove(index);
    return;
  }
  if (context == null) {
    throw new IllegalArgumentException("cannot remove [" + leafKey + "] from null as part of path ["+ path+ "]");
  }
  throw new IllegalArgumentException("cannot remove [" + leafKey + "] from object of type ["+ context.getClass().getName()+ "] as part of path ["+ path+ "]");
}
