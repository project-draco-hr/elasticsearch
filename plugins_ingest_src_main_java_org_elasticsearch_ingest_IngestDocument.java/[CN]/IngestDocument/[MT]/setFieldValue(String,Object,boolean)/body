{
  FieldPath fieldPath=new FieldPath(path);
  Object context=fieldPath.initialContext;
  value=deepCopy(value);
  for (int i=0; i < fieldPath.pathElements.length - 1; i++) {
    String pathElement=fieldPath.pathElements[i];
    if (context == null) {
      throw new IllegalArgumentException("cannot resolve [" + pathElement + "] from null as part of path ["+ path+ "]");
    }
    if (context instanceof Map) {
      @SuppressWarnings("unchecked") Map<String,Object> map=(Map<String,Object>)context;
      if (map.containsKey(pathElement)) {
        context=map.get(pathElement);
      }
 else {
        HashMap<Object,Object> newMap=new HashMap<>();
        map.put(pathElement,newMap);
        context=newMap;
      }
    }
 else     if (context instanceof List) {
      @SuppressWarnings("unchecked") List<Object> list=(List<Object>)context;
      int index;
      try {
        index=Integer.parseInt(pathElement);
      }
 catch (      NumberFormatException e) {
        throw new IllegalArgumentException("[" + pathElement + "] is not an integer, cannot be used as an index as part of path ["+ path+ "]",e);
      }
      if (index < 0 || index >= list.size()) {
        throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length ["+ list.size()+ "] as part of path ["+ path+ "]");
      }
      context=list.get(index);
    }
 else {
      throw new IllegalArgumentException("cannot resolve [" + pathElement + "] from object of type ["+ context.getClass().getName()+ "] as part of path ["+ path+ "]");
    }
  }
  String leafKey=fieldPath.pathElements[fieldPath.pathElements.length - 1];
  if (context == null) {
    throw new IllegalArgumentException("cannot set [" + leafKey + "] with null parent as part of path ["+ path+ "]");
  }
  if (context instanceof Map) {
    @SuppressWarnings("unchecked") Map<String,Object> map=(Map<String,Object>)context;
    if (append) {
      if (map.containsKey(leafKey)) {
        Object object=map.get(leafKey);
        if (object instanceof List) {
          @SuppressWarnings("unchecked") List<Object> list=(List<Object>)object;
          list.add(value);
          return;
        }
      }
    }
    map.put(leafKey,value);
  }
 else   if (context instanceof List) {
    @SuppressWarnings("unchecked") List<Object> list=(List<Object>)context;
    int index;
    try {
      index=Integer.parseInt(leafKey);
    }
 catch (    NumberFormatException e) {
      throw new IllegalArgumentException("[" + leafKey + "] is not an integer, cannot be used as an index as part of path ["+ path+ "]",e);
    }
    if (index < 0 || index >= list.size()) {
      throw new IllegalArgumentException("[" + index + "] is out of bounds for array with length ["+ list.size()+ "] as part of path ["+ path+ "]");
    }
    list.set(index,value);
  }
 else {
    throw new IllegalArgumentException("cannot set [" + leafKey + "] with parent object of type ["+ context.getClass().getName()+ "] as part of path ["+ path+ "]");
  }
}
