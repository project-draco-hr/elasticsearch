{
  XContentBuilder mapping=XContentBuilder.builder(JsonXContent.jsonXContent).startObject().startObject("type").startObject(FieldNamesFieldMapper.NAME).field("index",randomFrom("no","not_analyzed")).field("store",randomFrom("no","yes")).endObject().startObject("properties").startObject("foo").field("type","string").endObject().startObject("bar").field("type","object").startObject("properties").startObject("foo").field("type","string").endObject().startObject("bar").field("type","object").startObject("properties").startObject("bar").field("type","string").endObject().endObject().endObject().startObject("baz").field("type","long").endObject().endObject().endObject().endObject().endObject().endObject();
  assertAcked(client().admin().indices().prepareCreate("idx").addMapping("type",mapping));
  @SuppressWarnings("unchecked") final Map<String,Object>[] sources=new Map[]{ImmutableMap.of("foo","bar"),ImmutableMap.of("bar",ImmutableMap.of("foo","bar","bar",ImmutableMap.of("bar","foo"))),ImmutableMap.of("bar",ImmutableMap.of("baz",42)),ImmutableMap.of()};
  List<IndexRequestBuilder> reqs=new ArrayList<IndexRequestBuilder>();
  for (  Map<String,Object> source : sources) {
    reqs.add(client().prepareIndex("idx","type").setSource(source));
  }
  indexRandom(true,reqs);
  final Map<String,Integer> expected=new LinkedHashMap<String,Integer>();
  expected.put("foo",1);
  expected.put("f*",2);
  expected.put("bar",2);
  expected.put("bar.*",2);
  expected.put("bar.foo",1);
  expected.put("bar.bar",1);
  expected.put("bar.bar.bar",1);
  expected.put("baz",1);
  expected.put("foobar",0);
  ensureYellow("idx");
  final long numDocs=sources.length;
  SearchResponse resp=client().prepareSearch("idx").get();
  assertSearchResponse(resp);
  assertHitCount(resp,numDocs);
  for (  Map.Entry<String,Integer> entry : expected.entrySet()) {
    final String fieldName=entry.getKey();
    final int count=entry.getValue();
    resp=client().prepareSearch("idx").setQuery(QueryBuilders.filteredQuery(QueryBuilders.matchAllQuery(),FilterBuilders.existsFilter(fieldName))).execute().actionGet();
    assertSearchResponse(resp);
    assertEquals(String.format(Locale.ROOT,"exists(%s, %d) mapping: %s response: %s",fieldName,count,mapping.string(),resp),count,resp.getHits().totalHits());
    resp=client().prepareSearch("idx").setQuery(QueryBuilders.filteredQuery(QueryBuilders.matchAllQuery(),FilterBuilders.missingFilter(fieldName))).execute().actionGet();
    assertSearchResponse(resp);
    assertEquals(String.format(Locale.ROOT,"missing(%s, %d) mapping: %s response: %s",fieldName,count,mapping.string(),resp),numDocs - count,resp.getHits().totalHits());
  }
}
