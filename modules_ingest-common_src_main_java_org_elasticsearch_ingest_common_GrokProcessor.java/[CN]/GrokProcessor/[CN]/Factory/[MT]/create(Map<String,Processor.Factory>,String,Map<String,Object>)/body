{
  String matchField=ConfigurationUtils.readStringProperty(TYPE,processorTag,config,"field");
  List<String> matchPatterns=ConfigurationUtils.readList(TYPE,processorTag,config,"patterns");
  boolean traceMatch=ConfigurationUtils.readBooleanProperty(TYPE,processorTag,config,"trace_match",false);
  boolean ignoreMissing=ConfigurationUtils.readBooleanProperty(TYPE,processorTag,config,"ignore_missing",false);
  if (matchPatterns.isEmpty()) {
    throw newConfigurationException(TYPE,processorTag,"patterns","List of patterns must not be empty");
  }
  Map<String,String> customPatternBank=ConfigurationUtils.readOptionalMap(TYPE,processorTag,config,"pattern_definitions");
  Map<String,String> patternBank=new HashMap<>(builtinPatterns);
  if (customPatternBank != null) {
    patternBank.putAll(customPatternBank);
  }
  try {
    return new GrokProcessor(processorTag,patternBank,matchPatterns,matchField,traceMatch,ignoreMissing);
  }
 catch (  Exception e) {
    throw newConfigurationException(TYPE,processorTag,"patterns","Invalid regex pattern found in: " + matchPatterns + ". "+ e.getMessage());
  }
}
