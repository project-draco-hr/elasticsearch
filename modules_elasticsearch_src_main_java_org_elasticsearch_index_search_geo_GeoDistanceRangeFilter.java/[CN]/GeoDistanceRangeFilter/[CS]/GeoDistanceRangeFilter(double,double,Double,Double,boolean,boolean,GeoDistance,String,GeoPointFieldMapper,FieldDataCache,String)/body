{
  this.lat=lat;
  this.lon=lon;
  this.geoDistance=geoDistance;
  this.fieldName=fieldName;
  this.fieldDataCache=fieldDataCache;
  this.fixedSourceDistance=geoDistance.fixedSourceDistance(lat,lon,DistanceUnit.MILES);
  if (lowerVal != null) {
    double f=lowerVal.doubleValue();
    long i=NumericUtils.doubleToSortableLong(f);
    inclusiveLowerPoint=NumericUtils.sortableLongToDouble(includeLower ? i : (i + 1L));
  }
 else {
    inclusiveLowerPoint=Double.NEGATIVE_INFINITY;
  }
  if (upperVal != null) {
    double f=upperVal.doubleValue();
    long i=NumericUtils.doubleToSortableLong(f);
    inclusiveUpperPoint=NumericUtils.sortableLongToDouble(includeUpper ? i : (i - 1L));
  }
 else {
    inclusiveUpperPoint=Double.POSITIVE_INFINITY;
    optimizeBbox=null;
  }
  if (optimizeBbox != null && !"none".equals(optimizeBbox)) {
    distanceBoundingCheck=GeoDistance.distanceBoundingCheck(lat,lon,inclusiveUpperPoint,DistanceUnit.MILES);
    if ("memory".equals(optimizeBbox)) {
      boundingBoxFilter=null;
    }
 else     if ("indexed".equals(optimizeBbox)) {
      boundingBoxFilter=IndexedGeoBoundingBoxFilter.create(distanceBoundingCheck.topLeft(),distanceBoundingCheck.bottomRight(),mapper);
      distanceBoundingCheck=GeoDistance.ALWAYS_INSTANCE;
    }
 else {
      throw new ElasticSearchIllegalArgumentException("type [" + optimizeBbox + "] for bounding box optimization not supported");
    }
  }
 else {
    distanceBoundingCheck=GeoDistance.ALWAYS_INSTANCE;
    boundingBoxFilter=null;
  }
}
