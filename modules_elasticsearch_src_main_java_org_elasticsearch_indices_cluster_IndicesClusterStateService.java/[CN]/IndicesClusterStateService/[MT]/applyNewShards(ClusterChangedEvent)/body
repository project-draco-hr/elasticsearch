{
  if (!indicesService.changesAllowed())   return;
  RoutingTable routingTable=event.state().routingTable();
  RoutingNode routingNodes=event.state().readOnlyRoutingNodes().nodesToShards().get(event.state().nodes().localNodeId());
  if (routingNodes == null) {
    return;
  }
  Nodes nodes=event.state().nodes();
  for (  final ShardRouting shardRouting : routingNodes) {
    final IndexService indexService=indicesService.indexServiceSafe(shardRouting.index());
    final int shardId=shardRouting.id();
    if (!indexService.hasShard(shardId) && shardRouting.started()) {
      logger.warn("[" + shardRouting.index() + "]["+ shardRouting.shardId().id()+ "] Master "+ nodes.masterNode()+ " marked shard as started, but shard have not been created, mark shard as failed");
      shardStateAction.shardFailed(shardRouting,"Master " + nodes.masterNode() + " marked shard as started, but shard have not been created, mark shard as failed");
      continue;
    }
    if (indexService.hasShard(shardId)) {
      InternalIndexShard indexShard=(InternalIndexShard)indexService.shard(shardId);
      if (!shardRouting.equals(indexShard.routingEntry())) {
        indexShard.routingEntry(shardRouting);
        indexService.shardInjector(shardId).getInstance(IndexShardGatewayService.class).routingStateChanged();
      }
    }
    if (shardRouting.initializing()) {
      applyInitializingShard(routingTable,nodes,shardRouting);
    }
  }
}
