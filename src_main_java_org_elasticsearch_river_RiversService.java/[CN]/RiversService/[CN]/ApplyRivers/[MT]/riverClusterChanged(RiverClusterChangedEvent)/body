{
  DiscoveryNode localNode=clusterService.localNode();
  RiverClusterState state=event.state();
  for (  final RiverName riverName : rivers.keySet()) {
    RiverRouting routing=state.routing().routing(riverName);
    if (routing == null || !localNode.equals(routing.node())) {
      closeRiver(riverName);
      try {
        client.prepareGet(riverIndexName,riverName.name(),"_meta").setListenerThreaded(true).execute(new ActionListener<GetResponse>(){
          @Override public void onResponse(          GetResponse getResponse){
            if (!getResponse.exists()) {
              client.admin().indices().prepareDeleteMapping(riverIndexName).setType(riverName.name()).execute(new ActionListener<DeleteMappingResponse>(){
                @Override public void onResponse(                DeleteMappingResponse deleteMappingResponse){
                }
                @Override public void onFailure(                Throwable e){
                  logger.debug("failed to (double) delete river [{}] content",e,riverName.name());
                }
              }
);
            }
          }
          @Override public void onFailure(          Throwable e){
            logger.debug("failed to (double) delete river [{}] content",e,riverName.name());
          }
        }
);
      }
 catch (      IndexMissingException e) {
      }
catch (      Exception e) {
        logger.warn("unexpected failure when trying to verify river [{}] deleted",e,riverName.name());
      }
    }
  }
  for (  final RiverRouting routing : state.routing()) {
    if (routing.node() == null) {
      continue;
    }
    if (!routing.node().equals(localNode)) {
      continue;
    }
    if (rivers.containsKey(routing.riverName())) {
      continue;
    }
    client.prepareGet(riverIndexName,routing.riverName().name(),"_meta").setListenerThreaded(true).execute(new ActionListener<GetResponse>(){
      @Override public void onResponse(      GetResponse getResponse){
        if (!rivers.containsKey(routing.riverName())) {
          if (getResponse.exists()) {
            createRiver(routing.riverName(),getResponse.sourceAsMap());
          }
        }
      }
      @Override public void onFailure(      Throwable e){
        Throwable failure=ExceptionsHelper.unwrapCause(e);
        if ((failure instanceof NoShardAvailableActionException) || (failure instanceof ClusterBlockException) || (failure instanceof IndexMissingException)) {
          logger.debug("failed to get _meta from [{}]/[{}], retrying...",e,routing.riverName().type(),routing.riverName().name());
          final ActionListener<GetResponse> listener=this;
          threadPool.schedule(TimeValue.timeValueSeconds(5),ThreadPool.Names.SAME,new Runnable(){
            @Override public void run(){
              client.prepareGet(riverIndexName,routing.riverName().name(),"_meta").setListenerThreaded(true).execute(listener);
            }
          }
);
        }
 else {
          logger.warn("failed to get _meta from [{}]/[{}]",e,routing.riverName().type(),routing.riverName().name());
        }
      }
    }
);
  }
}
