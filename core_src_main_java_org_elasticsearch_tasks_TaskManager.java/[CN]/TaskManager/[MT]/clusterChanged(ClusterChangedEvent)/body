{
  if (event.nodesRemoved()) {
synchronized (banedParents) {
      lastDiscoveryNodes=event.state().getNodes();
      Iterator<Tuple<String,Long>> banIterator=banedParents.keySet().iterator();
      while (banIterator.hasNext()) {
        Tuple<String,Long> nodeAndTaskId=banIterator.next();
        String nodeId=nodeAndTaskId.v1();
        Long taskId=nodeAndTaskId.v2();
        if (lastDiscoveryNodes.nodeExists(nodeId) == false) {
          logger.debug("Removing ban for the parent [{}:{}] on the node [{}], reason: the parent node is gone",nodeId,taskId,event.state().getNodes().localNode());
          banIterator.remove();
        }
      }
    }
    for (    Map.Entry<Long,CancellableTaskHolder> taskEntry : cancellableTasks.entrySet()) {
      CancellableTaskHolder holder=taskEntry.getValue();
      CancellableTask task=holder.getTask();
      String parent=task.getParentNode();
      if (parent != null && lastDiscoveryNodes.nodeExists(parent) == false) {
        if (task.cancelOnParentLeaving()) {
          holder.cancel("Coordinating node [" + parent + "] left the cluster");
        }
      }
    }
  }
}
