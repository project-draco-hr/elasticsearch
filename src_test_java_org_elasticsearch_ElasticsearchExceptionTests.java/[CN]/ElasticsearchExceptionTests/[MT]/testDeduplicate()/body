{
{
    ShardSearchFailure failure=new ShardSearchFailure(new QueryParsingException(new Index("foo"),"foobar"),new SearchShardTarget("node_1","foo",1));
    ShardSearchFailure failure1=new ShardSearchFailure(new QueryParsingException(new Index("foo"),"foobar"),new SearchShardTarget("node_1","foo",2));
    SearchPhaseExecutionException ex=new SearchPhaseExecutionException("search","all shards failed",new ShardSearchFailure[]{failure,failure1});
    XContentBuilder builder=XContentFactory.jsonBuilder().prettyPrint();
    builder.startObject();
    ex.toXContent(builder,ToXContent.EMPTY_PARAMS);
    builder.endObject();
    String expected="{\n" + "  \"type\" : \"search_phase_execution_exception\",\n" + "  \"reason\" : \"all shards failed\",\n"+ "  \"phase\" : \"search\",\n"+ "  \"grouped\" : true,\n"+ "  \"failed_shards\" : [ {\n"+ "    \"shard\" : 1,\n"+ "    \"index\" : \"foo\",\n"+ "    \"node\" : \"node_1\",\n"+ "    \"reason\" : {\n"+ "      \"type\" : \"query_parsing_exception\",\n"+ "      \"reason\" : \"foobar\",\n"+ "      \"index\" : \"foo\"\n"+ "    }\n"+ "  } ]\n"+ "}";
    assertEquals(expected,builder.string());
  }
{
    ShardSearchFailure failure=new ShardSearchFailure(new QueryParsingException(new Index("foo"),"foobar"),new SearchShardTarget("node_1","foo",1));
    ShardSearchFailure failure1=new ShardSearchFailure(new QueryParsingException(new Index("foo1"),"foobar"),new SearchShardTarget("node_1","foo1",1));
    ShardSearchFailure failure2=new ShardSearchFailure(new QueryParsingException(new Index("foo1"),"foobar"),new SearchShardTarget("node_1","foo1",2));
    SearchPhaseExecutionException ex=new SearchPhaseExecutionException("search","all shards failed",new ShardSearchFailure[]{failure,failure1,failure2});
    XContentBuilder builder=XContentFactory.jsonBuilder().prettyPrint();
    builder.startObject();
    ex.toXContent(builder,ToXContent.EMPTY_PARAMS);
    builder.endObject();
    String expected="{\n" + "  \"type\" : \"search_phase_execution_exception\",\n" + "  \"reason\" : \"all shards failed\",\n"+ "  \"phase\" : \"search\",\n"+ "  \"grouped\" : true,\n"+ "  \"failed_shards\" : [ {\n"+ "    \"shard\" : 1,\n"+ "    \"index\" : \"foo\",\n"+ "    \"node\" : \"node_1\",\n"+ "    \"reason\" : {\n"+ "      \"type\" : \"query_parsing_exception\",\n"+ "      \"reason\" : \"foobar\",\n"+ "      \"index\" : \"foo\"\n"+ "    }\n"+ "  }, {\n"+ "    \"shard\" : 1,\n"+ "    \"index\" : \"foo1\",\n"+ "    \"node\" : \"node_1\",\n"+ "    \"reason\" : {\n"+ "      \"type\" : \"query_parsing_exception\",\n"+ "      \"reason\" : \"foobar\",\n"+ "      \"index\" : \"foo1\"\n"+ "    }\n"+ "  } ]\n"+ "}";
    assertEquals(expected,builder.string());
  }
}
