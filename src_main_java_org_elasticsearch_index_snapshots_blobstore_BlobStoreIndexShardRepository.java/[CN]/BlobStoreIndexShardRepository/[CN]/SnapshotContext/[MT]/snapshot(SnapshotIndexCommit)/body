{
  logger.debug("[{}] [{}] snapshot to [{}] ...",shardId,snapshotId,repositoryName);
  store.incRef();
  try {
    final ImmutableMap<String,BlobMetaData> blobs;
    try {
      blobs=blobContainer.listBlobs();
    }
 catch (    IOException e) {
      throw new IndexShardSnapshotFailedException(shardId,"failed to list blobs",e);
    }
    long generation=findLatestFileNameGeneration(blobs);
    BlobStoreIndexShardSnapshots snapshots=buildBlobStoreIndexShardSnapshots(blobs);
    final CopyOnWriteArrayList<Throwable> failures=new CopyOnWriteArrayList<>();
    final List<BlobStoreIndexShardSnapshot.FileInfo> indexCommitPointFiles=newArrayList();
    int indexNumberOfFiles=0;
    long indexTotalFilesSize=0;
    ArrayList<FileInfo> filesToSnapshot=newArrayList();
    final Store.MetadataSnapshot metadata;
    try {
      metadata=store.getMetadata(snapshotIndexCommit);
    }
 catch (    IOException e) {
      throw new IndexShardSnapshotFailedException(shardId,"Failed to get store file metadata",e);
    }
    for (    String fileName : snapshotIndexCommit.getFiles()) {
      if (snapshotStatus.aborted()) {
        logger.debug("[{}] [{}] Aborted on the file [{}], exiting",shardId,snapshotId,fileName);
        throw new IndexShardSnapshotFailedException(shardId,"Aborted");
      }
      logger.trace("[{}] [{}] Processing [{}]",shardId,snapshotId,fileName);
      final StoreFileMetaData md=metadata.get(fileName);
      boolean snapshotRequired=false;
      BlobStoreIndexShardSnapshot.FileInfo fileInfo=snapshots.findPhysicalIndexFile(fileName);
      try {
        maybeRecalculateMetadataHash(blobContainer,fileInfo,metadata);
      }
 catch (      Throwable e) {
        logger.warn("{} Can't calculate hash from blob for file [{}] [{}]",e,shardId,fileInfo.physicalName(),fileInfo.metadata());
      }
      if (fileInfo == null || !fileInfo.isSame(md) || !snapshotFileExistsInBlobs(fileInfo,blobs)) {
        snapshotRequired=true;
      }
      if (snapshotRequired) {
        indexNumberOfFiles++;
        indexTotalFilesSize+=md.length();
        BlobStoreIndexShardSnapshot.FileInfo snapshotFileInfo=new BlobStoreIndexShardSnapshot.FileInfo(fileNameFromGeneration(++generation),md,chunkSize);
        indexCommitPointFiles.add(snapshotFileInfo);
        filesToSnapshot.add(snapshotFileInfo);
      }
 else {
        indexCommitPointFiles.add(fileInfo);
      }
    }
    snapshotStatus.files(indexNumberOfFiles,indexTotalFilesSize);
    snapshotStatus.updateStage(IndexShardSnapshotStatus.Stage.STARTED);
    for (    FileInfo snapshotFileInfo : filesToSnapshot) {
      try {
        snapshotFile(snapshotFileInfo);
      }
 catch (      IOException e) {
        throw new IndexShardSnapshotFailedException(shardId,"Failed to perform snapshot (index files)",e);
      }
    }
    snapshotStatus.indexVersion(snapshotIndexCommit.getGeneration());
    snapshotStatus.updateStage(IndexShardSnapshotStatus.Stage.FINALIZE);
    String snapshotBlobName=snapshotBlobName(snapshotId);
    BlobStoreIndexShardSnapshot snapshot=new BlobStoreIndexShardSnapshot(snapshotId.getSnapshot(),snapshotIndexCommit.getGeneration(),indexCommitPointFiles,snapshotStatus.startTime(),System.currentTimeMillis() - snapshotStatus.startTime(),indexNumberOfFiles,indexTotalFilesSize);
    logger.trace("[{}] [{}] writing shard snapshot file",shardId,snapshotId);
    try (OutputStream output=blobContainer.createOutput(snapshotBlobName)){
      writeSnapshot(snapshot,output);
    }
 catch (    IOException e) {
      throw new IndexShardSnapshotFailedException(shardId,"Failed to write commit point",e);
    }
    List<BlobStoreIndexShardSnapshot> newSnapshotsList=Lists.newArrayList();
    newSnapshotsList.add(snapshot);
    for (    BlobStoreIndexShardSnapshot point : snapshots) {
      newSnapshotsList.add(point);
    }
    cleanup(newSnapshotsList,blobs);
    snapshotStatus.updateStage(IndexShardSnapshotStatus.Stage.DONE);
  }
  finally {
    store.decRef();
  }
}
