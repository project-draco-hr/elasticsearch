{
  loader.init();
  field=StringHelper.intern(field);
  int[] ordinals=new int[reader.maxDoc()];
  int[][] multiValueOrdinals=null;
  int t=1;
  TermDocs termDocs=reader.termDocs();
  TermEnum termEnum=reader.terms(new Term(field));
  try {
    do {
      Term term=termEnum.term();
      if (term == null || term.field() != field)       break;
      loader.collectTerm(term.text());
      termDocs.seek(termEnum);
      while (termDocs.next()) {
        int doc=termDocs.doc();
        if (multiValueOrdinals != null) {
          int[] ordinalPerDoc=multiValueOrdinals[doc];
          if (ordinalPerDoc == null) {
            ordinalPerDoc=new int[1];
            ordinalPerDoc[0]=t;
            multiValueOrdinals[doc]=ordinalPerDoc;
          }
 else {
            ordinalPerDoc=Arrays.copyOf(ordinalPerDoc,ordinalPerDoc.length + 1);
            ordinalPerDoc[ordinalPerDoc.length - 1]=t;
            multiValueOrdinals[doc]=ordinalPerDoc;
          }
        }
 else {
          int ordinal=ordinals[doc];
          if (ordinal == 0) {
            ordinals[doc]=t;
          }
 else {
            multiValueOrdinals=new int[reader.maxDoc()][];
            for (int i=0; i < ordinals.length; i++) {
              ordinal=ordinals[i];
              if (ordinal != 0) {
                multiValueOrdinals[i]=new int[1];
                multiValueOrdinals[i][0]=ordinal;
              }
            }
            int[] ordinalPerDoc=multiValueOrdinals[doc];
            if (ordinalPerDoc == null) {
              ordinalPerDoc=new int[1];
              ordinalPerDoc[0]=t;
              multiValueOrdinals[doc]=ordinalPerDoc;
            }
 else {
              ordinalPerDoc=Arrays.copyOf(ordinalPerDoc,ordinalPerDoc.length + 1);
              ordinalPerDoc[ordinalPerDoc.length - 1]=t;
              multiValueOrdinals[doc]=ordinalPerDoc;
            }
          }
        }
      }
      t++;
    }
 while (termEnum.next());
  }
 catch (  RuntimeException e) {
    if (e.getClass().getName().endsWith("StopFillCacheException")) {
    }
 else {
      throw e;
    }
  }
 finally {
    termDocs.close();
    termEnum.close();
  }
  if (multiValueOrdinals != null) {
    return loader.buildMultiValue(field,multiValueOrdinals);
  }
 else {
    return loader.buildSingleValue(field,ordinals);
  }
}
