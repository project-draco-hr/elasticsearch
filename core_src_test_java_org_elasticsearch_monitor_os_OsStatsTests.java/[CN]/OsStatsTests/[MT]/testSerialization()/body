{
  int numLoadAverages=randomIntBetween(1,5);
  double loadAverages[]=new double[numLoadAverages];
  for (int i=0; i < loadAverages.length; i++) {
    loadAverages[i]=randomDouble();
  }
  OsStats.Cpu cpu=new OsStats.Cpu(randomShort(),loadAverages);
  OsStats.Mem mem=new OsStats.Mem(randomLong(),randomLong());
  OsStats.Swap swap=new OsStats.Swap(randomLong(),randomLong());
  OsStats osStats=new OsStats(System.currentTimeMillis(),cpu,mem,swap);
  try (BytesStreamOutput out=new BytesStreamOutput()){
    osStats.writeTo(out);
    try (StreamInput in=out.bytes().streamInput()){
      OsStats deserializedOsStats=new OsStats(in);
      assertEquals(osStats.getTimestamp(),deserializedOsStats.getTimestamp());
      assertEquals(osStats.getCpu().getPercent(),deserializedOsStats.getCpu().getPercent());
      assertArrayEquals(osStats.getCpu().getLoadAverage(),deserializedOsStats.getCpu().getLoadAverage(),0);
      assertEquals(osStats.getMem().getFree(),deserializedOsStats.getMem().getFree());
      assertEquals(osStats.getMem().getTotal(),deserializedOsStats.getMem().getTotal());
      assertEquals(osStats.getSwap().getFree(),deserializedOsStats.getSwap().getFree());
      assertEquals(osStats.getSwap().getTotal(),deserializedOsStats.getSwap().getTotal());
    }
   }
 }
