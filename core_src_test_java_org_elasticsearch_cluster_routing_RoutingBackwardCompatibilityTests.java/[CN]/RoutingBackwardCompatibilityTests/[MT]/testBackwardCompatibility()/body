{
  try (BufferedReader reader=new BufferedReader(new InputStreamReader(RoutingBackwardCompatibilityTests.class.getResourceAsStream("/org/elasticsearch/cluster/routing/shard_routes.txt"),"UTF-8"))){
    for (String line=reader.readLine(); line != null; line=reader.readLine()) {
      if (line.startsWith("#")) {
        continue;
      }
      String[] parts=line.split("\t");
      assertEquals(Arrays.toString(parts),7,parts.length);
      final String index=parts[0];
      final int numberOfShards=Integer.parseInt(parts[1]);
      final String type=parts[2];
      final String id=parts[3];
      final String routing="null".equals(parts[4]) ? null : parts[4];
      final int pre20ExpectedShardId=Integer.parseInt(parts[5]);
      final int currentExpectedShard=Integer.parseInt(parts[6]);
      OperationRouting operationRouting=new OperationRouting(Settings.EMPTY,null);
      for (      Version version : VersionUtils.allVersions()) {
        if (version.onOrAfter(Version.V_2_0_0) == false) {
          continue;
        }
        final Settings settings=settings(version).build();
        IndexMetaData indexMetaData=IndexMetaData.builder(index).settings(settings).numberOfShards(numberOfShards).numberOfReplicas(randomInt(3)).build();
        MetaData.Builder metaData=MetaData.builder().put(indexMetaData,false);
        RoutingTable routingTable=RoutingTable.builder().addAsNew(indexMetaData).build();
        ClusterState clusterState=ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build();
        final int shardId=operationRouting.indexShards(clusterState,index,id,routing).shardId().getId();
        assertEquals(currentExpectedShard,shardId);
      }
    }
  }
 }
