{
  Settings settings=ImmutableSettings.builder().put(this.testSettings).put(otherSettings).build();
  DocumentMapperParser mapperParser=MapperTestUtils.newMapperParser(settings);
  mapperParser.putTypeParser(AttachmentMapper.CONTENT_TYPE,new AttachmentMapper.TypeParser());
  String mapping=copyToStringFromClasspath("/org/elasticsearch/index/mapper/attachment/test/unit/metadata/test-mapping.json");
  DocumentMapper docMapper=mapperParser.parse(mapping);
  byte[] html=copyToBytesFromClasspath("/org/elasticsearch/index/mapper/attachment/test/sample-files/" + filename);
  BytesReference json=jsonBuilder().startObject().field("_id",1).startObject("file").field("_name",filename).field("_content",html).endObject().endObject().bytes();
  ParseContext.Document doc=docMapper.parse(json).rootDoc();
  assertThat(doc.get(docMapper.mappers().getMapper("file").names().indexName()),containsString("World"));
  assertThat(doc.get(docMapper.mappers().getMapper("file.name").names().indexName()),equalTo(filename));
  if (expectedDate == null) {
    assertThat(doc.getField(docMapper.mappers().getMapper("file.date").names().indexName()),nullValue());
  }
 else {
    assertThat(doc.getField(docMapper.mappers().getMapper("file.date").names().indexName()).numericValue().longValue(),is(expectedDate));
  }
  assertThat(doc.get(docMapper.mappers().getMapper("file.title").names().indexName()),equalTo("Hello"));
  assertThat(doc.get(docMapper.mappers().getMapper("file.author").names().indexName()),equalTo("kimchy"));
  assertThat(doc.get(docMapper.mappers().getMapper("file.keywords").names().indexName()),equalTo("elasticsearch,cool,bonsai"));
  assertThat(doc.get(docMapper.mappers().getMapper("file.content_type").names().indexName()),equalTo("text/html; charset=ISO-8859-1"));
  assertThat(doc.getField(docMapper.mappers().getMapper("file.content_length").names().indexName()).numericValue().longValue(),is(expectedLength));
}
