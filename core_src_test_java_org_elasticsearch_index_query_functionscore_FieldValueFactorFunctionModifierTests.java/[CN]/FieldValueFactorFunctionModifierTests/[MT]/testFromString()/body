{
  assertThat(FieldValueFactorFunction.Modifier.fromString("none"),equalTo(FieldValueFactorFunction.Modifier.NONE));
  assertThat(FieldValueFactorFunction.Modifier.fromString("log"),equalTo(FieldValueFactorFunction.Modifier.LOG));
  assertThat(FieldValueFactorFunction.Modifier.fromString("log1p"),equalTo(FieldValueFactorFunction.Modifier.LOG1P));
  assertThat(FieldValueFactorFunction.Modifier.fromString("log2p"),equalTo(FieldValueFactorFunction.Modifier.LOG2P));
  assertThat(FieldValueFactorFunction.Modifier.fromString("ln"),equalTo(FieldValueFactorFunction.Modifier.LN));
  assertThat(FieldValueFactorFunction.Modifier.fromString("ln1p"),equalTo(FieldValueFactorFunction.Modifier.LN1P));
  assertThat(FieldValueFactorFunction.Modifier.fromString("ln2p"),equalTo(FieldValueFactorFunction.Modifier.LN2P));
  assertThat(FieldValueFactorFunction.Modifier.fromString("square"),equalTo(FieldValueFactorFunction.Modifier.SQUARE));
  assertThat(FieldValueFactorFunction.Modifier.fromString("sqrt"),equalTo(FieldValueFactorFunction.Modifier.SQRT));
  assertThat(FieldValueFactorFunction.Modifier.fromString("reciprocal"),equalTo(FieldValueFactorFunction.Modifier.RECIPROCAL));
}
