{
  try (BytesStreamOutput out=new BytesStreamOutput()){
    FieldValueFactorFunction.Modifier.NONE.writeTo(out);
    try (StreamInput in=out.bytes().streamInput()){
      assertThat(in.readVInt(),equalTo(0));
    }
   }
   try (BytesStreamOutput out=new BytesStreamOutput()){
    FieldValueFactorFunction.Modifier.LOG.writeTo(out);
    try (StreamInput in=out.bytes().streamInput()){
      assertThat(in.readVInt(),equalTo(1));
    }
   }
   try (BytesStreamOutput out=new BytesStreamOutput()){
    FieldValueFactorFunction.Modifier.LOG1P.writeTo(out);
    try (StreamInput in=out.bytes().streamInput()){
      assertThat(in.readVInt(),equalTo(2));
    }
   }
   try (BytesStreamOutput out=new BytesStreamOutput()){
    FieldValueFactorFunction.Modifier.LOG2P.writeTo(out);
    try (StreamInput in=out.bytes().streamInput()){
      assertThat(in.readVInt(),equalTo(3));
    }
   }
   try (BytesStreamOutput out=new BytesStreamOutput()){
    FieldValueFactorFunction.Modifier.LN.writeTo(out);
    try (StreamInput in=out.bytes().streamInput()){
      assertThat(in.readVInt(),equalTo(4));
    }
   }
   try (BytesStreamOutput out=new BytesStreamOutput()){
    FieldValueFactorFunction.Modifier.LN1P.writeTo(out);
    try (StreamInput in=out.bytes().streamInput()){
      assertThat(in.readVInt(),equalTo(5));
    }
   }
   try (BytesStreamOutput out=new BytesStreamOutput()){
    FieldValueFactorFunction.Modifier.LN2P.writeTo(out);
    try (StreamInput in=out.bytes().streamInput()){
      assertThat(in.readVInt(),equalTo(6));
    }
   }
   try (BytesStreamOutput out=new BytesStreamOutput()){
    FieldValueFactorFunction.Modifier.SQUARE.writeTo(out);
    try (StreamInput in=out.bytes().streamInput()){
      assertThat(in.readVInt(),equalTo(7));
    }
   }
   try (BytesStreamOutput out=new BytesStreamOutput()){
    FieldValueFactorFunction.Modifier.SQRT.writeTo(out);
    try (StreamInput in=out.bytes().streamInput()){
      assertThat(in.readVInt(),equalTo(8));
    }
   }
   try (BytesStreamOutput out=new BytesStreamOutput()){
    FieldValueFactorFunction.Modifier.RECIPROCAL.writeTo(out);
    try (StreamInput in=out.bytes().streamInput()){
      assertThat(in.readVInt(),equalTo(9));
    }
   }
 }
