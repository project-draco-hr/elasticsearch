{
  final Searcher searcher=searcherFactory.apply("get");
  final Versions.DocIdAndVersion docIdAndVersion;
  try {
    docIdAndVersion=Versions.loadDocIdAndVersion(searcher.reader(),get.uid());
  }
 catch (  Throwable e) {
    Releasables.closeWhileHandlingException(searcher);
    throw new EngineException(shardId,"Couldn't resolve version",e);
  }
  if (docIdAndVersion != null) {
    if (get.versionType().isVersionConflictForReads(docIdAndVersion.version,get.version())) {
      Releasables.close(searcher);
      Uid uid=Uid.createUid(get.uid().text());
      throw new VersionConflictEngineException(shardId,uid.type(),uid.id(),get.versionType().explainConflictForReads(docIdAndVersion.version,get.version()));
    }
  }
  if (docIdAndVersion != null) {
    return new GetResult(searcher,docIdAndVersion);
  }
 else {
    Releasables.close(searcher);
    return GetResult.NOT_EXISTS;
  }
}
