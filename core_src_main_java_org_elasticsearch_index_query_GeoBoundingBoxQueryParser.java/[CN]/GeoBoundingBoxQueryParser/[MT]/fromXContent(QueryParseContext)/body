{
  XContentParser parser=parseContext.parser();
  String fieldName=null;
  double top=Double.NaN;
  double bottom=Double.NaN;
  double left=Double.NaN;
  double right=Double.NaN;
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  String queryName=null;
  String currentFieldName=null;
  XContentParser.Token token;
  boolean coerce=GeoBoundingBoxQueryBuilder.DEFAULT_COERCE;
  boolean ignoreMalformed=GeoBoundingBoxQueryBuilder.DEFAULT_IGNORE_MALFORMED;
  GeoPoint sparse=new GeoPoint();
  String type="memory";
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      fieldName=currentFieldName;
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          currentFieldName=parser.currentName();
          token=parser.nextToken();
          if (parseContext.isDeprecatedSetting(currentFieldName)) {
          }
 else           if (FIELD.equals(currentFieldName)) {
            fieldName=parser.text();
          }
 else           if (TOP.equals(currentFieldName)) {
            top=parser.doubleValue();
          }
 else           if (BOTTOM.equals(currentFieldName)) {
            bottom=parser.doubleValue();
          }
 else           if (LEFT.equals(currentFieldName)) {
            left=parser.doubleValue();
          }
 else           if (RIGHT.equals(currentFieldName)) {
            right=parser.doubleValue();
          }
 else {
            if (TOP_LEFT.equals(currentFieldName) || TOPLEFT.equals(currentFieldName)) {
              GeoUtils.parseGeoPoint(parser,sparse);
              top=sparse.getLat();
              left=sparse.getLon();
            }
 else             if (BOTTOM_RIGHT.equals(currentFieldName) || BOTTOMRIGHT.equals(currentFieldName)) {
              GeoUtils.parseGeoPoint(parser,sparse);
              bottom=sparse.getLat();
              right=sparse.getLon();
            }
 else             if (TOP_RIGHT.equals(currentFieldName) || TOPRIGHT.equals(currentFieldName)) {
              GeoUtils.parseGeoPoint(parser,sparse);
              top=sparse.getLat();
              right=sparse.getLon();
            }
 else             if (BOTTOM_LEFT.equals(currentFieldName) || BOTTOMLEFT.equals(currentFieldName)) {
              GeoUtils.parseGeoPoint(parser,sparse);
              bottom=sparse.getLat();
              left=sparse.getLon();
            }
 else {
              throw new ElasticsearchParseException("failed to parse [{}] query. unexpected field [{}]",NAME,currentFieldName);
            }
          }
        }
 else {
          throw new ElasticsearchParseException("failed to parse [{}] query. field name expected but [{}] found",NAME,token);
        }
      }
    }
 else     if (token.isValue()) {
      if ("_name".equals(currentFieldName)) {
        queryName=parser.text();
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=parser.floatValue();
      }
 else       if ("coerce".equals(currentFieldName) || ("normalize".equals(currentFieldName))) {
        coerce=parser.booleanValue();
        if (coerce) {
          ignoreMalformed=true;
        }
      }
 else       if ("type".equals(currentFieldName)) {
        type=parser.text();
      }
 else       if ("ignore_malformed".equals(currentFieldName)) {
        ignoreMalformed=parser.booleanValue();
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"failed to parse [{}] query. unexpected field [{}]",NAME,currentFieldName);
      }
    }
  }
  final GeoPoint topLeft=sparse.reset(top,left);
  final GeoPoint bottomRight=new GeoPoint(bottom,right);
  GeoBoundingBoxQueryBuilder builder=new GeoBoundingBoxQueryBuilder(fieldName);
  builder.setCorners(topLeft,bottomRight);
  builder.queryName(queryName);
  builder.boost(boost);
  builder.type(GeoExecType.fromString(type));
  builder.coerce(coerce);
  builder.ignoreMalformed(ignoreMalformed);
  return builder;
}
