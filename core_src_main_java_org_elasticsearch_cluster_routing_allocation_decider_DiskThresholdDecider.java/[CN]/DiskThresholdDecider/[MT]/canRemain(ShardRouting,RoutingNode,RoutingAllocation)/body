{
  if (shardRouting.currentNodeId().equals(node.nodeId()) == false) {
    throw new IllegalArgumentException("Shard [" + shardRouting + "] is not allocated on node: ["+ node.nodeId()+ "]");
  }
  final Decision decision=earlyTerminate(allocation);
  if (decision != null) {
    return decision;
  }
  ClusterInfo clusterInfo=allocation.clusterInfo();
  Map<String,DiskUsage> usages=clusterInfo.getNodeLeastAvailableDiskUsages();
  DiskUsage usage=getDiskUsage(node,allocation,usages);
  double freeDiskPercentage=usage.getFreeDiskAsPercentage();
  long freeBytes=usage.getFreeBytes();
  if (logger.isDebugEnabled()) {
    logger.debug("node [{}] has {}% free disk ({} bytes)",node.nodeId(),freeDiskPercentage,freeBytes);
  }
  if (freeBytes < freeBytesThresholdHigh.bytes()) {
    if (logger.isDebugEnabled()) {
      logger.debug("less than the required {} free bytes threshold ({} bytes free) on node {}, shard cannot remain",freeBytesThresholdHigh,freeBytes,node.nodeId());
    }
    return allocation.decision(Decision.NO,NAME,"after allocation less than required [%s] free on node, free: [%s]",freeBytesThresholdHigh,new ByteSizeValue(freeBytes));
  }
  if (freeDiskPercentage < freeDiskThresholdHigh) {
    if (logger.isDebugEnabled()) {
      logger.debug("less than the required {}% free disk threshold ({}% free) on node {}, shard cannot remain",freeDiskThresholdHigh,freeDiskPercentage,node.nodeId());
    }
    return allocation.decision(Decision.NO,NAME,"after allocation less than required [%s%%] free disk on node, free: [%s%%]",freeDiskThresholdHigh,freeDiskPercentage);
  }
  return allocation.decision(Decision.YES,NAME,"enough disk for shard to remain on node, free: [%s]",new ByteSizeValue(freeBytes));
}
