{
  Map<String,DiskUsage> usages=info.getNodeDiskUsages();
  if (usages != null) {
    boolean reroute=false;
    String explanation="";
    Set<String> nodes=usages.keySet();
    for (    String node : nodeHasPassedWatermark) {
      if (nodes.contains(node) == false) {
        nodeHasPassedWatermark.remove(node);
      }
    }
    for (    Map.Entry<String,DiskUsage> entry : usages.entrySet()) {
      String node=entry.getKey();
      DiskUsage usage=entry.getValue();
      warnAboutDiskIfNeeded(usage);
      if (usage.getFreeBytes() < DiskThresholdDecider.this.freeBytesThresholdHigh.bytes() || usage.getFreeDiskAsPercentage() < DiskThresholdDecider.this.freeDiskThresholdHigh) {
        if ((System.nanoTime() - lastRunNS) > DiskThresholdDecider.this.rerouteInterval.nanos()) {
          lastRunNS=System.nanoTime();
          reroute=true;
          explanation="high disk watermark exceeded on one or more nodes";
        }
 else {
          logger.debug("high disk watermark exceeded on {} but an automatic reroute has occurred in the last [{}], skipping reroute",node,DiskThresholdDecider.this.rerouteInterval);
        }
        nodeHasPassedWatermark.add(node);
      }
 else       if (usage.getFreeBytes() < DiskThresholdDecider.this.freeBytesThresholdLow.bytes() || usage.getFreeDiskAsPercentage() < DiskThresholdDecider.this.freeDiskThresholdLow) {
        nodeHasPassedWatermark.add(node);
      }
 else {
        if (nodeHasPassedWatermark.contains(node)) {
          if ((System.nanoTime() - lastRunNS) > DiskThresholdDecider.this.rerouteInterval.nanos()) {
            lastRunNS=System.nanoTime();
            reroute=true;
            explanation="one or more nodes has gone under the high or low watermark";
            nodeHasPassedWatermark.remove(node);
          }
 else {
            logger.debug("{} has gone below a disk threshold, but an automatic reroute has occurred in the last [{}], skipping reroute",node,DiskThresholdDecider.this.rerouteInterval);
          }
        }
      }
    }
    if (reroute) {
      logger.info("rerouting shards: [{}]",explanation);
      client.admin().cluster().prepareReroute().execute();
    }
  }
}
