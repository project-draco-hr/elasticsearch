{
  assertTrue(Priority.IMMEDIATE.compareTo(Priority.URGENT) < 0);
  assertTrue(Priority.URGENT.compareTo(Priority.HIGH) < 0);
  assertTrue(Priority.HIGH.compareTo(Priority.NORMAL) < 0);
  assertTrue(Priority.NORMAL.compareTo(Priority.LOW) < 0);
  assertTrue(Priority.LOW.compareTo(Priority.LANGUID) < 0);
  assertTrue(Priority.URGENT.compareTo(Priority.IMMEDIATE) > 0);
  assertTrue(Priority.HIGH.compareTo(Priority.URGENT) > 0);
  assertTrue(Priority.NORMAL.compareTo(Priority.HIGH) > 0);
  assertTrue(Priority.LOW.compareTo(Priority.NORMAL) > 0);
  assertTrue(Priority.LANGUID.compareTo(Priority.LOW) > 0);
  for (  Priority p : Priority.values()) {
    assertEquals(0,p.compareTo(p));
  }
  List<Priority> shuffeledAndSorted=Arrays.asList(Priority.values());
  Collections.shuffle(shuffeledAndSorted,random());
  Collections.sort(shuffeledAndSorted);
  for (  List<Priority> priorities : Arrays.asList(shuffeledAndSorted,Arrays.asList(Priority.values()))) {
    assertSame(Priority.IMMEDIATE,priorities.get(0));
    assertSame(Priority.URGENT,priorities.get(1));
    assertSame(Priority.HIGH,priorities.get(2));
    assertSame(Priority.NORMAL,priorities.get(3));
    assertSame(Priority.LOW,priorities.get(4));
    assertSame(Priority.LANGUID,priorities.get(5));
  }
}
