{
  XContentParser parser=parseContext.parser();
  String fieldName=null;
  Object value=null;
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  String analyzer=null;
  int slop=MatchQuery.DEFAULT_PHRASE_SLOP;
  String queryName=null;
  String currentFieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (parseContext.isDeprecatedSetting(currentFieldName)) {
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if (fieldName != null) {
        throw new ParsingException(parser.getTokenLocation(),"[match_phrase] query doesn't support multiple fields, found [" + fieldName + "] and ["+ currentFieldName+ "]");
      }
      fieldName=currentFieldName;
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          currentFieldName=parser.currentName();
        }
 else         if (token.isValue()) {
          if (parseContext.getParseFieldMatcher().match(currentFieldName,MatchQueryBuilder.QUERY_FIELD)) {
            value=parser.objectText();
          }
 else           if (parseContext.getParseFieldMatcher().match(currentFieldName,MatchQueryBuilder.ANALYZER_FIELD)) {
            analyzer=parser.text();
          }
 else           if (parseContext.getParseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.BOOST_FIELD)) {
            boost=parser.floatValue();
          }
 else           if (parseContext.getParseFieldMatcher().match(currentFieldName,SLOP_FIELD)) {
            slop=parser.intValue();
          }
 else           if (parseContext.getParseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.NAME_FIELD)) {
            queryName=parser.text();
          }
 else {
            throw new ParsingException(parser.getTokenLocation(),"[" + NAME + "] query does not support ["+ currentFieldName+ "]");
          }
        }
 else {
          throw new ParsingException(parser.getTokenLocation(),"[" + NAME + "] unknown token ["+ token+ "] after ["+ currentFieldName+ "]");
        }
      }
    }
 else {
      if (fieldName != null) {
        throw new ParsingException(parser.getTokenLocation(),"[match_phrase] query doesn't support multiple fields, found [" + fieldName + "] and ["+ parser.currentName()+ "]");
      }
      fieldName=parser.currentName();
      value=parser.objectText();
    }
  }
  MatchPhraseQueryBuilder matchQuery=new MatchPhraseQueryBuilder(fieldName,value);
  matchQuery.analyzer(analyzer);
  matchQuery.slop(slop);
  matchQuery.queryName(queryName);
  matchQuery.boost(boost);
  return Optional.of(matchQuery);
}
