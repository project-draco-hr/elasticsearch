{
  int SEARCH_ITERS=200;
  Settings settings=settingsBuilder().put(SETTING_NUMBER_OF_SHARDS,1).put(SETTING_NUMBER_OF_REPLICAS,0).build();
  Node[] nodes=new Node[1];
  for (int i=0; i < nodes.length; i++) {
    nodes[i]=nodeBuilder().settings(settingsBuilder().put(settings).put("name","node" + i)).node();
  }
  Client client=nodes[0].client();
  try {
    client.admin().indices().prepareCreate("test").setSettings(settings).addMapping("type1",XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("_source").field("enabled",false).endObject().startObject("_all").field("enabled",false).endObject().startObject("_type").field("index","no").endObject().startObject("_id").field("index","no").endObject().startObject("properties").startObject("field").field("type","string").field("index","not_analyzed").field("omit_norms",true).endObject().endObject().endObject().endObject()).execute().actionGet();
    ClusterHealthResponse clusterHealthResponse=client.admin().cluster().prepareHealth("test").setWaitForGreenStatus().execute().actionGet();
    if (clusterHealthResponse.timedOut()) {
      System.err.println("--> Timed out waiting for cluster health");
    }
    StopWatch stopWatch=new StopWatch().start();
    long COUNT=SizeValue.parseSizeValue("10m").singles();
    int BATCH=100;
    System.out.println("Indexing [" + COUNT + "] ...");
    long ITERS=COUNT / BATCH;
    long i=1;
    char character='a';
    int idCounter=0;
    for (; i <= ITERS; i++) {
      int termCounter=0;
      BulkRequestBuilder request=client.prepareBulk();
      for (int j=0; j < BATCH; j++) {
        request.add(Requests.indexRequest("test").type("type1").id(Integer.toString(idCounter++)).source(source("prefix" + character + termCounter++)));
      }
      character++;
      BulkResponse response=request.execute().actionGet();
      if (response.hasFailures()) {
        System.err.println("failures...");
      }
    }
    System.out.println("Indexing took " + stopWatch.totalTime());
    client.admin().indices().prepareRefresh().execute().actionGet();
    System.out.println("Count: " + client.prepareCount().setQuery(matchAllQuery()).execute().actionGet().count());
  }
 catch (  Exception e) {
    System.out.println("--> Index already exists, ignoring indexing phase, waiting for green");
    ClusterHealthResponse clusterHealthResponse=client.admin().cluster().prepareHealth().setWaitForGreenStatus().setTimeout("10m").execute().actionGet();
    if (clusterHealthResponse.timedOut()) {
      System.err.println("--> Timed out waiting for cluster health");
    }
    client.admin().indices().prepareRefresh().execute().actionGet();
    System.out.println("Count: " + client.prepareCount().setQuery(matchAllQuery()).execute().actionGet().count());
  }
  System.out.println("Warming up...");
  char startChar='a';
  for (int i=0; i <= 20; i++) {
    String term="prefix" + startChar;
    SearchResponse response=client.prepareSearch().setQuery(prefixQuery("field",term)).addSuggestion(new SuggestBuilder.FuzzySuggestion("field").setField("field").setText(term).setSuggestMode("always")).execute().actionGet();
    if (response.hits().totalHits() == 0) {
      System.err.println("No hits");
      continue;
    }
    startChar++;
  }
  System.out.println("Starting benchmarking suggestions.");
  startChar='a';
  long timeTaken=0;
  for (int i=0; i <= SEARCH_ITERS; i++) {
    String term="prefix" + startChar;
    SearchResponse response=client.prepareSearch().setQuery(matchQuery("field",term)).addSuggestion(new SuggestBuilder.FuzzySuggestion("field").setText(term).setField("field").setSuggestMode("always")).execute().actionGet();
    timeTaken+=response.tookInMillis();
    if (response.suggest() == null) {
      System.err.println("No suggestions");
      continue;
    }
    List<Suggest.Suggestion.Entry.Option> options=response.suggest().getSuggestions().get(0).getEntries().get(0).getOptions();
    if (options == null || options.isEmpty()) {
      System.err.println("No suggestions");
    }
    startChar++;
  }
  System.out.println("Avg time taken without filter " + (timeTaken / SEARCH_ITERS));
  client.close();
  for (  Node node : nodes) {
    node.close();
  }
}
