{
  builder.startObject(Fields.JVM);
  builder.field(Fields.TIMESTAMP,timestamp);
  builder.timeValueField(Fields.UPTIME_IN_MILLIS,Fields.UPTIME,uptime);
  if (mem != null) {
    builder.startObject(Fields.MEM);
    builder.byteSizeField(Fields.HEAP_USED_IN_BYTES,Fields.HEAP_USED,mem.heapUsed);
    if (mem.heapUsedPercent() >= 0) {
      builder.field(Fields.HEAP_USED_PERCENT,mem.heapUsedPercent());
    }
    builder.byteSizeField(Fields.HEAP_COMMITTED_IN_BYTES,Fields.HEAP_COMMITTED,mem.heapCommitted);
    builder.byteSizeField(Fields.HEAP_MAX_IN_BYTES,Fields.HEAP_MAX,mem.heapMax);
    builder.byteSizeField(Fields.NON_HEAP_USED_IN_BYTES,Fields.NON_HEAP_USED,mem.nonHeapUsed);
    builder.byteSizeField(Fields.NON_HEAP_COMMITTED_IN_BYTES,Fields.NON_HEAP_COMMITTED,mem.nonHeapCommitted);
    builder.startObject(Fields.POOLS);
    for (    MemoryPool pool : mem) {
      builder.startObject(pool.name(),XContentBuilder.FieldCaseConversion.NONE);
      builder.byteSizeField(Fields.USED_IN_BYTES,Fields.USED,pool.used);
      builder.byteSizeField(Fields.MAX_IN_BYTES,Fields.MAX,pool.max);
      builder.byteSizeField(Fields.PEAK_USED_IN_BYTES,Fields.PEAK_USED,pool.peakUsed);
      builder.byteSizeField(Fields.PEAK_MAX_IN_BYTES,Fields.PEAK_MAX,pool.peakMax);
      builder.endObject();
    }
    builder.endObject();
    builder.endObject();
  }
  if (threads != null) {
    builder.startObject(Fields.THREADS);
    builder.field(Fields.COUNT,threads.count());
    builder.field(Fields.PEAK_COUNT,threads.peakCount());
    builder.endObject();
  }
  if (gc != null) {
    builder.startObject(Fields.GC);
    builder.field(Fields.COLLECTION_COUNT,gc.collectionCount());
    builder.timeValueField(Fields.COLLECTION_TIME_IN_MILLIS,Fields.COLLECTION_TIME,gc.collectionTime());
    builder.startObject(Fields.COLLECTORS);
    for (    GarbageCollector collector : gc) {
      builder.startObject(collector.name(),XContentBuilder.FieldCaseConversion.NONE);
      builder.field(Fields.COLLECTION_COUNT,collector.collectionCount());
      builder.timeValueField(Fields.COLLECTION_TIME_IN_MILLIS,Fields.COLLECTION_TIME,collector.collectionTime);
      builder.endObject();
    }
    builder.endObject();
    builder.endObject();
  }
  if (bufferPools != null) {
    builder.startObject(Fields.BUFFER_POOLS);
    for (    BufferPool bufferPool : bufferPools) {
      builder.startObject(bufferPool.name(),XContentBuilder.FieldCaseConversion.NONE);
      builder.field(Fields.COUNT,bufferPool.count());
      builder.byteSizeField(Fields.USED_IN_BYTES,Fields.USED,bufferPool.used);
      builder.byteSizeField(Fields.TOTAL_CAPACITY_IN_BYTES,Fields.TOTAL_CAPACITY,bufferPool.totalCapacity);
      builder.endObject();
    }
    builder.endObject();
  }
  builder.endObject();
  return builder;
}
