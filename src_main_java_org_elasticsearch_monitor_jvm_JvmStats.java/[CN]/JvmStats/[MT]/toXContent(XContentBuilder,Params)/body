{
  builder.startObject("jvm");
  builder.field("timestamp",timestamp);
  builder.field("uptime",uptime().format());
  builder.field("uptime_in_millis",uptime().millis());
  if (mem != null) {
    builder.startObject("mem");
    builder.field("heap_used",mem.heapUsed().toString());
    builder.field("heap_used_in_bytes",mem.heapUsed().bytes());
    builder.field("heap_committed",mem.heapCommitted().toString());
    builder.field("heap_committed_in_bytes",mem.heapCommitted().bytes());
    builder.field("non_heap_used",mem.nonHeapUsed().toString());
    builder.field("non_heap_used_in_bytes",mem.nonHeapUsed);
    builder.field("non_heap_committed",mem.nonHeapCommitted().toString());
    builder.field("non_heap_committed_in_bytes",mem.nonHeapCommitted);
    builder.startObject("pools");
    for (    MemoryPool pool : mem) {
      builder.startObject(pool.name());
      builder.field("used",pool.used().toString());
      builder.field("used_in_bytes",pool.used);
      builder.field("max",pool.max().toString());
      builder.field("max_in_bytes",pool.max);
      builder.field("peak_used",pool.peakUsed().toString());
      builder.field("peak_used_in_bytes",pool.peakUsed);
      builder.field("peak_max",pool.peakMax().toString());
      builder.field("peak_max_in_bytes",pool.peakMax);
      builder.endObject();
    }
    builder.endObject();
    builder.endObject();
  }
  if (threads != null) {
    builder.startObject("threads");
    builder.field("count",threads.count());
    builder.field("peak_count",threads.peakCount());
    builder.endObject();
  }
  if (gc != null) {
    builder.startObject("gc");
    builder.field("collection_count",gc.collectionCount());
    builder.field("collection_time",gc.collectionTime().format());
    builder.field("collection_time_in_millis",gc.collectionTime().millis());
    builder.startObject("collectors");
    for (    GarbageCollector collector : gc) {
      builder.startObject(collector.name());
      builder.field("collection_count",collector.collectionCount());
      builder.field("collection_time",collector.collectionTime().format());
      builder.field("collection_time_in_millis",collector.collectionTime().millis());
      builder.endObject();
    }
    builder.endObject();
    builder.endObject();
  }
  builder.endObject();
  return builder;
}
