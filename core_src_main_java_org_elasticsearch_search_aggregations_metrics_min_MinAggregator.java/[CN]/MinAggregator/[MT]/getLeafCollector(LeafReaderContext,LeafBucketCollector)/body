{
  if (valuesSource == null) {
    return LeafBucketCollector.NO_OP_COLLECTOR;
  }
  final BigArrays bigArrays=context.bigArrays();
  final SortedNumericDoubleValues allValues=valuesSource.doubleValues(ctx);
  final NumericDoubleValues values=MultiValueMode.MIN.select(allValues,Double.POSITIVE_INFINITY);
  return new LeafBucketCollectorBase(sub,allValues){
    @Override public void collect(    int doc,    long bucket) throws IOException {
      if (bucket >= mins.size()) {
        long from=mins.size();
        mins=bigArrays.grow(mins,bucket + 1);
        mins.fill(from,mins.size(),Double.POSITIVE_INFINITY);
      }
      final double value=values.get(doc);
      double min=mins.get(bucket);
      min=Math.min(min,value);
      mins.set(bucket,min);
    }
  }
;
}
