{
  for (  BytesRef missingValue : new BytesRef[]{new BytesRef(),new BytesRef(RandomStrings.randomAsciiOfLength(getRandom(),8))}) {
    for (    MultiValueMode mode : new MultiValueMode[]{MultiValueMode.MIN,MultiValueMode.MAX}) {
      final BinaryDocValues selected=mode.select(values,missingValue,rootDocs,new BitDocIdSet(innerDocs),maxDoc);
      int prevRoot=-1;
      for (int root=rootDocs.nextSetBit(0); root != -1; root=root + 1 < maxDoc ? rootDocs.nextSetBit(root + 1) : -1) {
        final BytesRef actual=selected.get(root);
        BytesRef expected=null;
        for (int child=innerDocs.nextSetBit(prevRoot + 1); child != -1 && child < root; child=innerDocs.nextSetBit(child + 1)) {
          values.setDocument(child);
          for (int j=0; j < values.count(); ++j) {
            if (expected == null) {
              expected=BytesRef.deepCopyOf(values.valueAt(j));
            }
 else {
              if (mode == MultiValueMode.MIN) {
                expected=expected.compareTo(values.valueAt(j)) <= 0 ? expected : BytesRef.deepCopyOf(values.valueAt(j));
              }
 else               if (mode == MultiValueMode.MAX) {
                expected=expected.compareTo(values.valueAt(j)) > 0 ? expected : BytesRef.deepCopyOf(values.valueAt(j));
              }
            }
          }
        }
        if (expected == null) {
          expected=missingValue;
        }
        assertEquals(mode.toString() + " docId=" + root,expected,actual);
        prevRoot=root;
      }
    }
  }
}
