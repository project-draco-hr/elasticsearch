{
  final int numDocs=scaledRandomIntBetween(1,100);
  final long[][] array=new long[numDocs][];
  for (int i=0; i < numDocs; ++i) {
    final long[] values=new long[randomInt(4)];
    for (int j=0; j < values.length; ++j) {
      values[j]=j == 0 ? randomInt(1000) : values[j - 1] + 1 + randomInt(1000);
    }
    array[i]=values;
  }
  final RandomAccessOrds multiValues=new RandomAccessOrds(){
    int doc;
    @Override public long ordAt(    int index){
      return array[doc][index];
    }
    @Override public int cardinality(){
      return array[doc].length;
    }
    @Override public long nextOrd(){
      throw new UnsupportedOperationException();
    }
    @Override public void setDocument(    int docID){
      this.doc=docID;
    }
    @Override public BytesRef lookupOrd(    long ord){
      throw new UnsupportedOperationException();
    }
    @Override public long getValueCount(){
      return 1 << 20;
    }
  }
;
  verify(multiValues,numDocs);
  final FixedBitSet rootDocs=randomRootDocs(numDocs);
  final FixedBitSet innerDocs=randomInnerDocs(rootDocs);
  verify(multiValues,numDocs,rootDocs,innerDocs);
}
