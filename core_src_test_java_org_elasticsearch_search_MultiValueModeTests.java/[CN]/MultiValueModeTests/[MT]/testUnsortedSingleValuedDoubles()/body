{
  final int numDocs=scaledRandomIntBetween(1,100);
  final double[] array=new double[numDocs];
  final FixedBitSet docsWithValue=randomBoolean() ? null : new FixedBitSet(numDocs);
  for (int i=0; i < array.length; ++i) {
    if (randomBoolean()) {
      array[i]=randomDouble();
      if (docsWithValue != null) {
        docsWithValue.set(i);
      }
    }
 else     if (docsWithValue != null && randomBoolean()) {
      docsWithValue.set(i);
    }
  }
  final NumericDoubleValues singleValues=new NumericDoubleValues(){
    @Override public double get(    int docID){
      return array[docID];
    }
  }
;
  final SortedNumericDoubleValues singletonValues=FieldData.singleton(singleValues,docsWithValue);
  final MultiValueMode.UnsortedNumericDoubleValues multiValues=new MultiValueMode.UnsortedNumericDoubleValues(){
    int doc;
    @Override public int count(){
      return singletonValues.count();
    }
    @Override public void setDocument(    int doc){
      singletonValues.setDocument(doc);
    }
    @Override public double valueAt(    int index){
      return Math.cos(singletonValues.valueAt(index));
    }
  }
;
  verify(multiValues,numDocs);
}
