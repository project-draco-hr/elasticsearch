{
  for (  long missingValue : new long[]{0,randomLong()}) {
    for (    MultiValueMode mode : new MultiValueMode[]{MultiValueMode.MIN,MultiValueMode.MAX,MultiValueMode.SUM,MultiValueMode.AVG}) {
      final NumericDoubleValues selected=mode.select(values,missingValue,rootDocs,new BitSetIterator(innerDocs,0L),maxDoc);
      int prevRoot=-1;
      for (int root=rootDocs.nextSetBit(0); root != -1; root=root + 1 < maxDoc ? rootDocs.nextSetBit(root + 1) : -1) {
        final double actual=selected.get(root);
        double expected=0.0;
        if (mode == MultiValueMode.MAX) {
          expected=Long.MIN_VALUE;
        }
 else         if (mode == MultiValueMode.MIN) {
          expected=Long.MAX_VALUE;
        }
        int numValues=0;
        for (int child=innerDocs.nextSetBit(prevRoot + 1); child != -1 && child < root; child=innerDocs.nextSetBit(child + 1)) {
          values.setDocument(child);
          for (int j=0; j < values.count(); ++j) {
            if (mode == MultiValueMode.SUM || mode == MultiValueMode.AVG) {
              expected+=values.valueAt(j);
            }
 else             if (mode == MultiValueMode.MIN) {
              expected=Math.min(expected,values.valueAt(j));
            }
 else             if (mode == MultiValueMode.MAX) {
              expected=Math.max(expected,values.valueAt(j));
            }
            ++numValues;
          }
        }
        if (numValues == 0) {
          expected=missingValue;
        }
 else         if (mode == MultiValueMode.AVG) {
          expected=expected / numValues;
        }
        assertEquals(mode.toString() + " docId=" + root,expected,actual,0.1);
        prevRoot=root;
      }
    }
  }
}
