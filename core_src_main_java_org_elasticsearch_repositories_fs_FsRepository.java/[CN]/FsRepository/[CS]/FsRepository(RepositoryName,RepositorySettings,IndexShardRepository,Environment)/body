{
  super(name.getName(),repositorySettings,indexShardRepository);
  Path locationFile;
  String location=repositorySettings.settings().get("location",settings.get("repositories.fs.location"));
  if (location == null) {
    logger.warn("the repository location is missing, it should point to a shared file system location that is available on all master and data nodes");
    throw new RepositoryException(name.name(),"missing location");
  }
  locationFile=environment.resolveRepoFile(location);
  if (locationFile == null) {
    if (environment.repoFiles().length > 0) {
      logger.warn("The specified location [{}] doesn't start with any repository paths specified by the path.repo setting: [{}] ",location,environment.repoFiles());
      throw new RepositoryException(name.name(),"location [" + location + "] doesn't match any of the locations specified by path.repo");
    }
 else {
      logger.warn("The specified location [{}] should start with a repository path specified by the path.repo setting, but the path.repo setting was not set on this node",location);
      throw new RepositoryException(name.name(),"location [" + location + "] doesn't match any of the locations specified by path.repo because this setting is empty");
    }
  }
  blobStore=new FsBlobStore(settings,locationFile);
  this.chunkSize=repositorySettings.settings().getAsBytesSize("chunk_size",settings.getAsBytesSize("repositories.fs.chunk_size",null));
  this.compress=repositorySettings.settings().getAsBoolean("compress",settings.getAsBoolean("repositories.fs.compress",false));
  this.basePath=BlobPath.cleanPath();
}
