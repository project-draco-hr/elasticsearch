{
  super(metadata,environment.settings());
  String location=REPOSITORIES_LOCATION_SETTING.get(metadata.settings());
  if (location.isEmpty()) {
    logger.warn("the repository location is missing, it should point to a shared file system location that is available on all master and data nodes");
    throw new RepositoryException(metadata.name(),"missing location");
  }
  Path locationFile=environment.resolveRepoFile(location);
  if (locationFile == null) {
    if (environment.repoFiles().length > 0) {
      logger.warn("The specified location [{}] doesn't start with any repository paths specified by the path.repo setting: [{}] ",location,environment.repoFiles());
      throw new RepositoryException(metadata.name(),"location [" + location + "] doesn't match any of the locations specified by path.repo");
    }
 else {
      logger.warn("The specified location [{}] should start with a repository path specified by the path.repo setting, but the path.repo setting was not set on this node",location);
      throw new RepositoryException(metadata.name(),"location [" + location + "] doesn't match any of the locations specified by path.repo because this setting is empty");
    }
  }
  blobStore=new FsBlobStore(settings,locationFile);
  if (CHUNK_SIZE_SETTING.exists(metadata.settings())) {
    this.chunkSize=CHUNK_SIZE_SETTING.get(metadata.settings());
  }
 else   if (REPOSITORIES_CHUNK_SIZE_SETTING.exists(settings)) {
    this.chunkSize=REPOSITORIES_CHUNK_SIZE_SETTING.get(settings);
  }
 else {
    this.chunkSize=null;
  }
  this.compress=COMPRESS_SETTING.exists(metadata.settings()) ? COMPRESS_SETTING.get(metadata.settings()) : REPOSITORIES_COMPRESS_SETTING.get(settings);
  this.basePath=BlobPath.cleanPath();
}
