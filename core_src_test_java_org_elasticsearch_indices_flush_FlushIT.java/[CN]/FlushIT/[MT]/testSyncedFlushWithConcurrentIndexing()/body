{
  internalCluster().ensureAtLeastNumDataNodes(3);
  createIndex("test");
  client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put(IndexSettings.INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING.getKey(),new ByteSizeValue(1,ByteSizeUnit.PB)).put("index.refresh_interval",-1).put("index.number_of_replicas",internalCluster().numDataNodes() - 1)).get();
  ensureGreen();
  final AtomicBoolean stop=new AtomicBoolean(false);
  final AtomicInteger numDocs=new AtomicInteger(0);
  Thread indexingThread=new Thread(){
    @Override public void run(){
      while (stop.get() == false) {
        client().prepareIndex().setIndex("test").setType("doc").setSource("{}").get();
        numDocs.incrementAndGet();
      }
    }
  }
;
  indexingThread.start();
  IndexStats indexStats=client().admin().indices().prepareStats("test").get().getIndex("test");
  for (  ShardStats shardStats : indexStats.getShards()) {
    assertNull(shardStats.getCommitStats().getUserData().get(Engine.SYNC_COMMIT_ID));
  }
  logger.info("--> trying sync flush");
  SyncedFlushResponse syncedFlushResult=client().admin().indices().prepareSyncedFlush("test").get();
  logger.info("--> sync flush done");
  stop.set(true);
  indexingThread.join();
  indexStats=client().admin().indices().prepareStats("test").get().getIndex("test");
  assertFlushResponseEqualsShardStats(indexStats.getShards(),syncedFlushResult.getShardsResultPerIndex().get("test"));
  refresh();
  assertThat(client().prepareSearch().setSize(0).get().getHits().totalHits(),equalTo((long)numDocs.get()));
  logger.info("indexed {} docs",client().prepareSearch().setSize(0).get().getHits().totalHits());
  logClusterState();
  internalCluster().fullRestart();
  ensureGreen();
  assertThat(client().prepareSearch().setSize(0).get().getHits().totalHits(),equalTo((long)numDocs.get()));
}
