{
  logger.info("--> cleaning nodes");
  buildNode("node1",settingsBuilder().put("gateway.type","local"));
  cleanAndCloseNodes();
  logger.info("--> starting 1 nodes");
  startNode("node1",settingsBuilder().put("gateway.type","local"));
  Client client=client("node1");
  client.admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards",1)).execute().actionGet();
  logger.info("--> register a query");
  client.prepareIndex("_percolator","test","kuku").setSource(jsonBuilder().startObject().field("color","blue").field("query",termQuery("field1","value1")).endObject()).setRefresh(true).execute().actionGet();
  PercolateResponse percolate=client.preparePercolate("test","type1").setSource(jsonBuilder().startObject().startObject("doc").field("field1","value1").endObject().endObject()).execute().actionGet();
  assertThat(percolate.getMatches().size(),equalTo(1));
  client.close();
  closeNode("node1");
  startNode("node1",settingsBuilder().put("gateway.type","local").build());
  client=client("node1");
  logger.info("Running Cluster Health (wait for the shards to startup)");
  ClusterHealthResponse clusterHealth=client("node1").admin().cluster().health(clusterHealthRequest().setWaitForYellowStatus().setWaitForActiveShards(1)).actionGet();
  logger.info("Done Cluster Health, status " + clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.YELLOW));
  percolate=client.preparePercolate("test","type1").setSource(jsonBuilder().startObject().startObject("doc").field("field1","value1").endObject().endObject()).execute().actionGet();
  assertThat(percolate.getMatches().size(),equalTo(1));
}
