{
  if (readOnly()) {
    throw new RepositoryException(this.repositoryName,"cannot delete snapshot from a readonly repository");
  }
  List<String> indices=Collections.emptyList();
  SnapshotInfo snapshot=null;
  try {
    snapshot=readSnapshot(snapshotId);
    indices=snapshot.indices();
  }
 catch (  SnapshotMissingException ex) {
    throw ex;
  }
catch (  IllegalStateException|SnapshotException|ElasticsearchParseException ex) {
    logger.warn("cannot read snapshot file [{}]",ex,snapshotId);
  }
  MetaData metaData=null;
  try {
    if (snapshot != null) {
      metaData=readSnapshotMetaData(snapshotId,snapshot.version(),indices,true);
    }
 else {
      metaData=readSnapshotMetaData(snapshotId,null,indices,true);
    }
  }
 catch (  IOException|SnapshotException ex) {
    logger.warn("cannot read metadata for snapshot [{}]",ex,snapshotId);
  }
  try {
    if (snapshot != null) {
      snapshotFormat(snapshot.version()).delete(snapshotsBlobContainer,snapshotId.getSnapshot());
      globalMetaDataFormat(snapshot.version()).delete(snapshotsBlobContainer,snapshotId.getSnapshot());
    }
 else {
      snapshotFormat.delete(snapshotsBlobContainer,snapshotId.getSnapshot());
      snapshotLegacyFormat.delete(snapshotsBlobContainer,snapshotId.getSnapshot());
      globalMetaDataLegacyFormat.delete(snapshotsBlobContainer,snapshotId.getSnapshot());
      globalMetaDataFormat.delete(snapshotsBlobContainer,snapshotId.getSnapshot());
    }
    List<SnapshotId> snapshotIds=snapshots();
    if (snapshotIds.contains(snapshotId)) {
      List<SnapshotId> builder=new ArrayList<>();
      for (      SnapshotId id : snapshotIds) {
        if (!snapshotId.equals(id)) {
          builder.add(id);
        }
      }
      snapshotIds=Collections.unmodifiableList(builder);
    }
    writeSnapshotList(snapshotIds);
    for (    String index : indices) {
      BlobPath indexPath=basePath().add("indices").add(index);
      BlobContainer indexMetaDataBlobContainer=blobStore().blobContainer(indexPath);
      try {
        indexMetaDataFormat(snapshot.version()).delete(indexMetaDataBlobContainer,snapshotId.getSnapshot());
      }
 catch (      IOException ex) {
        logger.warn("[{}] failed to delete metadata for index [{}]",ex,snapshotId,index);
      }
      if (metaData != null) {
        IndexMetaData indexMetaData=metaData.index(index);
        if (indexMetaData != null) {
          for (int shardId=0; shardId < indexMetaData.getNumberOfShards(); shardId++) {
            try {
              indexShardRepository.delete(snapshotId,snapshot.version(),new ShardId(indexMetaData.getIndex(),shardId));
            }
 catch (            SnapshotException ex) {
              logger.warn("[{}] failed to delete shard data for shard [{}][{}]",ex,snapshotId,index,shardId);
            }
          }
        }
      }
    }
  }
 catch (  IOException ex) {
    throw new RepositoryException(this.repositoryName,"failed to update snapshot in repository",ex);
  }
}
