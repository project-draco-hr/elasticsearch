{
  final Map<IndexId,Set<SnapshotId>> indexToSnapshots=new HashMap<>();
  for (  final SnapshotId snapshotId : repositoryData.getSnapshotIds()) {
    final SnapshotInfo snapshotInfo;
    try {
      snapshotInfo=getSnapshotInfo(snapshotId);
    }
 catch (    SnapshotException e) {
      logger.warn("[{}] repository is on a pre-5.0 format with an index file that contains snapshot [{}] but " + "the corresponding snap-{}.dat file cannot be read. The snapshot will no longer be included in " + "the repository but its data directories will remain.",e,getMetadata().name(),snapshotId,snapshotId.getUUID());
      continue;
    }
    for (    final String indexName : snapshotInfo.indices()) {
      final IndexId indexId=new IndexId(indexName,indexName);
      if (indexToSnapshots.containsKey(indexId)) {
        indexToSnapshots.get(indexId).add(snapshotId);
      }
 else {
        indexToSnapshots.put(indexId,Sets.newHashSet(snapshotId));
      }
    }
  }
  try {
    final RepositoryData updatedRepoData=repositoryData.initIndices(indexToSnapshots);
    if (isReadOnly() == false) {
      writeIndexGen(updatedRepoData);
    }
    return updatedRepoData;
  }
 catch (  IOException e) {
    throw new RepositoryException(metadata.name(),"failed to update the repository index blob with indices data on startup",e);
  }
}
