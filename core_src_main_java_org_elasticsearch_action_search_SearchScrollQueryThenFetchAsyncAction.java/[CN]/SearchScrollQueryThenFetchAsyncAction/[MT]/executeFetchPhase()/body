{
  sortedShardDocs=searchPhaseController.sortDocs(true,queryResults);
  AtomicArray<IntArrayList> docIdsToLoad=new AtomicArray<>(queryResults.length());
  searchPhaseController.fillDocIdsToLoad(docIdsToLoad,sortedShardDocs);
  if (docIdsToLoad.asList().isEmpty()) {
    finishHim();
    return;
  }
  final ScoreDoc[] lastEmittedDocPerShard=searchPhaseController.getLastEmittedDocPerShard(queryResults.asList(),sortedShardDocs,queryResults.length());
  final AtomicInteger counter=new AtomicInteger(docIdsToLoad.asList().size());
  for (  final AtomicArray.Entry<IntArrayList> entry : docIdsToLoad.asList()) {
    IntArrayList docIds=entry.value;
    final QuerySearchResult querySearchResult=queryResults.get(entry.index);
    ScoreDoc lastEmittedDoc=lastEmittedDocPerShard[entry.index];
    ShardFetchRequest shardFetchRequest=new ShardFetchRequest(querySearchResult.id(),docIds,lastEmittedDoc);
    DiscoveryNode node=nodes.get(querySearchResult.shardTarget().nodeId());
    searchTransportService.sendExecuteFetchScroll(node,shardFetchRequest,new ActionListener<FetchSearchResult>(){
      @Override public void onResponse(      FetchSearchResult result){
        result.shardTarget(querySearchResult.shardTarget());
        fetchResults.set(entry.index,result);
        if (counter.decrementAndGet() == 0) {
          finishHim();
        }
      }
      @Override public void onFailure(      Exception t){
        if (logger.isDebugEnabled()) {
          logger.debug("Failed to execute fetch phase",t);
        }
        successfulOps.decrementAndGet();
        if (counter.decrementAndGet() == 0) {
          finishHim();
        }
      }
    }
);
  }
}
