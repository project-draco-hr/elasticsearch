{
  Random random=getRandom();
  for (int i=0; i < 1000; i++) {
    Document d=new Document();
    d.add(new StringField("id","" + i,Field.Store.NO));
    if (i % 100 == 0) {
      d.add(new StringField("high_freq","100",Field.Store.NO));
      d.add(new StringField("low_freq","100",Field.Store.NO));
      d.add(new StringField("med_freq","100",Field.Store.NO));
    }
    if (i % 10 == 0) {
      d.add(new StringField("high_freq","10",Field.Store.NO));
      d.add(new StringField("med_freq","10",Field.Store.NO));
    }
    if (i % 5 == 0) {
      d.add(new StringField("high_freq","5",Field.Store.NO));
    }
    writer.addDocument(d);
  }
  writer.forceMerge(1,true);
  AtomicReaderContext context=refreshReader();
  String[] formats=new String[]{"fst","paged_bytes"};
  for (  String format : formats) {
{
      ifdService.clear();
      FieldDataType fieldDataType=new FieldDataType("string",ImmutableSettings.builder().put("format",format).put("filter.frequency.min_segment_size",100).put("filter.frequency.min",0.0d).put("filter.frequency.max",random.nextBoolean() ? 100 : 0.5d));
      IndexFieldData<?> fieldData=getForField(fieldDataType,"high_freq");
      AtomicFieldData.WithOrdinals<ScriptDocValues.Strings> loadDirect=(WithOrdinals<Strings>)fieldData.loadDirect(context);
      BytesValues.WithOrdinals bytesValues=loadDirect.getBytesValues();
      assertThat(2L,equalTo(bytesValues.getMaxOrd()));
      assertThat(bytesValues.getValueByOrd(0).utf8ToString(),equalTo("10"));
      assertThat(bytesValues.getValueByOrd(1).utf8ToString(),equalTo("100"));
    }
{
      ifdService.clear();
      FieldDataType fieldDataType=new FieldDataType("string",ImmutableSettings.builder().put("format",format).put("filter.frequency.min_segment_size",100).put("filter.frequency.min",random.nextBoolean() ? 101 : 101d / 200.0d).put("filter.frequency.max",201));
      IndexFieldData<?> fieldData=getForField(fieldDataType,"high_freq");
      AtomicFieldData.WithOrdinals<ScriptDocValues.Strings> loadDirect=(WithOrdinals<Strings>)fieldData.loadDirect(context);
      BytesValues.WithOrdinals bytesValues=loadDirect.getBytesValues();
      assertThat(1L,equalTo(bytesValues.getMaxOrd()));
      assertThat(bytesValues.getValueByOrd(0).utf8ToString(),equalTo("5"));
    }
{
      ifdService.clear();
      FieldDataType fieldDataType=new FieldDataType("string",ImmutableSettings.builder().put("format",format).put("filter.frequency.min_segment_size",101).put("filter.frequency.min",random.nextBoolean() ? 101 : 101d / 200.0d));
      IndexFieldData<?> fieldData=getForField(fieldDataType,"med_freq");
      AtomicFieldData.WithOrdinals<ScriptDocValues.Strings> loadDirect=(WithOrdinals<Strings>)fieldData.loadDirect(context);
      BytesValues.WithOrdinals bytesValues=loadDirect.getBytesValues();
      assertThat(2L,equalTo(bytesValues.getMaxOrd()));
      assertThat(bytesValues.getValueByOrd(0).utf8ToString(),equalTo("10"));
      assertThat(bytesValues.getValueByOrd(1).utf8ToString(),equalTo("100"));
    }
{
      ifdService.clear();
      FieldDataType fieldDataType=new FieldDataType("string",ImmutableSettings.builder().put("format",format).put("filter.frequency.min_segment_size",101).put("filter.frequency.min",random.nextBoolean() ? 101 : 101d / 200.0d));
      IndexFieldData<?> fieldData=getForField(fieldDataType,"med_freq");
      AtomicFieldData.WithOrdinals<ScriptDocValues.Strings> loadDirect=(WithOrdinals<Strings>)fieldData.loadDirect(context);
      BytesValues.WithOrdinals bytesValues=loadDirect.getBytesValues();
      assertThat(2L,equalTo(bytesValues.getMaxOrd()));
      assertThat(bytesValues.getValueByOrd(0).utf8ToString(),equalTo("10"));
      assertThat(bytesValues.getValueByOrd(1).utf8ToString(),equalTo("100"));
    }
{
      ifdService.clear();
      FieldDataType fieldDataType=new FieldDataType("string",ImmutableSettings.builder().put("format",format).put("filter.regex.pattern","\\d{2,3}").put("filter.frequency.min_segment_size",0).put("filter.frequency.min",random.nextBoolean() ? 1 : 1d / 200.0d).put("filter.frequency.max",random.nextBoolean() ? 99 : 99d / 200.0d));
      IndexFieldData<?> fieldData=getForField(fieldDataType,"high_freq");
      AtomicFieldData.WithOrdinals<ScriptDocValues.Strings> loadDirect=(WithOrdinals<Strings>)fieldData.loadDirect(context);
      BytesValues.WithOrdinals bytesValues=loadDirect.getBytesValues();
      assertThat(1L,equalTo(bytesValues.getMaxOrd()));
      assertThat(bytesValues.getValueByOrd(0).utf8ToString(),equalTo("100"));
    }
  }
}
