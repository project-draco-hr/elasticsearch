{
  int hundred=0;
  int ten=0;
  int five=0;
  for (int i=0; i < 1000; i++) {
    Document d=new Document();
    d.add(new StringField("id","" + i,Field.Store.NO));
    if (i % 100 == 0) {
      hundred++;
      d.add(new StringField("high_freq","100",Field.Store.NO));
    }
    if (i % 10 == 0) {
      ten++;
      d.add(new StringField("high_freq","10",Field.Store.NO));
    }
    if (i % 5 == 0) {
      five++;
      d.add(new StringField("high_freq","5",Field.Store.NO));
    }
    writer.addDocument(d);
  }
  logger.debug(hundred + " " + ten+ " "+ five);
  writer.forceMerge(1,true);
  AtomicReaderContext context=refreshReader();
  String[] formats=new String[]{"fst","paged_bytes"};
  for (  String format : formats) {
{
      ifdService.clear();
      FieldDataType fieldDataType=new FieldDataType("string",ImmutableSettings.builder().put("format",format).put("filter.regex.pattern","\\d"));
      IndexOrdinalsFieldData fieldData=getForField(fieldDataType,"high_freq");
      AtomicOrdinalsFieldData loadDirect=fieldData.loadDirect(context);
      RandomAccessOrds bytesValues=loadDirect.getOrdinalsValues();
      assertThat(1L,equalTo(bytesValues.getValueCount()));
      assertThat(bytesValues.lookupOrd(0).utf8ToString(),equalTo("5"));
    }
{
      ifdService.clear();
      FieldDataType fieldDataType=new FieldDataType("string",ImmutableSettings.builder().put("format",format).put("filter.regex.pattern","\\d{1,2}"));
      IndexOrdinalsFieldData fieldData=getForField(fieldDataType,"high_freq");
      AtomicOrdinalsFieldData loadDirect=fieldData.loadDirect(context);
      RandomAccessOrds bytesValues=loadDirect.getOrdinalsValues();
      assertThat(2L,equalTo(bytesValues.getValueCount()));
      assertThat(bytesValues.lookupOrd(0).utf8ToString(),equalTo("10"));
      assertThat(bytesValues.lookupOrd(1).utf8ToString(),equalTo("5"));
    }
  }
}
