{
  final int iters=scaledRandomIntBetween(1,10);
  for (int iter=0; iter < iters; iter++) {
    final BytesRef hash=new BytesRef(scaledRandomIntBetween(0,1024 * 1024));
    hash.length=hash.bytes.length;
    for (int i=0; i < hash.length; i++) {
      hash.bytes[i]=randomByte();
    }
    String name="foobar";
    String physicalName="_foobar";
    String failure=null;
    long length=Math.max(0,Math.abs(randomLong()));
switch (randomIntBetween(0,3)) {
case 0:
      name="foo,bar";
    failure="missing or invalid file name";
  break;
case 1:
physicalName="_foo,bar";
failure="missing or invalid physical file name";
break;
case 2:
length=-Math.abs(randomLong());
failure="missing or invalid file length";
break;
case 3:
break;
default :
fail("shouldn't be here");
}
XContentBuilder builder=XContentFactory.contentBuilder(XContentType.JSON);
builder.startObject();
builder.field(FileInfo.NAME,name);
builder.field(FileInfo.PHYSICAL_NAME,physicalName);
builder.field(FileInfo.LENGTH,length);
builder.field(FileInfo.WRITTEN_BY,Version.LATEST.toString());
builder.field(FileInfo.CHECKSUM,"666");
builder.endObject();
byte[] xContent=builder.bytes().toBytes();
if (failure == null) {
final BlobStoreIndexShardSnapshot.FileInfo parsedInfo;
try (XContentParser parser=XContentFactory.xContent(XContentType.JSON).createParser(xContent)){
parser.nextToken();
parsedInfo=BlobStoreIndexShardSnapshot.FileInfo.fromXContent(parser);
}
 assertThat(name,equalTo(parsedInfo.name()));
assertThat(physicalName,equalTo(parsedInfo.physicalName()));
assertThat(length,equalTo(parsedInfo.length()));
assertEquals("666",parsedInfo.checksum());
assertEquals("666",parsedInfo.metadata().checksum());
assertEquals(Version.LATEST,parsedInfo.metadata().writtenBy());
}
 else {
try (XContentParser parser=XContentFactory.xContent(XContentType.JSON).createParser(xContent)){
parser.nextToken();
BlobStoreIndexShardSnapshot.FileInfo.fromXContent(parser);
fail("Should have failed with [" + failure + "]");
}
 catch (ElasticsearchParseException ex) {
assertThat(ex.getMessage(),containsString(failure));
}
}
}
}
