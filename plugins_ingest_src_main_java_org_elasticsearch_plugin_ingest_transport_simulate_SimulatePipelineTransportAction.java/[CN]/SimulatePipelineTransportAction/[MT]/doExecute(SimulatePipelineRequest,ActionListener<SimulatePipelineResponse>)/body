{
  Map<String,Object> source=XContentHelper.convertToMap(request.source(),false).v2();
  SimulatePipelineRequestPayload payload;
  SimulatePipelineRequestPayload.Factory factory=new SimulatePipelineRequestPayload.Factory();
  try {
    payload=factory.create(request.id(),source,executionService);
  }
 catch (  IOException e) {
    listener.onFailure(e);
    return;
  }
  final AtomicArray<SimulatedItemResponse> responses=new AtomicArray<>(payload.size());
  final AtomicInteger counter=new AtomicInteger(payload.size());
  for (int i=0; i < payload.size(); i++) {
    final int index=i;
    executionService.execute(payload.getDocument(index),payload.pipeline(),new PipelineExecutionService.Listener(){
      @Override public void executed(      Data data){
        responses.set(index,new SimulatedItemResponse(data));
        if (counter.decrementAndGet() == 0) {
          finishHim();
        }
      }
      @Override public void failed(      Exception e){
        logger.error("failed to execute pipeline [{}]",e,payload.pipelineId());
        responses.set(index,new SimulatedItemResponse(e));
        if (counter.decrementAndGet() == 0) {
          finishHim();
        }
      }
      public void finishHim(){
        SimulatedItemResponse[] responseArray=new SimulatedItemResponse[responses.length()];
        responses.toArray(responseArray);
        SimulatePipelineResponse response=new SimulatePipelineResponse().pipelineId(payload.pipelineId()).responses(responseArray);
        listener.onResponse(response);
      }
    }
);
  }
}
