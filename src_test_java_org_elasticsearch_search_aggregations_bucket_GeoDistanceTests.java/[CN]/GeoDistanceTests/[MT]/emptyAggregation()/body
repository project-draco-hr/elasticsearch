{
  prepareCreate("empty_bucket_idx").addMapping("type","value","type=integer","location","type=geo_point").execute().actionGet();
  List<IndexRequestBuilder> builders=new ArrayList<>();
  for (int i=0; i < 2; i++) {
    builders.add(client().prepareIndex("empty_bucket_idx","type","" + i).setSource(jsonBuilder().startObject().field("value",i * 2).field("location","52.0945, 5.116").endObject()));
  }
  indexRandom(true,builders.toArray(new IndexRequestBuilder[builders.size()]));
  SearchResponse searchResponse=client().prepareSearch("empty_bucket_idx").setQuery(matchAllQuery()).addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0).subAggregation(geoDistance("geo_dist").field("location").point("52.3760, 4.894").addRange("0-100",0.0,100.0))).execute().actionGet();
  assertThat(searchResponse.getHits().getTotalHits(),equalTo(2l));
  Histogram histo=searchResponse.getAggregations().get("histo");
  assertThat(histo,Matchers.notNullValue());
  Histogram.Bucket bucket=histo.getBucketByKey(1l);
  assertThat(bucket,Matchers.notNullValue());
  GeoDistance geoDistance=bucket.getAggregations().get("geo_dist");
  List<GeoDistance.Bucket> buckets=new ArrayList<>(geoDistance.getBuckets());
  assertThat(geoDistance,Matchers.notNullValue());
  assertThat(geoDistance.getName(),equalTo("geo_dist"));
  assertThat(buckets.size(),is(1));
  assertThat(buckets.get(0).getKey(),equalTo("0-100"));
  assertThat(buckets.get(0).getFrom().doubleValue(),equalTo(0.0));
  assertThat(buckets.get(0).getTo().doubleValue(),equalTo(100.0));
  assertThat(buckets.get(0).getDocCount(),equalTo(0l));
}
