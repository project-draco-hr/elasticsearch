{
  SearchResponse response=client().prepareSearch("idx").addAggregation(geoDistance("amsterdam_rings").field("location").unit(DistanceUnit.KILOMETERS).point("52.3760, 4.894").addUnboundedTo(500).addRange(500,1000).addUnboundedFrom(1000).subAggregation(terms("cities").field("city"))).execute().actionGet();
  assertSearchResponse(response);
  GeoDistance geoDist=response.getAggregations().get("amsterdam_rings");
  assertThat(geoDist,notNullValue());
  assertThat(geoDist.getName(),equalTo("amsterdam_rings"));
  assertThat(geoDist.buckets().size(),equalTo(3));
  GeoDistance.Bucket bucket=geoDist.getByKey("*-500.0");
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKey(),equalTo("*-500.0"));
  assertThat(bucket.getFrom(),equalTo(0.0));
  assertThat(bucket.getTo(),equalTo(500.0));
  assertThat(bucket.getDocCount(),equalTo(2l));
  assertThat(bucket.getAggregations().asList().isEmpty(),is(false));
  Terms cities=bucket.getAggregations().get("cities");
  assertThat(cities,Matchers.notNullValue());
  Set<String> names=Sets.newHashSet();
  for (  Terms.Bucket city : cities) {
    names.add(city.getKey().string());
  }
  assertThat(names.contains("utrecht") && names.contains("haarlem"),is(true));
  bucket=geoDist.getByKey("500.0-1000.0");
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKey(),equalTo("500.0-1000.0"));
  assertThat(bucket.getFrom(),equalTo(500.0));
  assertThat(bucket.getTo(),equalTo(1000.0));
  assertThat(bucket.getDocCount(),equalTo(2l));
  assertThat(bucket.getAggregations().asList().isEmpty(),is(false));
  cities=bucket.getAggregations().get("cities");
  assertThat(cities,Matchers.notNullValue());
  names=Sets.newHashSet();
  for (  Terms.Bucket city : cities) {
    names.add(city.getKey().string());
  }
  assertThat(names.contains("berlin") && names.contains("prague"),is(true));
  bucket=geoDist.getByKey("1000.0-*");
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKey(),equalTo("1000.0-*"));
  assertThat(bucket.getFrom(),equalTo(1000.0));
  assertThat(bucket.getTo(),equalTo(Double.POSITIVE_INFINITY));
  assertThat(bucket.getDocCount(),equalTo(1l));
  assertThat(bucket.getAggregations().asList().isEmpty(),is(false));
  cities=bucket.getAggregations().get("cities");
  assertThat(cities,Matchers.notNullValue());
  names=Sets.newHashSet();
  for (  Terms.Bucket city : cities) {
    names.add(city.getKey().string());
  }
  assertThat(names.contains("tel-aviv"),is(true));
}
