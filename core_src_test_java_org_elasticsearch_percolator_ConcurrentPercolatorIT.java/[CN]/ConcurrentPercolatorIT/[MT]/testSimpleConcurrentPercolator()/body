{
  assertAcked(prepareCreate("index").addMapping("type","field1","type=long","field2","type=text"));
  ensureGreen();
  final BytesReference onlyField1=XContentFactory.jsonBuilder().startObject().startObject("doc").field("field1",1).endObject().endObject().bytes();
  final BytesReference onlyField2=XContentFactory.jsonBuilder().startObject().startObject("doc").field("field2","value").endObject().endObject().bytes();
  final BytesReference bothFields=XContentFactory.jsonBuilder().startObject().startObject("doc").field("field1",1).field("field2","value").endObject().endObject().bytes();
  client().prepareIndex("index","type","1").setSource(XContentFactory.jsonBuilder().startObject().field("field1",1).field("field2","value").endObject()).execute().actionGet();
  client().prepareIndex("index",PercolatorService.TYPE_NAME,"test1").setSource(XContentFactory.jsonBuilder().startObject().field("query",termQuery("field2","value")).endObject()).execute().actionGet();
  client().prepareIndex("index",PercolatorService.TYPE_NAME,"test2").setSource(XContentFactory.jsonBuilder().startObject().field("query",termQuery("field1",1)).endObject()).execute().actionGet();
  refresh();
  final CountDownLatch start=new CountDownLatch(1);
  final AtomicBoolean stop=new AtomicBoolean(false);
  final AtomicInteger counts=new AtomicInteger(0);
  final AtomicReference<Throwable> exceptionHolder=new AtomicReference<>();
  Thread[] threads=new Thread[scaledRandomIntBetween(2,5)];
  final int numberOfPercolations=scaledRandomIntBetween(1000,10000);
  for (int i=0; i < threads.length; i++) {
    Runnable r=new Runnable(){
      @Override public void run(){
        try {
          start.await();
          while (!stop.get()) {
            int count=counts.incrementAndGet();
            if ((count > numberOfPercolations)) {
              stop.set(true);
            }
            PercolateResponse percolate;
            if (count % 3 == 0) {
              percolate=client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet();
              assertThat(percolate.getMatches(),arrayWithSize(2));
              assertThat(convertFromTextArray(percolate.getMatches(),"index"),arrayContainingInAnyOrder("test1","test2"));
            }
 else             if (count % 3 == 1) {
              percolate=client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet();
              assertThat(percolate.getMatches(),arrayWithSize(1));
              assertThat(convertFromTextArray(percolate.getMatches(),"index"),arrayContaining("test1"));
            }
 else {
              percolate=client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet();
              assertThat(percolate.getMatches(),arrayWithSize(1));
              assertThat(convertFromTextArray(percolate.getMatches(),"index"),arrayContaining("test2"));
            }
          }
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
        }
catch (        Throwable e) {
          exceptionHolder.set(e);
          Thread.currentThread().interrupt();
        }
      }
    }
;
    threads[i]=new Thread(r);
    threads[i].start();
  }
  start.countDown();
  for (  Thread thread : threads) {
    thread.join();
  }
  Throwable assertionError=exceptionHolder.get();
  if (assertionError != null) {
    throw assertionError;
  }
}
