{
  assertAcked(prepareCreate("index").addMapping("type","field1","type=text","field2","type=text"));
  ensureGreen();
  final int numIndexThreads=scaledRandomIntBetween(1,3);
  final int numPercolateThreads=scaledRandomIntBetween(2,6);
  final int numPercolatorOperationsPerThread=scaledRandomIntBetween(100,1000);
  final Set<Throwable> exceptionsHolder=ConcurrentCollections.newConcurrentSet();
  final CountDownLatch start=new CountDownLatch(1);
  final AtomicInteger runningPercolateThreads=new AtomicInteger(numPercolateThreads);
  final AtomicInteger type1=new AtomicInteger();
  final AtomicInteger type2=new AtomicInteger();
  final AtomicInteger type3=new AtomicInteger();
  final AtomicInteger idGen=new AtomicInteger();
  Thread[] indexThreads=new Thread[numIndexThreads];
  for (int i=0; i < numIndexThreads; i++) {
    final Random rand=new Random(getRandom().nextLong());
    Runnable r=new Runnable(){
      @Override public void run(){
        try {
          XContentBuilder onlyField1=XContentFactory.jsonBuilder().startObject().field("query",termQuery("field1","value")).endObject();
          XContentBuilder onlyField2=XContentFactory.jsonBuilder().startObject().field("query",termQuery("field2","value")).endObject();
          XContentBuilder field1And2=XContentFactory.jsonBuilder().startObject().field("query",boolQuery().must(termQuery("field1","value")).must(termQuery("field2","value"))).endObject();
          start.await();
          while (runningPercolateThreads.get() > 0) {
            Thread.sleep(100);
            int x=rand.nextInt(3);
            String id=Integer.toString(idGen.incrementAndGet());
            IndexResponse response;
switch (x) {
case 0:
              response=client().prepareIndex("index",PercolatorService.TYPE_NAME,id).setSource(onlyField1).setRefresh(true).execute().actionGet();
            type1.incrementAndGet();
          break;
case 1:
        response=client().prepareIndex("index",PercolatorService.TYPE_NAME,id).setSource(onlyField2).setRefresh(true).execute().actionGet();
      type2.incrementAndGet();
    break;
case 2:
  response=client().prepareIndex("index",PercolatorService.TYPE_NAME,id).setSource(field1And2).setRefresh(true).execute().actionGet();
type3.incrementAndGet();
break;
default :
throw new IllegalStateException("Illegal x=" + x);
}
assertThat(response.getId(),equalTo(id));
assertThat(response.getVersion(),equalTo(1L));
}
}
 catch (Throwable t) {
exceptionsHolder.add(t);
logger.error("Error in indexing thread...",t);
}
}
}
;
indexThreads[i]=new Thread(r);
indexThreads[i].start();
}
Thread[] percolateThreads=new Thread[numPercolateThreads];
for (int i=0; i < numPercolateThreads; i++) {
final Random rand=new Random(getRandom().nextLong());
Runnable r=new Runnable(){
@Override public void run(){
try {
XContentBuilder onlyField1Doc=XContentFactory.jsonBuilder().startObject().startObject("doc").field("field1","value").endObject().endObject();
XContentBuilder onlyField2Doc=XContentFactory.jsonBuilder().startObject().startObject("doc").field("field2","value").endObject().endObject();
XContentBuilder field1AndField2Doc=XContentFactory.jsonBuilder().startObject().startObject("doc").field("field1","value").field("field2","value").endObject().endObject();
start.await();
for (int counter=0; counter < numPercolatorOperationsPerThread; counter++) {
int x=rand.nextInt(3);
int atLeastExpected;
PercolateResponse response;
switch (x) {
case 0:
atLeastExpected=type1.get();
response=client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet();
assertNoFailures(response);
assertThat(response.getSuccessfulShards(),equalTo(response.getTotalShards()));
assertThat(response.getCount(),greaterThanOrEqualTo((long)atLeastExpected));
break;
case 1:
atLeastExpected=type2.get();
response=client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet();
assertNoFailures(response);
assertThat(response.getSuccessfulShards(),equalTo(response.getTotalShards()));
assertThat(response.getCount(),greaterThanOrEqualTo((long)atLeastExpected));
break;
case 2:
atLeastExpected=type3.get();
response=client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet();
assertNoFailures(response);
assertThat(response.getSuccessfulShards(),equalTo(response.getTotalShards()));
assertThat(response.getCount(),greaterThanOrEqualTo((long)atLeastExpected));
break;
}
}
}
 catch (Throwable t) {
exceptionsHolder.add(t);
logger.error("Error in percolate thread...",t);
}
 finally {
runningPercolateThreads.decrementAndGet();
}
}
}
;
percolateThreads[i]=new Thread(r);
percolateThreads[i].start();
}
start.countDown();
for (Thread thread : indexThreads) {
thread.join();
}
for (Thread thread : percolateThreads) {
thread.join();
}
for (Throwable t : exceptionsHolder) {
logger.error("Unexpected exception {}",t.getMessage(),t);
}
assertThat(exceptionsHolder.isEmpty(),equalTo(true));
}
