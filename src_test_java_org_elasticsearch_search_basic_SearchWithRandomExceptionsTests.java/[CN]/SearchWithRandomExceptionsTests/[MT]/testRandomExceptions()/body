{
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("test").field("type","string").field("index","not_analyzed").endObject().endObject().endObject().endObject().string();
  final double lowLevelRate;
  final double topLevelRate;
  if (frequently()) {
    if (randomBoolean()) {
      if (randomBoolean()) {
        lowLevelRate=1.0 / between(2,10);
        topLevelRate=0.0d;
      }
 else {
        topLevelRate=1.0 / between(2,10);
        lowLevelRate=0.0d;
      }
    }
 else {
      lowLevelRate=1.0 / between(2,10);
      topLevelRate=1.0 / between(2,10);
    }
  }
 else {
    topLevelRate=0d;
    lowLevelRate=0d;
  }
  Builder settings=settingsBuilder().put(indexSettings()).put("index.number_of_replicas",randomIntBetween(0,1)).put(MockInternalEngine.READER_WRAPPER_TYPE,RandomExceptionDirectoryReaderWrapper.class.getName()).put(EXCEPTION_TOP_LEVEL_RATIO_KEY,topLevelRate).put(EXCEPTION_LOW_LEVEL_RATIO_KEY,lowLevelRate).put(MockInternalEngine.WRAP_READER_RATIO,1.0d);
  logger.info("creating index: [test] using settings: [{}]",settings.build().getAsMap());
  client().admin().indices().prepareCreate("test").setSettings(settings).addMapping("type",mapping).execute().actionGet();
  ensureSearchable();
  final int numDocs=between(10,100);
  long numCreated=0;
  boolean[] added=new boolean[numDocs];
  for (int i=0; i < numDocs; i++) {
    try {
      IndexResponse indexResponse=client().prepareIndex("test","type","" + i).setTimeout(TimeValue.timeValueSeconds(1)).setSource("test",English.intToEnglish(i)).get();
      if (indexResponse.isCreated()) {
        numCreated++;
        added[i]=true;
      }
    }
 catch (    ElasticsearchException ex) {
    }
  }
  logger.info("Start Refresh");
  RefreshResponse refreshResponse=client().admin().indices().prepareRefresh("test").execute().get();
  final boolean refreshFailed=refreshResponse.getShardFailures().length != 0 || refreshResponse.getFailedShards() != 0;
  logger.info("Refresh failed [{}] numShardsFailed: [{}], shardFailuresLength: [{}], successfulShards: [{}], totalShards: [{}] ",refreshFailed,refreshResponse.getFailedShards(),refreshResponse.getShardFailures().length,refreshResponse.getSuccessfulShards(),refreshResponse.getTotalShards());
  NumShards test=getNumShards("test");
  final int numSearches=atLeast(100);
  for (int i=0; i < numSearches; i++) {
    try {
      int docToQuery=between(0,numDocs - 1);
      long expectedResults=added[docToQuery] ? 1 : 0;
      logger.info("Searching for [test:{}]",English.intToEnglish(docToQuery));
      SearchResponse searchResponse=client().prepareSearch().setQuery(QueryBuilders.matchQuery("test",English.intToEnglish(docToQuery))).get();
      logger.info("Successful shards: [{}]  numShards: [{}]",searchResponse.getSuccessfulShards(),test.numPrimaries);
      if (searchResponse.getSuccessfulShards() == test.numPrimaries && !refreshFailed) {
        assertThat(searchResponse.getHits().getTotalHits(),Matchers.equalTo(expectedResults));
      }
      searchResponse=client().prepareSearch().setQuery(QueryBuilders.matchAllQuery()).get();
      logger.info("Match all Successful shards: [{}]  numShards: [{}]",searchResponse.getSuccessfulShards(),test.numPrimaries);
      if (searchResponse.getSuccessfulShards() == test.numPrimaries && !refreshFailed) {
        assertThat(searchResponse.getHits().getTotalHits(),Matchers.equalTo(numCreated));
      }
    }
 catch (    SearchPhaseExecutionException ex) {
      logger.info("expected SearchPhaseException: [{}]",ex.getMessage());
    }
  }
}
