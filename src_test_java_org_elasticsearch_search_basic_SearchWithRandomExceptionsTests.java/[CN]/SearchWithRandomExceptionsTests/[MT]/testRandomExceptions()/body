{
  final int numShards=between(1,5);
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("test").field("type","string").field("index","not_analyzed").endObject().endObject().endObject().endObject().string();
  final double exceptionRate;
  final double exceptionOnOpenRate;
  if (frequently()) {
    if (randomBoolean()) {
      if (randomBoolean()) {
        exceptionOnOpenRate=1.0 / between(5,100);
        exceptionRate=0.0d;
      }
 else {
        exceptionRate=1.0 / between(5,100);
        exceptionOnOpenRate=0.0d;
      }
    }
 else {
      exceptionOnOpenRate=1.0 / between(5,100);
      exceptionRate=1.0 / between(5,100);
    }
  }
 else {
    exceptionRate=0d;
    exceptionOnOpenRate=0d;
  }
  Builder settings=settingsBuilder().put("index.number_of_shards",numShards).put("index.number_of_replicas",randomIntBetween(0,1)).put(MockDirectoryHelper.RANDOM_IO_EXCEPTION_RATE,exceptionRate).put(MockDirectoryHelper.RANDOM_IO_EXCEPTION_RATE_ON_OPEN,exceptionOnOpenRate).put(MockDirectoryHelper.CHECK_INDEX_ON_CLOSE,true);
  logger.info("creating index: [test] using settings: [{}]",settings.build().getAsMap());
  client().admin().indices().prepareCreate("test").setSettings(settings).addMapping("type",mapping).execute().actionGet();
  ClusterHealthResponse clusterHealthResponse=client().admin().cluster().health(Requests.clusterHealthRequest().waitForYellowStatus().timeout(TimeValue.timeValueSeconds(5))).get();
  final int numDocs;
  final boolean expectAllShardsFailed;
  if (clusterHealthResponse.isTimedOut()) {
    logger.info("ClusterHealth timed out - only index one doc and expect searches to fail");
    numDocs=1;
    expectAllShardsFailed=true;
  }
 else {
    numDocs=between(10,100);
    expectAllShardsFailed=false;
  }
  long numCreated=0;
  boolean[] added=new boolean[numDocs];
  for (int i=0; i < numDocs; i++) {
    try {
      IndexResponse indexResponse=client().prepareIndex("test","type","" + i).setTimeout(TimeValue.timeValueSeconds(1)).setSource("test",English.intToEnglish(i)).get();
      if (indexResponse.isCreated()) {
        numCreated++;
        added[i]=true;
      }
    }
 catch (    ElasticSearchException ex) {
    }
  }
  RefreshResponse refreshResponse=client().admin().indices().prepareRefresh("test").execute().get();
  final boolean refreshFailed=refreshResponse.getShardFailures().length != 0 || refreshResponse.getFailedShards() != 0;
  logger.info("Refresh failed [{}]",refreshFailed);
  final int numSearches=atLeast(10);
  for (int i=0; i < numSearches; i++) {
    try {
      int docToQuery=between(0,numDocs - 1);
      long expectedResults=added[docToQuery] ? 1 : 0;
      logger.info("Searching for [test:{}]",English.intToEnglish(docToQuery));
      SearchResponse searchResponse=client().prepareSearch().setQuery(QueryBuilders.matchQuery("test",English.intToEnglish(docToQuery))).get();
      logger.info("Successful shards: [{}]  numShards: [{}]",searchResponse.getSuccessfulShards(),numShards);
      if (searchResponse.getSuccessfulShards() == numShards && !refreshFailed) {
        assertThat(searchResponse.getHits().getTotalHits(),Matchers.equalTo(expectedResults));
      }
      searchResponse=client().prepareSearch().setQuery(QueryBuilders.matchAllQuery()).get();
      if (searchResponse.getSuccessfulShards() == numShards && !refreshFailed) {
        assertThat(searchResponse.getHits().getTotalHits(),Matchers.equalTo(numCreated));
      }
    }
 catch (    SearchPhaseExecutionException ex) {
      if (!expectAllShardsFailed) {
        throw ex;
      }
 else {
        logger.info("expected SearchPhaseException: [{}]",ex.getMessage());
      }
    }
  }
}
