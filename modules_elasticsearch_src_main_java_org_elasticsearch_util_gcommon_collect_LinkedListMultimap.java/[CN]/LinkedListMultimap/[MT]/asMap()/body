{
  Map<K,Collection<V>> result=map;
  if (result == null) {
    map=result=new AbstractMap<K,Collection<V>>(){
      Set<Entry<K,Collection<V>>> entrySet;
      @Override public Set<Entry<K,Collection<V>>> entrySet(){
        Set<Entry<K,Collection<V>>> result=entrySet;
        if (result == null) {
          entrySet=result=new AsMapEntries();
        }
        return result;
      }
      @Override public boolean containsKey(      @Nullable Object key){
        return LinkedListMultimap.this.containsKey(key);
      }
      @SuppressWarnings("unchecked") @Override public Collection<V> get(      @Nullable Object key){
        Collection<V> collection=LinkedListMultimap.this.get((K)key);
        return collection.isEmpty() ? null : collection;
      }
      @Override public Collection<V> remove(      @Nullable Object key){
        Collection<V> collection=removeAll(key);
        return collection.isEmpty() ? null : collection;
      }
    }
;
  }
  return result;
}
