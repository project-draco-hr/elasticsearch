{
  AllocationService strategy=createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries",10).put("cluster.routing.allocation.allow_rebalance","always").put("cluster.routing.allocation.awareness.attributes","rack_id,zone").build());
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").numberOfShards(1).numberOfReplicas(1)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder().metaData(metaData).routingTable(routingTable).build();
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1",ImmutableMap.of("rack_id","rack_1","zone","zone1"))).put(newNode("node2",ImmutableMap.of("rack_id","rack_2","zone","zone2"))).localNodeId("node1")).build();
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  routingTable=strategy.applyStartedShards(clusterState,clusterState.routingNodes().shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  routingTable=strategy.applyStartedShards(clusterState,clusterState.routingNodes().shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  ShardIterator shardIterator=clusterState.routingTable().index("test").shard(0).preferAttributesActiveInitializingShardsIt(new String[]{"rack_id"},clusterState.nodes());
  ShardRouting shardRouting=shardIterator.nextOrNull();
  assertThat(shardRouting,notNullValue());
  assertThat(shardRouting.currentNodeId(),equalTo("node1"));
  shardRouting=shardIterator.nextOrNull();
  assertThat(shardRouting,notNullValue());
  assertThat(shardRouting.currentNodeId(),equalTo("node2"));
  shardIterator=clusterState.routingTable().index("test").shard(0).preferAttributesActiveInitializingShardsIt(new String[]{"rack_id"},clusterState.nodes());
  shardRouting=shardIterator.nextOrNull();
  assertThat(shardRouting,notNullValue());
  assertThat(shardRouting.currentNodeId(),equalTo("node1"));
  shardRouting=shardIterator.nextOrNull();
  assertThat(shardRouting,notNullValue());
  assertThat(shardRouting.currentNodeId(),equalTo("node2"));
}
