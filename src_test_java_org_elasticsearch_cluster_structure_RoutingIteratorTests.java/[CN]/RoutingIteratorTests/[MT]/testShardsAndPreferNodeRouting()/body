{
  AllocationService strategy=new AllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries",10).build());
  MetaData metaData=newMetaDataBuilder().put(newIndexMetaDataBuilder("test").numberOfShards(5).numberOfReplicas(1)).build();
  RoutingTable routingTable=routingTable().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=newClusterStateBuilder().metaData(metaData).routingTable(routingTable).build();
  clusterState=newClusterStateBuilder().state(clusterState).nodes(newNodesBuilder().put(newNode("node1")).put(newNode("node2")).localNodeId("node1")).build();
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  routingTable=strategy.applyStartedShards(clusterState,clusterState.routingNodes().shardsWithState(INITIALIZING)).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  routingTable=strategy.applyStartedShards(clusterState,clusterState.routingNodes().shardsWithState(INITIALIZING)).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  PlainOperationRouting operationRouting=new PlainOperationRouting(ImmutableSettings.Builder.EMPTY_SETTINGS,new DjbHashFunction(),new AwarenessAllocationDecider());
  GroupShardsIterator shardIterators=operationRouting.searchShards(clusterState,new String[]{"test"},new String[]{"test"},null,"_shards:0");
  assertThat(shardIterators.size(),equalTo(1));
  assertThat(shardIterators.iterator().next().shardId().id(),equalTo(0));
  shardIterators=operationRouting.searchShards(clusterState,new String[]{"test"},new String[]{"test"},null,"_shards:1");
  assertThat(shardIterators.size(),equalTo(1));
  assertThat(shardIterators.iterator().next().shardId().id(),equalTo(1));
  shardIterators=operationRouting.searchShards(clusterState,new String[]{"test"},new String[]{"test"},null,"_shards:0;");
  assertThat(shardIterators.size(),equalTo(1));
  assertThat(shardIterators.iterator().next().shardId().id(),equalTo(0));
  String firstRoundNodeId=shardIterators.iterator().next().nextOrNull().currentNodeId();
  shardIterators=operationRouting.searchShards(clusterState,new String[]{"test"},new String[]{"test"},null,"_shards:0");
  assertThat(shardIterators.size(),equalTo(1));
  assertThat(shardIterators.iterator().next().shardId().id(),equalTo(0));
  assertThat(shardIterators.iterator().next().nextOrNull().currentNodeId(),not(equalTo(firstRoundNodeId)));
  shardIterators=operationRouting.searchShards(clusterState,new String[]{"test"},new String[]{"test"},null,"_shards:0;_prefer_node:node1");
  assertThat(shardIterators.size(),equalTo(1));
  assertThat(shardIterators.iterator().next().shardId().id(),equalTo(0));
  assertThat(shardIterators.iterator().next().nextOrNull().currentNodeId(),equalTo("node1"));
  shardIterators=operationRouting.searchShards(clusterState,new String[]{"test"},new String[]{"test"},null,"_shards:0;_prefer_node:node1");
  assertThat(shardIterators.size(),equalTo(1));
  assertThat(shardIterators.iterator().next().shardId().id(),equalTo(0));
  assertThat(shardIterators.iterator().next().nextOrNull().currentNodeId(),equalTo("node1"));
}
