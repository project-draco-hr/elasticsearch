{
  List<BytesReference> referenceList=newRefList(randomIntBetween(1,PAGE_SIZE * 2));
  BytesReference ref=new CompositeBytesReference(referenceList.toArray(new BytesReference[0]));
  BytesRefIterator iterator=ref.iterator();
  BytesRefBuilder builder=new BytesRefBuilder();
  for (  BytesReference reference : referenceList) {
    BytesRefIterator innerIter=reference.iterator();
    BytesRef scratch;
    while ((scratch=innerIter.next()) != null) {
      BytesRef next=iterator.next();
      assertNotNull(next);
      assertEquals(next,scratch);
      builder.append(next);
    }
  }
  assertNull(iterator.next());
  int offset=0;
  for (  BytesReference reference : referenceList) {
    assertEquals(reference,ref.slice(offset,reference.length()));
    int probes=randomIntBetween(Math.min(10,reference.length()),reference.length());
    for (int i=0; i < probes; i++) {
      int index=randomIntBetween(0,reference.length() - 1);
      assertEquals(ref.get(offset + index),reference.get(index));
    }
    offset+=reference.length();
  }
  BytesArray array=new BytesArray(builder.toBytesRef());
  assertEquals(array,ref);
  assertEquals(array.hashCode(),ref.hashCode());
  BytesStreamOutput output=new BytesStreamOutput();
  ref.writeTo(output);
  assertEquals(array,output.bytes());
}
