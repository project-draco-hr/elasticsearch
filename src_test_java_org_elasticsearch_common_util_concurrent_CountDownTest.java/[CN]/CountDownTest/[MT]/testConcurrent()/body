{
  final AtomicInteger count=new AtomicInteger(0);
  final CountDown countDown=new CountDown(scaledRandomIntBetween(10,1000));
  Thread[] threads=new Thread[between(3,10)];
  final CountDownLatch latch=new CountDownLatch(1);
  for (int i=0; i < threads.length; i++) {
    threads[i]=new Thread(){
      public void run(){
        try {
          latch.await();
        }
 catch (        InterruptedException e) {
          throw new RuntimeException();
        }
        while (true) {
          if (frequently()) {
            if (countDown.isCountedDown()) {
              break;
            }
          }
          if (countDown.countDown()) {
            count.incrementAndGet();
            break;
          }
        }
      }
    }
;
    threads[i].start();
  }
  latch.countDown();
  Thread.yield();
  if (rarely()) {
    if (countDown.fastForward()) {
      count.incrementAndGet();
    }
    assertThat(countDown.isCountedDown(),equalTo(true));
    assertThat(countDown.fastForward(),equalTo(false));
  }
  for (  Thread thread : threads) {
    thread.join();
  }
  assertThat(countDown.isCountedDown(),equalTo(true));
  assertThat(count.get(),Matchers.equalTo(1));
}
