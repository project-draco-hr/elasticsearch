{
  FSDirectory dir=FSDirectory.open(new File("work/test"));
  IndexWriter writer=new IndexWriter(dir,new IndexWriterConfig(Lucene.VERSION,Lucene.STANDARD_ANALYZER));
  final int NUMBER_OF_THREADS=2;
  final long INDEX_COUNT=SizeValue.parseSizeValue("1m").singles();
  final long SCAN_COUNT=SizeValue.parseSizeValue("100k").singles();
  final long startUid=1000000;
  long LIMIT=startUid + INDEX_COUNT;
  StopWatch watch=new StopWatch().start();
  System.out.println("Indexing " + INDEX_COUNT + " docs...");
  for (long i=startUid; i < LIMIT; i++) {
    Document doc=new Document();
    doc.add(new UidField("_uid",Long.toString(i),i));
    writer.addDocument(doc);
  }
  System.out.println("Done indexing, took " + watch.stop().lastTaskTime());
  final IndexReader reader=IndexReader.open(writer,true);
  final CountDownLatch latch=new CountDownLatch(NUMBER_OF_THREADS);
  Thread[] threads=new Thread[NUMBER_OF_THREADS];
  for (int i=0; i < threads.length; i++) {
    threads[i]=new Thread(new Runnable(){
      @Override public void run(){
        try {
          for (long i=0; i < SCAN_COUNT; i++) {
            long id=startUid + (Math.abs(ThreadLocalRandom.current().nextInt()) % INDEX_COUNT);
            DocsAndPositionsEnum uid=MultiFields.getTermPositionsEnum(reader,MultiFields.getLiveDocs(reader),"_uid",new BytesRef(Long.toString(id)));
            uid.nextDoc();
            uid.nextPosition();
            if (uid.getPayload() == null) {
              System.err.println("no payload...");
              break;
            }
            BytesRef payload=uid.getPayload();
            if (Numbers.bytesToLong(BytesRef.deepCopyOf(payload).bytes) != id) {
              System.err.println("wrong id...");
              break;
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
 finally {
          latch.countDown();
        }
      }
    }
);
  }
  watch=new StopWatch().start();
  for (int i=0; i < threads.length; i++) {
    threads[i].start();
  }
  latch.await();
  watch.stop();
  System.out.println("Scanned in " + watch.totalTime() + " TP Seconds "+ ((SCAN_COUNT * NUMBER_OF_THREADS) / watch.totalTime().secondsFrac()));
}
