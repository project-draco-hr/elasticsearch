{
  assertAcked(prepareCreate("test").addMapping("type1",XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("_timestamp").field("enabled",true).endObject().startObject("_ttl").field("enabled",true).endObject().endObject().endObject()).addMapping("type2",XContentFactory.jsonBuilder().startObject().startObject("type2").startObject("_timestamp").field("enabled",true).endObject().startObject("_ttl").field("enabled",true).field("default","1d").endObject().endObject().endObject()));
  ensureYellow("test");
  final NumShards test=getNumShards("test");
  long providedTTLValue=3000;
  logger.info("--> checking ttl");
  long now=System.currentTimeMillis();
  IndexResponse indexResponse=client().prepareIndex("test","type1","1").setSource("field1","value1").setTimestamp(String.valueOf(now)).setTTL(providedTTLValue).setRefresh(true).get();
  assertThat(indexResponse.isCreated(),is(true));
  indexResponse=client().prepareIndex("test","type1","with_routing").setSource("field1","value1").setTimestamp(String.valueOf(now)).setTTL(providedTTLValue).setRouting("routing").setRefresh(true).get();
  assertThat(indexResponse.isCreated(),is(true));
  indexResponse=client().prepareIndex("test","type1","no_ttl").setSource("field1","value1").get();
  assertThat(indexResponse.isCreated(),is(true));
  indexResponse=client().prepareIndex("test","type2","default_ttl").setSource("field1","value1").get();
  assertThat(indexResponse.isCreated(),is(true));
  long currentTime=System.currentTimeMillis();
  GetResponse getResponse=client().prepareGet("test","type1","1").setFields("_ttl").get();
  long ttl0;
  if (getResponse.isExists()) {
    ttl0=((Number)getResponse.getField("_ttl").getValue()).longValue();
    assertThat(ttl0,lessThanOrEqualTo(providedTTLValue - (currentTime - now)));
  }
 else {
    assertThat(providedTTLValue - (currentTime - now),lessThanOrEqualTo(0l));
  }
  currentTime=System.currentTimeMillis();
  getResponse=client().prepareGet("test","type1","1").setFields("_ttl").get();
  if (getResponse.isExists()) {
    ttl0=((Number)getResponse.getField("_ttl").getValue()).longValue();
    assertThat(ttl0,lessThanOrEqualTo(providedTTLValue - (currentTime - now)));
  }
 else {
    assertThat(providedTTLValue - (currentTime - now),lessThanOrEqualTo(0l));
  }
  currentTime=System.currentTimeMillis();
  getResponse=client().prepareGet("test","type1","1").setFields("_ttl").setRealtime(false).get();
  if (getResponse.isExists()) {
    ttl0=((Number)getResponse.getField("_ttl").getValue()).longValue();
    assertThat(ttl0,lessThanOrEqualTo(providedTTLValue - (currentTime - now)));
  }
 else {
    assertThat(providedTTLValue - (currentTime - now),lessThanOrEqualTo(0l));
  }
  currentTime=System.currentTimeMillis();
  getResponse=client().prepareGet("test","type1","1").setFields("_ttl").setRealtime(false).get();
  if (getResponse.isExists()) {
    ttl0=((Number)getResponse.getField("_ttl").getValue()).longValue();
    assertThat(ttl0,lessThanOrEqualTo(providedTTLValue - (currentTime - now)));
  }
 else {
    assertThat(providedTTLValue - (currentTime - now),lessThanOrEqualTo(0l));
  }
  getResponse=client().prepareGet("test","type1","no_ttl").setFields("_ttl").setRealtime(true).execute().actionGet();
  assertThat(getResponse.getField("_ttl"),nullValue());
  getResponse=client().prepareGet("test","type2","default_ttl").setFields("_ttl").setRealtime(true).execute().actionGet();
  ttl0=((Number)getResponse.getField("_ttl").getValue()).longValue();
  assertThat(ttl0,greaterThan(0L));
  IndicesStatsResponse response=client().admin().indices().prepareStats("test").clear().setIndexing(true).get();
  assertThat(response.getIndices().get("test").getTotal().getIndexing().getTotal().getDeleteCount(),equalTo(0L));
  long shouldBeExpiredDate=now + providedTTLValue + PURGE_INTERVAL+ 2000;
  currentTime=System.currentTimeMillis();
  if (shouldBeExpiredDate - currentTime > 0) {
    Thread.sleep(shouldBeExpiredDate - currentTime);
  }
  logger.info("--> checking purger");
  assertThat(awaitBusy(new Predicate<Object>(){
    @Override public boolean apply(    Object input){
      if (rarely()) {
        client().admin().indices().prepareFlush("test").get();
      }
 else       if (rarely()) {
        client().admin().indices().prepareOptimize("test").setMaxNumSegments(1).get();
      }
      IndicesStatsResponse response=client().admin().indices().prepareStats("test").clear().setIndexing(true).get();
      return response.getIndices().get("test").getTotal().getIndexing().getTotal().getDeleteCount() == 2L * test.dataCopies;
    }
  }
,5,TimeUnit.SECONDS),equalTo(true));
  getResponse=client().prepareGet("test","type1","1").setFields("_ttl").setRealtime(true).execute().actionGet();
  assertThat(getResponse.isExists(),equalTo(false));
  getResponse=client().prepareGet("test","type1","with_routing").setRouting("routing").setFields("_ttl").setRealtime(true).execute().actionGet();
  assertThat(getResponse.isExists(),equalTo(false));
  getResponse=client().prepareGet("test","type1","1").setFields("_ttl").setRealtime(true).execute().actionGet();
  assertThat(getResponse.isExists(),equalTo(false));
  getResponse=client().prepareGet("test","type1","with_routing").setRouting("routing").setFields("_ttl").setRealtime(true).execute().actionGet();
  assertThat(getResponse.isExists(),equalTo(false));
  client().admin().indices().prepareRefresh("test").execute().actionGet();
  getResponse=client().prepareGet("test","type1","1").setFields("_ttl").setRealtime(false).execute().actionGet();
  assertThat(getResponse.isExists(),equalTo(false));
  getResponse=client().prepareGet("test","type1","with_routing").setRouting("routing").setFields("_ttl").setRealtime(false).execute().actionGet();
  assertThat(getResponse.isExists(),equalTo(false));
  getResponse=client().prepareGet("test","type1","1").setFields("_ttl").setRealtime(false).execute().actionGet();
  assertThat(getResponse.isExists(),equalTo(false));
  getResponse=client().prepareGet("test","type1","with_routing").setRouting("routing").setFields("_ttl").setRealtime(false).execute().actionGet();
  assertThat(getResponse.isExists(),equalTo(false));
}
