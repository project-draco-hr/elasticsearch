{
  if (facets.size() == 1) {
    return facets.get(0);
  }
  InternalFloatTermsFacet first=(InternalFloatTermsFacet)facets.get(0);
  TFloatIntHashMap aggregated=CacheRecycler.popFloatIntMap();
  aggregated.clear();
  long missing=0;
  for (  Facet facet : facets) {
    InternalFloatTermsFacet mFacet=(InternalFloatTermsFacet)facet;
    missing+=mFacet.missingCount();
    for (    FloatEntry entry : mFacet.entries) {
      aggregated.adjustOrPutValue(entry.term,entry.count(),entry.count());
    }
  }
  BoundedTreeSet<FloatEntry> ordered=new BoundedTreeSet<FloatEntry>(first.comparatorType.comparator(),first.requiredSize);
  for (TFloatIntIterator it=aggregated.iterator(); it.hasNext(); ) {
    it.advance();
    ordered.add(new FloatEntry(it.key(),it.value()));
  }
  first.entries=ordered;
  first.missing=missing;
  CacheRecycler.pushFloatIntMap(aggregated);
  return first;
}
