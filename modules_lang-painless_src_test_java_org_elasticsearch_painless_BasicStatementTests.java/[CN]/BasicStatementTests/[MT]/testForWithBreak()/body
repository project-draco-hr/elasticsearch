{
  assertEquals(1,exec("Map settings = ['test1' : '1'];" + "int i = 0;" + "List keys = ['test0', 'test1', 'test2'];"+ "for (; i < keys.size(); ++i) {"+ "    if (settings.containsKey(keys[i])) {"+ "        break;"+ "    }"+ "}"+ "return i;"));
  List<Integer> expected=new ArrayList<>();
  expected.add(1);
  expected.add(0);
  assertEquals(expected,exec("Map outer = ['test1' : '1'];" + "Map inner = ['test0' : '2'];" + "boolean found = false;"+ "int i = 0, j = 0;"+ "List keys = ['test0', 'test1', 'test2'];"+ "for (; i < keys.size(); ++i) {"+ "    if (outer.containsKey(keys[i])) {"+ "        for (; j < keys.size(); ++j) {"+ "            if (inner.containsKey(keys[j])) {"+ "                found = true;"+ "                break;"+ "            }"+ "        }"+ "        if (found) {"+ "            break;"+ "        }"+ "    }"+ "}"+ "[i, j];"));
  expected.set(1,3);
  assertEquals(expected,exec("Map outer = ['test1' : '1'];" + "Map inner = ['test3' : '2'];" + "int i = 0, j = 0;"+ "boolean found = false;"+ "List keys = ['test0', 'test1', 'test2'];"+ "for (; i < keys.size(); ++i) {"+ "    if (outer.containsKey(keys[i])) {"+ "        for (; j < keys.size(); ++j) {"+ "            if (found) {"+ "                break;"+ "            }"+ "        }"+ "        found = true;"+ "        if (found) {"+ "            break;"+ "        }"+ "    }"+ "}"+ "[i, j];"));
  expected.set(0,3);
  expected.set(1,1);
  assertEquals(expected,exec("Map outer = ['test3' : '1'];" + "Map inner = ['test1' : '2'];" + "int i = 0, j = 0;"+ "boolean found = false;"+ "List keys = ['test0', 'test1', 'test2'];"+ "for (; i < keys.size(); ++i) {"+ "    if (outer.containsKey('test3')) {"+ "        for (; j < keys.size(); ++j) {"+ "            if (inner.containsKey(keys[j])) {"+ "                break;"+ "            }"+ "        }"+ "        if (found) {"+ "            break;"+ "        }"+ "    }"+ "}"+ "[i, j];"));
}
