{
  String index=null;
  int shardId=-1;
  String nodeId=null;
  boolean allowPrimary=false;
  String currentFieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token.isValue()) {
      if ("index".equals(currentFieldName)) {
        index=parser.text();
      }
 else       if ("shard".equals(currentFieldName)) {
        shardId=parser.intValue();
      }
 else       if ("node".equals(currentFieldName)) {
        nodeId=parser.text();
      }
 else       if ("allow_primary".equals(currentFieldName) || "allowPrimary".equals(currentFieldName)) {
        allowPrimary=parser.booleanValue();
      }
 else {
        throw new ElasticsearchParseException("[{}] command does not support field [{}]",NAME,currentFieldName);
      }
    }
 else {
      throw new ElasticsearchParseException("[{}] command does not support complex json tokens [{}]",NAME,token);
    }
  }
  if (index == null) {
    throw new ElasticsearchParseException("[{}] command missing the index parameter",NAME);
  }
  if (shardId == -1) {
    throw new ElasticsearchParseException("[{}] command missing the shard parameter",NAME);
  }
  if (nodeId == null) {
    throw new ElasticsearchParseException("[{}] command missing the node parameter",NAME);
  }
  return new CancelAllocationCommand(new ShardId(index,shardId),nodeId,allowPrimary);
}
