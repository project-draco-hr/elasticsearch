{
  for (int j=0; j < 100; j++) {
    int index=Math.min(randomInt(0,10),9);
    double tolerance=Math.random() * 0.01;
    double lookForValue=randomFreq(0.9) ? -1 : Double.NaN;
    double[] array=new double[10];
    for (int i=0; i < array.length; i++) {
      double value;
      if (randomFreq(0.9)) {
        value=Math.random() * 10;
        array[i]=value + ((randomFreq(0.5) ? 1 : -1) * Math.random() * tolerance);
      }
 else {
        value=Double.NaN;
        array[i]=value;
      }
      if (i == index && lookForValue < 0) {
        lookForValue=value;
      }
    }
    Arrays.sort(array);
    BitSet bitSet=new BitSet(10);
    for (int i=0; i < array.length; i++) {
      if (Double.isNaN(lookForValue) && Double.isNaN(array[i])) {
        bitSet.set(i);
      }
 else       if ((array[i] >= lookForValue - tolerance) && (array[i] <= lookForValue + tolerance)) {
        bitSet.set(i);
      }
    }
    int foundIndex=ArrayUtils.binarySearch(array,lookForValue,tolerance);
    if (bitSet.cardinality() == 0) {
      assertThat(foundIndex,is(-1));
    }
 else {
      assertThat(bitSet.get(foundIndex),is(true));
    }
  }
}
