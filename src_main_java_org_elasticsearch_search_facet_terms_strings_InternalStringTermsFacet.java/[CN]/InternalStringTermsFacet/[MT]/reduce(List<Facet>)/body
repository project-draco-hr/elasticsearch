{
  if (facets.size() == 1) {
    return facets.get(0);
  }
  InternalStringTermsFacet first=null;
  TObjectIntHashMap<Text> aggregated=CacheRecycler.popObjectIntMap();
  long missing=0;
  long total=0;
  for (  Facet facet : facets) {
    InternalTermsFacet termsFacet=(InternalTermsFacet)facet;
    missing+=termsFacet.getMissingCount();
    total+=termsFacet.getTotalCount();
    if (!(termsFacet instanceof InternalStringTermsFacet)) {
      return termsFacet.reduce(facets);
    }
    if (first == null) {
      first=(InternalStringTermsFacet)termsFacet;
    }
    for (    Entry entry : termsFacet.getEntries()) {
      aggregated.adjustOrPutValue(entry.getTerm(),entry.getCount(),entry.getCount());
    }
  }
  BoundedTreeSet<TermEntry> ordered=new BoundedTreeSet<TermEntry>(first.comparatorType.comparator(),first.requiredSize);
  for (TObjectIntIterator<Text> it=aggregated.iterator(); it.hasNext(); ) {
    it.advance();
    ordered.add(new TermEntry(it.key(),it.value()));
  }
  first.entries=ordered;
  first.missing=missing;
  first.total=total;
  CacheRecycler.pushObjectIntMap(aggregated);
  return first;
}
