{
  if (facets.size() == 1) {
    return facets.get(0);
  }
  InternalStringTermsFacet first=(InternalStringTermsFacet)facets.get(0);
  TObjectIntHashMap<BytesReference> aggregated=CacheRecycler.popObjectIntMap();
  long missing=0;
  long total=0;
  for (  Facet facet : facets) {
    InternalStringTermsFacet mFacet=(InternalStringTermsFacet)facet;
    missing+=mFacet.missingCount();
    total+=mFacet.totalCount();
    for (    TermEntry entry : mFacet.entries) {
      aggregated.adjustOrPutValue(entry.term(),entry.count(),entry.count());
    }
  }
  BoundedTreeSet<TermEntry> ordered=new BoundedTreeSet<TermEntry>(first.comparatorType.comparator(),first.requiredSize);
  for (TObjectIntIterator<BytesReference> it=aggregated.iterator(); it.hasNext(); ) {
    it.advance();
    ordered.add(new TermEntry(it.key(),it.value()));
  }
  first.entries=ordered;
  first.missing=missing;
  first.total=total;
  CacheRecycler.pushObjectIntMap(aggregated);
  return first;
}
