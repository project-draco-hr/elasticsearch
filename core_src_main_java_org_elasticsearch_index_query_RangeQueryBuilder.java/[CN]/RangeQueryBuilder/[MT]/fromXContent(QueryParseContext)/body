{
  XContentParser parser=parseContext.parser();
  String fieldName=null;
  Object from=null;
  Object to=null;
  boolean includeLower=RangeQueryBuilder.DEFAULT_INCLUDE_LOWER;
  boolean includeUpper=RangeQueryBuilder.DEFAULT_INCLUDE_UPPER;
  String timeZone=null;
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  String queryName=null;
  String format=null;
  String currentFieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (parseContext.isDeprecatedSetting(currentFieldName)) {
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      fieldName=currentFieldName;
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          currentFieldName=parser.currentName();
        }
 else {
          if (parseContext.parseFieldMatcher().match(currentFieldName,FROM_FIELD)) {
            from=parser.objectBytes();
          }
 else           if (parseContext.parseFieldMatcher().match(currentFieldName,TO_FIELD)) {
            to=parser.objectBytes();
          }
 else           if (parseContext.parseFieldMatcher().match(currentFieldName,INCLUDE_LOWER_FIELD)) {
            includeLower=parser.booleanValue();
          }
 else           if (parseContext.parseFieldMatcher().match(currentFieldName,INCLUDE_UPPER_FIELD)) {
            includeUpper=parser.booleanValue();
          }
 else           if (parseContext.parseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.BOOST_FIELD)) {
            boost=parser.floatValue();
          }
 else           if (parseContext.parseFieldMatcher().match(currentFieldName,GT_FIELD)) {
            from=parser.objectBytes();
            includeLower=false;
          }
 else           if (parseContext.parseFieldMatcher().match(currentFieldName,GTE_FIELD)) {
            from=parser.objectBytes();
            includeLower=true;
          }
 else           if (parseContext.parseFieldMatcher().match(currentFieldName,LT_FIELD)) {
            to=parser.objectBytes();
            includeUpper=false;
          }
 else           if (parseContext.parseFieldMatcher().match(currentFieldName,LTE_FIELD)) {
            to=parser.objectBytes();
            includeUpper=true;
          }
 else           if (parseContext.parseFieldMatcher().match(currentFieldName,TIME_ZONE_FIELD)) {
            timeZone=parser.text();
          }
 else           if (parseContext.parseFieldMatcher().match(currentFieldName,FORMAT_FIELD)) {
            format=parser.text();
          }
 else           if (parseContext.parseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.NAME_FIELD)) {
            queryName=parser.text();
          }
 else {
            throw new ParsingException(parser.getTokenLocation(),"[range] query does not support [" + currentFieldName + "]");
          }
        }
      }
    }
 else     if (token.isValue()) {
      if (parseContext.parseFieldMatcher().match(currentFieldName,NAME_FIELD)) {
        queryName=parser.text();
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,FIELDDATA_FIELD)) {
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"[range] query does not support [" + currentFieldName + "]");
      }
    }
  }
  RangeQueryBuilder rangeQuery=new RangeQueryBuilder(fieldName);
  rangeQuery.from(from);
  rangeQuery.to(to);
  rangeQuery.includeLower(includeLower);
  rangeQuery.includeUpper(includeUpper);
  if (timeZone != null) {
    rangeQuery.timeZone(timeZone);
  }
  rangeQuery.boost(boost);
  rangeQuery.queryName(queryName);
  if (format != null) {
    rangeQuery.format(format);
  }
  return rangeQuery;
}
