{
  IndexRequest indexRequest=new IndexRequest(request.param("index"),request.param("type"),request.param("id"));
  indexRequest.listenerThreaded(false);
  indexRequest.operationThreaded(true);
  indexRequest.routing(request.param("routing"));
  indexRequest.parent(request.param("parent"));
  indexRequest.timestamp(request.param("timestamp"));
  if (request.hasParam("ttl")) {
    indexRequest.ttl(request.paramAsTime("ttl",null).millis());
  }
  indexRequest.source(request.content(),request.contentUnsafe());
  indexRequest.timeout(request.paramAsTime("timeout",IndexRequest.DEFAULT_TIMEOUT));
  indexRequest.refresh(request.paramAsBoolean("refresh",indexRequest.refresh()));
  indexRequest.version(RestActions.parseVersion(request));
  indexRequest.versionType(VersionType.fromString(request.param("version_type"),indexRequest.versionType()));
  String sOpType=request.param("op_type");
  if (sOpType != null) {
    if ("index".equals(sOpType)) {
      indexRequest.opType(IndexRequest.OpType.INDEX);
    }
 else     if ("create".equals(sOpType)) {
      indexRequest.opType(IndexRequest.OpType.CREATE);
    }
 else {
      try {
        XContentBuilder builder=RestXContentBuilder.restContentBuilder(request);
        channel.sendResponse(new XContentRestResponse(request,BAD_REQUEST,builder.startObject().field("error","opType [" + sOpType + "] not allowed, either [index] or [create] are allowed").endObject()));
      }
 catch (      IOException e1) {
        logger.warn("Failed to send response",e1);
        return;
      }
    }
  }
  String replicationType=request.param("replication");
  if (replicationType != null) {
    indexRequest.replicationType(ReplicationType.fromString(replicationType));
  }
  String consistencyLevel=request.param("consistency");
  if (consistencyLevel != null) {
    indexRequest.consistencyLevel(WriteConsistencyLevel.fromString(consistencyLevel));
  }
  client.index(indexRequest,new ActionListener<IndexResponse>(){
    @Override public void onResponse(    IndexResponse response){
      try {
        XContentBuilder builder=RestXContentBuilder.restContentBuilder(request);
        builder.startObject().field(Fields._INDEX,response.getIndex()).field(Fields._TYPE,response.getType()).field(Fields._ID,response.getId()).field(Fields._VERSION,response.getVersion());
        builder.endObject();
        RestStatus status=OK;
        if (response.isCreated()) {
          status=CREATED;
        }
        channel.sendResponse(new XContentRestResponse(request,status,builder));
      }
 catch (      Throwable e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
