{
  long time=dateTime.getMillis();
  if (interval != 1) {
    time=CountDateHistogramFacetCollector.bucket(time,interval);
  }
  InternalFullDateHistogramFacet.FullEntry entry=entries.get(time);
  if (entry == null) {
    if (valueFieldData.multiValued()) {
      double[] valuesValues=valueFieldData.doubleValues(docId);
      entry=new InternalFullDateHistogramFacet.FullEntry(time,1,Double.MAX_VALUE,Double.MIN_VALUE,valuesValues.length,0);
      for (      double valueValue : valuesValues) {
        entry.total+=valueValue;
        if (valueValue < entry.min) {
          entry.min=valueValue;
        }
        if (valueValue > entry.max) {
          entry.max=valueValue;
        }
      }
      entries.put(time,entry);
    }
 else {
      double valueValue=valueFieldData.doubleValue(docId);
      entry=new InternalFullDateHistogramFacet.FullEntry(time,1,valueValue,valueValue,1,valueValue);
      entries.put(time,entry);
    }
  }
 else {
    entry.count++;
    if (valueFieldData.multiValued()) {
      double[] valuesValues=valueFieldData.doubleValues(docId);
      entry.totalCount+=valuesValues.length;
      for (      double valueValue : valuesValues) {
        entry.total+=valueValue;
        if (valueValue < entry.min) {
          entry.min=valueValue;
        }
        if (valueValue > entry.max) {
          entry.max=valueValue;
        }
      }
    }
 else {
      entry.totalCount++;
      double valueValue=valueFieldData.doubleValue(docId);
      entry.total+=valueValue;
      if (valueValue < entry.min) {
        entry.min=valueValue;
      }
      if (valueValue > entry.max) {
        entry.max=valueValue;
      }
    }
  }
}
