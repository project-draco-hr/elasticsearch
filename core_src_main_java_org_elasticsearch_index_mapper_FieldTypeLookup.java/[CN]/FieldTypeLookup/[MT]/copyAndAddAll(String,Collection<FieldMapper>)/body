{
  Objects.requireNonNull(type,"type must not be null");
  if (MapperService.DEFAULT_MAPPING.equals(type)) {
    throw new IllegalArgumentException("Default mappings should not be added to the lookup");
  }
  CopyOnWriteHashMap<String,MappedFieldTypeReference> fullName=this.fullNameToFieldType;
  CopyOnWriteHashMap<String,Set<String>> fullNameToTypes=this.fullNameToTypes;
  CopyOnWriteHashMap<String,MappedFieldTypeReference> indexName=this.indexNameToFieldType;
  CopyOnWriteHashMap<String,Set<String>> indexNameToTypes=this.indexNameToTypes;
  for (  FieldMapper fieldMapper : newFieldMappers) {
    MappedFieldType fieldType=fieldMapper.fieldType();
    MappedFieldTypeReference fullNameRef=fullName.get(fieldType.names().fullName());
    MappedFieldTypeReference indexNameRef=indexName.get(fieldType.names().indexName());
    if (fullNameRef == null && indexNameRef == null) {
      fullName=fullName.copyAndPut(fieldType.names().fullName(),fieldMapper.fieldTypeReference());
      indexName=indexName.copyAndPut(fieldType.names().indexName(),fieldMapper.fieldTypeReference());
    }
 else     if (fullNameRef == null) {
      fullName=fullName.copyAndPut(fieldType.names().fullName(),indexNameRef);
      indexNameRef.set(fieldMapper.fieldType());
      fieldMapper.setFieldTypeReference(indexNameRef);
    }
 else     if (indexNameRef == null) {
      indexName=indexName.copyAndPut(fieldType.names().indexName(),fullNameRef);
      fullNameRef.set(fieldMapper.fieldType());
      fieldMapper.setFieldTypeReference(fullNameRef);
    }
 else     if (fullNameRef == indexNameRef) {
      fullNameRef.set(fieldMapper.fieldType());
      fieldMapper.setFieldTypeReference(fullNameRef);
    }
 else {
      throw new IllegalStateException("insane mappings found. field " + fieldType.names().fullName() + " maps across types to field "+ fieldType.names().indexName());
    }
    fullNameToTypes=addType(fullNameToTypes,fieldType.names().fullName(),type);
    indexNameToTypes=addType(indexNameToTypes,fieldType.names().indexName(),type);
  }
  return new FieldTypeLookup(fullName,fullNameToTypes,indexName,indexNameToTypes);
}
