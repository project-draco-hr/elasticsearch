{
  assertAcked(prepareCreate("test").addMapping("type",jsonBuilder().startObject().startObject("type").startObject("properties").startObject("test").field("type","string").endObject().startObject("date").field("type","date").endObject().startObject("num").field("type","double").endObject().startObject("geo").field("type","geo_point").endObject().endObject().endObject().endObject()));
  ensureYellow();
  int numDocs=200;
  List<IndexRequestBuilder> indexBuilders=new ArrayList<IndexRequestBuilder>();
  for (int i=0; i < numDocs; i++) {
    double lat=100 + (int)(10.0 * (float)(i) / (float)(numDocs));
    double lon=100;
    int day=(int)(29.0 * (float)(i) / (float)(numDocs)) + 1;
    String dayString=day < 10 ? "0" + Integer.toString(day) : Integer.toString(day);
    String date="2013-05-" + dayString;
    indexBuilders.add(new IndexRequestBuilder(client()).setType("type").setId(Integer.toString(i)).setIndex("test").setSource(jsonBuilder().startObject().field("test","value").field("date",date).field("num",i).startObject("geo").field("lat",lat).field("lon",lon).endObject().endObject()));
  }
  IndexRequestBuilder[] builders=indexBuilders.toArray(new IndexRequestBuilder[indexBuilders.size()]);
  indexRandom(true,builders);
  List<Float> lonlat=new ArrayList<Float>();
  lonlat.add(new Float(100));
  lonlat.add(new Float(110));
  ActionFuture<SearchResponse> response=client().search(searchRequest().searchType(SearchType.QUERY_THEN_FETCH).source(searchSource().size(numDocs).query(functionScoreQuery(termQuery("test","value")).add(new MatchAllFilterBuilder(),linearDecayFunction("date","2013-05-30","+15d")).add(new MatchAllFilterBuilder(),linearDecayFunction("geo",lonlat,"1000km")).add(new MatchAllFilterBuilder(),linearDecayFunction("num",numDocs,numDocs / 2.0)).scoreMode("multiply").boostMode(CombineFunction.REPLACE.getName()))));
  SearchResponse sr=response.actionGet();
  ElasticsearchAssertions.assertNoFailures(sr);
  SearchHits sh=sr.getHits();
  assertThat(sh.hits().length,equalTo(numDocs));
  double[] scores=new double[numDocs];
  for (int i=0; i < numDocs; i++) {
    scores[Integer.parseInt(sh.getAt(i).getId())]=sh.getAt(i).getScore();
  }
  for (int i=0; i < numDocs - 1; i++) {
    assertThat(scores[i],lessThan(scores[i + 1]));
  }
}
