{
  assertAcked(prepareCreate("test").addMapping("type1",jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("test").field("type","string").endObject().startObject("num1").field("type","date").endObject().startObject("num2").field("type","double").endObject().endObject().endObject().endObject()));
  ensureYellow();
  client().index(indexRequest("test").type("type1").id("1").source(jsonBuilder().startObject().field("test","value").field("num1","2013-05-27").field("num2","1.0").endObject())).actionGet();
  client().index(indexRequest("test").type("type1").id("2").source(jsonBuilder().startObject().field("test","value").field("num2","1.0").endObject())).actionGet();
  client().index(indexRequest("test").type("type1").id("3").source(jsonBuilder().startObject().field("test","value").field("num1","2013-05-30").field("num2","1.0").endObject())).actionGet();
  client().index(indexRequest("test").type("type1").id("4").source(jsonBuilder().startObject().field("test","value").field("num1","2013-05-30").endObject())).actionGet();
  refresh();
  ActionFuture<SearchResponse> response=client().search(searchRequest().searchType(SearchType.QUERY_THEN_FETCH).source(searchSource().explain(false).query(functionScoreQuery(termQuery("test","value")).add(new MatchAllFilterBuilder(),linearDecayFunction("num1","2013-05-28","+3d")).add(new MatchAllFilterBuilder(),linearDecayFunction("num2","0.0","1")).scoreMode("multiply"))));
  SearchResponse sr=response.actionGet();
  ElasticsearchAssertions.assertNoFailures(sr);
  SearchHits sh=sr.getHits();
  assertThat(sh.hits().length,equalTo(4));
  double[] scores=new double[4];
  for (int i=0; i < sh.hits().length; i++) {
    scores[Integer.parseInt(sh.getAt(i).getId()) - 1]=sh.getAt(i).getScore();
  }
  assertThat(scores[0],lessThan(scores[1]));
  assertThat(scores[2],lessThan(scores[3]));
}
