{
  final long[] spaceUsedByShard=new long[]{0};
  if (Files.exists(path)) {
    Files.walkFileTree(path,new FileVisitor<Path>(){
      @Override public FileVisitResult preVisitDirectory(      Path dir,      BasicFileAttributes attrs) throws IOException {
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        if (attrs.isRegularFile()) {
          spaceUsedByShard[0]+=attrs.size();
        }
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult visitFileFailed(      Path file,      IOException exc) throws IOException {
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult postVisitDirectory(      Path dir,      IOException exc) throws IOException {
        return FileVisitResult.CONTINUE;
      }
    }
);
  }
  return spaceUsedByShard[0];
}
