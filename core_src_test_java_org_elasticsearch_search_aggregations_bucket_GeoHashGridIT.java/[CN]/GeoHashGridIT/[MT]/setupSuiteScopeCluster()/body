{
  createIndex("idx_unmapped");
  assertAcked(prepareCreate("idx").addMapping("type","location","type=geo_point","city","type=string,index=not_analyzed"));
  List<IndexRequestBuilder> cities=new ArrayList<>();
  Random random=getRandom();
  expectedDocCountsForGeoHash=new ObjectIntHashMap<>(numDocs * 2);
  for (int i=0; i < numDocs; i++) {
    double lat=(180d * random.nextDouble()) - 90d;
    double lng=(360d * random.nextDouble()) - 180d;
    String randomGeoHash=GeoHashUtils.stringEncode(lng,lat,GeoHashUtils.PRECISION);
    cities.add(indexCity("idx",randomGeoHash,lat + ", " + lng));
    expectedDocCountsForGeoHash.put(randomGeoHash,expectedDocCountsForGeoHash.getOrDefault(randomGeoHash,0) + 1);
    for (int precision=GeoHashUtils.PRECISION - 1; precision > 0; precision--) {
      String hash=GeoHashUtils.stringEncode(lng,lat,precision);
      if ((smallestGeoHash == null) || (hash.length() < smallestGeoHash.length())) {
        smallestGeoHash=hash;
      }
      expectedDocCountsForGeoHash.put(hash,expectedDocCountsForGeoHash.getOrDefault(hash,0) + 1);
    }
  }
  indexRandom(true,cities);
  assertAcked(prepareCreate("multi_valued_idx").addMapping("type","location","type=geo_point","city","type=string,index=not_analyzed"));
  cities=new ArrayList<>();
  multiValuedExpectedDocCountsForGeoHash=new ObjectIntHashMap<>(numDocs * 2);
  for (int i=0; i < numDocs; i++) {
    final int numPoints=random.nextInt(4);
    List<String> points=new ArrayList<>();
    Set<String> geoHashes=new HashSet<>();
    for (int j=0; j < numPoints; ++j) {
      double lat=(180d * random.nextDouble()) - 90d;
      double lng=(360d * random.nextDouble()) - 180d;
      points.add(lat + "," + lng);
      for (int precision=GeoHashUtils.PRECISION; precision > 0; precision--) {
        final String geoHash=GeoHashUtils.stringEncode(lng,lat,precision);
        geoHashes.add(geoHash);
      }
    }
    cities.add(indexCity("multi_valued_idx",Integer.toString(i),points));
    for (    String hash : geoHashes) {
      multiValuedExpectedDocCountsForGeoHash.put(hash,multiValuedExpectedDocCountsForGeoHash.getOrDefault(hash,0) + 1);
    }
  }
  indexRandom(true,cities);
  ensureSearchable();
}
