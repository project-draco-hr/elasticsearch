{
  this.index=index;
  this.type=rootObjectMapper.name();
  this.docMapperParser=docMapperParser;
  this.attributes=attributes;
  this.rootObjectMapper=rootObjectMapper;
  this.uidFieldMapper=uidFieldMapper;
  this.idFieldMapper=idFieldMapper;
  this.typeFieldMapper=typeFieldMapper;
  this.indexFieldMapper=indexFieldMapper;
  this.sourceFieldMapper=sourceFieldMapper;
  this.allFieldMapper=allFieldMapper;
  this.boostFieldMapper=boostFieldMapper;
  this.indexAnalyzer=indexAnalyzer;
  this.searchAnalyzer=searchAnalyzer;
  this.typeFilter=new TermFilter(typeMapper().term(type));
  if (!allFieldMapper.enabled()) {
    this.rootObjectMapper.includeInAll(allFieldMapper.enabled());
  }
  rootObjectMapper.putMapper(idFieldMapper);
  if (boostFieldMapper != null) {
    rootObjectMapper.putMapper(boostFieldMapper);
  }
  final List<FieldMapper> tempFieldMappers=newArrayList();
  if (indexFieldMapper.enabled()) {
    tempFieldMappers.add(indexFieldMapper);
  }
  tempFieldMappers.add(typeFieldMapper);
  tempFieldMappers.add(sourceFieldMapper);
  tempFieldMappers.add(uidFieldMapper);
  tempFieldMappers.add(allFieldMapper);
  if (boostFieldMapper != null) {
    tempFieldMappers.add(boostFieldMapper);
  }
  rootObjectMapper.traverse(new FieldMapperListener(){
    @Override public void fieldMapper(    FieldMapper fieldMapper){
      tempFieldMappers.add(fieldMapper);
    }
  }
);
  this.fieldMappers=new DocumentFieldMappers(this,tempFieldMappers);
  refreshSource();
}
