{
  ParseContext context=cache.get().get();
  if (source.type() != null && !source.type().equals(this.type)) {
    throw new MapperParsingException("Type mismatch, provide type [" + source.type() + "] but mapper is of type ["+ this.type+ "]");
  }
  source.type(this.type);
  XContentParser parser=source.parser();
  try {
    if (parser == null) {
      if (LZFDecoder.isCompressed(source.source())) {
        BytesStreamInput siBytes=new BytesStreamInput(source.source());
        LZFStreamInput siLzf=CachedStreamInput.cachedLzf(siBytes);
        XContentType contentType=XContentFactory.xContentType(siLzf);
        siLzf.resetToBufferStart();
        parser=XContentFactory.xContent(contentType).createParser(siLzf);
      }
 else {
        parser=XContentFactory.xContent(source.source()).createParser(source.source());
      }
    }
    context.reset(parser,new Document(),type,source.source(),source.flyweight(),listener);
    int countDownTokens=0;
    XContentParser.Token token=parser.nextToken();
    if (token != XContentParser.Token.START_OBJECT) {
      throw new MapperParsingException("Malformed content, must start with an object");
    }
    token=parser.nextToken();
    if (token != XContentParser.Token.FIELD_NAME) {
      throw new MapperParsingException("Malformed content, after first object, either the type field or the actual properties should exist");
    }
    if (parser.currentName().equals(type)) {
      token=parser.nextToken();
      countDownTokens++;
    }
    if (sizeFieldMapper.enabled()) {
      context.externalValue(source.source().length);
      sizeFieldMapper.parse(context);
    }
    if (sourceFieldMapper.enabled()) {
      sourceFieldMapper.parse(context);
    }
    if (source.id() != null) {
      context.id(source.id());
      uidFieldMapper.parse(context);
    }
    typeFieldMapper.parse(context);
    if (source.routing() != null) {
      context.externalValue(source.routing());
      routingFieldMapper.parse(context);
    }
    indexFieldMapper.parse(context);
    rootObjectMapper.parse(context);
    for (int i=0; i < countDownTokens; i++) {
      parser.nextToken();
    }
    if (source.id() == null) {
      if (context.id() == null) {
        if (!source.flyweight()) {
          throw new MapperParsingException("No id found while parsing the content source");
        }
      }
 else {
        uidFieldMapper.parse(context);
      }
    }
    if (context.parsedIdState() != ParseContext.ParsedIdState.PARSED) {
      if (context.id() == null) {
        if (!source.flyweight()) {
          throw new MapperParsingException("No id mapping with [_id] found in the content, and not explicitly set");
        }
      }
 else {
        context.parsedId(ParseContext.ParsedIdState.EXTERNAL);
        idFieldMapper.parse(context);
      }
    }
    if (parentFieldMapper != null) {
      context.externalValue(source.parent());
      parentFieldMapper.parse(context);
    }
    analyzerMapper.parse(context);
    allFieldMapper.parse(context);
    routingFieldMapper.validate(context,source.routing());
  }
 catch (  IOException e) {
    throw new MapperParsingException("Failed to parse",e);
  }
 finally {
    if (source.parser() == null && parser != null) {
      parser.close();
    }
  }
  ParsedDocument doc=new ParsedDocument(context.uid(),context.id(),context.type(),source.routing(),context.doc(),context.analyzer(),context.source(),context.mappersAdded()).parent(source.parent());
  context.reset(null,null,null,null,false,null);
  return doc;
}
