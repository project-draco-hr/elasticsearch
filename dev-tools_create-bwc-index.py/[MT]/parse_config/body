def parse_config():
    parser = argparse.ArgumentParser(description='Builds an elasticsearch index for backwards compatibility tests')
    parser.add_argument('version', metavar='X.Y.Z', help='The elasticsearch version to build an index for')
    parser.add_argument('--releases-dir', '-d', default='backwards', metavar='DIR', help='The directory containing elasticsearch releases')
    parser.add_argument('--output-dir', '-o', default='src/test/resources/org/elasticsearch/bwcompat', help='The directory to write the zipped index into')
    parser.add_argument('--tcp-port', default=9300, type=int, help='The port to use as the minimum port for TCP communication')
    parser.add_argument('--http-port', default=9200, type=int, help='The port to use as the minimum port for HTTP communication')
    cfg = parser.parse_args()
    if (cfg.version in BLACK_LIST):
        entry = BLACK_LIST[cfg.version]
        msg = ('Cannot use version %s\n  reason: %s\n  issue: %s' % (cfg.version, entry['reason'], entry['issue']))
        parser.error(msg)
    cfg.release_dir = os.path.join(cfg.releases_dir, ('elasticsearch-%s' % cfg.version))
    if (not os.path.exists(cfg.release_dir)):
        parser.error(('ES version %s does not exist in %s' % (cfg.version, cfg.releases_dir)))
    if (not os.path.exists(cfg.output_dir)):
        parser.error(('Output directory does not exist: %s' % cfg.output_dir))
    cfg.tmp_dir = tempfile.mkdtemp()
    cfg.data_dir = os.path.join(cfg.tmp_dir, 'data')
    logging.info(('Temp data dir: %s' % cfg.data_dir))
    return cfg
