{
  if (withoutType.containsKey("_routing")) {
    boolean required=false;
    Map<String,Object> routingNode=(Map<String,Object>)withoutType.get("_routing");
    for (    Map.Entry<String,Object> entry : routingNode.entrySet()) {
      String fieldName=entry.getKey();
      Object fieldNode=entry.getValue();
      if (fieldName.equals("required")) {
        required=lenientNodeBooleanValue(fieldNode);
      }
    }
    this.routing=new Routing(required);
  }
 else {
    this.routing=Routing.EMPTY;
  }
  if (withoutType.containsKey("_timestamp")) {
    boolean enabled=false;
    String format=TimestampFieldMapper.DEFAULT_DATE_TIME_FORMAT;
    String defaultTimestamp=TimestampFieldMapper.Defaults.DEFAULT_TIMESTAMP;
    Boolean ignoreMissing=null;
    Map<String,Object> timestampNode=(Map<String,Object>)withoutType.get("_timestamp");
    for (    Map.Entry<String,Object> entry : timestampNode.entrySet()) {
      String fieldName=entry.getKey();
      Object fieldNode=entry.getValue();
      if (fieldName.equals("enabled")) {
        enabled=lenientNodeBooleanValue(fieldNode);
      }
 else       if (fieldName.equals("format")) {
        format=fieldNode.toString();
      }
 else       if (fieldName.equals("default") && fieldNode != null) {
        defaultTimestamp=fieldNode.toString();
      }
 else       if (fieldName.equals("ignore_missing")) {
        ignoreMissing=lenientNodeBooleanValue(fieldNode);
      }
    }
    this.timestamp=new Timestamp(enabled,format,defaultTimestamp,ignoreMissing);
  }
 else {
    this.timestamp=Timestamp.EMPTY;
  }
  if (withoutType.containsKey("_parent")) {
    this.hasParentField=true;
  }
 else {
    this.hasParentField=false;
  }
}
