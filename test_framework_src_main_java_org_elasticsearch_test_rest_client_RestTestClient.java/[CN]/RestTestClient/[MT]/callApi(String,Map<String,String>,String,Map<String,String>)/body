{
  if ("raw".equals(apiName)) {
    Map<String,String> queryStringParams=new HashMap<>(params);
    String method=Objects.requireNonNull(queryStringParams.remove("method"),"Method must be set to use raw request");
    String path="/" + Objects.requireNonNull(queryStringParams.remove("path"),"Path must be set to use raw request");
    HttpEntity entity=null;
    if (body != null && body.length() > 0) {
      entity=new StringEntity(body,RestClient.JSON_CONTENT_TYPE);
    }
    Response response=restClient.performRequest(method,path,queryStringParams,entity);
    return new RestTestResponse(response);
  }
  List<Integer> ignores=new ArrayList<>();
  Map<String,String> requestParams;
  if (params == null) {
    requestParams=Collections.emptyMap();
  }
 else {
    requestParams=new HashMap<>(params);
    if (params.isEmpty() == false) {
      String ignoreString=requestParams.remove("ignore");
      if (ignoreString != null) {
        try {
          ignores.add(Integer.valueOf(ignoreString));
        }
 catch (        NumberFormatException e) {
          throw new IllegalArgumentException("ignore value should be a number, found [" + ignoreString + "] instead");
        }
      }
    }
  }
  boolean indexCreateApi="create".equals(apiName);
  String api=indexCreateApi ? "index" : apiName;
  RestApi restApi=restApi(api);
  Map<String,String> pathParts=new HashMap<>();
  Map<String,String> queryStringParams=new HashMap<>();
  for (  Map.Entry<String,String> entry : requestParams.entrySet()) {
    if (restApi.getPathParts().contains(entry.getKey())) {
      pathParts.put(entry.getKey(),entry.getValue());
    }
 else {
      if (restApi.getParams().contains(entry.getKey()) || ALWAYS_ACCEPTED_QUERY_STRING_PARAMS.contains(entry.getKey())) {
        queryStringParams.put(entry.getKey(),entry.getValue());
      }
 else {
        throw new IllegalArgumentException("param [" + entry.getKey() + "] not supported in ["+ restApi.getName()+ "] "+ "api");
      }
    }
  }
  if (indexCreateApi) {
    queryStringParams.put("op_type","create");
  }
  List<String> supportedMethods=restApi.getSupportedMethods(pathParts.keySet());
  String requestMethod;
  StringEntity requestBody=null;
  if (Strings.hasLength(body)) {
    if (!restApi.isBodySupported()) {
      throw new IllegalArgumentException("body is not supported by [" + restApi.getName() + "] api");
    }
    if (supportedMethods.contains("GET") && RandomizedTest.rarely()) {
      logger.debug("sending the request body as source param with GET method");
      queryStringParams.put("source",body);
      requestMethod="GET";
    }
 else {
      requestMethod=RandomizedTest.randomFrom(supportedMethods);
      requestBody=new StringEntity(body,RestClient.JSON_CONTENT_TYPE);
    }
  }
 else {
    if (restApi.isBodyRequired()) {
      throw new IllegalArgumentException("body is required by [" + restApi.getName() + "] api");
    }
    requestMethod=RandomizedTest.randomFrom(supportedMethods);
  }
  RestPath restPath=RandomizedTest.randomFrom(restApi.getFinalPaths(pathParts));
  String requestPath;
  if (restPath.getPathParts().length == 0) {
    requestPath="/";
  }
 else {
    StringBuilder finalPath=new StringBuilder();
    for (    String pathPart : restPath.getPathParts()) {
      try {
        finalPath.append('/');
        URI uri=new URI(null,null,null,-1,"/" + pathPart,null,null);
        finalPath.append(uri.getRawPath().substring(1).replaceAll("/","%2F"));
      }
 catch (      URISyntaxException e) {
        throw new RuntimeException("unable to build uri",e);
      }
    }
    requestPath=finalPath.toString();
  }
  Header[] requestHeaders=new Header[headers.size()];
  int index=0;
  for (  Map.Entry<String,String> header : headers.entrySet()) {
    logger.info("Adding header {}\n with value {}",header.getKey(),header.getValue());
    requestHeaders[index++]=new BasicHeader(header.getKey(),header.getValue());
  }
  logger.debug("calling api [{}]",apiName);
  try {
    Response response=restClient.performRequest(requestMethod,requestPath,queryStringParams,requestBody,requestHeaders);
    return new RestTestResponse(response);
  }
 catch (  ResponseException e) {
    if (ignores.contains(e.getResponse().getStatusLine().getStatusCode())) {
      return new RestTestResponse(e.getResponse());
    }
    throw e;
  }
}
