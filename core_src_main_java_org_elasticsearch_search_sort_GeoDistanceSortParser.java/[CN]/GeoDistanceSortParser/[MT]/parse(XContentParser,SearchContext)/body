{
  String fieldName=null;
  List<GeoPoint> geoPoints=new ArrayList<>();
  DistanceUnit unit=DistanceUnit.DEFAULT;
  GeoDistance geoDistance=GeoDistance.DEFAULT;
  boolean reverse=false;
  MultiValueMode sortMode=null;
  NestedInnerQueryParseSupport nestedHelper=null;
  final boolean indexCreatedBeforeV2_0=context.indexShard().getIndexSettings().getIndexVersionCreated().before(Version.V_2_0_0);
  boolean coerce=false;
  boolean ignoreMalformed=false;
  XContentParser.Token token;
  String currentName=parser.currentName();
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      parseGeoPoints(parser,geoPoints);
      fieldName=currentName;
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("nested_filter".equals(currentName) || "nestedFilter".equals(currentName)) {
        if (nestedHelper == null) {
          nestedHelper=new NestedInnerQueryParseSupport(parser,context);
        }
        nestedHelper.filter();
      }
 else {
        fieldName=currentName;
        GeoPoint point=new GeoPoint();
        GeoUtils.parseGeoPoint(parser,point);
        geoPoints.add(point);
      }
    }
 else     if (token.isValue()) {
      if ("reverse".equals(currentName)) {
        reverse=parser.booleanValue();
      }
 else       if ("order".equals(currentName)) {
        reverse="desc".equals(parser.text());
      }
 else       if (currentName.equals("unit")) {
        unit=DistanceUnit.fromString(parser.text());
      }
 else       if (currentName.equals("distance_type") || currentName.equals("distanceType")) {
        geoDistance=GeoDistance.fromString(parser.text());
      }
 else       if ("coerce".equals(currentName) || (indexCreatedBeforeV2_0 && "normalize".equals(currentName))) {
        coerce=parser.booleanValue();
        if (coerce == true) {
          ignoreMalformed=true;
        }
      }
 else       if ("ignore_malformed".equals(currentName) && coerce == false) {
        ignoreMalformed=parser.booleanValue();
      }
 else       if ("sort_mode".equals(currentName) || "sortMode".equals(currentName) || "mode".equals(currentName)) {
        sortMode=MultiValueMode.fromString(parser.text());
      }
 else       if ("nested_path".equals(currentName) || "nestedPath".equals(currentName)) {
        if (nestedHelper == null) {
          nestedHelper=new NestedInnerQueryParseSupport(parser,context);
        }
        nestedHelper.setPath(parser.text());
      }
 else {
        GeoPoint point=new GeoPoint();
        point.resetFromString(parser.text());
        geoPoints.add(point);
        fieldName=currentName;
      }
    }
  }
  if (!indexCreatedBeforeV2_0 && !ignoreMalformed) {
    for (    GeoPoint point : geoPoints) {
      if (point.lat() > 90.0 || point.lat() < -90.0) {
        throw new ElasticsearchParseException("illegal latitude value [{}] for [GeoDistanceSort]",point.lat());
      }
      if (point.lon() > 180.0 || point.lon() < -180) {
        throw new ElasticsearchParseException("illegal longitude value [{}] for [GeoDistanceSort]",point.lon());
      }
    }
  }
  if (coerce) {
    for (    GeoPoint point : geoPoints) {
      GeoUtils.normalizePoint(point,coerce,coerce);
    }
  }
  if (sortMode == null) {
    sortMode=reverse ? MultiValueMode.MAX : MultiValueMode.MIN;
  }
  if (sortMode == MultiValueMode.SUM) {
    throw new IllegalArgumentException("sort_mode [sum] isn't supported for sorting by geo distance");
  }
  MappedFieldType fieldType=context.smartNameFieldType(fieldName);
  if (fieldType == null) {
    throw new IllegalArgumentException("failed to find mapper for [" + fieldName + "] for geo distance based sort");
  }
  final MultiValueMode finalSortMode=sortMode;
  final IndexGeoPointFieldData geoIndexFieldData=context.fieldData().getForField(fieldType);
  final FixedSourceDistance[] distances=new FixedSourceDistance[geoPoints.size()];
  for (int i=0; i < geoPoints.size(); i++) {
    distances[i]=geoDistance.fixedSourceDistance(geoPoints.get(i).lat(),geoPoints.get(i).lon(),unit);
  }
  final Nested nested;
  if (nestedHelper != null && nestedHelper.getPath() != null) {
    BitSetProducer rootDocumentsFilter=context.bitsetFilterCache().getBitSetProducer(Queries.newNonNestedFilter());
    Query innerDocumentsFilter;
    if (nestedHelper.filterFound()) {
      innerDocumentsFilter=nestedHelper.getInnerFilter();
    }
 else {
      innerDocumentsFilter=nestedHelper.getNestedObjectMapper().nestedTypeFilter();
    }
    nested=new Nested(rootDocumentsFilter,context.searcher().createNormalizedWeight(innerDocumentsFilter,false));
  }
 else {
    nested=null;
  }
  IndexFieldData.XFieldComparatorSource geoDistanceComparatorSource=new IndexFieldData.XFieldComparatorSource(){
    @Override public SortField.Type reducedType(){
      return SortField.Type.DOUBLE;
    }
    @Override public FieldComparator<?> newComparator(    String fieldname,    int numHits,    int sortPos,    boolean reversed) throws IOException {
      return new FieldComparator.DoubleComparator(numHits,null,null){
        @Override protected NumericDocValues getNumericDocValues(        LeafReaderContext context,        String field) throws IOException {
          final MultiGeoPointValues geoPointValues=geoIndexFieldData.load(context).getGeoPointValues();
          final SortedNumericDoubleValues distanceValues=GeoDistance.distanceValues(geoPointValues,distances);
          final NumericDoubleValues selectedValues;
          if (nested == null) {
            selectedValues=finalSortMode.select(distanceValues,Double.MAX_VALUE);
          }
 else {
            final BitSet rootDocs=nested.rootDocs(context);
            final DocIdSetIterator innerDocs=nested.innerDocs(context);
            selectedValues=finalSortMode.select(distanceValues,Double.MAX_VALUE,rootDocs,innerDocs,context.reader().maxDoc());
          }
          return selectedValues.getRawDoubleValues();
        }
      }
;
    }
  }
;
  return new SortField(fieldName,geoDistanceComparatorSource,reverse);
}
