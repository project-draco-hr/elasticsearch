{
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","scaled_float").field("scaling_factor",10.0).endObject().endObject().endObject().endObject().string();
  DocumentMapper mapper=parser.parse("type",new CompressedXContent(mapping));
  assertEquals(mapping,mapper.mappingSource().toString());
  ParsedDocument doc=mapper.parse("test","type","1",XContentFactory.jsonBuilder().startObject().nullField("field").endObject().bytes());
  assertArrayEquals(new IndexableField[0],doc.rootDoc().getFields("field"));
  mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","scaled_float").field("scaling_factor",10.0).field("null_value",2.5).endObject().endObject().endObject().endObject().string();
  mapper=parser.parse("type",new CompressedXContent(mapping));
  assertEquals(mapping,mapper.mappingSource().toString());
  doc=mapper.parse("test","type","1",XContentFactory.jsonBuilder().startObject().nullField("field").endObject().bytes());
  IndexableField[] fields=doc.rootDoc().getFields("field");
  assertEquals(2,fields.length);
  IndexableField pointField=fields[0];
  assertEquals(1,pointField.fieldType().pointDimensionCount());
  assertFalse(pointField.fieldType().stored());
  assertEquals(25,pointField.numericValue().longValue());
  IndexableField dvField=fields[1];
  assertEquals(DocValuesType.SORTED_NUMERIC,dvField.fieldType().docValuesType());
  assertFalse(dvField.fieldType().stored());
}
