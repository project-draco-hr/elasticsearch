{
  final String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("geopoint").field("type","geo_point").startObject("fielddata").field("format","doc_values").endObject().endObject().endObject().endObject().endObject().string();
  final DocumentMapper mapper=mapperService.documentMapperParser().parse(mapping);
  Random random=getRandom();
  int atLeast=scaledRandomIntBetween(200,1500);
  int maxValuesPerDoc=randomBoolean() ? 1 : randomIntBetween(2,10);
  double defaultLat=randomDouble() * 180 - 90;
  double defaultLon=randomDouble() * 360 - 180;
  for (int i=0; i < atLeast; i++) {
    final int numValues=randomInt(maxValuesPerDoc);
    XContentBuilder doc=XContentFactory.jsonBuilder().startObject().startArray("geopoint");
    for (int j=0; j < numValues; ++j) {
      if (randomBoolean()) {
        doc.startObject().field("lat",defaultLat).field("lon",defaultLon).endObject();
      }
 else {
        doc.startObject().field("lat",randomDouble() * 180 - 90).field("lon",randomDouble() * 360 - 180).endObject();
      }
    }
    doc=doc.endArray().endObject();
    final ParsedDocument d=mapper.parse("test","type",Integer.toString(i),doc.bytes());
    writer.addDocument(d.rootDoc());
    if (random.nextInt(10) == 0) {
      refreshReader();
    }
  }
  LeafReaderContext context=refreshReader();
  Map<FieldDataType,Type> typeMap=new HashMap<>();
  final Distance precision=new Distance(1,randomFrom(DistanceUnit.values()));
  typeMap.put(new FieldDataType("geo_point",Settings.builder().put("format","array")),Type.GeoPoint);
  typeMap.put(new FieldDataType("geo_point",Settings.builder().put("format","doc_values")),Type.GeoPoint);
  ArrayList<Entry<FieldDataType,Type>> list=new ArrayList<>(typeMap.entrySet());
  while (!list.isEmpty()) {
    Entry<FieldDataType,Type> left;
    Entry<FieldDataType,Type> right;
    if (list.size() > 1) {
      left=list.remove(random.nextInt(list.size()));
      right=list.remove(random.nextInt(list.size()));
    }
 else {
      right=left=list.remove(0);
    }
    ifdService.clear();
    IndexGeoPointFieldData leftFieldData=getForField(left.getKey(),left.getValue().name().toLowerCase(Locale.ROOT));
    ifdService.clear();
    IndexGeoPointFieldData rightFieldData=getForField(right.getKey(),right.getValue().name().toLowerCase(Locale.ROOT));
    duelFieldDataGeoPoint(random,context,leftFieldData,rightFieldData,precision);
    duelFieldDataGeoPoint(random,context,rightFieldData,leftFieldData,precision);
    DirectoryReader perSegment=DirectoryReader.open(writer,true);
    CompositeReaderContext composite=perSegment.getContext();
    List<LeafReaderContext> leaves=composite.leaves();
    for (    LeafReaderContext atomicReaderContext : leaves) {
      duelFieldDataGeoPoint(random,atomicReaderContext,leftFieldData,rightFieldData,precision);
    }
    perSegment.close();
  }
}
