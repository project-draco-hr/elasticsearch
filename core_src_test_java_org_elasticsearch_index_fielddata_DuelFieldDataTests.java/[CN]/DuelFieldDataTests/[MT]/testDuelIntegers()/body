{
  final String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("byte").field("type","byte").startObject("fielddata").field("format","doc_values").endObject().endObject().startObject("short").field("type","short").startObject("fielddata").field("format","doc_values").endObject().endObject().startObject("integer").field("type","integer").startObject("fielddata").field("format","doc_values").endObject().endObject().startObject("long").field("type","long").startObject("fielddata").field("format","doc_values").endObject().endObject().endObject().endObject().endObject().string();
  final DocumentMapper mapper=mapperService.documentMapperParser().parse(mapping);
  Random random=getRandom();
  int atLeast=scaledRandomIntBetween(1000,1500);
  final int maxNumValues=randomBoolean() ? 1 : randomIntBetween(2,40);
  byte[] values=new byte[maxNumValues];
  for (int i=0; i < atLeast; i++) {
    int numValues=randomInt(maxNumValues);
    Set<Byte> vals=new HashSet<Byte>();
    for (int j=0; j < numValues; ++j) {
      vals.add(randomByte());
    }
    numValues=vals.size();
    int upto=0;
    for (    Byte bb : vals) {
      values[upto++]=bb.byteValue();
    }
    XContentBuilder doc=XContentFactory.jsonBuilder().startObject();
    for (    String fieldName : Arrays.asList("byte","short","integer","long")) {
      doc=doc.startArray(fieldName);
      for (int j=0; j < numValues; ++j) {
        doc=doc.value(values[j]);
      }
      doc=doc.endArray();
    }
    doc=doc.endObject();
    final ParsedDocument d=mapper.parse("test","type",Integer.toString(i),doc.bytes());
    writer.addDocument(d.rootDoc());
    if (random.nextInt(10) == 0) {
      refreshReader();
    }
  }
  LeafReaderContext context=refreshReader();
  Map<FieldDataType,Type> typeMap=new HashMap<>();
  typeMap.put(new FieldDataType("byte",Settings.builder().put("format","array")),Type.Integer);
  typeMap.put(new FieldDataType("short",Settings.builder().put("format","array")),Type.Integer);
  typeMap.put(new FieldDataType("int",Settings.builder().put("format","array")),Type.Integer);
  typeMap.put(new FieldDataType("long",Settings.builder().put("format","array")),Type.Long);
  typeMap.put(new FieldDataType("byte",Settings.builder().put("format","doc_values")),Type.Integer);
  typeMap.put(new FieldDataType("short",Settings.builder().put("format","doc_values")),Type.Integer);
  typeMap.put(new FieldDataType("int",Settings.builder().put("format","doc_values")),Type.Integer);
  typeMap.put(new FieldDataType("long",Settings.builder().put("format","doc_values")),Type.Long);
  ArrayList<Entry<FieldDataType,Type>> list=new ArrayList<>(typeMap.entrySet());
  while (!list.isEmpty()) {
    Entry<FieldDataType,Type> left;
    Entry<FieldDataType,Type> right;
    if (list.size() > 1) {
      left=list.remove(random.nextInt(list.size()));
      right=list.remove(random.nextInt(list.size()));
    }
 else {
      right=left=list.remove(0);
    }
    ifdService.clear();
    IndexNumericFieldData leftFieldData=getForField(left.getKey(),left.getValue().name().toLowerCase(Locale.ROOT));
    ifdService.clear();
    IndexNumericFieldData rightFieldData=getForField(right.getKey(),right.getValue().name().toLowerCase(Locale.ROOT));
    duelFieldDataLong(random,context,leftFieldData,rightFieldData);
    duelFieldDataLong(random,context,rightFieldData,leftFieldData);
    DirectoryReader perSegment=DirectoryReader.open(writer,true);
    CompositeReaderContext composite=perSegment.getContext();
    List<LeafReaderContext> leaves=composite.leaves();
    for (    LeafReaderContext atomicReaderContext : leaves) {
      duelFieldDataLong(random,atomicReaderContext,leftFieldData,rightFieldData);
    }
  }
}
