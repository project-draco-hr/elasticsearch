{
  int sigDigits=randomSignificantDigits();
  boolean asc=randomBoolean();
  SearchResponse searchResponse=client().prepareSearch("idx").setQuery(matchAllQuery()).addAggregation(histogram("histo").field("value").interval(2L).subAggregation(percentiles("percentiles").field("value").method(PercentilesMethod.HDR).numberOfSignificantValueDigits(sigDigits).percentiles(99)).order(Order.aggregation("percentiles","99",asc))).execute().actionGet();
  assertHitCount(searchResponse,10);
  Histogram histo=searchResponse.getAggregations().get("histo");
  double previous=asc ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
  for (  Histogram.Bucket bucket : histo.getBuckets()) {
    Percentiles percentiles=bucket.getAggregations().get("percentiles");
    double p99=percentiles.percentile(99);
    if (asc) {
      assertThat(p99,greaterThanOrEqualTo(previous));
    }
 else {
      assertThat(p99,lessThanOrEqualTo(previous));
    }
    previous=p99;
  }
}
