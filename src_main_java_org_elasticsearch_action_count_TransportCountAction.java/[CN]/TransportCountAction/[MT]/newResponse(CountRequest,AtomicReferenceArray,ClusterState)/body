{
  int successfulShards=0;
  int failedShards=0;
  long count=0;
  boolean terminatedEarly=false;
  List<ShardOperationFailedException> shardFailures=null;
  for (int i=0; i < shardsResponses.length(); i++) {
    Object shardResponse=shardsResponses.get(i);
    if (shardResponse == null) {
    }
 else     if (shardResponse instanceof BroadcastShardOperationFailedException) {
      failedShards++;
      if (shardFailures == null) {
        shardFailures=newArrayList();
      }
      shardFailures.add(new DefaultShardOperationFailedException((BroadcastShardOperationFailedException)shardResponse));
    }
 else {
      count+=((ShardCountResponse)shardResponse).getCount();
      if (((ShardCountResponse)shardResponse).terminatedEarly()) {
        terminatedEarly=true;
      }
      successfulShards++;
    }
  }
  return new CountResponse(count,terminatedEarly,shardsResponses.length(),successfulShards,failedShards,shardFailures);
}
