{
  final ObjectIntOpenHashMap<String> allocs=new ObjectIntOpenHashMap<String>();
  for (  ShardRouting shard : state.getState().routingTable().allShards()) {
    String nodeId="UNASSIGNED";
    if (shard.assignedToNode()) {
      nodeId=shard.currentNodeId();
    }
    allocs.addTo(nodeId,1);
  }
  Table table=getTableWithHeader(request);
  for (  NodeStats nodeStats : stats.getNodes()) {
    DiscoveryNode node=nodeStats.getNode();
    int shardCount=0;
    if (allocs.containsKey(node.id())) {
      shardCount=allocs.lget();
    }
    long used=nodeStats.getFs().getTotal().getTotal().bytes() - nodeStats.getFs().getTotal().getAvailable().bytes();
    long avail=nodeStats.getFs().getTotal().getAvailable().bytes();
    short diskPercent=-1;
    if (used >= 0 && avail >= 0) {
      diskPercent=(short)(used * 100 / (used + avail));
    }
    table.startRow();
    table.addCell(shardCount);
    table.addCell(used < 0 ? null : new ByteSizeValue(used));
    table.addCell(avail < 0 ? null : new ByteSizeValue(avail));
    table.addCell(nodeStats.getFs().getTotal().getTotal());
    table.addCell(diskPercent < 0 ? null : diskPercent);
    table.addCell(node == null ? null : node.getHostName());
    table.addCell(node == null ? null : node.getHostAddress());
    table.addCell(node == null ? "UNASSIGNED" : node.name());
    table.endRow();
  }
  if (allocs.containsKey("UNASSIGNED")) {
    table.startRow();
    table.addCell(allocs.lget());
    table.addCell(null);
    table.addCell(null);
    table.addCell(null);
    table.addCell(null);
    table.addCell(null);
    table.addCell(null);
    table.addCell("UNASSIGNED");
    table.endRow();
  }
  return table;
}
