{
  assertAcked(prepareCreate("test").addMapping("type","field1","type=string","field2","type=string"));
  ensureGreen();
  int numQueries=scaledRandomIntBetween(250,500);
  int numUniqueQueries=between(1,numQueries / 2);
  String[] values=new String[numUniqueQueries];
  for (int i=0; i < values.length; i++) {
    values[i]="value" + i;
  }
  int[] expectedCount=new int[numUniqueQueries];
  logger.info("--> registering {} queries",numQueries);
  for (int i=0; i < numQueries; i++) {
    String value=values[i % numUniqueQueries];
    expectedCount[i % numUniqueQueries]++;
    QueryBuilder queryBuilder=matchQuery("field1",value);
    client().prepareIndex("test",PercolatorService.TYPE_NAME,Integer.toString(i)).setSource(jsonBuilder().startObject().field("query",queryBuilder).field("field2","b").endObject()).execute().actionGet();
  }
  client().admin().indices().prepareRefresh("test").execute().actionGet();
  for (int i=0; i < numQueries; i++) {
    String value=values[i % numUniqueQueries];
    PercolateRequestBuilder percolateRequestBuilder=client().preparePercolate().setIndices("test").setDocumentType("type").setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1",value).endObject()));
    SubAggCollectionMode aggCollectionMode=randomFrom(SubAggCollectionMode.values());
    percolateRequestBuilder.addAggregation(AggregationBuilders.terms("a").field("field2").collectMode(aggCollectionMode));
    if (randomBoolean()) {
      percolateRequestBuilder.setPercolateQuery(matchAllQuery());
    }
    if (randomBoolean()) {
      percolateRequestBuilder.setScore(true);
    }
 else {
      percolateRequestBuilder.setSortByScore(true).setSize(numQueries);
    }
    boolean countOnly=randomBoolean();
    if (countOnly) {
      percolateRequestBuilder.setOnlyCount(countOnly);
    }
    percolateRequestBuilder.addAggregation(ReducerBuilders.maxBucket("max_a").setBucketsPaths("a>_count"));
    PercolateResponse response=percolateRequestBuilder.execute().actionGet();
    assertMatchCount(response,expectedCount[i % numUniqueQueries]);
    if (!countOnly) {
      assertThat(response.getMatches(),arrayWithSize(expectedCount[i % numUniqueQueries]));
    }
    Aggregations aggregations=response.getAggregations();
    assertThat(aggregations.asList().size(),equalTo(2));
    Terms terms=aggregations.get("a");
    assertThat(terms,notNullValue());
    assertThat(terms.getName(),equalTo("a"));
    List<Terms.Bucket> buckets=new ArrayList<>(terms.getBuckets());
    assertThat(buckets.size(),equalTo(1));
    assertThat(buckets.get(0).getKeyAsString(),equalTo("b"));
    assertThat(buckets.get(0).getDocCount(),equalTo((long)expectedCount[i % values.length]));
    InternalBucketMetricValue maxA=aggregations.get("max_a");
    assertThat(maxA,notNullValue());
    assertThat(maxA.getName(),equalTo("max_a"));
    assertThat(maxA.value(),equalTo((double)expectedCount[i % values.length]));
    assertThat(maxA.keys(),equalTo(new String[]{"b"}));
  }
}
