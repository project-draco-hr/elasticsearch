{
  List<Map<String,String>> patternList=new ArrayList<>();
  XContentParser.Token token=yamlParser.nextToken();
  if (token != XContentParser.Token.START_ARRAY) {
    throw new ElasticsearchParseException("malformed regular expression file, should continue with 'array' after 'object'");
  }
  token=yamlParser.nextToken();
  if (token != XContentParser.Token.START_OBJECT) {
    throw new ElasticsearchParseException("malformed regular expression file, expecting 'object'");
  }
  while (token == XContentParser.Token.START_OBJECT) {
    token=yamlParser.nextToken();
    if (token != XContentParser.Token.FIELD_NAME) {
      throw new ElasticsearchParseException("malformed regular expression file, should continue with 'field_name' after 'array'");
    }
    Map<String,String> regexMap=new HashMap<>();
    for (; token == XContentParser.Token.FIELD_NAME; token=yamlParser.nextToken()) {
      String fieldName=yamlParser.currentName();
      token=yamlParser.nextToken();
      String fieldValue=yamlParser.text();
      regexMap.put(fieldName,fieldValue);
    }
    patternList.add(regexMap);
    token=yamlParser.nextToken();
  }
  return patternList;
}
