{
  int currentNumNodes=randomIntBetween(3,5);
  final int min_master_nodes=currentNumNodes / 2 + 1;
  int currentNumOfUnicastHosts=randomIntBetween(min_master_nodes,currentNumNodes);
  final Settings settings=Settings.settingsBuilder().put("discovery.zen.join_timeout",TimeValue.timeValueSeconds(10)).put("discovery.zen.minimum_master_nodes",min_master_nodes).build();
  discoveryConfig=new ClusterDiscoveryConfiguration.UnicastZen(currentNumNodes,currentNumOfUnicastHosts,settings);
  List<String> nodes=internalCluster().startNodesAsync(currentNumNodes).get();
  ensureStableCluster(currentNumNodes);
  DiscoveryNode masterDiscoNode=null;
  for (  String node : nodes) {
    ClusterState state=internalCluster().client(node).admin().cluster().prepareState().setLocal(true).execute().actionGet().getState();
    assertThat(state.nodes().getSize(),equalTo(currentNumNodes));
    if (masterDiscoNode == null) {
      masterDiscoNode=state.nodes().getMasterNode();
    }
 else {
      assertThat(masterDiscoNode.equals(state.nodes().getMasterNode()),equalTo(true));
    }
  }
}
