{
  final long startTime=System.nanoTime();
  long ramBytesUsed=0;
  final Map<String,OrdinalMapAndAtomicFieldData> perType=new HashMap<>();
  for (  String type : parentTypes) {
    final AtomicParentChildFieldData[] fieldData=new AtomicParentChildFieldData[indexReader.leaves().size()];
    for (    LeafReaderContext context : indexReader.leaves()) {
      fieldData[context.ord]=load(context);
    }
    final OrdinalMap ordMap=buildOrdinalMap(fieldData,type);
    ramBytesUsed+=ordMap.ramBytesUsed();
    perType.put(type,new OrdinalMapAndAtomicFieldData(ordMap,fieldData));
  }
  final AtomicParentChildFieldData[] fielddata=new AtomicParentChildFieldData[indexReader.leaves().size()];
  for (int i=0; i < fielddata.length; ++i) {
    fielddata[i]=new GlobalAtomicFieldData(parentTypes,perType,i);
  }
  breakerService.getBreaker(CircuitBreaker.FIELDDATA).addWithoutBreaking(ramBytesUsed);
  if (logger.isDebugEnabled()) {
    logger.debug("Global-ordinals[_parent] took {}",new TimeValue(System.nanoTime() - startTime,TimeUnit.NANOSECONDS));
  }
  return new GlobalFieldData(indexReader,fielddata,ramBytesUsed,perType);
}
