{
  Map<String,Object> model=new HashMap<>();
  model.put("field1","value1");
  model.put("field2",Collections.singletonMap("field3","value3"));
  ValueSource valueSource=ValueSource.wrap("{{field1}}/{{field2}}/{{field2.field3}}",templateService);
  assertThat(valueSource,instanceOf(ValueSource.TemplatedValue.class));
  assertThat(valueSource.copyAndResolve(model),equalTo("value1/{field3=value3}/value3"));
  valueSource=ValueSource.wrap(Arrays.asList("_value","{{field1}}"),templateService);
  assertThat(valueSource,instanceOf(ValueSource.ListValue.class));
  List<String> result=(List<String>)valueSource.copyAndResolve(model);
  assertThat(result.size(),equalTo(2));
  assertThat(result.get(0),equalTo("_value"));
  assertThat(result.get(1),equalTo("value1"));
  Map<String,Object> map=new HashMap<>();
  map.put("field1","{{field1}}");
  map.put("field2",Collections.singletonMap("field3","{{field2.field3}}"));
  map.put("field4","_value");
  valueSource=ValueSource.wrap(map,templateService);
  assertThat(valueSource,instanceOf(ValueSource.MapValue.class));
  Map<String,Object> resultMap=(Map<String,Object>)valueSource.copyAndResolve(model);
  assertThat(resultMap.size(),equalTo(3));
  assertThat(resultMap.get("field1"),equalTo("value1"));
  assertThat(((Map)resultMap.get("field2")).size(),equalTo(1));
  assertThat(((Map)resultMap.get("field2")).get("field3"),equalTo("value3"));
  assertThat(resultMap.get("field4"),equalTo("_value"));
}
