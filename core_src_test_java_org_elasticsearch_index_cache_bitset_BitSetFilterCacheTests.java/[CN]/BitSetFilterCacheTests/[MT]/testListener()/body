{
  IndexWriter writer=new IndexWriter(new RAMDirectory(),new IndexWriterConfig(new StandardAnalyzer()).setMergePolicy(new LogByteSizeMergePolicy()));
  Document document=new Document();
  document.add(new StringField("field","value",Field.Store.NO));
  writer.addDocument(document);
  writer.commit();
  final DirectoryReader writerReader=DirectoryReader.open(writer,false);
  final IndexReader reader=ElasticsearchDirectoryReader.wrap(writerReader,new ShardId("test","_na_",0));
  final AtomicLong stats=new AtomicLong();
  final AtomicInteger onCacheCalls=new AtomicInteger();
  final AtomicInteger onRemoveCalls=new AtomicInteger();
  final BitsetFilterCache cache=new BitsetFilterCache(INDEX_SETTINGS,warmer,new BitsetFilterCache.Listener(){
    @Override public void onCache(    ShardId shardId,    Accountable accountable){
      onCacheCalls.incrementAndGet();
      stats.addAndGet(accountable.ramBytesUsed());
      if (writerReader != reader) {
        assertNotNull(shardId);
        assertEquals("test",shardId.getIndexName());
        assertEquals(0,shardId.id());
      }
 else {
        assertNull(shardId);
      }
    }
    @Override public void onRemoval(    ShardId shardId,    Accountable accountable){
      onRemoveCalls.incrementAndGet();
      stats.addAndGet(-accountable.ramBytesUsed());
      if (writerReader != reader) {
        assertNotNull(shardId);
        assertEquals("test",shardId.getIndexName());
        assertEquals(0,shardId.id());
      }
 else {
        assertNull(shardId);
      }
    }
  }
);
  BitSetProducer filter=cache.getBitSetProducer(new TermQuery(new Term("field","value")));
  assertThat(matchCount(filter,reader),equalTo(1));
  assertTrue(stats.get() > 0);
  assertEquals(1,onCacheCalls.get());
  assertEquals(0,onRemoveCalls.get());
  IOUtils.close(reader,writer);
  assertEquals(1,onRemoveCalls.get());
  assertEquals(0,stats.get());
}
