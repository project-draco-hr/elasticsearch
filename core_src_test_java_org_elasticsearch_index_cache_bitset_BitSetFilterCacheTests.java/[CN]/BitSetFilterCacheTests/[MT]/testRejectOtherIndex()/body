{
  BitsetFilterCache cache=new BitsetFilterCache(INDEX_SETTINGS,warmer,new BitsetFilterCache.Listener(){
    @Override public void onCache(    ShardId shardId,    Accountable accountable){
    }
    @Override public void onRemoval(    ShardId shardId,    Accountable accountable){
    }
  }
);
  Directory dir=newDirectory();
  IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig());
  writer.addDocument(new Document());
  DirectoryReader reader=DirectoryReader.open(writer,true);
  writer.close();
  reader=ElasticsearchDirectoryReader.wrap(reader,new ShardId(new Index("test2"),0));
  BitSetProducer producer=cache.getBitSetProducer(new MatchAllDocsQuery());
  try {
    producer.getBitSet(reader.leaves().get(0));
    fail();
  }
 catch (  IllegalStateException expected) {
    assertEquals("Trying to load bit set for index [test2] with cache of index [test]",expected.getMessage());
  }
 finally {
    IOUtils.close(reader,dir);
  }
}
