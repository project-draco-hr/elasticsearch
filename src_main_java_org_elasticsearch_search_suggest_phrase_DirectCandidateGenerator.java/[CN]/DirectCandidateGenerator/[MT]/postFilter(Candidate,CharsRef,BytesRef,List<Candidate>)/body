{
  if (postFilter == null) {
    candidates.add(candidate);
  }
 else {
    final BytesRef result=byteSpare;
    SuggestUtils.analyze(postFilter,candidate.term,field,new SuggestUtils.TokenConsumer(){
      @Override public void nextToken() throws IOException {
        this.fillBytesRef(result);
        if (posIncAttr.getPositionIncrement() > 0 && result.bytesEquals(candidate.term)) {
          candidates.add(new Candidate(BytesRef.deepCopyOf(result),candidate.frequency,candidate.stringDistance,score(candidate.frequency,candidate.stringDistance,docCount)));
        }
 else {
          int freq=frequency(result);
          candidates.add(new Candidate(BytesRef.deepCopyOf(result),freq,nonErrorLikelihood,score(candidate.frequency,candidate.stringDistance,docCount)));
        }
      }
    }
,spare);
  }
}
