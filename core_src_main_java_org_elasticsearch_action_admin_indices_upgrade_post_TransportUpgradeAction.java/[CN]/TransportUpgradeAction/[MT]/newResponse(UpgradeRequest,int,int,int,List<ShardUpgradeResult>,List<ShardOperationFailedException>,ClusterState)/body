{
  Map<String,Integer> successfulPrimaryShards=new HashMap<>();
  Map<String,Tuple<Version,org.apache.lucene.util.Version>> versions=new HashMap<>();
  for (  ShardUpgradeResult result : shardUpgradeResults) {
    successfulShards++;
    String index=result.getShardId().getIndex().getName();
    if (result.primary()) {
      Integer count=successfulPrimaryShards.get(index);
      successfulPrimaryShards.put(index,count == null ? 1 : count + 1);
    }
    Tuple<Version,org.apache.lucene.util.Version> versionTuple=versions.get(index);
    if (versionTuple == null) {
      versions.put(index,new Tuple<>(result.upgradeVersion(),result.oldestLuceneSegment()));
    }
 else {
      Version version=versionTuple.v1();
      org.apache.lucene.util.Version luceneVersion=versionTuple.v2();
      if (result.upgradeVersion().after(versionTuple.v1())) {
        version=result.upgradeVersion();
      }
      if (result.oldestLuceneSegment().onOrAfter(versionTuple.v2()) == false) {
        luceneVersion=result.oldestLuceneSegment();
      }
      versions.put(index,new Tuple<>(version,luceneVersion));
    }
  }
  Map<String,Tuple<org.elasticsearch.Version,String>> updatedVersions=new HashMap<>();
  MetaData metaData=clusterState.metaData();
  for (  Map.Entry<String,Tuple<Version,org.apache.lucene.util.Version>> versionEntry : versions.entrySet()) {
    String index=versionEntry.getKey();
    Integer primaryCount=successfulPrimaryShards.get(index);
    int expectedPrimaryCount=metaData.index(index).getNumberOfShards();
    if (primaryCount == metaData.index(index).getNumberOfShards()) {
      updatedVersions.put(index,new Tuple<>(versionEntry.getValue().v1(),versionEntry.getValue().v2().toString()));
    }
 else {
      logger.warn("Not updating settings for the index [{}] because upgraded of some primary shards failed - expected[{}], received[{}]",index,expectedPrimaryCount,primaryCount == null ? 0 : primaryCount);
    }
  }
  return new UpgradeResponse(updatedVersions,totalShards,successfulShards,failedShards,shardFailures);
}
