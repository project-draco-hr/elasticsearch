{
  int successfulShards=0;
  int failedShards=0;
  List<ShardOperationFailedException> shardFailures=null;
  Map<String,Integer> successfulPrimaryShards=newHashMap();
  Map<String,Tuple<Version,org.apache.lucene.util.Version>> versions=newHashMap();
  for (int i=0; i < shardsResponses.length(); i++) {
    Object shardResponse=shardsResponses.get(i);
    if (shardResponse == null) {
    }
 else     if (shardResponse instanceof BroadcastShardOperationFailedException) {
      failedShards++;
      if (shardFailures == null) {
        shardFailures=new ArrayList<>();
      }
      shardFailures.add(new DefaultShardOperationFailedException((BroadcastShardOperationFailedException)shardResponse));
    }
 else {
      successfulShards++;
      ShardUpgradeResponse shardUpgradeResponse=(ShardUpgradeResponse)shardResponse;
      String index=shardUpgradeResponse.getIndex();
      if (shardUpgradeResponse.primary()) {
        Integer count=successfulPrimaryShards.get(index);
        successfulPrimaryShards.put(index,count == null ? 1 : count + 1);
      }
      Tuple<Version,org.apache.lucene.util.Version> versionTuple=versions.get(index);
      if (versionTuple == null) {
        versions.put(index,new Tuple<>(shardUpgradeResponse.upgradeVersion(),shardUpgradeResponse.oldestLuceneSegment()));
      }
 else {
        Version version=versionTuple.v1();
        org.apache.lucene.util.Version luceneVersion=versionTuple.v2();
        if (shardUpgradeResponse.upgradeVersion().after(versionTuple.v1())) {
          version=shardUpgradeResponse.upgradeVersion();
        }
        if (shardUpgradeResponse.oldestLuceneSegment().onOrAfter(versionTuple.v2()) == false) {
          luceneVersion=shardUpgradeResponse.oldestLuceneSegment();
        }
        versions.put(index,new Tuple<>(version,luceneVersion));
      }
    }
  }
  Map<String,Tuple<org.elasticsearch.Version,String>> updatedVersions=newHashMap();
  MetaData metaData=clusterState.metaData();
  for (  Map.Entry<String,Tuple<Version,org.apache.lucene.util.Version>> versionEntry : versions.entrySet()) {
    String index=versionEntry.getKey();
    Integer primaryCount=successfulPrimaryShards.get(index);
    int expectedPrimaryCount=metaData.index(index).getNumberOfShards();
    if (primaryCount == metaData.index(index).getNumberOfShards()) {
      updatedVersions.put(index,new Tuple<>(versionEntry.getValue().v1(),versionEntry.getValue().v2().toString()));
    }
 else {
      logger.warn("Not updating settings for the index [{}] because upgraded of some primary shards failed - expected[{}], received[{}]",index,expectedPrimaryCount,primaryCount == null ? 0 : primaryCount);
    }
  }
  return new UpgradeResponse(updatedVersions,shardsResponses.length(),successfulShards,failedShards,shardFailures);
}
