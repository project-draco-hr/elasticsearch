{
  boolean cache;
  boolean cacheable=true;
  Long lowerVal=null;
  Long upperVal=null;
  if (lowerTerm != null) {
    if (lowerTerm instanceof Number) {
      lowerVal=((Number)lowerTerm).longValue();
    }
 else {
      String value=convertToString(lowerTerm);
      cacheable=!hasDateExpressionWithNoRounding(value);
      lowerVal=parseToMilliseconds(value,context,false,timeZone,forcedDateParser);
    }
  }
  if (upperTerm != null) {
    if (upperTerm instanceof Number) {
      upperVal=((Number)upperTerm).longValue();
    }
 else {
      String value=convertToString(upperTerm);
      cacheable=cacheable && !hasDateExpressionWithNoRounding(value);
      upperVal=parseToMilliseconds(value,context,includeUpper,timeZone,forcedDateParser);
    }
  }
  if (explicitCaching != null) {
    if (explicitCaching) {
      cache=cacheable;
    }
 else {
      cache=false;
    }
  }
 else {
    cache=cacheable;
  }
  Filter filter;
  if (parseContext != null) {
    filter=NumericRangeFieldDataFilter.newLongRange((IndexNumericFieldData)parseContext.getForField(this),lowerVal,upperVal,includeLower,includeUpper);
  }
 else {
    filter=NumericRangeFilter.newLongRange(names.indexName(),precisionStep,lowerVal,upperVal,includeLower,includeUpper);
  }
  if (!cache) {
    return NoCacheFilter.wrap(filter);
  }
 else {
    return filter;
  }
}
