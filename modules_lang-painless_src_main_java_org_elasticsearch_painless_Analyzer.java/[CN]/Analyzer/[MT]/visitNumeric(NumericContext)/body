{
  final Metadata.ExpressionMetadata numericemd=metadata.getExpressionMetadata(ctx);
  final boolean negate=ctx.parent instanceof UnaryContext && ((UnaryContext)ctx.parent).SUB() != null;
  if (ctx.DECIMAL() != null) {
    final String svalue=(negate ? "-" : "") + ctx.DECIMAL().getText();
    if (svalue.endsWith("f") || svalue.endsWith("F")) {
      try {
        numericemd.from=definition.floatType;
        numericemd.preConst=Float.parseFloat(svalue.substring(0,svalue.length() - 1));
      }
 catch (      NumberFormatException exception) {
        throw new IllegalArgumentException(Metadata.error(ctx) + "Invalid float constant [" + svalue+ "].");
      }
    }
 else {
      try {
        numericemd.from=definition.doubleType;
        numericemd.preConst=Double.parseDouble(svalue);
      }
 catch (      NumberFormatException exception) {
        throw new IllegalArgumentException(Metadata.error(ctx) + "Invalid double constant [" + svalue+ "].");
      }
    }
  }
 else {
    String svalue=negate ? "-" : "";
    int radix;
    if (ctx.OCTAL() != null) {
      svalue+=ctx.OCTAL().getText();
      radix=8;
    }
 else     if (ctx.INTEGER() != null) {
      svalue+=ctx.INTEGER().getText();
      radix=10;
    }
 else     if (ctx.HEX() != null) {
      svalue+=ctx.HEX().getText();
      radix=16;
    }
 else {
      throw new IllegalStateException(Metadata.error(ctx) + "Unexpected parser state.");
    }
    if (svalue.endsWith("d") || svalue.endsWith("D")) {
      try {
        numericemd.from=definition.doubleType;
        numericemd.preConst=Double.parseDouble(svalue.substring(0,svalue.length() - 1));
      }
 catch (      NumberFormatException exception) {
        throw new IllegalArgumentException(Metadata.error(ctx) + "Invalid float constant [" + svalue+ "].");
      }
    }
 else     if (svalue.endsWith("f") || svalue.endsWith("F")) {
      try {
        numericemd.from=definition.floatType;
        numericemd.preConst=Float.parseFloat(svalue.substring(0,svalue.length() - 1));
      }
 catch (      NumberFormatException exception) {
        throw new IllegalArgumentException(Metadata.error(ctx) + "Invalid float constant [" + svalue+ "].");
      }
    }
 else     if (svalue.endsWith("l") || svalue.endsWith("L")) {
      try {
        numericemd.from=definition.longType;
        numericemd.preConst=Long.parseLong(svalue.substring(0,svalue.length() - 1),radix);
      }
 catch (      NumberFormatException exception) {
        throw new IllegalArgumentException(Metadata.error(ctx) + "Invalid long constant [" + svalue+ "].");
      }
    }
 else {
      try {
        final Type type=numericemd.to;
        final Sort sort=type == null ? Sort.INT : type.sort;
        final int value=Integer.parseInt(svalue,radix);
        if (sort == Sort.BYTE && value >= Byte.MIN_VALUE && value <= Byte.MAX_VALUE) {
          numericemd.from=definition.byteType;
          numericemd.preConst=(byte)value;
        }
 else         if (sort == Sort.CHAR && value >= Character.MIN_VALUE && value <= Character.MAX_VALUE) {
          numericemd.from=definition.charType;
          numericemd.preConst=(char)value;
        }
 else         if (sort == Sort.SHORT && value >= Short.MIN_VALUE && value <= Short.MAX_VALUE) {
          numericemd.from=definition.shortType;
          numericemd.preConst=(short)value;
        }
 else {
          numericemd.from=definition.intType;
          numericemd.preConst=value;
        }
      }
 catch (      NumberFormatException exception) {
        throw new IllegalArgumentException(Metadata.error(ctx) + "Invalid int constant [" + svalue+ "].");
      }
    }
  }
  return null;
}
