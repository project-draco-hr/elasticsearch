{
  IngestDocument ingestDocument=RandomDocumentPicks.randomIngestDocument(random());
  int numItems=randomIntBetween(1,10);
  List<Object> fieldValue=new ArrayList<>();
  List<String> expectedList=new ArrayList<>();
  for (int j=0; j < numItems; j++) {
    Object randomValue;
    String randomValueString;
switch (randomIntBetween(0,2)) {
case 0:
      float randomFloat=randomFloat();
    randomValue=randomFloat;
  randomValueString=Float.toString(randomFloat);
break;
case 1:
int randomInt=randomInt();
randomValue=randomInt;
randomValueString=Integer.toString(randomInt);
break;
case 2:
boolean randomBoolean=randomBoolean();
randomValue=randomBoolean;
randomValueString=Boolean.toString(randomBoolean);
break;
default :
throw new UnsupportedOperationException();
}
fieldValue.add(randomValue);
expectedList.add(randomValueString);
}
String fieldName=RandomDocumentPicks.addRandomField(random(),ingestDocument,fieldValue);
Processor processor=new ConvertProcessor(randomAsciiOfLength(10),fieldName,fieldName,Type.STRING,false);
processor.execute(ingestDocument);
assertThat(ingestDocument.getFieldValue(fieldName,List.class),equalTo(expectedList));
}
