{
  assertEquals(10D,Utility.addWithoutOverflow(5D,5D),0D);
  assertTrue(Double.isNaN(Utility.addWithoutOverflow(5D,Double.NaN)));
  assertTrue(Double.isNaN(Utility.addWithoutOverflow(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY)));
  try {
    Utility.addWithoutOverflow(Double.MAX_VALUE,Double.MAX_VALUE);
    fail("did not get expected exception");
  }
 catch (  ArithmeticException expected) {
  }
  try {
    Utility.addWithoutOverflow(-Double.MAX_VALUE,-Double.MAX_VALUE);
    fail("did not get expected exception");
  }
 catch (  ArithmeticException expected) {
  }
}
