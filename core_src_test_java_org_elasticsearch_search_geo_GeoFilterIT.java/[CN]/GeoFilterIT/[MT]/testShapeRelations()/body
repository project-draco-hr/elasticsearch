{
  assertTrue("Intersect relation is not supported",intersectSupport);
  assertTrue("Disjoint relation is not supported",disjointSupport);
  assertTrue("within relation is not supported",withinSupport);
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("polygon").startObject("properties").startObject("area").field("type","geo_shape").field("tree","geohash").endObject().endObject().endObject().endObject().string();
  CreateIndexRequestBuilder mappingRequest=client().admin().indices().prepareCreate("shapes").addMapping("polygon",mapping);
  mappingRequest.execute().actionGet();
  client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();
  MultiPolygonBuilder polygon=ShapeBuilders.newMultiPolygon().polygon(new PolygonBuilder(new PointListBuilder().point(-10,-10).point(-10,10).point(10,10).point(10,-10).close().list()).hole(new LineStringBuilder(new PointListBuilder().point(-5,-5).point(-5,5).point(5,5).point(5,-5).close().list()))).polygon(new PolygonBuilder(new PointListBuilder().point(-4,-4).point(-4,4).point(4,4).point(4,-4).close().list()));
  BytesReference data=jsonBuilder().startObject().field("area",polygon).endObject().bytes();
  client().prepareIndex("shapes","polygon","1").setSource(data).execute().actionGet();
  client().admin().indices().prepareRefresh().execute().actionGet();
  SearchResponse result=client().prepareSearch().setQuery(matchAllQuery()).setPostFilter(QueryBuilders.geoIntersectionQuery("area",ShapeBuilders.newPoint(3,3))).execute().actionGet();
  assertHitCount(result,1);
  assertFirstHit(result,hasId("1"));
  result=client().prepareSearch().setQuery(matchAllQuery()).setPostFilter(QueryBuilders.geoIntersectionQuery("area",ShapeBuilders.newPoint(4.5,4.5))).execute().actionGet();
  assertHitCount(result,0);
  result=client().prepareSearch().setQuery(matchAllQuery()).setPostFilter(QueryBuilders.geoIntersectionQuery("area",ShapeBuilders.newPoint(10.0,5.0))).execute().actionGet();
  assertHitCount(result,1);
  assertFirstHit(result,hasId("1"));
  result=client().prepareSearch().setQuery(matchAllQuery()).setPostFilter(QueryBuilders.geoIntersectionQuery("area",ShapeBuilders.newPoint(5.0,2.0))).execute().actionGet();
  assertHitCount(result,1);
  assertFirstHit(result,hasId("1"));
  if (disjointSupport) {
    result=client().prepareSearch().setQuery(matchAllQuery()).setPostFilter(QueryBuilders.geoDisjointQuery("area",ShapeBuilders.newPoint(3,3))).execute().actionGet();
    assertHitCount(result,0);
    result=client().prepareSearch().setQuery(matchAllQuery()).setPostFilter(QueryBuilders.geoDisjointQuery("area",ShapeBuilders.newPoint(4.5,4.5))).execute().actionGet();
    assertHitCount(result,1);
    assertFirstHit(result,hasId("1"));
  }
  PolygonBuilder inverse=ShapeBuilders.newPolygon(new PointListBuilder().point(-5,-5).point(-5,5).point(5,5).point(5,-5).close().list()).hole(new LineStringBuilder(new PointListBuilder().point(-4,-4).point(-4,4).point(4,4).point(4,-4).close().list()));
  data=jsonBuilder().startObject().field("area",inverse).endObject().bytes();
  client().prepareIndex("shapes","polygon","2").setSource(data).execute().actionGet();
  client().admin().indices().prepareRefresh().execute().actionGet();
  result=client().prepareSearch().setQuery(matchAllQuery()).setPostFilter(QueryBuilders.geoIntersectionQuery("area",ShapeBuilders.newPoint(4.5,4.5))).execute().actionGet();
  assertHitCount(result,1);
  assertFirstHit(result,hasId("2"));
  PolygonBuilder builder=ShapeBuilders.newPolygon(new PointListBuilder().point(-10,-10).point(-10,10).point(10,10).point(10,-10).close().list()).hole(new LineStringBuilder(new PointListBuilder().point(-5,-5).point(-5,5).point(10,5).point(10,-5).close().list()));
  if (withinSupport) {
    builder=ShapeBuilders.newPolygon(new PointListBuilder().point(-30,-30).point(-30,30).point(30,30).point(30,-30).close().list());
    result=client().prepareSearch().setQuery(matchAllQuery()).setPostFilter(QueryBuilders.geoWithinQuery("area",builder)).execute().actionGet();
    assertHitCount(result,2);
  }
  builder=ShapeBuilders.newPolygon(new PointListBuilder().point(170,-10).point(190,-10).point(190,10).point(170,10).close().list());
  data=jsonBuilder().startObject().field("area",builder).endObject().bytes();
  client().prepareIndex("shapes","polygon","1").setSource(data).execute().actionGet();
  client().admin().indices().prepareRefresh().execute().actionGet();
  builder=ShapeBuilders.newPolygon(new PointListBuilder().point(170,-10).point(190,-10).point(190,10).point(170,10).close().list()).hole(new LineStringBuilder(new PointListBuilder().point(175,-5).point(185,-5).point(185,5).point(175,5).close().list()));
  data=jsonBuilder().startObject().field("area",builder).endObject().bytes();
  client().prepareIndex("shapes","polygon","1").setSource(data).execute().actionGet();
  client().admin().indices().prepareRefresh().execute().actionGet();
  result=client().prepareSearch().setQuery(matchAllQuery()).setPostFilter(QueryBuilders.geoIntersectionQuery("area",ShapeBuilders.newPoint(174,-4))).execute().actionGet();
  assertHitCount(result,1);
  result=client().prepareSearch().setQuery(matchAllQuery()).setPostFilter(QueryBuilders.geoIntersectionQuery("area",ShapeBuilders.newPoint(-174,-4))).execute().actionGet();
  assertHitCount(result,1);
  result=client().prepareSearch().setQuery(matchAllQuery()).setPostFilter(QueryBuilders.geoIntersectionQuery("area",ShapeBuilders.newPoint(180,-4))).execute().actionGet();
  assertHitCount(result,0);
  result=client().prepareSearch().setQuery(matchAllQuery()).setPostFilter(QueryBuilders.geoIntersectionQuery("area",ShapeBuilders.newPoint(180,-6))).execute().actionGet();
  assertHitCount(result,1);
}
