{
  final FunctionRef ref;
  if ("this".equals(type)) {
    Method interfaceMethod=clazz.struct.getFunctionalMethod();
    if (interfaceMethod == null) {
      throw new IllegalArgumentException("Cannot convert function reference [" + type + "::"+ call+ "] "+ "to ["+ clazz.name+ "], not a functional interface");
    }
    int arity=interfaceMethod.arguments.size();
    ref=null;
  }
 else {
    ref=new FunctionRef(clazz,type,call,captures);
  }
  final CallSite callSite;
  if (ref.needsBridges()) {
    callSite=LambdaMetafactory.altMetafactory(lookup,ref.invokedName,ref.invokedType,ref.samMethodType,ref.implMethod,ref.samMethodType,LambdaMetafactory.FLAG_BRIDGES,1,ref.interfaceMethodType);
  }
 else {
    callSite=LambdaMetafactory.altMetafactory(lookup,ref.invokedName,ref.invokedType,ref.samMethodType,ref.implMethod,ref.samMethodType,0);
  }
  return callSite.dynamicInvoker().asType(MethodType.methodType(clazz.clazz,captures));
}
