{
  final Class<?> clazz=owner.getClass();
  if (clazz.isArray() && "length".equals(name)) {
    return Array.getLength(owner);
  }
 else {
    if ("value".equals(name) && owner instanceof ScriptDocValues) {
      if (clazz == ScriptDocValues.Doubles.class) {
        return ((ScriptDocValues.Doubles)owner).getValue();
      }
 else       if (clazz == ScriptDocValues.Longs.class) {
        return ((ScriptDocValues.Longs)owner).getValue();
      }
 else       if (clazz == ScriptDocValues.Strings.class) {
        return ((ScriptDocValues.Strings)owner).getValue();
      }
 else       if (clazz == ScriptDocValues.GeoPoints.class) {
        return ((ScriptDocValues.GeoPoints)owner).getValue();
      }
    }
    final Field field=getField(owner,name,definition);
    MethodHandle handle;
    if (field == null) {
      final String get="get" + Character.toUpperCase(name.charAt(0)) + name.substring(1);
      final Method method=getMethod(owner,get,definition);
      if (method != null) {
        handle=method.handle;
      }
 else       if (owner instanceof Map) {
        return ((Map)owner).get(name);
      }
 else       if (owner instanceof List) {
        try {
          final int index=Integer.parseInt(name);
          return ((List)owner).get(index);
        }
 catch (        NumberFormatException exception) {
          throw new IllegalArgumentException("Illegal list shortcut value [" + name + "].");
        }
      }
 else {
        throw new IllegalArgumentException("Unable to find dynamic field [" + name + "] "+ "for class ["+ clazz.getCanonicalName()+ "].");
      }
    }
 else {
      handle=field.getter;
    }
    if (handle == null) {
      throw new IllegalArgumentException("Unable to read from field [" + name + "] with owner class ["+ clazz+ "].");
    }
 else {
      try {
        return handle.invoke(owner);
      }
 catch (      final Throwable throwable) {
        throw new IllegalArgumentException("Error loading value from " + "field [" + name + "] with owner class ["+ clazz+ "].",throwable);
      }
    }
  }
}
