{
  Definition.Type interfaceType=Definition.getType(interfaceClass);
  Method interfaceMethod=interfaceType.struct.getFunctionalMethod();
  if (interfaceMethod == null) {
    throw new IllegalArgumentException("Class [" + interfaceClass + "] is not a functional interface");
  }
  int arity=interfaceMethod.arguments.size();
  Method implMethod=lookupMethodInternal(receiverClass,name,arity);
  return lookupReferenceInternal(lookup,interfaceType,implMethod.owner.name,implMethod.name,receiverClass);
}
