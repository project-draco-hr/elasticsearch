{
  int separator=signature.indexOf('.');
  FunctionRef ref=new FunctionRef(clazz,signature.substring(0,separator),signature.substring(separator + 1));
  MethodHandles.Lookup lookup=MethodHandles.lookup();
  final CallSite callSite;
  MethodType invokedType=MethodType.fromMethodDescriptorString(ref.invokedType.getDescriptor(),Def.class.getClassLoader());
  MethodType samMethodType=MethodType.fromMethodDescriptorString(ref.samMethodType.getDescriptor(),Def.class.getClassLoader());
  MethodType interfaceType=MethodType.fromMethodDescriptorString(ref.interfaceType.getDescriptor(),Def.class.getClassLoader());
  try {
    if (ref.interfaceType.equals(ref.samMethodType)) {
      callSite=LambdaMetafactory.altMetafactory(lookup,ref.invokedName,invokedType,samMethodType,ref.implMethodHandle,samMethodType,0);
    }
 else {
      callSite=LambdaMetafactory.altMetafactory(lookup,ref.invokedName,invokedType,samMethodType,ref.implMethodHandle,samMethodType,LambdaMetafactory.FLAG_BRIDGES,1,interfaceType);
    }
  }
 catch (  LambdaConversionException e) {
    throw new RuntimeException(e);
  }
  MethodHandle factory=callSite.dynamicInvoker().asType(MethodType.methodType(clazz));
  return MethodHandles.dropArguments(factory,0,Object.class);
}
