{
  for (Class<?> clazz=receiverClass; clazz != null; clazz=clazz.getSuperclass()) {
    RuntimeClass struct=Definition.getRuntimeClass(clazz);
    if (struct != null) {
      MethodHandle handle=struct.getters.get(name);
      if (handle != null) {
        return handle;
      }
    }
    for (    final Class<?> iface : clazz.getInterfaces()) {
      struct=Definition.getRuntimeClass(iface);
      if (struct != null) {
        MethodHandle handle=struct.getters.get(name);
        if (handle != null) {
          return handle;
        }
      }
    }
  }
  if (receiverClass.isArray() && "length".equals(name)) {
    return arrayLengthGetter(receiverClass);
  }
 else   if (Map.class.isAssignableFrom(receiverClass)) {
    return MethodHandles.insertArguments(MAP_GET,1,name);
  }
 else   if (List.class.isAssignableFrom(receiverClass)) {
    try {
      int index=Integer.parseInt(name);
      return MethodHandles.insertArguments(LIST_GET,1,index);
    }
 catch (    NumberFormatException exception) {
      throw new IllegalArgumentException("Illegal list shortcut value [" + name + "].");
    }
  }
  throw new IllegalArgumentException("Unable to find dynamic field [" + name + "] "+ "for class ["+ receiverClass.getCanonicalName()+ "].");
}
