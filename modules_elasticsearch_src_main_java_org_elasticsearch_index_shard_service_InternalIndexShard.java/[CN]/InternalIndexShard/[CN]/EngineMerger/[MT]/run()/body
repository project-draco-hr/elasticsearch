{
  if (!engine().possibleMergeNeeded()) {
    if (state != IndexShardState.CLOSED) {
synchronized (mutex) {
        mergeScheduleFuture=threadPool.schedule(mergeInterval,ThreadPool.Names.SAME,this);
      }
    }
    return;
  }
  threadPool.executor(ThreadPool.Names.MERGE).execute(new Runnable(){
    @Override public void run(){
      try {
        engine.maybeMerge();
      }
 catch (      EngineClosedException e) {
      }
catch (      OptimizeFailedEngineException e) {
        if (e.getCause() instanceof EngineClosedException) {
        }
 else         if (e.getCause() instanceof InterruptedException) {
        }
 else         if (e.getCause() instanceof ClosedByInterruptException) {
        }
 else         if (e.getCause() instanceof ThreadInterruptedException) {
        }
 else {
          logger.warn("Failed to perform scheduled engine optimize/merge",e);
        }
      }
catch (      Exception e) {
        logger.warn("Failed to perform scheduled engine optimize/merge",e);
      }
      if (state != IndexShardState.CLOSED) {
synchronized (mutex) {
          mergeScheduleFuture=threadPool.schedule(mergeInterval,ThreadPool.Names.SAME,EngineMerger.this);
        }
      }
    }
  }
);
}
