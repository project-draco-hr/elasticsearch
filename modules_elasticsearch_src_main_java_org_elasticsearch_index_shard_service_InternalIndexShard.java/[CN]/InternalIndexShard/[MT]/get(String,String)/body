{
  readAllowed();
  DocumentMapper docMapper=mapperService.documentMapperWithAutoCreate(type);
  Engine.Searcher searcher=engine.searcher();
  try {
    int docId=Lucene.docId(searcher.reader(),docMapper.uidMapper().term(type,id));
    if (docId == Lucene.NO_DOC) {
      if (logger.isTraceEnabled()) {
        logger.trace("get for [{}#{}] returned no result",type,id);
      }
      return null;
    }
    Document doc=searcher.reader().document(docId,docMapper.sourceMapper().fieldSelector());
    if (logger.isTraceEnabled()) {
      logger.trace("get for [{}#{}] returned [{}]",type,id,doc);
    }
    return docMapper.sourceMapper().value(doc);
  }
 catch (  IOException e) {
    throw new ElasticSearchException("Failed to get type [" + type + "] and id ["+ id+ "]",e);
  }
 finally {
    searcher.release();
  }
}
