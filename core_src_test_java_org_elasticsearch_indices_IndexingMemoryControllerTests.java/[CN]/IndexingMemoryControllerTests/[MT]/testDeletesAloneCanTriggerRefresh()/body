{
  createIndex("index",Settings.builder().put("index.number_of_shards",1).put("index.number_of_replicas",0).put("index.refresh_interval",-1).build());
  ensureGreen();
  IndicesService indicesService=getInstanceFromNode(IndicesService.class);
  IndexService indexService=indicesService.indexService(resolveIndex("index"));
  IndexShard shard=indexService.getShardOrNull(0);
  assertNotNull(shard);
  for (int i=0; i < 100; i++) {
    String id=Integer.toString(i);
    client().prepareIndex("index","type",id).setSource("field","value").get();
  }
  ForceMergeResponse r=client().admin().indices().prepareForceMerge().setMaxNumSegments(1).execute().actionGet();
  assertNoFailures(r);
  Settings settings=Settings.builder().put("indices.memory.index_buffer_size","1kb").build();
  IndexingMemoryController imc=new IndexingMemoryController(settings,null,null){
    @Override protected List<IndexShard> availableShards(){
      return Collections.singletonList(shard);
    }
    @Override protected long getIndexBufferRAMBytesUsed(    IndexShard shard){
      return shard.getIndexBufferRAMBytesUsed();
    }
    @Override protected void writeIndexingBufferAsync(    IndexShard shard){
      shard.writeIndexingBuffer();
    }
    @Override protected ScheduledFuture<?> scheduleTask(    ThreadPool threadPool){
      return null;
    }
  }
;
  for (int i=0; i < 100; i++) {
    String id=Integer.toString(i);
    client().prepareDelete("index","type",id).get();
  }
  final long indexingBufferBytes1=shard.getIndexBufferRAMBytesUsed();
  imc.forceCheck();
  assertBusy(new Runnable(){
    @Override public void run(){
      try (Engine.Searcher s2=shard.acquireSearcher("index")){
        final long indexingBufferBytes2=shard.getIndexBufferRAMBytesUsed();
        assertTrue(indexingBufferBytes2 < indexingBufferBytes1);
      }
     }
  }
);
}
