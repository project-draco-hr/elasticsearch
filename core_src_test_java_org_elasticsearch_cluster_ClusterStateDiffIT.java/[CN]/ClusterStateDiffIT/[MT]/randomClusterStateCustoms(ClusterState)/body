{
  return ClusterState.builder(randomClusterStateParts(clusterState,"custom",new RandomClusterPart<ClusterState.Custom>(){
    @Override public ImmutableOpenMap<String,ClusterState.Custom> parts(    ClusterState clusterState){
      return clusterState.customs();
    }
    @Override public ClusterState.Builder put(    ClusterState.Builder builder,    ClusterState.Custom part){
      return builder.putCustom(part.type(),part);
    }
    @Override public ClusterState.Builder remove(    ClusterState.Builder builder,    String name){
      return builder.removeCustom(name);
    }
    @Override public ClusterState.Custom randomCreate(    String name){
switch (randomIntBetween(0,1)) {
case 0:
        return new SnapshotsInProgress(new SnapshotsInProgress.Entry(new SnapshotId(randomName("repo"),randomName("snap")),randomBoolean(),randomBoolean(),SnapshotsInProgress.State.fromValue((byte)randomIntBetween(0,6)),Collections.<String>emptyList(),Math.abs(randomLong()),ImmutableOpenMap.of()));
case 1:
      return new RestoreInProgress(new RestoreInProgress.Entry(new SnapshotId(randomName("repo"),randomName("snap")),RestoreInProgress.State.fromValue((byte)randomIntBetween(0,3)),emptyList(),ImmutableOpenMap.of()));
default :
    throw new IllegalArgumentException("Shouldn't be here");
}
}
@Override public ClusterState.Custom randomChange(ClusterState.Custom part){
return part;
}
}
));
}
