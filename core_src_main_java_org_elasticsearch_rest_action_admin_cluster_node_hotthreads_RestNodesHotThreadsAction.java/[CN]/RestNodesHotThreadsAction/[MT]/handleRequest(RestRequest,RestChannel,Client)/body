{
  String[] nodesIds=Strings.splitStringByCommaToArray(request.param("nodeId"));
  NodesHotThreadsRequest nodesHotThreadsRequest=new NodesHotThreadsRequest(nodesIds);
  nodesHotThreadsRequest.threads(request.paramAsInt("threads",nodesHotThreadsRequest.threads()));
  nodesHotThreadsRequest.ignoreIdleThreads(request.paramAsBoolean("ignore_idle_threads",nodesHotThreadsRequest.ignoreIdleThreads()));
  nodesHotThreadsRequest.type(request.param("type",nodesHotThreadsRequest.type()));
  nodesHotThreadsRequest.interval(TimeValue.parseTimeValue(request.param("interval"),nodesHotThreadsRequest.interval(),"interval"));
  nodesHotThreadsRequest.snapshots(request.paramAsInt("snapshots",nodesHotThreadsRequest.snapshots()));
  nodesHotThreadsRequest.timeout(request.param("timeout"));
  client.admin().cluster().nodesHotThreads(nodesHotThreadsRequest,new RestResponseListener<NodesHotThreadsResponse>(channel){
    @Override public RestResponse buildResponse(    NodesHotThreadsResponse response) throws Exception {
      StringBuilder sb=new StringBuilder();
      for (      NodeHotThreads node : response) {
        sb.append("::: ").append(node.getNode().toString()).append("\n");
        Strings.spaceify(3,node.getHotThreads(),sb);
        sb.append('\n');
      }
      return new BytesRestResponse(RestStatus.OK,sb.toString());
    }
  }
);
}
