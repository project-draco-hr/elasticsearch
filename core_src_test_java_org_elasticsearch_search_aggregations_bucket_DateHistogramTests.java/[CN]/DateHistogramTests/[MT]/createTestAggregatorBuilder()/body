{
  DateHistogramAggregationBuilder factory=new DateHistogramAggregationBuilder("foo");
  factory.field(INT_FIELD_NAME);
  if (randomBoolean()) {
    factory.interval(randomIntBetween(1,100000));
  }
 else {
    if (randomBoolean()) {
      factory.dateHistogramInterval(randomFrom(DateHistogramInterval.YEAR,DateHistogramInterval.QUARTER,DateHistogramInterval.MONTH,DateHistogramInterval.WEEK,DateHistogramInterval.DAY,DateHistogramInterval.HOUR,DateHistogramInterval.MINUTE,DateHistogramInterval.SECOND));
    }
 else {
      int branch=randomInt(4);
switch (branch) {
case 0:
        factory.dateHistogramInterval(DateHistogramInterval.seconds(randomIntBetween(1,1000)));
      break;
case 1:
    factory.dateHistogramInterval(DateHistogramInterval.minutes(randomIntBetween(1,1000)));
  break;
case 2:
factory.dateHistogramInterval(DateHistogramInterval.hours(randomIntBetween(1,1000)));
break;
case 3:
factory.dateHistogramInterval(DateHistogramInterval.days(randomIntBetween(1,1000)));
break;
case 4:
factory.dateHistogramInterval(DateHistogramInterval.weeks(randomIntBetween(1,1000)));
break;
default :
throw new IllegalStateException("invalid branch: " + branch);
}
}
}
if (randomBoolean()) {
long extendedBoundsMin=randomIntBetween(-100000,100000);
long extendedBoundsMax=randomIntBetween((int)extendedBoundsMin,200000);
factory.extendedBounds(new ExtendedBounds(extendedBoundsMin,extendedBoundsMax));
}
if (randomBoolean()) {
factory.format("###.##");
}
if (randomBoolean()) {
factory.keyed(randomBoolean());
}
if (randomBoolean()) {
factory.minDocCount(randomIntBetween(0,100));
}
if (randomBoolean()) {
factory.missing(randomIntBetween(0,10));
}
if (randomBoolean()) {
factory.offset(randomIntBetween(0,100000));
}
if (randomBoolean()) {
int branch=randomInt(5);
switch (branch) {
case 0:
factory.order(Order.COUNT_ASC);
break;
case 1:
factory.order(Order.COUNT_DESC);
break;
case 2:
factory.order(Order.KEY_ASC);
break;
case 3:
factory.order(Order.KEY_DESC);
break;
case 4:
factory.order(Order.aggregation("foo",true));
break;
case 5:
factory.order(Order.aggregation("foo",false));
break;
}
}
return factory;
}
