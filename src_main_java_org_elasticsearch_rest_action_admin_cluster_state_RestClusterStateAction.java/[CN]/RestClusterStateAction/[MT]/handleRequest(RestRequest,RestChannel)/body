{
  final ClusterStateRequest clusterStateRequest=Requests.clusterStateRequest();
  clusterStateRequest.setListenerThreaded(false);
  clusterStateRequest.setMasterNodeTimeout(request.paramAsTime("master_timeout",clusterStateRequest.getMasterNodeTimeout()));
  clusterStateRequest.setFilterNodes(request.paramAsBoolean("filter_nodes",clusterStateRequest.isFilterNodes()));
  clusterStateRequest.setFilterRoutingTable(request.paramAsBoolean("filter_routing_table",clusterStateRequest.isFilterRoutingTable()));
  clusterStateRequest.setFilterMetaData(request.paramAsBoolean("filter_metadata",clusterStateRequest.isFilterMetaData()));
  clusterStateRequest.setFilterBlocks(request.paramAsBoolean("filter_blocks",clusterStateRequest.isFilterBlocks()));
  clusterStateRequest.setFilteredIndices(RestActions.splitIndices(request.param("filter_indices",null)));
  clusterStateRequest.setFilteredIndexTemplates(request.paramAsStringArray("filter_index_templates",Strings.EMPTY_ARRAY));
  clusterStateRequest.setLocal(request.paramAsBoolean("local",clusterStateRequest.isLocal()));
  client.admin().cluster().state(clusterStateRequest,new ActionListener<ClusterStateResponse>(){
    @Override public void onResponse(    ClusterStateResponse response){
      try {
        XContentBuilder builder=RestXContentBuilder.restContentBuilder(request);
        builder.startObject();
        builder.field(Fields.CLUSTER_NAME,response.getClusterName().value());
        response.getState().settingsFilter(settingsFilter).toXContent(builder,request);
        builder.endObject();
        channel.sendResponse(new XContentRestResponse(request,RestStatus.OK,builder));
      }
 catch (      Exception e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      if (logger.isDebugEnabled()) {
        logger.debug("failed to handle cluster state",e);
      }
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
