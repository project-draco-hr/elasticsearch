{
  final ClusterStateRequest clusterStateRequest=Requests.clusterStateRequest();
  clusterStateRequest.listenerThreaded(false);
  clusterStateRequest.local(request.paramAsBoolean("local",clusterStateRequest.local()));
  clusterStateRequest.masterNodeTimeout(request.paramAsTime("master_timeout",clusterStateRequest.masterNodeTimeout()));
  final String[] indices=Strings.splitStringByCommaToArray(request.param("indices","_all"));
  boolean isAllIndicesOnly=indices.length == 1 && "_all".equals(indices[0]);
  if (!isAllIndicesOnly) {
    clusterStateRequest.indices(indices);
  }
  Set<String> metrics=Strings.splitStringByCommaToSet(request.param("metric","_all"));
  boolean isAllMetricsOnly=metrics.size() == 1 && metrics.contains("_all");
  if (!isAllMetricsOnly) {
    clusterStateRequest.nodes(metrics.contains("nodes") || metrics.contains("master_node"));
    clusterStateRequest.routingTable(metrics.contains("routing_table"));
    clusterStateRequest.metaData(metrics.contains("metadata"));
    clusterStateRequest.blocks(metrics.contains("blocks"));
  }
  client.admin().cluster().state(clusterStateRequest,new RestBuilderListener<ClusterStateResponse>(channel){
    @Override public RestResponse buildResponse(    ClusterStateResponse response,    XContentBuilder builder) throws Exception {
      builder.startObject();
      builder.field(Fields.CLUSTER_NAME,response.getClusterName().value());
      response.getState().settingsFilter(settingsFilter).toXContent(builder,request);
      builder.endObject();
      return new BytesRestResponse(RestStatus.OK,builder);
    }
  }
);
}
