{
  super(settings);
  this.threadPool=threadPool;
  this.indicesFieldDataCacheListener=indicesFieldDataCacheListener;
  String size=componentSettings.get("size","-1");
  long sizeInBytes=componentSettings.getAsMemory("size","-1").bytes();
  if (sizeInBytes > ByteSizeValue.MAX_GUAVA_CACHE_SIZE.bytes()) {
    logger.warn("reducing requested field data cache size of [{}] to the maximum allowed size of [{}]",new ByteSizeValue(sizeInBytes),ByteSizeValue.MAX_GUAVA_CACHE_SIZE);
    sizeInBytes=ByteSizeValue.MAX_GUAVA_CACHE_SIZE.bytes();
    size=ByteSizeValue.MAX_GUAVA_CACHE_SIZE.toString();
  }
  final TimeValue expire=componentSettings.getAsTime("expire",null);
  CacheBuilder<Key,Accountable> cacheBuilder=CacheBuilder.newBuilder().removalListener(this);
  if (sizeInBytes > 0) {
    cacheBuilder.maximumWeight(sizeInBytes).weigher(new FieldDataWeigher());
  }
  cacheBuilder.concurrencyLevel(16);
  if (expire != null && expire.millis() > 0) {
    cacheBuilder.expireAfterAccess(expire.millis(),TimeUnit.MILLISECONDS);
  }
  logger.debug("using size [{}] [{}], expire [{}]",size,new ByteSizeValue(sizeInBytes),expire);
  cache=cacheBuilder.build();
  this.cleanInterval=settings.getAsTime(FIELDDATA_CLEAN_INTERVAL_SETTING,TimeValue.timeValueMinutes(1));
  threadPool.schedule(this.cleanInterval,ThreadPool.Names.SAME,new FieldDataCacheCleaner(this.cache,this.logger,this.threadPool,this.cleanInterval));
}
