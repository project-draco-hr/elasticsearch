{
  this.injector=injector;
  try {
    convertToPrimitiveType(int.class,Integer.class);
    convertToPrimitiveType(long.class,Long.class);
    convertToPrimitiveType(boolean.class,Boolean.class);
    convertToPrimitiveType(byte.class,Byte.class);
    convertToPrimitiveType(short.class,Short.class);
    convertToPrimitiveType(float.class,Float.class);
    convertToPrimitiveType(double.class,Double.class);
    convertToClass(Character.class,new TypeConverter(){
      @Override public Object convert(      String value,      TypeLiteral<?> toType){
        value=value.trim();
        if (value.length() != 1) {
          throw new RuntimeException("Length != 1.");
        }
        return value.charAt(0);
      }
      @Override public String toString(){
        return "TypeConverter<Character>";
      }
    }
);
    convertToClasses(Matchers.subclassesOf(Enum.class),new TypeConverter(){
      @Override @SuppressWarnings("unchecked") public Object convert(      String value,      TypeLiteral<?> toType){
        return Enum.valueOf((Class)toType.getRawType(),value);
      }
      @Override public String toString(){
        return "TypeConverter<E extends Enum<E>>";
      }
    }
);
    internalConvertToTypes(new AbstractMatcher<TypeLiteral<?>>(){
      @Override public boolean matches(      TypeLiteral<?> typeLiteral){
        return typeLiteral.getRawType() == Class.class;
      }
      @Override public String toString(){
        return "Class<?>";
      }
    }
,new TypeConverter(){
      @Override @SuppressWarnings("unchecked") public Object convert(      String value,      TypeLiteral<?> toType){
        try {
          return Class.forName(value);
        }
 catch (        ClassNotFoundException e) {
          throw new RuntimeException(e.getMessage());
        }
      }
      @Override public String toString(){
        return "TypeConverter<Class<?>>";
      }
    }
);
  }
  finally {
    this.injector=null;
  }
}
