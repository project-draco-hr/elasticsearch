{
  long totalTimeStart=System.currentTimeMillis();
  boolean indexDirty=false;
  boolean translogDirty=false;
  final SnapshotIndexCommit snapshotIndexCommit=snapshot.indexCommit();
  final Translog.Snapshot translogSnapshot=snapshot.translogSnapshot();
  int indexNumberOfFiles=0;
  long indexTotalFilesSize=0;
  long indexTime=0;
  if (snapshot.indexChanged()) {
    long time=System.currentTimeMillis();
    indexDirty=true;
    final CountDownLatch latch=new CountDownLatch(snapshotIndexCommit.getFiles().length);
    final AtomicReference<Exception> lastException=new AtomicReference<Exception>();
    for (    final String fileName : snapshotIndexCommit.getFiles()) {
      if (fileName.equals(snapshotIndexCommit.getSegmentsFileName())) {
        latch.countDown();
        continue;
      }
      IndexInput indexInput=null;
      try {
        indexInput=snapshotIndexCommit.getDirectory().openInput(fileName);
        File snapshotFile=new File(locationIndex,fileName);
        if (snapshotFile.exists() && (snapshotFile.length() == indexInput.length())) {
          latch.countDown();
          continue;
        }
      }
 catch (      Exception e) {
        logger.debug("Failed to verify file equality based on length, copying...",e);
      }
 finally {
        if (indexInput != null) {
          try {
            indexInput.close();
          }
 catch (          IOException e) {
          }
        }
      }
      indexNumberOfFiles++;
      try {
        indexTotalFilesSize+=snapshotIndexCommit.getDirectory().fileLength(fileName);
      }
 catch (      IOException e) {
      }
      threadPool.execute(new Runnable(){
        @Override public void run(){
          File copyTo=new File(locationIndex,fileName);
          try {
            copyFromDirectory(snapshotIndexCommit.getDirectory(),fileName,copyTo,nativeCopy);
          }
 catch (          Exception e) {
            lastException.set(new IndexShardGatewaySnapshotFailedException(shardId,"Failed to copy to [" + copyTo + "], from dir ["+ snapshotIndexCommit.getDirectory()+ "] and file ["+ fileName+ "]",e));
          }
 finally {
            latch.countDown();
          }
        }
      }
);
    }
    try {
      latch.await();
    }
 catch (    InterruptedException e) {
      lastException.set(e);
    }
    if (lastException.get() != null) {
      throw new IndexShardGatewaySnapshotFailedException(shardId(),"Failed to perform snapshot (index files)",lastException.get());
    }
    indexTime=System.currentTimeMillis() - time;
  }
  File translogFile=new File(locationTranslog,"translog-" + translogSnapshot.translogId());
  RandomAccessFile translogRaf=null;
  int translogNumberOfOperations=0;
  long translogTime=0;
  if (snapshot.newTranslogCreated()) {
    translogDirty=true;
    try {
      long time=System.currentTimeMillis();
      translogRaf=new RandomAccessFile(translogFile,"rw");
      StreamOutput out=new DataOutputStreamOutput(translogRaf);
      out.writeInt(-1);
      for (      Translog.Operation operation : translogSnapshot) {
        translogNumberOfOperations++;
        writeTranslogOperation(out,operation);
      }
      translogTime=System.currentTimeMillis() - time;
    }
 catch (    Exception e) {
      try {
        if (translogRaf != null) {
          translogRaf.close();
        }
      }
 catch (      IOException e1) {
      }
      throw new IndexShardGatewaySnapshotFailedException(shardId(),"Failed to snapshot translog into [" + translogFile + "]",e);
    }
  }
 else   if (snapshot.sameTranslogNewOperations()) {
    translogDirty=true;
    try {
      long time=System.currentTimeMillis();
      translogRaf=new RandomAccessFile(translogFile,"rw");
      translogRaf.seek(translogRaf.length());
      StreamOutput out=new DataOutputStreamOutput(translogRaf);
      for (      Translog.Operation operation : translogSnapshot.skipTo(snapshot.lastTranslogSize())) {
        translogNumberOfOperations++;
        writeTranslogOperation(out,operation);
      }
      translogTime=System.currentTimeMillis() - time;
    }
 catch (    Exception e) {
      try {
        if (translogRaf != null) {
          translogRaf.close();
        }
      }
 catch (      Exception e1) {
      }
      throw new IndexShardGatewaySnapshotFailedException(shardId(),"Failed to append snapshot translog into [" + translogFile + "]",e);
    }
  }
  try {
    if (indexDirty) {
      indexNumberOfFiles++;
      indexTotalFilesSize+=snapshotIndexCommit.getDirectory().fileLength(snapshotIndexCommit.getSegmentsFileName());
      long time=System.currentTimeMillis();
      copyFromDirectory(snapshotIndexCommit.getDirectory(),snapshotIndexCommit.getSegmentsFileName(),new File(locationIndex,snapshotIndexCommit.getSegmentsFileName()),nativeCopy);
      indexTime+=(System.currentTimeMillis() - time);
    }
  }
 catch (  Exception e) {
    try {
      if (translogRaf != null) {
        translogRaf.close();
      }
    }
 catch (    Exception e1) {
    }
    throw new IndexShardGatewaySnapshotFailedException(shardId(),"Failed to finalize index snapshot into [" + new File(locationIndex,snapshotIndexCommit.getSegmentsFileName()) + "]",e);
  }
  try {
    if (translogDirty) {
      translogRaf.seek(0);
      translogRaf.writeInt(translogSnapshot.size());
      translogRaf.close();
      syncFile(translogFile);
    }
  }
 catch (  Exception e) {
    if (translogRaf != null) {
      try {
        translogRaf.close();
      }
 catch (      Exception e1) {
      }
    }
    throw new IndexShardGatewaySnapshotFailedException(shardId(),"Failed to finalize snapshot into [" + translogFile + "]",e);
  }
  if (snapshot.newTranslogCreated()) {
    new File(locationTranslog,"translog-" + snapshot.lastTranslogId()).delete();
  }
  if (indexDirty) {
    File[] existingFiles=locationIndex.listFiles();
    for (    File existingFile : existingFiles) {
      boolean found=false;
      for (      final String fileName : snapshotIndexCommit.getFiles()) {
        if (existingFile.getName().equals(fileName)) {
          found=true;
          break;
        }
      }
      if (!found) {
        existingFile.delete();
      }
    }
  }
  return new SnapshotStatus(new TimeValue(System.currentTimeMillis() - totalTimeStart),new SnapshotStatus.Index(indexNumberOfFiles,new SizeValue(indexTotalFilesSize),new TimeValue(indexTime)),new SnapshotStatus.Translog(translogNumberOfOperations,new TimeValue(translogTime)));
}
