{
  super(settings);
  indicesAnalysisService.tokenizerFactories().put("icu_tokenizer",new PreBuiltTokenizerFactoryFactory(new TokenizerFactory(){
    @Override public String name(){
      return "icu_tokenizer";
    }
    @Override public Tokenizer create(){
      return new ICUTokenizer();
    }
  }
));
  indicesAnalysisService.tokenFilterFactories().put("icu_normalizer",new PreBuiltTokenFilterFactoryFactory(new TokenFilterFactory(){
    @Override public String name(){
      return "icu_normalizer";
    }
    @Override public TokenStream create(    TokenStream tokenStream){
      return new org.apache.lucene.analysis.icu.ICUNormalizer2Filter(tokenStream,Normalizer2.getInstance(null,"nfkc_cf",Normalizer2.Mode.COMPOSE));
    }
  }
));
  indicesAnalysisService.tokenFilterFactories().put("icu_folding",new PreBuiltTokenFilterFactoryFactory(new TokenFilterFactory(){
    @Override public String name(){
      return "icu_folding";
    }
    @Override public TokenStream create(    TokenStream tokenStream){
      return new ICUFoldingFilter(tokenStream);
    }
  }
));
  indicesAnalysisService.tokenFilterFactories().put("icu_collation",new PreBuiltTokenFilterFactoryFactory(new TokenFilterFactory(){
    @Override public String name(){
      return "icu_collation";
    }
    @Override public TokenStream create(    TokenStream tokenStream){
      return new ICUCollationKeyFilter(tokenStream,Collator.getInstance());
    }
  }
));
  indicesAnalysisService.tokenFilterFactories().put("icu_transform",new PreBuiltTokenFilterFactoryFactory(new TokenFilterFactory(){
    @Override public String name(){
      return "icu_transform";
    }
    @Override public TokenStream create(    TokenStream tokenStream){
      return new ICUTransformFilter(tokenStream,Transliterator.getInstance("Null",Transliterator.FORWARD));
    }
  }
));
}
