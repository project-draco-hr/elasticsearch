{
  Settings settings=Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(),createTempDir()).put("transport.type","local").put("http.enabled",false).build();
  List<Class<? extends Plugin>> plugins=new ArrayList<>();
  boolean useMockBigArrays=randomBoolean();
  boolean useMockSearchService=randomBoolean();
  if (useMockBigArrays) {
    plugins.add(NodeMocksPlugin.class);
  }
  if (useMockSearchService) {
    plugins.add(MockSearchService.TestPlugin.class);
  }
  try (MockNode node=new MockNode(settings,plugins)){
    BigArrays bigArrays=node.injector().getInstance(BigArrays.class);
    SearchService searchService=node.injector().getInstance(SearchService.class);
    if (useMockBigArrays) {
      assertSame(bigArrays.getClass(),MockBigArrays.class);
    }
 else {
      assertSame(bigArrays.getClass(),BigArrays.class);
    }
    if (useMockSearchService) {
      assertSame(searchService.getClass(),MockSearchService.class);
    }
 else {
      assertSame(searchService.getClass(),SearchService.class);
    }
  }
 }
