{
  IndexService indexService=createIndex("test",Settings.EMPTY,"type","my_field1","type=string,store=yes","my_field2","type=integer,precision_step=10","my_field3","type=long,doc_values=false","my_field4","type=float,index_options=freqs","my_field5","type=double,precision_step=14","my_field6","type=date,doc_values=false");
  DocumentMapper newMapper=indexService.mapperService().documentMapperWithAutoCreate("type2").getDocumentMapper();
  Mapper update=parse(newMapper,indexService.mapperService().documentMapperParser(),XContentFactory.jsonBuilder().startObject().field("my_field1",42).field("my_field2",43).field("my_field3",44).field("my_field4",45).field("my_field5",46).field("my_field6",47).endObject());
  Mapper myField1Mapper=null;
  Mapper myField2Mapper=null;
  Mapper myField3Mapper=null;
  Mapper myField4Mapper=null;
  Mapper myField5Mapper=null;
  Mapper myField6Mapper=null;
  for (  Mapper m : update) {
switch (m.name()) {
case "my_field1":
      myField1Mapper=m;
    break;
case "my_field2":
  myField2Mapper=m;
break;
case "my_field3":
myField3Mapper=m;
break;
case "my_field4":
myField4Mapper=m;
break;
case "my_field5":
myField5Mapper=m;
break;
case "my_field6":
myField6Mapper=m;
break;
}
}
assertNotNull(myField1Mapper);
assertTrue(myField1Mapper instanceof StringFieldMapper);
assertTrue(((StringFieldMapper)myField1Mapper).fieldType().stored());
assertNotNull(myField2Mapper);
assertTrue(myField2Mapper instanceof IntegerFieldMapper);
assertEquals(10,((IntegerFieldMapper)myField2Mapper).fieldType().numericPrecisionStep());
assertNotNull(myField3Mapper);
assertTrue(myField3Mapper instanceof LongFieldMapper);
assertFalse(((LongFieldType)((LongFieldMapper)myField3Mapper).fieldType()).hasDocValues());
assertNotNull(myField4Mapper);
assertTrue(myField4Mapper instanceof FloatFieldMapper);
assertEquals(IndexOptions.DOCS_AND_FREQS,((FieldMapper)myField4Mapper).fieldType().indexOptions());
assertNotNull(myField5Mapper);
assertTrue(myField5Mapper instanceof DoubleFieldMapper);
assertEquals(14,((DoubleFieldMapper)myField5Mapper).fieldType().numericPrecisionStep());
assertNotNull(myField6Mapper);
assertTrue(myField6Mapper instanceof DateFieldMapper);
assertFalse(((DateFieldType)((DateFieldMapper)myField6Mapper).fieldType()).hasDocValues());
try {
parse(newMapper,indexService.mapperService().documentMapperParser(),XContentFactory.jsonBuilder().startObject().field("my_field2","foobar").endObject());
fail("Cannot succeed, incompatible types");
}
 catch (MapperParsingException e) {
}
}
