{
  String[] dataPaths=tmpPaths();
  NodeEnvironment env=newNodeEnvironment(dataPaths,"/tmp",Settings.EMPTY);
  IndexSettings s1=IndexSettingsModule.newIndexSettings("myindex",Settings.EMPTY);
  IndexSettings s2=IndexSettingsModule.newIndexSettings("myindex",Settings.builder().put(IndexMetaData.SETTING_DATA_PATH,"/tmp/foo").build());
  Index index=new Index("myindex","_na_");
  ShardId sid=new ShardId(index,0);
  assertFalse("no settings should mean no custom data path",s1.hasCustomDataPath());
  assertTrue("settings with path_data should have a custom data path",s2.hasCustomDataPath());
  assertThat(env.availableShardPaths(sid),equalTo(env.availableShardPaths(sid)));
  assertThat(env.resolveCustomLocation(s2,sid),equalTo(PathUtils.get("/tmp/foo/0/myindex/0")));
  assertThat("shard paths with a custom data_path should contain only regular paths",env.availableShardPaths(sid),equalTo(stringsToPaths(dataPaths,"elasticsearch/nodes/0/indices/myindex/0")));
  assertThat("index paths uses the regular template",env.indexPaths(index.getName()),equalTo(stringsToPaths(dataPaths,"elasticsearch/nodes/0/indices/myindex")));
  env.close();
  NodeEnvironment env2=newNodeEnvironment(dataPaths,"/tmp",Settings.builder().put(NodeEnvironment.ADD_NODE_ID_TO_CUSTOM_PATH.getKey(),false).build());
  assertThat(env2.availableShardPaths(sid),equalTo(env2.availableShardPaths(sid)));
  assertThat(env2.resolveCustomLocation(s2,sid),equalTo(PathUtils.get("/tmp/foo/myindex/0")));
  assertThat("shard paths with a custom data_path should contain only regular paths",env2.availableShardPaths(sid),equalTo(stringsToPaths(dataPaths,"elasticsearch/nodes/0/indices/myindex/0")));
  assertThat("index paths uses the regular template",env2.indexPaths(index.getName()),equalTo(stringsToPaths(dataPaths,"elasticsearch/nodes/0/indices/myindex")));
  env2.close();
}
