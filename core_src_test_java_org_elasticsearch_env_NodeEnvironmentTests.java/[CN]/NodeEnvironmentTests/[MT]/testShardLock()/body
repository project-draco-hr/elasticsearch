{
  final NodeEnvironment env=newNodeEnvironment();
  ShardLock fooLock=env.shardLock(new ShardId("foo","_na_",0));
  assertEquals(new ShardId("foo","_na_",0),fooLock.getShardId());
  try {
    env.shardLock(new ShardId("foo","_na_",0));
    fail("shard is locked");
  }
 catch (  LockObtainFailedException ex) {
  }
  for (  Path path : env.indexPaths("foo")) {
    Files.createDirectories(path.resolve("0"));
    Files.createDirectories(path.resolve("1"));
  }
  try {
    env.lockAllForIndex(new Index("foo","_na_"),idxSettings,randomIntBetween(0,10));
    fail("shard 0 is locked");
  }
 catch (  LockObtainFailedException ex) {
  }
  fooLock.close();
  env.shardLock(new ShardId("foo","_na_",0)).close();
  List<ShardLock> locks=env.lockAllForIndex(new Index("foo","_na_"),idxSettings,randomIntBetween(0,10));
  try {
    env.shardLock(new ShardId("foo","_na_",0));
    fail("shard is locked");
  }
 catch (  LockObtainFailedException ex) {
  }
  IOUtils.close(locks);
  assertTrue("LockedShards: " + env.lockedShards(),env.lockedShards().isEmpty());
  env.close();
}
