{
  Path tempNoCluster=createTempDir();
  String tempDataPathString=tempNoCluster.toAbsolutePath().toString();
  Path tempPath=tempNoCluster.resolve("foo");
  String tempClusterPathString=tempPath.toAbsolutePath().toString();
  assertFalse("non-existent directory should not be used",NodeEnvironment.readFromDataPathWithClusterName(tempPath));
  Settings settings=Settings.builder().put("cluster.name","foo").put(Environment.PATH_HOME_SETTING.getKey(),createTempDir().toAbsolutePath().toString()).put(Environment.PATH_DATA_SETTING.getKey(),tempDataPathString).build();
  try (NodeEnvironment env=new NodeEnvironment(settings,new Environment(settings))){
    Path nodeDataPath=env.nodeDataPaths()[0];
    assertThat(nodeDataPath.toString(),equalTo(tempDataPathString + "/nodes/0"));
  }
   IOUtils.rm(tempNoCluster);
  Files.createDirectories(tempPath);
  assertFalse("empty directory should not be read from",NodeEnvironment.readFromDataPathWithClusterName(tempPath));
  settings=Settings.builder().put("cluster.name","foo").put(Environment.PATH_HOME_SETTING.getKey(),createTempDir().toAbsolutePath().toString()).put(Environment.PATH_DATA_SETTING.getKey(),tempDataPathString).build();
  try (NodeEnvironment env=new NodeEnvironment(settings,new Environment(settings))){
    Path nodeDataPath=env.nodeDataPaths()[0];
    assertThat(nodeDataPath.toString(),equalTo(tempDataPathString + "/nodes/0"));
  }
   IOUtils.rm(tempNoCluster);
  Files.createDirectories(tempPath.resolve(NodeEnvironment.NODES_FOLDER));
  assertTrue("there is data in the directory",NodeEnvironment.readFromDataPathWithClusterName(tempPath));
  settings=Settings.builder().put("cluster.name","foo").put(Environment.PATH_HOME_SETTING.getKey(),createTempDir().toAbsolutePath().toString()).put(Environment.PATH_DATA_SETTING.getKey(),tempDataPathString).build();
  try (NodeEnvironment env=new NodeEnvironment(settings,new Environment(settings))){
    Path nodeDataPath=env.nodeDataPaths()[0];
    assertThat(nodeDataPath.toString(),equalTo(tempClusterPathString + "/nodes/0"));
  }
 }
