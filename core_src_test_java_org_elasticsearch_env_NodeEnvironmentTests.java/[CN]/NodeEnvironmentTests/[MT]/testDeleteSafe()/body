{
  final NodeEnvironment env=newNodeEnvironment();
  final Index index=new Index("foo","fooUUID");
  ShardLock fooLock=env.shardLock(new ShardId(index,0));
  assertEquals(new ShardId(index,0),fooLock.getShardId());
  for (  Path path : env.indexPaths(index)) {
    Files.createDirectories(path.resolve("0"));
    Files.createDirectories(path.resolve("1"));
  }
  try {
    env.deleteShardDirectorySafe(new ShardId(index,0),idxSettings);
    fail("shard is locked");
  }
 catch (  ShardLockObtainFailedException ex) {
  }
  for (  Path path : env.indexPaths(index)) {
    assertTrue(Files.exists(path.resolve("0")));
    assertTrue(Files.exists(path.resolve("1")));
  }
  env.deleteShardDirectorySafe(new ShardId(index,1),idxSettings);
  for (  Path path : env.indexPaths(index)) {
    assertTrue(Files.exists(path.resolve("0")));
    assertFalse(Files.exists(path.resolve("1")));
  }
  try {
    env.deleteIndexDirectorySafe(index,randomIntBetween(0,10),idxSettings);
    fail("shard is locked");
  }
 catch (  ShardLockObtainFailedException ex) {
  }
  fooLock.close();
  for (  Path path : env.indexPaths(index)) {
    assertTrue(Files.exists(path));
  }
  final AtomicReference<Throwable> threadException=new AtomicReference<>();
  final CountDownLatch latch=new CountDownLatch(1);
  final CountDownLatch blockLatch=new CountDownLatch(1);
  final CountDownLatch start=new CountDownLatch(1);
  if (randomBoolean()) {
    Thread t=new Thread(new AbstractRunnable(){
      @Override public void onFailure(      Exception e){
        logger.error("unexpected error",e);
        threadException.set(e);
        latch.countDown();
        blockLatch.countDown();
      }
      @Override protected void doRun() throws Exception {
        start.await();
        try (ShardLock autoCloses=env.shardLock(new ShardId(index,0))){
          blockLatch.countDown();
          Thread.sleep(randomIntBetween(1,10));
        }
         latch.countDown();
      }
    }
);
    t.start();
  }
 else {
    latch.countDown();
    blockLatch.countDown();
  }
  start.countDown();
  blockLatch.await();
  env.deleteIndexDirectorySafe(index,5000,idxSettings);
  assertNull(threadException.get());
  for (  Path path : env.indexPaths(index)) {
    assertFalse(Files.exists(path));
  }
  latch.await();
  assertTrue("LockedShards: " + env.lockedShards(),env.lockedShards().isEmpty());
  env.close();
}
