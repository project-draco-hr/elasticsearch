{
  return new LeafSearchScript(){
    FunctionValues values=source.getValues(Collections.singletonMap("scorer",Lucene.illegalScorer("Scores are not available in the current context")),leaf);
    double evaluate(){
      try {
        return values.doubleVal(docid);
      }
 catch (      Exception exception) {
        throw new ScriptException("Error evaluating " + compiledScript,exception);
      }
    }
    @Override public Object run(){
      return new Double(evaluate());
    }
    @Override public float runAsFloat(){
      return (float)evaluate();
    }
    @Override public long runAsLong(){
      return (long)evaluate();
    }
    @Override public double runAsDouble(){
      return evaluate();
    }
    @Override public void setDocument(    int d){
      docid=d;
    }
    @Override public void setScorer(    Scorer s){
      scorer=s;
      try {
        values=source.getValues(Collections.singletonMap("scorer",scorer),leaf);
      }
 catch (      IOException e) {
        throw new IllegalStateException("Can't get values using " + compiledScript,e);
      }
    }
    @Override public void setSource(    Map<String,Object> source){
    }
    @Override public void setNextVar(    String name,    Object value){
      assert(name.equals("_value"));
      if (specialValue != null) {
        if (value instanceof Number) {
          specialValue.setValue(((Number)value).doubleValue());
        }
 else {
          throw new ScriptException("Cannot use expression with text variable using " + compiledScript);
        }
      }
    }
  }
;
}
