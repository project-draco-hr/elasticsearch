{
  int numPredictions=randomIntBetween(1,10);
  SearchResponse response=client().prepareSearch("idx").setTypes("gap_type").addAggregation(filter("filtered").filter(new RangeQueryBuilder(INTERVAL_FIELD).to(1)).subAggregation(histogram("histo").field(INTERVAL_FIELD).interval(1).extendedBounds(0L,49L).subAggregation(randomMetric("the_metric",GAP_FIELD)).subAggregation(movingAvg("movavg_values").window(windowSize).modelBuilder(randomModelBuilder()).gapPolicy(gapPolicy).setBucketsPaths("the_metric").predict(numPredictions)))).execute().actionGet();
  assertSearchResponse(response);
  InternalFilter filtered=response.getAggregations().get("filtered");
  assertThat(filtered,notNullValue());
  assertThat(filtered.getName(),equalTo("filtered"));
  InternalHistogram<Bucket> histo=filtered.getAggregations().get("histo");
  assertThat(histo,notNullValue());
  assertThat(histo.getName(),equalTo("histo"));
  List<? extends Bucket> buckets=histo.getBuckets();
  if (gapPolicy.equals(BucketHelpers.GapPolicy.SKIP)) {
    assertThat("Size of buckets array is not correct.",buckets.size(),equalTo(50));
  }
 else {
    assertThat("Size of buckets array is not correct.",buckets.size(),equalTo(50 + numPredictions));
  }
  SimpleValue current=buckets.get(0).getAggregations().get("movavg_values");
  assertThat(current,notNullValue());
  if (gapPolicy.equals(BucketHelpers.GapPolicy.SKIP)) {
    for (int i=1; i < 1 + numPredictions; i++) {
      assertThat(buckets.get(i).getDocCount(),equalTo(0L));
      assertThat((buckets.get(i).getAggregations().get("movavg_values")),notNullValue());
    }
  }
 else {
    for (int i=50; i < 50 + numPredictions; i++) {
      assertThat(buckets.get(i).getDocCount(),equalTo(0L));
      assertThat((buckets.get(i).getAggregations().get("movavg_values")),notNullValue());
    }
  }
}
