{
  final boolean useClusterSetting=randomBoolean();
  Settings build=Settings.builder().put(CLUSTER_ROUTING_REBALANCE_ENABLE_SETTING.getKey(),useClusterSetting ? Rebalance.NONE : RandomPicks.randomFrom(random(),Rebalance.values())).put(ConcurrentRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_CLUSTER_CONCURRENT_REBALANCE_SETTING.getKey(),3).build();
  ClusterSettings clusterSettings=new ClusterSettings(build,ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);
  AllocationService strategy=createAllocationService(build,clusterSettings,random());
  Settings indexSettings=useClusterSetting ? Settings.EMPTY : Settings.builder().put(EnableAllocationDecider.INDEX_ROUTING_REBALANCE_ENABLE_SETTING.getKey(),Rebalance.NONE).build();
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT).put(indexSettings)).numberOfShards(6).numberOfReplicas(0)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build();
  logger.info("--> adding one nodes and do rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2"))).build();
  routingTable=strategy.reroute(clusterState,"reroute").routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(),equalTo(6));
  logger.info("--> start the shards (primaries)");
  routingTable=strategy.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(),equalTo(6));
  assertThat(clusterState.getRoutingNodes().shardsWithState(INITIALIZING).size(),equalTo(0));
  logger.info("--> adding one nodes and do rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2")).add(newNode("node3"))).build();
  ClusterState prevState=clusterState;
  routingTable=strategy.reroute(clusterState,"reroute").routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.getRoutingNodes().shardsWithState(STARTED).size(),equalTo(6));
  assertThat(clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(),equalTo(0));
  if (useClusterSetting) {
    prevState=clusterState;
    clusterState=ClusterState.builder(clusterState).metaData(MetaData.builder(metaData).transientSettings(Settings.builder().put(CLUSTER_ROUTING_REBALANCE_ENABLE_SETTING.getKey(),randomBoolean() ? Rebalance.PRIMARIES : Rebalance.ALL).build())).build();
  }
 else {
    prevState=clusterState;
    IndexMetaData meta=clusterState.getMetaData().index("test");
    clusterState=ClusterState.builder(clusterState).metaData(MetaData.builder(metaData).removeAllIndices().put(IndexMetaData.builder(meta).settings(Settings.builder().put(meta.getSettings()).put(EnableAllocationDecider.INDEX_ROUTING_REBALANCE_ENABLE_SETTING.getKey(),randomBoolean() ? Rebalance.PRIMARIES : Rebalance.ALL).build()))).build();
  }
  clusterSettings.applySettings(clusterState.metaData().settings());
  routingTable=strategy.reroute(clusterState,"reroute").routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat("expected 4 primaries to be started and 2 to relocate useClusterSettings: " + useClusterSetting,clusterState.getRoutingNodes().shardsWithState(STARTED).size(),equalTo(4));
  assertThat("expected 2 primaries to relocate useClusterSettings: " + useClusterSetting,clusterState.getRoutingNodes().shardsWithState(RELOCATING).size(),equalTo(2));
}
