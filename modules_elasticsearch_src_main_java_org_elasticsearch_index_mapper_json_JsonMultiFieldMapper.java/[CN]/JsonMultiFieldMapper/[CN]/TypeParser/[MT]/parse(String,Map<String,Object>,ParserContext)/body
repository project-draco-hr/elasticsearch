{
  JsonMultiFieldMapper.Builder builder=multiField(name);
  for (  Map.Entry<String,Object> entry : node.entrySet()) {
    String fieldName=Strings.toUnderscoreCase(entry.getKey());
    Object fieldNode=entry.getValue();
    if (fieldName.equals("path")) {
      builder.pathType(parsePathType(name,fieldNode.toString()));
    }
 else     if (fieldName.equals("fields")) {
      Map<String,Object> fieldsNode=(Map<String,Object>)fieldNode;
      for (      Map.Entry<String,Object> entry1 : fieldsNode.entrySet()) {
        String propName=entry1.getKey();
        Map<String,Object> propNode=(Map<String,Object>)entry1.getValue();
        String type;
        Object typeNode=propNode.get("type");
        if (typeNode != null) {
          type=typeNode.toString();
        }
 else {
          throw new MapperParsingException("No type specified for property [" + propName + "]");
        }
        JsonTypeParser typeParser=parserContext.typeParser(type);
        if (typeParser == null) {
          throw new MapperParsingException("No handler for type [" + type + "] declared on field ["+ fieldName+ "]");
        }
        builder.add(typeParser.parse(propName,propNode,parserContext));
      }
    }
  }
  return builder;
}
