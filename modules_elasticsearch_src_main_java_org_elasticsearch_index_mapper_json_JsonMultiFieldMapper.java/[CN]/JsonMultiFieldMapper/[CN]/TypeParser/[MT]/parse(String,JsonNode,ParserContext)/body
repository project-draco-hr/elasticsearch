{
  ObjectNode multiFieldNode=(ObjectNode)node;
  JsonMultiFieldMapper.Builder builder=multiField(name);
  for (Iterator<Map.Entry<String,JsonNode>> fieldsIt=multiFieldNode.getFields(); fieldsIt.hasNext(); ) {
    Map.Entry<String,JsonNode> entry=fieldsIt.next();
    String fieldName=Strings.toUnderscoreCase(entry.getKey());
    JsonNode fieldNode=entry.getValue();
    if (fieldName.equals("path")) {
      builder.pathType(parsePathType(name,fieldNode.getValueAsText()));
    }
 else     if (fieldName.equals("fields")) {
      ObjectNode fieldsNode=(ObjectNode)fieldNode;
      for (Iterator<Map.Entry<String,JsonNode>> propsIt=fieldsNode.getFields(); propsIt.hasNext(); ) {
        Map.Entry<String,JsonNode> entry1=propsIt.next();
        String propName=entry1.getKey();
        JsonNode propNode=entry1.getValue();
        String type;
        JsonNode typeNode=propNode.get("type");
        if (typeNode != null) {
          type=typeNode.getTextValue();
        }
 else {
          throw new MapperParsingException("No type specified for property [" + propName + "]");
        }
        JsonTypeParser typeParser=parserContext.typeParser(type);
        if (typeParser == null) {
          throw new MapperParsingException("No handler for type [" + type + "] declared on field ["+ fieldName+ "]");
        }
        builder.add(typeParser.parse(propName,propNode,parserContext));
      }
    }
  }
  return builder;
}
