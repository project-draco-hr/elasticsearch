{
  if (!lifecycle.started()) {
    throw new IllegalStateException("Can't create an index [" + indexMetaData.getIndex() + "], node is closed");
  }
  final Settings settings=indexMetaData.getSettings();
  Index index=new Index(indexMetaData.getIndex());
  if (indices.containsKey(index.name())) {
    throw new IndexAlreadyExistsException(index);
  }
  indicesLifecycle.beforeIndexCreated(index,settings);
  logger.debug("creating Index [{}], shards [{}]/[{}{}]",indexMetaData.getIndex(),settings.get(SETTING_NUMBER_OF_SHARDS),settings.get(SETTING_NUMBER_OF_REPLICAS),IndexMetaData.isIndexUsingShadowReplicas(settings) ? "s" : "");
  Settings indexSettings=settingsBuilder().put(this.settings).put(indexMetaData.getSettings()).build();
  ModulesBuilder modules=new ModulesBuilder();
  modules.add(new IndexNameModule(index));
  modules.add(new IndexSettingsModule(index,indexSettings));
  for (  Module pluginModule : pluginsService.indexModules(indexSettings)) {
    modules.add(pluginModule);
  }
  modules.add(new IndexStoreModule(indexSettings));
  modules.add(new AnalysisModule(indexSettings,indicesAnalysisService));
  modules.add(new SimilarityModule(index,indexSettings));
  modules.add(new IndexCacheModule(indexSettings));
  modules.add(new IndexModule(indexMetaData));
  pluginsService.processModules(modules);
  Injector indexInjector;
  try {
    indexInjector=modules.createChildInjector(injector);
  }
 catch (  CreationException e) {
    throw new IndexCreationException(index,Injectors.getFirstErrorFailure(e));
  }
catch (  Throwable e) {
    throw new IndexCreationException(index,e);
  }
  IndexService indexService=indexInjector.getInstance(IndexService.class);
  indicesLifecycle.afterIndexCreated(indexService);
  indices=newMapBuilder(indices).put(index.name(),new IndexServiceInjectorPair(indexService,indexInjector)).immutableMap();
  return indexService;
}
