{
  CommonStats oldStats=new CommonStats(flags);
  if (includePrevious) {
    Flag[] setFlags=flags.getFlags();
    for (    Flag flag : setFlags) {
switch (flag) {
case Get:
        oldStats.get.add(oldShardsStats.getStats);
      break;
case Indexing:
    oldStats.indexing.add(oldShardsStats.indexingStats);
  break;
case Search:
oldStats.search.add(oldShardsStats.searchStats);
break;
case Merge:
oldStats.merge.add(oldShardsStats.mergeStats);
break;
case Refresh:
oldStats.refresh.add(oldShardsStats.refreshStats);
break;
case Recovery:
oldStats.recoveryStats.add(oldShardsStats.recoveryStats);
break;
case Flush:
oldStats.flush.add(oldShardsStats.flushStats);
break;
}
}
}
Map<Index,List<IndexShardStats>> statsByShard=new HashMap<>();
for (IndexServiceInjectorPair value : indices.values()) {
IndexService indexService=value.getIndexService();
for (IndexShard indexShard : indexService) {
try {
if (indexShard.routingEntry() == null) {
continue;
}
IndexShardStats indexShardStats=new IndexShardStats(indexShard.shardId(),new ShardStats[]{new ShardStats(indexShard.routingEntry(),indexShard.shardPath(),new CommonStats(indexShard,flags),indexShard.commitStats())});
if (!statsByShard.containsKey(indexService.index())) {
statsByShard.put(indexService.index(),arrayAsArrayList(indexShardStats));
}
 else {
statsByShard.get(indexService.index()).add(indexShardStats);
}
}
 catch (IllegalIndexShardStateException e) {
logger.trace("{} ignoring shard stats",e,indexShard.shardId());
}
}
}
return new NodeIndicesStats(oldStats,statsByShard);
}
