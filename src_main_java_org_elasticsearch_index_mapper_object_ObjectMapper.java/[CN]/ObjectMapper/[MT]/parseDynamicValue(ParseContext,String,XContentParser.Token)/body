{
  Dynamic dynamic=this.dynamic;
  if (dynamic == null) {
    dynamic=context.root().dynamic();
  }
  if (dynamic == Dynamic.STRICT) {
    throw new StrictDynamicMappingException(fullPath,currentFieldName);
  }
  if (dynamic == Dynamic.FALSE) {
    return;
  }
synchronized (mutex) {
    Mapper mapper=mappers.get(currentFieldName);
    if (mapper == null) {
      BuilderContext builderContext=new BuilderContext(context.indexSettings(),context.path());
      if (token == XContentParser.Token.VALUE_STRING) {
        boolean resolved=false;
        if (!resolved) {
          Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"string",null);
          if (builder != null) {
            mapper=builder.build(builderContext);
            resolved=true;
          }
        }
        if (!resolved && context.root().dateDetection()) {
          String text=context.parser().text();
          if (Strings.countOccurrencesOf(text,":") > 1 || Strings.countOccurrencesOf(text,"-") > 1 || Strings.countOccurrencesOf(text,"/") > 1) {
            for (            FormatDateTimeFormatter dateTimeFormatter : context.root().dynamicDateTimeFormatters()) {
              try {
                dateTimeFormatter.parser().parseMillis(text);
                Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"date");
                if (builder == null) {
                  builder=dateField(currentFieldName).dateTimeFormatter(dateTimeFormatter);
                }
                mapper=builder.build(builderContext);
                resolved=true;
                break;
              }
 catch (              Exception e) {
              }
            }
          }
        }
        if (!resolved && context.root().numericDetection()) {
          String text=context.parser().text();
          try {
            Long.parseLong(text);
            Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"long");
            if (builder == null) {
              builder=longField(currentFieldName);
            }
            mapper=builder.build(builderContext);
            resolved=true;
          }
 catch (          Exception e) {
          }
          if (!resolved) {
            try {
              Double.parseDouble(text);
              Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"double");
              if (builder == null) {
                builder=doubleField(currentFieldName);
              }
              mapper=builder.build(builderContext);
              resolved=true;
            }
 catch (            Exception e) {
            }
          }
        }
        if (!resolved) {
          Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"string");
          if (builder == null) {
            builder=stringField(currentFieldName);
          }
          mapper=builder.build(builderContext);
        }
      }
 else       if (token == XContentParser.Token.VALUE_NUMBER) {
        XContentParser.NumberType numberType=context.parser().numberType();
        if (numberType == XContentParser.NumberType.INT) {
          if (context.parser().estimatedNumberType()) {
            Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"long");
            if (builder == null) {
              builder=longField(currentFieldName);
            }
            mapper=builder.build(builderContext);
          }
 else {
            Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"integer");
            if (builder == null) {
              builder=integerField(currentFieldName);
            }
            mapper=builder.build(builderContext);
          }
        }
 else         if (numberType == XContentParser.NumberType.LONG) {
          Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"long");
          if (builder == null) {
            builder=longField(currentFieldName);
          }
          mapper=builder.build(builderContext);
        }
 else         if (numberType == XContentParser.NumberType.FLOAT) {
          if (context.parser().estimatedNumberType()) {
            Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"double");
            if (builder == null) {
              builder=doubleField(currentFieldName);
            }
            mapper=builder.build(builderContext);
          }
 else {
            Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"float");
            if (builder == null) {
              builder=floatField(currentFieldName);
            }
            mapper=builder.build(builderContext);
          }
        }
 else         if (numberType == XContentParser.NumberType.DOUBLE) {
          Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"double");
          if (builder == null) {
            builder=doubleField(currentFieldName);
          }
          mapper=builder.build(builderContext);
        }
      }
 else       if (token == XContentParser.Token.VALUE_BOOLEAN) {
        Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"boolean");
        if (builder == null) {
          builder=booleanField(currentFieldName);
        }
        mapper=builder.build(builderContext);
      }
 else       if (token == XContentParser.Token.VALUE_EMBEDDED_OBJECT) {
        Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"binary");
        if (builder == null) {
          builder=binaryField(currentFieldName);
        }
        mapper=builder.build(builderContext);
      }
 else {
        Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,null);
        if (builder != null) {
          mapper=builder.build(builderContext);
        }
 else {
          throw new ElasticsearchIllegalStateException("Can't handle serializing a dynamic type with content token [" + token + "] and field name ["+ currentFieldName+ "]");
        }
      }
      if (context.isWithinNewMapper()) {
        mapper.parse(context);
      }
 else {
        context.setWithinNewMapper();
        try {
          mapper.parse(context);
          FieldMapperListener.Aggregator newFields=new FieldMapperListener.Aggregator();
          mapper.traverse(newFields);
          context.docMapper().addFieldMappers(newFields.mappers);
        }
  finally {
          context.clearWithinNewMapper();
        }
      }
      putMapper(mapper);
      context.setMappingsModified();
    }
 else {
      mapper.parse(context);
    }
  }
}
