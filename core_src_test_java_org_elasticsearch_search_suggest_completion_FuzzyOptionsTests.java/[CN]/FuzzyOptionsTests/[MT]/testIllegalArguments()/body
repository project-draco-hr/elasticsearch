{
  final FuzzyOptions.Builder builder=FuzzyOptions.builder();
  try {
    builder.setFuzziness(-randomIntBetween(1,Integer.MAX_VALUE));
    fail("fuzziness must be > 0");
  }
 catch (  IllegalArgumentException e) {
    assertEquals(e.getMessage(),"fuzziness must be between 0 and 2");
  }
  try {
    builder.setFuzziness(randomIntBetween(3,Integer.MAX_VALUE));
    fail("fuzziness must be < 2");
  }
 catch (  IllegalArgumentException e) {
    assertEquals(e.getMessage(),"fuzziness must be between 0 and 2");
  }
  try {
    builder.setFuzziness(null);
    fail("fuzziness must not be null");
  }
 catch (  NullPointerException e) {
    assertEquals(e.getMessage(),"fuzziness must not be null");
  }
  try {
    builder.setFuzzyMinLength(-randomIntBetween(1,Integer.MAX_VALUE));
    fail("fuzzyMinLength must be >= 0");
  }
 catch (  IllegalArgumentException e) {
    assertEquals(e.getMessage(),"fuzzyMinLength must not be negative");
  }
  try {
    builder.setFuzzyPrefixLength(-randomIntBetween(1,Integer.MAX_VALUE));
    fail("fuzzyPrefixLength must be >= 0");
  }
 catch (  IllegalArgumentException e) {
    assertEquals(e.getMessage(),"fuzzyPrefixLength must not be negative");
  }
  try {
    builder.setMaxDeterminizedStates(-randomIntBetween(1,Integer.MAX_VALUE));
    fail("max determinized state must be >= 0");
  }
 catch (  IllegalArgumentException e) {
    assertEquals(e.getMessage(),"maxDeterminizedStates must not be negative");
  }
}
