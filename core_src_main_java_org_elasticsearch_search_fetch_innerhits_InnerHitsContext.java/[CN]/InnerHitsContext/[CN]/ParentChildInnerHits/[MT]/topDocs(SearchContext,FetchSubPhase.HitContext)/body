{
  final String field;
  final String term;
  if (isParentHit(hitContext.hit())) {
    field=ParentFieldMapper.NAME;
    term=Uid.createUid(hitContext.hit().type(),hitContext.hit().id());
  }
 else   if (isChildHit(hitContext.hit())) {
    DocumentMapper hitDocumentMapper=mapperService.documentMapper(hitContext.hit().type());
    final String parentType=hitDocumentMapper.parentFieldMapper().type();
    field=UidFieldMapper.NAME;
    SearchHitField parentField=hitContext.hit().field(ParentFieldMapper.NAME);
    if (parentField == null) {
      throw new IllegalStateException("All children must have a _parent");
    }
    term=Uid.createUid(parentType,(String)parentField.getValue());
  }
 else {
    return Lucene.EMPTY_TOP_DOCS;
  }
  BooleanQuery q=new BooleanQuery.Builder().add(query.query(),Occur.MUST).add(new TermQuery(new Term(field,term)),Occur.MUST).add(documentMapper.typeFilter(),Occur.MUST).build();
  if (size() == 0) {
    final int count=context.searcher().count(q);
    return new TopDocs(count,Lucene.EMPTY_SCORE_DOCS,0);
  }
 else {
    int topN=from() + size();
    TopDocsCollector topDocsCollector;
    if (sort() != null) {
      topDocsCollector=TopFieldCollector.create(sort(),topN,true,trackScores(),trackScores());
    }
 else {
      topDocsCollector=TopScoreDocCollector.create(topN);
    }
    try {
      context.searcher().search(q,topDocsCollector);
    }
  finally {
      clearReleasables(Lifetime.COLLECTION);
    }
    return topDocsCollector.topDocs(from(),size());
  }
}
