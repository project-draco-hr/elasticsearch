{
  return new ConstantScoreWeight(this){
    @Override public Scorer scorer(    LeafReaderContext context) throws IOException {
      if (!context.reader().getCoreCacheKey().equals(leafReader.getCoreCacheKey())) {
        return null;
      }
      if (docId == 0) {
        return null;
      }
      final BitSet parents=parentFilter.getDocIdSet(context).bits();
      final int firstChildDocId=parents.prevSetBit(docId - 1) + 1;
      if (firstChildDocId == docId) {
        return null;
      }
      final DocIdSet children=childFilter.getDocIdSet(context,null);
      if (children == null) {
        return null;
      }
      final DocIdSetIterator childrenIterator=children.iterator();
      if (childrenIterator == null) {
        return null;
      }
      final DocIdSetIterator it=new DocIdSetIterator(){
        int doc=-1;
        @Override public int docID(){
          return doc;
        }
        @Override public int nextDoc() throws IOException {
          return advance(doc + 1);
        }
        @Override public int advance(        int target) throws IOException {
          target=Math.max(firstChildDocId,target);
          if (target >= docId) {
            return doc=NO_MORE_DOCS;
          }
 else {
            int advanced=childrenIterator.advance(target);
            if (advanced >= docId) {
              return doc=NO_MORE_DOCS;
            }
 else {
              return doc=advanced;
            }
          }
        }
        @Override public long cost(){
          return Math.min(childrenIterator.cost(),docId - firstChildDocId);
        }
      }
;
      return new ConstantScoreScorer(this,score(),it);
    }
  }
;
}
