{
  XContentParser parser=context.parser();
  XContentParser.Token token=parser.currentToken();
  String surfaceForm=null;
  BytesRef payload=null;
  long weight=-1;
  List<String> inputs=Lists.newArrayListWithExpectedSize(4);
  if (token == XContentParser.Token.VALUE_STRING) {
    inputs.add(parser.text());
  }
 else {
    String currentFieldName=null;
    while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
      if (token == XContentParser.Token.FIELD_NAME) {
        currentFieldName=parser.currentName();
        if (!ALLOWED_CONTENT_FIELD_NAMES.contains(currentFieldName)) {
          throw new ElasticSearchIllegalArgumentException("Unknown field name[" + currentFieldName + "], must be one of "+ ALLOWED_CONTENT_FIELD_NAMES);
        }
      }
 else       if (Fields.CONTENT_FIELD_NAME_PAYLOAD.equals(currentFieldName)) {
        if (!isStoringPayloads()) {
          throw new MapperException("Payloads disabled in mapping");
        }
        if (token == XContentParser.Token.START_OBJECT) {
          XContentBuilder payloadBuilder=XContentFactory.contentBuilder(parser.contentType()).copyCurrentStructure(parser);
          payload=payloadBuilder.bytes().toBytesRef();
          payloadBuilder.close();
        }
 else         if (token.isValue()) {
          payload=parser.bytesOrNull();
        }
 else {
          throw new MapperException("payload doesn't support type " + token);
        }
      }
 else       if (token == XContentParser.Token.VALUE_STRING) {
        if (Fields.CONTENT_FIELD_NAME_OUTPUT.equals(currentFieldName)) {
          surfaceForm=parser.text();
        }
        if (Fields.CONTENT_FIELD_NAME_INPUT.equals(currentFieldName)) {
          inputs.add(parser.text());
        }
      }
 else       if (token == XContentParser.Token.VALUE_NUMBER) {
        if (Fields.CONTENT_FIELD_NAME_WEIGHT.equals(currentFieldName)) {
          NumberType numberType=parser.numberType();
          if (NumberType.LONG != numberType && NumberType.INT != numberType) {
            throw new ElasticSearchIllegalArgumentException("Weight must be an integer, but was [" + parser.numberValue() + "]");
          }
          weight=parser.longValue();
          if (weight < 0 || weight > Integer.MAX_VALUE) {
            throw new ElasticSearchIllegalArgumentException("Weight must be in the interval [0..2147483647], but was [" + weight + "]");
          }
        }
      }
 else       if (token == XContentParser.Token.START_ARRAY) {
        if (Fields.CONTENT_FIELD_NAME_INPUT.equals(currentFieldName)) {
          while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
            inputs.add(parser.text());
          }
        }
      }
    }
  }
  payload=payload == null ? EMPTY : payload;
  if (surfaceForm == null) {
    for (    String input : inputs) {
      BytesRef suggestPayload=analyzingSuggestLookupProvider.buildPayload(new BytesRef(input),weight,payload);
      context.doc().add(getCompletionField(input,suggestPayload));
    }
  }
 else {
    BytesRef suggestPayload=analyzingSuggestLookupProvider.buildPayload(new BytesRef(surfaceForm),weight,payload);
    for (    String input : inputs) {
      context.doc().add(getCompletionField(input,suggestPayload));
    }
  }
}
