{
  try {
    client1.admin().indices().prepareDelete("test").execute().actionGet();
  }
 catch (  Exception ex) {
  }
  logger.info("--> creating index [test] with one shard and on replica");
  client1.admin().indices().create(createIndexRequest("test").settings(settingsBuilder().put("index.numberOfReplicas",1).put("index.numberOfShards",1))).actionGet();
  logger.info("--> running cluster_health");
  ClusterHealthResponse clusterHealth=client1.admin().cluster().health(clusterHealthRequest().waitForGreenStatus()).actionGet();
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  logger.info("--> done cluster_health, status " + clusterHealth.getStatus());
  logger.info("--> making sure that shard and it's replica are allocated on server1 and server2");
  assertThat(shardDirectory("server1","test",0).exists(),equalTo(true));
  assertThat(shardDirectory("server2","test",0).exists(),equalTo(true));
  logger.info("--> starting node server3");
  startNode("server3");
  logger.info("--> making sure that shard is not allocated on server3");
  assertThat(waitForShardDeletion(TimeValue.timeValueSeconds(1),"server3","test",0),equalTo(false));
  File server2Shard=shardDirectory("server2","test",0);
  logger.info("--> stopping node server2");
  closeNode("server2");
  assertThat(server2Shard.exists(),equalTo(true));
  logger.info("--> running cluster_health");
  clusterHealth=client1.admin().cluster().health(clusterHealthRequest().waitForGreenStatus().waitForNodes("2")).actionGet();
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  logger.info("--> done cluster_health, status " + clusterHealth.getStatus());
  logger.info("--> making sure that shard and it's replica exist on server1, server2 and server3");
  assertThat(shardDirectory("server1","test",0).exists(),equalTo(true));
  assertThat(server2Shard.exists(),equalTo(true));
  assertThat(shardDirectory("server3","test",0).exists(),equalTo(true));
  logger.info("--> starting node server2");
  startNode("server2");
  logger.info("--> running cluster_health");
  clusterHealth=client("server2").admin().cluster().health(clusterHealthRequest().waitForGreenStatus()).actionGet();
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  logger.info("--> done cluster_health, status " + clusterHealth.getStatus());
  logger.info("--> making sure that shard and it's replica are allocated on server1 and server3 but not on server2");
  assertThat(shardDirectory("server1","test",0).exists(),equalTo(true));
  assertThat(shardDirectory("server3","test",0).exists(),equalTo(true));
  assertThat(waitForShardDeletion(TimeValue.timeValueSeconds(1),"server2","test",0),equalTo(false));
}
