{
  super(settings);
  this.parseFieldMatcher=new ParseFieldMatcher(settings);
  if (Strings.hasLength(settings.get(DISABLE_DYNAMIC_SCRIPTING_SETTING))) {
    throw new IllegalArgumentException(DISABLE_DYNAMIC_SCRIPTING_SETTING + " is not a supported setting, replace with fine-grained script settings. \n" + "Dynamic scripts can be enabled for all languages and all operations by replacing `script.disable_dynamic: false` with `script.inline: on` and `script.indexed: on` in elasticsearch.yml");
  }
  this.scriptEngines=scriptEngines;
  this.scriptContextRegistry=scriptContextRegistry;
  int cacheMaxSize=settings.getAsInt(SCRIPT_CACHE_SIZE_SETTING,SCRIPT_CACHE_SIZE_DEFAULT);
  TimeValue cacheExpire=settings.getAsTime(SCRIPT_CACHE_EXPIRE_SETTING,null);
  logger.debug("using script cache with max_size [{}], expire [{}]",cacheMaxSize,cacheExpire);
  this.defaultLang=settings.get(DEFAULT_SCRIPTING_LANGUAGE_SETTING,DEFAULT_LANG);
  CacheBuilder<String,CompiledScript> cacheBuilder=CacheBuilder.builder();
  if (cacheMaxSize >= 0) {
    cacheBuilder.setMaximumWeight(cacheMaxSize);
  }
  if (cacheExpire != null) {
    cacheBuilder.setExpireAfterAccess(cacheExpire.nanos());
  }
  this.cache=cacheBuilder.removalListener(new ScriptCacheRemovalListener()).build();
  ImmutableMap.Builder<String,ScriptEngineService> enginesByLangBuilder=ImmutableMap.builder();
  ImmutableMap.Builder<String,ScriptEngineService> enginesByExtBuilder=ImmutableMap.builder();
  for (  ScriptEngineService scriptEngine : scriptEngines) {
    for (    String type : scriptEngine.types()) {
      enginesByLangBuilder.put(type,scriptEngine);
    }
    for (    String ext : scriptEngine.extensions()) {
      enginesByExtBuilder.put(ext,scriptEngine);
    }
  }
  this.scriptEnginesByLang=enginesByLangBuilder.build();
  this.scriptEnginesByExt=enginesByExtBuilder.build();
  this.scriptModes=new ScriptModes(this.scriptEnginesByLang,scriptContextRegistry,settings);
  scriptsDirectory=env.scriptsFile();
  if (logger.isTraceEnabled()) {
    logger.trace("Using scripts directory [{}] ",scriptsDirectory);
  }
  FileWatcher fileWatcher=new FileWatcher(scriptsDirectory);
  fileWatcher.addListener(new ScriptChangesListener());
  if (settings.getAsBoolean(SCRIPT_AUTO_RELOAD_ENABLED_SETTING,true)) {
    resourceWatcherService.add(fileWatcher);
  }
 else {
    fileWatcher.init();
  }
}
