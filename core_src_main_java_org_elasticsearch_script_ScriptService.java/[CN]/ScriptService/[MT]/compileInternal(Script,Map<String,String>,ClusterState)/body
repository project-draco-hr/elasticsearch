{
  if (script == null) {
    throw new IllegalArgumentException("The parameter script (Script) must not be null.");
  }
  String lang=script.getLang() == null ? defaultLang : script.getLang();
  ScriptType type=script.getType();
  String name=script.getScript();
  if (logger.isTraceEnabled()) {
    logger.trace("Compiling lang: [{}] type: [{}] script: {}",lang,type,name);
  }
  ScriptEngineService scriptEngineService=getScriptEngineServiceForLang(lang);
  if (type == ScriptType.FILE) {
    CacheKey cacheKey=new CacheKey(scriptEngineService,name,null,params);
    CompiledScript compiledScript=staticCache.get(cacheKey);
    if (compiledScript == null) {
      throw new IllegalArgumentException("Unable to find on disk file script [" + name + "] using lang ["+ lang+ "]");
    }
    return compiledScript;
  }
  String code=script.getScript();
  if (type == ScriptType.STORED) {
    final IndexedScript indexedScript=new IndexedScript(lang,name);
    name=indexedScript.id;
    code=getScriptFromClusterState(state,indexedScript.lang,indexedScript.id);
  }
  CacheKey cacheKey=new CacheKey(scriptEngineService,type == ScriptType.INLINE ? null : name,code,params);
  CompiledScript compiledScript=cache.get(cacheKey);
  if (compiledScript == null) {
    try {
      String actualName=(type == ScriptType.INLINE) ? null : name;
      compiledScript=new CompiledScript(type,name,lang,scriptEngineService.compile(actualName,code,params));
    }
 catch (    ScriptException good) {
      throw good;
    }
catch (    Exception exception) {
      throw new GeneralScriptException("Failed to compile " + type + " script ["+ name+ "] using lang ["+ lang+ "]",exception);
    }
    scriptMetrics.onCompilation();
    cache.put(cacheKey,compiledScript);
  }
  return compiledScript;
}
