{
  Tuple<String,String> scriptNameExt=getScriptNameExt(file);
  if (scriptNameExt == null) {
    logger.debug("Skipped script with invalid extension : [{}]",file);
    return;
  }
  if (logger.isTraceEnabled()) {
    logger.trace("Loading script file : [{}]",file);
  }
  ScriptEngineService engineService=getScriptEngineServiceForFileExt(scriptNameExt.v2());
  if (engineService == null) {
    logger.warn("No script engine found for [{}]",scriptNameExt.v2());
  }
 else {
    try {
      if (isAnyScriptContextEnabled(engineService.getType(),ScriptType.FILE)) {
        logger.info("compiling script file [{}]",file.toAbsolutePath());
        try (InputStreamReader reader=new InputStreamReader(Files.newInputStream(file),StandardCharsets.UTF_8)){
          String script=Streams.copyToString(reader);
          String name=scriptNameExt.v1();
          CacheKey cacheKey=new CacheKey(engineService,name,null,Collections.emptyMap());
          Object executable=engineService.compile(file.getFileName().toString(),script,Collections.emptyMap());
          CompiledScript compiledScript=new CompiledScript(ScriptType.FILE,name,engineService.getType(),executable);
          staticCache.put(cacheKey,compiledScript);
          scriptMetrics.onCompilation();
        }
       }
 else {
        logger.warn("skipping compile of script file [{}] as all scripted operations are disabled for file scripts",file.toAbsolutePath());
      }
    }
 catch (    Exception e) {
      logger.warn(new ParameterizedMessage("failed to load/compile script [{}]",scriptNameExt.v1()),e);
    }
  }
}
