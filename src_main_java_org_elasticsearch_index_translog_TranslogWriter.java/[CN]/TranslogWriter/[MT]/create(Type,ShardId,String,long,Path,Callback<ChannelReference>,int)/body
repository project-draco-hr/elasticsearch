{
  Path pendingFile=file.resolveSibling("pending_" + file.getFileName());
  final BytesRef ref=new BytesRef(translogUUID);
  final int headerLength=CodecUtil.headerLength(TRANSLOG_CODEC) + ref.length + RamUsageEstimator.NUM_BYTES_INT;
  try (FileChannel channel=FileChannel.open(pendingFile,StandardOpenOption.WRITE,StandardOpenOption.CREATE_NEW)){
    OutputStreamDataOutput out=new OutputStreamDataOutput(java.nio.channels.Channels.newOutputStream(channel));
    CodecUtil.writeHeader(out,TRANSLOG_CODEC,VERSION);
    out.writeInt(ref.length);
    out.writeBytes(ref.bytes,ref.offset,ref.length);
    channel.force(false);
    writeCheckpoint(headerLength,0,file.getParent(),fileGeneration,StandardOpenOption.WRITE);
  }
   Files.move(pendingFile,file,StandardCopyOption.ATOMIC_MOVE);
  FileChannel channel=FileChannel.open(file,StandardOpenOption.READ,StandardOpenOption.WRITE);
  try {
    channel.position(headerLength);
    final TranslogWriter writer=type.create(shardId,fileGeneration,new ChannelReference(file,fileGeneration,channel,onClose),bufferSize);
    return writer;
  }
 catch (  Throwable throwable) {
    IOUtils.closeWhileHandlingException(channel);
    try {
      Files.delete(file);
    }
 catch (    IOException ex) {
      throwable.addSuppressed(ex);
    }
    throw throwable;
  }
}
