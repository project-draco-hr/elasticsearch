{
  Map<Analyzer,List<FieldAndFieldType>> groups=new HashMap<>();
  List<Tuple<String,Float>> missing=new ArrayList<>();
  for (  Map.Entry<String,Float> entry : fieldNames.entrySet()) {
    String name=entry.getKey();
    MappedFieldType fieldType=context.fieldMapper(name);
    if (fieldType != null) {
      Analyzer actualAnalyzer=getAnalyzer(fieldType);
      name=fieldType.names().indexName();
      if (!groups.containsKey(actualAnalyzer)) {
        groups.put(actualAnalyzer,new ArrayList<FieldAndFieldType>());
      }
      Float boost=entry.getValue();
      boost=boost == null ? Float.valueOf(1.0f) : boost;
      groups.get(actualAnalyzer).add(new FieldAndFieldType(name,fieldType,boost));
    }
 else {
      missing.add(new Tuple(name,entry.getValue()));
    }
  }
  List<Query> queries=new ArrayList<>();
  for (  Tuple<String,Float> tuple : missing) {
    Query q=parseGroup(type.matchQueryType(),tuple.v1(),tuple.v2(),value,minimumShouldMatch);
    if (q != null) {
      queries.add(q);
    }
  }
  for (  List<FieldAndFieldType> group : groups.values()) {
    if (group.size() > 1) {
      blendedFields=new FieldAndFieldType[group.size()];
      int i=0;
      for (      FieldAndFieldType fieldAndFieldType : group) {
        blendedFields[i++]=fieldAndFieldType;
      }
    }
 else {
      blendedFields=null;
    }
    final FieldAndFieldType fieldAndFieldType=group.get(0);
    Query q=parseGroup(type.matchQueryType(),fieldAndFieldType.field,fieldAndFieldType.boost,value,minimumShouldMatch);
    if (q != null) {
      queries.add(q);
    }
  }
  return queries.isEmpty() ? null : queries;
}
