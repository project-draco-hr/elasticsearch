{
  int pc=parallelism, e;
  long c=ctl;
  WorkQueue[] ws=workQueues;
  if ((e=(int)c) >= 0 && ws != null) {
    int u, a, ac, hc;
    int tc=(short)((u=(int)(c >>> 32)) >>> UTC_SHIFT) + pc;
    boolean replace=false;
    if ((a=u >> UAC_SHIFT) <= 0) {
      if ((ac=a + pc) <= 1)       replace=true;
 else       if ((e > 0 || (task != null && ac <= (hc=pc >>> 1) && tc < pc + hc))) {
        WorkQueue w;
        for (int j=0; j < ws.length; ++j) {
          if ((w=ws[j]) != null && !w.isEmpty()) {
            replace=true;
            break;
          }
        }
      }
    }
    if ((task == null || task.status >= 0) && (blocker == null || !blocker.isReleasable()) && ctl == c) {
      if (!replace) {
        long nc=((c - AC_UNIT) & AC_MASK) | (c & ~AC_MASK);
        if (U.compareAndSwapLong(this,CTL,c,nc))         return true;
      }
 else       if (e != 0) {
        WorkQueue w;
        Thread p;
        int i;
        if ((i=e & SMASK) < ws.length && (w=ws[i]) != null) {
          long nc=((long)(w.nextWait & E_MASK) | (c & (AC_MASK | TC_MASK)));
          if (w.eventCount == (e | INT_SIGN) && U.compareAndSwapLong(this,CTL,c,nc)) {
            w.eventCount=(e + E_SEQ) & E_MASK;
            if ((p=w.parker) != null)             U.unpark(p);
            return true;
          }
        }
      }
 else       if (tc < MAX_CAP) {
        long nc=((c + TC_UNIT) & TC_MASK) | (c & ~TC_MASK);
        if (U.compareAndSwapLong(this,CTL,c,nc)) {
          addWorker();
          return true;
        }
      }
    }
  }
  return false;
}
