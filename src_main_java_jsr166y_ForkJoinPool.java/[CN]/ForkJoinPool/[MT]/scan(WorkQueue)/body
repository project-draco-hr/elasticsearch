{
  WorkQueue[] ws;
  int r=w.seed;
  r^=r << 13;
  r^=r >>> 17;
  w.seed=r^=r << 5;
  int rs=runState, m;
  if ((ws=workQueues) != null && (m=ws.length - 1) > 0) {
    int ec=w.eventCount;
    int step=(r >>> 16) | 1;
    for (int j=(m + 1) << 2; ; r+=step) {
      WorkQueue q;
      ForkJoinTask<?> t;
      ForkJoinTask<?>[] a;
      int b;
      if ((q=ws[r & m]) != null && (b=q.base) - q.top < 0 && (a=q.array) != null) {
        int i=(((a.length - 1) & b) << ASHIFT) + ABASE;
        t=(ForkJoinTask<?>)U.getObjectVolatile(a,i);
        if (q.base == b && ec >= 0 && t != null && U.compareAndSwapObject(a,i,t,null)) {
          if (q.top - (q.base=b + 1) > 1)           signalWork();
          return t;
        }
 else         if (ec < 0 || j <= m) {
          rs=0;
          break;
        }
      }
      if (--j < 0)       break;
    }
    long c=ctl;
    int e=(int)c, a=(int)(c >> AC_SHIFT), nr, ns;
    if (e < 0)     w.runState=-1;
 else     if (rs == 0 || rs != runState) {
      WorkQueue v;
      Thread p;
      if (e > 0 && a < 0 && w.eventCount == ec && (v=ws[e & m]) != null && v.eventCount == (e | INT_SIGN)) {
        long nc=((long)(v.nextWait & E_MASK) | ((c + AC_UNIT) & (AC_MASK | TC_MASK)));
        if (ctl == c && U.compareAndSwapLong(this,CTL,c,nc)) {
          v.eventCount=(e + E_SEQ) & E_MASK;
          if ((p=v.parker) != null)           U.unpark(p);
        }
      }
    }
 else     if (ec >= 0) {
      long nc=(long)ec | ((c - AC_UNIT) & (AC_MASK | TC_MASK));
      w.nextWait=e;
      w.eventCount=ec | INT_SIGN;
      if (ctl != c || !U.compareAndSwapLong(this,CTL,c,nc))       w.eventCount=ec;
 else {
        if ((ns=w.nsteals) != 0) {
          w.nsteals=0;
          w.rescans=(a > 0) ? 0 : a + parallelism;
          w.totalSteals+=ns;
        }
        if (a == 1 - parallelism)         idleAwaitWork(w,nc,c);
      }
    }
 else     if (w.eventCount < 0) {
      if ((nr=w.rescans) > 0) {
        int ac=a + parallelism;
        if (((w.rescans=(ac < nr) ? ac : nr - 1) & 3) == 0)         Thread.yield();
      }
 else {
        Thread.interrupted();
        Thread wt=Thread.currentThread();
        U.putObject(wt,PARKBLOCKER,this);
        w.parker=wt;
        if (w.eventCount < 0)         U.park(false,0L);
        w.parker=null;
        U.putObject(wt,PARKBLOCKER,null);
      }
    }
  }
  return null;
}
