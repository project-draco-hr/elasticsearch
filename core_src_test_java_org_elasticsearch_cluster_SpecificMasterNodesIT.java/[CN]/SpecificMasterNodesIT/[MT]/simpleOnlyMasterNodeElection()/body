{
  logger.info("--> start data node / non master node");
  internalCluster().startNode(settingsBuilder().put("node.data",true).put("node.master",false).put("discovery.initial_state_timeout","1s"));
  try {
    assertThat(client().admin().cluster().prepareState().setMasterNodeTimeout("100ms").execute().actionGet().getState().nodes().masterNodeId(),nullValue());
    fail("should not be able to find master");
  }
 catch (  MasterNotDiscoveredException e) {
  }
  logger.info("--> start master node");
  final String masterNodeName=internalCluster().startNode(settingsBuilder().put("node.data",false).put("node.master",true));
  assertThat(internalCluster().nonMasterClient().admin().cluster().prepareState().execute().actionGet().getState().nodes().masterNode().name(),equalTo(masterNodeName));
  assertThat(internalCluster().masterClient().admin().cluster().prepareState().execute().actionGet().getState().nodes().masterNode().name(),equalTo(masterNodeName));
  logger.info("--> stop master node");
  internalCluster().stopCurrentMasterNode();
  try {
    assertThat(client().admin().cluster().prepareState().setMasterNodeTimeout("100ms").execute().actionGet().getState().nodes().masterNodeId(),nullValue());
    fail("should not be able to find master");
  }
 catch (  MasterNotDiscoveredException e) {
  }
  logger.info("--> start master node");
  final String nextMasterEligibleNodeName=internalCluster().startNode(settingsBuilder().put("node.data",false).put("node.master",true));
  assertThat(internalCluster().nonMasterClient().admin().cluster().prepareState().execute().actionGet().getState().nodes().masterNode().name(),equalTo(nextMasterEligibleNodeName));
  assertThat(internalCluster().masterClient().admin().cluster().prepareState().execute().actionGet().getState().nodes().masterNode().name(),equalTo(nextMasterEligibleNodeName));
}
