{
  final TestPlan testPlan=createTestPlan();
  assertThat(testPlan.result.totalShards(),equalTo(testPlan.totalCounts.total));
  assertThat(testPlan.result.successfulShards(),equalTo(testPlan.totalCounts.successful));
  assertThat(testPlan.result.failedShards(),equalTo(testPlan.totalCounts.failed));
  Map<String,Object> asMap=convertToMap(testPlan.result);
  assertShardCount("_shards header",(Map<String,Object>)asMap.get("_shards"),testPlan.totalCounts);
  assertThat("unexpected number of indices",asMap.size(),equalTo(1 + testPlan.countsPerIndex.size()));
  for (  String index : testPlan.countsPerIndex.keySet()) {
    Map<String,Object> indexMap=(Map<String,Object>)asMap.get(index);
    assertShardCount(index,indexMap,testPlan.countsPerIndex.get(index));
    List<Map<String,Object>> failureList=(List<Map<String,Object>>)indexMap.get("failures");
    final int expectedFailures=testPlan.expectedFailuresPerIndex.get(index);
    if (expectedFailures == 0) {
      assertNull(index + " has unexpected failures",failureList);
    }
 else {
      assertNotNull(index + " should have failures",failureList);
      assertThat(failureList,hasSize(expectedFailures));
    }
  }
}
