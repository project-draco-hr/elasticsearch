{
  assertThat(clusterState.routingTable().shardsWithState(ShardRoutingState.UNASSIGNED).size(),is(this.totalNumberOfShards));
  initPrimaries();
  assertThat(clusterState.routingTable().shardsWithState(ShardRoutingState.UNASSIGNED).size(),is(this.totalNumberOfShards - 2 * this.numberOfShards));
  assertThat(clusterState.routingTable().shardsWithState(ShardRoutingState.INITIALIZING).size(),is(2 * this.numberOfShards));
  startInitializingShards(TEST_INDEX_1);
  assertThat(clusterState.routingTable().shardsWithState(ShardRoutingState.STARTED).size(),is(this.numberOfShards));
  int initializingExpected=this.numberOfShards + this.numberOfShards * this.numberOfReplicas;
  assertThat(clusterState.routingTable().shardsWithState(ShardRoutingState.INITIALIZING).size(),is(initializingExpected));
  assertThat(clusterState.routingTable().shardsWithState(ShardRoutingState.UNASSIGNED).size(),is(this.totalNumberOfShards - initializingExpected - this.numberOfShards));
  startInitializingShards(TEST_INDEX_2);
  assertThat(clusterState.routingTable().shardsWithState(ShardRoutingState.STARTED).size(),is(2 * this.numberOfShards));
  initializingExpected=2 * this.numberOfShards * this.numberOfReplicas;
  assertThat(clusterState.routingTable().shardsWithState(ShardRoutingState.INITIALIZING).size(),is(initializingExpected));
  assertThat(clusterState.routingTable().shardsWithState(ShardRoutingState.UNASSIGNED).size(),is(this.totalNumberOfShards - initializingExpected - 2 * this.numberOfShards));
  startInitializingShards(TEST_INDEX_1);
  startInitializingShards(TEST_INDEX_2);
  assertThat(clusterState.routingTable().shardsWithState(ShardRoutingState.STARTED).size(),is(this.totalNumberOfShards));
}
