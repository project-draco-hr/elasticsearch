{
  Map<String,Object> params=new HashMap<>();
  params.put("value","bar");
  params.put("size",20);
  Template template=new Template(TEMPLATE_CONTENTS,ScriptType.INLINE,MustacheScriptEngineService.NAME,XContentType.JSON,params);
  RenderSearchTemplateResponse response=client().admin().cluster().prepareRenderSearchTemplate().template(template).get();
  assertThat(response,notNullValue());
  BytesReference source=response.source();
  assertThat(source,notNullValue());
  Map<String,Object> sourceAsMap=XContentHelper.convertToMap(source,false).v2();
  assertThat(sourceAsMap,notNullValue());
  String expected=TEMPLATE_CONTENTS.replace("{{value}}","bar").replace("{{size}}","20");
  Map<String,Object> expectedMap=XContentHelper.convertToMap(new BytesArray(expected),false).v2();
  assertThat(sourceAsMap,equalTo(expectedMap));
  params=new HashMap<>();
  params.put("value","baz");
  params.put("size",100);
  template=new Template(TEMPLATE_CONTENTS,ScriptType.INLINE,MustacheScriptEngineService.NAME,XContentType.JSON,params);
  response=client().admin().cluster().prepareRenderSearchTemplate().template(template).get();
  assertThat(response,notNullValue());
  source=response.source();
  assertThat(source,notNullValue());
  sourceAsMap=XContentHelper.convertToMap(source,false).v2();
  expected=TEMPLATE_CONTENTS.replace("{{value}}","baz").replace("{{size}}","100");
  expectedMap=XContentHelper.convertToMap(new BytesArray(expected),false).v2();
  assertThat(sourceAsMap,equalTo(expectedMap));
}
