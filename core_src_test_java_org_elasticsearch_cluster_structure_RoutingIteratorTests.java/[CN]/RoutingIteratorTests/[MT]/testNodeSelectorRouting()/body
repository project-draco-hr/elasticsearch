{
  AllocationService strategy=createAllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries",10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),"always").build());
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build();
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("fred","node1",singletonMap("disk","ebs"))).put(newNode("barney","node2",singletonMap("disk","ephemeral"))).localNodeId("node1")).build();
  routingTable=strategy.reroute(clusterState,"reroute").routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  routingTable=strategy.applyStartedShards(clusterState,clusterState.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  ShardsIterator shardsIterator=clusterState.routingTable().index("test").shard(0).onlyNodeSelectorActiveInitializingShardsIt("disk:ebs",clusterState.nodes());
  assertThat(shardsIterator.size(),equalTo(1));
  assertThat(shardsIterator.nextOrNull().currentNodeId(),equalTo("node1"));
  shardsIterator=clusterState.routingTable().index("test").shard(0).onlyNodeSelectorActiveInitializingShardsIt("dis*:eph*",clusterState.nodes());
  assertThat(shardsIterator.size(),equalTo(1));
  assertThat(shardsIterator.nextOrNull().currentNodeId(),equalTo("node2"));
  shardsIterator=clusterState.routingTable().index("test").shard(0).onlyNodeSelectorActiveInitializingShardsIt("fred",clusterState.nodes());
  assertThat(shardsIterator.size(),equalTo(1));
  assertThat(shardsIterator.nextOrNull().currentNodeId(),equalTo("node1"));
  shardsIterator=clusterState.routingTable().index("test").shard(0).onlyNodeSelectorActiveInitializingShardsIt("bar*",clusterState.nodes());
  assertThat(shardsIterator.size(),equalTo(1));
  assertThat(shardsIterator.nextOrNull().currentNodeId(),equalTo("node2"));
  shardsIterator=clusterState.routingTable().index("test").shard(0).onlyNodeSelectorActiveInitializingShardsIt(new String[]{"disk:eph*","disk:ebs"},clusterState.nodes());
  assertThat(shardsIterator.size(),equalTo(2));
  assertThat(shardsIterator.nextOrNull().currentNodeId(),equalTo("node2"));
  assertThat(shardsIterator.nextOrNull().currentNodeId(),equalTo("node1"));
  shardsIterator=clusterState.routingTable().index("test").shard(0).onlyNodeSelectorActiveInitializingShardsIt(new String[]{"disk:*","invalid_name"},clusterState.nodes());
  assertThat(shardsIterator.size(),equalTo(2));
  assertThat(shardsIterator.nextOrNull().currentNodeId(),equalTo("node2"));
  assertThat(shardsIterator.nextOrNull().currentNodeId(),equalTo("node1"));
  shardsIterator=clusterState.routingTable().index("test").shard(0).onlyNodeSelectorActiveInitializingShardsIt(new String[]{"disk:*","disk:*"},clusterState.nodes());
  assertThat(shardsIterator.size(),equalTo(2));
  assertThat(shardsIterator.nextOrNull().currentNodeId(),equalTo("node2"));
  assertThat(shardsIterator.nextOrNull().currentNodeId(),equalTo("node1"));
  try {
    shardsIterator=clusterState.routingTable().index("test").shard(0).onlyNodeSelectorActiveInitializingShardsIt("welma",clusterState.nodes());
    fail("should have raised illegalArgumentException");
  }
 catch (  IllegalArgumentException illegal) {
  }
  shardsIterator=clusterState.routingTable().index("test").shard(0).onlyNodeSelectorActiveInitializingShardsIt("fred",clusterState.nodes());
  assertThat(shardsIterator.size(),equalTo(1));
  assertThat(shardsIterator.nextOrNull().currentNodeId(),equalTo("node1"));
}
