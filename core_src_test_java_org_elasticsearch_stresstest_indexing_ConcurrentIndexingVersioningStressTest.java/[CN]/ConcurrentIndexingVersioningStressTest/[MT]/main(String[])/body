{
  Settings settings=Settings.EMPTY;
  Node node1=nodeBuilder().settings(settings).node();
  Node node2=nodeBuilder().settings(settings).node();
  final Node client=nodeBuilder().settings(settings).client(true).node();
  final int NUMBER_OF_DOCS=10000;
  final int NUMBER_OF_THREADS=10;
  final long NUMBER_OF_ITERATIONS=SizeValue.parseSizeValue("10k").singles();
  final long DELETE_EVERY=10;
  final CountDownLatch latch=new CountDownLatch(NUMBER_OF_THREADS);
  Thread[] threads=new Thread[NUMBER_OF_THREADS];
  for (int i=0; i < threads.length; i++) {
    threads[i]=new Thread(){
      @Override public void run(){
        try {
          for (long i=0; i < NUMBER_OF_ITERATIONS; i++) {
            if ((i % DELETE_EVERY) == 0) {
              client.client().prepareDelete("test","type1",Integer.toString(ThreadLocalRandom.current().nextInt(NUMBER_OF_DOCS))).execute().actionGet();
            }
 else {
              client.client().prepareIndex("test","type1",Integer.toString(ThreadLocalRandom.current().nextInt(NUMBER_OF_DOCS))).setSource("field1","value1").execute().actionGet();
            }
          }
        }
  finally {
          latch.countDown();
        }
      }
    }
;
  }
  for (  Thread thread : threads) {
    thread.start();
  }
  latch.await();
  System.out.println("done indexing, verifying docs");
  client.client().admin().indices().prepareRefresh().execute().actionGet();
  for (int i=0; i < NUMBER_OF_DOCS; i++) {
    String id=Integer.toString(i);
    for (int j=0; j < 5; j++) {
      SearchResponse response=client.client().prepareSearch().setQuery(QueryBuilders.termQuery("_id",id)).execute().actionGet();
      if (response.getHits().totalHits() > 1) {
        System.err.println("[" + i + "] FAIL, HITS ["+ response.getHits().totalHits()+ "]");
      }
    }
    GetResponse getResponse=client.client().prepareGet("test","type1",id).execute().actionGet();
    if (getResponse.isExists()) {
      long version=getResponse.getVersion();
      for (int j=0; j < 5; j++) {
        getResponse=client.client().prepareGet("test","type1",id).execute().actionGet();
        if (!getResponse.isExists()) {
          System.err.println("[" + i + "] FAIL, EXISTED, and NOT_EXISTED");
          break;
        }
        if (version != getResponse.getVersion()) {
          System.err.println("[" + i + "] FAIL, DIFFERENT VERSIONS: ["+ version+ "], ["+ getResponse.getVersion()+ "]");
          break;
        }
      }
    }
 else {
      for (int j=0; j < 5; j++) {
        getResponse=client.client().prepareGet("test","type1",id).execute().actionGet();
        if (getResponse.isExists()) {
          System.err.println("[" + i + "] FAIL, EXISTED, and NOT_EXISTED");
          break;
        }
      }
    }
  }
  System.out.println("done.");
  client.close();
  node1.close();
  node2.close();
}
