{
  final StatementMetadata trapsmd=metadata.getStatementMetadata(ctx);
  final String type=ctx.TYPE().getText();
  trapsmd.exception=definition.getType(type);
  try {
    trapsmd.exception.clazz.asSubclass(Exception.class);
  }
 catch (  final ClassCastException exception) {
    throw new IllegalArgumentException(AnalyzerUtility.error(ctx) + "Invalid exception type [" + trapsmd.exception.name+ "].");
  }
  final String id=ctx.ID().getText();
  trapsmd.slot=utility.addVariable(ctx,id,trapsmd.exception).slot;
  final BlockContext blockctx=ctx.block();
  if (blockctx != null) {
    final StatementMetadata blocksmd=metadata.createStatementMetadata(blockctx);
    blocksmd.lastSource=trapsmd.lastSource;
    blocksmd.inLoop=trapsmd.inLoop;
    blocksmd.lastLoop=trapsmd.lastLoop;
    analyzer.visit(blockctx);
    trapsmd.methodEscape=blocksmd.methodEscape;
    trapsmd.loopEscape=blocksmd.loopEscape;
    trapsmd.allLast=blocksmd.allLast;
    trapsmd.anyContinue=blocksmd.anyContinue;
    trapsmd.anyBreak=blocksmd.anyBreak;
  }
 else   if (ctx.emptyscope() == null) {
    throw new IllegalStateException(AnalyzerUtility.error(ctx) + "Unexpected state.");
  }
}
