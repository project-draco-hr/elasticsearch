{
  List<CompletionSuggestion> suggestions=new ArrayList<>();
  for (int i=0; i < randomIntBetween(1,5); i++) {
    suggestions.add(new CompletionSuggestion(randomAsciiOfLength(randomIntBetween(1,5)),randomIntBetween(1,20)));
  }
  int nShards=randomIntBetween(1,20);
  int queryResultSize=randomBoolean() ? 0 : randomIntBetween(1,nShards * 2);
  AtomicArray<QuerySearchResultProvider> results=generateQueryResults(nShards,suggestions,queryResultSize);
  ScoreDoc[] sortedDocs=searchPhaseController.sortDocs(true,results);
  int accumulatedLength=Math.min(queryResultSize,getTotalQueryHits(results));
  for (  Suggest.Suggestion<?> suggestion : reducedSuggest(results)) {
    int suggestionSize=suggestion.getEntries().get(0).getOptions().size();
    accumulatedLength+=suggestionSize;
  }
  assertThat(sortedDocs.length,equalTo(accumulatedLength));
}
