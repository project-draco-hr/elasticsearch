{
  for (int i=0; i < 10; i++) {
    client().prepareIndex("test","type1",Integer.toString(i)).setSource(jsonBuilder().startObject().field("value","test" + i).endObject()).execute().actionGet();
  }
  ensureGreen();
  refresh();
  for (int i=0; i < 10; i++) {
    CountResponse countResponse=client().prepareCount().setQuery(matchAllQuery()).execute().actionGet();
    assertThat(countResponse.getCount(),equalTo(10l));
  }
  waitForMappingOnMaster("test","type1");
  GetMappingsResponse mappingsResponse=client().admin().indices().prepareGetMappings("test").setTypes("type1").execute().actionGet();
  assertThat(mappingsResponse.getMappings().get("test").get("type1"),notNullValue());
  assertAcked(client().admin().indices().prepareDeleteMapping().setIndices("test").setType("type1"));
  for (int i=0; i < 10; i++) {
    CountResponse countResponse=client().prepareCount().setQuery(matchAllQuery()).execute().actionGet();
    assertThat(countResponse.getCount(),equalTo(0l));
  }
  boolean applied=awaitBusy(new Predicate<Object>(){
    @Override public boolean apply(    Object input){
      GetMappingsResponse response=client().admin().indices().prepareGetMappings("test").setTypes("type1").get();
      ImmutableOpenMap<String,MappingMetaData> mappings=response.getMappings().get("test");
      if (mappings == null) {
        return true;
      }
      return !mappings.containsKey("type1");
    }
  }
);
  if (!applied) {
    fail("failed to wait for the mapping to be removed from the master cluster state");
  }
}
