def ensure_checkout_is_clean(branchName):
    s = subprocess.check_output('git diff --shortstat', shell=True)
    if (len(s) > 0):
        raise RuntimeError(('git diff --shortstat is non-empty: got:\n%s' % s))
    s = subprocess.check_output('git status', shell=True).decode('utf-8', errors='replace')
    if ('Untracked files:' in s):
        raise RuntimeError(('git status shows untracked files: got:\n%s' % s))
    if (('On branch %s' % branchName) not in s):
        raise RuntimeError(('git status does not show branch %s: got:\n%s' % (branchName, s)))
    if ('is behind' in s):
        raise RuntimeError(('git status shows not all changes pulled from origin; try running "git pull origin %s": got:\n%s' % (branchName, s)))
    if ('is ahead' in s):
        raise RuntimeError(('git status shows local commits; try running "git fetch origin", "git checkout %s", "git reset --hard origin/%s": got:\n%s' % (branchName, branchName, s)))
