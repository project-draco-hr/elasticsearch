def ensure_no_open_tickets(version):
    version = ('v%s' % version)
    conn = HTTPSConnection('api.github.com')
    try:
        try:
            log(('Checking for open tickets on Github for version %s' % version))
            log('Check if node is available')
            print ('https://api.github.com:443/repos/elasticsearch/elasticsearch/issues?state=open&labels=%s' % version)
            conn.request('GET', ('/repos/elasticsearch/elasticsearch/issues?state=open&labels=%s' % version), headers={'User-Agent': 'Elasticsearch version checker', })
            res = conn.getresponse()
            if (res.status == 200):
                issues = json.loads(res.read().decode('utf-8'))
                if issues:
                    urls = []
                    for issue in issues:
                        urls.append(issue['url'])
                    raise RuntimeError(('Found open issues  for release version %s see - %s' % (version, urls)))
                else:
                    log(('No open issues found for version %s' % version))
            else:
                raise RuntimeError(('Failed to fetch issue list from Github for release version %s' % version))
        except socket.error as e:
            log(("Failed to fetch issue list from Github for release version %s' % version - Exception: [%s]" % (version, e)))
    finally:
        conn.close()
