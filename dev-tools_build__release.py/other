import re
import tempfile
import shutil
import os
import datetime
import argparse
import github3
import smtplib
import sys
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from os.path import dirname, abspath
"\n This tool builds a release from the a given elasticsearch plugin branch.\n In order to execute it go in the top level directory and run:\n   $ python3 dev_tools/build_release.py --branch master --publish --remote origin\n\n By default this script runs in 'dry' mode which essentially simulates a release. If the\n '--publish' option is set the actual release is done.\n If not in 'dry' mode, a mail will be automatically sent to the mailing list.\n You can disable it with the option  '--disable_mail'\n\n   $ python3 dev_tools/build_release.py --publish --remote origin --disable_mail\n\n The script takes over almost all\n steps necessary for a release from a high level point of view it does the following things:\n\n  - run prerequisite checks ie. check for S3 credentials available as env variables\n  - detect the version to release from the specified branch (--branch) or the current branch\n  - check that github issues related to the version are closed\n  - creates a version release branch & updates pom.xml to point to a release version rather than a snapshot\n  - creates a master release branch & updates README.md to point to the latest release version for the given elasticsearch branch\n  - builds the artifacts\n  - commits the new version and merges the version release branch into the source branch\n  - merges the master release branch into the master branch\n  - creates a tag and pushes branch and master to the specified origin (--remote)\n  - publishes the releases to sonatype and S3\n  - send a mail based on github issues fixed by this version\n\nOnce it's done it will print all the remaining steps.\n\n Prerequisites:\n    - Python 3k for script execution\n    - Boto for S3 Upload ($ apt-get install python-boto or pip-3.3 install boto)\n    - github3 module (pip-3.3 install github3.py)\n    - S3 keys exported via ENV Variables (AWS_ACCESS_KEY_ID,  AWS_SECRET_ACCESS_KEY)\n    - GITHUB (login/password) or key exported via ENV Variables (GITHUB_LOGIN,  GITHUB_PASSWORD or GITHUB_KEY)\n    (see https://github.com/settings/applications#personal-access-tokens) - Optional: default to no authentication\n    - SMTP_HOST - Optional: default to localhost\n    - MAIL_SENDER - Optional: default to 'david@pilato.fr': must be authorized to send emails to elasticsearch mailing list\n    - MAIL_TO - Optional: default to 'elasticsearch@googlegroups.com'\n"
env = os.environ
LOG = env.get('ES_RELEASE_LOG', '/tmp/elasticsearch_release.log')
ROOT_DIR = abspath(os.path.join(abspath(dirname(__file__)), '../'))
README_FILE = (ROOT_DIR + '/README.md')
POM_FILE = (ROOT_DIR + '/pom.xml')
DEV_TOOLS_DIR = (ROOT_DIR + '/dev-tools')
try:
    purge_log()
    JAVA_HOME = env['JAVA_HOME']
except KeyError:
    raise RuntimeError("\n  Please set JAVA_HOME in the env before running release tool\n  On OSX use: export JAVA_HOME=`/usr/libexec/java_home -v '1.7*'`")
try:
    MVN = 'mvn'
    run('mvn3 --version', quiet=True)
    MVN = 'mvn3'
except RuntimeError:
    pass
template_email_html = read_email_template('html')
template_email_txt = read_email_template('txt')
print_sonatype_notice()
if (__name__ == '__main__'):
    parser = argparse.ArgumentParser(description='Builds and publishes a Elasticsearch Plugin Release')
    parser.add_argument('--branch', '-b', metavar='master', default=get_current_branch(), help='The branch to release from. Defaults to the current branch.')
    parser.add_argument('--skiptests', '-t', dest='tests', action='store_false', help='Skips tests before release. Tests are run by default.')
    parser.set_defaults(tests=True)
    parser.add_argument('--remote', '-r', metavar='origin', default='origin', help='The remote to push the release commit and tag to. Default is [origin]')
    parser.add_argument('--publish', '-p', dest='dryrun', action='store_false', help='Publishes the release. Disable by default.')
    parser.add_argument('--disable_mail', '-dm', dest='mail', action='store_false', help='Do not send a release email. Email is sent by default.')
    parser.set_defaults(dryrun=True)
    parser.set_defaults(mail=True)
    args = parser.parse_args()
    src_branch = args.branch
    remote = args.remote
    run_tests = args.tests
    dry_run = args.dryrun
    mail = args.mail
    if (src_branch == 'master'):
        raise RuntimeError('Can not release the master branch. You need to create another branch before a release')
    if (not dry_run):
        check_s3_credentials()
        print 'WARNING: dryrun is set to "false" - this will push and publish the release'
        if mail:
            check_email_settings()
            print ('An email to %s will be sent after the release' % env.get('MAIL_TO', 'elasticsearch@googlegroups.com'))
        input('Press Enter to continue...')
    check_github_credentials()
    print ''.join(['-' for _ in range(80)])
    print ('Preparing Release from branch [%s] running tests: [%s] dryrun: [%s]' % (src_branch, run_tests, dry_run))
    print ('  JAVA_HOME is [%s]' % JAVA_HOME)
    print ('  Running with maven command: [%s] ' % MVN)
    release_version = find_release_version(src_branch)
    artifact_id = find_from_pom('artifactId')
    artifact_name = find_from_pom('name')
    artifact_description = find_from_pom('description')
    project_url = find_from_pom('url')
    elasticsearch_version = find_from_pom('elasticsearch.version')
    print ('  Artifact Id: [%s]' % artifact_id)
    print ('  Release version: [%s]' % release_version)
    print ('  Elasticsearch: [%s]' % elasticsearch_version)
    if (elasticsearch_version.find('-SNAPSHOT') != (-1)):
        raise RuntimeError(('Can not release with a SNAPSHOT elasticsearch dependency: %s' % elasticsearch_version))
    default_snapshot_version = guess_snapshot(release_version)
    snapshot_version = input(('Enter next snapshot version [%s]:' % default_snapshot_version))
    snapshot_version = (snapshot_version or default_snapshot_version)
    print ('  Next version: [%s-SNAPSHOT]' % snapshot_version)
    print ('  Artifact Name: [%s]' % artifact_name)
    print ('  Artifact Description: [%s]' % artifact_description)
    print ('  Project URL: [%s]' % project_url)
    if (not dry_run):
        smoke_test_version = release_version
    try:
        git_checkout('master')
        master_hash = get_head_hash()
        git_checkout(src_branch)
        version_hash = get_head_hash()
        run_mvn('clean')
        create_release_branch(remote, 'master', release_version)
        print ('  Created release branch [%s]' % release_branch('master', release_version))
        create_release_branch(remote, src_branch, release_version)
        print ('  Created release branch [%s]' % release_branch(src_branch, release_version))
    except RuntimeError:
        print 'Logs:'
        with open(LOG, 'r') as log_file:
            print log_file.read()
        sys.exit((-1))
    success = False
    try:
        pending_files = [POM_FILE, README_FILE]
        remove_maven_snapshot(POM_FILE, release_version)
        print '  Done removing snapshot version'
        add_pending_files(*pending_files)
        commit_release(artifact_id, release_version)
        print ('  Committed release version [%s]' % release_version)
        print ''.join(['-' for _ in range(80)])
        print 'Building Release candidate'
        input('Press Enter to continue...')
        print '  Checking github issues'
        repository = get_github_repository(artifact_id)
        check_opened_issues(release_version, repository, artifact_id)
        if (not dry_run):
            print ('  Running maven builds now and publish to sonatype - run-tests [%s]' % run_tests)
        else:
            print ('  Running maven builds now run-tests [%s]' % run_tests)
        build_release(run_tests=run_tests, dry_run=dry_run)
        artifact = get_artifacts(artifact_id, release_version)
        artifact_and_checksums = generate_checksums(artifact)
        print ''.join(['-' for _ in range(80)])
        git_checkout(release_branch('master', release_version))
        update_documentation_to_released_version(README_FILE, project_url, release_version, src_branch, elasticsearch_version)
        set_install_instructions(README_FILE, artifact_id, release_version)
        add_pending_files(*pending_files)
        commit_master(release_version)
        print ('Finish Release -- dry_run: %s' % dry_run)
        input('Press Enter to continue...')
        print '  merge release branch'
        git_merge(src_branch, release_version)
        print '  tag'
        tag_release(release_version)
        add_maven_snapshot(POM_FILE, release_version, snapshot_version)
        add_pending_files(*pending_files)
        commit_snapshot()
        print '  merge master branch'
        git_merge('master', release_version)
        print ('  push to %s %s -- dry_run: %s' % (remote, src_branch, dry_run))
        git_push(remote, src_branch, release_version, dry_run)
        print ('  publish artifacts to S3 -- dry_run: %s' % dry_run)
        publish_artifacts(artifact_and_checksums, base=('elasticsearch/%s' % artifact_id), dry_run=dry_run)
        print '  preparing email (from github issues)'
        msg = prepare_email(artifact_id, release_version, repository, artifact_name, artifact_description, project_url)
        input('Press Enter to send email...')
        print ('  sending email -- dry_run: %s, mail: %s' % (dry_run, mail))
        send_email(msg, dry_run=dry_run, mail=mail)
        pending_msg = '\nRelease successful pending steps:\n    * close and release sonatype repo: https://oss.sonatype.org/\n    * check if the release is there https://oss.sonatype.org/content/repositories/releases/org/elasticsearch/%(artifact_id)s/%(version)s\n    * tweet about the release\n'
        print (pending_msg % {'version': release_version, 'artifact_id': artifact_id, 'project_url': project_url, })
        success = True
    finally:
        if (not success):
            print 'Logs:'
            with open(LOG, 'r') as log_file:
                print log_file.read()
            git_checkout('master')
            run(('git reset --hard %s' % master_hash))
            git_checkout(src_branch)
            run(('git reset --hard %s' % version_hash))
            try:
                run(('git tag -d v%s' % release_version))
            except RuntimeError:
                pass
        elif dry_run:
            print 'End of dry_run'
            input('Press Enter to reset changes...')
            git_checkout('master')
            run(('git reset --hard %s' % master_hash))
            git_checkout(src_branch)
            run(('git reset --hard %s' % version_hash))
            run(('git tag -d v%s' % release_version))
        run(('git branch -D %s' % release_branch('master', release_version)))
        run(('git branch -D %s' % release_branch(src_branch, release_version)))
