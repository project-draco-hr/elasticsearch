{
  logger.info("Removing half the nodes (" + (numberOfNodes + 1) / 2 + ")");
  DiscoveryNodes.Builder nodes=DiscoveryNodes.builder(clusterState.nodes());
  boolean removed=false;
  for (int i=(numberOfNodes + 1) / 2; i <= numberOfNodes; i++) {
    nodes.remove("node" + i);
    removed=true;
  }
  clusterState=ClusterState.builder(clusterState).nodes(nodes.build()).build();
  if (removed) {
    clusterState=ClusterState.builder(clusterState).routingResult(strategy.deassociateDeadNodes(clusterState,randomBoolean(),"removed nodes")).build();
  }
  RoutingNodes routingNodes=clusterState.getRoutingNodes();
  logger.info("start all the primary shards, replicas will start initializing");
  RoutingTable routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  routingNodes=clusterState.getRoutingNodes();
  logger.info("start the replica shards");
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  routingNodes=clusterState.getRoutingNodes();
  logger.info("rebalancing");
  routingTable=strategy.reroute(clusterState,"reroute").routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  routingNodes=clusterState.getRoutingNodes();
  logger.info("complete rebalancing");
  RoutingTable prev=routingTable;
  while (true) {
    routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
    clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
    routingNodes=clusterState.getRoutingNodes();
    if (routingTable == prev)     break;
    prev=routingTable;
  }
  return clusterState;
}
