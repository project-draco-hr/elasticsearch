{
  final float indexBalance=1.0f;
  final float replicaBalance=0.0f;
  final float balanceTreshold=1.0f;
  Settings.Builder settings=settingsBuilder();
  settings.put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),ClusterRebalanceAllocationDecider.ClusterRebalanceType.ALWAYS.toString());
  settings.put(BalancedShardsAllocator.INDEX_BALANCE_FACTOR_SETTING.getKey(),indexBalance);
  settings.put(BalancedShardsAllocator.SHARD_BALANCE_FACTOR_SETTING.getKey(),replicaBalance);
  settings.put(BalancedShardsAllocator.THRESHOLD_SETTING.getKey(),balanceTreshold);
  AllocationService strategy=createAllocationService(settings.build());
  ClusterState clusterState=initCluster(strategy);
  assertIndexBalance(logger,clusterState.getRoutingNodes(),numberOfNodes,numberOfIndices,numberOfReplicas,numberOfShards,balanceTreshold);
  clusterState=addNode(clusterState,strategy);
  assertIndexBalance(logger,clusterState.getRoutingNodes(),numberOfNodes + 1,numberOfIndices,numberOfReplicas,numberOfShards,balanceTreshold);
  clusterState=removeNodes(clusterState,strategy);
  assertIndexBalance(logger,clusterState.getRoutingNodes(),(numberOfNodes + 1) - (numberOfNodes + 1) / 2,numberOfIndices,numberOfReplicas,numberOfShards,balanceTreshold);
}
