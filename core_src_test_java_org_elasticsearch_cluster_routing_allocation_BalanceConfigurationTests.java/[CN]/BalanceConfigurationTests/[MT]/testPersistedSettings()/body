{
  Settings.Builder settings=Settings.builder();
  settings.put(BalancedShardsAllocator.INDEX_BALANCE_FACTOR_SETTING.getKey(),0.2);
  settings.put(BalancedShardsAllocator.SHARD_BALANCE_FACTOR_SETTING.getKey(),0.3);
  settings.put(BalancedShardsAllocator.THRESHOLD_SETTING.getKey(),2.0);
  ClusterSettings service=new ClusterSettings(Settings.builder().build(),ClusterSettings.BUILT_IN_CLUSTER_SETTINGS);
  BalancedShardsAllocator allocator=new BalancedShardsAllocator(settings.build(),service);
  assertThat(allocator.getIndexBalance(),Matchers.equalTo(0.2f));
  assertThat(allocator.getShardBalance(),Matchers.equalTo(0.3f));
  assertThat(allocator.getThreshold(),Matchers.equalTo(2.0f));
  settings=Settings.builder();
  settings.put(BalancedShardsAllocator.INDEX_BALANCE_FACTOR_SETTING.getKey(),0.2);
  settings.put(BalancedShardsAllocator.SHARD_BALANCE_FACTOR_SETTING.getKey(),0.3);
  settings.put(BalancedShardsAllocator.THRESHOLD_SETTING.getKey(),2.0);
  settings.put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),ClusterRebalanceAllocationDecider.ClusterRebalanceType.ALWAYS.toString());
  service.applySettings(settings.build());
  assertThat(allocator.getIndexBalance(),Matchers.equalTo(0.2f));
  assertThat(allocator.getShardBalance(),Matchers.equalTo(0.3f));
  assertThat(allocator.getThreshold(),Matchers.equalTo(2.0f));
  settings=Settings.builder();
  settings.put(BalancedShardsAllocator.INDEX_BALANCE_FACTOR_SETTING.getKey(),0.5);
  settings.put(BalancedShardsAllocator.SHARD_BALANCE_FACTOR_SETTING.getKey(),0.1);
  settings.put(BalancedShardsAllocator.THRESHOLD_SETTING.getKey(),3.0);
  service.applySettings(settings.build());
  assertThat(allocator.getIndexBalance(),Matchers.equalTo(0.5f));
  assertThat(allocator.getShardBalance(),Matchers.equalTo(0.1f));
  assertThat(allocator.getThreshold(),Matchers.equalTo(3.0f));
}
