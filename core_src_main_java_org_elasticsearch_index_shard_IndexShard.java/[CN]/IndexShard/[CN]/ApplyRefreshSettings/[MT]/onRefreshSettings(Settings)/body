{
  boolean change=false;
synchronized (mutex) {
    if (state() == IndexShardState.CLOSED) {
      return;
    }
    final EngineConfig config=engineConfig;
    final boolean flushOnClose=settings.getAsBoolean(INDEX_FLUSH_ON_CLOSE,IndexShard.this.flushOnClose);
    if (flushOnClose != IndexShard.this.flushOnClose) {
      logger.info("updating {} from [{}] to [{}]",INDEX_FLUSH_ON_CLOSE,IndexShard.this.flushOnClose,flushOnClose);
      IndexShard.this.flushOnClose=flushOnClose;
    }
    TranslogWriter.Type type=TranslogWriter.Type.fromString(settings.get(TranslogConfig.INDEX_TRANSLOG_FS_TYPE,translogConfig.getType().name()));
    if (type != translogConfig.getType()) {
      logger.info("updating type from [{}] to [{}]",translogConfig.getType(),type);
      translogConfig.setType(type);
    }
    final Translog.Durabilty durabilty=getFromSettings(logger,settings,translogConfig.getDurabilty());
    if (durabilty != translogConfig.getDurabilty()) {
      logger.info("updating durability from [{}] to [{}]",translogConfig.getDurabilty(),durabilty);
      translogConfig.setDurabilty(durabilty);
    }
    TimeValue refreshInterval=settings.getAsTime(INDEX_REFRESH_INTERVAL,IndexShard.this.refreshInterval);
    if (!refreshInterval.equals(IndexShard.this.refreshInterval)) {
      logger.info("updating refresh_interval from [{}] to [{}]",IndexShard.this.refreshInterval,refreshInterval);
      if (refreshScheduledFuture != null) {
        FutureUtils.cancel(refreshScheduledFuture);
        refreshScheduledFuture=null;
      }
      IndexShard.this.refreshInterval=refreshInterval;
      if (refreshInterval.millis() > 0) {
        refreshScheduledFuture=threadPool.schedule(refreshInterval,ThreadPool.Names.SAME,new EngineRefresher());
      }
    }
    long gcDeletesInMillis=settings.getAsTime(EngineConfig.INDEX_GC_DELETES_SETTING,TimeValue.timeValueMillis(config.getGcDeletesInMillis())).millis();
    if (gcDeletesInMillis != config.getGcDeletesInMillis()) {
      logger.info("updating {} from [{}] to [{}]",EngineConfig.INDEX_GC_DELETES_SETTING,TimeValue.timeValueMillis(config.getGcDeletesInMillis()),TimeValue.timeValueMillis(gcDeletesInMillis));
      config.setGcDeletesInMillis(gcDeletesInMillis);
      change=true;
    }
    final boolean compoundOnFlush=settings.getAsBoolean(EngineConfig.INDEX_COMPOUND_ON_FLUSH,config.isCompoundOnFlush());
    if (compoundOnFlush != config.isCompoundOnFlush()) {
      logger.info("updating {} from [{}] to [{}]",EngineConfig.INDEX_COMPOUND_ON_FLUSH,config.isCompoundOnFlush(),compoundOnFlush);
      config.setCompoundOnFlush(compoundOnFlush);
      change=true;
    }
    final String versionMapSize=settings.get(EngineConfig.INDEX_VERSION_MAP_SIZE,config.getVersionMapSizeSetting());
    if (config.getVersionMapSizeSetting().equals(versionMapSize) == false) {
      config.setVersionMapSizeSetting(versionMapSize);
    }
  }
  mergePolicyConfig.onRefreshSettings(settings);
  if (change) {
    refresh("apply settings");
  }
}
