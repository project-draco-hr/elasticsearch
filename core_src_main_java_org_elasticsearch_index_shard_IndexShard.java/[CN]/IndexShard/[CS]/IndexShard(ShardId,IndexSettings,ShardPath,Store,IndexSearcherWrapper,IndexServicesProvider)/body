{
  super(shardId,indexSettings);
  this.idxSettings=indexSettings;
  this.codecService=provider.getCodecService();
  this.warmer=provider.getWarmer();
  this.deletionPolicy=new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());
  this.similarityService=provider.getSimilarityService();
  Objects.requireNonNull(store,"Store must be provided to the index shard");
  this.engineFactory=provider.getFactory();
  this.store=store;
  this.indexEventListener=provider.getIndexEventListener();
  this.mergeSchedulerConfig=new MergeSchedulerConfig(this.indexSettings);
  this.threadPool=provider.getThreadPool();
  this.mapperService=provider.getMapperService();
  this.indexCache=provider.getIndexCache();
  this.indexingService=new ShardIndexingService(shardId,indexSettings);
  this.getService=new ShardGetService(indexSettings,this,mapperService);
  this.termVectorsService=provider.getTermVectorsService();
  this.searchService=new ShardSearchStats(this.indexSettings);
  this.shardWarmerService=new ShardIndexWarmerService(shardId,indexSettings);
  this.indicesQueryCache=provider.getIndicesQueryCache();
  this.shardQueryCache=new ShardRequestCache(shardId,indexSettings);
  this.shardFieldData=new ShardFieldData();
  this.indexFieldDataService=provider.getIndexFieldDataService();
  this.shardBitsetFilterCache=new ShardBitsetFilterCache(shardId,indexSettings);
  state=IndexShardState.CREATED;
  this.refreshInterval=this.indexSettings.getAsTime(INDEX_REFRESH_INTERVAL,EngineConfig.DEFAULT_REFRESH_INTERVAL);
  this.flushOnClose=this.indexSettings.getAsBoolean(INDEX_FLUSH_ON_CLOSE,true);
  this.path=path;
  this.mergePolicyConfig=new MergePolicyConfig(logger,this.indexSettings);
  logger.debug("state: [CREATED]");
  this.checkIndexOnStartup=this.indexSettings.get("index.shard.check_on_startup","false");
  this.translogConfig=new TranslogConfig(shardId,shardPath().resolveTranslog(),indexSettings,getFromSettings(logger,this.indexSettings,Translog.Durabilty.REQUEST),provider.getBigArrays(),threadPool);
  final QueryCachingPolicy cachingPolicy;
  if (this.indexSettings.getAsBoolean(IndexModule.QUERY_CACHE_EVERYTHING,false)) {
    cachingPolicy=QueryCachingPolicy.ALWAYS_CACHE;
  }
 else {
    cachingPolicy=new UsageTrackingQueryCachingPolicy();
  }
  this.indexingMemoryController=provider.getIndexingMemoryController();
  this.engineConfig=newEngineConfig(translogConfig,cachingPolicy);
  this.flushThresholdOperations=this.indexSettings.getAsInt(INDEX_TRANSLOG_FLUSH_THRESHOLD_OPS,this.indexSettings.getAsInt("index.translog.flush_threshold",Integer.MAX_VALUE));
  this.flushThresholdSize=this.indexSettings.getAsBytesSize(INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE,new ByteSizeValue(512,ByteSizeUnit.MB));
  this.disableFlush=this.indexSettings.getAsBoolean(INDEX_TRANSLOG_DISABLE_FLUSH,false);
  this.indexShardOperationCounter=new IndexShardOperationCounter(logger,shardId);
  this.searcherWrapper=indexSearcherWrapper;
  this.percolatorQueriesRegistry=new PercolatorQueriesRegistry(shardId,indexSettings,provider.getQueryParserService(),indexingService,mapperService,indexFieldDataService);
  if (mapperService.hasMapping(PercolatorService.TYPE_NAME)) {
    percolatorQueriesRegistry.enableRealTimePercolator();
  }
  active.set(false);
}
