{
  super(shardId,indexSettings);
  final Settings settings=indexSettings.getSettings();
  this.codecService=new CodecService(mapperService,logger);
  this.warmer=warmer;
  this.deletionPolicy=new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());
  this.similarityService=similarityService;
  Objects.requireNonNull(store,"Store must be provided to the index shard");
  this.engineFactory=engineFactory == null ? new InternalEngineFactory() : engineFactory;
  this.store=store;
  this.indexEventListener=indexEventListener;
  this.threadPool=threadPool;
  this.mapperService=mapperService;
  this.indexCache=indexCache;
  this.internalIndexingStats=new InternalIndexingStats();
  final List<IndexingOperationListener> listenersList=new ArrayList<>(listeners);
  listenersList.add(internalIndexingStats);
  this.indexingOperationListeners=new IndexingOperationListener.CompositeListener(listenersList,logger);
  final List<SearchOperationListener> searchListenersList=new ArrayList<>(searchOperationListener);
  searchListenersList.add(searchStats);
  this.searchOperationListener=new SearchOperationListener.CompositeListener(searchListenersList,logger);
  this.getService=new ShardGetService(indexSettings,this,mapperService);
  this.shardWarmerService=new ShardIndexWarmerService(shardId,indexSettings);
  this.shardQueryCache=new ShardRequestCache();
  this.shardFieldData=new ShardFieldData();
  this.indexFieldDataService=indexFieldDataService;
  this.shardBitsetFilterCache=new ShardBitsetFilterCache(shardId,indexSettings);
  state=IndexShardState.CREATED;
  this.path=path;
  logger.debug("state: [CREATED]");
  this.checkIndexOnStartup=indexSettings.getValue(IndexSettings.INDEX_CHECK_ON_STARTUP);
  this.translogConfig=new TranslogConfig(shardId,shardPath().resolveTranslog(),indexSettings,bigArrays);
  if (IndexModule.INDEX_QUERY_CACHE_EVERYTHING_SETTING.get(settings)) {
    cachingPolicy=QueryCachingPolicy.ALWAYS_CACHE;
  }
 else {
    cachingPolicy=new UsageTrackingQueryCachingPolicy();
  }
  suspendableRefContainer=new SuspendableRefContainer();
  searcherWrapper=indexSearcherWrapper;
  primaryTerm=indexSettings.getIndexMetaData().primaryTerm(shardId.id());
}
