{
synchronized (mutex) {
    try {
      if (state != IndexShardState.CLOSED) {
        FutureUtils.cancel(refreshScheduledFuture);
        refreshScheduledFuture=null;
      }
      changeState(IndexShardState.CLOSED,reason);
      indexShardOperationCounter.decRef();
    }
  finally {
      final Engine engine=this.currentEngineReference.getAndSet(null);
      try {
        if (engine != null && flushEngine) {
          engine.flushAndClose();
        }
      }
  finally {
        IOUtils.close(engine,percolatorQueriesRegistry,queryShardContextCache);
      }
    }
  }
}
