{
  long timeNS=System.nanoTime();
  if (!Lucene.indexExists(store.directory())) {
    return;
  }
  BytesStreamOutput os=new BytesStreamOutput();
  PrintStream out=new PrintStream(os,false,StandardCharsets.UTF_8.name());
  if ("checksum".equalsIgnoreCase(checkIndexOnStartup)) {
    IOException corrupt=null;
    MetadataSnapshot metadata=store.getMetadata();
    for (    Map.Entry<String,StoreFileMetaData> entry : metadata.asMap().entrySet()) {
      try {
        Store.checkIntegrity(entry.getValue(),store.directory());
        out.println("checksum passed: " + entry.getKey());
      }
 catch (      IOException exc) {
        out.println("checksum failed: " + entry.getKey());
        exc.printStackTrace(out);
        corrupt=exc;
      }
    }
    out.flush();
    if (corrupt != null) {
      logger.warn("check index [failure]\n{}",new String(os.bytes().toBytes(),StandardCharsets.UTF_8));
      throw corrupt;
    }
  }
 else {
    try (CheckIndex checkIndex=new CheckIndex(store.directory())){
      checkIndex.setInfoStream(out);
      CheckIndex.Status status=checkIndex.checkIndex();
      out.flush();
      if (!status.clean) {
        if (state == IndexShardState.CLOSED) {
          return;
        }
        logger.warn("check index [failure]\n{}",new String(os.bytes().toBytes(),StandardCharsets.UTF_8));
        if ("fix".equalsIgnoreCase(checkIndexOnStartup)) {
          if (logger.isDebugEnabled()) {
            logger.debug("fixing index, writing new segments file ...");
          }
          checkIndex.exorciseIndex(status);
          if (logger.isDebugEnabled()) {
            logger.debug("index fixed, wrote new segments file \"{}\"",status.segmentsFileName);
          }
        }
 else {
          throw new IllegalStateException("index check failure but can't fix it");
        }
      }
    }
   }
  if (logger.isDebugEnabled()) {
    logger.debug("check index [success]\n{}",new String(os.bytes().toBytes(),StandardCharsets.UTF_8));
  }
  recoveryState.getVerifyIndex().checkIndexTime(Math.max(0,TimeValue.nsecToMSec(System.nanoTime() - timeNS)));
}
