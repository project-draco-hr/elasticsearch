{
  if (state != IndexShardState.RECOVERING) {
    throw new IndexShardNotRecoveringException(shardId,state);
  }
  recoveryState.setStage(RecoveryState.Stage.VERIFY_INDEX);
  if (Booleans.parseBoolean(checkIndexOnStartup,false)) {
    try {
      checkIndex();
    }
 catch (    IOException ex) {
      throw new RecoveryFailedException(recoveryState,"check index failed",ex);
    }
  }
  recoveryState.setStage(RecoveryState.Stage.TRANSLOG);
  final EngineConfig.OpenMode openMode;
  if (indexExists == false) {
    openMode=EngineConfig.OpenMode.CREATE_INDEX_AND_TRANSLOG;
  }
 else   if (skipTranslogRecovery) {
    openMode=EngineConfig.OpenMode.OPEN_INDEX_CREATE_TRANSLOG;
  }
 else {
    openMode=EngineConfig.OpenMode.OPEN_INDEX_AND_TRANSLOG;
  }
  final EngineConfig config=newEngineConfig(openMode,translogConfig,cachingPolicy,new IndexShardRecoveryPerformer(shardId,mapperService,logger));
  config.setEnableGcDeletes(false);
  Engine newEngine=createNewEngine(config);
  verifyNotClosed();
  if (openMode == EngineConfig.OpenMode.OPEN_INDEX_AND_TRANSLOG) {
    active.set(true);
    newEngine.recoverFromTranslog();
  }
}
