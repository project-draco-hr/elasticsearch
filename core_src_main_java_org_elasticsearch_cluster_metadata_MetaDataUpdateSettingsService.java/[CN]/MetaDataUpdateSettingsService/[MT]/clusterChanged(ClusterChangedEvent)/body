{
  if (!event.state().nodes().localNodeMaster()) {
    return;
  }
  final int dataNodeCount=event.state().nodes().dataNodes().size();
  Map<Integer,List<String>> nrReplicasChanged=new HashMap<>();
  for (  final IndexMetaData indexMetaData : event.state().metaData()) {
    AutoExpandReplicas autoExpandReplicas=IndexMetaData.INDEX_AUTO_EXPAND_REPLICAS_SETTING.get(indexMetaData.getSettings());
    if (autoExpandReplicas.isEnabled()) {
      final int min=autoExpandReplicas.getMinReplicas();
      final int max=autoExpandReplicas.getMaxReplicas(dataNodeCount);
      int numberOfReplicas=dataNodeCount - 1;
      if (numberOfReplicas < min) {
        numberOfReplicas=min;
      }
 else       if (numberOfReplicas > max) {
        numberOfReplicas=max;
      }
      if (numberOfReplicas == indexMetaData.getNumberOfReplicas()) {
        continue;
      }
      if (numberOfReplicas >= min && numberOfReplicas <= max) {
        if (!nrReplicasChanged.containsKey(numberOfReplicas)) {
          nrReplicasChanged.put(numberOfReplicas,new ArrayList<>());
        }
        nrReplicasChanged.get(numberOfReplicas).add(indexMetaData.getIndex());
      }
    }
  }
  if (nrReplicasChanged.size() > 0) {
    for (    final Integer fNumberOfReplicas : nrReplicasChanged.keySet()) {
      Settings settings=Settings.settingsBuilder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,fNumberOfReplicas).build();
      final List<String> indices=nrReplicasChanged.get(fNumberOfReplicas);
      UpdateSettingsClusterStateUpdateRequest updateRequest=new UpdateSettingsClusterStateUpdateRequest().indices(indices.toArray(new String[indices.size()])).settings(settings).ackTimeout(TimeValue.timeValueMillis(0)).masterNodeTimeout(TimeValue.timeValueMinutes(10));
      updateSettings(updateRequest,new ActionListener<ClusterStateUpdateResponse>(){
        @Override public void onResponse(        ClusterStateUpdateResponse response){
          for (          String index : indices) {
            logger.info("[{}] auto expanded replicas to [{}]",index,fNumberOfReplicas);
          }
        }
        @Override public void onFailure(        Throwable t){
          for (          String index : indices) {
            logger.warn("[{}] fail to auto expand replicas to [{}]",index,fNumberOfReplicas);
          }
        }
      }
);
    }
  }
}
