{
  MapBuilder<String,FieldMappingMetaData> fieldMappings=new MapBuilder<>();
  final DocumentFieldMappers allFieldMappers=documentMapper.mappers();
  for (  String field : request.fields()) {
    if (Regex.isMatchAllPattern(field)) {
      for (      FieldMapper fieldMapper : allFieldMappers) {
        addFieldMapper(fieldMapper.fieldType().names().fullName(),fieldMapper,fieldMappings,request.includeDefaults());
      }
    }
 else     if (Regex.isSimpleMatchPattern(field)) {
      Collection<FieldMapper> remainingFieldMappers=Lists.newLinkedList(allFieldMappers);
      for (Iterator<FieldMapper> it=remainingFieldMappers.iterator(); it.hasNext(); ) {
        final FieldMapper fieldMapper=it.next();
        if (Regex.simpleMatch(field,fieldMapper.fieldType().names().fullName())) {
          addFieldMapper(fieldMapper.fieldType().names().fullName(),fieldMapper,fieldMappings,request.includeDefaults());
          it.remove();
        }
      }
      for (Iterator<FieldMapper> it=remainingFieldMappers.iterator(); it.hasNext(); ) {
        final FieldMapper fieldMapper=it.next();
        if (Regex.simpleMatch(field,fieldMapper.fieldType().names().indexName())) {
          addFieldMapper(fieldMapper.fieldType().names().indexName(),fieldMapper,fieldMappings,request.includeDefaults());
          it.remove();
        }
      }
    }
 else {
      FieldMapper fieldMapper=allFieldMappers.smartNameFieldMapper(field);
      if (fieldMapper != null) {
        addFieldMapper(field,fieldMapper,fieldMappings,request.includeDefaults());
      }
 else       if (request.probablySingleFieldRequest()) {
        fieldMappings.put(field,FieldMappingMetaData.NULL);
      }
    }
  }
  return fieldMappings.immutableMap();
}
