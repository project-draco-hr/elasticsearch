{
  SearchResponse response=client().prepareSearch("sort_idx").setTypes("multi_sort_type").addAggregation(terms("terms").executionHint(randomExecutionHint()).field(SINGLE_VALUED_FIELD_NAME).collectMode(randomFrom(SubAggCollectionMode.values())).order(Terms.Order.compound(order)).subAggregation(avg("avg_l").field("l")).subAggregation(sum("sum_d").field("d"))).execute().actionGet();
  assertSearchResponse(response);
  Terms terms=response.getAggregations().get("terms");
  assertThat(terms,notNullValue());
  assertThat(terms.getName(),equalTo("terms"));
  assertThat(terms.getBuckets().size(),equalTo(expectedKeys.length));
  int i=0;
  for (  Terms.Bucket bucket : terms.getBuckets()) {
    assertThat(bucket,notNullValue());
    assertThat(key(bucket),equalTo(expectedKeys[i]));
    assertThat(bucket.getDocCount(),equalTo(expectedMultiSortBuckets.get(expectedKeys[i]).get("_count")));
    Avg avg=bucket.getAggregations().get("avg_l");
    assertThat(avg,notNullValue());
    assertThat(avg.getValue(),equalTo(expectedMultiSortBuckets.get(expectedKeys[i]).get("avg_l")));
    Sum sum=bucket.getAggregations().get("sum_d");
    assertThat(sum,notNullValue());
    assertThat(sum.getValue(),equalTo(expectedMultiSortBuckets.get(expectedKeys[i]).get("sum_d")));
    i++;
  }
}
