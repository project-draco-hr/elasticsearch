{
  boolean asc=randomBoolean();
  SearchResponse response=client().prepareSearch("idx").setTypes("type").addAggregation(terms("tags").executionHint(randomExecutionHint()).field("tag").order(Terms.Order.aggregation("filter",asc)).subAggregation(filter("filter").filter(FilterBuilders.matchAllFilter()))).execute().actionGet();
  assertSearchResponse(response);
  Terms tags=response.getAggregations().get("tags");
  assertThat(tags,notNullValue());
  assertThat(tags.getName(),equalTo("tags"));
  assertThat(tags.getBuckets().size(),equalTo(2));
  Iterator<Terms.Bucket> iters=tags.getBuckets().iterator();
  Terms.Bucket tag=iters.next();
  assertThat(tag,notNullValue());
  assertThat(key(tag),equalTo(asc ? "less" : "more"));
  assertThat(tag.getDocCount(),equalTo(asc ? 2l : 3l));
  Filter filter=tag.getAggregations().get("filter");
  assertThat(filter,notNullValue());
  assertThat(filter.getDocCount(),equalTo(asc ? 2l : 3l));
  tag=iters.next();
  assertThat(tag,notNullValue());
  assertThat(key(tag),equalTo(asc ? "more" : "less"));
  assertThat(tag.getDocCount(),equalTo(asc ? 3l : 2l));
  filter=tag.getAggregations().get("filter");
  assertThat(filter,notNullValue());
  assertThat(filter.getDocCount(),equalTo(asc ? 3l : 2l));
}
