{
  XContentParser parser=parseContext.parser();
  String fieldName=null;
  String geohash=null;
  Integer levels=null;
  Boolean neighbors=null;
  String queryName=null;
  Float boost=null;
  boolean ignoreUnmapped=DEFAULT_IGNORE_UNMAPPED;
  XContentParser.Token token;
  if ((token=parser.currentToken()) != Token.START_OBJECT) {
    throw new ElasticsearchParseException("failed to parse [{}] query. expected an object but found [{}] instead",NAME,token);
  }
  while ((token=parser.nextToken()) != Token.END_OBJECT) {
    if (token == Token.FIELD_NAME) {
      String field=parser.currentName();
      if (parseContext.isDeprecatedSetting(field)) {
      }
 else       if (parseContext.parseFieldMatcher().match(field,PRECISION_FIELD)) {
        token=parser.nextToken();
        if (token == Token.VALUE_NUMBER) {
          levels=parser.intValue();
        }
 else         if (token == Token.VALUE_STRING) {
          double meters=DistanceUnit.parse(parser.text(),DistanceUnit.DEFAULT,DistanceUnit.METERS);
          levels=GeoUtils.geoHashLevelsForPrecision(meters);
        }
      }
 else       if (parseContext.parseFieldMatcher().match(field,NEIGHBORS_FIELD)) {
        parser.nextToken();
        neighbors=parser.booleanValue();
      }
 else       if (parseContext.parseFieldMatcher().match(field,AbstractQueryBuilder.NAME_FIELD)) {
        parser.nextToken();
        queryName=parser.text();
      }
 else       if (parseContext.parseFieldMatcher().match(field,IGNORE_UNMAPPED_FIELD)) {
        parser.nextToken();
        ignoreUnmapped=parser.booleanValue();
      }
 else       if (parseContext.parseFieldMatcher().match(field,AbstractQueryBuilder.BOOST_FIELD)) {
        parser.nextToken();
        boost=parser.floatValue();
      }
 else {
        if (fieldName == null) {
          fieldName=field;
          token=parser.nextToken();
          if (token == Token.VALUE_STRING) {
            String location=parser.text();
            if (location.indexOf(",") > 0) {
              geohash=GeoUtils.parseGeoPoint(parser).geohash();
            }
 else {
              geohash=location;
            }
          }
 else {
            geohash=GeoUtils.parseGeoPoint(parser).geohash();
          }
        }
 else {
          throw new ParsingException(parser.getTokenLocation(),"[" + NAME + "] field name already set to ["+ fieldName+ "] but found ["+ field+ "]");
        }
      }
    }
 else {
      throw new ElasticsearchParseException("failed to parse [{}] query. unexpected token [{}]",NAME,token);
    }
  }
  Builder builder=new Builder(fieldName,geohash);
  if (levels != null) {
    builder.precision(levels);
  }
  if (neighbors != null) {
    builder.neighbors(neighbors);
  }
  if (queryName != null) {
    builder.queryName(queryName);
  }
  if (boost != null) {
    builder.boost(boost);
  }
  builder.ignoreUnmapped(ignoreUnmapped);
  return builder;
}
