{
  TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == TType.I32) {
        this.method=Method.findByValue(iprot.readI32());
      }
 else {
        TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == TType.STRING) {
    this.uri=iprot.readString();
  }
 else {
    TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == TType.MAP) {
{
  TMap _map0=iprot.readMapBegin();
  this.params=new HashMap<String,String>(2 * _map0.size);
  for (int _i1=0; _i1 < _map0.size; ++_i1) {
    String _key2;
    String _val3;
    _key2=iprot.readString();
    _val3=iprot.readString();
    this.params.put(_key2,_val3);
  }
  iprot.readMapEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 4:
if (field.type == TType.MAP) {
{
TMap _map4=iprot.readMapBegin();
this.headers=new HashMap<String,String>(2 * _map4.size);
for (int _i5=0; _i5 < _map4.size; ++_i5) {
String _key6;
String _val7;
_key6=iprot.readString();
_val7=iprot.readString();
this.headers.put(_key6,_val7);
}
iprot.readMapEnd();
}
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
case 5:
if (field.type == TType.STRING) {
this.body=iprot.readBinary();
}
 else {
TProtocolUtil.skip(iprot,field.type);
}
break;
default :
TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
