{
  int requiredSize=10;
  int shardSize=-1;
  String orderKey="_count";
  boolean orderAsc=false;
  String executionHint=null;
  long minDocCount=1;
  ValuesSourceParser vsParser=ValuesSourceParser.any(aggregationName,StringTerms.TYPE,context).requiresSortedValues(true).requiresUniqueValues(true).formattable(true).build();
  IncludeExclude.Parser incExcParser=new IncludeExclude.Parser(aggregationName,StringTerms.TYPE,context);
  XContentParser.Token token;
  String currentFieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (vsParser.token(currentFieldName,token,parser)) {
      continue;
    }
 else     if (incExcParser.token(currentFieldName,token,parser)) {
      continue;
    }
 else     if (token == XContentParser.Token.VALUE_STRING) {
      if ("execution_hint".equals(currentFieldName) || "executionHint".equals(currentFieldName)) {
        executionHint=parser.text();
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else     if (token == XContentParser.Token.VALUE_NUMBER) {
      if ("size".equals(currentFieldName)) {
        requiredSize=parser.intValue();
      }
 else       if ("shard_size".equals(currentFieldName) || "shardSize".equals(currentFieldName)) {
        shardSize=parser.intValue();
      }
 else       if ("min_doc_count".equals(currentFieldName) || "minDocCount".equals(currentFieldName)) {
        minDocCount=parser.intValue();
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("order".equals(currentFieldName)) {
        while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
          if (token == XContentParser.Token.FIELD_NAME) {
            orderKey=parser.currentName();
          }
 else           if (token == XContentParser.Token.VALUE_STRING) {
            String dir=parser.text();
            if ("asc".equalsIgnoreCase(dir)) {
              orderAsc=true;
            }
 else             if ("desc".equalsIgnoreCase(dir)) {
              orderAsc=false;
            }
 else {
              throw new SearchParseException(context,"Unknown terms order direction [" + dir + "] in terms aggregation ["+ aggregationName+ "]");
            }
          }
 else {
            throw new SearchParseException(context,"Unexpected token " + token + " for [order] in ["+ aggregationName+ "].");
          }
        }
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else {
      throw new SearchParseException(context,"Unexpected token " + token + " in ["+ aggregationName+ "].");
    }
  }
  if (shardSize == 0) {
    shardSize=Integer.MAX_VALUE;
  }
  if (requiredSize == 0) {
    requiredSize=Integer.MAX_VALUE;
  }
  if (shardSize < requiredSize) {
    shardSize=requiredSize;
  }
  IncludeExclude includeExclude=incExcParser.includeExclude();
  InternalOrder order=resolveOrder(orderKey,orderAsc);
  return new TermsAggregatorFactory(aggregationName,vsParser.config(),order,requiredSize,shardSize,minDocCount,includeExclude,executionHint);
}
