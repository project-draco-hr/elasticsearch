{
  String field=null;
  String script=null;
  String scriptLang=null;
  Map<String,Object> scriptParams=null;
  Terms.ValueType valueType=null;
  int requiredSize=10;
  int shardSize=-1;
  String orderKey="_count";
  boolean orderAsc=false;
  String format=null;
  boolean assumeUnique=false;
  String include=null;
  int includeFlags=0;
  String exclude=null;
  int excludeFlags=0;
  XContentParser.Token token;
  String currentFieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.VALUE_STRING) {
      if ("field".equals(currentFieldName)) {
        field=parser.text();
      }
 else       if ("script".equals(currentFieldName)) {
        script=parser.text();
      }
 else       if ("lang".equals(currentFieldName)) {
        scriptLang=parser.text();
      }
 else       if ("value_type".equals(currentFieldName) || "valueType".equals(currentFieldName)) {
        valueType=Terms.ValueType.resolveType(parser.text());
      }
 else       if ("format".equals(currentFieldName)) {
        format=parser.text();
      }
 else       if ("include".equals(currentFieldName)) {
        include=parser.text();
      }
 else       if ("exclude".equals(currentFieldName)) {
        exclude=parser.text();
      }
    }
 else     if (token == XContentParser.Token.VALUE_BOOLEAN) {
      if ("script_values_unique".equals(currentFieldName)) {
        assumeUnique=parser.booleanValue();
      }
    }
 else     if (token == XContentParser.Token.VALUE_NUMBER) {
      if ("size".equals(currentFieldName)) {
        requiredSize=parser.intValue();
      }
 else       if ("shard_size".equals(currentFieldName) || "shardSize".equals(currentFieldName)) {
        shardSize=parser.intValue();
      }
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("params".equals(currentFieldName)) {
        scriptParams=parser.map();
      }
 else       if ("order".equals(currentFieldName)) {
        while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
          if (token == XContentParser.Token.FIELD_NAME) {
            orderKey=parser.currentName();
          }
 else           if (token == XContentParser.Token.VALUE_STRING) {
            String dir=parser.text();
            if ("asc".equalsIgnoreCase(dir)) {
              orderAsc=true;
            }
 else             if ("desc".equalsIgnoreCase(dir)) {
              orderAsc=false;
            }
 else {
              throw new SearchParseException(context,"Unknown terms order direction [" + dir + "] in terms aggregation ["+ aggregationName+ "]");
            }
          }
        }
      }
 else       if ("include".equals(currentFieldName)) {
        while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
          if (token == XContentParser.Token.FIELD_NAME) {
            currentFieldName=parser.currentName();
          }
 else           if (token == XContentParser.Token.VALUE_STRING) {
            if ("pattern".equals(currentFieldName)) {
              include=parser.text();
            }
 else             if ("flags".equals(currentFieldName)) {
              includeFlags=Regex.flagsFromString(parser.text());
            }
          }
 else           if (token == XContentParser.Token.VALUE_NUMBER) {
            if ("flags".equals(currentFieldName)) {
              includeFlags=parser.intValue();
            }
          }
        }
      }
 else       if ("exclude".equals(currentFieldName)) {
        while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
          if (token == XContentParser.Token.FIELD_NAME) {
            currentFieldName=parser.currentName();
          }
 else           if (token == XContentParser.Token.VALUE_STRING) {
            if ("pattern".equals(currentFieldName)) {
              exclude=parser.text();
            }
 else             if ("flags".equals(currentFieldName)) {
              excludeFlags=Regex.flagsFromString(parser.text());
            }
          }
 else           if (token == XContentParser.Token.VALUE_NUMBER) {
            if ("flags".equals(currentFieldName)) {
              excludeFlags=parser.intValue();
            }
          }
        }
      }
    }
  }
  if (shardSize < requiredSize) {
    shardSize=requiredSize;
  }
  IncludeExclude includeExclude=null;
  if (include != null || exclude != null) {
    Pattern includePattern=include != null ? Pattern.compile(include,includeFlags) : null;
    Pattern excludePattern=exclude != null ? Pattern.compile(exclude,excludeFlags) : null;
    includeExclude=new IncludeExclude(includePattern,excludePattern);
  }
  InternalOrder order=resolveOrder(orderKey,orderAsc);
  SearchScript searchScript=null;
  if (script != null) {
    searchScript=context.scriptService().search(context.lookup(),scriptLang,script,scriptParams);
  }
  if (field == null) {
    Class<? extends ValuesSource> valueSourceType=script == null ? ValuesSource.class : valueType != null ? valueType.scriptValueType.getValuesSourceType() : BytesValuesSource.class;
    ValuesSourceConfig<?> config=new ValuesSourceConfig(valueSourceType);
    if (valueType != null) {
      config.scriptValueType(valueType.scriptValueType);
    }
    config.script(searchScript);
    if (!assumeUnique) {
      config.ensureUnique(true);
    }
    return new TermsAggregatorFactory(aggregationName,config,order,requiredSize,shardSize,includeExclude);
  }
  FieldMapper<?> mapper=context.smartNameFieldMapper(field);
  if (mapper == null) {
    ValuesSourceConfig<?> config=new ValuesSourceConfig<BytesValuesSource>(BytesValuesSource.class);
    config.unmapped(true);
    return new TermsAggregatorFactory(aggregationName,config,order,requiredSize,shardSize,includeExclude);
  }
  IndexFieldData<?> indexFieldData=context.fieldData().getForField(mapper);
  ValuesSourceConfig<?> config;
  if (mapper instanceof DateFieldMapper) {
    DateFieldMapper dateMapper=(DateFieldMapper)mapper;
    ValueFormatter formatter=format == null ? new ValueFormatter.DateTime(dateMapper.dateTimeFormatter()) : new ValueFormatter.DateTime(format);
    config=new ValuesSourceConfig<NumericValuesSource>(NumericValuesSource.class).formatter(formatter).parser(new ValueParser.DateMath(dateMapper.dateMathParser()));
  }
 else   if (mapper instanceof IpFieldMapper) {
    config=new ValuesSourceConfig<NumericValuesSource>(NumericValuesSource.class).formatter(ValueFormatter.IPv4).parser(ValueParser.IPv4);
  }
 else   if (indexFieldData instanceof IndexNumericFieldData) {
    config=new ValuesSourceConfig<NumericValuesSource>(NumericValuesSource.class);
    if (format != null) {
      config.formatter(new ValueFormatter.Number.Pattern(format));
    }
  }
 else {
    config=new ValuesSourceConfig<BytesValuesSource>(BytesValuesSource.class);
    config.needsHashes(true);
  }
  config.script(searchScript);
  config.fieldContext(new FieldContext(field,indexFieldData));
  if (!assumeUnique) {
    config.ensureUnique(true);
  }
  return new TermsAggregatorFactory(aggregationName,config,order,requiredSize,shardSize,includeExclude);
}
