{
  SearchResponse response=client().prepareSearch("idx").addAggregation(geoDistance("amsterdam_rings",new GeoPoint(52.3760,4.894)).field("location").unit(DistanceUnit.KILOMETERS).addUnboundedTo("ring1",500).addRange("ring2",500,1000).addUnboundedFrom("ring3",1000)).execute().actionGet();
  assertSearchResponse(response);
  Range geoDist=response.getAggregations().get("amsterdam_rings");
  assertThat(geoDist,notNullValue());
  assertThat(geoDist.getName(),equalTo("amsterdam_rings"));
  List<? extends Bucket> buckets=geoDist.getBuckets();
  assertThat(buckets.size(),equalTo(3));
  Range.Bucket bucket=buckets.get(0);
  assertThat(bucket,notNullValue());
  assertThat((String)bucket.getKey(),equalTo("ring1"));
  assertThat(((Number)bucket.getFrom()).doubleValue(),equalTo(0.0));
  assertThat(((Number)bucket.getTo()).doubleValue(),equalTo(500.0));
  assertThat(bucket.getFromAsString(),equalTo("0.0"));
  assertThat(bucket.getToAsString(),equalTo("500.0"));
  assertThat(bucket.getDocCount(),equalTo(2L));
  bucket=buckets.get(1);
  assertThat(bucket,notNullValue());
  assertThat((String)bucket.getKey(),equalTo("ring2"));
  assertThat(((Number)bucket.getFrom()).doubleValue(),equalTo(500.0));
  assertThat(((Number)bucket.getTo()).doubleValue(),equalTo(1000.0));
  assertThat(bucket.getFromAsString(),equalTo("500.0"));
  assertThat(bucket.getToAsString(),equalTo("1000.0"));
  assertThat(bucket.getDocCount(),equalTo(2L));
  bucket=buckets.get(2);
  assertThat(bucket,notNullValue());
  assertThat((String)bucket.getKey(),equalTo("ring3"));
  assertThat(((Number)bucket.getFrom()).doubleValue(),equalTo(1000.0));
  assertThat(((Number)bucket.getTo()).doubleValue(),equalTo(Double.POSITIVE_INFINITY));
  assertThat(bucket.getFromAsString(),equalTo("1000.0"));
  assertThat(bucket.getToAsString(),nullValue());
  assertThat(bucket.getDocCount(),equalTo(1L));
}
