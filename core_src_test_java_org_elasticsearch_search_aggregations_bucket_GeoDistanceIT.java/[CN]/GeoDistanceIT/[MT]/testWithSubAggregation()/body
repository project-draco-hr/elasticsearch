{
  SearchResponse response=client().prepareSearch("idx").addAggregation(geoDistance("amsterdam_rings").field("location").unit(DistanceUnit.KILOMETERS).point("52.3760, 4.894").addUnboundedTo(500).addRange(500,1000).addUnboundedFrom(1000).subAggregation(terms("cities").field("city").collectMode(randomFrom(SubAggCollectionMode.values())))).execute().actionGet();
  assertSearchResponse(response);
  Range geoDist=response.getAggregations().get("amsterdam_rings");
  assertThat(geoDist,notNullValue());
  assertThat(geoDist.getName(),equalTo("amsterdam_rings"));
  List<? extends Bucket> buckets=geoDist.getBuckets();
  assertThat(geoDist.getBuckets().size(),equalTo(3));
  Object[] propertiesKeys=(Object[])geoDist.getProperty("_key");
  Object[] propertiesDocCounts=(Object[])geoDist.getProperty("_count");
  Object[] propertiesCities=(Object[])geoDist.getProperty("cities");
  Range.Bucket bucket=buckets.get(0);
  assertThat(bucket,notNullValue());
  assertThat((String)bucket.getKey(),equalTo("*-500.0"));
  assertThat(((Number)bucket.getFrom()).doubleValue(),equalTo(0.0));
  assertThat(((Number)bucket.getTo()).doubleValue(),equalTo(500.0));
  assertThat(bucket.getFromAsString(),equalTo("0.0"));
  assertThat(bucket.getToAsString(),equalTo("500.0"));
  assertThat(bucket.getDocCount(),equalTo(2l));
  assertThat(bucket.getAggregations().asList().isEmpty(),is(false));
  Terms cities=bucket.getAggregations().get("cities");
  assertThat(cities,Matchers.notNullValue());
  Set<String> names=new HashSet<>();
  for (  Terms.Bucket city : cities.getBuckets()) {
    names.add(city.getKeyAsString());
  }
  assertThat(names.contains("utrecht") && names.contains("haarlem"),is(true));
  assertThat((String)propertiesKeys[0],equalTo("*-500.0"));
  assertThat((long)propertiesDocCounts[0],equalTo(2l));
  assertThat((Terms)propertiesCities[0],sameInstance(cities));
  bucket=buckets.get(1);
  assertThat(bucket,notNullValue());
  assertThat((String)bucket.getKey(),equalTo("500.0-1000.0"));
  assertThat(((Number)bucket.getFrom()).doubleValue(),equalTo(500.0));
  assertThat(((Number)bucket.getTo()).doubleValue(),equalTo(1000.0));
  assertThat(bucket.getFromAsString(),equalTo("500.0"));
  assertThat(bucket.getToAsString(),equalTo("1000.0"));
  assertThat(bucket.getDocCount(),equalTo(2l));
  assertThat(bucket.getAggregations().asList().isEmpty(),is(false));
  cities=bucket.getAggregations().get("cities");
  assertThat(cities,Matchers.notNullValue());
  names=new HashSet<>();
  for (  Terms.Bucket city : cities.getBuckets()) {
    names.add(city.getKeyAsString());
  }
  assertThat(names.contains("berlin") && names.contains("prague"),is(true));
  assertThat((String)propertiesKeys[1],equalTo("500.0-1000.0"));
  assertThat((long)propertiesDocCounts[1],equalTo(2l));
  assertThat((Terms)propertiesCities[1],sameInstance(cities));
  bucket=buckets.get(2);
  assertThat(bucket,notNullValue());
  assertThat((String)bucket.getKey(),equalTo("1000.0-*"));
  assertThat(((Number)bucket.getFrom()).doubleValue(),equalTo(1000.0));
  assertThat(((Number)bucket.getTo()).doubleValue(),equalTo(Double.POSITIVE_INFINITY));
  assertThat(bucket.getFromAsString(),equalTo("1000.0"));
  assertThat(bucket.getToAsString(),nullValue());
  assertThat(bucket.getDocCount(),equalTo(1l));
  assertThat(bucket.getAggregations().asList().isEmpty(),is(false));
  cities=bucket.getAggregations().get("cities");
  assertThat(cities,Matchers.notNullValue());
  names=new HashSet<>();
  for (  Terms.Bucket city : cities.getBuckets()) {
    names.add(city.getKeyAsString());
  }
  assertThat(names.contains("tel-aviv"),is(true));
  assertThat((String)propertiesKeys[2],equalTo("1000.0-*"));
  assertThat((long)propertiesDocCounts[2],equalTo(1l));
  assertThat((Terms)propertiesCities[2],sameInstance(cities));
}
