{
  List<InternalAggregation> aggregations=reduceContext.aggregations();
  Multimap<Object,InternalTerms.Bucket> buckets=ArrayListMultimap.create();
  long sumDocCountError=0;
  long otherDocCount=0;
  for (  InternalAggregation aggregation : aggregations) {
    InternalTerms terms=(InternalTerms)aggregation;
    otherDocCount+=terms.getSumOfOtherDocCounts();
    final long thisAggDocCountError;
    if (terms.buckets.size() < this.shardSize || this.order == InternalOrder.TERM_ASC || this.order == InternalOrder.TERM_DESC) {
      thisAggDocCountError=0;
    }
 else     if (InternalOrder.isCountDesc(this.order)) {
      thisAggDocCountError=terms.buckets.get(terms.buckets.size() - 1).docCount;
    }
 else {
      thisAggDocCountError=-1;
    }
    if (sumDocCountError != -1) {
      if (thisAggDocCountError == -1) {
        sumDocCountError=-1;
      }
 else {
        sumDocCountError+=thisAggDocCountError;
      }
    }
    terms.docCountError=thisAggDocCountError;
    for (    Bucket bucket : terms.buckets) {
      bucket.docCountError=thisAggDocCountError;
      buckets.put(bucket.getKeyAsObject(),bucket);
    }
  }
  final int size=Math.min(requiredSize,buckets.size());
  BucketPriorityQueue ordered=new BucketPriorityQueue(size,order.comparator(null));
  for (  Collection<Bucket> l : buckets.asMap().values()) {
    List<Bucket> sameTermBuckets=(List<Bucket>)l;
    final Bucket b=sameTermBuckets.get(0).reduce(sameTermBuckets,reduceContext);
    if (b.docCountError != -1) {
      if (sumDocCountError == -1) {
        b.docCountError=-1;
      }
 else {
        b.docCountError=sumDocCountError - b.docCountError;
      }
    }
    if (b.docCount >= minDocCount) {
      Terms.Bucket removed=ordered.insertWithOverflow(b);
      if (removed != null) {
        otherDocCount+=removed.getDocCount();
      }
    }
  }
  Bucket[] list=new Bucket[ordered.size()];
  for (int i=ordered.size() - 1; i >= 0; i--) {
    list[i]=(Bucket)ordered.pop();
  }
  long docCountError;
  if (sumDocCountError == -1) {
    docCountError=-1;
  }
 else {
    docCountError=aggregations.size() == 1 ? 0 : sumDocCountError;
  }
  return newAggregation(name,Arrays.asList(list),showTermDocCountError,docCountError,otherDocCount);
}
