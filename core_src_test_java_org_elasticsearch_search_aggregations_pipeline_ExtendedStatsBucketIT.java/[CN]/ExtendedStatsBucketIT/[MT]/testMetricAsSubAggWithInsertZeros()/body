{
  SearchResponse response=client().prepareSearch("idx").addAggregation(terms("terms").field("tag").order(Order.term(true)).subAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).extendedBounds(new ExtendedBounds((long)minRandomValue,(long)maxRandomValue)).subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME))).subAggregation(extendedStatsBucket("extended_stats_bucket","histo>sum").gapPolicy(GapPolicy.INSERT_ZEROS))).execute().actionGet();
  assertSearchResponse(response);
  Terms terms=response.getAggregations().get("terms");
  assertThat(terms,notNullValue());
  assertThat(terms.getName(),equalTo("terms"));
  List<Terms.Bucket> termsBuckets=terms.getBuckets();
  assertThat(termsBuckets.size(),equalTo(interval));
  for (int i=0; i < interval; ++i) {
    Terms.Bucket termsBucket=termsBuckets.get(i);
    assertThat(termsBucket,notNullValue());
    assertThat((String)termsBucket.getKey(),equalTo("tag" + (i % interval)));
    Histogram histo=termsBucket.getAggregations().get("histo");
    assertThat(histo,notNullValue());
    assertThat(histo.getName(),equalTo("histo"));
    List<? extends Bucket> buckets=histo.getBuckets();
    double bucketSum=0;
    int count=0;
    double min=Double.POSITIVE_INFINITY;
    double max=Double.NEGATIVE_INFINITY;
    double sumOfSquares=0;
    for (int j=0; j < numValueBuckets; ++j) {
      Histogram.Bucket bucket=buckets.get(j);
      assertThat(bucket,notNullValue());
      assertThat(((Number)bucket.getKey()).longValue(),equalTo((long)j * interval));
      Sum sum=bucket.getAggregations().get("sum");
      assertThat(sum,notNullValue());
      count++;
      bucketSum+=sum.value();
      min=Math.min(min,sum.value());
      max=Math.max(max,sum.value());
      sumOfSquares+=sum.value() * sum.value();
    }
    double avgValue=count == 0 ? Double.NaN : (bucketSum / count);
    ExtendedStatsBucket extendedStatsBucketValue=termsBucket.getAggregations().get("extended_stats_bucket");
    assertThat(extendedStatsBucketValue,notNullValue());
    assertThat(extendedStatsBucketValue.getName(),equalTo("extended_stats_bucket"));
    assertThat(extendedStatsBucketValue.getAvg(),equalTo(avgValue));
    assertThat(extendedStatsBucketValue.getMin(),equalTo(min));
    assertThat(extendedStatsBucketValue.getMax(),equalTo(max));
    assertThat(extendedStatsBucketValue.getSumOfSquares(),equalTo(sumOfSquares));
  }
}
