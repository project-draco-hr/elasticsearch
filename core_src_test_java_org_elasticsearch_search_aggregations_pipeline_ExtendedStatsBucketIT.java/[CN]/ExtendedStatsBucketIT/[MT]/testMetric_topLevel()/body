{
  SearchResponse response=client().prepareSearch("idx").addAggregation(terms("terms").field("tag").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME))).addAggregation(extendedStatsBucket("extended_stats_bucket").setBucketsPaths("terms>sum")).execute().actionGet();
  assertSearchResponse(response);
  Terms terms=response.getAggregations().get("terms");
  assertThat(terms,notNullValue());
  assertThat(terms.getName(),equalTo("terms"));
  List<Terms.Bucket> buckets=terms.getBuckets();
  assertThat(buckets.size(),equalTo(interval));
  double bucketSum=0;
  int count=0;
  double min=Double.POSITIVE_INFINITY;
  double max=Double.NEGATIVE_INFINITY;
  double sumOfSquares=1;
  for (int i=0; i < interval; ++i) {
    Terms.Bucket bucket=buckets.get(i);
    assertThat(bucket,notNullValue());
    assertThat((String)bucket.getKey(),equalTo("tag" + (i % interval)));
    assertThat(bucket.getDocCount(),greaterThan(0l));
    Sum sum=bucket.getAggregations().get("sum");
    assertThat(sum,notNullValue());
    count++;
    bucketSum+=sum.value();
    min=Math.min(min,sum.value());
    max=Math.max(max,sum.value());
    sumOfSquares+=sum.value() * sum.value();
  }
  double avgValue=count == 0 ? Double.NaN : (bucketSum / count);
  ExtendedStatsBucket extendedStatsBucketValue=response.getAggregations().get("extended_stats_bucket");
  assertThat(extendedStatsBucketValue,notNullValue());
  assertThat(extendedStatsBucketValue.getName(),equalTo("extended_stats_bucket"));
  assertThat(extendedStatsBucketValue.getAvg(),equalTo(avgValue));
  assertThat(extendedStatsBucketValue.getMin(),equalTo(min));
  assertThat(extendedStatsBucketValue.getMax(),equalTo(max));
  assertThat(extendedStatsBucketValue.getSumOfSquares(),equalTo(sumOfSquares));
}
