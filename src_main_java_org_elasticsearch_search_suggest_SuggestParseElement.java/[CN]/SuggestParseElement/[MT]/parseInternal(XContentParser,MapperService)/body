{
  SuggestionSearchContext suggestionSearchContext=new SuggestionSearchContext();
  BytesRef globalText=null;
  String fieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      fieldName=parser.currentName();
    }
 else     if (token.isValue()) {
      if ("text".equals(fieldName)) {
        globalText=parser.bytes();
      }
 else {
        throw new ElasticSearchIllegalArgumentException("[suggest] does not support [" + fieldName + "]");
      }
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      String suggestionName=fieldName;
      BytesRef suggestText=null;
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          fieldName=parser.currentName();
        }
 else         if (token.isValue()) {
          if ("text".equals(fieldName)) {
            suggestText=parser.bytes();
          }
 else {
            throw new ElasticSearchIllegalArgumentException("[suggest] does not support [" + fieldName + "]");
          }
        }
 else         if (token == XContentParser.Token.START_OBJECT) {
          if (suggestionName == null) {
            throw new ElasticSearchIllegalArgumentException("Suggestion must have name");
          }
          if (suggesters.get(fieldName) == null) {
            throw new ElasticSearchIllegalArgumentException("Suggester[" + fieldName + "] not supported");
          }
          final SuggestContextParser contextParser=suggesters.get(fieldName).getContextParser();
          parseAndVerify(parser,mapperService,suggestionSearchContext,globalText,suggestionName,suggestText,contextParser);
        }
      }
    }
  }
  return suggestionSearchContext;
}
