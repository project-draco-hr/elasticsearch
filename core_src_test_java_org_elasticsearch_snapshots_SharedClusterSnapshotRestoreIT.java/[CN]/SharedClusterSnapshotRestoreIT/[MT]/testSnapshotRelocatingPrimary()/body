{
  Client client=client();
  logger.info("-->  creating repository");
  assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.settingsBuilder().put("location",randomRepoPath()).put("compress",randomBoolean()).put("chunk_size",randomIntBetween(100,1000),ByteSizeUnit.BYTES)));
  assertAcked(prepareCreate("test-idx",1,Settings.builder().put("number_of_replicas",0)));
  logger.info("--> indexing some data");
  for (int i=0; i < 100; i++) {
    index("test-idx","doc",Integer.toString(i),"foo","bar" + i);
  }
  refresh();
  assertThat(client.prepareSearch("test-idx").setSize(0).get().getHits().totalHits(),equalTo(100L));
  assertAcked(client.admin().indices().prepareUpdateSettings("test-idx").setSettings(Settings.builder().put(IndexStore.INDEX_STORE_THROTTLE_TYPE_SETTING.getKey(),"all").put(IndexStore.INDEX_STORE_THROTTLE_MAX_BYTES_PER_SEC_SETTING.getKey(),100,ByteSizeUnit.BYTES)));
  logger.info("--> start relocations");
  allowNodes("test-idx",internalCluster().numDataNodes());
  logger.info("--> wait for relocations to start");
  waitForRelocationsToStart("test-idx",TimeValue.timeValueMillis(300));
  logger.info("--> snapshot");
  client.admin().cluster().prepareCreateSnapshot("test-repo","test-snap").setWaitForCompletion(false).setIndices("test-idx").get();
  assertAcked(client.admin().indices().prepareUpdateSettings("test-idx").setSettings(Settings.builder().put(IndexStore.INDEX_STORE_THROTTLE_TYPE_SETTING.getKey(),"none")));
  logger.info("--> wait for snapshot to complete");
  SnapshotInfo snapshotInfo=waitForCompletion("test-repo","test-snap",TimeValue.timeValueSeconds(600));
  assertThat(snapshotInfo.state(),equalTo(SnapshotState.SUCCESS));
  assertThat(snapshotInfo.shardFailures().size(),equalTo(0));
  logger.info("--> done");
}
