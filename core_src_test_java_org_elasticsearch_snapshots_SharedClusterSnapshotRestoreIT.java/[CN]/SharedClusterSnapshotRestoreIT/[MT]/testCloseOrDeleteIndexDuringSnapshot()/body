{
  Client client=client();
  boolean allowPartial=randomBoolean();
  logger.info("-->  creating repository");
  boolean initBlocking=allowPartial || randomBoolean();
  if (initBlocking) {
    assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("mock").setSettings(Settings.settingsBuilder().put("location",randomRepoPath()).put("compress",randomBoolean()).put("chunk_size",randomIntBetween(100,1000),ByteSizeUnit.BYTES).put("block_on_init",true)));
  }
 else {
    assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("mock").setSettings(Settings.settingsBuilder().put("location",randomRepoPath()).put("compress",randomBoolean()).put("chunk_size",randomIntBetween(100,1000),ByteSizeUnit.BYTES).put("block_on_data",true)));
  }
  createIndex("test-idx-1","test-idx-2","test-idx-3");
  ensureGreen();
  logger.info("--> indexing some data");
  for (int i=0; i < 100; i++) {
    index("test-idx-1","doc",Integer.toString(i),"foo","bar" + i);
    index("test-idx-2","doc",Integer.toString(i),"foo","baz" + i);
    index("test-idx-3","doc",Integer.toString(i),"foo","baz" + i);
  }
  refresh();
  assertThat(client.prepareSearch("test-idx-1").setSize(0).get().getHits().totalHits(),equalTo(100L));
  assertThat(client.prepareSearch("test-idx-2").setSize(0).get().getHits().totalHits(),equalTo(100L));
  assertThat(client.prepareSearch("test-idx-3").setSize(0).get().getHits().totalHits(),equalTo(100L));
  logger.info("--> snapshot allow partial {}",allowPartial);
  ListenableActionFuture<CreateSnapshotResponse> future=client.admin().cluster().prepareCreateSnapshot("test-repo","test-snap").setIndices("test-idx-*").setWaitForCompletion(true).setPartial(allowPartial).execute();
  logger.info("--> wait for block to kick in");
  if (initBlocking) {
    waitForBlock(internalCluster().getMasterName(),"test-repo",TimeValue.timeValueMinutes(1));
  }
 else {
    waitForBlockOnAnyDataNode("test-repo",TimeValue.timeValueMinutes(1));
  }
  if (allowPartial) {
    if (randomBoolean()) {
      logger.info("--> delete index while partial snapshot is running");
      client.admin().indices().prepareDelete("test-idx-1").get();
    }
 else {
      logger.info("--> close index while partial snapshot is running");
      client.admin().indices().prepareClose("test-idx-1").get();
    }
  }
 else {
    if (randomBoolean()) {
      try {
        logger.info("--> delete index while non-partial snapshot is running");
        client.admin().indices().prepareDelete("test-idx-1").get();
        fail("Expected deleting index to fail during snapshot");
      }
 catch (      IllegalArgumentException e) {
        assertThat(e.getMessage(),containsString("Cannot delete indices that are being snapshotted: [test-idx-1]"));
      }
    }
 else {
      try {
        logger.info("--> close index while non-partial snapshot is running");
        client.admin().indices().prepareClose("test-idx-1").get();
        fail("Expected closing index to fail during snapshot");
      }
 catch (      IllegalArgumentException e) {
        assertThat(e.getMessage(),containsString("Cannot close indices that are being snapshotted: [test-idx-1]"));
      }
    }
  }
  if (initBlocking) {
    logger.info("--> unblock running master node");
    unblockNode(internalCluster().getMasterName());
  }
 else {
    logger.info("--> unblock all data nodes");
    unblockAllDataNodes("test-repo");
  }
  logger.info("--> waiting for snapshot to finish");
  CreateSnapshotResponse createSnapshotResponse=future.get();
  if (allowPartial) {
    logger.info("Deleted/Closed index during snapshot, but allow partial");
    assertThat(createSnapshotResponse.getSnapshotInfo().state(),equalTo((SnapshotState.PARTIAL)));
    assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),greaterThan(0));
    assertThat(createSnapshotResponse.getSnapshotInfo().failedShards(),greaterThan(0));
    assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),lessThan(createSnapshotResponse.getSnapshotInfo().totalShards()));
  }
 else {
    logger.info("Snapshot successfully completed");
    assertThat(createSnapshotResponse.getSnapshotInfo().state(),equalTo((SnapshotState.SUCCESS)));
  }
}
