{
  Client client=client();
  logger.info("-->  creating repository");
  assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("mock").setSettings(Settings.settingsBuilder().put("location",randomRepoPath()).put("compress",randomBoolean()).put("chunk_size",randomIntBetween(100,1000),ByteSizeUnit.BYTES)));
  createIndex("test-idx");
  ensureGreen();
  ClusterService clusterService=internalCluster().getInstance(ClusterService.class,internalCluster().getMasterName());
  final CountDownLatch countDownLatch=new CountDownLatch(1);
  logger.info("--> snapshot");
  CreateSnapshotResponse createSnapshotResponse=client.admin().cluster().prepareCreateSnapshot("test-repo","test-snap").setWaitForCompletion(true).setIndices("test-idx").get();
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),greaterThan(0));
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));
  logger.info("--> emulate an orphan snapshot");
  clusterService.submitStateUpdateTask("orphan snapshot test",new ClusterStateUpdateTask(){
    @Override public ClusterState execute(    ClusterState currentState){
      ImmutableMap.Builder<ShardId,ShardSnapshotStatus> shards=ImmutableMap.builder();
      shards.put(new ShardId("test-idx",0),new ShardSnapshotStatus("unknown-node",State.ABORTED));
      shards.put(new ShardId("test-idx",1),new ShardSnapshotStatus("unknown-node",State.ABORTED));
      shards.put(new ShardId("test-idx",2),new ShardSnapshotStatus("unknown-node",State.ABORTED));
      List<Entry> entries=new ArrayList<>();
      entries.add(new Entry(new SnapshotId("test-repo","test-snap"),true,State.ABORTED,Collections.singletonList("test-idx"),System.currentTimeMillis(),shards.build()));
      return ClusterState.builder(currentState).putCustom(SnapshotsInProgress.TYPE,new SnapshotsInProgress(Collections.unmodifiableList(entries))).build();
    }
    @Override public void onFailure(    String source,    Throwable t){
      fail();
    }
    @Override public void clusterStateProcessed(    String source,    ClusterState oldState,    final ClusterState newState){
      countDownLatch.countDown();
    }
  }
);
  countDownLatch.await();
  logger.info("--> try deleting the orphan snapshot");
  assertAcked(client.admin().cluster().prepareDeleteSnapshot("test-repo","test-snap").get("10s"));
}
