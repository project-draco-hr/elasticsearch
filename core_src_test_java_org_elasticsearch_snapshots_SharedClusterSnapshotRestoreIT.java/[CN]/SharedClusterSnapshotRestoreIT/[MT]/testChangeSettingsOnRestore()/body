{
  Client client=client();
  logger.info("-->  creating repository");
  assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.settingsBuilder().put("location",randomRepoPath()).put("compress",randomBoolean()).put("chunk_size",randomIntBetween(100,1000),ByteSizeUnit.BYTES)));
  logger.info("--> create test index with synonyms search analyzer");
  Settings.Builder indexSettings=Settings.builder().put(indexSettings()).put(SETTING_NUMBER_OF_REPLICAS,between(0,1)).put(INDEX_REFRESH_INTERVAL_SETTING.getKey(),"10s").put("index.analysis.analyzer.my_analyzer.type","custom").put("index.analysis.analyzer.my_analyzer.tokenizer","standard").putArray("index.analysis.analyzer.my_analyzer.filter","lowercase","my_synonym").put("index.analysis.filter.my_synonym.type","synonym").put("index.analysis.filter.my_synonym.synonyms","foo => bar");
  assertAcked(prepareCreate("test-idx",2,indexSettings));
  int numberOfShards=getNumShards("test-idx").numPrimaries;
  assertAcked(client().admin().indices().preparePutMapping("test-idx").setType("type1").setSource("field1","type=string,analyzer=standard,search_analyzer=my_analyzer"));
  final int numdocs=randomIntBetween(10,100);
  IndexRequestBuilder[] builders=new IndexRequestBuilder[numdocs];
  for (int i=0; i < builders.length; i++) {
    builders[i]=client().prepareIndex("test-idx","type1",Integer.toString(i)).setSource("field1","bar " + i);
  }
  indexRandom(true,builders);
  flushAndRefresh();
  assertHitCount(client.prepareSearch("test-idx").setSize(0).setQuery(matchQuery("field1","foo")).get(),numdocs);
  assertHitCount(client.prepareSearch("test-idx").setSize(0).setQuery(matchQuery("field1","bar")).get(),numdocs);
  logger.info("--> snapshot it");
  CreateSnapshotResponse createSnapshotResponse=client.admin().cluster().prepareCreateSnapshot("test-repo","test-snap").setWaitForCompletion(true).setIndices("test-idx").get();
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),greaterThan(0));
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));
  logger.info("--> delete the index and recreate it while changing refresh interval and analyzer");
  cluster().wipeIndices("test-idx");
  Settings newIndexSettings=Settings.builder().put("refresh_interval","5s").put("index.analysis.analyzer.my_analyzer.type","standard").build();
  Settings newIncorrectIndexSettings=Settings.builder().put(newIndexSettings).put(SETTING_NUMBER_OF_SHARDS,numberOfShards + 100).build();
  logger.info("--> try restoring while changing the number of shards - should fail");
  assertThrows(client.admin().cluster().prepareRestoreSnapshot("test-repo","test-snap").setIgnoreIndexSettings("index.analysis.*").setIndexSettings(newIncorrectIndexSettings).setWaitForCompletion(true),SnapshotRestoreException.class);
  logger.info("--> try restoring while changing the number of replicas to a negative number - should fail");
  Settings newIncorrectReplicasIndexSettings=Settings.builder().put(newIndexSettings).put(SETTING_NUMBER_OF_REPLICAS.substring(IndexMetaData.INDEX_SETTING_PREFIX.length()),randomIntBetween(-10,-1)).build();
  assertThrows(client.admin().cluster().prepareRestoreSnapshot("test-repo","test-snap").setIgnoreIndexSettings("index.analysis.*").setIndexSettings(newIncorrectReplicasIndexSettings).setWaitForCompletion(true),IllegalArgumentException.class);
  logger.info("--> restore index with correct settings from the snapshot");
  RestoreSnapshotResponse restoreSnapshotResponse=client.admin().cluster().prepareRestoreSnapshot("test-repo","test-snap").setIgnoreIndexSettings("index.analysis.*").setIndexSettings(newIndexSettings).setWaitForCompletion(true).execute().actionGet();
  assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(),greaterThan(0));
  logger.info("--> assert that correct settings are restored");
  GetSettingsResponse getSettingsResponse=client.admin().indices().prepareGetSettings("test-idx").execute().actionGet();
  assertThat(getSettingsResponse.getSetting("test-idx",INDEX_REFRESH_INTERVAL_SETTING.getKey()),equalTo("5s"));
  assertThat(getSettingsResponse.getSetting("test-idx",SETTING_NUMBER_OF_SHARDS),equalTo("" + numberOfShards));
  assertThat(getSettingsResponse.getSetting("test-idx","index.analysis.analyzer.my_analyzer.type"),equalTo("standard"));
  assertThat(getSettingsResponse.getSetting("test-idx","index.analysis.filter.my_synonym.type"),nullValue());
  assertHitCount(client.prepareSearch("test-idx").setSize(0).setQuery(matchQuery("field1","foo")).get(),0);
  assertHitCount(client.prepareSearch("test-idx").setSize(0).setQuery(matchQuery("field1","bar")).get(),numdocs);
  logger.info("--> delete the index and recreate it while deleting all index settings");
  cluster().wipeIndices("test-idx");
  logger.info("--> restore index with correct settings from the snapshot");
  restoreSnapshotResponse=client.admin().cluster().prepareRestoreSnapshot("test-repo","test-snap").setIgnoreIndexSettings("*").setIndexSettings(newIndexSettings).setWaitForCompletion(true).execute().actionGet();
  assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(),greaterThan(0));
  logger.info("--> assert that correct settings are restored and index is still functional");
  getSettingsResponse=client.admin().indices().prepareGetSettings("test-idx").execute().actionGet();
  assertThat(getSettingsResponse.getSetting("test-idx",INDEX_REFRESH_INTERVAL_SETTING.getKey()),equalTo("5s"));
  assertThat(getSettingsResponse.getSetting("test-idx",SETTING_NUMBER_OF_SHARDS),equalTo("" + numberOfShards));
  assertHitCount(client.prepareSearch("test-idx").setSize(0).setQuery(matchQuery("field1","foo")).get(),0);
  assertHitCount(client.prepareSearch("test-idx").setSize(0).setQuery(matchQuery("field1","bar")).get(),numdocs);
}
