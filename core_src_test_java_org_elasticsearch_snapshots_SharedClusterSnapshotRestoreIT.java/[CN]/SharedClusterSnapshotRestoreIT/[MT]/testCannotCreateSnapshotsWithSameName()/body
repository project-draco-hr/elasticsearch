{
  final String repositoryName="test-repo";
  final String snapshotName="test-snap";
  final String indexName="test-idx";
  final Client client=client();
  final Path repo=randomRepoPath();
  logger.info("-->  creating repository at {}",repo.toAbsolutePath());
  assertAcked(client.admin().cluster().preparePutRepository(repositoryName).setType("fs").setSettings(Settings.builder().put("location",repo).put("compress",false).put("chunk_size",randomIntBetween(100,1000),ByteSizeUnit.BYTES)));
  logger.info("--> creating an index and indexing documents");
  createIndex(indexName);
  ensureGreen();
  for (int i=0; i < 10; i++) {
    index(indexName,"doc",Integer.toString(i),"foo","bar" + i);
  }
  refresh();
  logger.info("--> take first snapshot");
  CreateSnapshotResponse createSnapshotResponse=client.admin().cluster().prepareCreateSnapshot(repositoryName,snapshotName).setWaitForCompletion(true).setIndices(indexName).get();
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),greaterThan(0));
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));
  logger.info("--> index more documents");
  for (int i=10; i < 20; i++) {
    index(indexName,"doc",Integer.toString(i),"foo","bar" + i);
  }
  refresh();
  logger.info("--> second snapshot of the same name should fail");
  try {
    createSnapshotResponse=client.admin().cluster().prepareCreateSnapshot(repositoryName,snapshotName).setWaitForCompletion(true).setIndices(indexName).get();
    fail("should not be allowed to create a snapshot with the same name as an already existing snapshot: " + createSnapshotResponse.getSnapshotInfo().snapshotId());
  }
 catch (  SnapshotCreationException e) {
    assertThat(e.getMessage(),containsString("snapshot with the same name already exists"));
  }
  logger.info("--> delete the first snapshot");
  client.admin().cluster().prepareDeleteSnapshot(repositoryName,snapshotName).get();
  logger.info("--> try creating a snapshot with the same name, now it should work because the first one was deleted");
  createSnapshotResponse=client.admin().cluster().prepareCreateSnapshot(repositoryName,snapshotName).setWaitForCompletion(true).setIndices(indexName).get();
  assertThat(createSnapshotResponse.getSnapshotInfo().snapshotId().getName(),equalTo(snapshotName));
}
