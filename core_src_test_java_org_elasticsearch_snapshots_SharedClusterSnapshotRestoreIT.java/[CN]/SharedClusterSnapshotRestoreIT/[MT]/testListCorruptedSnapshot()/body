{
  Client client=client();
  Path repo=randomRepoPath();
  logger.info("-->  creating repository at {}",repo.toAbsolutePath());
  assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.builder().put("location",repo).put("chunk_size",randomIntBetween(100,1000),ByteSizeUnit.BYTES)));
  createIndex("test-idx-1","test-idx-2","test-idx-3");
  ensureYellow();
  logger.info("--> indexing some data");
  indexRandom(true,client().prepareIndex("test-idx-1","doc").setSource("foo","bar"),client().prepareIndex("test-idx-2","doc").setSource("foo","bar"),client().prepareIndex("test-idx-3","doc").setSource("foo","bar"));
  logger.info("--> creating 2 snapshots");
  CreateSnapshotResponse createSnapshotResponse=client.admin().cluster().prepareCreateSnapshot("test-repo","test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get();
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),greaterThan(0));
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));
  createSnapshotResponse=client.admin().cluster().prepareCreateSnapshot("test-repo","test-snap-2").setWaitForCompletion(true).setIndices("test-idx-*").get();
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),greaterThan(0));
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));
  logger.info("--> truncate snapshot file to make it unreadable");
  Path snapshotPath=repo.resolve("snap-test-snap-2-" + createSnapshotResponse.getSnapshotInfo().snapshotId().getUUID() + ".dat");
  try (SeekableByteChannel outChan=Files.newByteChannel(snapshotPath,StandardOpenOption.WRITE)){
    outChan.truncate(randomInt(10));
  }
   logger.info("--> get snapshots request should return both snapshots");
  List<SnapshotInfo> snapshotInfos=client.admin().cluster().prepareGetSnapshots("test-repo").setIgnoreUnavailable(true).get().getSnapshots();
  assertThat(snapshotInfos.size(),equalTo(1));
  assertThat(snapshotInfos.get(0).state(),equalTo(SnapshotState.SUCCESS));
  assertThat(snapshotInfos.get(0).snapshotId().getName(),equalTo("test-snap-1"));
  try {
    client.admin().cluster().prepareGetSnapshots("test-repo").setIgnoreUnavailable(false).get().getSnapshots();
  }
 catch (  SnapshotException ex) {
    assertThat(ex.getRepositoryName(),equalTo("test-repo"));
    assertThat(ex.getSnapshotName(),equalTo("test-snap-2"));
  }
}
