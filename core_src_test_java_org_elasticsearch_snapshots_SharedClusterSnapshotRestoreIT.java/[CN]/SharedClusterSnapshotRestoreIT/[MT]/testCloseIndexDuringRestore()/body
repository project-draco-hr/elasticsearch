{
  Client client=client();
  logger.info("-->  creating repository");
  assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("mock").setSettings(Settings.settingsBuilder().put("location",randomRepoPath()).put("compress",randomBoolean()).put("chunk_size",randomIntBetween(100,1000),ByteSizeUnit.BYTES)));
  createIndex("test-idx-1","test-idx-2");
  ensureGreen();
  logger.info("--> indexing some data");
  for (int i=0; i < 100; i++) {
    index("test-idx-1","doc",Integer.toString(i),"foo","bar" + i);
    index("test-idx-2","doc",Integer.toString(i),"foo","baz" + i);
  }
  refresh();
  assertThat(client.prepareSearch("test-idx-1").setSize(0).get().getHits().totalHits(),equalTo(100L));
  assertThat(client.prepareSearch("test-idx-2").setSize(0).get().getHits().totalHits(),equalTo(100L));
  logger.info("--> snapshot");
  assertThat(client.admin().cluster().prepareCreateSnapshot("test-repo","test-snap").setIndices("test-idx-*").setWaitForCompletion(true).get().getSnapshotInfo().state(),equalTo(SnapshotState.SUCCESS));
  logger.info("--> deleting indices before restoring");
  assertAcked(client.admin().indices().prepareDelete("test-idx-*").get());
  blockAllDataNodes("test-repo");
  logger.info("--> execution will be blocked on all data nodes");
  final ListenableActionFuture<RestoreSnapshotResponse> restoreFut;
  try {
    logger.info("--> start restore");
    restoreFut=client.admin().cluster().prepareRestoreSnapshot("test-repo","test-snap").setWaitForCompletion(true).execute();
    logger.info("--> waiting for block to kick in");
    waitForBlockOnAnyDataNode("test-repo",TimeValue.timeValueSeconds(60));
    logger.info("--> close index while restore is running");
    try {
      client.admin().indices().prepareClose("test-idx-1").get();
      fail("Expected closing index to fail during restore");
    }
 catch (    IllegalArgumentException e) {
      assertThat(e.getMessage(),containsString("Cannot close indices that are being restored: [test-idx-1]"));
    }
  }
  finally {
    logger.info("--> unblocking all data nodes");
    unblockAllDataNodes("test-repo");
  }
  logger.info("--> wait for restore to finish");
  RestoreSnapshotResponse restoreSnapshotResponse=restoreFut.get();
  logger.info("--> check that all shards were recovered");
  assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(),greaterThan(0));
  assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),greaterThan(0));
  assertThat(restoreSnapshotResponse.getRestoreInfo().failedShards(),equalTo(0));
}
