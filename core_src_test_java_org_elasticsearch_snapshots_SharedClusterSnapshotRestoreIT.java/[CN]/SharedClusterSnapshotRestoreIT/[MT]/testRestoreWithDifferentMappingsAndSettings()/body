{
  Client client=client();
  logger.info("-->  creating repository");
  assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.settingsBuilder().put("location",randomRepoPath()).put("compress",randomBoolean()).put("chunk_size",randomIntBetween(100,1000),ByteSizeUnit.BYTES)));
  logger.info("--> create index with foo type");
  assertAcked(prepareCreate("test-idx",2,Settings.builder().put(indexSettings()).put(SETTING_NUMBER_OF_REPLICAS,between(0,1)).put("refresh_interval",10,TimeUnit.SECONDS)));
  NumShards numShards=getNumShards("test-idx");
  assertAcked(client().admin().indices().preparePutMapping("test-idx").setType("foo").setSource("baz","type=text"));
  ensureGreen();
  logger.info("--> snapshot it");
  CreateSnapshotResponse createSnapshotResponse=client.admin().cluster().prepareCreateSnapshot("test-repo","test-snap").setWaitForCompletion(true).setIndices("test-idx").get();
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),greaterThan(0));
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));
  logger.info("--> delete the index and recreate it with bar type");
  cluster().wipeIndices("test-idx");
  assertAcked(prepareCreate("test-idx",2,Settings.builder().put(SETTING_NUMBER_OF_SHARDS,numShards.numPrimaries).put(SETTING_NUMBER_OF_REPLICAS,between(0,1)).put("refresh_interval",5,TimeUnit.SECONDS)));
  assertAcked(client().admin().indices().preparePutMapping("test-idx").setType("bar").setSource("baz","type=text"));
  ensureGreen();
  logger.info("--> close index");
  client.admin().indices().prepareClose("test-idx").get();
  logger.info("--> restore all indices from the snapshot");
  RestoreSnapshotResponse restoreSnapshotResponse=client.admin().cluster().prepareRestoreSnapshot("test-repo","test-snap").setWaitForCompletion(true).execute().actionGet();
  assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(),greaterThan(0));
  logger.info("--> assert that old mapping is restored");
  ImmutableOpenMap<String,MappingMetaData> mappings=client().admin().cluster().prepareState().get().getState().getMetaData().getIndices().get("test-idx").getMappings();
  assertThat(mappings.get("foo"),notNullValue());
  assertThat(mappings.get("bar"),nullValue());
  logger.info("--> assert that old settings are restored");
  GetSettingsResponse getSettingsResponse=client.admin().indices().prepareGetSettings("test-idx").execute().actionGet();
  assertThat(getSettingsResponse.getSetting("test-idx","index.refresh_interval"),equalTo("10000ms"));
}
