{
  Client client=client();
  logger.info("-->  creating repository");
  final String repositoryName="test-repo";
  assertAcked(client.admin().cluster().preparePutRepository(repositoryName).setType("mock").setSettings(Settings.builder().put("location",randomRepoPath()).put("compress",randomBoolean()).put("chunk_size",randomIntBetween(100,1000),ByteSizeUnit.BYTES)));
  logger.info("--> create the index");
  final String idxName="test-idx";
  createIndex(idxName);
  ensureGreen();
  ClusterService clusterService=internalCluster().getInstance(ClusterService.class,internalCluster().getMasterName());
  final CountDownLatch countDownLatch=new CountDownLatch(1);
  logger.info("--> snapshot");
  final String snapshotName="test-snap";
  CreateSnapshotResponse createSnapshotResponse=client.admin().cluster().prepareCreateSnapshot(repositoryName,snapshotName).setWaitForCompletion(true).setIndices(idxName).get();
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),greaterThan(0));
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));
  logger.info("--> emulate an orphan snapshot");
  clusterService.submitStateUpdateTask("orphan snapshot test",new ClusterStateUpdateTask(){
    @Override public ClusterState execute(    ClusterState currentState){
      ImmutableOpenMap.Builder<ShardId,ShardSnapshotStatus> shards=ImmutableOpenMap.builder();
      shards.put(new ShardId(idxName,"_na_",0),new ShardSnapshotStatus("unknown-node",State.ABORTED));
      shards.put(new ShardId(idxName,"_na_",1),new ShardSnapshotStatus("unknown-node",State.ABORTED));
      shards.put(new ShardId(idxName,"_na_",2),new ShardSnapshotStatus("unknown-node",State.ABORTED));
      List<Entry> entries=new ArrayList<>();
      entries.add(new Entry(new Snapshot(repositoryName,createSnapshotResponse.getSnapshotInfo().snapshotId()),true,false,State.ABORTED,Collections.singletonList(idxName),System.currentTimeMillis(),shards.build()));
      return ClusterState.builder(currentState).putCustom(SnapshotsInProgress.TYPE,new SnapshotsInProgress(Collections.unmodifiableList(entries))).build();
    }
    @Override public void onFailure(    String source,    Exception e){
      fail();
    }
    @Override public void clusterStateProcessed(    String source,    ClusterState oldState,    final ClusterState newState){
      countDownLatch.countDown();
    }
  }
);
  countDownLatch.await();
  logger.info("--> try deleting the orphan snapshot");
  assertAcked(client.admin().cluster().prepareDeleteSnapshot(repositoryName,snapshotName).get("10s"));
}
