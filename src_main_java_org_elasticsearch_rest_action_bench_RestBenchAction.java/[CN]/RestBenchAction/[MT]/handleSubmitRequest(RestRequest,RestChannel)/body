{
  String[] indices=Strings.splitStringByCommaToArray(request.param("index"));
  String[] types=Strings.splitStringByCommaToArray(request.param("type"));
  final BenchmarkRequest benchmarkRequest;
  try {
    BenchmarkRequestBuilder builder=new BenchmarkRequestBuilder(client);
    builder.setVerbose(request.paramAsBoolean("verbose",false));
    benchmarkRequest=parse(builder,request.content(),request.contentUnsafe());
    benchmarkRequest.cascadeGlobalSettings();
    benchmarkRequest.applyLateBoundSettings(indices,types);
    Exception ex=benchmarkRequest.validate();
    if (ex != null) {
      throw ex;
    }
    benchmarkRequest.listenerThreaded(false);
  }
 catch (  Exception e) {
    logger.debug("failed to parse search request parameters",e);
    try {
      channel.sendResponse(new BytesRestResponse(BAD_REQUEST,contentBuilder().startObject().field("error",e.getMessage()).endObject()));
    }
 catch (    IOException e1) {
      logger.error("Failed to send failure response",e1);
    }
    return;
  }
  client.bench(benchmarkRequest,new RestBuilderListener<BenchmarkResponse>(channel){
    @Override public RestResponse buildResponse(    BenchmarkResponse response,    XContentBuilder builder) throws Exception {
      builder.startObject();
      response.toXContent(builder,request);
      builder.endObject();
      return new BytesRestResponse(OK,builder);
    }
  }
);
}
