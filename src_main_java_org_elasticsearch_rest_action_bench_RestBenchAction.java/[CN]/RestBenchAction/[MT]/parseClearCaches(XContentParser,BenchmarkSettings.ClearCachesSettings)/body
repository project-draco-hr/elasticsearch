{
  XContentParser.Token token;
  String fieldName=null;
  while ((token=p.nextToken()) != XContentParser.Token.END_OBJECT) {
switch (token) {
case START_OBJECT:
      break;
case VALUE_BOOLEAN:
    if (RestClearIndicesCacheAction.Fields.FILTER.match(fieldName)) {
      clearCachesSettings.filterCache(p.booleanValue());
    }
 else     if (RestClearIndicesCacheAction.Fields.FIELD_DATA.match(fieldName)) {
      clearCachesSettings.fieldDataCache(p.booleanValue());
    }
 else     if (RestClearIndicesCacheAction.Fields.ID.match(fieldName)) {
      clearCachesSettings.idCache(p.booleanValue());
    }
 else     if (RestClearIndicesCacheAction.Fields.RECYCLER.match(fieldName)) {
      clearCachesSettings.recycler(p.booleanValue());
    }
 else {
      throw new ElasticsearchParseException("Failed parsing " + token.name() + " field ["+ fieldName+ "] field is not recognized");
    }
  break;
case START_ARRAY:
List<String> fields=new ArrayList<>();
while ((token=p.nextToken()) != XContentParser.Token.END_ARRAY) {
fields.add(p.text());
}
if (RestClearIndicesCacheAction.Fields.FIELDS.match(fieldName)) {
clearCachesSettings.fields(fields.toArray(new String[fields.size()]));
}
 else if (RestClearIndicesCacheAction.Fields.FILTER_KEYS.match(fieldName)) {
clearCachesSettings.filterKeys(fields.toArray(new String[fields.size()]));
}
 else {
throw new ElasticsearchParseException("Failed parsing " + token.name() + " field ["+ fieldName+ "] field is not recognized");
}
break;
case FIELD_NAME:
fieldName=p.text();
break;
default :
throw new ElasticsearchParseException("Failed parsing " + token.name() + " field ["+ fieldName+ "] field is not recognized");
}
}
}
