{
  super(facetName);
  this.interval=interval;
  this.comparatorType=comparatorType;
  this.fieldDataCache=context.fieldDataCache();
  MapperService.SmartNameFieldMappers smartMappers=context.mapperService().smartName(keyFieldName);
  if (smartMappers == null || !smartMappers.hasMapper()) {
    throw new FacetPhaseExecutionException(facetName,"No mapping found for field [" + keyFieldName + "]");
  }
  if (smartMappers.hasDocMapper()) {
    setFilter(context.filterCache().cache(smartMappers.docMapper().typeFilter()));
  }
  keyIndexFieldName=smartMappers.mapper().names().indexName();
  keyFieldDataType=smartMappers.mapper().fieldDataType();
  FieldMapper mapper=context.mapperService().smartNameFieldMapper(valueFieldName);
  if (mapper == null) {
    throw new FacetPhaseExecutionException(facetName,"No mapping found for value_field [" + valueFieldName + "]");
  }
  valueIndexFieldName=mapper.names().indexName();
  valueFieldDataType=mapper.fieldDataType();
  long normalizedFrom=(((long)((double)from / interval)) * interval);
  long normalizedTo=(((long)((double)to / interval)) * interval);
  if ((to % interval) != 0) {
    normalizedTo+=interval;
  }
  long offset=-normalizedFrom;
  int size=(int)((normalizedTo - normalizedFrom) / interval);
  histoProc=new HistogramProc(from,to,interval,offset,size);
}
