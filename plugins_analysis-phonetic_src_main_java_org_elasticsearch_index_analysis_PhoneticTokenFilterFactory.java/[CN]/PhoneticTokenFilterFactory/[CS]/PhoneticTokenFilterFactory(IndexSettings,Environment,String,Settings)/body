{
  super(indexSettings,name,settings);
  this.languageset=null;
  this.nametype=null;
  this.ruletype=null;
  this.maxcodelength=0;
  this.replace=settings.getAsBoolean("replace",true);
  String encodername=settings.get("encoder","metaphone");
  if ("metaphone".equalsIgnoreCase(encodername)) {
    this.encoder=new Metaphone();
  }
 else   if ("soundex".equalsIgnoreCase(encodername)) {
    this.encoder=new Soundex();
  }
 else   if ("caverphone1".equalsIgnoreCase(encodername)) {
    this.encoder=new Caverphone1();
  }
 else   if ("caverphone2".equalsIgnoreCase(encodername)) {
    this.encoder=new Caverphone2();
  }
 else   if ("caverphone".equalsIgnoreCase(encodername)) {
    this.encoder=new Caverphone2();
  }
 else   if ("refined_soundex".equalsIgnoreCase(encodername) || "refinedSoundex".equalsIgnoreCase(encodername)) {
    this.encoder=new RefinedSoundex();
  }
 else   if ("cologne".equalsIgnoreCase(encodername)) {
    this.encoder=new ColognePhonetic();
  }
 else   if ("double_metaphone".equalsIgnoreCase(encodername) || "doubleMetaphone".equalsIgnoreCase(encodername)) {
    this.encoder=null;
    this.maxcodelength=settings.getAsInt("max_code_len",4);
  }
 else   if ("bm".equalsIgnoreCase(encodername) || "beider_morse".equalsIgnoreCase(encodername) || "beidermorse".equalsIgnoreCase(encodername)) {
    this.encoder=null;
    this.languageset=settings.getAsArray("languageset");
    String ruleType=settings.get("rule_type","approx");
    if ("approx".equalsIgnoreCase(ruleType)) {
      ruletype=RuleType.APPROX;
    }
 else     if ("exact".equalsIgnoreCase(ruleType)) {
      ruletype=RuleType.EXACT;
    }
 else {
      throw new IllegalArgumentException("No matching rule type [" + ruleType + "] for beider morse encoder");
    }
    String nameType=settings.get("name_type","generic");
    if ("GENERIC".equalsIgnoreCase(nameType)) {
      nametype=NameType.GENERIC;
    }
 else     if ("ASHKENAZI".equalsIgnoreCase(nameType)) {
      nametype=NameType.ASHKENAZI;
    }
 else     if ("SEPHARDIC".equalsIgnoreCase(nameType)) {
      nametype=NameType.SEPHARDIC;
    }
  }
 else   if ("koelnerphonetik".equalsIgnoreCase(encodername)) {
    this.encoder=new KoelnerPhonetik();
  }
 else   if ("haasephonetik".equalsIgnoreCase(encodername)) {
    this.encoder=new HaasePhonetik();
  }
 else   if ("nysiis".equalsIgnoreCase(encodername)) {
    this.encoder=new Nysiis();
  }
 else   if ("daitch_mokotoff".equalsIgnoreCase(encodername)) {
    this.encoder=new DaitchMokotoffSoundex();
  }
 else {
    throw new IllegalArgumentException("unknown encoder [" + encodername + "] for phonetic token filter");
  }
}
