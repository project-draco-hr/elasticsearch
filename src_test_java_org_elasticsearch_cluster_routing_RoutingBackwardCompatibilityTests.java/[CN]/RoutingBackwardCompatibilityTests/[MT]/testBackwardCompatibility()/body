{
  InternalNode node=new InternalNode();
  try {
    try (BufferedReader reader=new BufferedReader(new InputStreamReader(RoutingBackwardCompatibilityTests.class.getResourceAsStream("/org/elasticsearch/cluster/routing/shard_routes.txt"),"UTF-8"))){
      for (String line=reader.readLine(); line != null; line=reader.readLine()) {
        if (line.startsWith("#")) {
          continue;
        }
        String[] parts=line.split("\t");
        assertEquals(6,parts.length);
        final String index=parts[0];
        final int numberOfShards=Integer.parseInt(parts[1]);
        final String type=parts[2];
        final String id=parts[3];
        final String routing="null".equals(parts[4]) ? null : parts[4];
        final int expectedShardId=Integer.parseInt(parts[5]);
        IndexMetaData indexMetaData=IndexMetaData.builder(index).numberOfShards(numberOfShards).numberOfReplicas(randomInt(3)).build();
        MetaData.Builder metaData=MetaData.builder().put(indexMetaData,false);
        RoutingTable routingTable=RoutingTable.builder().addAsNew(indexMetaData).build();
        ClusterState clusterState=ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build();
        OperationRouting operationRouting=node.injector().getInstance(OperationRouting.class);
        assertEquals(expectedShardId,operationRouting.indexShards(clusterState,index,type,id,routing).shardId().getId());
      }
    }
   }
  finally {
    node.close();
  }
}
