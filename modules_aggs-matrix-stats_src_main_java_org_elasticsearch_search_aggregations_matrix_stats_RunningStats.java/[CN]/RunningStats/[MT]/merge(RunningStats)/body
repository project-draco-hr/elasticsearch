{
  if (other == null) {
    return;
  }
 else   if (this.docCount == 0) {
    for (    Map.Entry<String,Double> fs : other.means.entrySet()) {
      final String fieldName=fs.getKey();
      this.means.put(fieldName,fs.getValue().doubleValue());
      this.counts.put(fieldName,other.counts.get(fieldName).longValue());
      this.fieldSum.put(fieldName,other.fieldSum.get(fieldName).doubleValue());
      this.variances.put(fieldName,other.variances.get(fieldName).doubleValue());
      this.skewness.put(fieldName,other.skewness.get(fieldName).doubleValue());
      this.kurtosis.put(fieldName,other.kurtosis.get(fieldName).doubleValue());
      if (other.covariances.containsKey(fieldName) == true) {
        this.covariances.put(fieldName,other.covariances.get(fieldName));
      }
      this.docCount=other.docCount;
    }
    return;
  }
  final double nA=docCount;
  final double nB=other.docCount;
  docCount+=other.docCount;
  final HashMap<String,Double> deltas=new HashMap<>();
  double meanA, varA, skewA, kurtA, meanB, varB, skewB, kurtB;
  double d, d2, d3, d4, n2, nA2, nB2;
  double newSkew, nk;
  for (  Map.Entry<String,Double> fs : other.means.entrySet()) {
    final String fieldName=fs.getKey();
    meanA=means.get(fieldName);
    varA=variances.get(fieldName);
    skewA=skewness.get(fieldName);
    kurtA=kurtosis.get(fieldName);
    meanB=other.means.get(fieldName);
    varB=other.variances.get(fieldName);
    skewB=other.skewness.get(fieldName);
    kurtB=other.kurtosis.get(fieldName);
    counts.put(fieldName,counts.get(fieldName) + other.counts.get(fieldName));
    means.put(fieldName,(nA * means.get(fieldName) + nB * other.means.get(fieldName)) / (nA + nB));
    deltas.put(fieldName,other.fieldSum.get(fieldName) / nB - fieldSum.get(fieldName) / nA);
    fieldSum.put(fieldName,fieldSum.get(fieldName) + other.fieldSum.get(fieldName));
    d=meanB - meanA;
    d2=d * d;
    d3=d * d2;
    d4=d2 * d2;
    n2=docCount * docCount;
    nA2=nA * nA;
    nB2=nB * nB;
    variances.put(fieldName,varA + varB + d2 * nA * other.docCount / docCount);
    newSkew=skewA + skewB + d3 * nA * nB* (nA - nB) / n2;
    skewness.put(fieldName,newSkew + 3D * d * (nA * varB - nB * varA) / docCount);
    nk=kurtA + kurtB + d4 * nA * nB* (nA2 - nA * nB + nB2) / (n2 * docCount);
    kurtosis.put(fieldName,nk + 6D * d2 * (nA2 * varB + nB2 * varA) / n2 + 4D * d * (nA * skewB - nB * skewA) / docCount);
  }
  this.mergeCovariance(other,deltas);
}
