{
  if (type == null) {
    throw new MapperParsingException("Failed to derive type");
  }
  if (defaultSource != null) {
    Tuple<String,Map<String,Object>> t=extractMapping(MapperService.DEFAULT_MAPPING,defaultSource);
    if (t.v2() != null) {
      XContentHelper.mergeDefaults(mapping,t.v2());
    }
  }
  Mapper.TypeParser.ParserContext parserContext=parserContext(type);
  DocumentMapper.Builder docBuilder=new DocumentMapper.Builder((RootObjectMapper.Builder)rootObjectTypeParser.parse(type,mapping,parserContext),mapperService);
  Iterator<Map.Entry<String,Object>> iterator=mapping.entrySet().iterator();
  while (iterator.hasNext()) {
    Map.Entry<String,Object> entry=iterator.next();
    String fieldName=Strings.toUnderscoreCase(entry.getKey());
    Object fieldNode=entry.getValue();
    MetadataFieldMapper.TypeParser typeParser=rootTypeParsers.get(fieldName);
    if (typeParser != null) {
      iterator.remove();
      Map<String,Object> fieldNodeMap=(Map<String,Object>)fieldNode;
      docBuilder.put(typeParser.parse(fieldName,fieldNodeMap,parserContext));
      fieldNodeMap.remove("type");
      checkNoRemainingFields(fieldName,fieldNodeMap,parserContext.indexVersionCreated());
    }
  }
  Map<String,Object> meta=(Map<String,Object>)mapping.remove("_meta");
  if (meta != null) {
    docBuilder.meta(unmodifiableMap(new HashMap<>(meta)));
  }
  checkNoRemainingFields(mapping,parserContext.indexVersionCreated(),"Root mapping definition has unsupported parameters: ");
  return docBuilder.build(mapperService);
}
