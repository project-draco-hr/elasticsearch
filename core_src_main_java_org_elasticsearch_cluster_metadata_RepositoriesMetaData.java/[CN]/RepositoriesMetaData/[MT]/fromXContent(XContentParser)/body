{
  XContentParser.Token token;
  List<RepositoryMetaData> repository=new ArrayList<>();
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      String name=parser.currentName();
      if (parser.nextToken() != XContentParser.Token.START_OBJECT) {
        throw new ElasticsearchParseException("failed to parse repository [{}], expected object",name);
      }
      String type=null;
      Settings settings=Settings.EMPTY;
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          String currentFieldName=parser.currentName();
          if ("type".equals(currentFieldName)) {
            if (parser.nextToken() != XContentParser.Token.VALUE_STRING) {
              throw new ElasticsearchParseException("failed to parse repository [{}], unknown type",name);
            }
            type=parser.text();
          }
 else           if ("settings".equals(currentFieldName)) {
            if (parser.nextToken() != XContentParser.Token.START_OBJECT) {
              throw new ElasticsearchParseException("failed to parse repository [{}], incompatible params",name);
            }
            settings=Settings.builder().put(SettingsLoader.Helper.loadNestedFromMap(parser.mapOrdered())).build();
          }
 else {
            throw new ElasticsearchParseException("failed to parse repository [{}], unknown field [{}]",name,currentFieldName);
          }
        }
 else {
          throw new ElasticsearchParseException("failed to parse repository [{}]",name);
        }
      }
      if (type == null) {
        throw new ElasticsearchParseException("failed to parse repository [{}], missing repository type",name);
      }
      repository.add(new RepositoryMetaData(name,type,settings));
    }
 else {
      throw new ElasticsearchParseException("failed to parse repositories");
    }
  }
  return new RepositoriesMetaData(repository.toArray(new RepositoryMetaData[repository.size()]));
}
