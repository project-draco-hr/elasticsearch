{
  int iters=iterations(10,100);
  for (int i=0; i < iters; i++) {
    try (final TestIteration iteration=new TestIteration()){
      final CountDownLatch latch=new CountDownLatch(1);
      final AtomicInteger finalFailures=new AtomicInteger();
      final AtomicReference<Throwable> finalFailure=new AtomicReference<>();
      final AtomicReference<TestResponse> response=new AtomicReference<>();
      ActionListener<TestResponse> actionListener=new ActionListener<TestResponse>(){
        @Override public void onResponse(        TestResponse testResponse){
          response.set(testResponse);
          latch.countDown();
        }
        @Override public void onFailure(        Throwable e){
          finalFailures.incrementAndGet();
          finalFailure.set(e);
          latch.countDown();
        }
      }
;
      final AtomicInteger preSendFailures=new AtomicInteger();
      iteration.transportClientNodesService.execute(new TransportClientNodesService.NodeListenerCallback<TestResponse>(){
        @Override public void doWithNode(        DiscoveryNode node,        final ActionListener<TestResponse> retryListener){
          if (rarely()) {
            preSendFailures.incrementAndGet();
            throw new IllegalArgumentException();
          }
          iteration.transportService.sendRequest(node,"action",new TestRequest(),new TransportRequestOptions().withTimeout(50),new BaseTransportResponseHandler<TestResponse>(){
            @Override public TestResponse newInstance(){
              return new TestResponse();
            }
            @Override public void handleResponse(            TestResponse response){
              retryListener.onResponse(response);
            }
            @Override public void handleException(            TransportException exp){
              retryListener.onFailure(exp);
            }
            @Override public String executor(){
              return randomBoolean() ? ThreadPool.Names.SAME : ThreadPool.Names.GENERIC;
            }
          }
);
        }
      }
,actionListener);
      assertThat(latch.await(1,TimeUnit.SECONDS),equalTo(true));
      assertThat(preSendFailures.get() + iteration.transport.failures() + iteration.transport.successes(),lessThanOrEqualTo(1));
      if (iteration.transport.successes() == 1) {
        assertThat(finalFailures.get(),equalTo(0));
        assertThat(finalFailure.get(),nullValue());
        assertThat(response.get(),notNullValue());
      }
 else {
        assertThat(finalFailures.get(),equalTo(1));
        assertThat(finalFailure.get(),notNullValue());
        assertThat(response.get(),nullValue());
        if (preSendFailures.get() == 0 && iteration.transport.failures() == 0) {
          assertThat(finalFailure.get(),instanceOf(NoNodeAvailableException.class));
        }
      }
      assertThat(iteration.transport.triedNodes().size(),lessThanOrEqualTo(iteration.nodesCount));
      assertThat(iteration.transport.triedNodes().size(),equalTo(iteration.transport.connectTransportExceptions() + iteration.transport.failures() + iteration.transport.successes()));
    }
   }
}
