{
  try {
    XContentBuilder builder=XContentFactory.jsonBuilder();
    builder.startObject();
    builder.startObject(SpanNotQueryBuilder.NAME);
    builder.field("exclude");
    spanTermQuery("description","jumped").toXContent(builder,null);
    builder.field("dist",2);
    builder.endObject();
    builder.endObject();
    QueryParseContext context=createContext();
    XContentParser parser=XContentFactory.xContent(builder.string()).createParser(builder.string());
    context.reset(parser);
    assertQueryHeader(parser,SpanNotQueryBuilder.NAME);
    new SpanNotQueryParser().fromXContent(context);
    fail("QueryParsingException should have been caught");
  }
 catch (  QueryParsingException e) {
    assertThat("QueryParsingException should have been caught",e.getDetailedMessage(),containsString("spanNot must have [include]"));
  }
  try {
    XContentBuilder builder=XContentFactory.jsonBuilder();
    builder.startObject();
    builder.startObject(SpanNotQueryBuilder.NAME);
    builder.field("include");
    spanNearQuery(1).clause(QueryBuilders.spanTermQuery("description","quick")).clause(QueryBuilders.spanTermQuery("description","fox")).toXContent(builder,null);
    builder.field("dist",2);
    builder.endObject();
    builder.endObject();
    QueryParseContext context=createContext();
    XContentParser parser=XContentFactory.xContent(builder.string()).createParser(builder.string());
    context.reset(parser);
    assertQueryHeader(parser,SpanNotQueryBuilder.NAME);
    new SpanNotQueryParser().fromXContent(context);
    fail("QueryParsingException should have been caught");
  }
 catch (  QueryParsingException e) {
    assertThat("QueryParsingException should have been caught",e.getDetailedMessage(),containsString("spanNot must have [exclude]"));
  }
  try {
    XContentBuilder builder=XContentFactory.jsonBuilder();
    builder.startObject();
    builder.startObject(SpanNotQueryBuilder.NAME);
    builder.field("include");
    spanNearQuery(1).clause(QueryBuilders.spanTermQuery("description","quick")).clause(QueryBuilders.spanTermQuery("description","fox")).toXContent(builder,null);
    builder.field("exclude");
    spanTermQuery("description","jumped").toXContent(builder,null);
    builder.field("dist",2);
    builder.field("pre",2);
    builder.endObject();
    builder.endObject();
    QueryParseContext context=createContext();
    XContentParser parser=XContentFactory.xContent(builder.string()).createParser(builder.string());
    context.reset(parser);
    assertQueryHeader(parser,SpanNotQueryBuilder.NAME);
    new SpanNotQueryParser().fromXContent(context);
    fail("QueryParsingException should have been caught");
  }
 catch (  QueryParsingException e) {
    assertThat("QueryParsingException should have been caught",e.getDetailedMessage(),containsString("spanNot can either use [dist] or [pre] & [post] (or none)"));
  }
}
