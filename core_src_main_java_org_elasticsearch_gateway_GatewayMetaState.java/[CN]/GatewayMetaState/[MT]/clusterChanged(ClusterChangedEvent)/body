{
  Set<String> relevantIndices=new HashSet<>();
  final ClusterState state=event.state();
  if (state.blocks().disableStatePersistence()) {
    this.previousMetaData=null;
    previouslyWrittenIndices=ImmutableSet.of();
    return;
  }
  MetaData newMetaData=state.metaData();
  boolean success=true;
  if (state.nodes().localNode().masterNode() || state.nodes().localNode().dataNode()) {
    if (previousMetaData == null) {
      try {
        if (isDataOnlyNode(state)) {
          Set<String> newPreviouslyWrittenIndices=new HashSet<>(previouslyWrittenIndices.size());
          for (          IndexMetaData indexMetaData : newMetaData) {
            IndexMetaData indexMetaDataOnDisk=null;
            if (indexMetaData.state().equals(IndexMetaData.State.CLOSE)) {
              indexMetaDataOnDisk=metaStateService.loadIndexState(indexMetaData.index());
            }
            if (indexMetaDataOnDisk != null) {
              newPreviouslyWrittenIndices.add(indexMetaDataOnDisk.index());
            }
          }
          newPreviouslyWrittenIndices.addAll(previouslyWrittenIndices);
          previouslyWrittenIndices=unmodifiableSet(newPreviouslyWrittenIndices);
        }
      }
 catch (      Throwable e) {
        success=false;
      }
    }
    if (previousMetaData == null || !MetaData.isGlobalStateEquals(previousMetaData,newMetaData)) {
      try {
        metaStateService.writeGlobalState("changed",newMetaData);
      }
 catch (      Throwable e) {
        success=false;
      }
    }
    Iterable<IndexMetaWriteInfo> writeInfo;
    relevantIndices=getRelevantIndices(event.state(),event.previousState(),previouslyWrittenIndices);
    writeInfo=resolveStatesToBeWritten(previouslyWrittenIndices,relevantIndices,previousMetaData,event.state().metaData());
    for (    IndexMetaWriteInfo indexMetaWrite : writeInfo) {
      try {
        metaStateService.writeIndex(indexMetaWrite.reason,indexMetaWrite.newMetaData,indexMetaWrite.previousMetaData);
      }
 catch (      Throwable e) {
        success=false;
      }
    }
  }
  danglingIndicesState.processDanglingIndices(newMetaData);
  if (success) {
    previousMetaData=newMetaData;
    previouslyWrittenIndices=unmodifiableSet(relevantIndices);
  }
}
