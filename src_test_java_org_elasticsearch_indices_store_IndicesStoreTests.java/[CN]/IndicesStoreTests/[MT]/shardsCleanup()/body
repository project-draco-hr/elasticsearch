{
  final String node_1=cluster().startNode(SETTINGS);
  final String node_2=cluster().startNode(SETTINGS);
  logger.info("--> creating index [test] with one shard and on replica");
  client().admin().indices().create(createIndexRequest("test").settings(settingsBuilder().put("index.numberOfReplicas",1).put("index.numberOfShards",1))).actionGet();
  logger.info("--> running cluster_health");
  ClusterHealthResponse clusterHealth=client().admin().cluster().health(clusterHealthRequest().waitForGreenStatus()).actionGet();
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  logger.info("--> done cluster_health, status " + clusterHealth.getStatus());
  logger.info("--> making sure that shard and its replica are allocated on node_1 and node_2");
  assertThat(shardDirectory(node_1,"test",0).exists(),equalTo(true));
  assertThat(shardDirectory(node_2,"test",0).exists(),equalTo(true));
  logger.info("--> starting node server3");
  String node_3=cluster().startNode(SETTINGS);
  logger.info("--> making sure that shard is not allocated on server3");
  assertThat(waitForShardDeletion(node_3,"test",0),equalTo(false));
  File server2Shard=shardDirectory(node_2,"test",0);
  logger.info("--> stopping node node_2");
  cluster().stopRandomNode(TestCluster.nameFilter(node_2));
  assertThat(server2Shard.exists(),equalTo(true));
  logger.info("--> running cluster_health");
  clusterHealth=client().admin().cluster().health(clusterHealthRequest().waitForGreenStatus().waitForNodes("2")).actionGet();
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  logger.info("--> done cluster_health, status " + clusterHealth.getStatus());
  logger.info("--> making sure that shard and its replica exist on server1, server2 and server3");
  assertThat(shardDirectory(node_1,"test",0).exists(),equalTo(true));
  assertThat(server2Shard.exists(),equalTo(true));
  assertThat(shardDirectory(node_3,"test",0).exists(),equalTo(true));
  logger.info("--> starting node node_4");
  final String node_4=cluster().startNode(SETTINGS);
  logger.info("--> running cluster_health");
  clusterHealth=client().admin().cluster().health(clusterHealthRequest().waitForGreenStatus()).actionGet();
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  logger.info("--> done cluster_health, status " + clusterHealth.getStatus());
  logger.info("--> making sure that shard and its replica are allocated on server1 and server3 but not on server2");
  assertThat(shardDirectory(node_1,"test",0).exists(),equalTo(true));
  assertThat(shardDirectory(node_3,"test",0).exists(),equalTo(true));
  assertThat(waitForShardDeletion(node_4,"test",0),equalTo(false));
}
