{
  int numShards=randomIntBetween(1,7);
  int numReplicas=randomInt(2);
  ClusterState.Builder clusterState=ClusterState.builder(new ClusterName("test"));
  clusterState.metaData(MetaData.builder().put(IndexMetaData.builder("test").numberOfShards(numShards).numberOfReplicas(numReplicas)));
  final Version nodeVersion=randomBoolean() ? Version.CURRENT : randomVersion();
  clusterState.nodes(DiscoveryNodes.builder().localNodeId(localNode.id()).put(localNode).put(new DiscoveryNode("xyz",new LocalTransportAddress("xyz"),Version.CURRENT)).put(new DiscoveryNode("def",new LocalTransportAddress("def"),nodeVersion)));
  IndexShardRoutingTable.Builder routingTable=new IndexShardRoutingTable.Builder(new ShardId("test",1),false);
  for (int i=0; i < numShards; i++) {
    routingTable.addShard(new ImmutableShardRouting("test",i,"xyz","def",true,ShardRoutingState.STARTED,0));
    for (int j=0; j < numReplicas; j++) {
      routingTable.addShard(new ImmutableShardRouting("test",i,"xyz","def",false,ShardRoutingState.STARTED,0));
    }
  }
  final boolean canBeDeleted;
  if (nodeVersion.before(Version.V_1_3_0)) {
    canBeDeleted=false;
  }
 else {
    canBeDeleted=true;
  }
  assertThat(indicesStore.shardCanBeDeleted(clusterState.build(),routingTable.build()),is(canBeDeleted));
}
