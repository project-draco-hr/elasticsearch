{
  super(settings);
  this.clusterService=clusterService;
  this.contributors=contributors;
  contSettings=settings.getGroups("monitor.dump");
  workFile=environment.workWithClusterFile();
  this.dumpLocation=settings.get("dumpLocation");
  File dumpLocationFile;
  if (dumpLocation != null) {
    dumpLocationFile=new File(dumpLocation);
  }
 else {
    dumpLocationFile=new File(workFile,"dump");
  }
  boolean success=dumpLocationFile.mkdirs();
  Map<String,DumpContributor> contributorMap=newHashMap();
  if (contributors != null) {
    for (    Map.Entry<String,DumpContributorFactory> entry : contributors.entrySet()) {
      String contName=entry.getKey();
      DumpContributorFactory dumpContributorFactory=entry.getValue();
      Settings analyzerSettings=contSettings.get(contName);
      if (analyzerSettings == null) {
        analyzerSettings=EMPTY_SETTINGS;
      }
      DumpContributor analyzerFactory=dumpContributorFactory.create(contName,analyzerSettings);
      contributorMap.put(contName,analyzerFactory);
    }
  }
  if (!contributorMap.containsKey(SUMMARY)) {
    contributorMap.put(SUMMARY,new SummaryDumpContributor(SUMMARY,EMPTY_SETTINGS));
  }
  if (!contributorMap.containsKey(HEAP_DUMP)) {
    contributorMap.put(HEAP_DUMP,new HeapDumpContributor(HEAP_DUMP,EMPTY_SETTINGS));
  }
  if (!contributorMap.containsKey(THREAD_DUMP)) {
    contributorMap.put(THREAD_DUMP,new ThreadDumpContributor(THREAD_DUMP,EMPTY_SETTINGS));
  }
  generator=new SimpleDumpGenerator(dumpLocationFile,contributorMap);
}
