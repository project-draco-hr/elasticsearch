{
  Settings settings=ImmutableSettings.settingsBuilder().put("index.cache.filter.type","none").build();
  Index index=new Index("test");
  injector=new ModulesBuilder().add(new CacheRecyclerModule(settings),new CodecModule(settings),new SettingsModule(settings),new ThreadPoolModule(settings),new IndicesQueriesModule(),new ScriptModule(settings),new MapperServiceModule(),new IndexSettingsModule(index,settings),new IndexCacheModule(settings),new AnalysisModule(settings),new IndexEngineModule(settings),new SimilarityModule(settings),new IndexQueryParserModule(settings),new IndexNameModule(index),new FunctionScoreModule(),new AbstractModule(){
    @Override protected void configure(){
      bind(ClusterService.class).toProvider(Providers.of((ClusterService)null));
    }
  }
).createInjector();
  String mapping=copyToStringFromClasspath("/org/elasticsearch/index/query/mapping.json");
  injector.getInstance(MapperService.class).merge("person",new CompressedString(mapping),true);
  injector.getInstance(MapperService.class).documentMapper("person").parse(new BytesArray(copyToBytesFromClasspath("/org/elasticsearch/index/query/data.json")));
  queryParser=injector.getInstance(IndexQueryParserService.class);
}
