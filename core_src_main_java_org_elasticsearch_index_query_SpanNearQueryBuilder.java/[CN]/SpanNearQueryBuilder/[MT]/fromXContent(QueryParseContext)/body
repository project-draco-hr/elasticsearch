{
  XContentParser parser=parseContext.parser();
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  Integer slop=null;
  boolean inOrder=SpanNearQueryBuilder.DEFAULT_IN_ORDER;
  String queryName=null;
  List<SpanQueryBuilder> clauses=new ArrayList<>();
  String currentFieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if (parseContext.getParseFieldMatcher().match(currentFieldName,CLAUSES_FIELD)) {
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          Optional<QueryBuilder> query=parseContext.parseInnerQueryBuilder();
          if (query.isPresent() == false || query.get() instanceof SpanQueryBuilder == false) {
            throw new ParsingException(parser.getTokenLocation(),"spanNear [clauses] must be of type span query");
          }
          clauses.add((SpanQueryBuilder)query.get());
        }
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"[span_near] query does not support [" + currentFieldName + "]");
      }
    }
 else     if (token.isValue()) {
      if (parseContext.getParseFieldMatcher().match(currentFieldName,IN_ORDER_FIELD)) {
        inOrder=parser.booleanValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,COLLECT_PAYLOADS_FIELD)) {
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,SLOP_FIELD)) {
        slop=parser.intValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.BOOST_FIELD)) {
        boost=parser.floatValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.NAME_FIELD)) {
        queryName=parser.text();
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"[span_near] query does not support [" + currentFieldName + "]");
      }
    }
 else {
      throw new ParsingException(parser.getTokenLocation(),"[span_near] query does not support [" + currentFieldName + "]");
    }
  }
  if (clauses.isEmpty()) {
    throw new ParsingException(parser.getTokenLocation(),"span_near must include [clauses]");
  }
  if (slop == null) {
    throw new ParsingException(parser.getTokenLocation(),"span_near must include [slop]");
  }
  SpanNearQueryBuilder queryBuilder=new SpanNearQueryBuilder(clauses.get(0),slop);
  for (int i=1; i < clauses.size(); i++) {
    queryBuilder.addClause(clauses.get(i));
  }
  queryBuilder.inOrder(inOrder);
  queryBuilder.boost(boost);
  queryBuilder.queryName(queryName);
  return Optional.of(queryBuilder);
}
