{
  final Type type;
  try {
    type=Definition.getType(this.type);
  }
 catch (  IllegalArgumentException exception) {
    throw createError(new IllegalArgumentException("Not a type [" + this.type + "]."));
  }
  variables.incrementScope();
  variable=variables.addVariable(location,type,name,true,false);
  array=variables.addVariable(location,expression.actual,"#array" + location.getOffset(),true,false);
  index=variables.addVariable(location,Definition.INT_TYPE,"#index" + location.getOffset(),true,false);
  indexed=Definition.getType(expression.actual.struct,expression.actual.dimensions - 1);
  cast=AnalyzerCaster.getLegalCast(location,indexed,type,true,true);
  if (block == null) {
    throw location.createError(new IllegalArgumentException("Extraneous for each loop."));
  }
  block.beginLoop=true;
  block.inLoop=true;
  block=block.analyze(variables);
  block.statementCount=Math.max(1,block.statementCount);
  if (block.loopEscape && !block.anyContinue) {
    throw createError(new IllegalArgumentException("Extraneous for loop."));
  }
  statementCount=1;
  if (maxLoopCounter > 0) {
    loopCounterSlot=variables.getVariable(location,"#loop").slot;
  }
  variables.decrementScope();
  return this;
}
