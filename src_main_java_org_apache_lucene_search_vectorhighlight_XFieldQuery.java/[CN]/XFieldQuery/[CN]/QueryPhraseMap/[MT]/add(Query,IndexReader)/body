{
  if (query instanceof TermQuery) {
    addTerm(((TermQuery)query).getTerm(),query.getBoost());
  }
 else   if (query instanceof PhraseQuery) {
    PhraseQuery pq=(PhraseQuery)query;
    final Term[] terms=pq.getTerms();
    final int[] positions=pq.getPositions();
    new InPlaceMergeSorter(){
      @Override protected void swap(      int i,      int j){
        Term tmpTerm=terms[i];
        terms[i]=terms[j];
        terms[j]=tmpTerm;
        int tmpPos=positions[i];
        positions[i]=positions[j];
        positions[j]=tmpPos;
      }
      @Override protected int compare(      int i,      int j){
        return positions[i] - positions[j];
      }
    }
.sort(0,terms.length);
    addToMap(pq,terms,positions,0,subMap,pq.getSlop());
  }
 else   throw new RuntimeException("query \"" + query.toString() + "\" must be flatten first.");
}
