{
  int numTermsAtSamePosition=numTermsAtSamePosition(positions,i);
  for (int j=0; j < numTermsAtSamePosition; ++j) {
    QueryPhraseMap qpm=getOrNewMap(map,terms[i + j].text());
    if (i + numTermsAtSamePosition == terms.length) {
      qpm.markTerminal(pq.getSlop(),pq.getBoost(),uniquePositions(positions));
    }
 else {
      addToMap(pq,terms,positions,i + numTermsAtSamePosition,qpm.subMap,slop);
    }
  }
  if (slop > 2 && i + numTermsAtSamePosition < terms.length) {
    Term[] otherTerms=Arrays.copyOf(terms,terms.length);
    int[] otherPositions=Arrays.copyOf(positions,positions.length);
    final int nextTermAtSamePosition=numTermsAtSamePosition(positions,i + numTermsAtSamePosition);
    System.arraycopy(terms,i + numTermsAtSamePosition,otherTerms,i,nextTermAtSamePosition);
    System.arraycopy(positions,i + numTermsAtSamePosition,otherPositions,i,nextTermAtSamePosition);
    System.arraycopy(terms,i,otherTerms,i + nextTermAtSamePosition,numTermsAtSamePosition);
    System.arraycopy(positions,i,otherPositions,i + nextTermAtSamePosition,numTermsAtSamePosition);
    addToMap(pq,otherTerms,otherPositions,i,map,slop - 2);
  }
}
