{
  UpdateRequest updateRequest=new UpdateRequest(request.param("index"),request.param("type"),request.param("id"));
  updateRequest.routing(request.param("routing"));
  updateRequest.parent(request.param("parent"));
  updateRequest.timeout(request.paramAsTime("timeout",updateRequest.timeout()));
  updateRequest.refresh(request.paramAsBoolean("refresh",updateRequest.refresh()));
  String consistencyLevel=request.param("consistency");
  if (consistencyLevel != null) {
    updateRequest.consistencyLevel(WriteConsistencyLevel.fromString(consistencyLevel));
  }
  updateRequest.docAsUpsert(request.paramAsBoolean("doc_as_upsert",updateRequest.docAsUpsert()));
  ScriptParameterParser scriptParameterParser=new ScriptParameterParser();
  scriptParameterParser.parseParams(request);
  ScriptParameterValue scriptValue=scriptParameterParser.getDefaultScriptParameterValue();
  if (scriptValue != null) {
    Map<String,Object> scriptParams=new HashMap<>();
    for (    Map.Entry<String,String> entry : request.params().entrySet()) {
      if (entry.getKey().startsWith("sp_")) {
        scriptParams.put(entry.getKey().substring(3),entry.getValue());
      }
    }
    updateRequest.script(new Script(scriptValue.script(),scriptValue.scriptType(),scriptParameterParser.lang(),scriptParams));
  }
  String sField=request.param("fields");
  if (sField != null) {
    String[] sFields=Strings.splitStringByCommaToArray(sField);
    if (sFields != null) {
      updateRequest.fields(sFields);
    }
  }
  updateRequest.retryOnConflict(request.paramAsInt("retry_on_conflict",updateRequest.retryOnConflict()));
  updateRequest.version(RestActions.parseVersion(request));
  updateRequest.versionType(VersionType.fromString(request.param("version_type"),updateRequest.versionType()));
  if (request.hasContent()) {
    updateRequest.source(request.content());
    IndexRequest upsertRequest=updateRequest.upsertRequest();
    if (upsertRequest != null) {
      upsertRequest.routing(request.param("routing"));
      upsertRequest.parent(request.param("parent"));
      upsertRequest.timestamp(request.param("timestamp"));
      if (request.hasParam("ttl")) {
        upsertRequest.ttl(request.param("ttl"));
      }
      upsertRequest.version(RestActions.parseVersion(request));
      upsertRequest.versionType(VersionType.fromString(request.param("version_type"),upsertRequest.versionType()));
    }
    IndexRequest doc=updateRequest.doc();
    if (doc != null) {
      doc.routing(request.param("routing"));
      doc.parent(request.param("parent"));
      doc.timestamp(request.param("timestamp"));
      if (request.hasParam("ttl")) {
        doc.ttl(request.param("ttl"));
      }
      doc.version(RestActions.parseVersion(request));
      doc.versionType(VersionType.fromString(request.param("version_type"),doc.versionType()));
    }
  }
  client.update(updateRequest,new RestBuilderListener<UpdateResponse>(channel){
    @Override public RestResponse buildResponse(    UpdateResponse response,    XContentBuilder builder) throws Exception {
      builder.startObject();
      ActionWriteResponse.ShardInfo shardInfo=response.getShardInfo();
      builder.field(Fields._INDEX,response.getIndex()).field(Fields._TYPE,response.getType()).field(Fields._ID,response.getId()).field(Fields._VERSION,response.getVersion());
      shardInfo.toXContent(builder,request);
      if (response.getGetResult() != null) {
        builder.startObject(Fields.GET);
        response.getGetResult().toXContentEmbedded(builder,request);
        builder.endObject();
      }
      builder.endObject();
      RestStatus status=shardInfo.status();
      if (response.isCreated()) {
        status=CREATED;
      }
      return new BytesRestResponse(status,builder);
    }
  }
);
}
