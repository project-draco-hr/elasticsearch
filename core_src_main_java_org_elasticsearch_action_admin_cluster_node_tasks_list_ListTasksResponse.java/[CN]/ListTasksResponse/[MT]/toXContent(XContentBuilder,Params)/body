{
  if (getTaskFailures() != null && getTaskFailures().size() > 0) {
    builder.startArray("task_failures");
    for (    TaskOperationFailure ex : getTaskFailures()) {
      builder.startObject();
      builder.value(ex);
      builder.endObject();
    }
    builder.endArray();
  }
  if (getNodeFailures() != null && getNodeFailures().size() > 0) {
    builder.startArray("node_failures");
    for (    FailedNodeException ex : getNodeFailures()) {
      builder.startObject();
      ex.toXContent(builder,params);
      builder.endObject();
    }
    builder.endArray();
  }
  String groupBy=params.param("group_by","nodes");
  if ("nodes".equals(groupBy)) {
    if (discoveryNodes == null) {
      throw new IllegalStateException("discoveryNodes must be set before calling toXContent with group_by=nodes");
    }
    builder.startObject("nodes");
    for (    Map.Entry<String,List<TaskInfo>> entry : getPerNodeTasks().entrySet()) {
      DiscoveryNode node=discoveryNodes.get(entry.getKey());
      builder.startObject(entry.getKey());
      if (node != null) {
        builder.field("name",node.getName());
        builder.field("transport_address",node.getAddress().toString());
        builder.field("host",node.getHostName());
        builder.field("ip",node.getAddress());
        builder.startArray("roles");
        for (        DiscoveryNode.Role role : node.getRoles()) {
          builder.value(role.getRoleName());
        }
        builder.endArray();
        if (!node.getAttributes().isEmpty()) {
          builder.startObject("attributes");
          for (          Map.Entry<String,String> attrEntry : node.getAttributes().entrySet()) {
            builder.field(attrEntry.getKey(),attrEntry.getValue());
          }
          builder.endObject();
        }
      }
      builder.startObject("tasks");
      for (      TaskInfo task : entry.getValue()) {
        builder.field(task.getTaskId().toString());
        task.toXContent(builder,params);
      }
      builder.endObject();
      builder.endObject();
    }
    builder.endObject();
  }
 else   if ("parents".equals(groupBy)) {
    builder.startObject("tasks");
    for (    TaskGroup group : getTaskGroups()) {
      builder.field(group.getTaskInfo().getTaskId().toString());
      group.toXContent(builder,params);
    }
    builder.endObject();
  }
 else {
    builder.startObject("tasks");
    if (tasks != null) {
      for (      TaskInfo task : tasks) {
        builder.field(task.getTaskId().toString());
        task.toXContent(builder,params);
      }
    }
    builder.endObject();
  }
  return builder;
}
