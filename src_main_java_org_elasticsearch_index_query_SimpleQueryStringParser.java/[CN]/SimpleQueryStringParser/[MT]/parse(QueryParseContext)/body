{
  XContentParser parser=parseContext.parser();
  String currentFieldName=null;
  String queryBody=null;
  String field=null;
  Map<String,Float> fieldsAndWeights=null;
  BooleanClause.Occur defaultOperator=null;
  Analyzer analyzer=null;
  int flags=-1;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if ("fields".equals(currentFieldName)) {
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          String fField=null;
          float fBoost=1;
          char[] text=parser.textCharacters();
          int end=parser.textOffset() + parser.textLength();
          for (int i=parser.textOffset(); i < end; i++) {
            if (text[i] == '^') {
              int relativeLocation=i - parser.textOffset();
              fField=new String(text,parser.textOffset(),relativeLocation);
              fBoost=Float.parseFloat(new String(text,i + 1,parser.textLength() - relativeLocation - 1));
              break;
            }
          }
          if (fField == null) {
            fField=parser.text();
          }
          if (fieldsAndWeights == null) {
            fieldsAndWeights=new HashMap<String,Float>();
          }
          if (Regex.isSimpleMatchPattern(fField)) {
            for (            String fieldName : parseContext.mapperService().simpleMatchToIndexNames(fField)) {
              fieldsAndWeights.put(fieldName,fBoost);
            }
          }
 else {
            fieldsAndWeights.put(fField,fBoost);
          }
        }
      }
 else {
        throw new QueryParsingException(parseContext.index(),"[" + NAME + "] query does not support ["+ currentFieldName+ "]");
      }
    }
 else     if (token.isValue()) {
      if ("query".equals(currentFieldName)) {
        queryBody=parser.text();
      }
 else       if ("analyzer".equals(currentFieldName)) {
        analyzer=parseContext.analysisService().analyzer(parser.text());
        if (analyzer == null) {
          throw new QueryParsingException(parseContext.index(),"[" + NAME + "] analyzer ["+ parser.text()+ "] not found");
        }
      }
 else       if ("field".equals(currentFieldName)) {
        field=parser.text();
      }
 else       if ("default_operator".equals(currentFieldName)) {
        String op=parser.text();
        if ("or".equalsIgnoreCase(op)) {
          defaultOperator=BooleanClause.Occur.SHOULD;
        }
 else         if ("and".equalsIgnoreCase(op)) {
          defaultOperator=BooleanClause.Occur.MUST;
        }
 else {
          throw new QueryParsingException(parseContext.index(),"[" + NAME + "] default operator ["+ op+ "] is not allowed");
        }
      }
 else       if ("flags".equals(currentFieldName)) {
        if (parser.hasTextCharacters()) {
          flags=SimpleQueryStringFlag.resolveFlags(parser.text());
        }
 else {
          flags=parser.intValue();
          if (flags < 0) {
            flags=SimpleQueryStringFlag.ALL.value();
          }
        }
      }
 else {
        throw new QueryParsingException(parseContext.index(),"[" + NAME + "] unsupported field ["+ parser.currentName()+ "]");
      }
    }
  }
  if (queryBody == null) {
    throw new QueryParsingException(parseContext.index(),"[" + NAME + "] query text missing");
  }
  if (field == null) {
    field=currentFieldName;
  }
  if (fieldsAndWeights == null) {
    field=parseContext.defaultField();
  }
  if (analyzer == null) {
    analyzer=parseContext.mapperService().searchAnalyzer();
  }
  XSimpleQueryParser sqp;
  if (fieldsAndWeights != null) {
    sqp=new XSimpleQueryParser(analyzer,fieldsAndWeights,flags);
  }
 else {
    sqp=new XSimpleQueryParser(analyzer,Collections.singletonMap(field,1.0F),flags);
  }
  if (defaultOperator != null) {
    sqp.setDefaultOperator(defaultOperator);
  }
  return sqp.parse(queryBody);
}
