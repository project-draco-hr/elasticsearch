{
  Terminal terminal=new TerminalMock();
  int count=randomIntBetween(2,7);
  final AtomicReference<Boolean>[] executed=new AtomicReference[count];
  for (int i=0; i < executed.length; i++) {
    executed[i]=new AtomicReference<>(false);
  }
  NamedCommand[] cmds=new NamedCommand[count];
  for (int i=0; i < count; i++) {
    final int index=i;
    cmds[i]=new NamedCommand("cmd" + index,terminal){
      @Override public CliTool.ExitStatus execute(      Settings settings,      Environment env) throws Exception {
        executed[index].set(true);
        return CliTool.ExitStatus.OK;
      }
    }
;
  }
  MultiCmdTool tool=new MultiCmdTool("tool",terminal,cmds);
  int cmdIndex=randomIntBetween(0,count - 1);
  int status=tool.execute("cmd" + cmdIndex);
  assertThat(status,is(CliTool.ExitStatus.OK.status()));
  for (int i=0; i < executed.length; i++) {
    assertThat(executed[i].get(),is(i == cmdIndex));
  }
}
