{
  final AtomicInteger writeCounter=new AtomicInteger(0);
  Terminal terminal=new TerminalMock(){
    @Override public void doPrint(    String msg,    Object... args){
      int count=writeCounter.incrementAndGet();
switch (count) {
case 1:
        assertThat(msg,equalTo("\n"));
      break;
case 2:
    assertThat(msg,equalTo("tool help\n"));
  break;
case 3:
assertThat(msg,equalTo("\n"));
break;
default :
fail("written more than expected");
}
}
}
;
NamedCommand[] cmds=new NamedCommand[2];
cmds[0]=new NamedCommand("cmd0",terminal){
@Override public CliTool.ExitStatus execute(Settings settings,Environment env) throws Exception {
return CliTool.ExitStatus.OK;
}
}
;
cmds[1]=new NamedCommand("cmd1",terminal){
@Override public CliTool.ExitStatus execute(Settings settings,Environment env) throws Exception {
return CliTool.ExitStatus.OK;
}
}
;
MultiCmdTool tool=new MultiCmdTool("tool",terminal,cmds);
int status=tool.execute(args("-h"));
assertExecuted(status,CliTool.ExitStatus.OK,writeCounter,3);
}
