{
  final AtomicInteger counter=new AtomicInteger();
  final AtomicReference<String> promptedSecretValue=new AtomicReference<>(null);
  final AtomicReference<String> promptedTextValue=new AtomicReference<>(null);
  final Terminal terminal=new MockTerminal(){
    @Override public char[] readSecret(    String text,    Object... args){
      counter.incrementAndGet();
      assertThat(args,arrayContaining((Object)"foo.password"));
      return "changeit".toCharArray();
    }
    @Override public String readText(    String text,    Object... args){
      counter.incrementAndGet();
      assertThat(args,arrayContaining((Object)"replace"));
      return "replaced";
    }
  }
;
  final NamedCommand cmd=new NamedCommand("noop",terminal){
    @Override public CliTool.ExitStatus execute(    Settings settings,    Environment env){
      promptedSecretValue.set(settings.get("foo.password"));
      promptedTextValue.set(settings.get("replace"));
      return CliTool.ExitStatus.OK;
    }
  }
;
  System.setProperty("es.foo.password",InternalSettingsPreparer.SECRET_PROMPT_VALUE);
  System.setProperty("es.replace",InternalSettingsPreparer.TEXT_PROMPT_VALUE);
  try {
    new SingleCmdTool("tool",terminal,cmd).execute();
  }
  finally {
    System.clearProperty("es.foo.password");
    System.clearProperty("es.replace");
  }
  assertThat(counter.intValue(),is(2));
  assertThat(promptedSecretValue.get(),is("changeit"));
  assertThat(promptedTextValue.get(),is("replaced"));
}
