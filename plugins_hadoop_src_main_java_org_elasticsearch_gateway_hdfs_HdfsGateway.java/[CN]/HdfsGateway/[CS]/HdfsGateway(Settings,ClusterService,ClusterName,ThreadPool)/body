{
  super(settings,clusterService);
  this.closeFileSystem=componentSettings.getAsBoolean("close_fs",true);
  String uri=componentSettings.get("uri");
  if (uri == null) {
    throw new ElasticSearchIllegalArgumentException("hdfs gateway requires the 'uri' setting to be set");
  }
  String path=componentSettings.get("path");
  if (path == null) {
    throw new ElasticSearchIllegalArgumentException("hdfs gateway requires the 'path' path setting to be set");
  }
  Path hPath=new Path(new Path(path),clusterName.value());
  int concurrentStreams=componentSettings.getAsInt("concurrent_streams",5);
  this.concurrentStreamPool=DynamicExecutors.newScalingThreadPool(1,concurrentStreams,TimeValue.timeValueSeconds(5).millis(),EsExecutors.daemonThreadFactory(settings,"[s3_stream]"));
  logger.debug("Using uri [{}], path [{}], concurrent_streams [{}]",uri,hPath,concurrentStreams);
  Configuration conf=new Configuration();
  Settings hdfsSettings=settings.getByPrefix("hdfs.conf.");
  for (  Map.Entry<String,String> entry : hdfsSettings.getAsMap().entrySet()) {
    conf.set(entry.getKey(),entry.getValue());
  }
  fileSystem=FileSystem.get(URI.create(uri),conf);
  initialize(new HdfsBlobStore(settings,fileSystem,concurrentStreamPool,hPath),clusterName,null);
}
