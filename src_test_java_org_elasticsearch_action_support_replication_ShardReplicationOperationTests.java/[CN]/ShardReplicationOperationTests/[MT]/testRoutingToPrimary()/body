{
  final String index="test";
  final ShardId shardId=new ShardId(index,0);
  clusterService.setState(stateWithStartedPrimary(index,randomBoolean(),3));
  logger.debug("using state: \n{}",clusterService.state().prettyPrint());
  final IndexShardRoutingTable shardRoutingTable=clusterService.state().routingTable().index(index).shard(shardId.id());
  final String primaryNodeId=shardRoutingTable.primaryShard().currentNodeId();
  Request request=new Request(shardId);
  PlainActionFuture<Response> listener=new PlainActionFuture<>();
  TransportShardReplicationOperationAction<Request,Request,Response>.PrimaryPhase primaryPhase=action.new PrimaryPhase(request,listener);
  assertTrue(primaryPhase.checkBlocks());
  primaryPhase.routeRequestOrPerformLocally(shardRoutingTable.primaryShard(),shardRoutingTable.shardsIt());
  if (primaryNodeId.equals(clusterService.localNode().id())) {
    logger.info("--> primary is assigned locally, testing for execution");
    assertTrue("request failed to be processed on a local primary",request.processedOnPrimary.get());
  }
 else {
    logger.info("--> primary is assigned to [{}], checking request forwarded",primaryNodeId);
    final List<CapturingTransport.CapturedRequest> capturedRequests=transport.capturedRequestsByTargetNode().get(primaryNodeId);
    assertThat(capturedRequests,notNullValue());
    assertThat(capturedRequests.size(),equalTo(1));
    assertThat(capturedRequests.get(0).action,equalTo("testAction"));
  }
}
