{
  final String index="test";
  final ShardId shardId=new ShardId(index,0);
  clusterService.setState(state(index,true,ShardRoutingState.STARTED));
  logger.debug("--> using initial state:\n{}",clusterService.state().prettyPrint());
  Request request=new Request(shardId).timeout("100ms");
  PlainActionFuture<Response> listener=new PlainActionFuture<>();
  action=new ActionWithDelay(ImmutableSettings.EMPTY,"testActionWithExceptions",transportService,clusterService,threadPool);
  final TransportShardReplicationOperationAction<Request,Request,Response>.PrimaryPhase primaryPhase=action.new PrimaryPhase(request,listener);
  Thread t=new Thread(){
    public void run(){
      primaryPhase.run();
    }
  }
;
  t.start();
  awaitBusy(new Predicate<Object>(){
    @Override public boolean apply(    @Nullable Object input){
      return (count.get() == 2);
    }
  }
);
  assertIndexShardCounter(2);
  assertThat(transport.capturedRequests().length,equalTo(0));
  ((ActionWithDelay)action).countDownLatch.countDown();
  t.join();
  listener.get();
  assertIndexShardCounter(1);
  assertThat(transport.capturedRequests().length,equalTo(0));
}
