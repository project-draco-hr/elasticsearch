{
  AllocationService allocationService=new AllocationService(Settings.builder().build(),new AllocationDeciders(Settings.EMPTY,Collections.singleton(new MaxRetryAllocationDecider(Settings.EMPTY))),NoopGatewayAllocator.INSTANCE,new BalancedShardsAllocator(Settings.EMPTY),EmptyClusterInfoService.INSTANCE);
  ClusterState clusterState=createInitialClusterState(allocationService);
  ClusterRerouteRequest req=new ClusterRerouteRequest();
  req.dryRun(true);
  AtomicReference<ClusterRerouteResponse> responseRef=new AtomicReference<>();
  ActionListener<ClusterRerouteResponse> responseActionListener=new ActionListener<ClusterRerouteResponse>(){
    @Override public void onResponse(    ClusterRerouteResponse clusterRerouteResponse){
      responseRef.set(clusterRerouteResponse);
    }
    @Override public void onFailure(    Exception e){
    }
  }
;
  TransportClusterRerouteAction.ClusterRerouteResponseAckedClusterStateUpdateTask task=new TransportClusterRerouteAction.ClusterRerouteResponseAckedClusterStateUpdateTask(logger,allocationService,req,responseActionListener);
  ClusterState execute=task.execute(clusterState);
  assertSame(execute,clusterState);
  task.onAllNodesAcked(null);
  assertNotSame(responseRef.get().getState(),execute);
  req.dryRun(false);
  final int retries=MaxRetryAllocationDecider.SETTING_ALLOCATION_MAX_RETRY.get(Settings.EMPTY);
  for (int i=0; i < retries; i++) {
    ClusterState newState=task.execute(clusterState);
    assertNotSame(newState,clusterState);
    clusterState=newState;
    RoutingTable routingTable=clusterState.routingTable();
    assertEquals(routingTable.index("idx").shards().size(),1);
    assertEquals(routingTable.index("idx").shard(0).shards().get(0).state(),INITIALIZING);
    assertEquals(routingTable.index("idx").shard(0).shards().get(0).unassignedInfo().getNumFailedAllocations(),i);
    List<FailedRerouteAllocation.FailedShard> failedShards=Collections.singletonList(new FailedRerouteAllocation.FailedShard(routingTable.index("idx").shard(0).shards().get(0),"boom" + i,new UnsupportedOperationException()));
    newState=allocationService.applyFailedShards(clusterState,failedShards);
    assertThat(newState,not(equalTo(clusterState)));
    clusterState=newState;
    routingTable=clusterState.routingTable();
    assertEquals(routingTable.index("idx").shards().size(),1);
    if (i == retries - 1) {
      assertEquals(routingTable.index("idx").shard(0).shards().get(0).state(),UNASSIGNED);
    }
 else {
      assertEquals(routingTable.index("idx").shard(0).shards().get(0).state(),INITIALIZING);
    }
    assertEquals(routingTable.index("idx").shard(0).shards().get(0).unassignedInfo().getNumFailedAllocations(),i + 1);
  }
  ClusterState newState=task.execute(clusterState);
  assertNotSame(newState,clusterState);
  task.onAllNodesAcked(null);
  assertSame(responseRef.get().getState(),newState);
  RoutingTable routingTable=clusterState.routingTable();
  assertEquals(routingTable.index("idx").shards().size(),1);
  assertEquals(routingTable.index("idx").shard(0).shards().get(0).state(),UNASSIGNED);
  assertEquals(routingTable.index("idx").shard(0).shards().get(0).unassignedInfo().getNumFailedAllocations(),retries);
  req.setRetryFailed(true);
  newState=task.execute(clusterState);
  assertNotSame(newState,clusterState);
  clusterState=newState;
  routingTable=clusterState.routingTable();
  assertEquals(routingTable.index("idx").shards().size(),1);
  assertEquals(routingTable.index("idx").shard(0).shards().get(0).state(),INITIALIZING);
  assertEquals(routingTable.index("idx").shard(0).shards().get(0).unassignedInfo().getNumFailedAllocations(),retries);
}
