{
  settingName=Objects.requireNonNull(settingName);
  if (sValue == null) {
    return defaultValue;
  }
  long bytes;
  try {
    String lowerSValue=sValue.toLowerCase(Locale.ROOT).trim();
    if (lowerSValue.endsWith("k")) {
      bytes=(long)(Double.parseDouble(lowerSValue.substring(0,lowerSValue.length() - 1)) * ByteSizeUnit.C1);
    }
 else     if (lowerSValue.endsWith("kb")) {
      bytes=(long)(Double.parseDouble(lowerSValue.substring(0,lowerSValue.length() - 2)) * ByteSizeUnit.C1);
    }
 else     if (lowerSValue.endsWith("m")) {
      bytes=(long)(Double.parseDouble(lowerSValue.substring(0,lowerSValue.length() - 1)) * ByteSizeUnit.C2);
    }
 else     if (lowerSValue.endsWith("mb")) {
      bytes=(long)(Double.parseDouble(lowerSValue.substring(0,lowerSValue.length() - 2)) * ByteSizeUnit.C2);
    }
 else     if (lowerSValue.endsWith("g")) {
      bytes=(long)(Double.parseDouble(lowerSValue.substring(0,lowerSValue.length() - 1)) * ByteSizeUnit.C3);
    }
 else     if (lowerSValue.endsWith("gb")) {
      bytes=(long)(Double.parseDouble(lowerSValue.substring(0,lowerSValue.length() - 2)) * ByteSizeUnit.C3);
    }
 else     if (lowerSValue.endsWith("t")) {
      bytes=(long)(Double.parseDouble(lowerSValue.substring(0,lowerSValue.length() - 1)) * ByteSizeUnit.C4);
    }
 else     if (lowerSValue.endsWith("tb")) {
      bytes=(long)(Double.parseDouble(lowerSValue.substring(0,lowerSValue.length() - 2)) * ByteSizeUnit.C4);
    }
 else     if (lowerSValue.endsWith("p")) {
      bytes=(long)(Double.parseDouble(lowerSValue.substring(0,lowerSValue.length() - 1)) * ByteSizeUnit.C5);
    }
 else     if (lowerSValue.endsWith("pb")) {
      bytes=(long)(Double.parseDouble(lowerSValue.substring(0,lowerSValue.length() - 2)) * ByteSizeUnit.C5);
    }
 else     if (lowerSValue.endsWith("b")) {
      bytes=Long.parseLong(lowerSValue.substring(0,lowerSValue.length() - 1).trim());
    }
 else     if (lowerSValue.equals("-1")) {
      bytes=-1;
    }
 else     if (lowerSValue.equals("0")) {
      bytes=0;
    }
 else {
      throw new ElasticsearchParseException("failed to parse setting [{}] with value [{}] as a size in bytes: unit is missing or unrecognized",settingName,sValue);
    }
  }
 catch (  NumberFormatException e) {
    throw new ElasticsearchParseException("failed to parse [{}]",e,sValue);
  }
  return new ByteSizeValue(bytes,ByteSizeUnit.BYTES);
}
