{
  transportService.sendRequest(node,action,request,transportOptions,new BaseTransportResponseHandler<Response>(){
    @Override public Response newInstance(){
      return newResponseInstance();
    }
    @Override public String executor(){
      return ThreadPool.Names.SAME;
    }
    @Override public void handleResponse(    Response response){
      finishOnSuccess(response);
    }
    @Override public void handleException(    TransportException exp){
      try {
        if (exp.unwrapCause() instanceof ConnectTransportException || exp.unwrapCause() instanceof NodeClosedException || (isPrimaryAction && retryPrimaryException(exp.unwrapCause()))) {
          logger.trace("received an error from node [{}] for request [{}], scheduling a retry",exp,node.id(),request);
          retry(exp);
        }
 else {
          finishAsFailed(exp);
        }
      }
 catch (      Throwable t) {
        finishWithUnexpectedFailure(t);
      }
    }
  }
);
}
