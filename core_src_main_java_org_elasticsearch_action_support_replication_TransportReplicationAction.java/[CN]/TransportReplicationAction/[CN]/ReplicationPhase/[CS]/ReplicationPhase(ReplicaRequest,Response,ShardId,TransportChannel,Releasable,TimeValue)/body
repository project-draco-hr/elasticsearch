{
  this.replicaRequest=replicaRequest;
  this.channel=channel;
  this.finalResponse=finalResponse;
  this.indexShardReference=indexShardReference;
  this.shardFailedTimeout=shardFailedTimeout;
  this.shardId=shardId;
  final ClusterState state=clusterService.state();
  final IndexRoutingTable index=state.getRoutingTable().index(shardId.getIndex());
  final IndexShardRoutingTable shardRoutingTable=(index != null) ? index.shard(shardId.id()) : null;
  final IndexMetaData indexMetaData=state.getMetaData().index(shardId.getIndex());
  this.shards=(shardRoutingTable != null) ? shardRoutingTable.shards() : Collections.emptyList();
  this.executeOnReplica=(indexMetaData == null) || shouldExecuteReplication(indexMetaData.getSettings());
  this.indexUUID=(indexMetaData != null) ? indexMetaData.getIndexUUID() : null;
  this.nodes=state.getNodes();
  if (shards.isEmpty()) {
    logger.debug("replication phase for request [{}] on [{}] is skipped due to index deletion after primary operation",replicaRequest,shardId);
  }
  int numberOfIgnoredShardInstances=0;
  int numberOfPendingShardInstances=0;
  for (  ShardRouting shard : shards) {
    if (shard.primary() == false && executeOnReplica == false) {
      numberOfIgnoredShardInstances++;
    }
 else     if (shard.unassigned()) {
      numberOfIgnoredShardInstances++;
    }
 else {
      if (shard.currentNodeId().equals(nodes.localNodeId()) == false) {
        numberOfPendingShardInstances++;
      }
      if (shard.relocating()) {
        numberOfPendingShardInstances++;
      }
    }
  }
  this.totalShards=1 + numberOfPendingShardInstances + numberOfIgnoredShardInstances;
  this.pending=new AtomicInteger(numberOfPendingShardInstances);
  if (logger.isTraceEnabled()) {
    logger.trace("replication phase started. pending [{}], action [{}], request [{}], cluster state version used [{}]",pending.get(),transportReplicaAction,replicaRequest,state.version());
  }
}
