{
  List<NodeTuple> nodeValue=(List<NodeTuple>)node.getValue();
  for (  NodeTuple tuple : nodeValue) {
    Node keyNode=tuple.getKeyNode();
    Node valueNode=tuple.getValueNode();
    Object key=constructObject(keyNode);
    if (key != null) {
      try {
        key.hashCode();
      }
 catch (      Exception e) {
        throw new ConstructorException("while constructing a mapping",node.getStartMark(),"found unacceptable key " + key,tuple.getKeyNode().getStartMark(),e);
      }
    }
    Object value=constructObject(valueNode);
    if (keyNode.isTwoStepsConstruction()) {
      maps2fill.add(0,new RecursiveTuple<Map<Object,Object>,RecursiveTuple<Object,Object>>(mapping,new RecursiveTuple<Object,Object>(key,value)));
    }
 else {
      mapping.put(key,value);
    }
  }
}
