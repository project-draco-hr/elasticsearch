{
  XContentParser parser=parseContext.parser();
  boolean cache=true;
  CacheKeyFilter.Key cacheKey=null;
  String fieldName=null;
  String secondaryFieldName=null;
  Object value=null;
  Object secondaryValue=null;
  int flagsValue=-1;
  String filterName=null;
  String currentFieldName=null;
  int maxDeterminizedStates=Operations.DEFAULT_MAX_DETERMINIZED_STATES;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      fieldName=currentFieldName;
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          currentFieldName=parser.currentName();
        }
 else {
          if ("value".equals(currentFieldName)) {
            value=parser.objectBytes();
          }
 else           if ("flags".equals(currentFieldName)) {
            String flags=parser.textOrNull();
            flagsValue=RegexpFlag.resolveValue(flags);
          }
 else           if ("max_determinized_states".equals(currentFieldName)) {
            maxDeterminizedStates=parser.intValue();
          }
 else           if ("flags_value".equals(currentFieldName)) {
            flagsValue=parser.intValue();
          }
 else {
            throw new QueryParsingException(parseContext.index(),"[regexp] filter does not support [" + currentFieldName + "]");
          }
        }
      }
    }
 else {
      if ("_name".equals(currentFieldName)) {
        filterName=parser.text();
      }
 else       if ("_cache".equals(currentFieldName)) {
        cache=parser.booleanValue();
      }
 else       if ("_cache_key".equals(currentFieldName) || "_cacheKey".equals(currentFieldName)) {
        cacheKey=new CacheKeyFilter.Key(parser.text());
      }
 else {
        secondaryFieldName=currentFieldName;
        secondaryValue=parser.objectBytes();
      }
    }
  }
  if (fieldName == null) {
    fieldName=secondaryFieldName;
    value=secondaryValue;
  }
  if (value == null) {
    throw new QueryParsingException(parseContext.index(),"No value specified for regexp filter");
  }
  Filter filter=null;
  MapperService.SmartNameFieldMappers smartNameFieldMappers=parseContext.smartFieldMappers(fieldName);
  if (smartNameFieldMappers != null && smartNameFieldMappers.hasMapper()) {
    if (smartNameFieldMappers.explicitTypeInNameWithDocMapper()) {
      String[] previousTypes=QueryParseContext.setTypesWithPrevious(new String[]{smartNameFieldMappers.docMapper().type()});
      try {
        filter=smartNameFieldMappers.mapper().regexpFilter(value,flagsValue,maxDeterminizedStates,parseContext);
      }
  finally {
        QueryParseContext.setTypes(previousTypes);
      }
    }
 else {
      filter=smartNameFieldMappers.mapper().regexpFilter(value,flagsValue,maxDeterminizedStates,parseContext);
    }
  }
  if (filter == null) {
    filter=new RegexpFilter(new Term(fieldName,BytesRefs.toBytesRef(value)),flagsValue,maxDeterminizedStates);
  }
  if (cache) {
    filter=parseContext.cacheFilter(filter,cacheKey);
  }
  filter=wrapSmartNameFilter(filter,smartNameFieldMappers,parseContext);
  if (filterName != null) {
    parseContext.addNamedFilter(filterName,filter);
  }
  return filter;
}
