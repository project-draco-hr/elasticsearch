{
  internalCluster().startNodesAsync(2,settingsBuilder().put("gateway.recover_after_nodes",2).build()).get();
  client().prepareIndex("test","type1","1").setSource(jsonBuilder().startObject().field("field","value1").endObject()).execute().actionGet();
  client().admin().indices().prepareFlush().execute().actionGet();
  client().prepareIndex("test","type1","2").setSource(jsonBuilder().startObject().field("field","value2").endObject()).execute().actionGet();
  client().admin().indices().prepareRefresh().execute().actionGet();
  logger.info("--> running cluster_health (wait for the shards to startup)");
  ensureGreen();
  for (int i=0; i < 10; i++) {
    assertHitCount(client().prepareCount().setQuery(matchAllQuery()).execute().actionGet(),2);
  }
  String metaDataUuid=client().admin().cluster().prepareState().execute().get().getState().getMetaData().uuid();
  assertThat(metaDataUuid,not(equalTo("_na_")));
  logger.info("--> closing first node, and indexing more data to the second node");
  internalCluster().fullRestart(new RestartCallback(){
    @Override public void doAfterNodes(    int numNodes,    Client client) throws Exception {
      if (numNodes == 1) {
        logger.info("--> one node is closed - start indexing data into the second one");
        client.prepareIndex("test","type1","3").setSource(jsonBuilder().startObject().field("field","value3").endObject()).execute().actionGet();
        client.admin().indices().prepareRefresh().execute().actionGet();
        for (int i=0; i < 10; i++) {
          assertHitCount(client.prepareCount().setQuery(matchAllQuery()).execute().actionGet(),3);
        }
        logger.info("--> add some metadata, additional type and template");
        client.admin().indices().preparePutMapping("test").setType("type2").setSource(jsonBuilder().startObject().startObject("type2").startObject("_source").field("enabled",false).endObject().endObject().endObject()).execute().actionGet();
        client.admin().indices().preparePutTemplate("template_1").setTemplate("te*").setOrder(0).addMapping("type1",XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("field1").field("type","string").field("store","yes").endObject().startObject("field2").field("type","string").field("store","yes").field("index","not_analyzed").endObject().endObject().endObject().endObject()).execute().actionGet();
        client.admin().indices().prepareAliases().addAlias("test","test_alias",FilterBuilders.termFilter("field","value")).execute().actionGet();
        logger.info("--> starting two nodes back, verifying we got the latest version");
      }
    }
  }
);
  logger.info("--> running cluster_health (wait for the shards to startup)");
  ensureGreen();
  assertThat(client().admin().cluster().prepareState().execute().get().getState().getMetaData().uuid(),equalTo(metaDataUuid));
  for (int i=0; i < 10; i++) {
    assertHitCount(client().prepareCount().setQuery(matchAllQuery()).execute().actionGet(),3);
  }
  ClusterState state=client().admin().cluster().prepareState().execute().actionGet().getState();
  assertThat(state.metaData().index("test").mapping("type2"),notNullValue());
  assertThat(state.metaData().templates().get("template_1").template(),equalTo("te*"));
  assertThat(state.metaData().index("test").aliases().get("test_alias"),notNullValue());
  assertThat(state.metaData().index("test").aliases().get("test_alias").filter(),notNullValue());
}
