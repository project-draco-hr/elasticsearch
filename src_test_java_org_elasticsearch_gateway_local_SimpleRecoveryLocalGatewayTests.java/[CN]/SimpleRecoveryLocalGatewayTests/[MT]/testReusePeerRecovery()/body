{
  ImmutableSettings.Builder settings=settingsBuilder().put("action.admin.cluster.node.shutdown.delay","10ms").put("gateway.recover_after_nodes",4).put(MockDirectoryHelper.CRASH_INDEX,false).put(BalancedShardsAllocator.SETTING_THRESHOLD,1.1f);
  cluster().startNodesAsync(4,settings.build()).get();
  logger.info("--> indexing docs");
  for (int i=0; i < 1000; i++) {
    client().prepareIndex("test","type").setSource("field","value").execute().actionGet();
    if ((i % 200) == 0) {
      client().admin().indices().prepareFlush().execute().actionGet();
    }
  }
  client().admin().indices().prepareFlush().execute().actionGet();
  logger.info("Running Cluster Health");
  ensureGreen();
  logger.info("--> shutting down the nodes");
  client().admin().cluster().prepareUpdateSettings().setTransientSettings(settingsBuilder().put(DisableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_DISABLE_ALLOCATION,true)).execute().actionGet();
  cluster().fullRestart();
  logger.info("Running Cluster Health");
  ensureGreen();
  logger.info("--> shutting down the nodes");
  client().admin().cluster().prepareUpdateSettings().setTransientSettings(settingsBuilder().put(DisableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_DISABLE_ALLOCATION,true)).execute().actionGet();
  cluster().fullRestart();
  logger.info("Running Cluster Health");
  ensureGreen();
  RecoveryResponse recoveryResponse=client().admin().indices().prepareRecoveries("test").get();
  for (  ShardRecoveryResponse response : recoveryResponse.shardResponses().get("test")) {
    RecoveryState recoveryState=response.recoveryState();
    if (!recoveryState.getPrimary()) {
      logger.info("--> shard {}, recovered {}, reuse {}",response.getShardId(),recoveryState.getIndex().recoveredTotalSize(),recoveryState.getIndex().reusedByteCount());
      assertThat(recoveryState.getIndex().recoveredByteCount(),greaterThan(0l));
      assertThat(recoveryState.getIndex().reusedByteCount(),greaterThan(0l));
      assertThat(recoveryState.getIndex().reusedByteCount(),greaterThan(recoveryState.getIndex().numberOfRecoveredBytes()));
    }
  }
}
