{
  if (!enabled) {
    return allocation.decision(Decision.YES,NAME,"disk threshold decider disabled");
  }
  if (allocation.nodes().size() <= 1) {
    if (logger.isTraceEnabled()) {
      logger.trace("Only a single node is present, allowing allocation");
    }
    return allocation.decision(Decision.YES,NAME,"only a single node is present");
  }
  ClusterInfo clusterInfo=allocation.clusterInfo();
  if (clusterInfo == null) {
    if (logger.isTraceEnabled()) {
      logger.trace("Cluster info unavailable for disk threshold decider, allowing allocation.");
    }
    return allocation.decision(Decision.YES,NAME,"cluster info unavailable");
  }
  Map<String,DiskUsage> usages=clusterInfo.getNodeDiskUsages();
  Map<String,Long> shardSizes=clusterInfo.getShardSizes();
  if (usages.isEmpty()) {
    if (logger.isTraceEnabled()) {
      logger.trace("Unable to determine disk usages for disk-aware allocation, allowing allocation");
    }
    return allocation.decision(Decision.YES,NAME,"disk usages unavailable");
  }
  DiskUsage usage=usages.get(node.nodeId());
  if (usage == null) {
    usage=averageUsage(node,usages);
    if (logger.isDebugEnabled()) {
      logger.debug("Unable to determine disk usage for [{}], defaulting to average across nodes [{} total] [{} free] [{}% free]",node.nodeId(),usage.getTotalBytes(),usage.getFreeBytes(),usage.getFreeDiskAsPercentage());
    }
  }
  double freeDiskPercentage=usage.getFreeDiskAsPercentage();
  long freeBytes=usage.getFreeBytes();
  if (logger.isDebugEnabled()) {
    logger.debug("Node [{}] has {}% free disk",node.nodeId(),freeDiskPercentage);
  }
  boolean primaryHasBeenAllocated=allocation.routingTable().index(shardRouting.index()).shard(shardRouting.id()).primaryAllocatedPostApi();
  if (freeBytes < freeBytesThresholdLow.bytes()) {
    if (!shardRouting.primary() || (shardRouting.primary() && primaryHasBeenAllocated)) {
      if (logger.isDebugEnabled()) {
        logger.debug("Less than the required {} free bytes threshold ({} bytes free) on node {}, preventing allocation",freeBytesThresholdLow,freeBytes,node.nodeId());
      }
      return allocation.decision(Decision.NO,NAME,"less than required [%s] free on node, free: [%s]",freeBytesThresholdLow,new ByteSizeValue(freeBytes));
    }
 else     if (freeBytes > freeBytesThresholdHigh.bytes()) {
      if (logger.isDebugEnabled()) {
        logger.debug("Less than the required {} free bytes threshold ({} bytes free) on node {}, " + "but allowing allocation because primary has never been allocated",freeBytesThresholdLow,freeBytes,node.nodeId());
      }
      return allocation.decision(Decision.YES,NAME,"primary has never been allocated before");
    }
 else {
      if (logger.isDebugEnabled()) {
        logger.debug("Less than the required {} free bytes threshold ({} bytes free) on node {}, " + "preventing allocation even though primary has never been allocated",freeBytesThresholdHigh,freeBytes,node.nodeId());
      }
      return allocation.decision(Decision.NO,NAME,"less than required [%s] free on node, free: [%s]",freeBytesThresholdHigh,new ByteSizeValue(freeBytes));
    }
  }
  if (freeDiskPercentage < freeDiskThresholdLow) {
    if (!shardRouting.primary() || (shardRouting.primary() && primaryHasBeenAllocated)) {
      if (logger.isDebugEnabled()) {
        logger.debug("Less than the required {}% free disk threshold ({}% free) on node [{}], preventing allocation",freeDiskThresholdLow,freeDiskPercentage,node.nodeId());
      }
      return allocation.decision(Decision.NO,NAME,"less than required [%s%%] free disk on node, free: [%s%%]",freeDiskThresholdLow,freeDiskThresholdLow);
    }
 else     if (freeDiskPercentage > freeDiskThresholdHigh) {
      if (logger.isDebugEnabled()) {
        logger.debug("Less than the required {}% free disk threshold ({}% free) on node [{}], " + "but allowing allocation because primary has never been allocated",freeDiskThresholdLow,freeDiskPercentage,node.nodeId());
      }
      return allocation.decision(Decision.YES,NAME,"primary has never been allocated before");
    }
 else {
      if (logger.isDebugEnabled()) {
        logger.debug("Less than the required {} free bytes threshold ({} bytes free) on node {}, " + "preventing allocation even though primary has never been allocated",freeDiskThresholdHigh,freeDiskPercentage,node.nodeId());
      }
      return allocation.decision(Decision.NO,NAME,"less than required [%s%%] free disk on node, free: [%s%%]",freeDiskThresholdLow,freeDiskThresholdLow);
    }
  }
  Long shardSize=shardSizes.get(shardIdentifierFromRouting(shardRouting));
  shardSize=shardSize == null ? 0 : shardSize;
  double freeSpaceAfterShard=this.freeDiskPercentageAfterShardAssigned(usage,shardSize);
  long freeBytesAfterShard=freeBytes - shardSize;
  if (freeBytesAfterShard < freeBytesThresholdHigh.bytes()) {
    logger.warn("After allocating, node [{}] would have less than the required {} free bytes threshold ({} bytes free), preventing allocation",node.nodeId(),freeBytesThresholdHigh,freeBytesAfterShard);
    return allocation.decision(Decision.NO,NAME,"after allocation less than required [%s] free on node, free: [%s]",freeBytesThresholdLow,new ByteSizeValue(freeBytesAfterShard));
  }
  if (freeSpaceAfterShard < freeDiskThresholdHigh) {
    logger.warn("After allocating, node [{}] would have less than the required {}% free disk threshold ({}% free), preventing allocation",node.nodeId(),freeDiskThresholdHigh,freeSpaceAfterShard);
    return allocation.decision(Decision.NO,NAME,"after allocation less than required [%s%%] free disk on node, free: [%s%%]",freeDiskThresholdLow,freeSpaceAfterShard);
  }
  return allocation.decision(Decision.YES,NAME,"enough disk for shard on node, free: [%s]",new ByteSizeValue(freeBytes));
}
