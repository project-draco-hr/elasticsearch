{
  ArgumentCaptor<HttpAsyncRequestProducer> requestArgumentCaptor=ArgumentCaptor.forClass(HttpAsyncRequestProducer.class);
  int times=0;
  for (  String httpMethod : getHttpMethods()) {
    HttpUriRequest expectedRequest=performRandomRequest(httpMethod);
    verify(httpClient,times(++times)).<HttpResponse>execute(requestArgumentCaptor.capture(),any(HttpAsyncResponseConsumer.class),any(FutureCallback.class));
    HttpUriRequest actualRequest=(HttpUriRequest)requestArgumentCaptor.getValue().generateRequest();
    assertEquals(expectedRequest.getURI(),actualRequest.getURI());
    assertEquals(expectedRequest.getClass(),actualRequest.getClass());
    assertArrayEquals(expectedRequest.getAllHeaders(),actualRequest.getAllHeaders());
    if (expectedRequest instanceof HttpEntityEnclosingRequest) {
      HttpEntity expectedEntity=((HttpEntityEnclosingRequest)expectedRequest).getEntity();
      if (expectedEntity != null) {
        HttpEntity actualEntity=((HttpEntityEnclosingRequest)actualRequest).getEntity();
        assertEquals(EntityUtils.toString(expectedEntity),EntityUtils.toString(actualEntity));
      }
    }
  }
}
