{
  httpClient=mock(CloseableHttpAsyncClient.class);
  when(httpClient.<HttpResponse>execute(any(HttpAsyncRequestProducer.class),any(HttpAsyncResponseConsumer.class),any(FutureCallback.class))).thenAnswer(new Answer<Future<HttpResponse>>(){
    @Override public Future<HttpResponse> answer(    InvocationOnMock invocationOnMock) throws Throwable {
      HttpAsyncRequestProducer requestProducer=(HttpAsyncRequestProducer)invocationOnMock.getArguments()[0];
      FutureCallback<HttpResponse> futureCallback=(FutureCallback<HttpResponse>)invocationOnMock.getArguments()[2];
      HttpUriRequest request=(HttpUriRequest)requestProducer.generateRequest();
      if (request.getURI().getPath().equals("/soe")) {
        futureCallback.failed(new SocketTimeoutException());
      }
 else       if (request.getURI().getPath().equals("/coe")) {
        futureCallback.failed(new ConnectTimeoutException());
      }
 else {
        int statusCode=Integer.parseInt(request.getURI().getPath().substring(1));
        StatusLine statusLine=new BasicStatusLine(new ProtocolVersion("http",1,1),statusCode,"");
        HttpResponse httpResponse=new BasicHttpResponse(statusLine);
        if (request instanceof HttpEntityEnclosingRequest) {
          HttpEntity entity=((HttpEntityEnclosingRequest)request).getEntity();
          if (entity != null) {
            assertTrue("the entity is not repeatable, cannot set it to the response directly",entity.isRepeatable());
            httpResponse.setEntity(entity);
          }
        }
        httpResponse.setHeaders(request.getAllHeaders());
        futureCallback.completed(httpResponse);
      }
      return null;
    }
  }
);
  int numHeaders=randomIntBetween(0,3);
  defaultHeaders=generateHeaders("Header-default","Header-array",numHeaders);
  httpHost=new HttpHost("localhost",9200);
  failureListener=new HostsTrackingFailureListener();
  restClient=new RestClient(httpClient,10000,defaultHeaders,new HttpHost[]{httpHost},null,failureListener);
}
