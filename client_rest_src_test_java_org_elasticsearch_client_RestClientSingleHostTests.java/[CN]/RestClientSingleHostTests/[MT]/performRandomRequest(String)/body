{
  String uriAsString="/" + randomStatusCode(getRandom());
  URIBuilder uriBuilder=new URIBuilder(uriAsString);
  Map<String,String> params=Collections.emptyMap();
  boolean hasParams=randomBoolean();
  if (hasParams) {
    int numParams=RandomInts.randomIntBetween(getRandom(),1,3);
    params=new HashMap<>(numParams);
    for (int i=0; i < numParams; i++) {
      String paramKey="param-" + i;
      String paramValue=RandomStrings.randomAsciiOfLengthBetween(getRandom(),3,10);
      params.put(paramKey,paramValue);
      uriBuilder.addParameter(paramKey,paramValue);
    }
  }
  URI uri=uriBuilder.build();
  HttpUriRequest request;
switch (method) {
case "DELETE":
    request=new HttpDeleteWithEntity(uri);
  break;
case "GET":
request=new HttpGetWithEntity(uri);
break;
case "HEAD":
request=new HttpHead(uri);
break;
case "OPTIONS":
request=new HttpOptions(uri);
break;
case "PATCH":
request=new HttpPatch(uri);
break;
case "POST":
request=new HttpPost(uri);
break;
case "PUT":
request=new HttpPut(uri);
break;
case "TRACE":
request=new HttpTrace(uri);
break;
default :
throw new UnsupportedOperationException("method not supported: " + method);
}
HttpEntity entity=null;
boolean hasBody=request instanceof HttpEntityEnclosingRequest && getRandom().nextBoolean();
if (hasBody) {
entity=new StringEntity(RandomStrings.randomAsciiOfLengthBetween(getRandom(),10,100));
((HttpEntityEnclosingRequest)request).setEntity(entity);
}
Header[] headers=new Header[0];
for (Header defaultHeader : defaultHeaders) {
request.setHeader(defaultHeader);
}
if (getRandom().nextBoolean()) {
int numHeaders=RandomInts.randomIntBetween(getRandom(),1,5);
headers=new Header[numHeaders];
for (int i=0; i < numHeaders; i++) {
String headerName="Header" + (getRandom().nextBoolean() ? i : "");
String headerValue=RandomStrings.randomAsciiOfLengthBetween(getRandom(),3,10);
BasicHeader basicHeader=new BasicHeader(headerName,headerValue);
headers[i]=basicHeader;
request.setHeader(basicHeader);
}
}
try {
if (hasParams == false && hasBody == false && randomBoolean()) {
restClient.performRequest(method,uriAsString,headers);
}
 else if (hasBody == false && randomBoolean()) {
restClient.performRequest(method,uriAsString,params,headers);
}
 else {
restClient.performRequest(method,uriAsString,params,entity,headers);
}
}
 catch (ResponseException e) {
}
return request;
}
