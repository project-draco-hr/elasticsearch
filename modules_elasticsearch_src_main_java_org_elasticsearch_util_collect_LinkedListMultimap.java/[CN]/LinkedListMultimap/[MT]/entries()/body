{
  Collection<Entry<K,V>> result=entries;
  if (result == null) {
    entries=result=new AbstractCollection<Entry<K,V>>(){
      @Override public int size(){
        return keyCount.size();
      }
      @Override public Iterator<Entry<K,V>> iterator(){
        final Iterator<Node<K,V>> nodes=new NodeIterator();
        return new Iterator<Entry<K,V>>(){
          public boolean hasNext(){
            return nodes.hasNext();
          }
          public Entry<K,V> next(){
            final Node<K,V> node=nodes.next();
            return new AbstractMapEntry<K,V>(){
              @Override public K getKey(){
                return node.key;
              }
              @Override public V getValue(){
                return node.value;
              }
              @Override public V setValue(              V value){
                V oldValue=node.value;
                node.value=value;
                return oldValue;
              }
            }
;
          }
          public void remove(){
            nodes.remove();
          }
        }
;
      }
    }
;
  }
  return result;
}
