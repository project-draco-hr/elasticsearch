{
  Node<K,V> node=new Node<K,V>(key,value);
  if (head == null) {
    head=tail=node;
    keyToKeyHead.put(key,node);
    keyToKeyTail.put(key,node);
  }
 else   if (nextSibling == null) {
    tail.next=node;
    node.previous=tail;
    Node<K,V> keyTail=keyToKeyTail.get(key);
    if (keyTail == null) {
      keyToKeyHead.put(key,node);
    }
 else {
      keyTail.nextSibling=node;
      node.previousSibling=keyTail;
    }
    keyToKeyTail.put(key,node);
    tail=node;
  }
 else {
    node.previous=nextSibling.previous;
    node.previousSibling=nextSibling.previousSibling;
    node.next=nextSibling;
    node.nextSibling=nextSibling;
    if (nextSibling.previousSibling == null) {
      keyToKeyHead.put(key,node);
    }
 else {
      nextSibling.previousSibling.nextSibling=node;
    }
    if (nextSibling.previous == null) {
      head=node;
    }
 else {
      nextSibling.previous.next=node;
    }
    nextSibling.previous=node;
    nextSibling.previousSibling=node;
  }
  keyCount.add(key);
  return node;
}
