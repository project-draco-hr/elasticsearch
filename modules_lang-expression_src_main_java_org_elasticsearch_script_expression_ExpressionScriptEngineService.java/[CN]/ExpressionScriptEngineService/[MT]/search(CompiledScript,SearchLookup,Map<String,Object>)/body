{
  Expression expr=(Expression)compiledScript.compiled();
  MapperService mapper=lookup.doc().mapperService();
  SimpleBindings bindings=new SimpleBindings();
  ReplaceableConstValueSource specialValue=null;
  for (  String variable : expr.variables) {
    try {
      if (variable.equals("_score")) {
        bindings.add(new SortField("_score",SortField.Type.SCORE));
      }
 else       if (variable.equals("_value")) {
        specialValue=new ReplaceableConstValueSource();
        bindings.add("_value",specialValue);
      }
 else       if (vars != null && vars.containsKey(variable)) {
        Object value=vars.get(variable);
        if (value instanceof Number) {
          bindings.add(variable,new DoubleConstValueSource(((Number)value).doubleValue()));
        }
 else {
          throw new ParseException("Parameter [" + variable + "] must be a numeric type",0);
        }
      }
 else {
        String fieldname=null;
        String methodname=null;
        String variablename="value";
        VariableContext[] parts=VariableContext.parse(variable);
        if (parts[0].text.equals("doc") == false) {
          throw new ParseException("Unknown variable [" + parts[0].text + "]",0);
        }
        if (parts.length < 2 || parts[1].type != VariableContext.Type.STR_INDEX) {
          throw new ParseException("Variable 'doc' must be used with a specific field like: doc['myfield']",3);
        }
 else {
          fieldname=parts[1].text;
        }
        if (parts.length == 3) {
          if (parts[2].type == VariableContext.Type.METHOD) {
            methodname=parts[2].text;
          }
 else           if (parts[2].type == VariableContext.Type.MEMBER) {
            variablename=parts[2].text;
          }
 else {
            throw new IllegalArgumentException("Only member variables or member methods may be accessed on a field when not accessing the field directly");
          }
        }
        if (parts.length > 3) {
          throw new IllegalArgumentException("Variable [" + variable + "] does not follow an allowed format of either doc['field'] or doc['field'].method()");
        }
        MappedFieldType fieldType=mapper.fullName(fieldname);
        if (fieldType == null) {
          throw new ParseException("Field [" + fieldname + "] does not exist in mappings",5);
        }
        IndexFieldData<?> fieldData=lookup.doc().fieldDataService().getForField(fieldType);
        final ValueSource valueSource;
        if (fieldType instanceof BaseGeoPointFieldMapper.GeoPointFieldType) {
          if (methodname == null) {
            valueSource=GeoField.getVariable(fieldData,fieldname,variablename);
          }
 else {
            valueSource=GeoField.getMethod(fieldData,fieldname,methodname);
          }
        }
 else         if (fieldType instanceof LegacyDateFieldMapper.DateFieldType || fieldType instanceof DateFieldMapper.DateFieldType) {
          if (methodname == null) {
            valueSource=DateField.getVariable(fieldData,fieldname,variablename);
          }
 else {
            valueSource=DateField.getMethod(fieldData,fieldname,methodname);
          }
        }
 else         if (fieldData instanceof IndexNumericFieldData) {
          if (methodname == null) {
            valueSource=NumericField.getVariable(fieldData,fieldname,variablename);
          }
 else {
            valueSource=NumericField.getMethod(fieldData,fieldname,methodname);
          }
        }
 else {
          throw new ParseException("Field [" + fieldname + "] must be numeric, date, or geopoint",5);
        }
        bindings.add(variable,valueSource);
      }
    }
 catch (    Exception e) {
      throw convertToScriptException("link error",expr.sourceText,variable,e);
    }
  }
  final boolean needsScores=expr.getSortField(bindings,false).needsScores();
  return new ExpressionSearchScript(compiledScript,bindings,specialValue,needsScores);
}
