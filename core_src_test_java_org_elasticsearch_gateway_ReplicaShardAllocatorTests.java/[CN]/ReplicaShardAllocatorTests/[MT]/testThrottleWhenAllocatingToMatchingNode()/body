{
  RoutingAllocation allocation=onePrimaryOnNode1And1Replica(new AllocationDeciders(Settings.EMPTY,new AllocationDecider[]{new TestAllocateDecision(Decision.YES),new SameShardAllocationDecider(Settings.EMPTY),new AllocationDecider(Settings.EMPTY){
    @Override public Decision canAllocate(    ShardRouting shardRouting,    RoutingNode node,    RoutingAllocation allocation){
      if (node.node().equals(node2)) {
        return Decision.THROTTLE;
      }
      return Decision.YES;
    }
  }
}));
  testAllocator.addData(node1,"MATCH",new StoreFileMetaData("file1",10,"MATCH_CHECKSUM")).addData(node2,"MATCH",new StoreFileMetaData("file1",10,"MATCH_CHECKSUM"));
  testAllocator.allocateUnassigned(allocation);
  assertThat(allocation.routingNodes().unassigned().ignored().size(),equalTo(1));
  assertThat(allocation.routingNodes().unassigned().ignored().get(0).shardId(),equalTo(shardId));
}
