{
  RoutingAllocation allocation=onePrimaryOnNode1And1Replica(yesAllocationDeciders(),Settings.builder().put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey(),TimeValue.timeValueHours(1)).build(),UnassignedInfo.Reason.NODE_LEFT);
  testAllocator.addData(node1,"MATCH",new StoreFileMetaData("file1",10,"MATCH_CHECKSUM"));
  if (randomBoolean()) {
    testAllocator.addData(node2,null);
  }
  testAllocator.allocateUnassigned(allocation);
  assertThat(allocation.routingNodesChanged(),equalTo(false));
  assertThat(allocation.routingNodes().unassigned().ignored().size(),equalTo(1));
  assertThat(allocation.routingNodes().unassigned().ignored().get(0).shardId(),equalTo(shardId));
  allocation=onePrimaryOnNode1And1Replica(yesAllocationDeciders(),Settings.builder().put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING.getKey(),TimeValue.timeValueHours(1)).build(),UnassignedInfo.Reason.NODE_LEFT);
  testAllocator.addData(node2,"MATCH",new StoreFileMetaData("file1",10,"MATCH_CHECKSUM"));
  testAllocator.allocateUnassigned(allocation);
  assertThat(allocation.routingNodesChanged(),equalTo(true));
  assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(),equalTo(1));
  assertThat(allocation.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).get(0).currentNodeId(),equalTo(node2.getId()));
}
