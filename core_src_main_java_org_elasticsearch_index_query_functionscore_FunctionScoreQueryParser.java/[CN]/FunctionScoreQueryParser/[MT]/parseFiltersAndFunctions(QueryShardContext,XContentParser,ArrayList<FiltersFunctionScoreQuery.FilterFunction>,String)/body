{
  QueryParseContext parseContext=context.parseContext();
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
    Query filter=null;
    ScoreFunction scoreFunction=null;
    Float functionWeight=null;
    if (token != XContentParser.Token.START_OBJECT) {
      throw new ParsingException(parser.getTokenLocation(),"failed to parse [{}]. malformed query, expected a [{}] while parsing functions but got a [{}] instead",XContentParser.Token.START_OBJECT,token,NAME);
    }
 else {
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          currentFieldName=parser.currentName();
        }
 else         if (parseContext.parseFieldMatcher().match(currentFieldName,WEIGHT_FIELD)) {
          functionWeight=parser.floatValue();
        }
 else {
          if ("filter".equals(currentFieldName)) {
            filter=parseContext.parseInnerFilter();
          }
 else {
            ScoreFunctionParser functionParser=functionParserMapper.get(parser.getTokenLocation(),currentFieldName);
            scoreFunction=functionParser.parse(context,parser);
          }
        }
      }
      if (functionWeight != null) {
        scoreFunction=new WeightFactorFunction(functionWeight,scoreFunction);
      }
    }
    if (filter == null) {
      filter=Queries.newMatchAllQuery();
    }
    if (scoreFunction == null) {
      throw new ElasticsearchParseException("failed to parse [{}] query. an entry in functions list is missing a function.",NAME);
    }
    filterFunctions.add(new FiltersFunctionScoreQuery.FilterFunction(filter,scoreFunction));
  }
  return currentFieldName;
}
