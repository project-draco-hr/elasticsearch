{
  XContentParser parser=parseContext.parser();
  QueryBuilder query=null;
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  String queryName=null;
  FiltersFunctionScoreQuery.ScoreMode scoreMode=FunctionScoreQueryBuilder.DEFAULT_SCORE_MODE;
  float maxBoost=FunctionScoreQuery.DEFAULT_MAX_BOOST;
  Float minScore=null;
  String currentFieldName=null;
  XContentParser.Token token;
  CombineFunction combineFunction=null;
  boolean functionArrayFound=false;
  boolean singleFunctionFound=false;
  String singleFunctionName=null;
  List<FunctionScoreQueryBuilder.FilterFunctionBuilder> filterFunctionBuilders=new ArrayList<>();
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("query".equals(currentFieldName)) {
        if (query != null) {
          throw new ParsingException(parser.getTokenLocation(),"failed to parse [{}] query. [query] is already defined.",FunctionScoreQueryBuilder.NAME);
        }
        query=parseContext.parseInnerQueryBuilder();
      }
 else {
        if (singleFunctionFound) {
          throw new ParsingException(parser.getTokenLocation(),"failed to parse [{}] query. already found function [{}], now encountering [{}]. use [functions] array if you want to define several functions.",FunctionScoreQueryBuilder.NAME,singleFunctionName,currentFieldName);
        }
        if (functionArrayFound) {
          String errorString="already found [functions] array, now encountering [" + currentFieldName + "].";
          handleMisplacedFunctionsDeclaration(parser.getTokenLocation(),errorString);
        }
        singleFunctionFound=true;
        singleFunctionName=currentFieldName;
        ScoreFunctionBuilder<?> scoreFunction=functionParserMapper.get(parser.getTokenLocation(),currentFieldName).fromXContent(parseContext,parser);
        filterFunctionBuilders.add(new FunctionScoreQueryBuilder.FilterFunctionBuilder(scoreFunction));
      }
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if ("functions".equals(currentFieldName)) {
        if (singleFunctionFound) {
          String errorString="already found [" + singleFunctionName + "], now encountering [functions].";
          handleMisplacedFunctionsDeclaration(parser.getTokenLocation(),errorString);
        }
        functionArrayFound=true;
        currentFieldName=parseFiltersAndFunctions(parseContext,parser,filterFunctionBuilders);
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"failed to parse [{}] query. array [{}] is not supported",FunctionScoreQueryBuilder.NAME,currentFieldName);
      }
    }
 else     if (token.isValue()) {
      if ("score_mode".equals(currentFieldName) || "scoreMode".equals(currentFieldName)) {
        scoreMode=FiltersFunctionScoreQuery.ScoreMode.fromString(parser.text());
      }
 else       if ("boost_mode".equals(currentFieldName) || "boostMode".equals(currentFieldName)) {
        combineFunction=CombineFunction.fromString(parser.text());
      }
 else       if ("max_boost".equals(currentFieldName) || "maxBoost".equals(currentFieldName)) {
        maxBoost=parser.floatValue();
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=parser.floatValue();
      }
 else       if ("_name".equals(currentFieldName)) {
        queryName=parser.text();
      }
 else       if ("min_score".equals(currentFieldName) || "minScore".equals(currentFieldName)) {
        minScore=parser.floatValue();
      }
 else {
        if (singleFunctionFound) {
          throw new ParsingException(parser.getTokenLocation(),"failed to parse [{}] query. already found function [{}], now encountering [{}]. use [functions] array if you want to define several functions.",FunctionScoreQueryBuilder.NAME,singleFunctionName,currentFieldName);
        }
        if (functionArrayFound) {
          String errorString="already found [functions] array, now encountering [" + currentFieldName + "].";
          handleMisplacedFunctionsDeclaration(parser.getTokenLocation(),errorString);
        }
        if (parseContext.parseFieldMatcher().match(currentFieldName,WEIGHT_FIELD)) {
          filterFunctionBuilders.add(new FunctionScoreQueryBuilder.FilterFunctionBuilder(new WeightBuilder().setWeight(parser.floatValue())));
          singleFunctionFound=true;
          singleFunctionName=currentFieldName;
        }
 else {
          throw new ParsingException(parser.getTokenLocation(),"failed to parse [{}] query. field [{}] is not supported",FunctionScoreQueryBuilder.NAME,currentFieldName);
        }
      }
    }
  }
  if (query == null) {
    query=new MatchAllQueryBuilder();
  }
  FunctionScoreQueryBuilder functionScoreQueryBuilder=new FunctionScoreQueryBuilder(query,filterFunctionBuilders.toArray(new FunctionScoreQueryBuilder.FilterFunctionBuilder[filterFunctionBuilders.size()]));
  if (combineFunction != null) {
    functionScoreQueryBuilder.boostMode(combineFunction);
  }
  functionScoreQueryBuilder.scoreMode(scoreMode);
  functionScoreQueryBuilder.maxBoost(maxBoost);
  if (minScore != null) {
    functionScoreQueryBuilder.setMinScore(minScore);
  }
  functionScoreQueryBuilder.boost(boost);
  functionScoreQueryBuilder.queryName(queryName);
  return functionScoreQueryBuilder;
}
