{
  XContentParser parser=parseContext.parser();
  XContentParser.Token token;
  String fieldName=null;
  double trigramLambda=0.0;
  double bigramLambda=0.0;
  double unigramLambda=0.0;
  ParseFieldMatcher matcher=parseContext.getParseFieldMatcher();
  while ((token=parser.nextToken()) != Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      fieldName=parser.currentName();
    }
 else     if (token.isValue()) {
      if (matcher.match(fieldName,TRIGRAM_FIELD)) {
        trigramLambda=parser.doubleValue();
        if (trigramLambda < 0) {
          throw new IllegalArgumentException("trigram_lambda must be positive");
        }
      }
 else       if (matcher.match(fieldName,BIGRAM_FIELD)) {
        bigramLambda=parser.doubleValue();
        if (bigramLambda < 0) {
          throw new IllegalArgumentException("bigram_lambda must be positive");
        }
      }
 else       if (matcher.match(fieldName,UNIGRAM_FIELD)) {
        unigramLambda=parser.doubleValue();
        if (unigramLambda < 0) {
          throw new IllegalArgumentException("unigram_lambda must be positive");
        }
      }
 else {
        throw new IllegalArgumentException("suggester[phrase][smoothing][linear] doesn't support field [" + fieldName + "]");
      }
    }
 else {
      throw new ParsingException(parser.getTokenLocation(),"[" + NAME + "] unknown token ["+ token+ "] after ["+ fieldName+ "]");
    }
  }
  return new LinearInterpolation(trigramLambda,bigramLambda,unigramLambda);
}
