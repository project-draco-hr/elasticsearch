{
  assertAcked(prepareCreate("test").setSettings(Settings.builder().put(indexSettings()).put("index.number_of_shards",1)).addMapping("type","field1","type=string","field2","type=string"));
  ensureGreen();
  int numQueries=scaledRandomIntBetween(250,500);
  logger.info("--> registering {} queries",numQueries);
  for (int i=0; i < numQueries; i++) {
    String value="value0";
    QueryBuilder queryBuilder=matchQuery("field1",value);
    client().prepareIndex("test",PercolatorService.TYPE_NAME,Integer.toString(i)).setSource(jsonBuilder().startObject().field("query",queryBuilder).field("field2",i % 3 == 0 ? "b" : "a").endObject()).execute().actionGet();
  }
  refresh();
  for (int i=0; i < numQueries; i++) {
    String value="value0";
    PercolateRequestBuilder percolateRequestBuilder=client().preparePercolate().setIndices("test").setDocumentType("type").setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1",value).endObject())).setSize(numQueries);
    SubAggCollectionMode aggCollectionMode=randomFrom(SubAggCollectionMode.values());
    percolateRequestBuilder.addAggregation(AggregationBuilders.terms("terms").field("field2").collectMode(aggCollectionMode).order(Order.term(true)).shardSize(2).size(1));
    if (randomBoolean()) {
      percolateRequestBuilder.setPercolateQuery(matchAllQuery());
    }
    if (randomBoolean()) {
      percolateRequestBuilder.setScore(true);
    }
 else {
      percolateRequestBuilder.setSortByScore(true).setSize(numQueries);
    }
    boolean countOnly=randomBoolean();
    if (countOnly) {
      percolateRequestBuilder.setOnlyCount(countOnly);
    }
    percolateRequestBuilder.addAggregation(PipelineAggregatorBuilders.maxBucket("max_terms").setBucketsPaths("terms>_count"));
    PercolateResponse response=percolateRequestBuilder.execute().actionGet();
    assertMatchCount(response,numQueries);
    if (!countOnly) {
      assertThat(response.getMatches(),arrayWithSize(numQueries));
    }
    Aggregations aggregations=response.getAggregations();
    assertThat(aggregations.asList().size(),equalTo(2));
    Terms terms=aggregations.get("terms");
    assertThat(terms,notNullValue());
    assertThat(terms.getName(),equalTo("terms"));
    List<Terms.Bucket> buckets=new ArrayList<>(terms.getBuckets());
    assertThat(buckets.size(),equalTo(1));
    assertThat(buckets.get(0).getKeyAsString(),equalTo("a"));
    InternalBucketMetricValue maxA=aggregations.get("max_terms");
    assertThat(maxA,notNullValue());
    assertThat(maxA.getName(),equalTo("max_terms"));
    assertThat(maxA.keys(),equalTo(new String[]{"a"}));
  }
}
