{
  assertAcked(prepareCreate(INDEX_NAME).addMapping(TYPE_NAME,"query","type=percolator").addMapping("type","field1","type=text","field2","type=keyword"));
  ensureGreen();
  int numQueries=scaledRandomIntBetween(250,500);
  int numUniqueQueries=between(1,numQueries / 2);
  String[] values=new String[numUniqueQueries];
  for (int i=0; i < values.length; i++) {
    values[i]="value" + i;
  }
  int[] expectedCount=new int[numUniqueQueries];
  logger.info("--> registering {} queries",numQueries);
  for (int i=0; i < numQueries; i++) {
    String value=values[i % numUniqueQueries];
    expectedCount[i % numUniqueQueries]++;
    QueryBuilder queryBuilder=matchQuery("field1",value);
    client().prepareIndex(INDEX_NAME,TYPE_NAME,Integer.toString(i)).setSource(jsonBuilder().startObject().field("query",queryBuilder).field("field2","b").endObject()).execute().actionGet();
  }
  refresh();
  for (int i=0; i < numQueries; i++) {
    String value=values[i % numUniqueQueries];
    PercolateRequestBuilder percolateRequestBuilder=client().preparePercolate().setIndices(INDEX_NAME).setDocumentType("type").setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1",value).endObject())).setSize(expectedCount[i % numUniqueQueries]);
    SubAggCollectionMode aggCollectionMode=randomFrom(SubAggCollectionMode.values());
    percolateRequestBuilder.addAggregation(AggregationBuilders.terms("a").field("field2").collectMode(aggCollectionMode));
    if (randomBoolean()) {
      percolateRequestBuilder.setPercolateQuery(matchAllQuery());
    }
    if (randomBoolean()) {
      percolateRequestBuilder.setScore(true);
    }
 else {
      percolateRequestBuilder.setSortByScore(true).setSize(numQueries);
    }
    boolean countOnly=randomBoolean();
    if (countOnly) {
      percolateRequestBuilder.setOnlyCount(countOnly);
    }
    PercolateResponse response=percolateRequestBuilder.execute().actionGet();
    assertMatchCount(response,expectedCount[i % numUniqueQueries]);
    if (!countOnly) {
      assertThat(response.getMatches(),arrayWithSize(expectedCount[i % numUniqueQueries]));
    }
    List<Aggregation> aggregations=response.getAggregations().asList();
    assertThat(aggregations.size(),equalTo(1));
    assertThat(aggregations.get(0).getName(),equalTo("a"));
    List<Terms.Bucket> buckets=new ArrayList<>(((Terms)aggregations.get(0)).getBuckets());
    assertThat(buckets.size(),equalTo(1));
    assertThat(buckets.get(0).getKeyAsString(),equalTo("b"));
    assertThat(buckets.get(0).getDocCount(),equalTo((long)expectedCount[i % values.length]));
  }
}
