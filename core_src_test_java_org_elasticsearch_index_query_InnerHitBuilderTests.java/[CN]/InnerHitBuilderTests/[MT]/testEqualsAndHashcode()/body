{
  for (int runs=0; runs < NUMBER_OF_TESTBUILDERS; runs++) {
    InnerHitBuilder firstInnerHit=randomInnerHits();
    assertFalse("inner hit is equal to null",firstInnerHit.equals(null));
    assertFalse("inner hit is equal to incompatible type",firstInnerHit.equals(""));
    assertTrue("inner it is not equal to self",firstInnerHit.equals(firstInnerHit));
    assertThat("same inner hit's hashcode returns different values if called multiple times",firstInnerHit.hashCode(),equalTo(firstInnerHit.hashCode()));
    assertThat("different inner hits should not be equal",mutate(serializedCopy(firstInnerHit)),not(equalTo(firstInnerHit)));
    InnerHitBuilder secondBuilder=serializedCopy(firstInnerHit);
    assertTrue("inner hit is not equal to self",secondBuilder.equals(secondBuilder));
    assertTrue("inner hit is not equal to its copy",firstInnerHit.equals(secondBuilder));
    assertTrue("equals is not symmetric",secondBuilder.equals(firstInnerHit));
    assertThat("inner hits copy's hashcode is different from original hashcode",secondBuilder.hashCode(),equalTo(firstInnerHit.hashCode()));
    InnerHitBuilder thirdBuilder=serializedCopy(secondBuilder);
    assertTrue("inner hit is not equal to self",thirdBuilder.equals(thirdBuilder));
    assertTrue("inner hit is not equal to its copy",secondBuilder.equals(thirdBuilder));
    assertThat("inner hit copy's hashcode is different from original hashcode",secondBuilder.hashCode(),equalTo(thirdBuilder.hashCode()));
    assertTrue("equals is not transitive",firstInnerHit.equals(thirdBuilder));
    assertThat("inner hit copy's hashcode is different from original hashcode",firstInnerHit.hashCode(),equalTo(thirdBuilder.hashCode()));
    assertTrue("equals is not symmetric",thirdBuilder.equals(secondBuilder));
    assertTrue("equals is not symmetric",thirdBuilder.equals(firstInnerHit));
  }
}
