{
  final BulkShardRequest request=shardRequest.request;
  IndexShard indexShard=indicesService.indexServiceSafe(shardRequest.request.getIndex()).shardSafe(shardRequest.shardId);
  Engine.IndexingOperation[] ops=null;
  Set<Tuple<String,String>> mappingsToUpdate=null;
  BulkItemResponse[] responses=new BulkItemResponse[request.getItems().length];
  long[] versions=new long[request.getItems().length];
  for (int i=0; i < request.getItems().length; i++) {
    BulkItemRequest item=request.getItems()[i];
    if (item.getRequest() instanceof IndexRequest) {
      IndexRequest indexRequest=(IndexRequest)item.getRequest();
      try {
        MappingMetaData mappingMd=clusterState.metaData().index(request.getIndex()).mappingOrDefault(indexRequest.getType());
        if (mappingMd != null && mappingMd.routing().required()) {
          if (indexRequest.getRouting() == null) {
            throw new RoutingMissingException(indexRequest.getIndex(),indexRequest.getType(),indexRequest.getId());
          }
        }
        SourceToParse sourceToParse=SourceToParse.source(indexRequest.getSource()).type(indexRequest.getType()).id(indexRequest.getId()).routing(indexRequest.getRouting()).parent(indexRequest.getParent()).timestamp(indexRequest.getTimestamp()).ttl(indexRequest.getTtl());
        long version;
        Engine.IndexingOperation op;
        if (indexRequest.getOpType() == IndexRequest.OpType.INDEX) {
          Engine.Index index=indexShard.prepareIndex(sourceToParse).version(indexRequest.getVersion()).versionType(indexRequest.getVersionType()).origin(Engine.Operation.Origin.PRIMARY);
          indexShard.index(index);
          version=index.version();
          op=index;
        }
 else {
          Engine.Create create=indexShard.prepareCreate(sourceToParse).version(indexRequest.getVersion()).versionType(indexRequest.getVersionType()).origin(Engine.Operation.Origin.PRIMARY);
          indexShard.create(create);
          version=create.version();
          op=create;
        }
        versions[i]=indexRequest.getVersion();
        indexRequest.setVersion(version);
        if (op.parsedDoc().mappingsModified()) {
          if (mappingsToUpdate == null) {
            mappingsToUpdate=Sets.newHashSet();
          }
          mappingsToUpdate.add(Tuple.tuple(indexRequest.getIndex(),indexRequest.getType()));
        }
        if (Strings.hasLength(indexRequest.getPercolate())) {
          if (ops == null) {
            ops=new Engine.IndexingOperation[request.getItems().length];
          }
          ops[i]=op;
        }
        responses[i]=new BulkItemResponse(item.getId(),indexRequest.getOpType().lowercase(),new IndexResponse(indexRequest.getIndex(),indexRequest.getType(),indexRequest.getId(),version));
      }
 catch (      Exception e) {
        if (retryPrimaryException(e)) {
          for (int j=0; j < i; j++) {
            applyVersion(request.getItems()[j],versions[j]);
          }
          throw (ElasticSearchException)e;
        }
        if (e instanceof ElasticSearchException && ((ElasticSearchException)e).status() == RestStatus.CONFLICT) {
          logger.trace("[{}][{}] failed to execute bulk item (index) {}",e,shardRequest.request.getIndex(),shardRequest.shardId,indexRequest);
        }
 else {
          logger.debug("[{}][{}] failed to execute bulk item (index) {}",e,shardRequest.request.getIndex(),shardRequest.shardId,indexRequest);
        }
        responses[i]=new BulkItemResponse(item.getId(),indexRequest.getOpType().lowercase(),new BulkItemResponse.Failure(indexRequest.getIndex(),indexRequest.getType(),indexRequest.getId(),ExceptionsHelper.detailedMessage(e)));
        request.getItems()[i]=null;
      }
    }
 else     if (item.getRequest() instanceof DeleteRequest) {
      DeleteRequest deleteRequest=(DeleteRequest)item.getRequest();
      try {
        Engine.Delete delete=indexShard.prepareDelete(deleteRequest.getType(),deleteRequest.getId(),deleteRequest.getVersion()).versionType(deleteRequest.getVersionType()).origin(Engine.Operation.Origin.PRIMARY);
        indexShard.delete(delete);
        deleteRequest.setVersion(delete.version());
        responses[i]=new BulkItemResponse(item.getId(),"delete",new DeleteResponse(deleteRequest.getIndex(),deleteRequest.getType(),deleteRequest.getId(),delete.version(),delete.notFound()));
      }
 catch (      Exception e) {
        if (retryPrimaryException(e)) {
          for (int j=0; j < i; j++) {
            applyVersion(request.getItems()[j],versions[j]);
          }
          throw (ElasticSearchException)e;
        }
        if (e instanceof ElasticSearchException && ((ElasticSearchException)e).status() == RestStatus.CONFLICT) {
          logger.trace("[{}][{}] failed to execute bulk item (delete) {}",e,shardRequest.request.getIndex(),shardRequest.shardId,deleteRequest);
        }
 else {
          logger.debug("[{}][{}] failed to execute bulk item (delete) {}",e,shardRequest.request.getIndex(),shardRequest.shardId,deleteRequest);
        }
        responses[i]=new BulkItemResponse(item.getId(),"delete",new BulkItemResponse.Failure(deleteRequest.getIndex(),deleteRequest.getType(),deleteRequest.getId(),ExceptionsHelper.detailedMessage(e)));
        request.getItems()[i]=null;
      }
    }
  }
  if (mappingsToUpdate != null) {
    for (    Tuple<String,String> mappingToUpdate : mappingsToUpdate) {
      updateMappingOnMaster(mappingToUpdate.v1(),mappingToUpdate.v2());
    }
  }
  if (request.isRefresh()) {
    try {
      indexShard.refresh(new Engine.Refresh(false));
    }
 catch (    Exception e) {
    }
  }
  BulkShardResponse response=new BulkShardResponse(new ShardId(request.getIndex(),request.getShardId()),responses);
  return new PrimaryResponse<BulkShardResponse,BulkShardRequest>(shardRequest.request,response,ops);
}
