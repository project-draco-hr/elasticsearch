{
  final BulkShardRequest request=shardRequest.request;
  IndexShard indexShard=indicesService.indexServiceSafe(shardRequest.request.index()).shardSafe(shardRequest.shardId);
  Engine.IndexingOperation[] ops=null;
  Set<Tuple<String,String>> mappingsToUpdate=null;
  BulkItemResponse[] responses=new BulkItemResponse[request.items().length];
  long[] preVersions=new long[request.items().length];
  for (int i=0; i < request.items().length; i++) {
    BulkItemRequest item=request.items()[i];
    if (item.request() instanceof IndexRequest) {
      IndexRequest indexRequest=(IndexRequest)item.request();
      try {
        WriteResult result=shardIndexOperation(request,indexRequest,clusterState,indexShard,true);
        IndexResponse indexResponse=result.response();
        responses[i]=new BulkItemResponse(item.id(),indexRequest.opType().lowercase(),indexResponse);
        preVersions[i]=result.preVersion;
        if (result.mappingToUpdate != null) {
          if (mappingsToUpdate == null) {
            mappingsToUpdate=Sets.newHashSet();
          }
          mappingsToUpdate.add(result.mappingToUpdate);
        }
        if (result.op != null) {
          if (ops == null) {
            ops=new Engine.IndexingOperation[request.items().length];
          }
          ops[i]=result.op;
        }
      }
 catch (      Exception e) {
        if (retryPrimaryException(e)) {
          for (int j=0; j < i; j++) {
            applyVersion(request.items()[j],preVersions[j]);
          }
          throw (ElasticSearchException)e;
        }
        if (e instanceof ElasticSearchException && ((ElasticSearchException)e).status() == RestStatus.CONFLICT) {
          logger.trace("[{}][{}] failed to execute bulk item (index) {}",e,shardRequest.request.index(),shardRequest.shardId,indexRequest);
        }
 else {
          logger.debug("[{}][{}] failed to execute bulk item (index) {}",e,shardRequest.request.index(),shardRequest.shardId,indexRequest);
        }
        responses[i]=new BulkItemResponse(item.id(),indexRequest.opType().lowercase(),new BulkItemResponse.Failure(indexRequest.index(),indexRequest.type(),indexRequest.id(),ExceptionsHelper.detailedMessage(e)));
        request.items()[i]=null;
      }
    }
 else     if (item.request() instanceof DeleteRequest) {
      DeleteRequest deleteRequest=(DeleteRequest)item.request();
      try {
        DeleteResponse deleteResponse=shardDeleteOperation(deleteRequest,indexShard).response();
        responses[i]=new BulkItemResponse(item.id(),"delete",deleteResponse);
      }
 catch (      Exception e) {
        if (retryPrimaryException(e)) {
          for (int j=0; j < i; j++) {
            applyVersion(request.items()[j],preVersions[j]);
          }
          throw (ElasticSearchException)e;
        }
        if (e instanceof ElasticSearchException && ((ElasticSearchException)e).status() == RestStatus.CONFLICT) {
          logger.trace("[{}][{}] failed to execute bulk item (delete) {}",e,shardRequest.request.index(),shardRequest.shardId,deleteRequest);
        }
 else {
          logger.debug("[{}][{}] failed to execute bulk item (delete) {}",e,shardRequest.request.index(),shardRequest.shardId,deleteRequest);
        }
        responses[i]=new BulkItemResponse(item.id(),"delete",new BulkItemResponse.Failure(deleteRequest.index(),deleteRequest.type(),deleteRequest.id(),ExceptionsHelper.detailedMessage(e)));
        request.items()[i]=null;
      }
    }
 else     if (item.request() instanceof UpdateRequest) {
      UpdateRequest updateRequest=(UpdateRequest)item.request();
      int retryCount=0;
      do {
        UpdateResult updateResult;
        try {
          updateResult=shardUpdateOperation(clusterState,request,updateRequest,indexShard);
        }
 catch (        Throwable t) {
          updateResult=new UpdateResult(null,null,false,t,null);
        }
        if (updateResult.success()) {
switch (updateResult.result.operation()) {
case UPSERT:
case INDEX:
            WriteResult result=updateResult.writeResult;
          IndexRequest indexRequest=updateResult.request();
        BytesReference indexSourceAsBytes=indexRequest.source();
      IndexResponse indexResponse=result.response();
    UpdateResponse updateResponse=new UpdateResponse(indexResponse.getIndex(),indexResponse.getType(),indexResponse.getId(),indexResponse.getVersion());
  updateResponse.setMatches(indexResponse.getMatches());
if (updateRequest.fields() != null && updateRequest.fields().length > 0) {
  Tuple<XContentType,Map<String,Object>> sourceAndContent=XContentHelper.convertToMap(indexSourceAsBytes,true);
  updateResponse.setGetResult(updateHelper.extractGetResult(updateRequest,indexResponse.getVersion(),sourceAndContent.v2(),sourceAndContent.v1(),indexSourceAsBytes));
}
responses[i]=new BulkItemResponse(item.id(),"update",updateResponse);
preVersions[i]=result.preVersion;
if (result.mappingToUpdate != null) {
if (mappingsToUpdate == null) {
mappingsToUpdate=Sets.newHashSet();
}
mappingsToUpdate.add(result.mappingToUpdate);
}
if (result.op != null) {
if (ops == null) {
ops=new Engine.IndexingOperation[request.items().length];
}
ops[i]=result.op;
}
request.items()[i]=new BulkItemRequest(request.items()[i].id(),indexRequest);
break;
case DELETE:
DeleteResponse response=updateResult.writeResult.response();
DeleteRequest deleteRequest=updateResult.request();
updateResponse=new UpdateResponse(response.getIndex(),response.getType(),response.getId(),response.getVersion());
updateResponse.setGetResult(updateHelper.extractGetResult(updateRequest,response.getVersion(),updateResult.result.updatedSourceAsMap(),updateResult.result.updateSourceContentType(),null));
responses[i]=new BulkItemResponse(item.id(),"update",updateResponse);
request.items()[i]=new BulkItemRequest(request.items()[i].id(),deleteRequest);
break;
case NONE:
responses[i]=new BulkItemResponse(item.id(),"update",updateResult.noopResult);
request.items()[i]=null;
break;
}
break;
}
 else if (updateResult.failure()) {
Throwable t=updateResult.error;
if (!updateResult.retry) {
if (retryPrimaryException(t)) {
for (int j=0; j < i; j++) {
applyVersion(request.items()[j],preVersions[j]);
}
throw (ElasticSearchException)t;
}
if (updateResult.result == null) {
responses[i]=new BulkItemResponse(item.id(),"update",new BulkItemResponse.Failure(updateRequest.index(),updateRequest.type(),updateRequest.id(),ExceptionsHelper.detailedMessage(t)));
}
 else {
switch (updateResult.result.operation()) {
case UPSERT:
case INDEX:
IndexRequest indexRequest=updateResult.request();
if (t instanceof ElasticSearchException && ((ElasticSearchException)t).status() == RestStatus.CONFLICT) {
logger.trace("[{}][{}] failed to execute bulk item (index) {}",t,shardRequest.request.index(),shardRequest.shardId,indexRequest);
}
 else {
logger.debug("[{}][{}] failed to execute bulk item (index) {}",t,shardRequest.request.index(),shardRequest.shardId,indexRequest);
}
responses[i]=new BulkItemResponse(item.id(),indexRequest.opType().lowercase(),new BulkItemResponse.Failure(indexRequest.index(),indexRequest.type(),indexRequest.id(),ExceptionsHelper.detailedMessage(t)));
break;
case DELETE:
DeleteRequest deleteRequest=updateResult.request();
if (t instanceof ElasticSearchException && ((ElasticSearchException)t).status() == RestStatus.CONFLICT) {
logger.trace("[{}][{}] failed to execute bulk item (delete) {}",t,shardRequest.request.index(),shardRequest.shardId,deleteRequest);
}
 else {
logger.debug("[{}][{}] failed to execute bulk item (delete) {}",t,shardRequest.request.index(),shardRequest.shardId,deleteRequest);
}
responses[i]=new BulkItemResponse(item.id(),"delete",new BulkItemResponse.Failure(deleteRequest.index(),deleteRequest.type(),deleteRequest.id(),ExceptionsHelper.detailedMessage(t)));
break;
}
}
request.items()[i]=null;
break;
}
}
}
 while (++retryCount < updateRequest.retryOnConflict());
}
}
if (mappingsToUpdate != null) {
for (Tuple<String,String> mappingToUpdate : mappingsToUpdate) {
updateMappingOnMaster(mappingToUpdate.v1(),mappingToUpdate.v2());
}
}
if (request.refresh()) {
try {
indexShard.refresh(new Engine.Refresh(false));
}
 catch (Exception e) {
}
}
BulkShardResponse response=new BulkShardResponse(new ShardId(request.index(),request.shardId()),responses);
return new PrimaryResponse<BulkShardResponse,BulkShardRequest>(shardRequest.request,response,ops);
}
