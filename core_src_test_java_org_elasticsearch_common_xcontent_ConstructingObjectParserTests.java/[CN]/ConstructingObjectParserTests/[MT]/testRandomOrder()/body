{
  HasRequiredArguments expected=new HasRequiredArguments(randomAsciiOfLength(5),randomInt());
  expected.setMineral(randomInt());
  expected.setFruit(randomInt());
  expected.setA(randomBoolean() ? null : randomAsciiOfLength(5));
  expected.setB(randomBoolean() ? null : randomAsciiOfLength(5));
  expected.setC(randomBoolean() ? null : randomAsciiOfLength(5));
  expected.setD(randomBoolean());
  XContentBuilder builder=XContentFactory.jsonBuilder().prettyPrint();
  expected.toXContent(builder,ToXContent.EMPTY_PARAMS);
  builder=shuffleXContent(builder);
  BytesReference bytes=builder.bytes();
  XContentParser parser=XContentFactory.xContent(bytes).createParser(bytes);
  try {
    HasRequiredArguments parsed=HasRequiredArguments.PARSER.apply(parser,MATCHER);
    assertEquals(expected.animal,parsed.animal);
    assertEquals(expected.vegetable,parsed.vegetable);
    assertEquals(expected.mineral,parsed.mineral);
    assertEquals(expected.fruit,parsed.fruit);
    assertEquals(expected.a,parsed.a);
    assertEquals(expected.b,parsed.b);
    assertEquals(expected.c,parsed.c);
    assertEquals(expected.d,parsed.d);
  }
 catch (  Throwable e) {
    throw new Exception("Error parsing: [" + builder.string() + "]",e);
  }
}
