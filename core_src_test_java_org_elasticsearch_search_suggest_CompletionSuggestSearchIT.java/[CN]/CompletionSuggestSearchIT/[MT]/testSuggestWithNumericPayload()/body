{
  final CompletionMappingBuilder mapping=new CompletionMappingBuilder();
  createIndexAndMapping(mapping);
  int numDocs=10;
  List<IndexRequestBuilder> indexRequestBuilders=new ArrayList<>();
  for (int i=0; i < numDocs; i++) {
    XContentBuilder source=jsonBuilder().startObject().field(FIELD,"suggestion" + i).field("count",i).endObject();
    indexRequestBuilders.add(client().prepareIndex(INDEX,TYPE,"" + i).setSource(source));
  }
  indexRandom(true,indexRequestBuilders);
  CompletionSuggestionBuilder prefix=SuggestBuilders.completionSuggestion("foo").field(FIELD).prefix("sugg").size(numDocs).payload(Collections.singletonList("count"));
  SuggestResponse suggestResponse=client().prepareSuggest(INDEX).addSuggestion(prefix).execute().actionGet();
  assertNoFailures(suggestResponse);
  CompletionSuggestion completionSuggestion=suggestResponse.getSuggest().getSuggestion("foo");
  CompletionSuggestion.Entry options=completionSuggestion.getEntries().get(0);
  assertThat(options.getOptions().size(),equalTo(numDocs));
  for (  CompletionSuggestion.Entry.Option option : options) {
    Map<String,List<Object>> payloads=option.getPayload();
    assertThat(payloads.keySet(),contains("count"));
  }
}
