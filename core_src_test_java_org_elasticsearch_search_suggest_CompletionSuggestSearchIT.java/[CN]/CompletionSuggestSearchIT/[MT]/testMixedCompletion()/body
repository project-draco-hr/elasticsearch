{
  final CompletionMappingBuilder mapping=new CompletionMappingBuilder();
  createIndexAndMapping(mapping);
  String otherIndex=INDEX + "_1";
  assertAcked(client().admin().indices().prepareCreate(otherIndex).setSettings(Settings.builder().put(indexSettings()).put(IndexMetaData.SETTING_VERSION_CREATED,VersionUtils.randomVersionBetween(random(),Version.V_2_0_0,Version.V_2_3_1).id)).addMapping(TYPE,jsonBuilder().startObject().startObject(TYPE).startObject("properties").startObject(FIELD).field("type","completion").field("analyzer",mapping.indexAnalyzer).field("search_analyzer",mapping.searchAnalyzer).field("preserve_separators",mapping.preserveSeparators).field("preserve_position_increments",mapping.preservePositionIncrements).endObject().endObject().endObject().endObject()).get());
  int numDocs=10;
  List<IndexRequestBuilder> indexRequestBuilders=new ArrayList<>();
  for (int i=1; i <= numDocs; i++) {
    indexRequestBuilders.add(client().prepareIndex(otherIndex,TYPE,"" + i).setSource(jsonBuilder().startObject().startObject(FIELD).field("input","suggestion" + i).field("weight",i).endObject().endObject()));
    indexRequestBuilders.add(client().prepareIndex(INDEX,TYPE,"" + i).setSource(jsonBuilder().startObject().startObject(FIELD).field("input","suggestion" + i).field("weight",i).endObject().endObject()));
  }
  indexRandom(true,indexRequestBuilders);
  CompletionSuggestionBuilder prefix=SuggestBuilders.completionSuggestion(FIELD).text("sugg");
  try {
    client().prepareSearch(INDEX,otherIndex).suggest(new SuggestBuilder().addSuggestion("foo",prefix)).execute().actionGet();
    fail("querying on mixed completion suggester should throw an error");
  }
 catch (  ReduceSearchPhaseException e) {
    assertThat(e.getCause().getMessage(),containsString("detected mixed suggestion results"));
  }
}
