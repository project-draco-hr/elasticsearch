{
  PointTester[] testers={new TopTester(),new LeftTester(),new BottomTester(),new RightTester()};
  for (  PointTester tester : testers) {
    QueryValidationException except=null;
    GeoBoundingBoxQueryBuilder builder=createTestQueryBuilder();
    tester.invalidateCoordinate(builder.setValidationMethod(GeoValidationMethod.COERCE),false);
    except=builder.checkLatLon(true);
    assertNull("Inner post 2.0 validation w/ coerce should ignore invalid " + tester.getClass().getName() + " coordinate: "+ tester.invalidCoordinate+ " ",except);
    tester.invalidateCoordinate(builder.setValidationMethod(GeoValidationMethod.COERCE),false);
    except=builder.checkLatLon(false);
    assertNull("Inner pre 2.0 validation w/ coerce should ignore invalid coordinate: " + tester.getClass().getName() + " coordinate: "+ tester.invalidCoordinate+ " ",except);
    tester.invalidateCoordinate(builder.setValidationMethod(GeoValidationMethod.STRICT),false);
    except=builder.checkLatLon(true);
    assertNull("Inner pre 2.0 validation w/o coerce should ignore invalid coordinate for old indexes: " + tester.getClass().getName() + " coordinate: "+ tester.invalidCoordinate,except);
    tester.invalidateCoordinate(builder.setValidationMethod(GeoValidationMethod.STRICT),false);
    except=builder.checkLatLon(false);
    assertNotNull("Inner post 2.0 validation w/o coerce should detect invalid coordinate: " + tester.getClass().getName() + " coordinate: "+ tester.invalidCoordinate,except);
  }
}
