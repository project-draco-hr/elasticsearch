{
  IndexService indexService=createIndex("test");
  Settings settings=indexService.settingsService().getSettings();
  DocumentMapperParser mapperParser=indexService.mapperService().documentMapperParser();
  DocumentMapper builderDocMapper=doc("test",settings,rootObject("person").add(stringField("name").store(true).addMultiField(stringField("indexed").index(true).tokenized(true)).addMultiField(stringField("not_indexed").index(false).store(true)))).build(indexService.mapperService(),mapperParser);
  builderDocMapper.refreshSource();
  String builtMapping=builderDocMapper.mappingSource().string();
  DocumentMapper docMapper=mapperParser.parse(builtMapping);
  BytesReference json=new BytesArray(copyToBytesFromClasspath("/org/elasticsearch/index/mapper/multifield/test-data.json"));
  Document doc=docMapper.parse("person","1",json).rootDoc();
  IndexableField f=doc.getField("name");
  assertThat(f.name(),equalTo("name"));
  assertThat(f.stringValue(),equalTo("some name"));
  assertThat(f.fieldType().stored(),equalTo(true));
  assertNotSame(IndexOptions.NONE,f.fieldType().indexOptions());
  f=doc.getField("name.indexed");
  assertThat(f.name(),equalTo("name.indexed"));
  assertThat(f.stringValue(),equalTo("some name"));
  assertThat(f.fieldType().tokenized(),equalTo(true));
  assertThat(f.fieldType().stored(),equalTo(false));
  assertNotSame(IndexOptions.NONE,f.fieldType().indexOptions());
  f=doc.getField("name.not_indexed");
  assertThat(f.name(),equalTo("name.not_indexed"));
  assertThat(f.stringValue(),equalTo("some name"));
  assertThat(f.fieldType().stored(),equalTo(true));
  assertEquals(IndexOptions.NONE,f.fieldType().indexOptions());
}
