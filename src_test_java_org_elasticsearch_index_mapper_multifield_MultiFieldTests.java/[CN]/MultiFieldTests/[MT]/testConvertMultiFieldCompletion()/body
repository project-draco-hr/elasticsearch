{
  String mapping=copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/test-multi-field-type-completion.json");
  DocumentMapper docMapper=createIndex("test").mapperService().documentMapperParser().parse(mapping);
  assertThat(docMapper.mappers().fullName("a").mapper(),notNullValue());
  assertThat(docMapper.mappers().fullName("a").mapper(),instanceOf(StringFieldMapper.class));
  assertThat(docMapper.mappers().fullName("a").mapper().fieldType().indexed(),equalTo(true));
  assertThat(docMapper.mappers().fullName("a").mapper().fieldType().stored(),equalTo(false));
  assertThat(docMapper.mappers().fullName("a").mapper().fieldType().tokenized(),equalTo(false));
  assertThat(docMapper.mappers().fullName("a.b").mapper(),notNullValue());
  assertThat(docMapper.mappers().fullName("a.b").mapper(),instanceOf(CompletionFieldMapper.class));
  assertThat(docMapper.mappers().fullName("a.b").mapper().fieldType().indexed(),equalTo(true));
  assertThat(docMapper.mappers().fullName("a.b").mapper().fieldType().stored(),equalTo(false));
  assertThat(docMapper.mappers().fullName("a.b").mapper().fieldType().tokenized(),equalTo(true));
  BytesReference json=jsonBuilder().startObject().field("_id","1").field("a","complete me").endObject().bytes();
  Document doc=docMapper.parse(json).rootDoc();
  IndexableField f=doc.getField("a");
  assertThat(f,notNullValue());
  assertThat(f.name(),equalTo("a"));
  assertThat(f.stringValue(),equalTo("complete me"));
  assertThat(f.fieldType().stored(),equalTo(false));
  assertThat(f.fieldType().indexed(),equalTo(true));
  f=doc.getField("a.b");
  assertThat(f,notNullValue());
  assertThat(f.name(),equalTo("a.b"));
  assertThat(f.stringValue(),equalTo("complete me"));
  assertThat(f.fieldType().stored(),equalTo(false));
  assertThat(f.fieldType().indexed(),equalTo(true));
  assertThat(docMapper.mappers().fullName("b").mapper(),notNullValue());
  assertThat(docMapper.mappers().fullName("b").mapper(),instanceOf(CompletionFieldMapper.class));
  assertThat(docMapper.mappers().fullName("b").mapper().fieldType().indexed(),equalTo(true));
  assertThat(docMapper.mappers().fullName("b").mapper().fieldType().stored(),equalTo(false));
  assertThat(docMapper.mappers().fullName("b").mapper().fieldType().tokenized(),equalTo(true));
  assertThat(docMapper.mappers().fullName("b.a").mapper(),notNullValue());
  assertThat(docMapper.mappers().fullName("b.a").mapper(),instanceOf(StringFieldMapper.class));
  assertThat(docMapper.mappers().fullName("b.a").mapper().fieldType().indexed(),equalTo(true));
  assertThat(docMapper.mappers().fullName("b.a").mapper().fieldType().stored(),equalTo(false));
  assertThat(docMapper.mappers().fullName("b.a").mapper().fieldType().tokenized(),equalTo(false));
  json=jsonBuilder().startObject().field("_id","1").field("b","complete me").endObject().bytes();
  doc=docMapper.parse(json).rootDoc();
  f=doc.getField("b");
  assertThat(f,notNullValue());
  assertThat(f.name(),equalTo("b"));
  assertThat(f.stringValue(),equalTo("complete me"));
  assertThat(f.fieldType().stored(),equalTo(false));
  assertThat(f.fieldType().indexed(),equalTo(true));
  f=doc.getField("b.a");
  assertThat(f,notNullValue());
  assertThat(f.name(),equalTo("b.a"));
  assertThat(f.stringValue(),equalTo("complete me"));
  assertThat(f.fieldType().stored(),equalTo(false));
  assertThat(f.fieldType().indexed(),equalTo(true));
}
