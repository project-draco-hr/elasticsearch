{
  if (!running) {
    return;
  }
  transportService.sendRequest(node,PingRequestHandler.ACTION,new PingRequest(node.id()),options().withType(TransportRequestOptions.Type.PING).withTimeout(pingRetryTimeout),new BaseTransportResponseHandler<PingResponse>(){
    @Override public PingResponse newInstance(){
      return new PingResponse();
    }
    @Override public void handleResponse(    PingResponse response){
      if (!running) {
        return;
      }
      NodeFD nodeFD=nodesFD.get(node);
      if (nodeFD != null) {
        if (!nodeFD.running) {
          return;
        }
        nodeFD.retryCount=0;
        threadPool.schedule(pingInterval,ThreadPool.Names.SAME,SendPingRequest.this);
      }
    }
    @Override public void handleException(    TransportException exp){
      if (!running) {
        return;
      }
      if (exp instanceof ConnectTransportException) {
        return;
      }
      NodeFD nodeFD=nodesFD.get(node);
      if (nodeFD != null) {
        if (!nodeFD.running) {
          return;
        }
        int retryCount=++nodeFD.retryCount;
        logger.trace("[node  ] failed to ping [{}], retry [{}] out of [{}]",exp,node,retryCount,pingRetryCount);
        if (retryCount >= pingRetryCount) {
          logger.debug("[node  ] failed to ping [{}], tried [{}] times, each with  maximum [{}] timeout",node,pingRetryCount,pingRetryTimeout);
          if (nodesFD.remove(node) != null) {
            notifyNodeFailure(node,"failed to ping, tried [" + pingRetryCount + "] times, each with maximum ["+ pingRetryTimeout+ "] timeout");
          }
        }
 else {
          transportService.sendRequest(node,PingRequestHandler.ACTION,new PingRequest(node.id()),options().withType(TransportRequestOptions.Type.PING).withTimeout(pingRetryTimeout),this);
        }
      }
    }
    @Override public String executor(){
      return ThreadPool.Names.SAME;
    }
  }
);
}
