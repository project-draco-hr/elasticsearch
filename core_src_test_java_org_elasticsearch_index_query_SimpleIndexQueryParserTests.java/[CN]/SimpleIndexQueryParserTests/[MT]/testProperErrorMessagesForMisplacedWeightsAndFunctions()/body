{
  IndexQueryParserService queryParser=queryParser();
  String query=jsonBuilder().startObject().startObject("function_score").startArray("functions").startObject().field("weight",2).field("boost_factor",2).endObject().endArray().endObject().endObject().string();
  try {
    queryParser.parse(query).query();
    fail("Expect exception here because boost_factor must not have a weight");
  }
 catch (  QueryParsingException e) {
    assertThat(e.getDetailedMessage(),containsString(BoostScoreFunction.BOOST_WEIGHT_ERROR_MESSAGE));
  }
  query=jsonBuilder().startObject().startObject("function_score").startArray("functions").startObject().field("boost_factor",2).endObject().endArray().field("weight",2).endObject().endObject().string();
  try {
    queryParser.parse(query).query();
    fail("Expect exception here because array of functions and one weight in body is not allowed.");
  }
 catch (  QueryParsingException e) {
    assertThat(e.getDetailedMessage(),containsString("You can either define \"functions\":[...] or a single function, not both. Found \"functions\": [...] already, now encountering \"weight\"."));
  }
  query=jsonBuilder().startObject().startObject("function_score").field("weight",2).startArray("functions").startObject().field("boost_factor",2).endObject().endArray().endObject().endObject().string();
  try {
    queryParser.parse(query).query();
    fail("Expect exception here because array of functions and one weight in body is not allowed.");
  }
 catch (  QueryParsingException e) {
    assertThat(e.getDetailedMessage(),containsString("You can either define \"functions\":[...] or a single function, not both. Found \"weight\" already, now encountering \"functions\": [...]."));
  }
}
