{
  IndexQueryParserService queryParser=queryParser();
  QueryStringQueryBuilder builder=queryStringQuery("field:boosted^2");
  Query parsedQuery=queryParser.parse(builder).query();
  assertThat(parsedQuery,instanceOf(TermQuery.class));
  assertThat(((TermQuery)parsedQuery).getTerm(),equalTo(new Term("field","boosted")));
  assertThat(parsedQuery.getBoost(),equalTo(2.0f));
  builder.boost(2.0f);
  parsedQuery=queryParser.parse(builder).query();
  assertThat(parsedQuery.getBoost(),equalTo(4.0f));
  builder=queryStringQuery("((field:boosted^2) AND (field:foo^1.5))^3");
  parsedQuery=queryParser.parse(builder).query();
  assertThat(parsedQuery,instanceOf(BooleanQuery.class));
  assertThat(assertBooleanSubQuery(parsedQuery,TermQuery.class,0).getTerm(),equalTo(new Term("field","boosted")));
  assertThat(assertBooleanSubQuery(parsedQuery,TermQuery.class,0).getBoost(),equalTo(2.0f));
  assertThat(assertBooleanSubQuery(parsedQuery,TermQuery.class,1).getTerm(),equalTo(new Term("field","foo")));
  assertThat(assertBooleanSubQuery(parsedQuery,TermQuery.class,1).getBoost(),equalTo(1.5f));
  assertThat(parsedQuery.getBoost(),equalTo(3.0f));
  builder.boost(2.0f);
  parsedQuery=queryParser.parse(builder).query();
  assertThat(parsedQuery.getBoost(),equalTo(6.0f));
}
