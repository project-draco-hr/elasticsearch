{
  if (facets.size() == 1) {
    InternalFullHistogramFacet internalFacet=(InternalFullHistogramFacet)facets.get(0);
    List<FullEntry> entries=internalFacet.getEntries();
    CollectionUtil.timSort(entries,comparatorType.comparator());
    internalFacet.releaseCache();
    return internalFacet;
  }
  ExtTLongObjectHashMap<FullEntry> map=CacheRecycler.popLongObjectMap();
  for (  Facet facet : facets) {
    InternalFullHistogramFacet histoFacet=(InternalFullHistogramFacet)facet;
    for (    FullEntry fullEntry : histoFacet.entries) {
      FullEntry current=map.get(fullEntry.key);
      if (current != null) {
        current.count+=fullEntry.count;
        current.total+=fullEntry.total;
        current.totalCount+=fullEntry.totalCount;
        if (fullEntry.min < current.min) {
          current.min=fullEntry.min;
        }
        if (fullEntry.max > current.max) {
          current.max=fullEntry.max;
        }
      }
 else {
        map.put(fullEntry.key,fullEntry);
      }
    }
    histoFacet.releaseCache();
  }
  Object[] values=map.internalValues();
  Arrays.sort(values,(Comparator)comparatorType.comparator());
  List<FullEntry> ordered=new ArrayList<FullEntry>(map.size());
  for (int i=0; i < map.size(); i++) {
    FullEntry value=(FullEntry)values[i];
    if (value == null) {
      break;
    }
    ordered.add(value);
  }
  CacheRecycler.pushLongObjectMap(map);
  InternalFullHistogramFacet ret=new InternalFullHistogramFacet(getName());
  ret.comparatorType=comparatorType;
  ret.entries=ordered;
  return ret;
}
