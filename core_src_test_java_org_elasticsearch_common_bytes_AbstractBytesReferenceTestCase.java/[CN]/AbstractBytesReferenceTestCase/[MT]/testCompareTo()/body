{
  final int iters=randomIntBetween(5,10);
  for (int i=0; i < iters; i++) {
    int length=randomIntBetween(10,PAGE_SIZE * randomIntBetween(2,8));
    BytesReference bytesReference=newBytesReference(length);
    assertTrue(bytesReference.compareTo(new BytesArray("")) > 0);
    assertTrue(new BytesArray("").compareTo(bytesReference) < 0);
    assertEquals(0,bytesReference.compareTo(bytesReference));
    int sliceFrom=randomIntBetween(0,bytesReference.length());
    int sliceLength=randomIntBetween(0,bytesReference.length() - sliceFrom);
    BytesReference slice=bytesReference.slice(sliceFrom,sliceLength);
    assertEquals(bytesReference.toBytesRef().compareTo(slice.toBytesRef()),new BytesArray(bytesReference.toBytesRef(),true).compareTo(new BytesArray(slice.toBytesRef(),true)));
    assertEquals(bytesReference.toBytesRef().compareTo(slice.toBytesRef()),bytesReference.compareTo(slice));
    assertEquals(slice.toBytesRef().compareTo(bytesReference.toBytesRef()),slice.compareTo(bytesReference));
    assertEquals(0,slice.compareTo(new BytesArray(slice.toBytesRef())));
    assertEquals(0,new BytesArray(slice.toBytesRef()).compareTo(slice));
    final int crazyLength=length + randomIntBetween(10,PAGE_SIZE * randomIntBetween(2,8));
    ReleasableBytesStreamOutput crazyStream=new ReleasableBytesStreamOutput(length,bigarrays);
    final int offset=randomIntBetween(0,crazyLength - length);
    for (int j=0; j < offset; j++) {
      crazyStream.writeByte((byte)random().nextInt(1 << 8));
    }
    bytesReference.writeTo(crazyStream);
    for (int j=crazyStream.size(); j < crazyLength; j++) {
      crazyStream.writeByte((byte)random().nextInt(1 << 8));
    }
    PagedBytesReference crazyReference=crazyStream.bytes();
    assertFalse(crazyReference.compareTo(bytesReference) == 0);
    assertEquals(0,crazyReference.slice(offset,length).compareTo(bytesReference));
    assertEquals(0,bytesReference.compareTo(crazyReference.slice(offset,length)));
  }
}
