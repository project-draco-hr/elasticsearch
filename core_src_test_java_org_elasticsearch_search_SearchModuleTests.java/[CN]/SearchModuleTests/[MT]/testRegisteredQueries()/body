{
  SearchModule module=new SearchModule(Settings.EMPTY,new NamedWriteableRegistry());
  List<String> allSupportedQueries=new ArrayList<>();
  Collections.addAll(allSupportedQueries,NON_DEPRECATED_QUERIES);
  Collections.addAll(allSupportedQueries,DEPRECATED_QUERIES);
  String[] supportedQueries=allSupportedQueries.toArray(new String[allSupportedQueries.size()]);
  assertThat(module.getQueryParserRegistry().getNames(),containsInAnyOrder(supportedQueries));
  IndicesQueriesRegistry indicesQueriesRegistry=module.getQueryParserRegistry();
  XContentParser dummyParser=XContentHelper.createParser(new BytesArray("{}"));
  for (  String queryName : supportedQueries) {
    indicesQueriesRegistry.lookup(queryName,ParseFieldMatcher.EMPTY,dummyParser.getTokenLocation());
  }
  for (  String queryName : NON_DEPRECATED_QUERIES) {
    QueryParser<?> queryParser=indicesQueriesRegistry.lookup(queryName,ParseFieldMatcher.STRICT,dummyParser.getTokenLocation());
    assertThat(queryParser,notNullValue());
  }
  for (  String queryName : DEPRECATED_QUERIES) {
    try {
      indicesQueriesRegistry.lookup(queryName,ParseFieldMatcher.STRICT,dummyParser.getTokenLocation());
      fail("query is deprecated, getQueryParser should have failed in strict mode");
    }
 catch (    IllegalArgumentException e) {
      assertThat(e.getMessage(),containsString("Deprecated field [" + queryName + "] used"));
    }
  }
}
