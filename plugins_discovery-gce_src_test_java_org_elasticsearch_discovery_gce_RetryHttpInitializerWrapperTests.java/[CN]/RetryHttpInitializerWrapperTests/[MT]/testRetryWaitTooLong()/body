{
  int maxWaitTime=10;
  int maxRetryTimes=50;
  FailThenSuccessBackoffTransport fakeTransport=new FailThenSuccessBackoffTransport(HttpStatusCodes.STATUS_CODE_SERVER_ERROR,maxRetryTimes);
  JsonFactory jsonFactory=new JacksonFactory();
  MockGoogleCredential credential=new MockGoogleCredential.Builder().build();
  MockSleeper oneTimeSleeper=new MockSleeper(){
    @Override public void sleep(    long millis) throws InterruptedException {
      Thread.sleep(maxWaitTime);
      super.sleep(0);
    }
  }
;
  RetryHttpInitializerWrapper retryHttpInitializerWrapper=new RetryHttpInitializerWrapper(credential,oneTimeSleeper,maxWaitTime);
  Compute client=new Compute.Builder(fakeTransport,jsonFactory,null).setHttpRequestInitializer(retryHttpInitializerWrapper).setApplicationName("test").build();
  HttpRequest request1=client.getRequestFactory().buildRequest("Get",new GenericUrl("http://elasticsearch.com"),null);
  try {
    request1.execute();
    fail("Request should fail if wait too long");
  }
 catch (  HttpResponseException e) {
    assertThat(e.getStatusCode(),equalTo(HttpStatusCodes.STATUS_CODE_SERVER_ERROR));
    assertThat(oneTimeSleeper.getCount(),lessThan(maxRetryTimes));
  }
}
