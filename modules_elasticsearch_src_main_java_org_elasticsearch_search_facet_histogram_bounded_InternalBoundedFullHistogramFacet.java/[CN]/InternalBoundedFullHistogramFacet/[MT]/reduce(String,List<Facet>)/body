{
  if (facets.size() == 1) {
    InternalBoundedFullHistogramFacet internalFacet=(InternalBoundedFullHistogramFacet)facets.get(0);
    if (comparatorType != ComparatorType.KEY) {
      Arrays.sort(internalFacet.entries,(Comparator)comparatorType.comparator());
    }
    return internalFacet;
  }
  InternalBoundedFullHistogramFacet first=(InternalBoundedFullHistogramFacet)facets.get(0);
  for (int f=1; f < facets.size(); f++) {
    InternalBoundedFullHistogramFacet internalFacet=(InternalBoundedFullHistogramFacet)facets.get(f);
    for (int i=0; i < size; i++) {
      FullEntry aggEntry=(FullEntry)first.entries[i];
      FullEntry entry=(FullEntry)internalFacet.entries[i];
      if (aggEntry == null) {
        first.entries[i]=entry;
      }
 else       if (entry != null) {
        aggEntry.count+=entry.count;
        aggEntry.totalCount+=entry.totalCount;
        aggEntry.total+=entry.total;
        if (entry.min < aggEntry.min) {
          aggEntry.min=entry.min;
        }
        if (entry.max > aggEntry.max) {
          aggEntry.max=entry.max;
        }
      }
    }
    internalFacet.releaseCache();
  }
  if (comparatorType != ComparatorType.KEY) {
    Arrays.sort(first.entries,(Comparator)comparatorType.comparator());
  }
  return first;
}
