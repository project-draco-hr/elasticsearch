{
  if (facets.size() == 1) {
    InternalBoundedFullHistogramFacet internalFacet=(InternalBoundedFullHistogramFacet)facets.get(0);
    if (!internalFacet.entriesSafe) {
      FullEntry[] newEntries=new FullEntry[size];
      System.arraycopy(internalFacet.entries,0,newEntries,0,size);
      internalFacet.entries=newEntries;
      internalFacet.entriesSafe=true;
    }
    if (comparatorType != ComparatorType.KEY) {
      Arrays.sort(internalFacet.entries,(Comparator)comparatorType.comparator());
    }
    return internalFacet;
  }
  Object[] agg=null;
  for (  Facet facet : facets) {
    InternalBoundedFullHistogramFacet internalFacet=(InternalBoundedFullHistogramFacet)facet;
    if (internalFacet.entriesSafe) {
      agg=internalFacet.entries;
      break;
    }
  }
  if (agg == null) {
    agg=new FullEntry[size];
  }
  for (  Facet facet : facets) {
    InternalBoundedFullHistogramFacet internalFacet=(InternalBoundedFullHistogramFacet)facet;
    if (agg == internalFacet.entries) {
      continue;
    }
    for (int i=0; i < size; i++) {
      FullEntry aggEntry=(FullEntry)agg[i];
      FullEntry entry=(FullEntry)internalFacet.entries[i];
      if (aggEntry == null) {
        agg[i]=entry;
      }
 else       if (entry != null) {
        aggEntry.count+=entry.count;
        aggEntry.totalCount+=entry.totalCount;
        aggEntry.total+=entry.total;
        if (entry.min < aggEntry.min) {
          aggEntry.min=entry.min;
        }
        if (entry.max > aggEntry.max) {
          aggEntry.max=entry.max;
        }
      }
    }
  }
  InternalBoundedFullHistogramFacet internalFacet=(InternalBoundedFullHistogramFacet)facets.get(0);
  internalFacet.entries=agg;
  internalFacet.entriesSafe=true;
  return internalFacet;
}
