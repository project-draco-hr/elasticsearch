{
  Set<Path> translogDirs=getTranslogDirs(indexName);
  Set<Path> files=new TreeSet<>();
  for (  Path translogDir : translogDirs) {
    if (Files.isDirectory(translogDir)) {
      logger.info("--> path: {}",translogDir);
      try (DirectoryStream<Path> stream=Files.newDirectoryStream(translogDir)){
        for (        Path item : stream) {
          logger.info("--> File: {}",item);
          if (Files.isRegularFile(item) && item.getFileName().toString().startsWith("translog-")) {
            files.add(item);
          }
        }
      }
     }
  }
  Path fileToCorrupt=null;
  if (!files.isEmpty()) {
    int corruptions=randomIntBetween(5,20);
    for (int i=0; i < corruptions; i++) {
      fileToCorrupt=RandomPicks.randomFrom(random(),files);
      try (FileChannel raf=FileChannel.open(fileToCorrupt,StandardOpenOption.READ,StandardOpenOption.WRITE)){
        raf.position(randomIntBetween(0,(int)Math.min(Integer.MAX_VALUE,raf.size() - 1)));
        long filePointer=raf.position();
        ByteBuffer bb=ByteBuffer.wrap(new byte[1]);
        raf.read(bb);
        bb.flip();
        byte oldValue=bb.get(0);
        byte newValue=(byte)(oldValue + 1);
        bb.put(0,newValue);
        raf.position(filePointer);
        raf.write(bb);
        logger.info("--> corrupting file {} --  flipping at position {} from {} to {} file: {}",fileToCorrupt,filePointer,Integer.toHexString(oldValue),Integer.toHexString(newValue),fileToCorrupt);
      }
     }
  }
  assertThat("no file corrupted",fileToCorrupt,notNullValue());
}
