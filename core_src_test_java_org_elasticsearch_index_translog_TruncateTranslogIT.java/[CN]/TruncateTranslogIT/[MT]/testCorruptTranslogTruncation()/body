{
  internalCluster().startNodesAsync(1,Settings.EMPTY).get();
  assertAcked(prepareCreate("test").setSettings(Settings.builder().put("index.number_of_shards",1).put("index.number_of_replicas",0).put("index.refresh_interval","-1").put(MockEngineSupport.DISABLE_FLUSH_ON_CLOSE.getKey(),true)));
  ensureYellow();
  int numDocs=scaledRandomIntBetween(100,1000);
  IndexRequestBuilder[] builders=new IndexRequestBuilder[numDocs];
  for (int i=0; i < builders.length; i++) {
    builders[i]=client().prepareIndex("test","type").setSource("foo","bar");
  }
  disableTranslogFlush("test");
  indexRandom(false,false,false,Arrays.asList(builders));
  Set<Path> translogDirs=getTranslogDirs("test");
  TruncateTranslogCommand ttc=new TruncateTranslogCommand();
  MockTerminal t=new MockTerminal();
  OptionParser parser=ttc.getParser();
  for (  Path translogDir : translogDirs) {
    OptionSet options=parser.parse("-d",translogDir.toAbsolutePath().toString(),"-b");
    try {
      logger.info("--> running truncate while index is open on [{}]",translogDir.toAbsolutePath());
      ttc.execute(t,options,new HashMap<String,String>());
      fail("expected the truncate command to fail not being able to acquire the lock");
    }
 catch (    Exception e) {
      assertThat(e.getMessage(),containsString("Failed to lock shard's directory"));
    }
  }
  logger.info("--> corrupting translog");
  corruptRandomTranslogFiles("test");
  logger.info("--> restarting node");
  internalCluster().fullRestart();
  client().admin().cluster().prepareHealth().setWaitForYellowStatus().setTimeout(new TimeValue(1000,TimeUnit.MILLISECONDS)).setWaitForEvents(Priority.LANGUID).get();
  try {
    client().prepareSearch("test").setQuery(matchAllQuery()).get();
    fail("all shards should be failed due to a corrupted translog");
  }
 catch (  SearchPhaseExecutionException e) {
  }
  logger.info("--> closing 'test' index");
  client().admin().indices().prepareClose("test").get();
  for (  Path translogDir : translogDirs) {
    OptionSet options=parser.parse("-d",translogDir.toAbsolutePath().toString(),"-b");
    logger.info("--> running truncate translog command for [{}]",translogDir.toAbsolutePath());
    ttc.execute(t,options,new HashMap<String,String>());
    logger.info("--> output:\n{}",t.getOutput());
  }
  logger.info("--> opening 'test' index");
  client().admin().indices().prepareOpen("test").get();
  ensureYellow("test");
  SearchResponse resp=client().prepareSearch("test").setQuery(matchAllQuery()).get();
  ElasticsearchAssertions.assertNoFailures(resp);
}
