{
  Directory directory=newDirectory();
  IndexWriterConfig iwc=new IndexWriterConfig(null);
  iwc.setMergePolicy(NoMergePolicy.INSTANCE);
  RandomIndexWriter indexWriter=new RandomIndexWriter(random(),directory,iwc);
  List<Document> documents=new ArrayList<>();
  Document document=new Document();
  document.add(new Field(UidFieldMapper.NAME,"type#1",UidFieldMapper.Defaults.NESTED_FIELD_TYPE));
  document.add(new Field(TypeFieldMapper.NAME,"__nested_field",TypeFieldMapper.Defaults.FIELD_TYPE));
  documents.add(document);
  document=new Document();
  document.add(new Field(UidFieldMapper.NAME,"type#1",UidFieldMapper.Defaults.NESTED_FIELD_TYPE));
  document.add(new Field(TypeFieldMapper.NAME,"__nested_field",TypeFieldMapper.Defaults.FIELD_TYPE));
  documents.add(document);
  document=new Document();
  document.add(new Field(UidFieldMapper.NAME,"type#1",UidFieldMapper.Defaults.NESTED_FIELD_TYPE));
  document.add(new Field(TypeFieldMapper.NAME,"__nested_field",TypeFieldMapper.Defaults.FIELD_TYPE));
  documents.add(document);
  document=new Document();
  document.add(new Field(UidFieldMapper.NAME,"type#1",UidFieldMapper.Defaults.FIELD_TYPE));
  document.add(new Field(TypeFieldMapper.NAME,"test",TypeFieldMapper.Defaults.FIELD_TYPE));
  documents.add(document);
  indexWriter.addDocuments(documents);
  indexWriter.commit();
  documents.clear();
  document=new Document();
  document.add(new Field(UidFieldMapper.NAME,"type#2",UidFieldMapper.Defaults.NESTED_FIELD_TYPE));
  document.add(new Field(TypeFieldMapper.NAME,"__nested_field",TypeFieldMapper.Defaults.FIELD_TYPE));
  documents.add(document);
  document=new Document();
  document.add(new Field(UidFieldMapper.NAME,"type#2",UidFieldMapper.Defaults.FIELD_TYPE));
  document.add(new Field(TypeFieldMapper.NAME,"test",TypeFieldMapper.Defaults.FIELD_TYPE));
  documents.add(document);
  indexWriter.addDocuments(documents);
  documents.clear();
  document=new Document();
  document.add(new Field(UidFieldMapper.NAME,"type#3",UidFieldMapper.Defaults.NESTED_FIELD_TYPE));
  document.add(new Field(TypeFieldMapper.NAME,"__nested_field",TypeFieldMapper.Defaults.FIELD_TYPE));
  documents.add(document);
  document=new Document();
  document.add(new Field(UidFieldMapper.NAME,"type#3",UidFieldMapper.Defaults.FIELD_TYPE));
  document.add(new Field(TypeFieldMapper.NAME,"test",TypeFieldMapper.Defaults.FIELD_TYPE));
  documents.add(document);
  indexWriter.addDocuments(documents);
  indexWriter.commit();
  indexWriter.close();
  IndexService indexService=createIndex("test");
  DirectoryReader directoryReader=DirectoryReader.open(directory);
  directoryReader=ElasticsearchDirectoryReader.wrap(directoryReader,new ShardId(indexService.index(),0));
  IndexSearcher searcher=new IndexSearcher(directoryReader);
  indexService.mapperService().merge("test",new CompressedXContent(PutMappingRequest.buildFromSimplifiedDef("test","nested_field","type=nested").string()),MapperService.MergeReason.MAPPING_UPDATE,false);
  SearchContext searchContext=createSearchContext(indexService);
  AggregationContext context=new AggregationContext(searchContext);
  AggregatorFactories.Builder builder=AggregatorFactories.builder();
  NestedAggregator.NestedAggregatorBuilder factory=new NestedAggregator.NestedAggregatorBuilder("test","nested_field");
  builder.addAggregator(factory);
  AggregatorFactories factories=builder.build(context,null);
  searchContext.aggregations(new SearchContextAggregations(factories));
  Aggregator[] aggs=factories.createTopLevelAggregators();
  BucketCollector collector=BucketCollector.wrap(Arrays.asList(aggs));
  collector.preCollection();
  BooleanQuery.Builder bq=new BooleanQuery.Builder();
  bq.add(Queries.newNonNestedFilter(),Occur.MUST);
  bq.add(new TermQuery(new Term(UidFieldMapper.NAME,"type#2")),Occur.MUST_NOT);
  searcher.search(new ConstantScoreQuery(bq.build()),collector);
  collector.postCollection();
  Nested nested=(Nested)aggs[0].buildAggregation(0);
  assertThat(nested.getDocCount(),equalTo(4L));
  directoryReader.close();
  directory.close();
}
