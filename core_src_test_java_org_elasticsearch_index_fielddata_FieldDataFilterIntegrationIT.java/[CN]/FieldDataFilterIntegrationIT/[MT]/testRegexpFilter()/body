{
  CreateIndexRequestBuilder builder=prepareCreate("test");
  XContentBuilder mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("name").field("type","text").startObject("fielddata").startObject("filter").startObject("regex").field("pattern","^bac.*").endObject().endObject().endObject().endObject().startObject("not_filtered").field("type","text").endObject().endObject().endObject().endObject();
  assertAcked(builder.addMapping("type",mapping));
  ensureGreen();
  int numDocs=scaledRandomIntBetween(5,50);
  for (int i=0; i < numDocs; i++) {
    client().prepareIndex("test","type","" + 0).setSource("name","bacon bastards","not_filtered","bacon bastards").get();
  }
  refresh();
  SearchResponse searchResponse=client().prepareSearch().setSize(0).setQuery(matchAllQuery()).addAggregation(terms("name").field("name")).addAggregation(terms("not_filtered").field("not_filtered")).get();
  Aggregations aggs=searchResponse.getAggregations();
  Terms nameAgg=aggs.get("name");
  assertThat(nameAgg.getBuckets().size(),Matchers.equalTo(1));
  assertThat(nameAgg.getBuckets().iterator().next().getKeyAsString(),Matchers.equalTo("bacon"));
  Terms notFilteredAgg=aggs.get("not_filtered");
  assertThat(notFilteredAgg.getBuckets().size(),Matchers.equalTo(2));
  assertThat(notFilteredAgg.getBuckets().get(0).getKeyAsString(),Matchers.isOneOf("bacon","bastards"));
  assertThat(notFilteredAgg.getBuckets().get(1).getKeyAsString(),Matchers.isOneOf("bacon","bastards"));
}
