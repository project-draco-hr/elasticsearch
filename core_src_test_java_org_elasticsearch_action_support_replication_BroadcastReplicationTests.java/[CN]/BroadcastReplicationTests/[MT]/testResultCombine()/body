{
  final String index="test";
  int numShards=randomInt(3);
  setState(clusterService,stateWithAssignedPrimariesAndOneReplica(index,numShards));
  logger.debug("--> using initial state:\n{}",clusterService.state().prettyPrint());
  Future<BroadcastResponse> response=(broadcastReplicationAction.execute(new DummyBroadcastRequest().indices(index)));
  int succeeded=0;
  int failed=0;
  for (  Tuple<ShardId,ActionListener<ReplicationResponse>> shardRequests : broadcastReplicationAction.capturedShardRequests) {
    if (randomBoolean()) {
      ReplicationResponse.ShardInfo.Failure[] failures=new ReplicationResponse.ShardInfo.Failure[0];
      int shardsSucceeded=randomInt(1) + 1;
      succeeded+=shardsSucceeded;
      ReplicationResponse replicationResponse=new ReplicationResponse();
      if (shardsSucceeded == 1 && randomBoolean()) {
        failures=new ReplicationResponse.ShardInfo.Failure[1];
        failures[0]=new ReplicationResponse.ShardInfo.Failure(shardRequests.v1(),null,new Exception("pretend shard failed"),RestStatus.GATEWAY_TIMEOUT,false);
        failed++;
      }
      replicationResponse.setShardInfo(new ReplicationResponse.ShardInfo(2,shardsSucceeded,failures));
      shardRequests.v2().onResponse(replicationResponse);
    }
 else {
      failed+=2;
      shardRequests.v2().onFailure(new Exception("pretend shard failed"));
    }
  }
  assertBroadcastResponse(2 * numShards,succeeded,failed,response.get(),Exception.class);
}
