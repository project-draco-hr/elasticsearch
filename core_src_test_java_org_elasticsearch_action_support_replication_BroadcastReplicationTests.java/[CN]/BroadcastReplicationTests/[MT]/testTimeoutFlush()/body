{
  final String index="test";
  clusterService.setState(state(index,randomBoolean(),randomBoolean() ? ShardRoutingState.INITIALIZING : ShardRoutingState.UNASSIGNED,ShardRoutingState.UNASSIGNED));
  logger.debug("--> using initial state:\n{}",clusterService.state().prettyPrint());
  TransportShardFlushAction shardFlushAction=new TransportShardFlushAction(Settings.EMPTY,transportService,clusterService,null,threadPool,null,null,new ActionFilters(new HashSet<ActionFilter>()),new IndexNameExpressionResolver(Settings.EMPTY));
  TransportFlushAction flushAction=new TransportFlushAction(Settings.EMPTY,threadPool,clusterService,transportService,new ActionFilters(new HashSet<ActionFilter>()),new IndexNameExpressionResolver(Settings.EMPTY),shardFlushAction);
  FlushResponse flushResponse=(FlushResponse)executeAndAssertImmediateResponse(flushAction,new FlushRequest(index));
  logger.info("total shards: {}, ",flushResponse.getTotalShards());
  assertBroadcastResponse(2,0,0,flushResponse,UnavailableShardsException.class);
  ClusterBlocks.Builder block=ClusterBlocks.builder().addGlobalBlock(new ClusterBlock(1,"non retryable",false,true,RestStatus.SERVICE_UNAVAILABLE,ClusterBlockLevel.ALL));
  clusterService.setState(ClusterState.builder(clusterService.state()).blocks(block));
  assertFailure("all shards should fail with cluster block",executeAndAssertImmediateResponse(flushAction,new FlushRequest(index)),ClusterBlockException.class);
  block=ClusterBlocks.builder().addGlobalBlock(new ClusterBlock(1,"retryable",true,true,RestStatus.SERVICE_UNAVAILABLE,ClusterBlockLevel.ALL));
  clusterService.setState(ClusterState.builder(clusterService.state()).blocks(block));
  assertFailure("all shards should fail with cluster block",executeAndAssertImmediateResponse(flushAction,new FlushRequest(index)),ClusterBlockException.class);
  block=ClusterBlocks.builder().addGlobalBlock(new ClusterBlock(1,"non retryable",false,true,RestStatus.SERVICE_UNAVAILABLE,ClusterBlockLevel.ALL));
  clusterService.setState(ClusterState.builder(clusterService.state()).blocks(block));
  assertFailure("all shards should fail with cluster block",executeAndAssertImmediateResponse(flushAction,new FlushRequest(index)),ClusterBlockException.class);
}
