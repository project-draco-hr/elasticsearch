{
  Settings defaultSettings=Settings.builder().put(FaultDetection.SETTING_PING_TIMEOUT,"1s").put(FaultDetection.SETTING_PING_RETRIES,"1").put("discovery.type","zen").build();
  Settings masterNodeSettings=Settings.builder().put("node.data",false).put(defaultSettings).build();
  internalCluster().startNodesAsync(2,masterNodeSettings).get();
  Settings dateNodeSettings=Settings.builder().put("node.master",false).put(defaultSettings).build();
  internalCluster().startNodesAsync(2,dateNodeSettings).get();
  ClusterHealthResponse clusterHealthResponse=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNodes("4").setWaitForRelocatingShards(0).get();
  assertThat(clusterHealthResponse.isTimedOut(),is(false));
  createIndex("test");
  ensureSearchable("test");
  RecoveryResponse r=client().admin().indices().prepareRecoveries("test").get();
  int numRecoveriesBeforeNewMaster=r.shardRecoveryStates().get("test").size();
  final String oldMaster=internalCluster().getMasterName();
  internalCluster().stopCurrentMasterNode();
  assertBusy(new Runnable(){
    @Override public void run(){
      String current=internalCluster().getMasterName();
      assertThat(current,notNullValue());
      assertThat(current,not(equalTo(oldMaster)));
    }
  }
);
  ensureSearchable("test");
  r=client().admin().indices().prepareRecoveries("test").get();
  int numRecoveriesAfterNewMaster=r.shardRecoveryStates().get("test").size();
  assertThat(numRecoveriesAfterNewMaster,equalTo(numRecoveriesBeforeNewMaster));
}
