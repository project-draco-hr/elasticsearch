{
  Settings defaultSettings=Settings.builder().put(FaultDetection.PING_TIMEOUT_SETTING.getKey(),"1s").put(FaultDetection.PING_RETRIES_SETTING.getKey(),"1").put("discovery.type","zen").build();
  Settings masterNodeSettings=Settings.builder().put(Node.NODE_DATA_SETTING.getKey(),false).put(defaultSettings).build();
  String master=internalCluster().startNode(masterNodeSettings);
  Settings dateNodeSettings=Settings.builder().put(Node.NODE_MASTER_SETTING.getKey(),false).put(defaultSettings).build();
  internalCluster().startNodesAsync(2,dateNodeSettings).get();
  client().admin().cluster().prepareHealth().setWaitForNodes("3").get();
  ClusterService clusterService=internalCluster().getInstance(ClusterService.class,master);
  final ArrayList<ClusterState> statesFound=new ArrayList<>();
  final CountDownLatch nodesStopped=new CountDownLatch(1);
  clusterService.add(new ClusterStateListener(){
    @Override public void clusterChanged(    ClusterChangedEvent event){
      statesFound.add(event.state());
      try {
        nodesStopped.await();
      }
 catch (      InterruptedException e) {
      }
    }
  }
);
  internalCluster().stopRandomNonMasterNode();
  internalCluster().stopRandomNonMasterNode();
  nodesStopped.countDown();
  client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).get();
  assertThat(statesFound,Matchers.hasSize(2));
}
