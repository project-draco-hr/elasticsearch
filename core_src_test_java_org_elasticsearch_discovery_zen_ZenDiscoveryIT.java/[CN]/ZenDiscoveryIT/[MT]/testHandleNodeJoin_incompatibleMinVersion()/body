{
  Settings nodeSettings=Settings.builder().put("discovery.type","zen").build();
  String nodeName=internalCluster().startNode(nodeSettings,Version.CURRENT);
  ZenDiscovery zenDiscovery=(ZenDiscovery)internalCluster().getInstance(Discovery.class,nodeName);
  ClusterService clusterService=internalCluster().getInstance(ClusterService.class,nodeName);
  DiscoveryNode node=new DiscoveryNode("_node_id",new InetSocketTransportAddress(InetAddress.getByName("0.0.0.0"),0),emptyMap(),emptySet(),previousMajorVersion);
  final AtomicReference<IllegalStateException> holder=new AtomicReference<>();
  zenDiscovery.handleJoinRequest(node,clusterService.state(),new MembershipAction.JoinCallback(){
    @Override public void onSuccess(){
    }
    @Override public void onFailure(    Throwable t){
      holder.set((IllegalStateException)t);
    }
  }
);
  assertThat(holder.get(),notNullValue());
  assertThat(holder.get().getMessage(),equalTo("Can't handle join request from a node with a version [" + previousMajorVersion + "] that is lower than the minimum compatible version ["+ Version.CURRENT.minimumCompatibilityVersion()+ "]"));
}
