{
  XContentParser parser=parseContext.parser();
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  String type=null;
  String id=null;
  String queryName=null;
  String currentFieldName=null;
  boolean ignoreUnmapped=DEFAULT_IGNORE_UNMAPPED;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token.isValue()) {
      if (parseContext.getParseFieldMatcher().match(currentFieldName,TYPE_FIELD)) {
        type=parser.text();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,ID_FIELD)) {
        id=parser.text();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,IGNORE_UNMAPPED_FIELD)) {
        ignoreUnmapped=parser.booleanValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.BOOST_FIELD)) {
        boost=parser.floatValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.NAME_FIELD)) {
        queryName=parser.text();
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"[parent_id] query does not support [" + currentFieldName + "]");
      }
    }
 else {
      throw new ParsingException(parser.getTokenLocation(),"[parent_id] query does not support [" + currentFieldName + "]");
    }
  }
  ParentIdQueryBuilder queryBuilder=new ParentIdQueryBuilder(type,id);
  queryBuilder.queryName(queryName);
  queryBuilder.boost(boost);
  queryBuilder.ignoreUnmapped(ignoreUnmapped);
  return queryBuilder;
}
