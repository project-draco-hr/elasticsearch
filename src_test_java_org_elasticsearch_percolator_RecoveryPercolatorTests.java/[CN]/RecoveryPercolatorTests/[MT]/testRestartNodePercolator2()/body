{
  createIndex("test");
  logger.info("--> register a query");
  client().prepareIndex("test",PercolatorService.TYPE_NAME,"kuku").setSource(jsonBuilder().startObject().field("color","blue").field("query",termQuery("field1","value1")).endObject()).setRefresh(true).execute().actionGet();
  assertThat(client().prepareCount().setTypes(PercolatorService.TYPE_NAME).setQuery(matchAllQuery()).execute().actionGet().getCount(),equalTo(1l));
  PercolateResponse percolate=client().preparePercolate().setIndices("test").setDocumentType("type1").setSource(jsonBuilder().startObject().startObject("doc").field("field1","value1").endObject().endObject()).execute().actionGet();
  assertMatchCount(percolate,1l);
  assertThat(percolate.getMatches(),arrayWithSize(1));
  cluster().rollingRestart();
  logger.info("Running Cluster Health (wait for the shards to startup)");
  ClusterHealthResponse clusterHealth=client().admin().cluster().health(clusterHealthRequest().waitForYellowStatus().waitForActiveShards(1)).actionGet();
  logger.info("Done Cluster Health, status " + clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(client().prepareCount().setTypes(PercolatorService.TYPE_NAME).setQuery(matchAllQuery()).execute().actionGet().getCount(),equalTo(1l));
  DeleteIndexResponse actionGet=client().admin().indices().prepareDelete("test").execute().actionGet();
  assertThat(actionGet.isAcknowledged(),equalTo(true));
  client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards",1)).execute().actionGet();
  clusterHealth=client().admin().cluster().health(clusterHealthRequest().waitForYellowStatus().waitForActiveShards(1)).actionGet();
  logger.info("Done Cluster Health, status " + clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(client().prepareCount().setTypes(PercolatorService.TYPE_NAME).setQuery(matchAllQuery()).execute().actionGet().getCount(),equalTo(0l));
  percolate=client().preparePercolate().setIndices("test").setDocumentType("type1").setSource(jsonBuilder().startObject().startObject("doc").field("field1","value1").endObject().endObject()).execute().actionGet();
  assertMatchCount(percolate,0l);
  assertThat(percolate.getMatches(),emptyArray());
  logger.info("--> register a query");
  client().prepareIndex("test",PercolatorService.TYPE_NAME,"kuku").setSource(jsonBuilder().startObject().field("color","blue").field("query",termQuery("field1","value1")).endObject()).setRefresh(true).execute().actionGet();
  assertThat(client().prepareCount().setTypes(PercolatorService.TYPE_NAME).setQuery(matchAllQuery()).execute().actionGet().getCount(),equalTo(1l));
  percolate=client().preparePercolate().setIndices("test").setDocumentType("type1").setSource(jsonBuilder().startObject().startObject("doc").field("field1","value1").endObject().endObject()).execute().actionGet();
  assertMatchCount(percolate,1l);
  assertThat(percolate.getMatches(),arrayWithSize(1));
}
