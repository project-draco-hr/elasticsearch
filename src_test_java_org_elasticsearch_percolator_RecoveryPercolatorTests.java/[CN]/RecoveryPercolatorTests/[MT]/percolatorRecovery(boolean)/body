{
  cluster().startNode(settingsBuilder().put("node.stay",true));
  cluster().startNode(settingsBuilder().put("node.stay",false));
  cluster().startNode(settingsBuilder().put("node.stay",false));
  ensureGreen();
  client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards",2).put("index.number_of_replicas",2)).get();
  ensureGreen();
  final Client client=cluster().client(new Predicate<Settings>(){
    @Override public boolean apply(    Settings input){
      return input.getAsBoolean("node.stay",true);
    }
  }
);
  final int numQueries=randomIntBetween(50,100);
  logger.info("--> register a queries");
  for (int i=0; i < numQueries; i++) {
    client.prepareIndex("test",PercolatorService.TYPE_NAME,Integer.toString(i)).setSource(jsonBuilder().startObject().field("query",matchAllQuery()).endObject()).get();
  }
  client.prepareIndex("test","type","1").setSource(jsonBuilder().startObject().field("field","a")).get();
  final AtomicBoolean run=new AtomicBoolean(true);
  final CountDownLatch done=new CountDownLatch(1);
  final AtomicReference<Throwable> error=new AtomicReference<>();
  Runnable r=new Runnable(){
    @Override public void run(){
      try {
        XContentBuilder doc=jsonBuilder().startObject().field("field","a").endObject();
        while (run.get()) {
          NodesInfoResponse nodesInfoResponse=client.admin().cluster().prepareNodesInfo().get();
          String node2Id=null;
          String node3Id=null;
          for (          NodeInfo nodeInfo : nodesInfoResponse) {
            if ("node2".equals(nodeInfo.getNode().getName())) {
              node2Id=nodeInfo.getNode().id();
            }
 else             if ("node3".equals(nodeInfo.getNode().getName())) {
              node3Id=nodeInfo.getNode().id();
            }
          }
          String preference;
          if (node2Id == null && node3Id == null) {
            preference="_local";
          }
 else           if (node2Id == null || node3Id == null) {
            if (node2Id != null) {
              preference="_prefer_node:" + node2Id;
            }
 else {
              preference="_prefer_node:" + node3Id;
            }
          }
 else {
            preference="_prefer_node:" + (randomBoolean() ? node2Id : node3Id);
          }
          if (multiPercolate) {
            MultiPercolateRequestBuilder builder=client.prepareMultiPercolate();
            int numPercolateRequest=randomIntBetween(50,100);
            for (int i=0; i < numPercolateRequest; i++) {
              if (randomBoolean()) {
                builder.add(client.preparePercolate().setPreference(preference).setGetRequest(Requests.getRequest("test").type("type").id("1")).setIndices("test").setDocumentType("type"));
              }
 else {
                builder.add(client.preparePercolate().setPreference(preference).setIndices("test").setDocumentType("type").setPercolateDoc(docBuilder().setDoc(doc)));
              }
            }
            MultiPercolateResponse response=builder.get();
            assertThat(response.items().length,equalTo(numPercolateRequest));
            for (            MultiPercolateResponse.Item item : response) {
              assertThat(item.isFailure(),equalTo(false));
              assertNoFailures(item.getResponse());
              assertThat(item.getResponse().getSuccessfulShards(),equalTo(item.getResponse().getTotalShards()));
              assertThat(item.getResponse().getCount(),equalTo((long)numQueries));
              assertThat(item.getResponse().getMatches().length,equalTo(numQueries));
            }
          }
 else {
            PercolateResponse response;
            if (randomBoolean()) {
              response=client.preparePercolate().setIndices("test").setDocumentType("type").setPercolateDoc(docBuilder().setDoc(doc)).setPreference(preference).get();
            }
 else {
              response=client.preparePercolate().setGetRequest(Requests.getRequest("test").type("type").id("1")).setIndices("test").setDocumentType("type").setPreference(preference).get();
            }
            assertNoFailures(response);
            assertThat(response.getSuccessfulShards(),equalTo(response.getTotalShards()));
            assertThat(response.getCount(),equalTo((long)numQueries));
            assertThat(response.getMatches().length,equalTo(numQueries));
          }
        }
      }
 catch (      Throwable t) {
        logger.info("Error in percolate thread...",t);
        run.set(false);
        error.set(t);
      }
 finally {
        done.countDown();
      }
    }
  }
;
  new Thread(r).start();
  Predicate<Settings> nodePredicate=new Predicate<Settings>(){
    @Override public boolean apply(    Settings input){
      return !input.getAsBoolean("node.stay",false);
    }
  }
;
  try {
    for (int i=0; i < 4; i++) {
      cluster().stopRandomNode(nodePredicate);
      client.admin().cluster().prepareHealth("test").setWaitForEvents(Priority.LANGUID).setTimeout(TimeValue.timeValueMinutes(2)).setWaitForYellowStatus().setWaitForActiveShards(4).get();
      assertThat(error.get(),nullValue());
      cluster().stopRandomNode(nodePredicate);
      client.admin().cluster().prepareHealth("test").setWaitForEvents(Priority.LANGUID).setTimeout(TimeValue.timeValueMinutes(2)).setWaitForYellowStatus().setWaitForActiveShards(2).get();
      assertThat(error.get(),nullValue());
      cluster().startNode();
      client.admin().cluster().prepareHealth("test").setWaitForEvents(Priority.LANGUID).setTimeout(TimeValue.timeValueMinutes(2)).setWaitForYellowStatus().setWaitForActiveShards(4).get();
      assertThat(error.get(),nullValue());
      cluster().startNode();
      client.admin().cluster().prepareHealth("test").setWaitForEvents(Priority.LANGUID).setTimeout(TimeValue.timeValueMinutes(2)).setWaitForGreenStatus().setWaitForActiveShards(6).get();
      assertThat(error.get(),nullValue());
    }
  }
  finally {
    run.set(false);
  }
  done.await();
  assertThat(error.get(),nullValue());
}
