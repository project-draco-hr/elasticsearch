{
  String mapping=jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("copy_test").field("type","text").array("copy_to","another_field","cyclic_test").endObject().startObject("another_field").field("type","text").endObject().startObject("cyclic_test").field("type","text").array("copy_to","copy_test").endObject().startObject("int_to_str_test").field("type","integer").field("doc_values",false).array("copy_to","another_field","new_field").endObject().endObject().endObject().endObject().string();
  IndexService index=createIndex("test");
  client().admin().indices().preparePutMapping("test").setType("type1").setSource(mapping).get();
  DocumentMapper docMapper=index.mapperService().documentMapper("type1");
  FieldMapper fieldMapper=docMapper.mappers().getMapper("copy_test");
  TextFieldMapper stringFieldMapper=(TextFieldMapper)fieldMapper;
  XContentBuilder builder=jsonBuilder().startObject();
  stringFieldMapper.toXContent(builder,ToXContent.EMPTY_PARAMS).endObject();
  builder.close();
  Map<String,Object> serializedMap;
  try (XContentParser parser=JsonXContent.jsonXContent.createParser(builder.bytes())){
    serializedMap=parser.map();
  }
   Map<String,Object> copyTestMap=(Map<String,Object>)serializedMap.get("copy_test");
  assertThat(copyTestMap.get("type").toString(),is("text"));
  List<String> copyToList=(List<String>)copyTestMap.get("copy_to");
  assertThat(copyToList.size(),equalTo(2));
  assertThat(copyToList.get(0).toString(),equalTo("another_field"));
  assertThat(copyToList.get(1).toString(),equalTo("cyclic_test"));
  BytesReference json=jsonBuilder().startObject().field("copy_test","foo").field("cyclic_test","bar").field("int_to_str_test",42).endObject().bytes();
  ParsedDocument parsedDoc=docMapper.parse("test","type1","1",json);
  ParseContext.Document doc=parsedDoc.rootDoc();
  assertThat(doc.getFields("copy_test").length,equalTo(2));
  assertThat(doc.getFields("copy_test")[0].stringValue(),equalTo("foo"));
  assertThat(doc.getFields("copy_test")[1].stringValue(),equalTo("bar"));
  assertThat(doc.getFields("another_field").length,equalTo(2));
  assertThat(doc.getFields("another_field")[0].stringValue(),equalTo("foo"));
  assertThat(doc.getFields("another_field")[1].stringValue(),equalTo("42"));
  assertThat(doc.getFields("cyclic_test").length,equalTo(2));
  assertThat(doc.getFields("cyclic_test")[0].stringValue(),equalTo("foo"));
  assertThat(doc.getFields("cyclic_test")[1].stringValue(),equalTo("bar"));
  assertThat(doc.getFields("int_to_str_test").length,equalTo(1));
  assertThat(doc.getFields("int_to_str_test")[0].numericValue().intValue(),equalTo(42));
  assertThat(doc.getFields("new_field").length,equalTo(2));
  assertThat(doc.getFields("new_field")[0].numericValue().intValue(),equalTo(42));
  assertNotNull(parsedDoc.dynamicMappingsUpdate());
  client().admin().indices().preparePutMapping("test").setType("type1").setSource(parsedDoc.dynamicMappingsUpdate().toString()).get();
  docMapper=index.mapperService().documentMapper("type1");
  fieldMapper=docMapper.mappers().getMapper("new_field");
  assertThat(fieldMapper,instanceOf(LongFieldMapper.class));
}
