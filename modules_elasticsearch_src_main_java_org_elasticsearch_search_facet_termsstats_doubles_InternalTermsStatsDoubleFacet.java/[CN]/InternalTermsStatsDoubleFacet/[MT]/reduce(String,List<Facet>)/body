{
  if (facets.size() == 1) {
    if (requiredSize == 0) {
      InternalTermsStatsDoubleFacet tsFacet=(InternalTermsStatsDoubleFacet)facets.get(0);
      if (!tsFacet.entries.isEmpty()) {
        List<DoubleEntry> entries=tsFacet.mutableList();
        Collections.sort(entries,comparatorType.comparator());
      }
    }
    return facets.get(0);
  }
  int missing=0;
  THashMap<String,DoubleEntry> map=aggregateCache.get().get();
  map.clear();
  for (  Facet facet : facets) {
    InternalTermsStatsDoubleFacet tsFacet=(InternalTermsStatsDoubleFacet)facet;
    missing+=tsFacet.missing;
    for (    Entry entry : tsFacet) {
      DoubleEntry doubleEntry=(DoubleEntry)entry;
      DoubleEntry current=map.get(doubleEntry.term());
      if (current != null) {
        current.count+=doubleEntry.count;
        current.total+=doubleEntry.total;
      }
 else {
        map.put(doubleEntry.term(),doubleEntry);
      }
    }
  }
  if (requiredSize == 0) {
    DoubleEntry[] entries1=map.values().toArray(new DoubleEntry[map.size()]);
    Arrays.sort(entries1,comparatorType.comparator());
    return new InternalTermsStatsDoubleFacet(name,comparatorType,requiredSize,Arrays.asList(entries1),missing);
  }
 else {
    TreeSet<DoubleEntry> ordered=new BoundedTreeSet<DoubleEntry>(comparatorType.comparator(),requiredSize);
    ordered.addAll(map.values());
    return new InternalTermsStatsDoubleFacet(name,comparatorType,requiredSize,ordered,missing);
  }
}
