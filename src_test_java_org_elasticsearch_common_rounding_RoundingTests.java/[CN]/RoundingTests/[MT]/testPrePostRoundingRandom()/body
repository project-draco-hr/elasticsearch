{
  final long interval=randomIntBetween(1,100);
  Rounding.Interval internalRounding=new Rounding.Interval(interval);
  final long preRounding=randomIntBetween(-100,100);
  final long postRounding=randomIntBetween(-100,100);
  Rounding.PrePostRounding prePost=new Rounding.PrePostRounding(new Rounding.Interval(interval),preRounding,postRounding);
  long safetyMargin=Math.abs(interval) + Math.abs(preRounding) + Math.abs(postRounding);
  for (int i=0; i < 1000; ++i) {
    long l=Math.max(randomLong() - safetyMargin,Long.MIN_VALUE + safetyMargin);
    final long key=prePost.roundKey(l);
    final long r=prePost.round(l);
    String message="round(" + l + ", interval="+ interval+ ") = "+ r;
    assertEquals(message,internalRounding.round(l + preRounding),r - postRounding);
    assertThat(message,r - postRounding,lessThanOrEqualTo(l + preRounding));
    assertThat(message,r + interval - postRounding,greaterThan(l + preRounding));
    assertEquals(message,r,key * interval + postRounding);
  }
}
