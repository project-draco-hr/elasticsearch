{
  Version version=randomVersion(random());
  InternalSignificantTerms[] sigTerms=getRandomSignificantTerms(getRandomSignificanceheuristic());
  ByteArrayOutputStream outBuffer=new ByteArrayOutputStream();
  OutputStreamStreamOutput out=new OutputStreamStreamOutput(outBuffer);
  out.setVersion(version);
  sigTerms[0].writeTo(out);
  ByteArrayInputStream inBuffer=new ByteArrayInputStream(outBuffer.toByteArray());
  StreamInput in=new InputStreamStreamInput(inBuffer);
  NamedWriteableRegistry registry=new NamedWriteableRegistry();
  new SearchModule(Settings.EMPTY,registry,false);
  in=new NamedWriteableAwareStreamInput(in,registry);
  in.setVersion(version);
  sigTerms[1].readFrom(in);
  assertTrue(sigTerms[1].significanceHeuristic.equals(sigTerms[0].significanceHeuristic));
  InternalSignificantTerms.Bucket originalBucket=(InternalSignificantTerms.Bucket)sigTerms[0].buckets.get(0);
  InternalSignificantTerms.Bucket streamedBucket=(InternalSignificantTerms.Bucket)sigTerms[1].buckets.get(0);
  assertThat(originalBucket.getKeyAsString(),equalTo(streamedBucket.getKeyAsString()));
  assertThat(originalBucket.getSupersetDf(),equalTo(streamedBucket.getSupersetDf()));
  assertThat(originalBucket.getSubsetDf(),equalTo(streamedBucket.getSubsetDf()));
  assertThat(streamedBucket.getSubsetSize(),equalTo(10L));
  assertThat(streamedBucket.getSupersetSize(),equalTo(20L));
}
