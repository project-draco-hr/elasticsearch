{
  Version version=randomVersion(random());
  InternalMappedSignificantTerms<?,?> sigTerms=getRandomSignificantTerms(getRandomSignificanceheuristic());
  ByteArrayOutputStream outBuffer=new ByteArrayOutputStream();
  OutputStreamStreamOutput out=new OutputStreamStreamOutput(outBuffer);
  out.setVersion(version);
  out.writeNamedWriteable(sigTerms);
  ByteArrayInputStream inBuffer=new ByteArrayInputStream(outBuffer.toByteArray());
  StreamInput in=new InputStreamStreamInput(inBuffer);
  SearchModule searchModule=new SearchModule(Settings.EMPTY,false,emptyList());
  NamedWriteableRegistry registry=new NamedWriteableRegistry(searchModule.getNamedWriteables());
  in=new NamedWriteableAwareStreamInput(in,registry);
  in.setVersion(version);
  InternalMappedSignificantTerms<?,?> read=(InternalMappedSignificantTerms<?,?>)in.readNamedWriteable(InternalAggregation.class);
  assertEquals(sigTerms.significanceHeuristic,read.significanceHeuristic);
  SignificantTerms.Bucket originalBucket=sigTerms.getBuckets().get(0);
  SignificantTerms.Bucket streamedBucket=read.getBuckets().get(0);
  assertThat(originalBucket.getKeyAsString(),equalTo(streamedBucket.getKeyAsString()));
  assertThat(originalBucket.getSupersetDf(),equalTo(streamedBucket.getSupersetDf()));
  assertThat(originalBucket.getSubsetDf(),equalTo(streamedBucket.getSubsetDf()));
  assertThat(streamedBucket.getSubsetSize(),equalTo(10L));
  assertThat(streamedBucket.getSupersetSize(),equalTo(20L));
}
