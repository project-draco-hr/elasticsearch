{
  assertScriptModesNonNull=false;
  ImmutableSettings.Builder builder=ImmutableSettings.builder().put(ScriptService.DISABLE_DYNAMIC_SCRIPTING_SETTING,randomFrom("all","true","none","false","sandbox","sandboxed"));
  int iterations=randomIntBetween(1,5);
  for (int i=0; i < iterations; i++) {
    if (randomBoolean()) {
      builder.put("script." + randomFrom(ScriptType.values()),randomFrom(ScriptMode.values()));
    }
 else {
      if (randomBoolean()) {
        builder.put(ScriptModes.SCRIPT_SETTINGS_PREFIX + randomFrom(ScriptContext.values()),randomFrom(ScriptMode.values()));
      }
 else {
        builder.put(specificEngineOpSettings(GroovyScriptEngineService.NAME,randomFrom(ScriptType.values()),randomFrom(ScriptContext.values())),randomFrom(ScriptMode.values()));
      }
    }
  }
  Settings settings=builder.build();
  try {
    this.scriptModes=new ScriptModes(scriptEngines,settings,Loggers.getLogger(ScriptModesTests.class));
    fail("ScriptModes should have thrown an error due to conflicting settings");
  }
 catch (  ElasticsearchIllegalArgumentException e) {
    assertThat(e.getMessage(),containsString("conflicting scripting settings have been specified"));
    for (    Map.Entry<String,String> scriptSettingEntry : settings.getAsSettings("script").getAsMap().entrySet()) {
      assertThat(e.getMessage(),containsString(ScriptModes.SCRIPT_SETTINGS_PREFIX + scriptSettingEntry.getKey() + ": "+ scriptSettingEntry.getValue()));
    }
  }
}
