{
  XContentParser.Token token;
  String currentFieldName=null;
  String[] bucketsPaths=null;
  String format=null;
  GapPolicy gapPolicy=GapPolicy.SKIP;
  int lag=1;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.VALUE_STRING) {
      if (context.parseFieldMatcher().match(currentFieldName,FORMAT)) {
        format=parser.text();
      }
 else       if (context.parseFieldMatcher().match(currentFieldName,BUCKETS_PATH)) {
        bucketsPaths=new String[]{parser.text()};
      }
 else       if (context.parseFieldMatcher().match(currentFieldName,GAP_POLICY)) {
        gapPolicy=GapPolicy.parse(context,parser.text(),parser.getTokenLocation());
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ reducerName+ "]: ["+ currentFieldName+ "].",parser.getTokenLocation());
      }
    }
 else     if (token == XContentParser.Token.VALUE_NUMBER) {
      if (context.parseFieldMatcher().match(currentFieldName,LAG)) {
        lag=parser.intValue(true);
        if (lag <= 0) {
          throw new SearchParseException(context,"Lag must be a positive, non-zero integer.  Value supplied was" + lag + " in ["+ reducerName+ "]: ["+ currentFieldName+ "].",parser.getTokenLocation());
        }
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ reducerName+ "]: ["+ currentFieldName+ "].",parser.getTokenLocation());
      }
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if (context.parseFieldMatcher().match(currentFieldName,BUCKETS_PATH)) {
        List<String> paths=new ArrayList<>();
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          String path=parser.text();
          paths.add(path);
        }
        bucketsPaths=paths.toArray(new String[paths.size()]);
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ reducerName+ "]: ["+ currentFieldName+ "].",parser.getTokenLocation());
      }
    }
 else {
      throw new SearchParseException(context,"Unexpected token " + token + " in ["+ reducerName+ "].",parser.getTokenLocation());
    }
  }
  if (bucketsPaths == null) {
    throw new SearchParseException(context,"Missing required field [" + BUCKETS_PATH.getPreferredName() + "] for derivative aggregation ["+ reducerName+ "]",parser.getTokenLocation());
  }
  ValueFormatter formatter;
  if (format != null) {
    formatter=ValueFormat.Patternable.Number.format(format).formatter();
  }
 else {
    formatter=ValueFormatter.RAW;
  }
  return new SerialDiffPipelineAggregator.Factory(reducerName,bucketsPaths,formatter,gapPolicy,lag);
}
