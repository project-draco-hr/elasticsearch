{
  writer.writeDebugInfo(location);
  left.write(writer,globals);
  if (!right.isNull) {
    right.write(writer,globals);
  }
  Label jump=new Label();
  Label end=new Label();
  boolean eq=(operation == Operation.EQ || operation == Operation.EQR);
  boolean ne=(operation == Operation.NE || operation == Operation.NER);
  boolean lt=operation == Operation.LT;
  boolean lte=operation == Operation.LTE;
  boolean gt=operation == Operation.GT;
  boolean gte=operation == Operation.GTE;
  boolean writejump=true;
switch (promotedType.sort) {
case VOID:
case BYTE:
case SHORT:
case CHAR:
    throw createError(new IllegalStateException("Illegal tree structure."));
case BOOL:
  if (eq)   writer.ifCmp(promotedType.type,MethodWriter.EQ,jump);
 else   if (ne)   writer.ifCmp(promotedType.type,MethodWriter.NE,jump);
 else {
    throw createError(new IllegalStateException("Illegal tree structure."));
  }
break;
case INT:
case LONG:
case FLOAT:
case DOUBLE:
if (eq) writer.ifCmp(promotedType.type,MethodWriter.EQ,jump);
 else if (ne) writer.ifCmp(promotedType.type,MethodWriter.NE,jump);
 else if (lt) writer.ifCmp(promotedType.type,MethodWriter.LT,jump);
 else if (lte) writer.ifCmp(promotedType.type,MethodWriter.LE,jump);
 else if (gt) writer.ifCmp(promotedType.type,MethodWriter.GT,jump);
 else if (gte) writer.ifCmp(promotedType.type,MethodWriter.GE,jump);
 else {
throw createError(new IllegalStateException("Illegal tree structure."));
}
break;
case DEF:
org.objectweb.asm.Type booleanType=org.objectweb.asm.Type.getType(boolean.class);
org.objectweb.asm.Type descriptor=org.objectweb.asm.Type.getMethodType(booleanType,left.actual.type,right.actual.type);
if (eq) {
if (right.isNull) {
writer.ifNull(jump);
}
 else if (!left.isNull && operation == Operation.EQ) {
writer.invokeDefCall("eq",descriptor,DefBootstrap.BINARY_OPERATOR,DefBootstrap.OPERATOR_ALLOWS_NULL);
writejump=false;
}
 else {
writer.ifCmp(promotedType.type,MethodWriter.EQ,jump);
}
}
 else if (ne) {
if (right.isNull) {
writer.ifNonNull(jump);
}
 else if (!left.isNull && operation == Operation.NE) {
writer.invokeDefCall("eq",descriptor,DefBootstrap.BINARY_OPERATOR,DefBootstrap.OPERATOR_ALLOWS_NULL);
writer.ifZCmp(MethodWriter.EQ,jump);
}
 else {
writer.ifCmp(promotedType.type,MethodWriter.NE,jump);
}
}
 else if (lt) {
writer.invokeDefCall("lt",descriptor,DefBootstrap.BINARY_OPERATOR,0);
writejump=false;
}
 else if (lte) {
writer.invokeDefCall("lte",descriptor,DefBootstrap.BINARY_OPERATOR,0);
writejump=false;
}
 else if (gt) {
writer.invokeDefCall("gt",descriptor,DefBootstrap.BINARY_OPERATOR,0);
writejump=false;
}
 else if (gte) {
writer.invokeDefCall("gte",descriptor,DefBootstrap.BINARY_OPERATOR,0);
writejump=false;
}
 else {
throw createError(new IllegalStateException("Illegal tree structure."));
}
break;
default :
if (eq) {
if (right.isNull) {
writer.ifNull(jump);
}
 else if (operation == Operation.EQ) {
writer.invokeStatic(OBJECTS_TYPE,EQUALS);
writejump=false;
}
 else {
writer.ifCmp(promotedType.type,MethodWriter.EQ,jump);
}
}
 else if (ne) {
if (right.isNull) {
writer.ifNonNull(jump);
}
 else if (operation == Operation.NE) {
writer.invokeStatic(OBJECTS_TYPE,EQUALS);
writer.ifZCmp(MethodWriter.EQ,jump);
}
 else {
writer.ifCmp(promotedType.type,MethodWriter.NE,jump);
}
}
 else {
throw createError(new IllegalStateException("Illegal tree structure."));
}
}
if (writejump) {
writer.push(false);
writer.goTo(end);
writer.mark(jump);
writer.push(true);
writer.mark(end);
}
}
