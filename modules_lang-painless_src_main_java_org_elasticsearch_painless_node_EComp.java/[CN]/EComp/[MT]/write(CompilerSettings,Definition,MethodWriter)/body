{
  final boolean branch=tru != null || fals != null;
  final org.objectweb.asm.Type rtype=right.actual.type;
  final Sort rsort=right.actual.sort;
  left.write(settings,definition,adapter);
  if (!right.isNull) {
    right.write(settings,definition,adapter);
  }
  final Label jump=tru != null ? tru : fals != null ? fals : new Label();
  final Label end=new Label();
  final boolean eq=(operation == Operation.EQ || operation == Operation.EQR) && (tru != null || fals == null) || (operation == Operation.NE || operation == Operation.NER) && fals != null;
  final boolean ne=(operation == Operation.NE || operation == Operation.NER) && (tru != null || fals == null) || (operation == Operation.EQ || operation == Operation.EQR) && fals != null;
  final boolean lt=operation == Operation.LT && (tru != null || fals == null) || operation == Operation.GTE && fals != null;
  final boolean lte=operation == Operation.LTE && (tru != null || fals == null) || operation == Operation.GT && fals != null;
  final boolean gt=operation == Operation.GT && (tru != null || fals == null) || operation == Operation.LTE && fals != null;
  final boolean gte=operation == Operation.GTE && (tru != null || fals == null) || operation == Operation.LT && fals != null;
  boolean writejump=true;
switch (rsort) {
case VOID:
case BYTE:
case SHORT:
case CHAR:
    throw new IllegalStateException(error("Illegal tree structure."));
case BOOL:
  if (eq)   adapter.ifZCmp(MethodWriter.EQ,jump);
 else   if (ne)   adapter.ifZCmp(MethodWriter.NE,jump);
 else {
    throw new IllegalStateException(error("Illegal tree structure."));
  }
break;
case INT:
case LONG:
case FLOAT:
case DOUBLE:
if (eq) adapter.ifCmp(rtype,MethodWriter.EQ,jump);
 else if (ne) adapter.ifCmp(rtype,MethodWriter.NE,jump);
 else if (lt) adapter.ifCmp(rtype,MethodWriter.LT,jump);
 else if (lte) adapter.ifCmp(rtype,MethodWriter.LE,jump);
 else if (gt) adapter.ifCmp(rtype,MethodWriter.GT,jump);
 else if (gte) adapter.ifCmp(rtype,MethodWriter.GE,jump);
 else {
throw new IllegalStateException(error("Illegal tree structure."));
}
break;
case DEF:
if (eq) {
if (right.isNull) {
adapter.ifNull(jump);
}
 else if (!left.isNull && (operation == Operation.EQ || operation == Operation.NE)) {
adapter.invokeStatic(DEF_TYPE,DEF_EQ_CALL);
writejump=false;
}
 else {
adapter.ifCmp(rtype,MethodWriter.EQ,jump);
}
}
 else if (ne) {
if (right.isNull) {
adapter.ifNonNull(jump);
}
 else if (!left.isNull && (operation == Operation.EQ || operation == Operation.NE)) {
adapter.invokeStatic(DEF_TYPE,DEF_EQ_CALL);
adapter.ifZCmp(MethodWriter.EQ,jump);
}
 else {
adapter.ifCmp(rtype,MethodWriter.NE,jump);
}
}
 else if (lt) {
adapter.invokeStatic(DEF_TYPE,DEF_LT_CALL);
writejump=false;
}
 else if (lte) {
adapter.invokeStatic(DEF_TYPE,DEF_LTE_CALL);
writejump=false;
}
 else if (gt) {
adapter.invokeStatic(DEF_TYPE,DEF_GT_CALL);
writejump=false;
}
 else if (gte) {
adapter.invokeStatic(DEF_TYPE,DEF_GTE_CALL);
writejump=false;
}
 else {
throw new IllegalStateException(error("Illegal tree structure."));
}
if (branch && !writejump) {
adapter.ifZCmp(MethodWriter.NE,jump);
}
break;
default :
if (eq) {
if (right.isNull) {
adapter.ifNull(jump);
}
 else if (operation == Operation.EQ || operation == Operation.NE) {
adapter.invokeStatic(UTILITY_TYPE,CHECKEQUALS);
if (branch) {
adapter.ifZCmp(MethodWriter.NE,jump);
}
writejump=false;
}
 else {
adapter.ifCmp(rtype,MethodWriter.EQ,jump);
}
}
 else if (ne) {
if (right.isNull) {
adapter.ifNonNull(jump);
}
 else if (operation == Operation.EQ || operation == Operation.NE) {
adapter.invokeStatic(UTILITY_TYPE,CHECKEQUALS);
adapter.ifZCmp(MethodWriter.EQ,jump);
}
 else {
adapter.ifCmp(rtype,MethodWriter.NE,jump);
}
}
 else {
throw new IllegalStateException(error("Illegal tree structure."));
}
}
if (!branch && writejump) {
adapter.push(false);
adapter.goTo(end);
adapter.mark(jump);
adapter.push(true);
adapter.mark(end);
}
}
