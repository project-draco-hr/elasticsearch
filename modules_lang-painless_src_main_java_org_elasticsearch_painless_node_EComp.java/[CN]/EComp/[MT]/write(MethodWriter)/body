{
  boolean branch=tru != null || fals != null;
  org.objectweb.asm.Type rtype=right.actual.type;
  Sort rsort=right.actual.sort;
  left.write(writer);
  if (!right.isNull) {
    right.write(writer);
  }
  Label jump=tru != null ? tru : fals != null ? fals : new Label();
  Label end=new Label();
  boolean eq=(operation == Operation.EQ || operation == Operation.EQR) && (tru != null || fals == null) || (operation == Operation.NE || operation == Operation.NER) && fals != null;
  boolean ne=(operation == Operation.NE || operation == Operation.NER) && (tru != null || fals == null) || (operation == Operation.EQ || operation == Operation.EQR) && fals != null;
  boolean lt=operation == Operation.LT && (tru != null || fals == null) || operation == Operation.GTE && fals != null;
  boolean lte=operation == Operation.LTE && (tru != null || fals == null) || operation == Operation.GT && fals != null;
  boolean gt=operation == Operation.GT && (tru != null || fals == null) || operation == Operation.LTE && fals != null;
  boolean gte=operation == Operation.GTE && (tru != null || fals == null) || operation == Operation.LT && fals != null;
  boolean writejump=true;
switch (rsort) {
case VOID:
case BYTE:
case SHORT:
case CHAR:
    throw new IllegalStateException(error("Illegal tree structure."));
case BOOL:
  if (eq)   writer.ifZCmp(MethodWriter.EQ,jump);
 else   if (ne)   writer.ifZCmp(MethodWriter.NE,jump);
 else {
    throw new IllegalStateException(error("Illegal tree structure."));
  }
break;
case INT:
case LONG:
case FLOAT:
case DOUBLE:
if (eq) writer.ifCmp(rtype,MethodWriter.EQ,jump);
 else if (ne) writer.ifCmp(rtype,MethodWriter.NE,jump);
 else if (lt) writer.ifCmp(rtype,MethodWriter.LT,jump);
 else if (lte) writer.ifCmp(rtype,MethodWriter.LE,jump);
 else if (gt) writer.ifCmp(rtype,MethodWriter.GT,jump);
 else if (gte) writer.ifCmp(rtype,MethodWriter.GE,jump);
 else {
throw new IllegalStateException(error("Illegal tree structure."));
}
break;
case DEF:
if (eq) {
if (right.isNull) {
writer.ifNull(jump);
}
 else if (!left.isNull && (operation == Operation.EQ || operation == Operation.NE)) {
writer.invokeStatic(DEF_UTIL_TYPE,DEF_EQ_CALL);
writejump=false;
}
 else {
writer.ifCmp(rtype,MethodWriter.EQ,jump);
}
}
 else if (ne) {
if (right.isNull) {
writer.ifNonNull(jump);
}
 else if (!left.isNull && (operation == Operation.EQ || operation == Operation.NE)) {
writer.invokeStatic(DEF_UTIL_TYPE,DEF_EQ_CALL);
writer.ifZCmp(MethodWriter.EQ,jump);
}
 else {
writer.ifCmp(rtype,MethodWriter.NE,jump);
}
}
 else if (lt) {
writer.invokeStatic(DEF_UTIL_TYPE,DEF_LT_CALL);
writejump=false;
}
 else if (lte) {
writer.invokeStatic(DEF_UTIL_TYPE,DEF_LTE_CALL);
writejump=false;
}
 else if (gt) {
writer.invokeStatic(DEF_UTIL_TYPE,DEF_GT_CALL);
writejump=false;
}
 else if (gte) {
writer.invokeStatic(DEF_UTIL_TYPE,DEF_GTE_CALL);
writejump=false;
}
 else {
throw new IllegalStateException(error("Illegal tree structure."));
}
if (branch && !writejump) {
writer.ifZCmp(MethodWriter.NE,jump);
}
break;
default :
if (eq) {
if (right.isNull) {
writer.ifNull(jump);
}
 else if (operation == Operation.EQ || operation == Operation.NE) {
writer.invokeStatic(UTILITY_TYPE,CHECKEQUALS);
if (branch) {
writer.ifZCmp(MethodWriter.NE,jump);
}
writejump=false;
}
 else {
writer.ifCmp(rtype,MethodWriter.EQ,jump);
}
}
 else if (ne) {
if (right.isNull) {
writer.ifNonNull(jump);
}
 else if (operation == Operation.EQ || operation == Operation.NE) {
writer.invokeStatic(UTILITY_TYPE,CHECKEQUALS);
writer.ifZCmp(MethodWriter.EQ,jump);
}
 else {
writer.ifCmp(rtype,MethodWriter.NE,jump);
}
}
 else {
throw new IllegalStateException(error("Illegal tree structure."));
}
}
if (!branch && writejump) {
writer.push(false);
writer.goTo(end);
writer.mark(jump);
writer.push(true);
writer.mark(end);
}
}
