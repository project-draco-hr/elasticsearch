{
  Settings indexSettings=Settings.settingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED,Version.CURRENT).build();
  Index index=new Index(randomAsciiOfLengthBetween(1,10),"_na_");
  IndexSettings idxSettings=IndexSettingsModule.newIndexSettings(index,indexSettings);
  QueryShardContext mockShardContext=new QueryShardContext(idxSettings,null,null,null,null,null,indicesQueriesRegistry){
    @Override public MappedFieldType fieldMapper(    String name){
      StringFieldMapper.Builder builder=new StringFieldMapper.Builder(name);
      return builder.build(new Mapper.BuilderContext(idxSettings.getSettings(),new ContentPath(1))).fieldType();
    }
  }
;
  mockShardContext.setMapUnmappedFieldAsString(true);
  for (int runs=0; runs < NUMBER_OF_TESTBUILDERS; runs++) {
    HighlightBuilder highlightBuilder=randomHighlighterBuilder();
    SearchContextHighlight highlight=highlightBuilder.build(mockShardContext);
    XContentBuilder builder=XContentFactory.contentBuilder(randomFrom(XContentType.values()));
    if (randomBoolean()) {
      builder.prettyPrint();
    }
    builder.startObject();
    highlightBuilder.innerXContent(builder);
    builder.endObject();
    XContentParser parser=XContentHelper.createParser(builder.bytes());
    SearchContextHighlight parsedHighlight=new HighlighterParseElement().parse(parser,mockShardContext);
    assertNotSame(highlight,parsedHighlight);
    assertEquals(highlight.globalForceSource(),parsedHighlight.globalForceSource());
    assertEquals(highlight.fields().size(),parsedHighlight.fields().size());
    Iterator<org.elasticsearch.search.highlight.SearchContextHighlight.Field> iterator=parsedHighlight.fields().iterator();
    for (    org.elasticsearch.search.highlight.SearchContextHighlight.Field field : highlight.fields()) {
      org.elasticsearch.search.highlight.SearchContextHighlight.Field otherField=iterator.next();
      assertEquals(field.field(),otherField.field());
      FieldOptions options=field.fieldOptions();
      FieldOptions otherOptions=otherField.fieldOptions();
      assertArrayEquals(options.boundaryChars(),options.boundaryChars());
      assertEquals(options.boundaryMaxScan(),otherOptions.boundaryMaxScan());
      assertEquals(options.encoder(),otherOptions.encoder());
      assertEquals(options.fragmentCharSize(),otherOptions.fragmentCharSize());
      assertEquals(options.fragmenter(),otherOptions.fragmenter());
      assertEquals(options.fragmentOffset(),otherOptions.fragmentOffset());
      assertEquals(options.highlighterType(),otherOptions.highlighterType());
      assertEquals(options.highlightFilter(),otherOptions.highlightFilter());
      assertEquals(options.highlightQuery(),otherOptions.highlightQuery());
      assertEquals(options.matchedFields(),otherOptions.matchedFields());
      assertEquals(options.noMatchSize(),otherOptions.noMatchSize());
      assertEquals(options.numberOfFragments(),otherOptions.numberOfFragments());
      assertEquals(options.options(),otherOptions.options());
      assertEquals(options.phraseLimit(),otherOptions.phraseLimit());
      assertArrayEquals(options.preTags(),otherOptions.preTags());
      assertArrayEquals(options.postTags(),otherOptions.postTags());
      assertEquals(options.requireFieldMatch(),otherOptions.requireFieldMatch());
      assertEquals(options.scoreOrdered(),otherOptions.scoreOrdered());
    }
  }
}
