{
  boolean dirty=false;
  for (  ShardRouting failedShard : failedShardEntries) {
    boolean shardDirty=false;
    boolean inRelocation=failedShard.relocatingNodeId() != null;
    if (inRelocation) {
      RoutingNode routingNode=routingNodes.nodesToShards().get(failedShard.currentNodeId());
      if (routingNode != null) {
        Iterator<MutableShardRouting> shards=routingNode.iterator();
        while (shards.hasNext()) {
          MutableShardRouting shard=shards.next();
          if (shard.shardId().equals(failedShard.shardId())) {
            shardDirty=true;
            shard.deassignNode();
            shards.remove();
            break;
          }
        }
      }
    }
    String nodeId=inRelocation ? failedShard.relocatingNodeId() : failedShard.currentNodeId();
    RoutingNode currentRoutingNode=routingNodes.nodesToShards().get(nodeId);
    if (currentRoutingNode == null) {
      continue;
    }
    Iterator<MutableShardRouting> shards=currentRoutingNode.iterator();
    while (shards.hasNext()) {
      MutableShardRouting shard=shards.next();
      if (shard.shardId().equals(failedShard.shardId())) {
        shardDirty=true;
        if (!inRelocation) {
          shard.deassignNode();
          shards.remove();
        }
 else {
          shard.cancelRelocation();
        }
        break;
      }
    }
    if (!shardDirty) {
      continue;
    }
 else {
      dirty=true;
    }
    if (inRelocation) {
      continue;
    }
    boolean allocated=false;
    List<RoutingNode> sortedNodesLeastToHigh=routingNodes.sortedNodesLeastToHigh();
    for (    RoutingNode target : sortedNodesLeastToHigh) {
      if (target.canAllocate(failedShard) && target.canAllocate(routingNodes) && !target.nodeId().equals(failedShard.currentNodeId())) {
        target.add(new MutableShardRouting(failedShard.index(),failedShard.id(),target.nodeId(),failedShard.relocatingNodeId(),failedShard.primary(),INITIALIZING));
        allocated=true;
        break;
      }
    }
    if (!allocated) {
      routingNodes.unassigned().add(new MutableShardRouting(failedShard.index(),failedShard.id(),null,failedShard.primary(),ShardRoutingState.UNASSIGNED));
    }
  }
  return dirty;
}
