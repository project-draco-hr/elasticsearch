{
  Version targetNodeVersion=randomVersion();
  StartRecoveryRequest outRequest=new StartRecoveryRequest(new ShardId("test",0),new DiscoveryNode("a",new LocalTransportAddress("1"),targetNodeVersion),new DiscoveryNode("b",new LocalTransportAddress("1"),targetNodeVersion),true,Collections.<String,StoreFileMetaData>emptyMap(),RecoveryState.Type.RELOCATION,1l);
  ByteArrayOutputStream outBuffer=new ByteArrayOutputStream();
  OutputStreamStreamOutput out=new OutputStreamStreamOutput(outBuffer);
  out.setVersion(targetNodeVersion);
  outRequest.writeTo(out);
  ByteArrayInputStream inBuffer=new ByteArrayInputStream(outBuffer.toByteArray());
  InputStreamStreamInput in=new InputStreamStreamInput(inBuffer);
  in.setVersion(targetNodeVersion);
  StartRecoveryRequest inRequest=new StartRecoveryRequest();
  inRequest.readFrom(in);
  assertThat(outRequest.shardId(),equalTo(inRequest.shardId()));
  assertThat(outRequest.sourceNode(),equalTo(inRequest.sourceNode()));
  assertThat(outRequest.targetNode(),equalTo(inRequest.targetNode()));
  assertThat(outRequest.markAsRelocated(),equalTo(inRequest.markAsRelocated()));
  assertThat(outRequest.existingFiles(),equalTo(inRequest.existingFiles()));
  assertThat(outRequest.recoveryId(),equalTo(inRequest.recoveryId()));
  if (targetNodeVersion.onOrAfter(Version.V_1_2_2)) {
    assertThat(outRequest.recoveryType(),equalTo(inRequest.recoveryType()));
  }
 else {
    assertThat(inRequest.recoveryType(),nullValue());
  }
}
