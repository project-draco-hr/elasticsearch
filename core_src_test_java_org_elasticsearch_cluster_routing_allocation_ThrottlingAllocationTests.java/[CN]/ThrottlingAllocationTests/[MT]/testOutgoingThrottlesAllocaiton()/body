{
  Settings settings=Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries",1).put("cluster.routing.allocation.node_initial_primaries_recoveries",1).put("cluster.routing.allocation.cluster_concurrent_rebalance",1).build();
  AllocationService strategy=createAllocationService(settings);
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(3).numberOfReplicas(0)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build();
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1")).put(newNode("node2")).put(newNode("node3"))).build();
  routingTable=strategy.reroute(clusterState,"reroute").routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(routingTable.shardsWithState(STARTED).size(),equalTo(0));
  assertThat(routingTable.shardsWithState(INITIALIZING).size(),equalTo(3));
  assertThat(routingTable.shardsWithState(UNASSIGNED).size(),equalTo(0));
  assertEquals(clusterState.getRoutingNodes().getIncomingRecoveries("node1"),1);
  assertEquals(clusterState.getRoutingNodes().getIncomingRecoveries("node2"),1);
  assertEquals(clusterState.getRoutingNodes().getIncomingRecoveries("node3"),1);
  assertEquals(clusterState.getRoutingNodes().getOutgoingRecoveries("node1"),0);
  assertEquals(clusterState.getRoutingNodes().getOutgoingRecoveries("node2"),0);
  assertEquals(clusterState.getRoutingNodes().getOutgoingRecoveries("node3"),0);
  routingTable=strategy.applyStartedShards(clusterState,routingTable.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertEquals(clusterState.getRoutingNodes().getIncomingRecoveries("node1"),0);
  assertEquals(clusterState.getRoutingNodes().getIncomingRecoveries("node2"),0);
  assertEquals(clusterState.getRoutingNodes().getIncomingRecoveries("node3"),0);
  assertEquals(clusterState.getRoutingNodes().getOutgoingRecoveries("node1"),0);
  assertEquals(clusterState.getRoutingNodes().getOutgoingRecoveries("node2"),0);
  assertEquals(clusterState.getRoutingNodes().getOutgoingRecoveries("node3"),0);
  RoutingAllocation.Result reroute=strategy.reroute(clusterState,new AllocationCommands(new MoveAllocationCommand("test",clusterState.getRoutingNodes().node("node1").iterator().next().shardId().id(),"node1","node2")));
  assertEquals(reroute.explanations().explanations().size(),1);
  assertEquals(reroute.explanations().explanations().get(0).decisions().type(),Decision.Type.YES);
  routingTable=reroute.routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertEquals(clusterState.getRoutingNodes().getIncomingRecoveries("node1"),0);
  assertEquals(clusterState.getRoutingNodes().getIncomingRecoveries("node2"),1);
  assertEquals(clusterState.getRoutingNodes().getIncomingRecoveries("node3"),0);
  assertEquals(clusterState.getRoutingNodes().getOutgoingRecoveries("node1"),1);
  assertEquals(clusterState.getRoutingNodes().getOutgoingRecoveries("node2"),0);
  assertEquals(clusterState.getRoutingNodes().getOutgoingRecoveries("node3"),0);
  reroute=strategy.reroute(clusterState,new AllocationCommands(new MoveAllocationCommand("test",clusterState.getRoutingNodes().node("node3").iterator().next().shardId().id(),"node3","node1")),true);
  assertEquals(reroute.explanations().explanations().size(),1);
  assertEquals(reroute.explanations().explanations().get(0).decisions().type(),Decision.Type.THROTTLE);
  assertEquals(clusterState.getRoutingNodes().getIncomingRecoveries("node1"),0);
  assertEquals(clusterState.getRoutingNodes().getIncomingRecoveries("node2"),1);
  assertEquals(clusterState.getRoutingNodes().getIncomingRecoveries("node3"),0);
  assertEquals(clusterState.getRoutingNodes().getOutgoingRecoveries("node1"),1);
  assertEquals(clusterState.getRoutingNodes().getOutgoingRecoveries("node2"),0);
  assertEquals(clusterState.getRoutingNodes().getOutgoingRecoveries("node3"),0);
  assertThat(routingTable.shardsWithState(STARTED).size(),equalTo(2));
  assertThat(routingTable.shardsWithState(INITIALIZING).size(),equalTo(1));
  assertThat(routingTable.shardsWithState(RELOCATING).size(),equalTo(1));
  assertThat(routingTable.shardsWithState(UNASSIGNED).size(),equalTo(0));
  reroute=strategy.reroute(clusterState,new AllocationCommands(new MoveAllocationCommand("test",clusterState.getRoutingNodes().node("node3").iterator().next().shardId().id(),"node3","node2")),true);
  assertEquals(reroute.explanations().explanations().size(),1);
  assertEquals(reroute.explanations().explanations().get(0).decisions().type(),Decision.Type.THROTTLE);
  assertEquals(clusterState.getRoutingNodes().getIncomingRecoveries("node1"),0);
  assertEquals(clusterState.getRoutingNodes().getIncomingRecoveries("node2"),1);
  assertEquals(clusterState.getRoutingNodes().getIncomingRecoveries("node3"),0);
  assertEquals(clusterState.getRoutingNodes().getOutgoingRecoveries("node1"),1);
  assertEquals(clusterState.getRoutingNodes().getOutgoingRecoveries("node2"),0);
  assertEquals(clusterState.getRoutingNodes().getOutgoingRecoveries("node3"),0);
  assertThat(routingTable.shardsWithState(STARTED).size(),equalTo(2));
  assertThat(routingTable.shardsWithState(INITIALIZING).size(),equalTo(1));
  assertThat(routingTable.shardsWithState(RELOCATING).size(),equalTo(1));
  assertThat(routingTable.shardsWithState(UNASSIGNED).size(),equalTo(0));
}
