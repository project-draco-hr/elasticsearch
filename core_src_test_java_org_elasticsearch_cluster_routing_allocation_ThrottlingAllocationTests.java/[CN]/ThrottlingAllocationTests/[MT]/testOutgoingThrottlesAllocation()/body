{
  AllocationService strategy=createAllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_outgoing_recoveries",1).build());
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(2)).build();
  RoutingTable initialRoutingTable=createRecoveryRoutingTable(metaData.index("test"));
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();
  logger.info("start one node, do reroute, only 1 should initialize");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1"))).build();
  clusterState=strategy.reroute(clusterState,"reroute");
  assertThat(clusterState.routingTable().shardsWithState(STARTED).size(),equalTo(0));
  assertThat(clusterState.routingTable().shardsWithState(INITIALIZING).size(),equalTo(1));
  assertThat(clusterState.routingTable().shardsWithState(UNASSIGNED).size(),equalTo(2));
  logger.info("start initializing");
  clusterState=strategy.applyStartedShards(clusterState,clusterState.routingTable().shardsWithState(INITIALIZING));
  assertThat(clusterState.routingTable().shardsWithState(STARTED).size(),equalTo(1));
  assertThat(clusterState.routingTable().shardsWithState(INITIALIZING).size(),equalTo(0));
  assertThat(clusterState.routingTable().shardsWithState(UNASSIGNED).size(),equalTo(2));
  logger.info("start one more node, first non-primary should start being allocated");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode("node2"))).build();
  clusterState=strategy.reroute(clusterState,"reroute");
  assertThat(clusterState.routingTable().shardsWithState(STARTED).size(),equalTo(1));
  assertThat(clusterState.routingTable().shardsWithState(INITIALIZING).size(),equalTo(1));
  assertThat(clusterState.routingTable().shardsWithState(UNASSIGNED).size(),equalTo(1));
  assertEquals(clusterState.getRoutingNodes().getOutgoingRecoveries("node1"),1);
  logger.info("start initializing non-primary");
  clusterState=strategy.applyStartedShards(clusterState,clusterState.routingTable().shardsWithState(INITIALIZING));
  assertThat(clusterState.routingTable().shardsWithState(STARTED).size(),equalTo(2));
  assertThat(clusterState.routingTable().shardsWithState(INITIALIZING).size(),equalTo(0));
  assertThat(clusterState.routingTable().shardsWithState(UNASSIGNED).size(),equalTo(1));
  assertEquals(clusterState.getRoutingNodes().getOutgoingRecoveries("node1"),0);
  logger.info("start one more node, initializing second non-primary");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode("node3"))).build();
  clusterState=strategy.reroute(clusterState,"reroute");
  assertThat(clusterState.routingTable().shardsWithState(STARTED).size(),equalTo(2));
  assertThat(clusterState.routingTable().shardsWithState(INITIALIZING).size(),equalTo(1));
  assertThat(clusterState.routingTable().shardsWithState(UNASSIGNED).size(),equalTo(0));
  assertEquals(clusterState.getRoutingNodes().getOutgoingRecoveries("node1"),1);
  logger.info("start one more node");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode("node4"))).build();
  clusterState=strategy.reroute(clusterState,"reroute");
  assertEquals(clusterState.getRoutingNodes().getOutgoingRecoveries("node1"),1);
  logger.info("move started non-primary to new node");
  AllocationService.CommandsResult commandsResult=strategy.reroute(clusterState,new AllocationCommands(new MoveAllocationCommand("test",0,"node2","node4")),true,false);
  assertEquals(commandsResult.explanations().explanations().size(),1);
  assertEquals(commandsResult.explanations().explanations().get(0).decisions().type(),Decision.Type.THROTTLE);
  clusterState=commandsResult.getClusterState();
  assertThat(clusterState.routingTable().shardsWithState(STARTED).size(),equalTo(1));
  assertThat(clusterState.routingTable().shardsWithState(RELOCATING).size(),equalTo(1));
  assertThat(clusterState.routingTable().shardsWithState(INITIALIZING).size(),equalTo(2));
  assertThat(clusterState.routingTable().shardsWithState(UNASSIGNED).size(),equalTo(0));
  assertEquals(clusterState.getRoutingNodes().getOutgoingRecoveries("node1"),2);
  assertEquals(clusterState.getRoutingNodes().getOutgoingRecoveries("node2"),0);
}
