{
  final Query hitQuery;
  if (isParentHit(hitContext.hit())) {
    String field=ParentFieldMapper.joinField(hitContext.hit().type());
    hitQuery=new DocValuesTermsQuery(field,hitContext.hit().id());
  }
 else   if (isChildHit(hitContext.hit())) {
    DocumentMapper hitDocumentMapper=mapperService.documentMapper(hitContext.hit().type());
    final String parentType=hitDocumentMapper.parentFieldMapper().type();
    SearchHitField parentField=hitContext.hit().field(ParentFieldMapper.NAME);
    if (parentField == null) {
      throw new IllegalStateException("All children must have a _parent");
    }
    hitQuery=new TermQuery(new Term(UidFieldMapper.NAME,Uid.createUid(parentType,parentField.getValue())));
  }
 else {
    return Lucene.EMPTY_TOP_DOCS;
  }
  BooleanQuery q=new BooleanQuery.Builder().add(query(),Occur.MUST).add(hitQuery,Occur.FILTER).add(documentMapper.typeFilter(),Occur.FILTER).build();
  if (size() == 0) {
    final int count=context.searcher().count(q);
    return new TopDocs(count,Lucene.EMPTY_SCORE_DOCS,0);
  }
 else {
    int topN=Math.min(from() + size(),context.searcher().getIndexReader().maxDoc());
    TopDocsCollector topDocsCollector;
    if (sort() != null) {
      topDocsCollector=TopFieldCollector.create(sort().sort,topN,true,trackScores(),trackScores());
    }
 else {
      topDocsCollector=TopScoreDocCollector.create(topN);
    }
    try {
      context.searcher().search(q,topDocsCollector);
    }
  finally {
      clearReleasables(Lifetime.COLLECTION);
    }
    return topDocsCollector.topDocs(from(),size());
  }
}
