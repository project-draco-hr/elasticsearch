{
  TermVectorRequest termVectorRequest=new TermVectorRequest(request.param("index"),request.param("type"),request.param("id"));
  termVectorRequest.routing(request.param("routing"));
  termVectorRequest.parent(request.param("parent"));
  termVectorRequest.preference(request.param("preference"));
  if (request.hasContent()) {
    try {
      parseRequest(request.content(),termVectorRequest);
    }
 catch (    IOException e1) {
      Set<String> selectedFields=termVectorRequest.selectedFields();
      String fieldString="all";
      if (selectedFields != null) {
        Strings.arrayToDelimitedString(termVectorRequest.selectedFields().toArray(new String[1])," ");
      }
      logger.error("Something is wrong with your parameters for the term vector request. I am using parameters " + "\n positions :" + termVectorRequest.positions() + "\n offsets :"+ termVectorRequest.offsets()+ "\n payloads :"+ termVectorRequest.payloads()+ "\n termStatistics :"+ termVectorRequest.termStatistics()+ "\n fieldStatistics :"+ termVectorRequest.fieldStatistics()+ "\nfields "+ fieldString,(Object)null);
    }
  }
  readURIParameters(termVectorRequest,request);
  client.termVector(termVectorRequest,new ActionListener<TermVectorResponse>(){
    @Override public void onResponse(    TermVectorResponse response){
      try {
        XContentBuilder builder=restContentBuilder(request);
        response.toXContent(builder,request);
        channel.sendResponse(new XContentRestResponse(request,OK,builder));
      }
 catch (      Throwable e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
