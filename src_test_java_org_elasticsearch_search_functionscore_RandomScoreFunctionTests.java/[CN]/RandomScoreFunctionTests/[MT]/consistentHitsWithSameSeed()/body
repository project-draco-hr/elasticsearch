{
  createIndex("test");
  ensureGreen();
  int docCount=randomIntBetween(100,200);
  for (int i=0; i < docCount; i++) {
    index("test","type","" + i,jsonBuilder().startObject().endObject());
  }
  flush();
  refresh();
  int outerIters=scaledRandomIntBetween(10,20);
  for (int o=0; o < outerIters; o++) {
    final long seed=randomLong();
    String preference=randomRealisticUnicodeOfLengthBetween(1,10);
    while (preference.startsWith("_")) {
      preference=randomRealisticUnicodeOfLengthBetween(1,10);
    }
    int innerIters=scaledRandomIntBetween(2,5);
    SearchHits hits=null;
    for (int i=0; i < innerIters; i++) {
      SearchResponse searchResponse=client().prepareSearch().setPreference(preference).setQuery(functionScoreQuery(matchAllQuery(),randomFunction(seed))).execute().actionGet();
      assertThat("Failures " + Arrays.toString(searchResponse.getShardFailures()),searchResponse.getShardFailures().length,CoreMatchers.equalTo(0));
      int hitCount=searchResponse.getHits().getHits().length;
      if (i == 0) {
        assertThat(hits,nullValue());
        hits=searchResponse.getHits();
      }
 else {
        assertThat(hits.getHits().length,equalTo(searchResponse.getHits().getHits().length));
        for (int j=0; j < hitCount; j++) {
          assertThat(searchResponse.getHits().getAt(j).score(),equalTo(hits.getAt(j).score()));
          assertThat(searchResponse.getHits().getAt(j).id(),equalTo(hits.getAt(j).id()));
        }
      }
    }
  }
}
