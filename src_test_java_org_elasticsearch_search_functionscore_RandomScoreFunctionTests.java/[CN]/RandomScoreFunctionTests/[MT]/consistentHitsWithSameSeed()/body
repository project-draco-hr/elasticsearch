{
  final int replicas=between(0,2);
  cluster().ensureAtLeastNumNodes(replicas + 1);
  assertAcked(client().admin().indices().prepareCreate("test").setSettings(ImmutableSettings.builder().put("index.number_of_shards",between(2,5)).put("index.number_of_replicas",replicas).build()));
  ensureGreen();
  int docCount=atLeast(100);
  for (int i=0; i < docCount; i++) {
    index("test","type","" + i,jsonBuilder().startObject().endObject());
  }
  flush();
  int outerIters=atLeast(10);
  for (int o=0; o < outerIters; o++) {
    final long seed=randomLong();
    final String preference=randomRealisticUnicodeOfLengthBetween(1,10);
    int innerIters=atLeast(2);
    SearchHits hits=null;
    for (int i=0; i < innerIters; i++) {
      SearchResponse searchResponse=client().prepareSearch().setPreference(preference).setQuery(functionScoreQuery(matchAllQuery(),randomFunction(seed))).execute().actionGet();
      assertThat("Failures " + Arrays.toString(searchResponse.getShardFailures()),searchResponse.getShardFailures().length,CoreMatchers.equalTo(0));
      int hitCount=searchResponse.getHits().getHits().length;
      if (i == 0) {
        assertThat(hits,nullValue());
        hits=searchResponse.getHits();
      }
 else {
        assertThat(hits.getHits().length,equalTo(searchResponse.getHits().getHits().length));
        for (int j=0; j < hitCount; j++) {
          assertThat(searchResponse.getHits().getAt(j).score(),equalTo(hits.getAt(j).score()));
          assertThat(searchResponse.getHits().getAt(j).id(),equalTo(hits.getAt(j).id()));
        }
      }
    }
  }
}
