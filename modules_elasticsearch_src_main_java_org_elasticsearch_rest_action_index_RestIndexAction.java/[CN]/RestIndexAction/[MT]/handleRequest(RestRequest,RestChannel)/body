{
  IndexRequest indexRequest=new IndexRequest(request.param("index"),request.param("type"),request.param("id"),request.contentAsBytes());
  indexRequest.timeout(request.paramAsTime("timeout",IndexRequest.DEFAULT_TIMEOUT));
  String sOpType=request.param("op_type");
  if (sOpType != null) {
    if ("index".equals(sOpType)) {
      indexRequest.opType(IndexRequest.OpType.INDEX);
    }
 else     if ("create".equals(sOpType)) {
      indexRequest.opType(IndexRequest.OpType.CREATE);
    }
 else {
      try {
        JsonBuilder builder=RestJsonBuilder.restJsonBuilder(request);
        channel.sendResponse(new JsonRestResponse(request,BAD_REQUEST,builder.startObject().field("error","opType [" + sOpType + "] not allowed, either [index] or [create] are allowed").endObject()));
      }
 catch (      IOException e1) {
        logger.warn("Failed to send response",e1);
        return;
      }
    }
  }
  indexRequest.listenerThreaded(false);
  indexRequest.operationThreaded(true);
  client.index(indexRequest,new ActionListener<IndexResponse>(){
    @Override public void onResponse(    IndexResponse result){
      try {
        JsonBuilder builder=RestJsonBuilder.restJsonBuilder(request);
        builder.startObject().field("ok",true).field("_index",result.index()).field("_type",result.type()).field("_id",result.id()).endObject();
        channel.sendResponse(new JsonRestResponse(request,OK,builder));
      }
 catch (      Exception e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new JsonThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
