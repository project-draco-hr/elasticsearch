{
  double lat=Double.NaN;
  double lon=Double.NaN;
  String geohash=null;
  if (parser.currentToken() == Token.START_OBJECT) {
    while (parser.nextToken() != Token.END_OBJECT) {
      if (parser.currentToken() == Token.FIELD_NAME) {
        String field=parser.text();
        if (LATITUDE.equals(field)) {
          parser.nextToken();
switch (parser.currentToken()) {
case VALUE_NUMBER:
case VALUE_STRING:
            lat=parser.doubleValue(true);
          break;
default :
        throw new ElasticsearchParseException("latitude must be a number");
    }
  }
 else   if (LONGITUDE.equals(field)) {
    parser.nextToken();
switch (parser.currentToken()) {
case VALUE_NUMBER:
case VALUE_STRING:
      lon=parser.doubleValue(true);
    break;
default :
  throw new ElasticsearchParseException("longitude must be a number");
}
}
 else if (GEOHASH.equals(field)) {
if (parser.nextToken() == Token.VALUE_STRING) {
geohash=parser.text();
}
 else {
throw new ElasticsearchParseException("geohash must be a string");
}
}
 else {
throw new ElasticsearchParseException("field must be either [{}], [{}] or [{}]",LATITUDE,LONGITUDE,GEOHASH);
}
}
 else {
throw new ElasticsearchParseException("token [{}] not allowed",parser.currentToken());
}
}
if (geohash != null) {
if (!Double.isNaN(lat) || !Double.isNaN(lon)) {
throw new ElasticsearchParseException("field must be either lat/lon or geohash");
}
 else {
return point.resetFromGeoHash(geohash);
}
}
 else if (Double.isNaN(lat)) {
throw new ElasticsearchParseException("field [{}] missing",LATITUDE);
}
 else if (Double.isNaN(lon)) {
throw new ElasticsearchParseException("field [{}] missing",LONGITUDE);
}
 else {
return point.reset(lat,lon);
}
}
 else if (parser.currentToken() == Token.START_ARRAY) {
int element=0;
while (parser.nextToken() != Token.END_ARRAY) {
if (parser.currentToken() == Token.VALUE_NUMBER) {
element++;
if (element == 1) {
lon=parser.doubleValue();
}
 else if (element == 2) {
lat=parser.doubleValue();
}
 else {
throw new ElasticsearchParseException("only two values allowed");
}
}
 else {
throw new ElasticsearchParseException("numeric value expected");
}
}
return point.reset(lat,lon);
}
 else if (parser.currentToken() == Token.VALUE_STRING) {
String data=parser.text();
return parseGeoPoint(data,point);
}
 else {
throw new ElasticsearchParseException("geo_point expected");
}
}
