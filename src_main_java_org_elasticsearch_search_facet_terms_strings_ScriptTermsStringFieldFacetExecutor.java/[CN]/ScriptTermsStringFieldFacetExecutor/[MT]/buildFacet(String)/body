{
  if (facets.v().isEmpty()) {
    facets.release();
    return new InternalStringTermsFacet(facetName,comparatorType,size,ImmutableList.<InternalStringTermsFacet.TermEntry>of(),missing,total);
  }
 else {
    final boolean[] states=facets.v().allocated;
    final Object[] keys=facets.v().keys;
    final int[] values=facets.v().values;
    if (shardSize < EntryPriorityQueue.LIMIT) {
      EntryPriorityQueue ordered=new EntryPriorityQueue(shardSize,comparatorType.comparator());
      for (int i=0; i < states.length; i++) {
        if (states[i]) {
          BytesRef key=(BytesRef)keys[i];
          ordered.insertWithOverflow(new InternalStringTermsFacet.TermEntry(key,values[i]));
        }
      }
      InternalStringTermsFacet.TermEntry[] list=new InternalStringTermsFacet.TermEntry[ordered.size()];
      for (int i=ordered.size() - 1; i >= 0; i--) {
        list[i]=((InternalStringTermsFacet.TermEntry)ordered.pop());
      }
      facets.release();
      return new InternalStringTermsFacet(facetName,comparatorType,size,Arrays.asList(list),missing,total);
    }
 else {
      BoundedTreeSet<InternalStringTermsFacet.TermEntry> ordered=new BoundedTreeSet<InternalStringTermsFacet.TermEntry>(comparatorType.comparator(),shardSize);
      for (int i=0; i < states.length; i++) {
        if (states[i]) {
          BytesRef key=(BytesRef)keys[i];
          ordered.add(new InternalStringTermsFacet.TermEntry(key,values[i]));
        }
      }
      facets.release();
      return new InternalStringTermsFacet(facetName,comparatorType,size,ordered,missing,total);
    }
  }
}
