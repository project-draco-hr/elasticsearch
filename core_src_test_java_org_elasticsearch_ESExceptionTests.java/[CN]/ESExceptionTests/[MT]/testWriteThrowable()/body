{
  final QueryShardException queryShardException=new QueryShardException(new Index("foo","_na_"),"foobar",null);
  final UnknownException unknownException=new UnknownException("this exception is unknown",queryShardException);
  final Exception[] causes=new Exception[]{new IllegalStateException("foobar"),new IllegalArgumentException("alalaal"),new NullPointerException("boom"),new EOFException("dadada"),new ElasticsearchSecurityException("nono!"),new NumberFormatException("not a number"),new CorruptIndexException("baaaam booom","this is my resource"),new IndexFormatTooNewException("tooo new",1,2,3),new IndexFormatTooOldException("tooo new",1,2,3),new IndexFormatTooOldException("tooo new","very old version"),new ArrayIndexOutOfBoundsException("booom"),new StringIndexOutOfBoundsException("booom"),new FileNotFoundException("booom"),new NoSuchFileException("booom"),new AlreadyClosedException("closed!!",new NullPointerException()),new LockObtainFailedException("can't lock directory",new NullPointerException()),unknownException};
  for (  final Exception cause : causes) {
    BytesStreamOutput out=new BytesStreamOutput();
    ElasticsearchException ex=new ElasticsearchException("topLevel",cause);
    out.writeThrowable(ex);
    StreamInput in=out.bytes().streamInput();
    ElasticsearchException e=in.readException();
    assertEquals(e.getMessage(),ex.getMessage());
    assertTrue("Expected: " + e.getCause().getMessage() + " to contain: "+ ex.getCause().getClass().getName()+ " but it didn't",e.getCause().getMessage().contains(ex.getCause().getMessage()));
    if (ex.getCause().getClass() != UnknownException.class) {
      assertEquals(e.getCause().getClass(),ex.getCause().getClass());
    }
 else {
      assertEquals(e.getCause().getClass(),NotSerializableExceptionWrapper.class);
    }
    assertArrayEquals(e.getStackTrace(),ex.getStackTrace());
    assertTrue(e.getStackTrace().length > 1);
    ElasticsearchAssertions.assertVersionSerializable(VersionUtils.randomVersion(random()),cause);
    ElasticsearchAssertions.assertVersionSerializable(VersionUtils.randomVersion(random()),ex);
    ElasticsearchAssertions.assertVersionSerializable(VersionUtils.randomVersion(random()),e);
  }
}
