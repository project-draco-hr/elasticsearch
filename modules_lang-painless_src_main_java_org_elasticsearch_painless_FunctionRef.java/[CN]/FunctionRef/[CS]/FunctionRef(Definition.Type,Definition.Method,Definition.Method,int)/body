{
  invokedName=method.name;
  MethodType implType=impl.getMethodType();
  invokedType=MethodType.methodType(expected.clazz,implType.dropParameterTypes(numCaptures,implType.parameterCount()));
  interfaceMethodType=method.getMethodType().dropParameterTypes(0,1);
  final int tag;
  if ("<init>".equals(impl.name)) {
    tag=Opcodes.H_NEWINVOKESPECIAL;
  }
 else   if (Modifier.isStatic(impl.modifiers)) {
    tag=Opcodes.H_INVOKESTATIC;
  }
 else   if (impl.owner.clazz.isInterface()) {
    tag=Opcodes.H_INVOKEINTERFACE;
  }
 else {
    tag=Opcodes.H_INVOKEVIRTUAL;
  }
  final String owner;
  final boolean ownerIsInterface;
  if (impl.owner == null) {
    ownerIsInterface=false;
    owner=WriterConstants.CLASS_TYPE.getInternalName();
  }
 else   if (impl.augmentation) {
    ownerIsInterface=false;
    owner=WriterConstants.AUGMENTATION_TYPE.getInternalName();
  }
 else {
    ownerIsInterface=impl.owner.clazz.isInterface();
    owner=impl.owner.type.getInternalName();
  }
  implMethodASM=new Handle(tag,owner,impl.name,impl.method.getDescriptor(),ownerIsInterface);
  implMethod=impl.handle;
  samMethodType=adapt(interfaceMethodType,impl.getMethodType().dropParameterTypes(0,numCaptures));
}
