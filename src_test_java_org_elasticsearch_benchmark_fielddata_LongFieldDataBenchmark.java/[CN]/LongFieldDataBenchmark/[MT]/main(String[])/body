{
  final IndexWriterConfig iwc=new IndexWriterConfig(Lucene.VERSION,new KeywordAnalyzer());
  final String fieldName="f";
  final int numDocs=1000000;
  System.out.println("Data\tLoading time\tImplementation\tActual size\tExpected size");
  for (  Data data : Data.values()) {
    final RAMDirectory dir=new RAMDirectory();
    final IndexWriter indexWriter=new IndexWriter(dir,iwc);
    for (int i=0; i < numDocs; ++i) {
      final Document doc=new Document();
      final int numFields=data.numValues();
      for (int j=0; j < numFields; ++j) {
        doc.add(new LongField(fieldName,data.nextValue(),Store.NO));
      }
      indexWriter.addDocument(doc);
    }
    indexWriter.forceMerge(1,true);
    indexWriter.close();
    final DirectoryReader dr=DirectoryReader.open(dir);
    final IndexFieldDataService fds=new IndexFieldDataService(new Index("dummy"),new DummyCircuitBreakerService());
    final LongFieldMapper mapper=new LongFieldMapper.Builder(fieldName).build(new BuilderContext(null,new ContentPath(1)));
    final IndexNumericFieldData<AtomicNumericFieldData> fd=fds.getForField(mapper);
    final long start=System.nanoTime();
    final AtomicNumericFieldData afd=fd.loadDirect(SlowCompositeReaderWrapper.wrap(dr).getContext());
    final long loadingTimeMs=(System.nanoTime() - start) / 1000 / 1000;
    System.out.println(data + "\t" + loadingTimeMs+ "\t"+ afd.getClass().getSimpleName()+ "\t"+ RamUsageEstimator.humanReadableUnits(afd.ramBytesUsed()));
    dr.close();
  }
}
