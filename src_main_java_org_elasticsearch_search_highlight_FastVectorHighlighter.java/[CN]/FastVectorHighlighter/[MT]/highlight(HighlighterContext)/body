{
  SearchContextHighlight.Field field=highlighterContext.field;
  SearchContext context=highlighterContext.context;
  FetchSubPhase.HitContext hitContext=highlighterContext.hitContext;
  FieldMapper mapper=highlighterContext.mapper;
  if (!(mapper.fieldType().storeTermVectors() && mapper.fieldType().storeTermVectorOffsets() && mapper.fieldType().storeTermVectorPositions())) {
    throw new IllegalArgumentException("the field [" + highlighterContext.fieldName + "] should be indexed with term vector with position offsets to be used with fast vector highlighter");
  }
  Encoder encoder=field.fieldOptions().encoder().equals("html") ? HighlightUtils.Encoders.HTML : HighlightUtils.Encoders.DEFAULT;
  if (!hitContext.cache().containsKey(CACHE_KEY)) {
    hitContext.cache().put(CACHE_KEY,new HighlighterEntry());
  }
  HighlighterEntry cache=(HighlighterEntry)hitContext.cache().get(CACHE_KEY);
  try {
    FieldQuery fieldQuery;
    if (field.fieldOptions().requireFieldMatch()) {
      if (cache.fieldMatchFieldQuery == null) {
        cache.fieldMatchFieldQuery=new CustomFieldQuery(highlighterContext.query,hitContext.topLevelReader(),true,field.fieldOptions().requireFieldMatch());
      }
      fieldQuery=cache.fieldMatchFieldQuery;
    }
 else {
      if (cache.noFieldMatchFieldQuery == null) {
        cache.noFieldMatchFieldQuery=new CustomFieldQuery(highlighterContext.query,hitContext.topLevelReader(),true,field.fieldOptions().requireFieldMatch());
      }
      fieldQuery=cache.noFieldMatchFieldQuery;
    }
    MapperHighlightEntry entry=cache.mappers.get(mapper);
    if (entry == null) {
      FragListBuilder fragListBuilder;
      BaseFragmentsBuilder fragmentsBuilder;
      BoundaryScanner boundaryScanner=DEFAULT_BOUNDARY_SCANNER;
      if (field.fieldOptions().boundaryMaxScan() != SimpleBoundaryScanner.DEFAULT_MAX_SCAN || field.fieldOptions().boundaryChars() != SimpleBoundaryScanner.DEFAULT_BOUNDARY_CHARS) {
        boundaryScanner=new SimpleBoundaryScanner(field.fieldOptions().boundaryMaxScan(),field.fieldOptions().boundaryChars());
      }
      boolean forceSource=context.highlight().forceSource(field);
      if (field.fieldOptions().numberOfFragments() == 0) {
        fragListBuilder=new SingleFragListBuilder();
        if (!forceSource && mapper.fieldType().stored()) {
          fragmentsBuilder=new SimpleFragmentsBuilder(mapper,field.fieldOptions().preTags(),field.fieldOptions().postTags(),boundaryScanner);
        }
 else {
          fragmentsBuilder=new SourceSimpleFragmentsBuilder(mapper,context,hitContext,field.fieldOptions().preTags(),field.fieldOptions().postTags(),boundaryScanner);
        }
      }
 else {
        fragListBuilder=field.fieldOptions().fragmentOffset() == -1 ? new SimpleFragListBuilder() : new SimpleFragListBuilder(field.fieldOptions().fragmentOffset());
        if (field.fieldOptions().scoreOrdered()) {
          if (!forceSource && mapper.fieldType().stored()) {
            fragmentsBuilder=new ScoreOrderFragmentsBuilder(field.fieldOptions().preTags(),field.fieldOptions().postTags(),boundaryScanner);
          }
 else {
            fragmentsBuilder=new SourceScoreOrderFragmentsBuilder(mapper,context,hitContext,field.fieldOptions().preTags(),field.fieldOptions().postTags(),boundaryScanner);
          }
        }
 else {
          if (!forceSource && mapper.fieldType().stored()) {
            fragmentsBuilder=new SimpleFragmentsBuilder(mapper,field.fieldOptions().preTags(),field.fieldOptions().postTags(),boundaryScanner);
          }
 else {
            fragmentsBuilder=new SourceSimpleFragmentsBuilder(mapper,context,hitContext,field.fieldOptions().preTags(),field.fieldOptions().postTags(),boundaryScanner);
          }
        }
      }
      fragmentsBuilder.setDiscreteMultiValueHighlighting(termVectorMultiValue);
      entry=new MapperHighlightEntry();
      entry.fragListBuilder=fragListBuilder;
      entry.fragmentsBuilder=fragmentsBuilder;
      if (cache.fvh == null) {
        cache.fvh=new org.apache.lucene.search.vectorhighlight.FastVectorHighlighter();
      }
      CustomFieldQuery.highlightFilters.set(field.fieldOptions().highlightFilter());
      cache.mappers.put(mapper,entry);
    }
    cache.fvh.setPhraseLimit(field.fieldOptions().phraseLimit());
    String[] fragments;
    int numberOfFragments=field.fieldOptions().numberOfFragments() == 0 ? Integer.MAX_VALUE : field.fieldOptions().numberOfFragments();
    int fragmentCharSize=field.fieldOptions().numberOfFragments() == 0 ? Integer.MAX_VALUE : field.fieldOptions().fragmentCharSize();
    if (field.fieldOptions().matchedFields() != null && !field.fieldOptions().matchedFields().isEmpty()) {
      fragments=cache.fvh.getBestFragments(fieldQuery,hitContext.reader(),hitContext.docId(),mapper.names().indexName(),field.fieldOptions().matchedFields(),fragmentCharSize,numberOfFragments,entry.fragListBuilder,entry.fragmentsBuilder,field.fieldOptions().preTags(),field.fieldOptions().postTags(),encoder);
    }
 else {
      fragments=cache.fvh.getBestFragments(fieldQuery,hitContext.reader(),hitContext.docId(),mapper.names().indexName(),fragmentCharSize,numberOfFragments,entry.fragListBuilder,entry.fragmentsBuilder,field.fieldOptions().preTags(),field.fieldOptions().postTags(),encoder);
    }
    if (fragments != null && fragments.length > 0) {
      return new HighlightField(highlighterContext.fieldName,StringText.convertFromStringArray(fragments));
    }
    int noMatchSize=highlighterContext.field.fieldOptions().noMatchSize();
    if (noMatchSize > 0) {
      FieldFragList fieldFragList=new SimpleFieldFragList(-1);
      fieldFragList.add(0,noMatchSize,Collections.<WeightedPhraseInfo>emptyList());
      fragments=entry.fragmentsBuilder.createFragments(hitContext.reader(),hitContext.docId(),mapper.names().indexName(),fieldFragList,1,field.fieldOptions().preTags(),field.fieldOptions().postTags(),encoder);
      if (fragments != null && fragments.length > 0) {
        return new HighlightField(highlighterContext.fieldName,StringText.convertFromStringArray(fragments));
      }
    }
    return null;
  }
 catch (  Exception e) {
    throw new FetchPhaseExecutionException(context,"Failed to highlight field [" + highlighterContext.fieldName + "]",e);
  }
}
