{
  SearchContextHighlight.Field field=highlighterContext.field;
  SearchContext context=highlighterContext.context;
  FetchSubPhase.HitContext hitContext=highlighterContext.hitContext;
  FieldMapper<?> mapper=highlighterContext.mapper;
  if (!(mapper.fieldType().storeTermVectors() && mapper.fieldType().storeTermVectorOffsets() && mapper.fieldType().storeTermVectorPositions())) {
    throw new ElasticSearchIllegalArgumentException("the field [" + field.field() + "] should be indexed with term vector with position offsets to be used with fast vector highlighter");
  }
  Encoder encoder=field.encoder().equals("html") ? Encoders.HTML : Encoders.DEFAULT;
  if (!hitContext.cache().containsKey(CACHE_KEY)) {
    hitContext.cache().put(CACHE_KEY,new HighlighterEntry());
  }
  HighlighterEntry cache=(HighlighterEntry)hitContext.cache().get(CACHE_KEY);
  try {
    MapperHighlightEntry entry=cache.mappers.get(mapper);
    XFieldQuery fieldQuery=null;
    if (entry == null) {
      XFragListBuilder fragListBuilder;
      XBaseFragmentsBuilder fragmentsBuilder;
      BoundaryScanner boundaryScanner=DEFAULT_BOUNDARY_SCANNER;
      if (field.boundaryMaxScan() != SimpleBoundaryScanner.DEFAULT_MAX_SCAN || field.boundaryChars() != SimpleBoundaryScanner.DEFAULT_BOUNDARY_CHARS) {
        boundaryScanner=new SimpleBoundaryScanner(field.boundaryMaxScan(),field.boundaryChars());
      }
      if (field.numberOfFragments() == 0) {
        fragListBuilder=new XSingleFragListBuilder();
        if (mapper.fieldType().stored()) {
          fragmentsBuilder=new SimpleFragmentsBuilder(mapper,field.preTags(),field.postTags(),boundaryScanner);
        }
 else {
          fragmentsBuilder=new SourceSimpleFragmentsBuilder(mapper,context,field.preTags(),field.postTags(),boundaryScanner);
        }
      }
 else {
        fragListBuilder=field.fragmentOffset() == -1 ? new XSimpleFragListBuilder() : new XSimpleFragListBuilder(field.fragmentOffset());
        if (field.scoreOrdered()) {
          if (mapper.fieldType().stored()) {
            fragmentsBuilder=new XScoreOrderFragmentsBuilder(field.preTags(),field.postTags(),boundaryScanner);
          }
 else {
            fragmentsBuilder=new SourceScoreOrderFragmentsBuilder(mapper,context,field.preTags(),field.postTags(),boundaryScanner);
          }
        }
 else {
          if (mapper.fieldType().stored()) {
            fragmentsBuilder=new SimpleFragmentsBuilder(mapper,field.preTags(),field.postTags(),boundaryScanner);
          }
 else {
            fragmentsBuilder=new SourceSimpleFragmentsBuilder(mapper,context,field.preTags(),field.postTags(),boundaryScanner);
          }
        }
      }
      fragmentsBuilder.setDiscreteMultiValueHighlighting(termVectorMultiValue);
      entry=new MapperHighlightEntry();
      entry.fragListBuilder=fragListBuilder;
      entry.fragmentsBuilder=fragmentsBuilder;
      if (cache.fvh == null) {
        cache.fvh=new org.apache.lucene.search.vectorhighlight.XFastVectorHighlighter();
      }
      CustomFieldQuery.highlightFilters.set(field.highlightFilter());
      if (field.requireFieldMatch()) {
        if (cache.fieldMatchFieldQuery == null) {
          cache.fieldMatchFieldQuery=new CustomFieldQuery(context.parsedQuery().query(),hitContext.topLevelReader(),true,field.requireFieldMatch());
        }
        fieldQuery=cache.fieldMatchFieldQuery;
      }
 else {
        if (cache.noFieldMatchFieldQuery == null) {
          cache.noFieldMatchFieldQuery=new CustomFieldQuery(context.parsedQuery().query(),hitContext.topLevelReader(),true,field.requireFieldMatch());
        }
        fieldQuery=cache.noFieldMatchFieldQuery;
      }
      cache.mappers.put(mapper,entry);
    }
    String[] fragments;
    int numberOfFragments=field.numberOfFragments() == 0 ? Integer.MAX_VALUE : field.numberOfFragments();
    int fragmentCharSize=field.numberOfFragments() == 0 ? Integer.MAX_VALUE : field.fragmentCharSize();
    fragments=cache.fvh.getBestFragments(fieldQuery,hitContext.reader(),hitContext.docId(),mapper.names().indexName(),fragmentCharSize,numberOfFragments,entry.fragListBuilder,entry.fragmentsBuilder,field.preTags(),field.postTags(),encoder);
    if (fragments != null && fragments.length > 0) {
      return new HighlightField(field.field(),StringText.convertFromStringArray(fragments));
    }
  }
 catch (  Exception e) {
    throw new FetchPhaseExecutionException(context,"Failed to highlight field [" + highlighterContext.fieldName + "]",e);
  }
  return null;
}
