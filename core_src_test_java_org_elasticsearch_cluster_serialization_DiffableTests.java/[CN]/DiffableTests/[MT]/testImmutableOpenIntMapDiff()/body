{
  new ImmutableOpenIntMapDriver<TestDiffable>(){
    @Override protected boolean diffableValues(){
      return true;
    }
    @Override protected TestDiffable createValue(    Integer key,    boolean before){
      return new TestDiffable(String.valueOf(before ? key : key + 1));
    }
    @Override protected MapDiff diff(    ImmutableOpenIntMap<TestDiffable> before,    ImmutableOpenIntMap<TestDiffable> after){
      return DiffableUtils.diff(before,after,keySerializer);
    }
    @Override protected MapDiff readDiff(    StreamInput in) throws IOException {
      return useProtoForDiffableSerialization ? DiffableUtils.readImmutableOpenIntMapDiff(in,keySerializer,TestDiffable.PROTO) : DiffableUtils.readImmutableOpenIntMapDiff(in,keySerializer,diffableValueSerializer());
    }
  }
.execute();
  new ImmutableOpenIntMapDriver<String>(){
    @Override protected boolean diffableValues(){
      return false;
    }
    @Override protected String createValue(    Integer key,    boolean before){
      return String.valueOf(before ? key : key + 1);
    }
    @Override protected MapDiff diff(    ImmutableOpenIntMap<String> before,    ImmutableOpenIntMap<String> after){
      return DiffableUtils.diff(before,after,keySerializer,nonDiffableValueSerializer());
    }
    @Override protected MapDiff readDiff(    StreamInput in) throws IOException {
      return DiffableUtils.readImmutableOpenIntMapDiff(in,keySerializer,nonDiffableValueSerializer());
    }
  }
.execute();
}
