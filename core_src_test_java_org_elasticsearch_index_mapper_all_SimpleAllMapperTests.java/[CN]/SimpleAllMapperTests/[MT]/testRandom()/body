{
  boolean norms=true;
  boolean stored=false;
  boolean enabled=true;
  boolean tv_stored=false;
  boolean tv_payloads=false;
  boolean tv_offsets=false;
  boolean tv_positions=false;
  String similarity=null;
  XContentBuilder mappingBuilder=jsonBuilder();
  mappingBuilder.startObject().startObject("test");
  List<Tuple<String,Boolean>> booleanOptionList=new ArrayList<>();
  boolean allDefault=true;
  if (frequently()) {
    allDefault=false;
    mappingBuilder.startObject("_all");
    if (randomBoolean()) {
      booleanOptionList.add(new Tuple<>("norms",norms=randomBoolean()));
    }
    if (randomBoolean()) {
      booleanOptionList.add(new Tuple<>("store",stored=randomBoolean()));
    }
    if (randomBoolean()) {
      booleanOptionList.add(new Tuple<>("store_term_vectors",tv_stored=randomBoolean()));
    }
    if (randomBoolean()) {
      booleanOptionList.add(new Tuple<>("enabled",enabled=randomBoolean()));
    }
    if (randomBoolean()) {
      booleanOptionList.add(new Tuple<>("store_term_vector_offsets",tv_offsets=randomBoolean()));
    }
    if (randomBoolean()) {
      booleanOptionList.add(new Tuple<>("store_term_vector_positions",tv_positions=randomBoolean()));
    }
    if (randomBoolean()) {
      booleanOptionList.add(new Tuple<>("store_term_vector_payloads",tv_payloads=randomBoolean()));
    }
    Collections.shuffle(booleanOptionList,random());
    for (    Tuple<String,Boolean> option : booleanOptionList) {
      mappingBuilder.field(option.v1(),option.v2().booleanValue());
    }
    tv_stored|=tv_positions || tv_payloads || tv_offsets;
    if (randomBoolean()) {
      mappingBuilder.field("similarity",similarity="BM25");
    }
    mappingBuilder.endObject();
  }
  DocumentMapperParser parser=createIndex("test").mapperService().documentMapperParser();
  String mapping=mappingBuilder.endObject().endObject().bytes().toUtf8();
  logger.info("Mapping: {}",mapping);
  DocumentMapper docMapper=parser.parse("test",new CompressedXContent(mapping));
  String builtMapping=docMapper.mappingSource().string();
  DocumentMapper builtDocMapper=parser.parse("test",new CompressedXContent(builtMapping));
  byte[] json=jsonBuilder().startObject().field("foo","bar").field("foobar","foobar").endObject().bytes().toBytes();
  Document doc=builtDocMapper.parse("test","test","1",new BytesArray(json)).rootDoc();
  IndexableField[] fields=doc.getFields("_all");
  if (enabled) {
    assertThat(fields.length,equalTo(2));
    String[] expected=new String[]{"bar","foobar"};
    for (int i=0; i < fields.length; i++) {
      assertThat(fields[i].fieldType().omitNorms(),equalTo(!norms));
      assertThat(fields[i].fieldType().stored(),equalTo(stored));
      assertThat(fields[i].fieldType().storeTermVectorOffsets(),equalTo(tv_offsets));
      assertThat(fields[i].fieldType().storeTermVectorPayloads(),equalTo(tv_payloads));
      assertThat(fields[i].fieldType().storeTermVectorPositions(),equalTo(tv_positions));
      assertThat(fields[i].fieldType().storeTermVectors(),equalTo(tv_stored));
      assertThat(fields[i].stringValue(),equalTo(expected[i]));
    }
  }
 else {
    assertThat(fields.length,equalTo(0));
  }
  if (similarity == null) {
    assertThat(builtDocMapper.allFieldMapper().fieldType().similarity(),nullValue());
  }
 else {
    assertThat(similarity,equalTo(builtDocMapper.allFieldMapper().fieldType().similarity().name()));
  }
  if (allDefault) {
    BytesStreamOutput bytesStreamOutput=new BytesStreamOutput(0);
    XContentBuilder b=new XContentBuilder(XContentType.JSON.xContent(),bytesStreamOutput);
    XContentBuilder xContentBuilder=builtDocMapper.allFieldMapper().toXContent(b,ToXContent.EMPTY_PARAMS);
    xContentBuilder.flush();
    assertThat(bytesStreamOutput.size(),equalTo(0));
  }
}
