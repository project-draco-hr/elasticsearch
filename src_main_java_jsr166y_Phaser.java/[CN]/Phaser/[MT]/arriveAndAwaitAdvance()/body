{
  final Phaser root=this.root;
  for (; ; ) {
    long s=(root == this) ? state : reconcileState();
    int phase=(int)(s >>> PHASE_SHIFT);
    if (phase < 0)     return phase;
    int counts=(int)s;
    int unarrived=(counts == EMPTY) ? 0 : (counts & UNARRIVED_MASK);
    if (unarrived <= 0)     throw new IllegalStateException(badArrive(s));
    if (UNSAFE.compareAndSwapLong(this,stateOffset,s,s-=ONE_ARRIVAL)) {
      if (unarrived > 1)       return root.internalAwaitAdvance(phase,null);
      if (root != this)       return parent.arriveAndAwaitAdvance();
      long n=s & PARTIES_MASK;
      int nextUnarrived=(int)n >>> PARTIES_SHIFT;
      if (onAdvance(phase,nextUnarrived))       n|=TERMINATION_BIT;
 else       if (nextUnarrived == 0)       n|=EMPTY;
 else       n|=nextUnarrived;
      int nextPhase=(phase + 1) & MAX_PHASE;
      n|=(long)nextPhase << PHASE_SHIFT;
      if (!UNSAFE.compareAndSwapLong(this,stateOffset,s,n))       return (int)(state >>> PHASE_SHIFT);
      releaseWaiters(phase);
      return nextPhase;
    }
  }
}
