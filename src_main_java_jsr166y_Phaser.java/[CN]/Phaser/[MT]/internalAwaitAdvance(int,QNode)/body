{
  releaseWaiters(phase - 1);
  boolean queued=false;
  int lastUnarrived=0;
  int spins=SPINS_PER_ARRIVAL;
  long s;
  int p;
  while ((p=(int)((s=state) >>> PHASE_SHIFT)) == phase) {
    if (node == null) {
      int unarrived=(int)s & UNARRIVED_MASK;
      if (unarrived != lastUnarrived && (lastUnarrived=unarrived) < NCPU)       spins+=SPINS_PER_ARRIVAL;
      boolean interrupted=Thread.interrupted();
      if (interrupted || --spins < 0) {
        node=new QNode(this,phase,false,false,0L);
        node.wasInterrupted=interrupted;
      }
    }
 else     if (node.isReleasable())     break;
 else     if (!queued) {
      AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;
      QNode q=node.next=head.get();
      if ((q == null || q.phase == phase) && (int)(state >>> PHASE_SHIFT) == phase)       queued=head.compareAndSet(q,node);
    }
 else {
      try {
        ForkJoinPool.managedBlock(node);
      }
 catch (      InterruptedException ie) {
        node.wasInterrupted=true;
      }
    }
  }
  if (node != null) {
    if (node.thread != null)     node.thread=null;
    if (node.wasInterrupted && !node.interruptible)     Thread.currentThread().interrupt();
    if (p == phase && (p=(int)(state >>> PHASE_SHIFT)) == phase)     return abortWait(phase);
  }
  releaseWaiters(phase);
  return p;
}
