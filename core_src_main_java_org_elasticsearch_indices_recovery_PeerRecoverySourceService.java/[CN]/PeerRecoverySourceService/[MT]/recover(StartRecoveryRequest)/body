{
  final IndexService indexService=indicesService.indexServiceSafe(request.shardId().getIndex());
  final IndexShard shard=indexService.getShard(request.shardId().id());
  RoutingNode node=clusterService.state().getRoutingNodes().node(request.targetNode().getId());
  if (node == null) {
    logger.debug("delaying recovery of {} as source node {} is unknown",request.shardId(),request.targetNode());
    throw new DelayRecoveryException("source node does not have the node [" + request.targetNode() + "] in its state yet..");
  }
  ShardRouting routingEntry=shard.routingEntry();
  if (request.isPrimaryRelocation() && (routingEntry.relocating() == false || routingEntry.relocatingNodeId().equals(request.targetNode().getId()) == false)) {
    logger.debug("delaying recovery of {} as source shard is not marked yet as relocating to {}",request.shardId(),request.targetNode());
    throw new DelayRecoveryException("source shard is not marked yet as relocating to [" + request.targetNode() + "]");
  }
  ShardRouting targetShardRouting=node.getByShardId(request.shardId());
  if (targetShardRouting == null) {
    logger.debug("delaying recovery of {} as it is not listed as assigned to target node {}",request.shardId(),request.targetNode());
    throw new DelayRecoveryException("source node does not have the shard listed in its state as allocated on the node");
  }
  if (!targetShardRouting.initializing()) {
    logger.debug("delaying recovery of {} as it is not listed as initializing on the target node {}. known shards state is [{}]",request.shardId(),request.targetNode(),targetShardRouting.state());
    throw new DelayRecoveryException("source node has the state of the target shard to be [" + targetShardRouting.state() + "], expecting to be [initializing]");
  }
  RecoverySourceHandler handler=ongoingRecoveries.addNewRecovery(request,shard);
  logger.trace("[{}][{}] starting recovery to {}",request.shardId().getIndex().getName(),request.shardId().id(),request.targetNode());
  try {
    return handler.recoverToTarget();
  }
  finally {
    ongoingRecoveries.remove(shard,handler);
  }
}
