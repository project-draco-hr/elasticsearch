{
  String[] pre_1_4_names=ActionNames.ACTION_NAMES.inverse().keySet().toArray(new String[ActionNames.ACTION_NAMES.inverse().keySet().size()]);
  TransportService transportService=internalCluster().getInstance(TransportService.class);
  String[] actions=transportService.serverHandlers.keySet().toArray(new String[transportService.serverHandlers.keySet().size()]);
  Version version=randomVersion();
  int iters=iterations(10,100);
  for (int i=0; i < iters; i++) {
    boolean customAction=rarely();
    String action;
    if (customAction) {
      action=randomAsciiOfLength(randomInt(30));
    }
 else {
      if (version.before(Version.V_1_4_0)) {
        action=randomFrom(pre_1_4_names);
      }
 else {
        action=randomFrom(actions);
      }
    }
    String incomingAction=ActionNames.incomingAction(action,version);
    if (version.onOrAfter(Version.V_1_4_0) || customAction) {
      assertThat(incomingAction,equalTo(action));
    }
 else {
      assertThat(incomingAction,not(equalTo(action)));
      assertThat(incomingAction,equalTo(ActionNames.post_1_4_action(action)));
    }
  }
}
