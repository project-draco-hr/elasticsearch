{
  InternalSearchResponse internalSearchResponse=new InternalSearchResponse(new InternalSearchHits(null,randomLong(),randomFloat()),null,null,randomBoolean(),randomBoolean());
  ShardSearchFailure[] shardSearchFailures=new ShardSearchFailure[randomIntBetween(0,5)];
  for (int i=0; i < shardSearchFailures.length; i++) {
    shardSearchFailures[i]=new ShardSearchFailure(new IllegalArgumentException());
  }
  SearchResponse searchResponse=new SearchResponse(internalSearchResponse,null,randomIntBetween(0,100),randomIntBetween(0,100),randomIntBetween(0,100),shardSearchFailures);
  CountResponse countResponse=new CountResponse(searchResponse);
  assertThat(countResponse.getTotalShards(),equalTo(searchResponse.getTotalShards()));
  assertThat(countResponse.getSuccessfulShards(),equalTo(searchResponse.getSuccessfulShards()));
  assertThat(countResponse.getFailedShards(),equalTo(searchResponse.getFailedShards()));
  assertThat(countResponse.getShardFailures(),equalTo((ShardOperationFailedException[])searchResponse.getShardFailures()));
  assertThat(countResponse.getCount(),equalTo(searchResponse.getHits().totalHits()));
  assertThat(countResponse.terminatedEarly(),equalTo(searchResponse.isTerminatedEarly()));
}
