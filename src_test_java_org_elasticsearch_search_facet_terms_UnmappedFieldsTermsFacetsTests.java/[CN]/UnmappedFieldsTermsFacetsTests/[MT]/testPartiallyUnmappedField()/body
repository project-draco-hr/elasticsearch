{
  assertAcked(prepareCreate("mapped_idx").addMapping("type",jsonBuilder().startObject().startObject("type").startObject("properties").startObject("partially_mapped_byte").field("type","byte").endObject().startObject("partially_mapped_short").field("type","short").endObject().startObject("partially_mapped_int").field("type","integer").endObject().startObject("partially_mapped_long").field("type","long").endObject().startObject("partially_mapped_float").field("type","float").endObject().startObject("partially_mapped_double").field("type","double").endObject().endObject().endObject().endObject()));
  ensureGreen();
  createIndex("unmapped_idx");
  ensureGreen();
  for (int i=0; i < 10; i++) {
    client().prepareIndex("mapped_idx","type","" + i).setSource(jsonBuilder().startObject().field("mapped","" + i).field("partially_mapped_str","" + i).field("partially_mapped_bool",i % 2 == 0).field("partially_mapped_byte",i).field("partially_mapped_short",i).field("partially_mapped_int",i).field("partially_mapped_long",i).field("partially_mapped_float",i).field("partially_mapped_double",i).endObject()).execute().actionGet();
  }
  for (int i=10; i < 20; i++) {
    client().prepareIndex("unmapped_idx","type","" + i).setSource(jsonBuilder().startObject().field("mapped","" + i).endObject()).execute().actionGet();
  }
  flushAndRefresh();
  SearchResponse searchResponse=client().prepareSearch("mapped_idx","unmapped_idx").setQuery(matchAllQuery()).addFacet(termsFacet("mapped").field("mapped").size(10)).addFacet(termsFacet("partially_mapped_str").field("partially_mapped_str").size(10)).addFacet(termsFacet("partially_mapped_bool").field("partially_mapped_bool").size(10)).addFacet(termsFacet("partially_mapped_byte").field("partially_mapped_byte").size(10)).addFacet(termsFacet("partially_mapped_short").field("partially_mapped_short").size(10)).addFacet(termsFacet("partially_mapped_int").field("partially_mapped_int").size(10)).addFacet(termsFacet("partially_mapped_long").field("partially_mapped_long").size(10)).addFacet(termsFacet("partially_mapped_float").field("partially_mapped_float").size(10)).addFacet(termsFacet("partially_mapped_double").field("partially_mapped_double").size(10)).execute().actionGet();
  assertThat(searchResponse.getHits().getTotalHits(),equalTo(20l));
  TermsFacet facet=searchResponse.getFacets().facet("mapped");
  assertThat(facet.getName(),equalTo("mapped"));
  assertThat(facet.getEntries().size(),is(10));
  assertThat(facet.getTotalCount(),is(20l));
  assertThat(facet.getOtherCount(),is(10l));
  assertThat(facet.getMissingCount(),is(0l));
  facet=searchResponse.getFacets().facet("partially_mapped_str");
  assertThat(facet.getName(),equalTo("partially_mapped_str"));
  assertThat(facet.getEntries().size(),is(10));
  assertThat(facet.getTotalCount(),is(10l));
  assertThat(facet.getOtherCount(),is(0l));
  assertThat(facet.getMissingCount(),is(10l));
  facet=searchResponse.getFacets().facet("partially_mapped_bool");
  assertThat(facet.getName(),equalTo("partially_mapped_bool"));
  ArrayList<String> terms=new ArrayList<String>();
  for (  TermsFacet.Entry entry : facet.getEntries()) {
    terms.add(entry.getTerm().toString());
  }
  assertThat("unexpected number of bool terms:" + terms,facet.getEntries().size(),is(2));
  assertThat(facet.getTotalCount(),is(10l));
  assertThat(facet.getOtherCount(),is(0l));
  assertThat(facet.getMissingCount(),is(10l));
  facet=searchResponse.getFacets().facet("partially_mapped_byte");
  assertThat(facet.getName(),equalTo("partially_mapped_byte"));
  assertThat(facet.getEntries().size(),is(10));
  assertThat(facet.getTotalCount(),is(10l));
  assertThat(facet.getOtherCount(),is(0l));
  assertThat(facet.getMissingCount(),is(10l));
  facet=searchResponse.getFacets().facet("partially_mapped_short");
  assertThat(facet.getName(),equalTo("partially_mapped_short"));
  assertThat(facet.getEntries().size(),is(10));
  assertThat(facet.getTotalCount(),is(10l));
  assertThat(facet.getOtherCount(),is(0l));
  assertThat(facet.getMissingCount(),is(10l));
  facet=searchResponse.getFacets().facet("partially_mapped_int");
  assertThat(facet.getName(),equalTo("partially_mapped_int"));
  assertThat(facet.getEntries().size(),is(10));
  assertThat(facet.getTotalCount(),is(10l));
  assertThat(facet.getOtherCount(),is(0l));
  assertThat(facet.getMissingCount(),is(10l));
  facet=searchResponse.getFacets().facet("partially_mapped_long");
  assertThat(facet.getName(),equalTo("partially_mapped_long"));
  assertThat(facet.getEntries().size(),is(10));
  assertThat(facet.getTotalCount(),is(10l));
  assertThat(facet.getOtherCount(),is(0l));
  assertThat(facet.getMissingCount(),is(10l));
  facet=searchResponse.getFacets().facet("partially_mapped_float");
  assertThat(facet.getName(),equalTo("partially_mapped_float"));
  assertThat(facet.getEntries().size(),is(10));
  assertThat(facet.getTotalCount(),is(10l));
  assertThat(facet.getOtherCount(),is(0l));
  assertThat(facet.getMissingCount(),is(10l));
  facet=searchResponse.getFacets().facet("partially_mapped_float");
  assertThat(facet.getName(),equalTo("partially_mapped_float"));
  assertThat(facet.getEntries().size(),is(10));
  assertThat(facet.getTotalCount(),is(10l));
  assertThat(facet.getOtherCount(),is(0l));
  assertThat(facet.getMissingCount(),is(10l));
}
