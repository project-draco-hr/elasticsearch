{
  super(shardId,indexSettings);
  Preconditions.checkNotNull(store,"Store must be provided to the engine");
  Preconditions.checkNotNull(deletionPolicy,"Snapshot deletion policy must be provided to the engine");
  Preconditions.checkNotNull(translog,"Translog must be provided to the engine");
  this.indexingBufferSize=componentSettings.getAsBytesSize("index_buffer_size",new ByteSizeValue(64,ByteSizeUnit.MB));
  this.termIndexInterval=indexSettings.getAsInt("index.term_index_interval",IndexWriter.DEFAULT_TERM_INDEX_INTERVAL);
  this.termIndexDivisor=indexSettings.getAsInt("index.term_index_divisor",1);
  this.compoundFormat=indexSettings.getAsBoolean("index.compound_format",indexSettings.getAsBoolean("index.merge.policy.use_compound_file",store == null ? false : store.suggestUseCompoundFile()));
  this.refreshInterval=componentSettings.getAsTime("refresh_interval",indexSettings.getAsTime("index.refresh_interval",timeValueSeconds(1)));
  this.asyncLoadBloomFilter=componentSettings.getAsBoolean("async_load_bloom",true);
  this.store=store;
  this.deletionPolicy=deletionPolicy;
  this.translog=translog;
  this.mergePolicyProvider=mergePolicyProvider;
  this.mergeScheduler=mergeScheduler;
  this.analysisService=analysisService;
  this.similarityService=similarityService;
  this.bloomCache=bloomCache;
  this.versionMap=new ConcurrentHashMap<String,VersionValue>(1000);
  this.dirtyLocks=new Object[componentSettings.getAsInt("concurrency",10000)];
  for (int i=0; i < dirtyLocks.length; i++) {
    dirtyLocks[i]=new Object();
  }
}
