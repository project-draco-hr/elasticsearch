{
  int termIndexInterval=settings.getAsInt("index.term_index_interval",RobinEngine.this.termIndexInterval);
  int termIndexDivisor=settings.getAsInt("index.term_index_divisor",RobinEngine.this.termIndexDivisor);
  int indexConcurrency=settings.getAsInt("index.index_concurrency",RobinEngine.this.indexConcurrency);
  boolean requiresFlushing=false;
  if (termIndexInterval != RobinEngine.this.termIndexInterval || termIndexDivisor != RobinEngine.this.termIndexDivisor) {
    rwl.readLock().lock();
    try {
      if (termIndexInterval != RobinEngine.this.termIndexInterval) {
        logger.info("updating index.term_index_interval from [{}] to [{}]",RobinEngine.this.termIndexInterval,termIndexInterval);
        RobinEngine.this.termIndexInterval=termIndexInterval;
        indexWriter.getConfig().setTermIndexInterval(termIndexInterval);
      }
      if (termIndexDivisor != RobinEngine.this.termIndexDivisor) {
        logger.info("updating index.term_index_divisor from [{}] to [{}]",RobinEngine.this.termIndexDivisor,termIndexDivisor);
        RobinEngine.this.termIndexDivisor=termIndexDivisor;
        indexWriter.getConfig().setReaderTermsIndexDivisor(termIndexDivisor);
        requiresFlushing=true;
      }
      if (indexConcurrency != RobinEngine.this.indexConcurrency) {
        logger.info("updating index.index_concurrency from [{}] to [{}]",RobinEngine.this.indexConcurrency,indexConcurrency);
        RobinEngine.this.indexConcurrency=indexConcurrency;
        requiresFlushing=true;
      }
    }
  finally {
      rwl.readLock().unlock();
    }
    if (requiresFlushing) {
      flush(new Flush().full(true));
    }
  }
}
