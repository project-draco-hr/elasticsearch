{
  EngineException[] failures=null;
  rwl.readLock().lock();
  try {
    IndexWriter writer=this.indexWriter;
    if (writer == null) {
      throw new EngineClosedException(shardId);
    }
    for (int i=0; i < bulk.ops().length; i++) {
      Operation op=bulk.ops()[i];
      if (op == null) {
        continue;
      }
      try {
switch (op.opType()) {
case CREATE:
          Create create=(Create)op;
        innerCreate(create,writer);
      break;
case INDEX:
    Index index=(Index)op;
  innerIndex(index,writer);
break;
case DELETE:
Delete delete=(Delete)op;
innerDelete(delete,writer);
break;
}
}
 catch (Exception e) {
if (failures == null) {
failures=new EngineException[bulk.ops().length];
}
switch (op.opType()) {
case CREATE:
if (e instanceof EngineException) {
failures[i]=(EngineException)e;
}
 else {
failures[i]=new CreateFailedEngineException(shardId,(Create)op,e);
}
break;
case INDEX:
if (e instanceof EngineException) {
failures[i]=(EngineException)e;
}
 else {
failures[i]=new IndexFailedEngineException(shardId,(Index)op,e);
}
break;
case DELETE:
if (e instanceof EngineException) {
failures[i]=(EngineException)e;
}
 else {
failures[i]=new DeleteFailedEngineException(shardId,(Delete)op,e);
}
break;
}
}
if (bulk.refresh()) {
try {
refresh(new Refresh(false));
}
 catch (Exception e) {
}
}
}
dirty=true;
}
  finally {
rwl.readLock().unlock();
}
return failures;
}
