{
  Version version=VersionUtils.randomVersionBetween(random(),Version.V_2_0_0,Version.CURRENT);
  Settings settings=Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED,version).build();
  assertAcked(prepareCreate("index").setSettings(settings).addMapping("type",LOCATION_FIELD,"type=geo_point"));
  XContentBuilder d1Builder=jsonBuilder();
  GeoPoint[] d1Points={new GeoPoint(3,2),new GeoPoint(4,1)};
  createShuffeldJSONArray(d1Builder,d1Points);
  XContentBuilder d2Builder=jsonBuilder();
  GeoPoint[] d2Points={new GeoPoint(5,1),new GeoPoint(6,2)};
  createShuffeldJSONArray(d2Builder,d2Points);
  logger.info("d1: {}",d1Builder);
  logger.info("d2: {}",d2Builder);
  indexRandom(true,client().prepareIndex("index","type","d1").setSource(d1Builder),client().prepareIndex("index","type","d2").setSource(d2Builder));
  GeoPoint[] q=new GeoPoint[2];
  if (randomBoolean()) {
    q[0]=new GeoPoint(2,1);
    q[1]=new GeoPoint(2,2);
  }
 else {
    q[1]=new GeoPoint(2,2);
    q[0]=new GeoPoint(2,1);
  }
  SearchResponse searchResponse=client().prepareSearch().setQuery(matchAllQuery()).addSort(new GeoDistanceSortBuilder(LOCATION_FIELD,q).sortMode(SortMode.MIN).order(SortOrder.ASC).geoDistance(GeoDistance.PLANE).unit(DistanceUnit.KILOMETERS)).execute().actionGet();
  assertOrderedSearchHits(searchResponse,"d1","d2");
  assertThat((Double)searchResponse.getHits().getAt(0).getSortValues()[0],closeTo(GeoDistance.PLANE.calculate(2,2,3,2,DistanceUnit.KILOMETERS),0.01d));
  assertThat((Double)searchResponse.getHits().getAt(1).getSortValues()[0],closeTo(GeoDistance.PLANE.calculate(2,1,5,1,DistanceUnit.KILOMETERS),0.01d));
  searchResponse=client().prepareSearch().setQuery(matchAllQuery()).addSort(new GeoDistanceSortBuilder(LOCATION_FIELD,q).sortMode(SortMode.MIN).order(SortOrder.DESC).geoDistance(GeoDistance.PLANE).unit(DistanceUnit.KILOMETERS)).execute().actionGet();
  assertOrderedSearchHits(searchResponse,"d2","d1");
  assertThat((Double)searchResponse.getHits().getAt(0).getSortValues()[0],closeTo(GeoDistance.PLANE.calculate(2,1,5,1,DistanceUnit.KILOMETERS),0.01d));
  assertThat((Double)searchResponse.getHits().getAt(1).getSortValues()[0],closeTo(GeoDistance.PLANE.calculate(2,2,3,2,DistanceUnit.KILOMETERS),0.01d));
  searchResponse=client().prepareSearch().setQuery(matchAllQuery()).addSort(new GeoDistanceSortBuilder(LOCATION_FIELD,q).sortMode(SortMode.MAX).order(SortOrder.ASC).geoDistance(GeoDistance.PLANE).unit(DistanceUnit.KILOMETERS)).execute().actionGet();
  assertOrderedSearchHits(searchResponse,"d1","d2");
  assertThat((Double)searchResponse.getHits().getAt(0).getSortValues()[0],closeTo(GeoDistance.PLANE.calculate(2,2,4,1,DistanceUnit.KILOMETERS),0.01d));
  assertThat((Double)searchResponse.getHits().getAt(1).getSortValues()[0],closeTo(GeoDistance.PLANE.calculate(2,1,6,2,DistanceUnit.KILOMETERS),0.01d));
  searchResponse=client().prepareSearch().setQuery(matchAllQuery()).addSort(new GeoDistanceSortBuilder(LOCATION_FIELD,q).sortMode(SortMode.MAX).order(SortOrder.DESC).geoDistance(GeoDistance.PLANE).unit(DistanceUnit.KILOMETERS)).execute().actionGet();
  assertOrderedSearchHits(searchResponse,"d2","d1");
  assertThat((Double)searchResponse.getHits().getAt(0).getSortValues()[0],closeTo(GeoDistance.PLANE.calculate(2,1,6,2,DistanceUnit.KILOMETERS),0.01d));
  assertThat((Double)searchResponse.getHits().getAt(1).getSortValues()[0],closeTo(GeoDistance.PLANE.calculate(2,2,4,1,DistanceUnit.KILOMETERS),0.01d));
}
