{
  super.writeTo(out);
  shardRouting.writeTo(out);
  out.writeByte(state.id());
  if (storeSize == null) {
    out.writeBoolean(false);
  }
 else {
    out.writeBoolean(true);
    storeSize.writeTo(out);
  }
  out.writeLong(translogId);
  out.writeLong(translogOperations);
  if (docs == Docs.UNKNOWN) {
    out.writeBoolean(false);
  }
 else {
    out.writeBoolean(true);
    out.writeInt(docs.numDocs());
    out.writeInt(docs.maxDoc());
    out.writeInt(docs.deletedDocs());
  }
  if (peerRecoveryStatus == null) {
    out.writeBoolean(false);
  }
 else {
    out.writeBoolean(true);
    out.writeByte(peerRecoveryStatus.stage.value());
    out.writeVLong(peerRecoveryStatus.startTime);
    out.writeVLong(peerRecoveryStatus.time);
    out.writeVLong(peerRecoveryStatus.throttlingTime);
    out.writeVLong(peerRecoveryStatus.indexSize);
    out.writeVLong(peerRecoveryStatus.reusedIndexSize);
    out.writeVLong(peerRecoveryStatus.recoveredIndexSize);
    out.writeVLong(peerRecoveryStatus.recoveredTranslogOperations);
  }
  if (gatewayRecoveryStatus == null) {
    out.writeBoolean(false);
  }
 else {
    out.writeBoolean(true);
    out.writeByte(gatewayRecoveryStatus.stage.value());
    out.writeVLong(gatewayRecoveryStatus.startTime);
    out.writeVLong(gatewayRecoveryStatus.time);
    out.writeVLong(gatewayRecoveryStatus.throttlingTime);
    out.writeVLong(gatewayRecoveryStatus.indexThrottlingTime);
    out.writeVLong(gatewayRecoveryStatus.indexSize);
    out.writeVLong(gatewayRecoveryStatus.reusedIndexSize);
    out.writeVLong(gatewayRecoveryStatus.recoveredIndexSize);
    out.writeVLong(gatewayRecoveryStatus.recoveredTranslogOperations);
  }
  if (gatewaySnapshotStatus == null) {
    out.writeBoolean(false);
  }
 else {
    out.writeBoolean(true);
    out.writeByte(gatewaySnapshotStatus.stage.value());
    out.writeVLong(gatewaySnapshotStatus.startTime);
    out.writeVLong(gatewaySnapshotStatus.time);
    out.writeVLong(gatewaySnapshotStatus.indexSize);
    out.writeVLong(gatewaySnapshotStatus.translogOperations);
  }
}
