{
  final int numShards=between(10,20);
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("loc").field("type","geo_point").endObject().startObject("test").field("type","string").endObject().endObject().endObject().endObject().string();
  client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards",numShards).put("index.number_of_replicas",0)).addMapping("type1",mapping).execute().actionGet();
  ensureYellow();
  List<IndexRequestBuilder> indexBuilders=new ArrayList<IndexRequestBuilder>();
  final int numDocs=between(10,20);
  for (int i=0; i < numDocs; i++) {
    indexBuilders.add(new IndexRequestBuilder(client()).setType("type").setId(Integer.toString(i)).setIndex("test").setSource(jsonBuilder().startObject().field("test","value").startObject("loc").field("lat",11).field("lon",21).endObject().endObject()));
  }
  indexRandom("test",true,indexBuilders.toArray(new IndexRequestBuilder[indexBuilders.size()]));
  final int numIters=atLeast(3);
  for (int i=0; i < numIters; i++) {
    allowNodes("test",between(1,3));
    client().admin().cluster().prepareReroute().get();
    final AtomicBoolean stop=new AtomicBoolean(false);
    final List<Throwable> thrownExceptions=new CopyOnWriteArrayList<Throwable>();
    final Thread t=new Thread(){
      public void run(){
        final List<Float> lonlat=new ArrayList<Float>();
        lonlat.add(new Float(20));
        lonlat.add(new Float(11));
        try {
          while (!stop.get()) {
            SearchResponse sr=client().search(searchRequest().searchType(SearchType.QUERY_THEN_FETCH).source(searchSource().size(numDocs).query(functionScoreQuery(termQuery("test","value"),gaussDecayFunction("loc",lonlat,"1000km")).boostMode(CombineFunction.MULT.getName())))).get();
            final SearchHits sh=sr.getHits();
            assertThat("Expect num docs in getTotalHits() ",sh.getTotalHits(),equalTo((long)(numDocs)));
            assertThat("Expected hits to be the same size the actual hits array",sh.getTotalHits(),equalTo((long)(sh.getHits().length)));
          }
        }
 catch (        Throwable t) {
          thrownExceptions.add(t);
        }
      }
    }
;
    t.start();
    ClusterHealthResponse resp=client().admin().cluster().prepareHealth().setWaitForRelocatingShards(0).execute().actionGet();
    stop.set(true);
    t.join();
    assertThat(resp.isTimedOut(),equalTo(false));
    assertThat("failed in iteration " + i,thrownExceptions,Matchers.emptyIterable());
  }
}
