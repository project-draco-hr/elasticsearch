{
  Settings.Builder updatedSettingsBuilder=Settings.builder();
  updatedSettingsBuilder.put(request.settings).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX);
  request.settings(updatedSettingsBuilder.build());
  if (request.name == null) {
    listener.onFailure(new IllegalArgumentException("index_template must provide a name"));
    return;
  }
  if (request.template == null) {
    listener.onFailure(new IllegalArgumentException("index_template must provide a template"));
    return;
  }
  try {
    validate(request);
  }
 catch (  Exception e) {
    listener.onFailure(e);
    return;
  }
  final IndexTemplateMetaData.Builder templateBuilder=IndexTemplateMetaData.builder(request.name);
  clusterService.submitStateUpdateTask("create-index-template [" + request.name + "], cause ["+ request.cause+ "]",new ClusterStateUpdateTask(Priority.URGENT){
    @Override public TimeValue timeout(){
      return request.masterTimeout;
    }
    @Override public void onFailure(    String source,    Exception e){
      listener.onFailure(e);
    }
    @Override public ClusterState execute(    ClusterState currentState) throws Exception {
      if (request.create && currentState.metaData().templates().containsKey(request.name)) {
        throw new IndexTemplateAlreadyExistsException(request.name);
      }
      validateAndAddTemplate(request,templateBuilder,indicesService,nodeServicesProvider);
      for (      Alias alias : request.aliases) {
        AliasMetaData aliasMetaData=AliasMetaData.builder(alias.name()).filter(alias.filter()).indexRouting(alias.indexRouting()).searchRouting(alias.searchRouting()).build();
        templateBuilder.putAlias(aliasMetaData);
      }
      for (      Map.Entry<String,IndexMetaData.Custom> entry : request.customs.entrySet()) {
        templateBuilder.putCustom(entry.getKey(),entry.getValue());
      }
      IndexTemplateMetaData template=templateBuilder.build();
      MetaData.Builder builder=MetaData.builder(currentState.metaData()).put(template);
      return ClusterState.builder(currentState).metaData(builder).build();
    }
    @Override public void clusterStateProcessed(    String source,    ClusterState oldState,    ClusterState newState){
      listener.onResponse(new PutResponse(true,templateBuilder.build()));
    }
  }
);
}
