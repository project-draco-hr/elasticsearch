{
  Map<String,Object> document=new HashMap<>();
  List<String> list=new ArrayList<>();
  list.add("item1");
  list.add("item2");
  list.add("item3");
  document.put("list",list);
  List<Map<String,String>> one=new ArrayList<>();
  one.add(Collections.singletonMap("one","one"));
  one.add(Collections.singletonMap("two","two"));
  document.put("one",one);
  IngestDocument ingestDocument=RandomDocumentPicks.randomIngestDocument(random(),document);
  Processor processor=new RenameProcessor(randomAsciiOfLength(10),"list.0","item");
  processor.execute(ingestDocument);
  Object actualObject=ingestDocument.getSourceAndMetadata().get("list");
  assertThat(actualObject,instanceOf(List.class));
  @SuppressWarnings("unchecked") List<String> actualList=(List<String>)actualObject;
  assertThat(actualList.size(),equalTo(2));
  assertThat(actualList.get(0),equalTo("item2"));
  assertThat(actualList.get(1),equalTo("item3"));
  actualObject=ingestDocument.getSourceAndMetadata().get("item");
  assertThat(actualObject,instanceOf(String.class));
  assertThat(actualObject,equalTo("item1"));
  processor=new RenameProcessor(randomAsciiOfLength(10),"list.0","list.3");
  try {
    processor.execute(ingestDocument);
    fail("processor execute should have failed");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage(),equalTo("[3] is out of bounds for array with length [2] as part of path [list.3]"));
    assertThat(actualList.size(),equalTo(2));
    assertThat(actualList.get(0),equalTo("item2"));
    assertThat(actualList.get(1),equalTo("item3"));
  }
}
