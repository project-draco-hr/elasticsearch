{
  SearchResponse response=client().prepareSearch("idx").addAggregation(ipRange("range").field("ip").addUnboundedTo("r1","10.0.0.100").addRange("r2","10.0.0.100","10.0.0.200").addUnboundedFrom("r3","10.0.0.200")).execute().actionGet();
  assertSearchResponse(response);
  IPv4Range range=response.getAggregations().get("range");
  assertThat(range,notNullValue());
  assertThat(range.getName(),equalTo("range"));
  assertThat(range.buckets().size(),equalTo(3));
  IPv4Range.Bucket bucket=range.getByKey("r1");
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKey(),equalTo("r1"));
  assertThat(bucket.getFrom(),equalTo(Double.NEGATIVE_INFINITY));
  assertThat(bucket.getFromAsString(),nullValue());
  assertThat(bucket.getToAsString(),equalTo("10.0.0.100"));
  assertThat(bucket.getTo(),equalTo((double)IpFieldMapper.ipToLong("10.0.0.100")));
  assertThat(bucket.getDocCount(),equalTo(100l));
  bucket=range.getByKey("r2");
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKey(),equalTo("r2"));
  assertThat(bucket.getFromAsString(),equalTo("10.0.0.100"));
  assertThat(bucket.getFrom(),equalTo((double)IpFieldMapper.ipToLong("10.0.0.100")));
  assertThat(bucket.getToAsString(),equalTo("10.0.0.200"));
  assertThat(bucket.getTo(),equalTo((double)IpFieldMapper.ipToLong("10.0.0.200")));
  assertThat(bucket.getDocCount(),equalTo(100l));
  bucket=range.getByKey("r3");
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKey(),equalTo("r3"));
  assertThat(bucket.getFromAsString(),equalTo("10.0.0.200"));
  assertThat(bucket.getFrom(),equalTo((double)IpFieldMapper.ipToLong("10.0.0.200")));
  assertThat(bucket.getTo(),equalTo(Double.POSITIVE_INFINITY));
  assertThat(bucket.getToAsString(),nullValue());
  assertThat(bucket.getDocCount(),equalTo(55l));
}
