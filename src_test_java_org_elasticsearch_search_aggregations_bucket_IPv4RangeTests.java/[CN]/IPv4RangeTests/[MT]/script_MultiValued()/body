{
  SearchResponse response=client().prepareSearch("idx").addAggregation(ipRange("range").script("doc['ips'].values").addUnboundedTo("10.0.0.100").addRange("10.0.0.100","10.0.0.200").addUnboundedFrom("10.0.0.200")).execute().actionGet();
  assertSearchResponse(response);
  IPv4Range range=response.getAggregations().get("range");
  assertThat(range,notNullValue());
  assertThat(range.getName(),equalTo("range"));
  assertThat(range.getBuckets().size(),equalTo(3));
  IPv4Range.Bucket bucket=range.getBucketByKey("*-10.0.0.100");
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKey(),equalTo("*-10.0.0.100"));
  assertThat(bucket.getFrom().doubleValue(),equalTo(Double.NEGATIVE_INFINITY));
  assertThat(bucket.getFromAsString(),nullValue());
  assertThat(bucket.getToAsString(),equalTo("10.0.0.100"));
  assertThat(bucket.getTo().doubleValue(),equalTo((double)IpFieldMapper.ipToLong("10.0.0.100")));
  assertThat(bucket.getDocCount(),equalTo(100l));
  bucket=range.getBucketByKey("10.0.0.100-10.0.0.200");
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKey(),equalTo("10.0.0.100-10.0.0.200"));
  assertThat(bucket.getFromAsString(),equalTo("10.0.0.100"));
  assertThat(bucket.getFrom().doubleValue(),equalTo((double)IpFieldMapper.ipToLong("10.0.0.100")));
  assertThat(bucket.getToAsString(),equalTo("10.0.0.200"));
  assertThat(bucket.getTo().doubleValue(),equalTo((double)IpFieldMapper.ipToLong("10.0.0.200")));
  assertThat(bucket.getDocCount(),equalTo(101l));
  bucket=range.getBucketByKey("10.0.0.200-*");
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKey(),equalTo("10.0.0.200-*"));
  assertThat(bucket.getFromAsString(),equalTo("10.0.0.200"));
  assertThat(bucket.getFrom().doubleValue(),equalTo((double)IpFieldMapper.ipToLong("10.0.0.200")));
  assertThat(bucket.getTo().doubleValue(),equalTo(Double.POSITIVE_INFINITY));
  assertThat(bucket.getToAsString(),nullValue());
  assertThat(bucket.getDocCount(),equalTo(56l));
}
