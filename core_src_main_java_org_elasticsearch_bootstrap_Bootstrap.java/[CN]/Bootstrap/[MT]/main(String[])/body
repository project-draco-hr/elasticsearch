{
  System.setProperty("es.logger.prefix","");
  INSTANCE=new Bootstrap();
  boolean foreground=System.getProperty("es.foreground",System.getProperty("es-foreground")) != null;
  if (System.getProperty("wrapper.service","XXX").equalsIgnoreCase("true")) {
    foreground=false;
  }
  String stage="Settings";
  Settings settings=null;
  Environment environment=null;
  try {
    Tuple<Settings,Environment> tuple=initialSettings(foreground);
    settings=tuple.v1();
    environment=tuple.v2();
    if (environment.pidFile() != null) {
      stage="Pid";
      PidFile.create(environment.pidFile(),true);
    }
    stage="Logging";
    setupLogging(settings,environment);
  }
 catch (  Exception e) {
    String errorMessage=buildErrorMessage(stage,e);
    sysError(errorMessage,true);
    System.exit(3);
  }
  if (System.getProperty("es.max-open-files","false").equals("true")) {
    ESLogger logger=Loggers.getLogger(Bootstrap.class);
    logger.info("max_open_files [{}]",JmxProcessProbe.getMaxFileDescriptorCount());
  }
  if (JvmInfo.jvmInfo().getVmName().toLowerCase(Locale.ROOT).contains("client")) {
    ESLogger logger=Loggers.getLogger(Bootstrap.class);
    logger.warn("jvm uses the client vm, make sure to run `java` with the server vm for best performance by adding `-server` to the command line");
  }
  stage="Initialization";
  try {
    if (!foreground) {
      Loggers.disableConsoleLogging();
      closeSystOut();
    }
    JVMCheck.check();
    INSTANCE.setup(true,settings,environment);
    stage="Startup";
    INSTANCE.start();
    if (!foreground) {
      closeSysError();
    }
  }
 catch (  Throwable e) {
    ESLogger logger=Loggers.getLogger(Bootstrap.class);
    if (INSTANCE.node != null) {
      logger=Loggers.getLogger(Bootstrap.class,INSTANCE.node.settings().get("name"));
    }
    String errorMessage=buildErrorMessage(stage,e);
    if (foreground) {
      sysError(errorMessage,true);
      Loggers.disableConsoleLogging();
    }
    logger.error("Exception",e);
    System.exit(3);
  }
}
