{
  initLoggerPrefix();
  BootstrapCLIParser bootstrapCLIParser=new BootstrapCLIParser();
  CliTool.ExitStatus status=bootstrapCLIParser.execute(args);
  if (CliTool.ExitStatus.OK != status) {
    exit(status.status());
  }
  INSTANCE=new Bootstrap();
  boolean foreground=!"false".equals(System.getProperty("es.foreground",System.getProperty("es-foreground")));
  if (System.getProperty("wrapper.service","XXX").equalsIgnoreCase("true")) {
    foreground=false;
  }
  Environment environment=initialSettings(foreground);
  Settings settings=environment.settings();
  setupLogging(settings,environment);
  checkForCustomConfFile();
  if (environment.pidFile() != null) {
    PidFile.create(environment.pidFile(),true);
  }
  if (System.getProperty("es.max-open-files","false").equals("true")) {
    ESLogger logger=Loggers.getLogger(Bootstrap.class);
    logger.info("max_open_files [{}]",ProcessProbe.getInstance().getMaxFileDescriptorCount());
  }
  if (JvmInfo.jvmInfo().getVmName().toLowerCase(Locale.ROOT).contains("client")) {
    ESLogger logger=Loggers.getLogger(Bootstrap.class);
    logger.warn("jvm uses the client vm, make sure to run `java` with the server vm for best performance by adding `-server` to the command line");
  }
  try {
    if (!foreground) {
      Loggers.disableConsoleLogging();
      closeSystOut();
    }
    JVMCheck.check();
    INSTANCE.setup(true,settings,environment);
    INSTANCE.start();
    if (!foreground) {
      closeSysError();
    }
  }
 catch (  Throwable e) {
    if (foreground) {
      Loggers.disableConsoleLogging();
    }
    ESLogger logger=Loggers.getLogger(Bootstrap.class);
    if (INSTANCE.node != null) {
      logger=Loggers.getLogger(Bootstrap.class,INSTANCE.node.settings().get("name"));
    }
    if (e instanceof CreationException) {
      ByteArrayOutputStream os=new ByteArrayOutputStream();
      PrintStream ps=new PrintStream(os,false,"UTF-8");
      new StartupError(e).printStackTrace(ps);
      ps.flush();
      logger.error("Guice Exception: {}",os.toString("UTF-8"));
    }
 else {
      logger.error("Exception",e);
    }
    if (foreground) {
      Loggers.enableConsoleLogging();
    }
    throw e;
  }
}
