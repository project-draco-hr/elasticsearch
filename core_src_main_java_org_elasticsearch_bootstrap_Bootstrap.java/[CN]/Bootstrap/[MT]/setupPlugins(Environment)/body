{
  ESLogger logger=Loggers.getLogger(Bootstrap.class);
  Path pluginsDirectory=environment.pluginsFile();
  if (!isAccessibleDirectory(pluginsDirectory,logger)) {
    return;
  }
  ClassLoader classLoader=ClassLoader.getSystemClassLoader();
  Class<?> classLoaderClass=classLoader.getClass();
  Method addURL=null;
  while (!classLoaderClass.equals(Object.class)) {
    try {
      addURL=classLoaderClass.getDeclaredMethod("addURL",URL.class);
      addURL.setAccessible(true);
      break;
    }
 catch (    NoSuchMethodException e) {
      classLoaderClass=classLoaderClass.getSuperclass();
    }
  }
  if (addURL == null) {
    logger.debug("failed to find addURL method on classLoader [" + classLoader + "] to add methods");
    return;
  }
  try (DirectoryStream<Path> stream=Files.newDirectoryStream(pluginsDirectory)){
    for (    Path plugin : stream) {
      if (!isAccessibleDirectory(plugin,logger)) {
        continue;
      }
      logger.trace("--- adding plugin [{}]",plugin.toAbsolutePath());
      try {
        addURL.invoke(classLoader,plugin.toUri().toURL());
        List<Path> libFiles=Lists.newArrayList();
        libFiles.addAll(Arrays.asList(files(plugin)));
        Path libLocation=plugin.resolve("lib");
        if (Files.isDirectory(libLocation)) {
          libFiles.addAll(Arrays.asList(files(libLocation)));
        }
        PathMatcher matcher=PathUtils.getDefaultFileSystem().getPathMatcher(PLUGIN_LIB_PATTERN);
        for (        Path libFile : libFiles) {
          if (!matcher.matches(libFile)) {
            continue;
          }
          addURL.invoke(classLoader,libFile.toUri().toURL());
        }
      }
 catch (      Throwable e) {
        logger.warn("failed to add plugin [" + plugin + "]",e);
      }
    }
  }
 }
