{
  final TestPlan testPlan=createTestPlan();
  assertThat(testPlan.result.totalShards(),equalTo(testPlan.totalCounts.total));
  assertThat(testPlan.result.successfulShards(),equalTo(testPlan.totalCounts.successful));
  assertThat(testPlan.result.failedShards(),equalTo(testPlan.totalCounts.failed));
  assertThat(testPlan.result.restStatus(),equalTo(testPlan.totalCounts.failed > 0 ? RestStatus.CONFLICT : RestStatus.OK));
  BytesStreamOutput out=new BytesStreamOutput();
  testPlan.result.writeTo(out);
  StreamInput in=StreamInput.wrap(out.bytes());
  SyncedFlushResponse readResponse=new SyncedFlushResponse();
  readResponse.readFrom(in);
  assertThat(readResponse.totalShards(),equalTo(testPlan.totalCounts.total));
  assertThat(readResponse.successfulShards(),equalTo(testPlan.totalCounts.successful));
  assertThat(readResponse.failedShards(),equalTo(testPlan.totalCounts.failed));
  assertThat(readResponse.restStatus(),equalTo(testPlan.totalCounts.failed > 0 ? RestStatus.CONFLICT : RestStatus.OK));
  assertThat(readResponse.shardsResultPerIndex.size(),equalTo(testPlan.result.getShardsResultPerIndex().size()));
  for (  Map.Entry<String,List<ShardsSyncedFlushResult>> entry : readResponse.getShardsResultPerIndex().entrySet()) {
    List<ShardsSyncedFlushResult> originalShardsResults=testPlan.result.getShardsResultPerIndex().get(entry.getKey());
    assertNotNull(originalShardsResults);
    List<ShardsSyncedFlushResult> readShardsResults=entry.getValue();
    assertThat(readShardsResults.size(),equalTo(originalShardsResults.size()));
    for (int i=0; i < readShardsResults.size(); i++) {
      ShardsSyncedFlushResult originalShardResult=originalShardsResults.get(i);
      ShardsSyncedFlushResult readShardResult=readShardsResults.get(i);
      assertThat(originalShardResult.failureReason(),equalTo(readShardResult.failureReason()));
      assertThat(originalShardResult.failed(),equalTo(readShardResult.failed()));
      assertThat(originalShardResult.getShardId(),equalTo(readShardResult.getShardId()));
      assertThat(originalShardResult.successfulShards(),equalTo(readShardResult.successfulShards()));
      assertThat(originalShardResult.syncId(),equalTo(readShardResult.syncId()));
      assertThat(originalShardResult.totalShards(),equalTo(readShardResult.totalShards()));
      assertThat(originalShardResult.failedShards().size(),equalTo(readShardResult.failedShards().size()));
      for (      Map.Entry<ShardRouting,SyncedFlushService.ShardSyncedFlushResponse> shardEntry : originalShardResult.failedShards().entrySet()) {
        SyncedFlushService.ShardSyncedFlushResponse readShardResponse=readShardResult.failedShards().get(shardEntry.getKey());
        assertNotNull(readShardResponse);
        SyncedFlushService.ShardSyncedFlushResponse originalShardResponse=shardEntry.getValue();
        assertThat(originalShardResponse.failureReason(),equalTo(readShardResponse.failureReason()));
        assertThat(originalShardResponse.success(),equalTo(readShardResponse.success()));
      }
      assertThat(originalShardResult.shardResponses().size(),equalTo(readShardResult.shardResponses().size()));
      for (      Map.Entry<ShardRouting,SyncedFlushService.ShardSyncedFlushResponse> shardEntry : originalShardResult.shardResponses().entrySet()) {
        SyncedFlushService.ShardSyncedFlushResponse readShardResponse=readShardResult.shardResponses().get(shardEntry.getKey());
        assertNotNull(readShardResponse);
        SyncedFlushService.ShardSyncedFlushResponse originalShardResponse=shardEntry.getValue();
        assertThat(originalShardResponse.failureReason(),equalTo(readShardResponse.failureReason()));
        assertThat(originalShardResponse.success(),equalTo(readShardResponse.success()));
      }
    }
  }
}
