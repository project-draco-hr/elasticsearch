{
  createIndexAndMapping();
  client().prepareIndex(INDEX,TYPE,"1").setSource(jsonBuilder().startObject().startObject(FIELD).startArray("input").value("Foo Fighters").endArray().field("output","Boo Fighters").startObject("payload").field("foo","bar").startArray("test").value("spam").value("eggs").endArray().endObject().endObject().endObject()).get();
  refresh();
  SuggestResponse suggestResponse=client().prepareSuggest(INDEX).addSuggestion(new CompletionSuggestionBuilder("testSuggestions").field(FIELD).text("foo").size(10)).execute().actionGet();
  assertSuggestions(suggestResponse,"testSuggestions","Boo Fighters");
  Suggest.Suggestion.Entry.Option option=suggestResponse.getSuggest().getSuggestion("testSuggestions").getEntries().get(0).getOptions().get(0);
  assertThat(option,is(instanceOf(CompletionSuggestion.Entry.Option.class)));
  CompletionSuggestion.Entry.Option prefixOption=(CompletionSuggestion.Entry.Option)option;
  assertThat(prefixOption.getPayload(),is(notNullValue()));
  Map<String,Object> jsonMap=JsonXContent.jsonXContent.createParser(prefixOption.getPayload()).mapAndClose();
  assertThat(jsonMap.size(),is(2));
  assertThat(jsonMap.get("foo").toString(),is("bar"));
  assertThat(jsonMap.get("test"),is(instanceOf(List.class)));
  List<String> listValues=(List<String>)jsonMap.get("test");
  assertThat(listValues,hasItems("spam","eggs"));
}
