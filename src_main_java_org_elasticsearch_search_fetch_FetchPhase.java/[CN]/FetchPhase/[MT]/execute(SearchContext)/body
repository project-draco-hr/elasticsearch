{
  FieldsVisitor fieldsVisitor;
  List<String> extractFieldNames=null;
  if (!context.hasFieldNames()) {
    if (context.hasPartialFields()) {
      fieldsVisitor=new UidAndSourceFieldsVisitor();
    }
 else {
      if (!context.hasScriptFields() && !context.hasFetchSourceContext()) {
        context.fetchSourceContext(new FetchSourceContext(true));
      }
      fieldsVisitor=context.sourceRequested() ? new UidAndSourceFieldsVisitor() : new JustUidFieldsVisitor();
    }
  }
 else   if (context.fieldNames().isEmpty()) {
    if (context.sourceRequested()) {
      fieldsVisitor=new UidAndSourceFieldsVisitor();
    }
 else {
      fieldsVisitor=new JustUidFieldsVisitor();
    }
  }
 else {
    boolean loadAllStored=false;
    Set<String> fieldNames=null;
    for (    String fieldName : context.fieldNames()) {
      if (fieldName.equals("*")) {
        loadAllStored=true;
        continue;
      }
      if (fieldName.equals(SourceFieldMapper.NAME)) {
        if (context.hasFetchSourceContext()) {
          context.fetchSourceContext().fetchSource(true);
        }
 else {
          context.fetchSourceContext(new FetchSourceContext(true));
        }
        continue;
      }
      FieldMappers x=context.smartNameFieldMappers(fieldName);
      if (x == null) {
        if (context.smartNameObjectMapper(fieldName) != null) {
          throw new ElasticsearchIllegalArgumentException("field [" + fieldName + "] isn't a leaf field");
        }
      }
 else       if (x.mapper().fieldType().stored()) {
        if (fieldNames == null) {
          fieldNames=new HashSet<>();
        }
        fieldNames.add(x.mapper().names().indexName());
      }
 else {
        if (extractFieldNames == null) {
          extractFieldNames=newArrayList();
        }
        extractFieldNames.add(fieldName);
      }
    }
    if (loadAllStored) {
      fieldsVisitor=new AllFieldsVisitor();
    }
 else     if (fieldNames != null) {
      boolean loadSource=extractFieldNames != null || context.sourceRequested();
      fieldsVisitor=new CustomFieldsVisitor(fieldNames,loadSource);
    }
 else     if (extractFieldNames != null || context.sourceRequested()) {
      fieldsVisitor=new UidAndSourceFieldsVisitor();
    }
 else {
      fieldsVisitor=new JustUidFieldsVisitor();
    }
  }
  InternalSearchHit[] hits=new InternalSearchHit[context.docIdsToLoadSize()];
  FetchSubPhase.HitContext hitContext=new FetchSubPhase.HitContext();
  for (int index=0; index < context.docIdsToLoadSize(); index++) {
    int docId=context.docIdsToLoad()[context.docIdsToLoadFrom() + index];
    loadStoredFields(context,fieldsVisitor,docId);
    fieldsVisitor.postProcess(context.mapperService());
    Map<String,SearchHitField> searchFields=null;
    if (!fieldsVisitor.fields().isEmpty()) {
      searchFields=new HashMap<>(fieldsVisitor.fields().size());
      for (      Map.Entry<String,List<Object>> entry : fieldsVisitor.fields().entrySet()) {
        searchFields.put(entry.getKey(),new InternalSearchHitField(entry.getKey(),entry.getValue()));
      }
    }
    DocumentMapper documentMapper=context.mapperService().documentMapper(fieldsVisitor.uid().type());
    Text typeText;
    if (documentMapper == null) {
      typeText=new StringAndBytesText(fieldsVisitor.uid().type());
    }
 else {
      typeText=documentMapper.typeText();
    }
    InternalSearchHit searchHit=new InternalSearchHit(docId,fieldsVisitor.uid().id(),typeText,searchFields);
    hits[index]=searchHit;
    int readerIndex=ReaderUtil.subIndex(docId,context.searcher().getIndexReader().leaves());
    AtomicReaderContext subReaderContext=context.searcher().getIndexReader().leaves().get(readerIndex);
    int subDoc=docId - subReaderContext.docBase;
    context.lookup().setNextReader(subReaderContext);
    context.lookup().setNextDocId(subDoc);
    if (fieldsVisitor.source() != null) {
      context.lookup().source().setNextSource(fieldsVisitor.source());
    }
    if (extractFieldNames != null) {
      for (      String extractFieldName : extractFieldNames) {
        List<Object> values=context.lookup().source().extractRawValues(extractFieldName);
        if (!values.isEmpty()) {
          if (searchHit.fieldsOrNull() == null) {
            searchHit.fields(new HashMap<String,SearchHitField>(2));
          }
          SearchHitField hitField=searchHit.fields().get(extractFieldName);
          if (hitField == null) {
            hitField=new InternalSearchHitField(extractFieldName,new ArrayList<>(2));
            searchHit.fields().put(extractFieldName,hitField);
          }
          for (          Object value : values) {
            hitField.values().add(value);
          }
        }
      }
    }
    hitContext.reset(searchHit,subReaderContext,subDoc,context.searcher().getIndexReader(),docId,fieldsVisitor);
    for (    FetchSubPhase fetchSubPhase : fetchSubPhases) {
      if (fetchSubPhase.hitExecutionNeeded(context)) {
        fetchSubPhase.hitExecute(context,hitContext);
      }
    }
  }
  for (  FetchSubPhase fetchSubPhase : fetchSubPhases) {
    if (fetchSubPhase.hitsExecutionNeeded(context)) {
      fetchSubPhase.hitsExecute(context,hits);
    }
  }
  context.fetchResult().hits(new InternalSearchHits(hits,context.queryResult().topDocs().totalHits,context.queryResult().topDocs().getMaxScore()));
}
