{
  ResetFieldSelector fieldSelector;
  List<String> extractFieldNames=null;
  boolean sourceRequested=false;
  if (!context.hasFieldNames()) {
    if (context.hasPartialFields()) {
      fieldSelector=new UidAndSourceFieldSelector();
      sourceRequested=false;
    }
 else     if (context.hasScriptFields()) {
      fieldSelector=UidFieldSelector.INSTANCE;
      sourceRequested=false;
    }
 else {
      fieldSelector=new UidAndSourceFieldSelector();
      sourceRequested=true;
    }
  }
 else   if (context.fieldNames().isEmpty()) {
    fieldSelector=UidFieldSelector.INSTANCE;
    sourceRequested=false;
  }
 else {
    boolean loadAllStored=false;
    FieldMappersFieldSelector fieldSelectorMapper=null;
    for (    String fieldName : context.fieldNames()) {
      if (fieldName.equals("*")) {
        loadAllStored=true;
        continue;
      }
      if (fieldName.equals(SourceFieldMapper.NAME)) {
        sourceRequested=true;
        continue;
      }
      FieldMappers x=context.smartNameFieldMappers(fieldName);
      if (x != null && x.mapper().stored()) {
        if (fieldSelectorMapper == null) {
          fieldSelectorMapper=new FieldMappersFieldSelector();
        }
        fieldSelectorMapper.add(x);
      }
 else {
        if (extractFieldNames == null) {
          extractFieldNames=Lists.newArrayList();
        }
        extractFieldNames.add(fieldName);
      }
    }
    if (loadAllStored) {
      if (sourceRequested || extractFieldNames != null) {
        fieldSelector=null;
      }
 else {
        fieldSelector=AllButSourceFieldSelector.INSTANCE;
      }
    }
 else     if (fieldSelectorMapper != null) {
      fieldSelectorMapper.add(UidFieldMapper.NAME);
      if (extractFieldNames != null) {
        fieldSelectorMapper.add(SourceFieldMapper.NAME);
      }
      fieldSelector=fieldSelectorMapper;
    }
 else     if (extractFieldNames != null || sourceRequested) {
      fieldSelector=new UidAndSourceFieldSelector();
    }
 else {
      fieldSelector=UidFieldSelector.INSTANCE;
    }
  }
  InternalSearchHit[] hits=new InternalSearchHit[context.docIdsToLoadSize()];
  for (int index=0; index < context.docIdsToLoadSize(); index++) {
    int docId=context.docIdsToLoad()[context.docIdsToLoadFrom() + index];
    Document doc=loadDocument(context,fieldSelector,docId);
    Uid uid=extractUid(context,doc);
    DocumentMapper documentMapper=context.mapperService().documentMapper(uid.type());
    if (documentMapper == null) {
      throw new TypeMissingException(new Index(context.shardTarget().index()),uid.type(),"failed to find type loaded for doc [" + uid.id() + "]");
    }
    byte[] source=extractSource(doc,documentMapper);
    InternalSearchHit searchHit=new InternalSearchHit(docId,uid.id(),uid.type(),sourceRequested ? source : null,null);
    hits[index]=searchHit;
    for (    Object oField : doc.getFields()) {
      Fieldable field=(Fieldable)oField;
      String name=field.name();
      if (name.equals(UidFieldMapper.NAME)) {
        continue;
      }
      if (name.equals(SourceFieldMapper.NAME)) {
        continue;
      }
      Object value=null;
      FieldMappers fieldMappers=documentMapper.mappers().indexName(field.name());
      if (fieldMappers != null) {
        FieldMapper mapper=fieldMappers.mapper();
        if (mapper != null) {
          name=mapper.names().fullName();
          value=mapper.valueForSearch(field);
        }
      }
      if (value == null) {
        if (field.isBinary()) {
          value=field.getBinaryValue();
        }
 else {
          value=field.stringValue();
        }
      }
      if (searchHit.fieldsOrNull() == null) {
        searchHit.fields(new HashMap<String,SearchHitField>(2));
      }
      SearchHitField hitField=searchHit.fields().get(name);
      if (hitField == null) {
        hitField=new InternalSearchHitField(name,new ArrayList<Object>(2));
        searchHit.fields().put(name,hitField);
      }
      hitField.values().add(value);
    }
    int readerIndex=context.searcher().readerIndex(docId);
    IndexReader subReader=context.searcher().subReaders()[readerIndex];
    int subDoc=docId - context.searcher().docStarts()[readerIndex];
    context.lookup().setNextReader(subReader);
    context.lookup().setNextDocId(subDoc);
    if (source != null) {
      context.lookup().source().setNextSource(source,0,source.length);
    }
    if (extractFieldNames != null) {
      for (      String extractFieldName : extractFieldNames) {
        Object value=context.lookup().source().extractValue(extractFieldName);
        if (value != null) {
          if (searchHit.fieldsOrNull() == null) {
            searchHit.fields(new HashMap<String,SearchHitField>(2));
          }
          SearchHitField hitField=searchHit.fields().get(extractFieldName);
          if (hitField == null) {
            hitField=new InternalSearchHitField(extractFieldName,new ArrayList<Object>(2));
            searchHit.fields().put(extractFieldName,hitField);
          }
          hitField.values().add(value);
        }
      }
    }
    for (    FetchSubPhase fetchSubPhase : fetchSubPhases) {
      FetchSubPhase.HitContext hitContext=new FetchSubPhase.HitContext();
      if (fetchSubPhase.hitExecutionNeeded(context)) {
        hitContext.reset(searchHit,subReader,subDoc,context.searcher().getIndexReader(),docId,doc);
        fetchSubPhase.hitExecute(context,hitContext);
      }
    }
  }
  for (  FetchSubPhase fetchSubPhase : fetchSubPhases) {
    if (fetchSubPhase.hitsExecutionNeeded(context)) {
      fetchSubPhase.hitsExecute(context,hits);
    }
  }
  context.fetchResult().hits(new InternalSearchHits(hits,context.queryResult().topDocs().totalHits,context.queryResult().topDocs().getMaxScore()));
}
