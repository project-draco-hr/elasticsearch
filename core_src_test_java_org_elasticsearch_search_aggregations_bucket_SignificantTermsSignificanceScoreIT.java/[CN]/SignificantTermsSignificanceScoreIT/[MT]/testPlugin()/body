{
  String type=randomBoolean() ? "string" : "long";
  String settings="{\"index.number_of_shards\": 1, \"index.number_of_replicas\": 0}";
  SharedSignificantTermsTestMethods.index01Docs(type,settings,this);
  SearchResponse response=client().prepareSearch(INDEX_NAME).setTypes(DOC_TYPE).addAggregation(new TermsBuilder("class").field(CLASS_FIELD).subAggregation((new SignificantTermsBuilder("sig_terms")).field(TEXT_FIELD).significanceHeuristic(new SimpleHeuristic.SimpleHeuristicBuilder()).minDocCount(1))).execute().actionGet();
  assertSearchResponse(response);
  StringTerms classes=(StringTerms)response.getAggregations().get("class");
  assertThat(classes.getBuckets().size(),equalTo(2));
  for (  Terms.Bucket classBucket : classes.getBuckets()) {
    Map<String,Aggregation> aggs=classBucket.getAggregations().asMap();
    assertTrue(aggs.containsKey("sig_terms"));
    SignificantTerms agg=(SignificantTerms)aggs.get("sig_terms");
    assertThat(agg.getBuckets().size(),equalTo(2));
    Iterator<SignificantTerms.Bucket> bucketIterator=agg.iterator();
    SignificantTerms.Bucket sigBucket=bucketIterator.next();
    String term=sigBucket.getKeyAsString();
    String classTerm=classBucket.getKeyAsString();
    assertTrue(term.equals(classTerm));
    assertThat(sigBucket.getSignificanceScore(),closeTo(2.0,1.e-8));
    sigBucket=bucketIterator.next();
    assertThat(sigBucket.getSignificanceScore(),closeTo(1.0,1.e-8));
  }
  response=client().prepareSearch(INDEX_NAME).setTypes(DOC_TYPE).addAggregation(new TermsBuilder("class").field(CLASS_FIELD).subAggregation((new SignificantTermsBuilder("sig_terms")).field(TEXT_FIELD).significanceHeuristic(new SimpleHeuristic.SimpleHeuristicBuilder()).minDocCount(1))).execute().actionGet();
  classes=(StringTerms)response.getAggregations().get("class");
  assertThat(classes.getBuckets().size(),equalTo(2));
  for (  Terms.Bucket classBucket : classes.getBuckets()) {
    Map<String,Aggregation> aggs=classBucket.getAggregations().asMap();
    assertTrue(aggs.containsKey("sig_terms"));
    SignificantTerms agg=(SignificantTerms)aggs.get("sig_terms");
    assertThat(agg.getBuckets().size(),equalTo(2));
    Iterator<SignificantTerms.Bucket> bucketIterator=agg.iterator();
    SignificantTerms.Bucket sigBucket=bucketIterator.next();
    String term=sigBucket.getKeyAsString();
    String classTerm=classBucket.getKeyAsString();
    assertTrue(term.equals(classTerm));
    assertThat(sigBucket.getSignificanceScore(),closeTo(2.0,1.e-8));
    sigBucket=bucketIterator.next();
    assertThat(sigBucket.getSignificanceScore(),closeTo(1.0,1.e-8));
  }
}
