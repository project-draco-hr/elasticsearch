{
  SearchResponse response=client().prepareSearch("test").addAggregation(terms("class").field("class").subAggregation(significantTerms("mySignificantTerms").field("text").executionHint(randomExecutionHint()).significanceHeuristic(heuristic).minDocCount(1).shardSize(1000).size(1000))).execute().actionGet();
  assertSearchResponse(response);
  StringTerms classes=(StringTerms)response.getAggregations().get("class");
  assertThat(classes.getBuckets().size(),equalTo(2));
  Iterator<Terms.Bucket> classBuckets=classes.getBuckets().iterator();
  Collection<SignificantTerms.Bucket> classA=((SignificantTerms)classBuckets.next().getAggregations().get("mySignificantTerms")).getBuckets();
  Iterator<SignificantTerms.Bucket> classBBucketIterator=((SignificantTerms)classBuckets.next().getAggregations().get("mySignificantTerms")).getBuckets().iterator();
  assertThat(classA.size(),greaterThan(0));
  for (  SignificantTerms.Bucket classABucket : classA) {
    SignificantTerms.Bucket classBBucket=classBBucketIterator.next();
    assertThat(classABucket.getKey(),equalTo(classBBucket.getKey()));
    assertThat(classABucket.getSignificanceScore(),closeTo(classBBucket.getSignificanceScore(),1.e-5));
  }
}
