{
  int lastDataBucketKey=(numValueBuckets - 1) * interval;
  int addedBucketsLeft=randomIntBetween(0,numValueBuckets);
  long boundsMinKey=addedBucketsLeft * interval;
  if (frequently()) {
    boundsMinKey=-boundsMinKey;
  }
 else {
    addedBucketsLeft=0;
  }
  long boundsMin=boundsMinKey + randomIntBetween(0,interval - 1);
  int addedBucketsRight=randomIntBetween(0,numValueBuckets);
  long boundsMaxKeyDelta=addedBucketsRight * interval;
  if (rarely()) {
    addedBucketsRight=0;
    boundsMaxKeyDelta=-boundsMaxKeyDelta;
  }
  long boundsMaxKey=lastDataBucketKey + boundsMaxKeyDelta;
  long boundsMax=boundsMaxKey + randomIntBetween(0,interval - 1);
  boolean invalidBoundsError=boundsMin > boundsMax;
  int bucketsCount=numValueBuckets + addedBucketsLeft + addedBucketsRight;
  long[] extendedValueCounts=new long[bucketsCount];
  System.arraycopy(valueCounts,0,extendedValueCounts,addedBucketsLeft,valueCounts.length);
  SearchResponse response=null;
  try {
    response=client().prepareSearch("idx").setQuery(QueryBuilders.termQuery("foo","bar")).addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).minDocCount(0).extendedBounds(new ExtendedBounds(boundsMin,boundsMax))).execute().actionGet();
    if (invalidBoundsError) {
      fail("Expected an exception to be thrown when bounds.min is greater than bounds.max");
      return;
    }
  }
 catch (  Exception e) {
    if (invalidBoundsError) {
      return;
    }
 else {
      throw e;
    }
  }
  assertSearchResponse(response);
  Histogram histo=response.getAggregations().get("histo");
  assertThat(histo,notNullValue());
  assertThat(histo.getName(),equalTo("histo"));
  List<? extends Bucket> buckets=histo.getBuckets();
  assertThat(buckets.size(),equalTo(bucketsCount));
  long key=Math.min(boundsMinKey,0);
  for (int i=0; i < bucketsCount; i++) {
    Histogram.Bucket bucket=buckets.get(i);
    assertThat(bucket,notNullValue());
    assertThat(((Number)bucket.getKey()).longValue(),equalTo(key));
    assertThat(bucket.getDocCount(),equalTo(0L));
    key+=interval;
  }
}
