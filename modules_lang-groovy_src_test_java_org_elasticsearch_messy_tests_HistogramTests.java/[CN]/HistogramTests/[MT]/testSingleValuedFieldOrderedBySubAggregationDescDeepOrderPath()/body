{
  boolean asc=randomBoolean();
  SearchResponse response=client().prepareSearch("idx").addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).order(Histogram.Order.aggregation("filter>max",asc)).subAggregation(filter("filter",matchAllQuery()).subAggregation(max("max").field(SINGLE_VALUED_FIELD_NAME)))).execute().actionGet();
  assertSearchResponse(response);
  Histogram histo=response.getAggregations().get("histo");
  assertThat(histo,notNullValue());
  assertThat(histo.getName(),equalTo("histo"));
  assertThat(histo.getBuckets().size(),equalTo(numValueBuckets));
  LongHashSet visited=new LongHashSet();
  double prevMax=asc ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
  List<Histogram.Bucket> buckets=new ArrayList<Histogram.Bucket>(histo.getBuckets());
  for (int i=0; i < numValueBuckets; ++i) {
    Histogram.Bucket bucket=buckets.get(i);
    assertThat(bucket,notNullValue());
    long key=((Number)bucket.getKey()).longValue();
    assertTrue(visited.add(key));
    int b=(int)(key / interval);
    assertThat(bucket.getDocCount(),equalTo(valueCounts[b]));
    assertThat(bucket.getAggregations().asList().isEmpty(),is(false));
    Filter filter=bucket.getAggregations().get("filter");
    assertThat(filter,notNullValue());
    assertThat(bucket.getDocCount(),equalTo(filter.getDocCount()));
    Max max=filter.getAggregations().get("max");
    assertThat(max,Matchers.notNullValue());
    assertThat(max.getValue(),asc ? greaterThanOrEqualTo(prevMax) : lessThanOrEqualTo(prevMax));
    prevMax=max.getValue();
  }
}
