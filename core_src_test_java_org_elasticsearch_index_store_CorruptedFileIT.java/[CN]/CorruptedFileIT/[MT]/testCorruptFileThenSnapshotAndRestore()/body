{
  int numDocs=scaledRandomIntBetween(100,1000);
  internalCluster().ensureAtLeastNumDataNodes(2);
  assertAcked(prepareCreate("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,"0").put(MergePolicyConfig.INDEX_MERGE_ENABLED,false).put(MockFSDirectoryService.CHECK_INDEX_ON_CLOSE,false).put(IndexShard.INDEX_TRANSLOG_DISABLE_FLUSH,true).put("indices.recovery.concurrent_streams",10)));
  ensureGreen();
  IndexRequestBuilder[] builders=new IndexRequestBuilder[numDocs];
  for (int i=0; i < builders.length; i++) {
    builders[i]=client().prepareIndex("test","type").setSource("field","value");
  }
  indexRandom(true,builders);
  ensureGreen();
  assertAllSuccessful(client().admin().indices().prepareFlush().setForce(true).setWaitIfOngoing(true).execute().actionGet());
  CountResponse countResponse=client().prepareCount().get();
  assertHitCount(countResponse,numDocs);
  ShardRouting shardRouting=corruptRandomPrimaryFile(false);
  logger.info("-->  creating repository");
  assertAcked(client().admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(settingsBuilder().put("location",randomRepoPath().toAbsolutePath()).put("compress",randomBoolean()).put("chunk_size",randomIntBetween(100,1000),ByteSizeUnit.BYTES)));
  logger.info("--> snapshot");
  CreateSnapshotResponse createSnapshotResponse=client().admin().cluster().prepareCreateSnapshot("test-repo","test-snap").setWaitForCompletion(true).setIndices("test").get();
  assertThat(createSnapshotResponse.getSnapshotInfo().state(),equalTo(SnapshotState.PARTIAL));
  logger.info("failed during snapshot -- maybe SI file got corrupted");
  final List<Path> files=listShardFiles(shardRouting);
  Path corruptedFile=null;
  for (  Path file : files) {
    if (file.getFileName().toString().startsWith("corrupted_")) {
      corruptedFile=file;
      break;
    }
  }
  assertThat(corruptedFile,notNullValue());
}
