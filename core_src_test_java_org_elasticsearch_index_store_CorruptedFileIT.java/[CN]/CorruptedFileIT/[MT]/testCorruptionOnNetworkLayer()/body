{
  int numDocs=scaledRandomIntBetween(100,1000);
  internalCluster().ensureAtLeastNumDataNodes(2);
  if (cluster().numDataNodes() < 3) {
    internalCluster().startNode(Settings.builder().put(Node.NODE_DATA_SETTING.getKey(),true).put(Node.NODE_MASTER_SETTING.getKey(),false));
  }
  NodesStatsResponse nodeStats=client().admin().cluster().prepareNodesStats().get();
  List<NodeStats> dataNodeStats=new ArrayList<>();
  for (  NodeStats stat : nodeStats.getNodes()) {
    if (stat.getNode().isDataNode()) {
      dataNodeStats.add(stat);
    }
  }
  assertThat(dataNodeStats.size(),greaterThanOrEqualTo(2));
  Collections.shuffle(dataNodeStats,random());
  NodeStats primariesNode=dataNodeStats.get(0);
  NodeStats unluckyNode=dataNodeStats.get(1);
  assertAcked(prepareCreate("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,"0").put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,between(1,4)).put(MockFSIndexStore.INDEX_CHECK_INDEX_ON_CLOSE_SETTING.getKey(),false).put("index.routing.allocation.include._name",primariesNode.getNode().name()).put(EnableAllocationDecider.INDEX_ROUTING_REBALANCE_ENABLE_SETTING.getKey(),EnableAllocationDecider.Rebalance.NONE)));
  ensureGreen();
  IndexRequestBuilder[] builders=new IndexRequestBuilder[numDocs];
  for (int i=0; i < builders.length; i++) {
    builders[i]=client().prepareIndex("test","type").setSource("field","value");
  }
  indexRandom(true,builders);
  ensureGreen();
  assertAllSuccessful(client().admin().indices().prepareFlush().setForce(true).setWaitIfOngoing(true).execute().actionGet());
  SearchResponse countResponse=client().prepareSearch().setSize(0).get();
  assertHitCount(countResponse,numDocs);
  final boolean truncate=randomBoolean();
  for (  NodeStats dataNode : dataNodeStats) {
    MockTransportService mockTransportService=((MockTransportService)internalCluster().getInstance(TransportService.class,dataNode.getNode().name()));
    mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class,unluckyNode.getNode().name()),new MockTransportService.DelegateTransport(mockTransportService.original()){
      @Override public void sendRequest(      DiscoveryNode node,      long requestId,      String action,      TransportRequest request,      TransportRequestOptions options) throws IOException, TransportException {
        if (action.equals(RecoveryTargetService.Actions.FILE_CHUNK)) {
          RecoveryFileChunkRequest req=(RecoveryFileChunkRequest)request;
          if (truncate && req.length() > 1) {
            BytesArray array=new BytesArray(req.content().array(),req.content().arrayOffset(),(int)req.length() - 1);
            request=new RecoveryFileChunkRequest(req.recoveryId(),req.shardId(),req.metadata(),req.position(),array,req.lastChunk(),req.totalTranslogOps(),req.sourceThrottleTimeInNanos());
          }
 else {
            byte[] array=req.content().array();
            int i=randomIntBetween(0,req.content().length() - 1);
            array[i]=(byte)~array[i];
          }
        }
        super.sendRequest(node,requestId,action,request,options);
      }
    }
);
  }
  Settings build=Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,"1").put("index.routing.allocation.include._name","*").build();
  client().admin().indices().prepareUpdateSettings("test").setSettings(build).get();
  client().admin().cluster().prepareReroute().get();
  ClusterHealthResponse actionGet=client().admin().cluster().health(Requests.clusterHealthRequest("test").waitForGreenStatus()).actionGet();
  if (actionGet.isTimedOut()) {
    logger.info("ensureGreen timed out, cluster state:\n{}\n{}",client().admin().cluster().prepareState().get().getState().prettyPrint(),client().admin().cluster().preparePendingClusterTasks().get().prettyPrint());
    assertThat("timed out waiting for green state",actionGet.isTimedOut(),equalTo(false));
  }
  ClusterStateResponse clusterStateResponse=client().admin().cluster().prepareState().get();
  for (  IndexShardRoutingTable table : clusterStateResponse.getState().getRoutingNodes().getRoutingTable().index("test")) {
    for (    ShardRouting routing : table) {
      if (unluckyNode.getNode().getId().equals(routing.currentNodeId())) {
        assertThat(routing.state(),not(equalTo(ShardRoutingState.STARTED)));
        assertThat(routing.state(),not(equalTo(ShardRoutingState.RELOCATING)));
      }
    }
  }
  final int numIterations=scaledRandomIntBetween(5,20);
  for (int i=0; i < numIterations; i++) {
    SearchResponse response=client().prepareSearch().setSize(numDocs).get();
    assertHitCount(response,numDocs);
  }
}
