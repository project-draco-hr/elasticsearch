{
  internalCluster().ensureAtLeastNumDataNodes(2);
  NodesStatsResponse nodeStats=client().admin().cluster().prepareNodesStats().get();
  List<NodeStats> dataNodeStats=new ArrayList<>();
  for (  NodeStats stat : nodeStats.getNodes()) {
    if (stat.getNode().isDataNode()) {
      dataNodeStats.add(stat);
    }
  }
  assertThat(dataNodeStats.size(),greaterThanOrEqualTo(2));
  Collections.shuffle(dataNodeStats,random());
  NodeStats primariesNode=dataNodeStats.get(0);
  NodeStats unluckyNode=dataNodeStats.get(1);
  assertAcked(prepareCreate("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,"0").put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,1).put("index.routing.allocation.include._name",primariesNode.getNode().getName()).put(EnableAllocationDecider.INDEX_ROUTING_REBALANCE_ENABLE_SETTING.getKey(),EnableAllocationDecider.Rebalance.NONE).put("index.allocation.max_retries",Integer.MAX_VALUE)));
  ensureGreen();
  final AtomicBoolean corrupt=new AtomicBoolean(true);
  final CountDownLatch hasCorrupted=new CountDownLatch(1);
  for (  NodeStats dataNode : dataNodeStats) {
    MockTransportService mockTransportService=((MockTransportService)internalCluster().getInstance(TransportService.class,dataNode.getNode().getName()));
    mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class,unluckyNode.getNode().getName()),new MockTransportService.DelegateTransport(mockTransportService.original()){
      @Override public void sendRequest(      DiscoveryNode node,      long requestId,      String action,      TransportRequest request,      TransportRequestOptions options) throws IOException, TransportException {
        if (corrupt.get() && action.equals(RecoveryTargetService.Actions.FILE_CHUNK)) {
          RecoveryFileChunkRequest req=(RecoveryFileChunkRequest)request;
          byte[] array=req.content().array();
          int i=randomIntBetween(0,req.content().length() - 1);
          array[i]=(byte)~array[i];
          hasCorrupted.countDown();
        }
        super.sendRequest(node,requestId,action,request,options);
      }
    }
);
  }
  Settings build=Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,"1").put("index.routing.allocation.include._name",primariesNode.getNode().getName() + "," + unluckyNode.getNode().getName()).build();
  client().admin().indices().prepareUpdateSettings("test").setSettings(build).get();
  client().admin().cluster().prepareReroute().get();
  hasCorrupted.await();
  corrupt.set(false);
  ensureGreen();
}
