{
  int numDocs=scaledRandomIntBetween(100,1000);
  internalCluster().ensureAtLeastNumDataNodes(3);
  if (cluster().numDataNodes() == 3) {
    logger.info("--> cluster has [3] data nodes, corrupted primary will be overwritten");
  }
  assertThat(cluster().numDataNodes(),greaterThanOrEqualTo(3));
  assertAcked(prepareCreate("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,"1").put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,"1").put(MergePolicyConfig.INDEX_MERGE_ENABLED,false).put(MockFSIndexStore.CHECK_INDEX_ON_CLOSE,false).put(IndexShard.INDEX_TRANSLOG_DISABLE_FLUSH,true).put("indices.recovery.concurrent_streams",10)));
  ensureGreen();
  disableAllocation("test");
  IndexRequestBuilder[] builders=new IndexRequestBuilder[numDocs];
  for (int i=0; i < builders.length; i++) {
    builders[i]=client().prepareIndex("test","type").setSource("field","value");
  }
  indexRandom(true,builders);
  ensureGreen();
  assertAllSuccessful(client().admin().indices().prepareFlush().setForce(true).setWaitIfOngoing(true).execute().actionGet());
  SearchResponse countResponse=client().prepareSearch().setSize(0).get();
  assertHitCount(countResponse,numDocs);
  final int numShards=numShards("test");
  ShardRouting corruptedShardRouting=corruptRandomPrimaryFile();
  logger.info("--> {} corrupted",corruptedShardRouting);
  enableAllocation("test");
  Settings build=Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,"2").build();
  client().admin().indices().prepareUpdateSettings("test").setSettings(build).get();
  ClusterHealthResponse health=client().admin().cluster().health(Requests.clusterHealthRequest("test").waitForGreenStatus().timeout("5m").waitForRelocatingShards(0)).actionGet();
  if (health.isTimedOut()) {
    logger.info("cluster state:\n{}\n{}",client().admin().cluster().prepareState().get().getState().prettyPrint(),client().admin().cluster().preparePendingClusterTasks().get().prettyPrint());
    assertThat("timed out waiting for green state",health.isTimedOut(),equalTo(false));
  }
  assertThat(health.getStatus(),equalTo(ClusterHealthStatus.GREEN));
  final int numIterations=scaledRandomIntBetween(5,20);
  for (int i=0; i < numIterations; i++) {
    SearchResponse response=client().prepareSearch().setSize(numDocs).get();
    assertHitCount(response,numDocs);
  }
  final CountDownLatch latch=new CountDownLatch(numShards * 3);
  final CopyOnWriteArrayList<Throwable> exception=new CopyOnWriteArrayList<>();
  final IndexEventListener listener=new IndexEventListener(){
    @Override public void afterIndexShardClosed(    ShardId sid,    @Nullable IndexShard indexShard,    Settings indexSettings){
      if (indexShard != null) {
        Store store=indexShard.store();
        store.incRef();
        try {
          if (!Lucene.indexExists(store.directory()) && indexShard.state() == IndexShardState.STARTED) {
            return;
          }
          try (CheckIndex checkIndex=new CheckIndex(store.directory())){
            BytesStreamOutput os=new BytesStreamOutput();
            PrintStream out=new PrintStream(os,false,StandardCharsets.UTF_8.name());
            checkIndex.setInfoStream(out);
            out.flush();
            CheckIndex.Status status=checkIndex.checkIndex();
            if (!status.clean) {
              logger.warn("check index [failure]\n{}",new String(os.bytes().toBytes(),StandardCharsets.UTF_8));
              throw new IOException("index check failure");
            }
          }
         }
 catch (        Throwable t) {
          exception.add(t);
        }
 finally {
          store.decRef();
          latch.countDown();
        }
      }
    }
  }
;
  for (  MockIndexEventListener.TestEventListener eventListener : internalCluster().getDataNodeInstances(MockIndexEventListener.TestEventListener.class)) {
    eventListener.setNewDelegate(listener);
  }
  try {
    client().admin().indices().prepareDelete("test").get();
    latch.await();
    assertThat(exception,empty());
  }
  finally {
    for (    MockIndexEventListener.TestEventListener eventListener : internalCluster().getDataNodeInstances(MockIndexEventListener.TestEventListener.class)) {
      eventListener.setNewDelegate(null);
    }
  }
}
