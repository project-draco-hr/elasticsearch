{
  int numDocs=scaledRandomIntBetween(100,1000);
  internalCluster().ensureAtLeastNumDataNodes(2);
  assertAcked(prepareCreate("test").setSettings(Settings.builder().put(PrimaryShardAllocator.INDEX_RECOVERY_INITIAL_SHARDS_SETTING.getKey(),"one").put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,cluster().numDataNodes() - 1).put(MergePolicyConfig.INDEX_MERGE_ENABLED,false).put(MockFSIndexStore.INDEX_CHECK_INDEX_ON_CLOSE_SETTING.getKey(),false).put(IndexSettings.INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING.getKey(),new ByteSizeValue(1,ByteSizeUnit.PB))));
  ensureGreen();
  IndexRequestBuilder[] builders=new IndexRequestBuilder[numDocs];
  for (int i=0; i < builders.length; i++) {
    builders[i]=client().prepareIndex("test","type").setSource("field","value");
  }
  indexRandom(true,builders);
  ensureGreen();
  assertAllSuccessful(client().admin().indices().prepareFlush().setForce(true).setWaitIfOngoing(true).execute().actionGet());
  SearchResponse countResponse=client().prepareSearch().setSize(0).get();
  assertHitCount(countResponse,numDocs);
  assertAcked(client().admin().cluster().prepareUpdateSettings().setPersistentSettings(Settings.builder().put(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE_SETTING.getKey(),"primaries")));
  internalCluster().fullRestart();
  ensureYellow();
  final Index index=resolveIndex("test");
  final IndicesShardStoresResponse stores=client().admin().indices().prepareShardStores(index.getName()).get();
  for (  IntObjectCursor<List<IndicesShardStoresResponse.StoreStatus>> shards : stores.getStoreStatuses().get(index.getName())) {
    for (    IndicesShardStoresResponse.StoreStatus store : shards.value) {
      final ShardId shardId=new ShardId(index,shards.key);
      if (store.getAllocationStatus().equals(IndicesShardStoresResponse.StoreStatus.AllocationStatus.UNUSED)) {
        for (        Path path : findFilesToCorruptOnNode(store.getNode().getName(),shardId)) {
          try (OutputStream os=Files.newOutputStream(path)){
            os.write(0);
          }
           logger.info("corrupting file {} on node {}",path,store.getNode().getName());
        }
      }
    }
  }
  assertAcked(client().admin().cluster().prepareUpdateSettings().setPersistentSettings(Settings.builder().putNull(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE_SETTING.getKey())));
  ensureGreen();
}
