{
  final MapperService mapperService=indexShard.mapperService();
  final Map<String,FieldMapper<?>> warmUp=new HashMap<String,FieldMapper<?>>();
  for (  DocumentMapper docMapper : mapperService) {
    for (    FieldMapper<?> fieldMapper : docMapper.mappers().mappers()) {
      final FieldDataType fieldDataType=fieldMapper.fieldDataType();
      if (fieldDataType == null) {
        continue;
      }
      if (fieldMapper instanceof ParentFieldMapper) {
        ParentFieldMapper parentFieldMapper=(ParentFieldMapper)fieldMapper;
        if (!parentFieldMapper.active()) {
          continue;
        }
      }
 else {
        if (fieldDataType.getLoading() != Loading.EAGER) {
          continue;
        }
      }
      final String indexName=fieldMapper.names().indexName();
      if (warmUp.containsKey(indexName)) {
        continue;
      }
      warmUp.put(indexName,fieldMapper);
    }
  }
  final IndexFieldDataService indexFieldDataService=indexShard.indexFieldDataService();
  final Executor executor=threadPool.executor(executor());
  final CountDownLatch latch=new CountDownLatch(context.newSearcher().reader().leaves().size() * warmUp.size());
  for (  final AtomicReaderContext ctx : context.newSearcher().reader().leaves()) {
    for (    final FieldMapper<?> fieldMapper : warmUp.values()) {
      executor.execute(new Runnable(){
        @Override public void run(){
          try {
            final long start=System.nanoTime();
            indexFieldDataService.getForField(fieldMapper).load(ctx);
            if (indexShard.warmerService().logger().isTraceEnabled()) {
              indexShard.warmerService().logger().trace("warmed fielddata for [{}], took [{}]",fieldMapper.names().name(),TimeValue.timeValueNanos(System.nanoTime() - start));
            }
          }
 catch (          Throwable t) {
            indexShard.warmerService().logger().warn("failed to warm-up fielddata for [{}]",t,fieldMapper.names().name());
          }
 finally {
            latch.countDown();
          }
        }
      }
);
    }
  }
  return new TerminationHandle(){
    @Override public void awaitTermination() throws InterruptedException {
      latch.await();
    }
  }
;
}
