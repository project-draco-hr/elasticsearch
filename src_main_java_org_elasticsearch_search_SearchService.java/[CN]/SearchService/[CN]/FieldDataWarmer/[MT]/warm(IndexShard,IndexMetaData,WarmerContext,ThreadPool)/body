{
  final MapperService mapperService=indexShard.mapperService();
  final Map<String,FieldMapper<?>> warmUp=new HashMap<String,FieldMapper<?>>();
  boolean parentChild=false;
  for (  DocumentMapper docMapper : mapperService) {
    for (    FieldMapper<?> fieldMapper : docMapper.mappers().mappers()) {
      if (fieldMapper instanceof ParentFieldMapper) {
        parentChild=true;
      }
      final FieldDataType fieldDataType=fieldMapper.fieldDataType();
      if (fieldDataType == null) {
        continue;
      }
      if (fieldDataType.getLoading() != FieldDataType.Loading.EAGER) {
        continue;
      }
      final String indexName=fieldMapper.names().indexName();
      if (warmUp.containsKey(indexName)) {
        continue;
      }
      warmUp.put(indexName,fieldMapper);
    }
  }
  final IndexFieldDataService indexFieldDataService=indexShard.indexFieldDataService();
  final int numTasks=warmUp.size() * context.newSearcher().reader().leaves().size() + (parentChild ? 1 : 0);
  final CountDownLatch latch=new CountDownLatch(numTasks);
  for (  final AtomicReaderContext ctx : context.newSearcher().reader().leaves()) {
    for (    final FieldMapper<?> fieldMapper : warmUp.values()) {
      threadPool.executor(executor()).execute(new Runnable(){
        @Override public void run(){
          try {
            final long start=System.nanoTime();
            indexFieldDataService.getForField(fieldMapper).load(ctx);
            if (indexShard.warmerService().logger().isTraceEnabled()) {
              indexShard.warmerService().logger().trace("warmed fielddata for [{}], took [{}]",fieldMapper.names().name(),TimeValue.timeValueNanos(System.nanoTime() - start));
            }
          }
 catch (          Throwable t) {
            indexShard.warmerService().logger().warn("failed to warm-up fielddata for [{}]",t,fieldMapper.names().name());
          }
 finally {
            latch.countDown();
          }
        }
      }
);
    }
  }
  if (parentChild) {
    threadPool.executor(executor()).execute(new Runnable(){
      @Override public void run(){
        try {
          final long start=System.nanoTime();
          indexShard.indexService().cache().idCache().refresh(context.newSearcher().reader().leaves());
          if (indexShard.warmerService().logger().isTraceEnabled()) {
            indexShard.warmerService().logger().trace("warmed id_cache, took [{}]",TimeValue.timeValueNanos(System.nanoTime() - start));
          }
        }
 catch (        Throwable t) {
          indexShard.warmerService().logger().warn("failed to warm-up id cache",t);
        }
 finally {
          latch.countDown();
        }
      }
    }
);
  }
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
  }
}
