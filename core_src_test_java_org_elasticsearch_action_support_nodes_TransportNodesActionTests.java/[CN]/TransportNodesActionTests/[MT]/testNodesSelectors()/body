{
  TransportNodesAction action=getTestTransportNodesAction();
  int numSelectors=randomIntBetween(1,5);
  Set<String> nodeSelectors=new HashSet<>();
  for (int i=0; i < numSelectors; i++) {
    nodeSelectors.add(randomFrom(NodeSelector.values()).selector);
  }
  int numNodeIds=randomIntBetween(0,3);
  String[] nodeIds=clusterService.state().nodes().getNodes().keys().toArray(String.class);
  for (int i=0; i < numNodeIds; i++) {
    String nodeId=randomFrom(nodeIds);
    nodeSelectors.add(nodeId);
  }
  String[] finalNodesIds=nodeSelectors.toArray(new String[nodeSelectors.size()]);
  TestNodesRequest request=new TestNodesRequest(finalNodesIds);
  action.new AsyncAction(null,request,new PlainActionFuture<>()).start();
  Map<String,List<CapturingTransport.CapturedRequest>> capturedRequests=transport.getCapturedRequestsByTargetNodeAndClear();
  assertEquals(clusterService.state().nodes().resolveNodes(finalNodesIds).length,capturedRequests.size());
}
