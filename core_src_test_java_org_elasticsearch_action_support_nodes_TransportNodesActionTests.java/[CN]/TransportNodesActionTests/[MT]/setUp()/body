{
  super.setUp();
  transport=new CapturingTransport();
  clusterService=createClusterService(THREAD_POOL);
  transportService=new TransportService(clusterService.getSettings(),transport,THREAD_POOL);
  transportService.start();
  transportService.acceptIncomingRequests();
  int numNodes=randomIntBetween(3,10);
  DiscoveryNodes.Builder discoBuilder=DiscoveryNodes.builder();
  List<DiscoveryNode> discoveryNodes=new ArrayList<>();
  for (int i=0; i < numNodes; i++) {
    Map<String,String> attributes=new HashMap<>();
    Set<DiscoveryNode.Role> roles=new HashSet<>(randomSubsetOf(Arrays.asList(DiscoveryNode.Role.values())));
    if (frequently()) {
      attributes.put("custom",randomBoolean() ? "match" : randomAsciiOfLengthBetween(3,5));
    }
    final DiscoveryNode node=newNode(i,attributes,roles);
    discoBuilder=discoBuilder.add(node);
    discoveryNodes.add(node);
  }
  discoBuilder.localNodeId(randomFrom(discoveryNodes).getId());
  discoBuilder.masterNodeId(randomFrom(discoveryNodes).getId());
  ClusterState.Builder stateBuilder=ClusterState.builder(clusterService.getClusterName());
  stateBuilder.nodes(discoBuilder);
  ClusterState clusterState=stateBuilder.build();
  setState(clusterService,clusterState);
}
