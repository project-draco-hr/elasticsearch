{
  final MemoryIndex memoryIndex=new MemoryIndex();
  DocumentMapper docMapper=mapperService.documentMapperWithAutoCreate(request.type());
  ParsedDocument doc=docMapper.parse(source(request.source()).type(request.type()).flyweight(true));
  for (  Fieldable field : doc.doc().getFields()) {
    if (!field.isIndexed()) {
      continue;
    }
    TokenStream tokenStream=field.tokenStreamValue();
    if (tokenStream != null) {
      memoryIndex.addField(field.name(),tokenStream,field.getBoost());
    }
 else {
      Reader reader=field.readerValue();
      if (reader != null) {
        try {
          memoryIndex.addField(field.name(),doc.analyzer().reusableTokenStream(field.name(),reader),field.getBoost() * doc.doc().getBoost());
        }
 catch (        IOException e) {
          throw new MapperParsingException("Failed to analyze field [" + field.name() + "]",e);
        }
      }
 else {
        String value=field.stringValue();
        if (value != null) {
          try {
            memoryIndex.addField(field.name(),doc.analyzer().reusableTokenStream(field.name(),new FastStringReader(value)),field.getBoost() * doc.doc().getBoost());
          }
 catch (          IOException e) {
            throw new MapperParsingException("Failed to analyze field [" + field.name() + "]",e);
          }
        }
      }
    }
  }
  Lucene.ExistsCollector collector=new Lucene.ExistsCollector();
  List<String> matches=new ArrayList<String>();
  IndexSearcher searcher=memoryIndex.createSearcher();
  for (  Map.Entry<String,Query> entry : queries.entrySet()) {
    if (request.match() != null) {
      if (!Regex.simpleMatch(request.match(),entry.getKey())) {
        continue;
      }
    }
    if (request.unmatch() != null) {
      if (Regex.simpleMatch(request.unmatch(),entry.getKey())) {
        continue;
      }
    }
    try {
      searcher.search(entry.getValue(),collector);
    }
 catch (    IOException e) {
      logger.warn("[" + entry.getKey() + "] failed to execute query",e);
    }
    if (collector.exists()) {
      matches.add(entry.getKey());
    }
  }
  return new Response(matches,doc.mappersAdded());
}
