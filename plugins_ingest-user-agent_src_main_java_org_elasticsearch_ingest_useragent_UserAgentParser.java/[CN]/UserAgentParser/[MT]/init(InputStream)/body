{
  XContentParser yamlParser=XContentFactory.xContent(XContentType.YAML).createParser(regexStream);
  XContentParser.Token token=yamlParser.nextToken();
  if (token == XContentParser.Token.START_OBJECT) {
    token=yamlParser.nextToken();
    for (; token != null; token=yamlParser.nextToken()) {
      if (token == XContentParser.Token.FIELD_NAME && yamlParser.currentName().equals("user_agent_parsers")) {
        List<Map<String,String>> parserConfigurations=readParserConfigurations(yamlParser);
        for (        Map<String,String> map : parserConfigurations) {
          uaPatterns.add(new UserAgentSubpattern(compilePattern(map.get("regex"),map.get("regex_flag")),map.get("family_replacement"),map.get("v1_replacement"),map.get("v2_replacement"),map.get("v3_replacement"),map.get("v4_replacement")));
        }
      }
 else       if (token == XContentParser.Token.FIELD_NAME && yamlParser.currentName().equals("os_parsers")) {
        List<Map<String,String>> parserConfigurations=readParserConfigurations(yamlParser);
        for (        Map<String,String> map : parserConfigurations) {
          osPatterns.add(new UserAgentSubpattern(compilePattern(map.get("regex"),map.get("regex_flag")),map.get("os_replacement"),map.get("os_v1_replacement"),map.get("os_v2_replacement"),map.get("os_v3_replacement"),map.get("os_v4_replacement")));
        }
      }
 else       if (token == XContentParser.Token.FIELD_NAME && yamlParser.currentName().equals("device_parsers")) {
        List<Map<String,String>> parserConfigurations=readParserConfigurations(yamlParser);
        for (        Map<String,String> map : parserConfigurations) {
          devicePatterns.add(new UserAgentSubpattern(compilePattern(map.get("regex"),map.get("regex_flag")),map.get("device_replacement"),null,null,null,null));
        }
      }
    }
  }
  if (uaPatterns.isEmpty() && osPatterns.isEmpty() && devicePatterns.isEmpty()) {
    throw new ElasticsearchParseException("not a valid regular expression file");
  }
}
