{
  Path dataPath=createTempDir();
  Settings nodeSettings=nodeSettings(dataPath);
  final List<String> nodes=internalCluster().startNodesAsync(2,nodeSettings).get();
  String IDX="test";
  Settings idxSettings=Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,5).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,1).put(IndexMetaData.SETTING_DATA_PATH,dataPath.toAbsolutePath().toString()).put(IndexMetaData.SETTING_SHADOW_REPLICAS,true).put(IndexMetaData.SETTING_SHARED_FILESYSTEM,true).build();
  prepareCreate(IDX).setSettings(idxSettings).addMapping("doc","foo","type=text").get();
  ensureGreen(IDX);
  int docCount=randomIntBetween(10,100);
  List<IndexRequestBuilder> builders=new ArrayList<>();
  for (int i=0; i < docCount; i++) {
    builders.add(client().prepareIndex(IDX,"doc",i + "").setSource("foo","bar"));
  }
  indexRandom(true,true,true,builders);
  flushAndRefresh(IDX);
  final String node3=internalCluster().startNode(nodeSettings);
  nodes.add(node3);
  assertBusy(new Runnable(){
    @Override public void run(){
      client().admin().cluster().prepareHealth().setWaitForNodes("3").get();
      ClusterStateResponse resp=client().admin().cluster().prepareState().get();
      RoutingNodes nodes=resp.getState().getRoutingNodes();
      for (      RoutingNode node : nodes) {
        logger.info("--> node has {} shards (needs at least 2)",node.numberOfOwningShards());
        assertThat("at least 2 shards on node",node.numberOfOwningShards(),greaterThanOrEqualTo(2));
      }
    }
  }
);
  ensureYellow(IDX);
  logger.info("--> performing query");
  SearchResponse resp=client().prepareSearch(IDX).setQuery(matchAllQuery()).get();
  assertHitCount(resp,docCount);
  assertAcked(client().admin().indices().prepareDelete(IDX));
  assertBusyPathHasBeenCleared(dataPath);
}
