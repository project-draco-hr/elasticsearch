{
  Path dataPath=createTempDir();
  Settings nodeSettings=Settings.builder().put("node.add_lock_id_to_custom_path",false).put(Environment.PATH_SHARED_DATA_SETTING.getKey(),dataPath).build();
  String node1=internalCluster().startNode(nodeSettings);
  final String IDX="test";
  Settings idxSettings=Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,1).put(IndexMetaData.SETTING_DATA_PATH,dataPath.toAbsolutePath().toString()).put(IndexMetaData.SETTING_SHADOW_REPLICAS,true).put(IndexMetaData.SETTING_SHARED_FILESYSTEM,true).build();
  prepareCreate(IDX).setSettings(idxSettings).addMapping("doc","foo","type=text").get();
  String node2=internalCluster().startNode(nodeSettings);
  ensureGreen(IDX);
  flushAndRefresh(IDX);
  String node3=internalCluster().startNode(nodeSettings);
  final AtomicInteger counter=new AtomicInteger(0);
  final CountDownLatch started=new CountDownLatch(1);
  final int numPhase1Docs=scaledRandomIntBetween(25,200);
  final int numPhase2Docs=scaledRandomIntBetween(25,200);
  final int numPhase3Docs=scaledRandomIntBetween(25,200);
  final CountDownLatch phase1finished=new CountDownLatch(1);
  final CountDownLatch phase2finished=new CountDownLatch(1);
  final CountDownLatch phase3finished=new CountDownLatch(1);
  final AtomicBoolean keepFailing=new AtomicBoolean(true);
  MockTransportService mockTransportService=((MockTransportService)internalCluster().getInstance(TransportService.class,node1));
  mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class,node3),new MockTransportService.DelegateTransport(mockTransportService.original()){
    @Override public void sendRequest(    DiscoveryNode node,    long requestId,    String action,    TransportRequest request,    TransportRequestOptions options) throws IOException, TransportException {
      if (keepFailing.get() && action.equals(RecoveryTargetService.Actions.TRANSLOG_OPS)) {
        logger.info("--> failing translog ops");
        throw new ElasticsearchException("failing on purpose");
      }
      super.sendRequest(node,requestId,action,request,options);
    }
  }
);
  Thread thread=new Thread(){
    @Override public void run(){
      started.countDown();
      while (counter.get() < (numPhase1Docs + numPhase2Docs + numPhase3Docs)) {
        final IndexResponse indexResponse=client().prepareIndex(IDX,"doc",Integer.toString(counter.incrementAndGet())).setSource("foo","bar").get();
        assertEquals(DocWriteResponse.Result.CREATED,indexResponse.getResult());
        final int docCount=counter.get();
        if (docCount == numPhase1Docs) {
          phase1finished.countDown();
        }
 else         if (docCount == (numPhase1Docs + numPhase2Docs)) {
          phase2finished.countDown();
        }
      }
      logger.info("--> stopping indexing thread");
      phase3finished.countDown();
    }
  }
;
  thread.start();
  started.await();
  phase1finished.await();
  logger.info("--> excluding {} from allocation",node1);
  Settings build=Settings.builder().put("index.routing.allocation.exclude._name",node1).build();
  client().admin().indices().prepareUpdateSettings(IDX).setSettings(build).execute().actionGet();
  phase2finished.await();
  keepFailing.set(false);
  phase3finished.await();
  ensureGreen(IDX);
  thread.join();
  logger.info("--> performing query");
  flushAndRefresh();
  SearchResponse resp=client().prepareSearch(IDX).setQuery(matchAllQuery()).get();
  assertHitCount(resp,counter.get());
}
