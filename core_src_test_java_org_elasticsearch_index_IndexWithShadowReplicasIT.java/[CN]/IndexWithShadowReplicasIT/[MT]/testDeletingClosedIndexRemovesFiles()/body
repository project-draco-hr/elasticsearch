{
  Path dataPath=createTempDir();
  Path dataPath2=createTempDir();
  Settings nodeSettings=nodeSettings(dataPath.getParent());
  internalCluster().startNodesAsync(2,nodeSettings).get();
  String IDX="test";
  String IDX2="test2";
  Settings idxSettings=Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,5).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,1).put(IndexMetaData.SETTING_DATA_PATH,dataPath.toAbsolutePath().toString()).put(IndexMetaData.SETTING_SHADOW_REPLICAS,true).put(IndexMetaData.SETTING_SHARED_FILESYSTEM,true).build();
  Settings idx2Settings=Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,5).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,1).put(IndexMetaData.SETTING_DATA_PATH,dataPath2.toAbsolutePath().toString()).put(IndexMetaData.SETTING_SHADOW_REPLICAS,true).put(IndexMetaData.SETTING_SHARED_FILESYSTEM,true).build();
  prepareCreate(IDX).setSettings(idxSettings).addMapping("doc","foo","type=text").get();
  prepareCreate(IDX2).setSettings(idx2Settings).addMapping("doc","foo","type=text").get();
  ensureGreen(IDX,IDX2);
  int docCount=randomIntBetween(10,100);
  List<IndexRequestBuilder> builders=new ArrayList<>();
  for (int i=0; i < docCount; i++) {
    builders.add(client().prepareIndex(IDX,"doc",i + "").setSource("foo","bar"));
    builders.add(client().prepareIndex(IDX2,"doc",i + "").setSource("foo","bar"));
  }
  indexRandom(true,true,true,builders);
  flushAndRefresh(IDX,IDX2);
  logger.info("--> closing index {}",IDX);
  client().admin().indices().prepareClose(IDX).get();
  logger.info("--> deleting non-closed index");
  client().admin().indices().prepareDelete(IDX2).get();
  assertPathHasBeenCleared(dataPath2);
  logger.info("--> deleting closed index");
  client().admin().indices().prepareDelete(IDX).get();
  assertPathHasBeenCleared(dataPath);
}
