{
  final Path dataPath=createTempDir();
  Settings nodeSettings=nodeSettings(dataPath);
  internalCluster().startNodesAsync(3,nodeSettings).get();
  final String IDX="test";
  Settings idxSettings=Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,2).put(IndexSettings.INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING.getKey(),new ByteSizeValue(1,ByteSizeUnit.PB)).put(IndexMetaData.SETTING_DATA_PATH,dataPath.toAbsolutePath().toString()).put(IndexMetaData.SETTING_SHADOW_REPLICAS,true).put(IndexMetaData.SETTING_SHARED_FILESYSTEM,true).build();
  prepareCreate(IDX).setSettings(idxSettings).addMapping("doc","foo","type=text").get();
  ensureGreen(IDX);
  client().prepareIndex(IDX,"doc","1").setSource("foo","bar").get();
  client().prepareIndex(IDX,"doc","2").setSource("foo","bar").get();
  IndicesStatsResponse indicesStatsResponse=client().admin().indices().prepareStats(IDX).clear().setTranslog(true).get();
  assertEquals(2,indicesStatsResponse.getIndex(IDX).getPrimaries().getTranslog().estimatedNumberOfOperations());
  assertEquals(2,indicesStatsResponse.getIndex(IDX).getTotal().getTranslog().estimatedNumberOfOperations());
  Index index=resolveIndex(IDX);
  for (  IndicesService service : internalCluster().getInstances(IndicesService.class)) {
    IndexService indexService=service.indexService(index);
    if (indexService != null) {
      IndexShard shard=indexService.getShard(0);
      TranslogStats translogStats=shard.translogStats();
      assertTrue(translogStats != null || shard instanceof ShadowIndexShard);
      if (translogStats != null) {
        assertEquals(2,translogStats.estimatedNumberOfOperations());
      }
    }
  }
  GetResponse gResp1=client().prepareGet(IDX,"doc","1").setRealtime(true).setFields("foo").get();
  GetResponse gResp2=client().prepareGet(IDX,"doc","2").setRealtime(true).setFields("foo").get();
  assertThat(gResp1.getField("foo").getValue().toString(),equalTo("bar"));
  assertThat(gResp2.getField("foo").getValue().toString(),equalTo("bar"));
  flushAndRefresh(IDX);
  client().prepareIndex(IDX,"doc","3").setSource("foo","bar").get();
  client().prepareIndex(IDX,"doc","4").setSource("foo","bar").get();
  refresh();
  gResp1=client().prepareGet(IDX,"doc","1").setRealtime(false).setFields("foo").get();
  gResp2=client().prepareGet(IDX,"doc","2").setRealtime(false).setFields("foo").get();
  assertThat(gResp1.getField("foo").getValue().toString(),equalTo("bar"));
  assertThat(gResp2.getField("foo").getValue().toString(),equalTo("bar"));
  logger.info("--> restarting all nodes");
  if (randomBoolean()) {
    logger.info("--> rolling restart");
    internalCluster().rollingRestart();
  }
 else {
    logger.info("--> full restart");
    internalCluster().fullRestart();
  }
  client().admin().cluster().prepareHealth().setWaitForNodes("3").get();
  ensureGreen(IDX);
  flushAndRefresh(IDX);
  logger.info("--> performing query");
  SearchResponse resp=client().prepareSearch(IDX).setQuery(matchAllQuery()).get();
  assertHitCount(resp,4);
  logger.info("--> deleting index");
  assertAcked(client().admin().indices().prepareDelete(IDX));
}
