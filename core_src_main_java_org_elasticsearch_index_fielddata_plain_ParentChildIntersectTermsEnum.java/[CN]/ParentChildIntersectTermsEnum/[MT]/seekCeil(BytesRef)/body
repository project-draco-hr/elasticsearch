{
  if (states.isEmpty()) {
    return SeekStatus.END;
  }
  boolean found=false;
  if (current == null) {
    Iterator<TermsEnumState> iterator=states.iterator();
    while (iterator.hasNext()) {
      SeekStatus seekStatus=iterator.next().seekCeil(text);
      if (seekStatus == SeekStatus.END) {
        iterator.remove();
      }
 else       if (seekStatus == SeekStatus.FOUND) {
        found=true;
      }
    }
  }
 else {
    int removed=0;
    for (int i=0; i < stateSlots.size(); i++) {
      int stateSlot=stateSlots.get(i);
      SeekStatus seekStatus=states.get(stateSlot - removed).seekCeil(text);
      if (seekStatus == SeekStatus.END) {
        states.remove(stateSlot - removed);
        removed++;
      }
 else       if (seekStatus == SeekStatus.FOUND) {
        found=true;
      }
    }
  }
  if (states.isEmpty()) {
    return SeekStatus.END;
  }
  stateSlots.clear();
  if (found) {
    for (int i=0; i < states.size(); i++) {
      if (states.get(i).term.equals(text)) {
        stateSlots.add(i);
      }
    }
    current=text;
    return SeekStatus.FOUND;
  }
 else {
    BytesRef lowestTerm=states.get(0).term;
    stateSlots.add(0);
    for (int i=1; i < states.size(); i++) {
      TermsEnumState state=states.get(i);
      int cmp=lowestTerm.compareTo(state.term);
      if (cmp > 0) {
        lowestTerm=state.term;
        stateSlots.clear();
        stateSlots.add(i);
      }
 else       if (cmp == 0) {
        stateSlots.add(i);
      }
    }
    current=lowestTerm;
    return SeekStatus.NOT_FOUND;
  }
}
