{
  this.producedType=producedType;
  Errors errors=new Errors();
  @SuppressWarnings("unchecked") Class<F> factoryRawType=(Class)factoryType.getRawType();
  try {
    ImmutableMap.Builder<Method,Key<?>> returnTypesBuilder=ImmutableMap.builder();
    ImmutableMap.Builder<Method,ImmutableList<Key<?>>> paramTypesBuilder=ImmutableMap.builder();
    for (    Method method : factoryRawType.getMethods()) {
      Key<?> returnType=getKey(factoryType.getReturnType(method),method,method.getAnnotations(),errors);
      returnTypesBuilder.put(method,returnType);
      List<TypeLiteral<?>> params=factoryType.getParameterTypes(method);
      Annotation[][] paramAnnotations=method.getParameterAnnotations();
      int p=0;
      List<Key<?>> keys=new ArrayList<>();
      for (      TypeLiteral<?> param : params) {
        Key<?> paramKey=getKey(param,method,paramAnnotations[p++],errors);
        keys.add(assistKey(method,paramKey,errors));
      }
      paramTypesBuilder.put(method,ImmutableList.copyOf(keys));
    }
    returnTypesByMethod=returnTypesBuilder.build();
    paramTypes=paramTypesBuilder.build();
  }
 catch (  ErrorsException e) {
    throw new ConfigurationException(e.getErrors().getMessages());
  }
  factory=factoryRawType.cast(Proxy.newProxyInstance(factoryRawType.getClassLoader(),new Class[]{factoryRawType},this));
}
