{
  final RoutingTable routingTables=state.routingTable();
  final RoutingNodes routingNodes=state.getRoutingNodes();
  final String[] concreteIndices=indexNameExpressionResolver.concreteIndexNames(state,request);
  final Set<ShardId> shardIdsToFetch=new HashSet<>();
  logger.trace("using cluster state version [{}] to determine shards",state.version());
  for (  String index : concreteIndices) {
    IndexRoutingTable indexShardRoutingTables=routingTables.index(index);
    if (indexShardRoutingTables == null) {
      continue;
    }
    for (    IndexShardRoutingTable routing : indexShardRoutingTables) {
      final int shardId=routing.shardId().id();
      ClusterShardHealth shardHealth=new ClusterShardHealth(shardId,routing);
      if (request.shardStatuses().contains(shardHealth.getStatus())) {
        shardIdsToFetch.add(routing.shardId());
      }
    }
  }
  new AsyncShardStoresInfoFetches(state.nodes(),routingNodes,shardIdsToFetch,listener).start();
}
