{
  ImmutableOpenMap.Builder<String,ImmutableOpenIntMap<java.util.List<IndicesShardStoresResponse.StoreStatus>>> indicesStoreStatusesBuilder=ImmutableOpenMap.builder();
  java.util.List<IndicesShardStoresResponse.Failure> failureBuilder=new ArrayList<>();
  for (  Response fetchResponse : fetchResponses) {
    ImmutableOpenIntMap<java.util.List<IndicesShardStoresResponse.StoreStatus>> indexStoreStatuses=indicesStoreStatusesBuilder.get(fetchResponse.shardId.getIndexName());
    final ImmutableOpenIntMap.Builder<java.util.List<IndicesShardStoresResponse.StoreStatus>> indexShardsBuilder;
    if (indexStoreStatuses == null) {
      indexShardsBuilder=ImmutableOpenIntMap.builder();
    }
 else {
      indexShardsBuilder=ImmutableOpenIntMap.builder(indexStoreStatuses);
    }
    java.util.List<IndicesShardStoresResponse.StoreStatus> storeStatuses=indexShardsBuilder.get(fetchResponse.shardId.id());
    if (storeStatuses == null) {
      storeStatuses=new ArrayList<>();
    }
    for (    NodeGatewayStartedShards response : fetchResponse.responses) {
      if (shardExistsInNode(response)) {
        IndicesShardStoresResponse.StoreStatus.AllocationStatus allocationStatus=getAllocationStatus(fetchResponse.shardId.getIndexName(),fetchResponse.shardId.id(),response.getNode());
        storeStatuses.add(new IndicesShardStoresResponse.StoreStatus(response.getNode(),response.legacyVersion(),response.allocationId(),allocationStatus,response.storeException()));
      }
    }
    CollectionUtil.timSort(storeStatuses);
    indexShardsBuilder.put(fetchResponse.shardId.id(),storeStatuses);
    indicesStoreStatusesBuilder.put(fetchResponse.shardId.getIndexName(),indexShardsBuilder.build());
    for (    FailedNodeException failure : fetchResponse.failures) {
      failureBuilder.add(new IndicesShardStoresResponse.Failure(failure.nodeId(),fetchResponse.shardId.getIndexName(),fetchResponse.shardId.id(),failure.getCause()));
    }
  }
  listener.onResponse(new IndicesShardStoresResponse(indicesStoreStatusesBuilder.build(),Collections.unmodifiableList(failureBuilder)));
}
