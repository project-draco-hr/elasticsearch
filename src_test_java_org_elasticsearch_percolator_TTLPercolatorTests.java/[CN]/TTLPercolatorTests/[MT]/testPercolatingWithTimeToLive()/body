{
  Client client=client();
  client.admin().indices().prepareDelete().execute().actionGet();
  ensureGreen();
  String precolatorMapping=XContentFactory.jsonBuilder().startObject().startObject(PercolatorService.TYPE_NAME).startObject("_ttl").field("enabled",true).endObject().startObject("_timestamp").field("enabled",true).endObject().endObject().endObject().string();
  String typeMapping=XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("_ttl").field("enabled",true).endObject().startObject("_timestamp").field("enabled",true).endObject().endObject().endObject().string();
  client.admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards",2)).addMapping(PercolatorService.TYPE_NAME,precolatorMapping).addMapping("type1",typeMapping).execute().actionGet();
  ensureGreen();
  long ttl=1500;
  long now=System.currentTimeMillis();
  client.prepareIndex("test",PercolatorService.TYPE_NAME,"kuku").setSource(jsonBuilder().startObject().startObject("query").startObject("term").field("field1","value1").endObject().endObject().endObject()).setRefresh(true).setTTL(ttl).execute().actionGet();
  IndicesStatsResponse response=client.admin().indices().prepareStats("test").clear().setIndexing(true).execute().actionGet();
  assertThat(response.getIndices().get("test").getTotal().getIndexing().getTotal().getIndexCount(),equalTo(2l));
  PercolateResponse percolateResponse=client.preparePercolate().setIndices("test").setDocumentType("type1").setSource(jsonBuilder().startObject().startObject("doc").field("field1","value1").endObject().endObject()).execute().actionGet();
  assertNoFailures(percolateResponse);
  if (percolateResponse.getMatches().length == 0) {
    GetResponse getResponse=client.prepareGet("test",PercolatorService.TYPE_NAME,"kuku").execute().actionGet();
    assertThat(getResponse.isExists(),equalTo(false));
    response=client.admin().indices().prepareStats("test").clear().setIndexing(true).execute().actionGet();
    long currentDeleteCount=response.getIndices().get("test").getTotal().getIndexing().getTotal().getDeleteCount();
    assertThat(currentDeleteCount,equalTo(2l));
    return;
  }
  assertThat(convertFromTextArray(percolateResponse.getMatches(),"test"),arrayContaining("kuku"));
  long timeSpent=System.currentTimeMillis() - now;
  long waitTime=ttl + PURGE_INTERVAL - timeSpent;
  if (waitTime >= 0) {
    Thread.sleep(waitTime);
  }
  logger.info("Checking if the ttl purger has run");
  long currentDeleteCount;
  do {
    response=client.admin().indices().prepareStats("test").clear().setIndexing(true).execute().actionGet();
    currentDeleteCount=response.getIndices().get("test").getTotal().getIndexing().getTotal().getDeleteCount();
  }
 while (currentDeleteCount < 2);
  assertThat(currentDeleteCount,equalTo(2l));
  percolateResponse=client.preparePercolate().setIndices("test").setDocumentType("type1").setSource(jsonBuilder().startObject().startObject("doc").field("field1","value1").endObject().endObject()).execute().actionGet();
  assertNoFailures(percolateResponse);
  assertThat(percolateResponse.getMatches(),emptyArray());
}
