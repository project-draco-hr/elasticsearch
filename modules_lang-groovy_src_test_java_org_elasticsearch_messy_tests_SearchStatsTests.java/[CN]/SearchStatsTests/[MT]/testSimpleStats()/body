{
  client().admin().indices().prepareStats().clear().execute().actionGet();
  final int numNodes=cluster().numDataNodes();
  assertThat(numNodes,greaterThanOrEqualTo(2));
  final int shardsIdx1=randomIntBetween(1,10);
  final int shardsIdx2=Math.max(numNodes - shardsIdx1,randomIntBetween(1,10));
  assertThat(numNodes,lessThanOrEqualTo(shardsIdx1 + shardsIdx2));
  assertAcked(prepareCreate("test1").setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS,shardsIdx1).put(SETTING_NUMBER_OF_REPLICAS,0)));
  int docsTest1=scaledRandomIntBetween(3 * shardsIdx1,5 * shardsIdx1);
  for (int i=0; i < docsTest1; i++) {
    client().prepareIndex("test1","type",Integer.toString(i)).setSource("field","value").execute().actionGet();
    if (rarely()) {
      refresh();
    }
  }
  assertAcked(prepareCreate("test2").setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS,shardsIdx2).put(SETTING_NUMBER_OF_REPLICAS,0)));
  int docsTest2=scaledRandomIntBetween(3 * shardsIdx2,5 * shardsIdx2);
  for (int i=0; i < docsTest2; i++) {
    client().prepareIndex("test2","type",Integer.toString(i)).setSource("field","value").execute().actionGet();
    if (rarely()) {
      refresh();
    }
  }
  assertThat(shardsIdx1 + shardsIdx2,equalTo(numAssignedShards("test1","test2")));
  assertThat(numAssignedShards("test1","test2"),greaterThanOrEqualTo(2));
  ensureGreen();
  refresh();
  int iters=scaledRandomIntBetween(100,150);
  for (int i=0; i < iters; i++) {
    SearchResponse searchResponse=internalCluster().coordOnlyNodeClient().prepareSearch().setQuery(QueryBuilders.termQuery("field","value")).setStats("group1","group2").highlighter(new HighlightBuilder().field("field")).addScriptField("scrip1",new Script("_source.field")).setSize(100).execute().actionGet();
    assertHitCount(searchResponse,docsTest1 + docsTest2);
    assertAllSuccessful(searchResponse);
  }
  IndicesStatsResponse indicesStats=client().admin().indices().prepareStats().execute().actionGet();
  logger.debug("###### indices search stats: {}",indicesStats.getTotal().getSearch());
  assertThat(indicesStats.getTotal().getSearch().getTotal().getQueryCount(),greaterThan(0L));
  assertThat(indicesStats.getTotal().getSearch().getTotal().getQueryTimeInMillis(),greaterThan(0L));
  assertThat(indicesStats.getTotal().getSearch().getTotal().getFetchCount(),greaterThan(0L));
  assertThat(indicesStats.getTotal().getSearch().getTotal().getFetchTimeInMillis(),greaterThan(0L));
  assertThat(indicesStats.getTotal().getSearch().getGroupStats(),nullValue());
  indicesStats=client().admin().indices().prepareStats().setGroups("group1").execute().actionGet();
  assertThat(indicesStats.getTotal().getSearch().getGroupStats(),notNullValue());
  assertThat(indicesStats.getTotal().getSearch().getGroupStats().get("group1").getQueryCount(),greaterThan(0L));
  assertThat(indicesStats.getTotal().getSearch().getGroupStats().get("group1").getQueryTimeInMillis(),greaterThan(0L));
  assertThat(indicesStats.getTotal().getSearch().getGroupStats().get("group1").getFetchCount(),greaterThan(0L));
  assertThat(indicesStats.getTotal().getSearch().getGroupStats().get("group1").getFetchTimeInMillis(),greaterThan(0L));
  NodesStatsResponse nodeStats=client().admin().cluster().prepareNodesStats().execute().actionGet();
  NodeStats[] nodes=nodeStats.getNodes();
  Set<String> nodeIdsWithIndex=nodeIdsWithIndex("test1","test2");
  int num=0;
  for (  NodeStats stat : nodes) {
    Stats total=stat.getIndices().getSearch().getTotal();
    if (nodeIdsWithIndex.contains(stat.getNode().getId())) {
      assertThat(total.getQueryCount(),greaterThan(0L));
      assertThat(total.getQueryTimeInMillis(),greaterThan(0L));
      num++;
    }
 else {
      assertThat(total.getQueryCount(),equalTo(0L));
      assertThat(total.getQueryTimeInMillis(),equalTo(0L));
    }
  }
  assertThat(num,greaterThan(0));
}
