{
  final Weight verifiedMatchesWeight=verifiedMatchesQuery.createWeight(searcher,false);
  final Weight candidateMatchesWeight=candidateMatchesQuery.createWeight(searcher,false);
  return new Weight(this){
    @Override public void extractTerms(    Set<Term> set){
    }
    @Override public Explanation explain(    LeafReaderContext leafReaderContext,    int docId) throws IOException {
      Scorer scorer=scorer(leafReaderContext);
      if (scorer != null) {
        TwoPhaseIterator twoPhaseIterator=scorer.twoPhaseIterator();
        int result=twoPhaseIterator.approximation().advance(docId);
        if (result == docId) {
          if (twoPhaseIterator.matches()) {
            if (needsScores) {
              QueryStore.Leaf percolatorQueries=queryStore.getQueries(leafReaderContext);
              Query query=percolatorQueries.getQuery(docId);
              Explanation detail=percolatorIndexSearcher.explain(query,0);
              return Explanation.match(scorer.score(),"PercolateQuery",detail);
            }
 else {
              return Explanation.match(scorer.score(),"PercolateQuery");
            }
          }
        }
      }
      return Explanation.noMatch("PercolateQuery");
    }
    @Override public float getValueForNormalization() throws IOException {
      return candidateMatchesWeight.getValueForNormalization();
    }
    @Override public void normalize(    float v,    float v1){
      candidateMatchesWeight.normalize(v,v1);
    }
    @Override public Scorer scorer(    LeafReaderContext leafReaderContext) throws IOException {
      final Scorer approximation=candidateMatchesWeight.scorer(leafReaderContext);
      if (approximation == null) {
        return null;
      }
      final QueryStore.Leaf queries=queryStore.getQueries(leafReaderContext);
      if (needsScores) {
        return new BaseScorer(this,approximation,queries,percolatorIndexSearcher){
          float score;
          @Override boolean matchDocId(          int docId) throws IOException {
            Query query=percolatorQueries.getQuery(docId);
            if (query != null) {
              TopDocs topDocs=percolatorIndexSearcher.search(query,1);
              if (topDocs.totalHits > 0) {
                score=topDocs.scoreDocs[0].score;
                return true;
              }
 else {
                return false;
              }
            }
 else {
              return false;
            }
          }
          @Override public float score() throws IOException {
            return score;
          }
        }
;
      }
 else {
        Scorer verifiedDocsScorer=verifiedMatchesWeight.scorer(leafReaderContext);
        Bits verifiedDocsBits=Lucene.asSequentialAccessBits(leafReaderContext.reader().maxDoc(),verifiedDocsScorer);
        return new BaseScorer(this,approximation,queries,percolatorIndexSearcher){
          @Override public float score() throws IOException {
            return 0f;
          }
          boolean matchDocId(          int docId) throws IOException {
            if (verifiedDocsBits.get(docId)) {
              return true;
            }
            Query query=percolatorQueries.getQuery(docId);
            return query != null && Lucene.exists(percolatorIndexSearcher,query);
          }
        }
;
      }
    }
  }
;
}
