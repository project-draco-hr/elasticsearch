{
  Settings commonSettings=ImmutableSettings.settingsBuilder().put("cluster.routing.allocation.awareness.force.zone.values","a,b").put("cluster.routing.allocation.awareness.attributes","zone").build();
  logger.info("--> starting 4 nodes on different zones");
  List<String> nodes=internalCluster().startNodesAsync(ImmutableSettings.settingsBuilder().put(commonSettings).put("node.zone","a").build(),ImmutableSettings.settingsBuilder().put(commonSettings).put("node.zone","b").build(),ImmutableSettings.settingsBuilder().put(commonSettings).put("node.zone","b").build(),ImmutableSettings.settingsBuilder().put(commonSettings).put("node.zone","a").build()).get();
  String A_0=nodes.get(0);
  String B_0=nodes.get(1);
  String B_1=nodes.get(2);
  String A_1=nodes.get(3);
  client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards",5).put("index.number_of_replicas",1)).execute().actionGet();
  ClusterHealthResponse health=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().setWaitForNodes("4").setWaitForRelocatingShards(0).execute().actionGet();
  assertThat(health.isTimedOut(),equalTo(false));
  ClusterState clusterState=client().admin().cluster().prepareState().execute().actionGet().getState();
  ObjectIntOpenHashMap<String> counts=new ObjectIntOpenHashMap<>();
  for (  IndexRoutingTable indexRoutingTable : clusterState.routingTable()) {
    for (    IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {
      for (      ShardRouting shardRouting : indexShardRoutingTable) {
        counts.addTo(clusterState.nodes().get(shardRouting.currentNodeId()).name(),1);
      }
    }
  }
  assertThat(counts.get(A_1),anyOf(equalTo(2),equalTo(3)));
  assertThat(counts.get(B_1),anyOf(equalTo(2),equalTo(3)));
  assertThat(counts.get(A_0),anyOf(equalTo(2),equalTo(3)));
  assertThat(counts.get(B_0),anyOf(equalTo(2),equalTo(3)));
}
