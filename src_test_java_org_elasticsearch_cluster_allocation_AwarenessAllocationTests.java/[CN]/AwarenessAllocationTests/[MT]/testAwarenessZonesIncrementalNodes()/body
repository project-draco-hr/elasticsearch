{
  Settings commonSettings=ImmutableSettings.settingsBuilder().put("cluster.routing.allocation.awareness.force.zone.values","a,b").put("cluster.routing.allocation.awareness.attributes","zone").build();
  logger.info("--> starting 2 nodes on zones 'a' & 'b'");
  String A_0=cluster().startNode(ImmutableSettings.settingsBuilder().put(commonSettings).put("node.zone","a").build());
  String B_0=cluster().startNode(ImmutableSettings.settingsBuilder().put(commonSettings).put("node.zone","b").build());
  client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards",5).put("index.number_of_replicas",1)).execute().actionGet();
  ClusterHealthResponse health=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().setWaitForNodes("2").setWaitForRelocatingShards(0).execute().actionGet();
  assertThat(health.isTimedOut(),equalTo(false));
  ClusterState clusterState=client().admin().cluster().prepareState().execute().actionGet().getState();
  ObjectIntOpenHashMap<String> counts=new ObjectIntOpenHashMap<String>();
  for (  IndexRoutingTable indexRoutingTable : clusterState.routingTable()) {
    for (    IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {
      for (      ShardRouting shardRouting : indexShardRoutingTable) {
        counts.addTo(clusterState.nodes().get(shardRouting.currentNodeId()).name(),1);
      }
    }
  }
  assertThat(counts.get(A_0),equalTo(5));
  assertThat(counts.get(B_0),equalTo(5));
  logger.info("--> starting another node in zone 'b'");
  String B_1=cluster().startNode(ImmutableSettings.settingsBuilder().put(commonSettings).put("node.zone","b").build());
  health=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().setWaitForNodes("3").execute().actionGet();
  assertThat(health.isTimedOut(),equalTo(false));
  client().admin().cluster().prepareReroute().get();
  health=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().setWaitForNodes("3").setWaitForActiveShards(10).setWaitForRelocatingShards(0).execute().actionGet();
  assertThat(health.isTimedOut(),equalTo(false));
  clusterState=client().admin().cluster().prepareState().execute().actionGet().getState();
  counts=new ObjectIntOpenHashMap<String>();
  for (  IndexRoutingTable indexRoutingTable : clusterState.routingTable()) {
    for (    IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {
      for (      ShardRouting shardRouting : indexShardRoutingTable) {
        counts.addTo(clusterState.nodes().get(shardRouting.currentNodeId()).name(),1);
      }
    }
  }
  assertThat(counts.get(A_0),equalTo(5));
  assertThat(counts.get(B_0),equalTo(3));
  assertThat(counts.get(B_1),equalTo(2));
}
