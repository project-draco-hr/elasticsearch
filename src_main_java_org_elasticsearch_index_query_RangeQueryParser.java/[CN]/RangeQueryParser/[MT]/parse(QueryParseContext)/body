{
  XContentParser parser=parseContext.parser();
  XContentParser.Token token=parser.nextToken();
  if (token != XContentParser.Token.FIELD_NAME) {
    throw new QueryParsingException(parseContext.index(),"[range] query malformed, no field to indicate field name");
  }
  String fieldName=parser.currentName();
  token=parser.nextToken();
  if (token != XContentParser.Token.START_OBJECT) {
    throw new QueryParsingException(parseContext.index(),"[range] query malformed, after field missing start object");
  }
  Object from=null;
  Object to=null;
  boolean includeLower=true;
  boolean includeUpper=true;
  float boost=1.0f;
  String currentFieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else {
      if ("from".equals(currentFieldName)) {
        from=parser.objectBytes();
      }
 else       if ("to".equals(currentFieldName)) {
        to=parser.objectBytes();
      }
 else       if ("include_lower".equals(currentFieldName) || "includeLower".equals(currentFieldName)) {
        includeLower=parser.booleanValue();
      }
 else       if ("include_upper".equals(currentFieldName) || "includeUpper".equals(currentFieldName)) {
        includeUpper=parser.booleanValue();
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=parser.floatValue();
      }
 else       if ("gt".equals(currentFieldName)) {
        from=parser.objectBytes();
        includeLower=false;
      }
 else       if ("gte".equals(currentFieldName) || "ge".equals(currentFieldName)) {
        from=parser.objectBytes();
        includeLower=true;
      }
 else       if ("lt".equals(currentFieldName)) {
        to=parser.objectBytes();
        includeUpper=false;
      }
 else       if ("lte".equals(currentFieldName) || "le".equals(currentFieldName)) {
        to=parser.objectBytes();
        includeUpper=true;
      }
 else {
        throw new QueryParsingException(parseContext.index(),"[range] query does not support [" + currentFieldName + "]");
      }
    }
  }
  token=parser.nextToken();
  if (token != XContentParser.Token.END_OBJECT) {
    throw new QueryParsingException(parseContext.index(),"[range] query malformed, does not end with an object");
  }
  Query query=null;
  MapperService.SmartNameFieldMappers smartNameFieldMappers=parseContext.smartFieldMappers(fieldName);
  if (smartNameFieldMappers != null) {
    if (smartNameFieldMappers.hasMapper()) {
      query=smartNameFieldMappers.mapper().rangeQuery(from,to,includeLower,includeUpper,parseContext);
    }
  }
  if (query == null) {
    query=new TermRangeQuery(fieldName,BytesRefs.toBytesRef(from),BytesRefs.toBytesRef(to),includeLower,includeUpper);
  }
  query.setBoost(boost);
  return wrapSmartNameQuery(query,smartNameFieldMappers,parseContext);
}
