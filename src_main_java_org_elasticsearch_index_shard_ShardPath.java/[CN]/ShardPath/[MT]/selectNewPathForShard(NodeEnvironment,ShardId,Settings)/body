{
  final String indexUUID=indexSettings.get(IndexMetaData.SETTING_UUID,IndexMetaData.INDEX_UUID_NA_VALUE);
  final NodeEnvironment.NodePath[] paths=env.nodePaths();
  final List<Tuple<Path,Long>> minUsedPaths=new ArrayList<>();
  for (  NodeEnvironment.NodePath nodePath : paths) {
    final Path shardPath=nodePath.resolve(shardId);
    FileStore fileStore=nodePath.fileStore;
    long usableSpace=fileStore.getUsableSpace();
    if (minUsedPaths.isEmpty() || minUsedPaths.get(0).v2() == usableSpace) {
      minUsedPaths.add(new Tuple<>(shardPath,usableSpace));
    }
 else     if (minUsedPaths.get(0).v2() < usableSpace) {
      minUsedPaths.clear();
      minUsedPaths.add(new Tuple<>(shardPath,usableSpace));
    }
  }
  Path minUsed=minUsedPaths.get(shardId.id() % minUsedPaths.size()).v1();
  final Path dataPath;
  final Path statePath=minUsed;
  if (NodeEnvironment.hasCustomDataPath(indexSettings)) {
    dataPath=env.resolveCustomLocation(indexSettings,shardId);
  }
 else {
    dataPath=statePath;
  }
  return new ShardPath(dataPath,statePath,indexUUID,shardId);
}
