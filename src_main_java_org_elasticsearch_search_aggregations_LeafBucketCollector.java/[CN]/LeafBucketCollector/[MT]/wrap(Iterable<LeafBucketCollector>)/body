{
  final Iterable<LeafBucketCollector> actualCollectors=Iterables.filter(collectors,new Predicate<LeafBucketCollector>(){
    @Override public boolean apply(    LeafBucketCollector c){
      return c != NO_OP_COLLECTOR;
    }
  }
);
  final LeafBucketCollector[] colls=Iterables.toArray(actualCollectors,LeafBucketCollector.class);
switch (colls.length) {
case 0:
    return NO_OP_COLLECTOR;
case 1:
  return colls[0];
default :
return new LeafBucketCollector(){
  @Override public void setScorer(  Scorer s) throws IOException {
    for (    LeafBucketCollector c : colls) {
      c.setScorer(s);
    }
  }
  @Override public void collect(  int doc,  long bucket) throws IOException {
    for (    LeafBucketCollector c : colls) {
      c.collect(doc,bucket);
    }
  }
}
;
}
}
