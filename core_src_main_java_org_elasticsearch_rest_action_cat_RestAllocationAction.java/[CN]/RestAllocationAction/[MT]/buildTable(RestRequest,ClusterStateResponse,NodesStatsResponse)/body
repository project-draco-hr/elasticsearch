{
  final ObjectIntScatterMap<String> allocs=new ObjectIntScatterMap<>();
  for (  ShardRouting shard : state.getState().routingTable().allShards()) {
    String nodeId="UNASSIGNED";
    if (shard.assignedToNode()) {
      nodeId=shard.currentNodeId();
    }
    allocs.addTo(nodeId,1);
  }
  Table table=getTableWithHeader(request);
  for (  NodeStats nodeStats : stats.getNodes()) {
    DiscoveryNode node=nodeStats.getNode();
    int shardCount=allocs.getOrDefault(node.id(),0);
    ByteSizeValue total=nodeStats.getFs().getTotal().getTotal();
    ByteSizeValue avail=nodeStats.getFs().getTotal().getAvailable();
    long used=0;
    short diskPercent=-1;
    if (total.bytes() > 0) {
      used=total.bytes() - avail.bytes();
      if (used >= 0 && avail.bytes() >= 0) {
        diskPercent=(short)(used * 100 / (used + avail.bytes()));
      }
    }
    table.startRow();
    table.addCell(shardCount);
    table.addCell(used < 0 ? null : new ByteSizeValue(used));
    table.addCell(avail.bytes() < 0 ? null : avail);
    table.addCell(total.bytes() < 0 ? null : total);
    table.addCell(diskPercent < 0 ? null : diskPercent);
    table.addCell(node.getHostName());
    table.addCell(node.getHostAddress());
    table.addCell(node.name());
    table.endRow();
  }
  final String UNASSIGNED="UNASSIGNED";
  if (allocs.containsKey(UNASSIGNED)) {
    table.startRow();
    table.addCell(allocs.get(UNASSIGNED));
    table.addCell(null);
    table.addCell(null);
    table.addCell(null);
    table.addCell(null);
    table.addCell(null);
    table.addCell(null);
    table.addCell(UNASSIGNED);
    table.endRow();
  }
  return table;
}
