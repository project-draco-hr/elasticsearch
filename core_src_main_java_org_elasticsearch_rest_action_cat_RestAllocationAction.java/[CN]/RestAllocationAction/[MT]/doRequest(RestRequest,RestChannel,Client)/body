{
  final String[] nodes=Strings.splitStringByCommaToArray(request.param("nodes","data:true"));
  final ClusterStateRequest clusterStateRequest=new ClusterStateRequest();
  clusterStateRequest.clear().routingTable(true);
  clusterStateRequest.local(request.paramAsBoolean("local",clusterStateRequest.local()));
  clusterStateRequest.masterNodeTimeout(request.paramAsTime("master_timeout",clusterStateRequest.masterNodeTimeout()));
  client.admin().cluster().state(clusterStateRequest,new RestActionListener<ClusterStateResponse>(channel){
    @Override public void processResponse(    final ClusterStateResponse state){
      NodesStatsRequest statsRequest=new NodesStatsRequest(nodes);
      statsRequest.clear().fs(true).indices(new CommonStatsFlags(CommonStatsFlags.Flag.Store));
      client.admin().cluster().nodesStats(statsRequest,new RestResponseListener<NodesStatsResponse>(channel){
        @Override public RestResponse buildResponse(        NodesStatsResponse stats) throws Exception {
          Table tab=buildTable(request,state,stats);
          return RestTable.buildResponse(tab,channel);
        }
      }
);
    }
  }
);
}
