{
  IndexSearcher searcher=new IndexSearcher(reader);
  searcher.setSimilarity(engineConfig.getSimilarity());
  if (warmer != null) {
    IndexSearcher newSearcher=null;
    boolean closeNewSearcher=false;
    try {
      if (indexWriter == null) {
        newSearcher=searcher;
      }
 else {
        try (final Searcher currentSearcher=acquireSearcher("search_factory")){
          List<IndexReader> readers=Lists.newArrayList();
          for (          LeafReaderContext newReaderContext : searcher.getIndexReader().leaves()) {
            if (isMergedSegment(newReaderContext.reader())) {
              continue;
            }
            boolean found=false;
            for (            LeafReaderContext currentReaderContext : currentSearcher.reader().leaves()) {
              if (currentReaderContext.reader().getCoreCacheKey().equals(newReaderContext.reader().getCoreCacheKey())) {
                found=true;
                break;
              }
            }
            if (!found) {
              readers.add(newReaderContext.reader());
            }
          }
          if (!readers.isEmpty()) {
            newSearcher=new IndexSearcher(new MultiReader(readers.toArray(new IndexReader[readers.size()]),false));
            closeNewSearcher=true;
          }
        }
       }
      if (newSearcher != null) {
        IndicesWarmer.WarmerContext context=new IndicesWarmer.WarmerContext(shardId,new SimpleSearcher("warmer",newSearcher));
        warmer.warmNewReaders(context);
      }
      warmer.warmTopReader(new IndicesWarmer.WarmerContext(shardId,new SimpleSearcher("warmer",searcher)));
    }
 catch (    Throwable e) {
      if (!closed) {
        logger.warn("failed to prepare/warm",e);
      }
    }
 finally {
      if (newSearcher != null && closeNewSearcher) {
        IOUtils.closeWhileHandlingException(newSearcher.getIndexReader());
      }
    }
  }
  return searcher;
}
