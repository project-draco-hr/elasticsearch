{
  Preconditions.checkNotNull(store,"Store must be provided to the engine");
  Preconditions.checkNotNull(deletionPolicy,"Snapshot deletion policy must be provided to the engine");
  Preconditions.checkNotNull(translog,"Translog must be provided to the engine");
  this.shardId=shardId;
  this.logger=logger;
  this.gcDeletesInMillis=gcDeletesInMillis;
  this.enableGcDeletes=enableGcDeletes;
  this.indexingBufferSize=indexingBufferSize;
  this.codecName=codecName;
  this.threadPool=threadPool;
  this.lastDeleteVersionPruneTimeMSec=threadPool.estimatedTimeInMillis();
  this.indexingService=indexingService;
  this.warmer=(InternalIndicesWarmer)warmer;
  this.store=store;
  this.deletionPolicy=deletionPolicy;
  this.translog=translog;
  this.mergePolicyProvider=mergePolicyProvider;
  this.mergeScheduler=mergeScheduler;
  this.analysisService=analysisService;
  this.similarityService=similarityService;
  this.codecService=codecService;
  this.compoundOnFlush=compoundOnFlush;
  this.indexConcurrency=indexConcurrency;
  this.versionMap=new LiveVersionMap();
  this.dirtyLocks=new Object[indexConcurrency * 50];
  for (int i=0; i < dirtyLocks.length; i++) {
    dirtyLocks[i]=new Object();
  }
  this.optimizeAutoGenerateId=optimizeAutoGenerateId;
  this.failEngineOnCorruption=failEngineOnCorruption;
  this.failedEngineListener=failedEngineListener;
  store.incRef();
  throttle=new IndexThrottle();
}
