{
  try (InternalLock _=writeLock.acquire()){
    if (indexWriter != null) {
      throw new EngineAlreadyStartedException(shardId);
    }
    if (closed) {
      throw new EngineClosedException(shardId);
    }
    if (logger.isDebugEnabled()) {
      logger.debug("starting engine");
    }
    try {
      this.indexWriter=createWriter();
      mergeScheduler.removeListener(this.throttle);
      this.throttle=new IndexThrottle(mergeScheduler.getMaxMerges(),logger);
      mergeScheduler.addListener(throttle);
    }
 catch (    IOException e) {
      throw new EngineCreationFailureException(shardId,"failed to create engine",e);
    }
    try {
      if (Lucene.indexExists(store.directory())) {
        Map<String,String> commitUserData=Lucene.readSegmentInfos(store.directory()).getUserData();
        if (commitUserData.containsKey(Translog.TRANSLOG_ID_KEY)) {
          translogIdGenerator.set(Long.parseLong(commitUserData.get(Translog.TRANSLOG_ID_KEY)));
        }
 else {
          translogIdGenerator.set(System.currentTimeMillis());
          indexWriter.setCommitData(MapBuilder.<String,String>newMapBuilder().put(Translog.TRANSLOG_ID_KEY,Long.toString(translogIdGenerator.get())).map());
          indexWriter.commit();
        }
      }
 else {
        translogIdGenerator.set(System.currentTimeMillis());
        indexWriter.setCommitData(MapBuilder.<String,String>newMapBuilder().put(Translog.TRANSLOG_ID_KEY,Long.toString(translogIdGenerator.get())).map());
        indexWriter.commit();
      }
      translog.newTranslog(translogIdGenerator.get());
      this.searcherManager=buildSearchManager(indexWriter);
      versionMap.setManager(searcherManager);
      readLastCommittedSegmentsInfo();
    }
 catch (    IOException e) {
      try {
        indexWriter.rollback();
      }
 catch (      IOException e1) {
      }
 finally {
        IOUtils.closeWhileHandlingException(indexWriter);
      }
      throw new EngineCreationFailureException(shardId,"failed to open reader on writer",e);
    }
  }
 }
