{
synchronized (dirtyLock(create.uid())) {
    final long currentVersion;
    final VersionValue versionValue;
    if (optimizeAutoGenerateId && create.autoGeneratedId() && !create.canHaveDuplicates()) {
      currentVersion=Versions.NOT_FOUND;
      versionValue=null;
    }
 else {
      versionValue=versionMap.getUnderLock(create.uid().bytes());
      if (versionValue == null) {
        currentVersion=loadCurrentVersionFromIndex(create.uid());
      }
 else {
        if (enableGcDeletes && versionValue.delete() && (threadPool.estimatedTimeInMillis() - versionValue.time()) > gcDeletesInMillis) {
          currentVersion=Versions.NOT_FOUND;
        }
 else {
          currentVersion=versionValue.version();
        }
      }
    }
    long updatedVersion;
    long expectedVersion=create.version();
    if (create.versionType().isVersionConflictForWrites(currentVersion,expectedVersion)) {
      if (create.origin() == Operation.Origin.RECOVERY) {
        return;
      }
 else {
        throw new VersionConflictEngineException(shardId,create.type(),create.id(),currentVersion,expectedVersion);
      }
    }
    updatedVersion=create.versionType().updateVersion(currentVersion,expectedVersion);
    if (versionValue != null) {
      if (!versionValue.delete()) {
        if (create.origin() == Operation.Origin.RECOVERY) {
          return;
        }
 else {
          throw new DocumentAlreadyExistsException(shardId,create.type(),create.id());
        }
      }
    }
 else     if (currentVersion != Versions.NOT_FOUND) {
      if (create.origin() == Operation.Origin.RECOVERY) {
        return;
      }
 else {
        throw new DocumentAlreadyExistsException(shardId,create.type(),create.id());
      }
    }
    create.updateVersion(updatedVersion);
    if (create.docs().size() > 1) {
      writer.addDocuments(create.docs(),create.analyzer());
    }
 else {
      writer.addDocument(create.docs().get(0),create.analyzer());
    }
    Translog.Location translogLocation=translog.add(new Translog.Create(create));
    versionMap.putUnderLock(create.uid().bytes(),new VersionValue(updatedVersion,translogLocation));
    indexingService.postCreateUnderLock(create);
  }
}
