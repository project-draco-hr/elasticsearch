{
  ensureOpen();
  if (this.gcDeletesInMillis != gcDeletesInMillis) {
    logger.trace("[impl] updating gcDeletesInMillis from [{}] to [{}]",this.gcDeletesInMillis,gcDeletesInMillis);
    this.gcDeletesInMillis=gcDeletesInMillis;
  }
  if (this.compoundOnFlush != compoundOnFlush) {
    this.compoundOnFlush=compoundOnFlush;
    logger.trace("[impl] updating compoundOnFlush from [{}] to [{}]",this.compoundOnFlush,compoundOnFlush);
    indexWriter.getConfig().setUseCompoundFile(compoundOnFlush);
  }
  if (this.failEngineOnCorruption != failEngineOnCorruption) {
    logger.trace("[impl] updating failEngineOnCorruption from [{}] to [{}]",this.failEngineOnCorruption,failEngineOnCorruption);
    this.failEngineOnCorruption=failEngineOnCorruption;
  }
  if (indexConcurrency != this.indexConcurrency || !codecName.equals(this.codecName)) {
    boolean requiresFlushing=false;
    try (InternalLock _=readLock.acquire()){
      if (indexConcurrency != this.indexConcurrency) {
        logger.trace("[impl] updating indexConcurrency from [{}] to [{}]",this.indexConcurrency,indexConcurrency);
        this.indexConcurrency=indexConcurrency;
        requiresFlushing=true;
      }
      if (!codecName.equals(this.codecName)) {
        logger.trace("[impl] updating codecName from [{}] to [{}]",this.codecName,codecName);
        this.codecName=codecName;
        requiresFlushing=true;
      }
    }
  finally {
      if (requiresFlushing) {
        flush(new Flush().type(Flush.Type.NEW_WRITER));
      }
    }
  }
}
