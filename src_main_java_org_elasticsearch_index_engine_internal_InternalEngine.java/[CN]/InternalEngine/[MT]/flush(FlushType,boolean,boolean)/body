{
  ensureOpen();
  if (type == FlushType.COMMIT_TRANSLOG) {
    if (onGoingRecoveries.get() > 0) {
      throw new FlushNotAllowedEngineException(shardId,"recovery is in progress, flush [" + type + "] is not allowed");
    }
  }
  int currentFlushing=flushing.incrementAndGet();
  if (currentFlushing > 1 && waitIfOngoing == false) {
    flushing.decrementAndGet();
    throw new FlushNotAllowedEngineException(shardId,"already flushing...");
  }
  flushLock.lock();
  try {
    if (type == FlushType.COMMIT_TRANSLOG) {
      try (InternalLock _=readLock.acquire()){
        final IndexWriter indexWriter=currentIndexWriter();
        if (onGoingRecoveries.get() > 0) {
          throw new FlushNotAllowedEngineException(shardId,"Recovery is in progress, flush is not allowed");
        }
        if (flushNeeded || force) {
          flushNeeded=false;
          try {
            long translogId=translogIdGenerator.incrementAndGet();
            translog.newTransientTranslog(translogId);
            indexWriter.setCommitData(Collections.singletonMap(Translog.TRANSLOG_ID_KEY,Long.toString(translogId)));
            indexWriter.commit();
            refresh("version_table_flush");
            translog.makeTransientCurrent();
          }
 catch (          Throwable e) {
            try {
              translog.revertTransient();
            }
 catch (            IOException ex) {
              e.addSuppressed(ex);
            }
            throw new FlushFailedEngineException(shardId,e);
          }
        }
      }
       if (engineConfig.isEnableGcDeletes()) {
        pruneDeletedTombstones();
      }
    }
 else     if (type == FlushType.COMMIT) {
      try (InternalLock _=readLock.acquire()){
        final IndexWriter indexWriter=currentIndexWriter();
        try {
          long translogId=translog.currentId();
          indexWriter.setCommitData(Collections.singletonMap(Translog.TRANSLOG_ID_KEY,Long.toString(translogId)));
          indexWriter.commit();
        }
 catch (        Throwable e) {
          throw new FlushFailedEngineException(shardId,e);
        }
      }
       if (engineConfig.isEnableGcDeletes()) {
        pruneDeletedTombstones();
      }
    }
 else {
      throw new ElasticsearchIllegalStateException("flush type [" + type + "] not supported");
    }
    try (InternalLock _=readLock.acquire()){
      ensureOpen();
      lastCommittedSegmentInfos=store.readLastCommittedSegmentsInfo();
    }
 catch (    Throwable e) {
      if (closedOrFailed == false) {
        logger.warn("failed to read latest segment infos on flush",e);
        if (Lucene.isCorruptionException(e)) {
          throw new FlushFailedEngineException(shardId,e);
        }
      }
    }
  }
 catch (  FlushFailedEngineException ex) {
    maybeFailEngine(ex,"flush");
    throw ex;
  }
 finally {
    flushLock.unlock();
    flushing.decrementAndGet();
  }
}
