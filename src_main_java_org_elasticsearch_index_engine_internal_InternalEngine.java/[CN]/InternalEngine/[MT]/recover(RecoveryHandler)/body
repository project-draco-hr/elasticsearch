{
  try (InternalLock _=writeLock.acquire()){
    if (closedOrFailed) {
      throw new EngineClosedException(shardId,failedEngine);
    }
    onGoingRecoveries.startRecovery();
  }
   SnapshotIndexCommit phase1Snapshot;
  try {
    phase1Snapshot=deletionPolicy.snapshot();
  }
 catch (  Throwable e) {
    maybeFailEngine(e,"recovery");
    Releasables.closeWhileHandlingException(onGoingRecoveries);
    throw new RecoveryEngineException(shardId,1,"Snapshot failed",e);
  }
  try {
    recoveryHandler.phase1(phase1Snapshot);
  }
 catch (  Throwable e) {
    maybeFailEngine(e,"recovery phase 1");
    Releasables.closeWhileHandlingException(onGoingRecoveries,phase1Snapshot);
    throw new RecoveryEngineException(shardId,1,"Execution failed",wrapIfClosed(e));
  }
  Translog.Snapshot phase2Snapshot;
  try {
    phase2Snapshot=translog.snapshot();
  }
 catch (  Throwable e) {
    maybeFailEngine(e,"snapshot recovery");
    Releasables.closeWhileHandlingException(onGoingRecoveries,phase1Snapshot);
    throw new RecoveryEngineException(shardId,2,"Snapshot failed",wrapIfClosed(e));
  }
  try {
    recoveryHandler.phase2(phase2Snapshot);
  }
 catch (  Throwable e) {
    maybeFailEngine(e,"recovery phase 2");
    Releasables.closeWhileHandlingException(onGoingRecoveries,phase1Snapshot,phase2Snapshot);
    throw new RecoveryEngineException(shardId,2,"Execution failed",wrapIfClosed(e));
  }
  writeLock.acquire();
  Translog.Snapshot phase3Snapshot=null;
  boolean success=false;
  try {
    phase3Snapshot=translog.snapshot(phase2Snapshot);
    recoveryHandler.phase3(phase3Snapshot);
    success=true;
  }
 catch (  Throwable e) {
    maybeFailEngine(e,"recovery phase 3");
    throw new RecoveryEngineException(shardId,3,"Execution failed",wrapIfClosed(e));
  }
 finally {
    Releasables.close(success,onGoingRecoveries,writeLock,phase1Snapshot,phase2Snapshot,phase3Snapshot);
  }
}
