{
switch (flavor) {
case METHOD_CALL:
    return Def.lookupMethod(lookup,type(),args[0].getClass(),name,args,(Long)this.args[0]);
case LOAD:
  return Def.lookupGetter(args[0].getClass(),name);
case STORE:
return Def.lookupSetter(args[0].getClass(),name);
case ARRAY_LOAD:
return Def.lookupArrayLoad(args[0].getClass());
case ARRAY_STORE:
return Def.lookupArrayStore(args[0].getClass());
case ITERATOR:
return Def.lookupIterator(args[0].getClass());
case REFERENCE:
return Def.lookupReference(lookup,(String)this.args[0],args[0].getClass(),name);
case UNARY_OPERATOR:
case SHIFT_OPERATOR:
return DefMath.lookupUnary(args[0].getClass(),name);
case BINARY_OPERATOR:
if (args[0] == null || args[1] == null) {
return getGeneric(flavor,name);
}
 else {
return DefMath.lookupBinary(args[0].getClass(),args[1].getClass(),name);
}
default :
throw new AssertionError();
}
}
