{
  final int iters=scaledRandomIntBetween(2,5);
  for (int iter=0; iter < iters; ++iter) {
    final int valueBits=randomIntBetween(1,30);
    final int hashBits=randomInt(valueBits);
    final int numOps=randomInt(10 + hashBits * 100);
    Set<O> ref=new HashSet<>();
    CopyOnWriteHashSet<O> set=new CopyOnWriteHashSet<>();
    assertEquals(ref,set);
    final int hashBase=randomInt();
    for (int i=0; i < numOps; ++i) {
      final int v=randomInt(1 << valueBits);
      final int h=(v & ((1 << hashBits) - 1)) ^ hashBase;
      O key=new O(v,h);
      Set<O> newRef=new HashSet<>(ref);
      final CopyOnWriteHashSet<O> newSet;
      if (randomBoolean()) {
        newRef.add(key);
        newSet=set.copyAndAdd(key);
      }
 else {
        final boolean modified=newRef.remove(key);
        newSet=set.copyAndRemove(key);
        if (!modified) {
          assertSame(set,newSet);
        }
      }
      assertEquals(ref,set);
      assertEquals(newRef,newSet);
      assertEquals(newSet,newRef);
      assertEquals(ref.isEmpty(),set.isEmpty());
      assertEquals(newRef.isEmpty(),newSet.isEmpty());
      ref=newRef;
      set=newSet;
    }
    assertEquals(ref,CopyOnWriteHashSet.copyOf(ref));
    assertEquals(ImmutableSet.of(),CopyOnWriteHashSet.copyOf(ref).copyAndRemoveAll(ref));
  }
}
