{
  for (  ShardRouting shardRouting : allocation.failedShards()) {
    cachedStores.remove(shardRouting.shardId());
  }
  for (  ShardRouting failedShard : allocation.failedShards()) {
    if (!allocation.routingNodes().routingTable().index(failedShard.index()).shard(failedShard.id()).allocatedPostApi()) {
      continue;
    }
    Set<String> nodesIds=Sets.newHashSet();
    nodesIds.addAll(allocation.nodes().dataNodes().keySet());
    TransportNodesListGatewayStartedShards.NodesLocalGatewayStartedShards nodesState=listGatewayStartedShards.list(nodesIds,null).actionGet();
    Tuple<DiscoveryNode,Long> t=null;
    for (    TransportNodesListGatewayStartedShards.NodeLocalGatewayStartedShards nodeState : nodesState) {
      if (nodeState.state() == null) {
        continue;
      }
      if (nodeState.node().id().equals(failedShard.currentNodeId())) {
        continue;
      }
      for (      Map.Entry<ShardId,Long> entry : nodeState.state().shards().entrySet()) {
        if (entry.getKey().equals(failedShard.shardId())) {
          if (t == null || entry.getValue() > t.v2().longValue()) {
            t=new Tuple<DiscoveryNode,Long>(nodeState.node(),entry.getValue());
          }
        }
      }
    }
    if (t != null) {
      RoutingNode currentRoutingNode=allocation.routingNodes().nodesToShards().get(failedShard.currentNodeId());
      if (currentRoutingNode == null) {
        continue;
      }
      Iterator<MutableShardRouting> shards=currentRoutingNode.iterator();
      while (shards.hasNext()) {
        MutableShardRouting shard=shards.next();
        if (shard.shardId().equals(failedShard.shardId())) {
          shard.deassignNode();
          shards.remove();
          break;
        }
      }
      RoutingNode targetNode=allocation.routingNodes().nodesToShards().get(t.v1().id());
      targetNode.add(new MutableShardRouting(failedShard.index(),failedShard.id(),targetNode.nodeId(),failedShard.relocatingNodeId(),failedShard.primary(),INITIALIZING));
    }
  }
}
