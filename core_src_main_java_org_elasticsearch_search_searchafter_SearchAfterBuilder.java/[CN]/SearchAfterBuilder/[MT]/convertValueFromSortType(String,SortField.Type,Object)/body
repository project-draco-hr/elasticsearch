{
  try {
switch (sortType) {
case DOC:
      if (value instanceof Number) {
        return ((Number)value).intValue();
      }
    return Integer.parseInt(value.toString());
case SCORE:
  if (value instanceof Number) {
    return ((Number)value).floatValue();
  }
return Float.parseFloat(value.toString());
case INT:
if (value instanceof Number) {
return ((Number)value).intValue();
}
return Integer.parseInt(value.toString());
case DOUBLE:
if (value instanceof Number) {
return ((Number)value).doubleValue();
}
return Double.parseDouble(value.toString());
case LONG:
if (value instanceof Number) {
return ((Number)value).longValue();
}
return Long.parseLong(value.toString());
case FLOAT:
if (value instanceof Number) {
return ((Number)value).floatValue();
}
return Float.parseFloat(value.toString());
case STRING_VAL:
case STRING:
return new BytesRef(value.toString());
default :
throw new IllegalArgumentException("Comparator type [" + sortType.name() + "] for field ["+ fieldName+ "] is not supported.");
}
}
 catch (NumberFormatException e) {
throw new IllegalArgumentException("Failed to parse " + SEARCH_AFTER.getPreferredName() + " value for field ["+ fieldName+ "].",e);
}
}
