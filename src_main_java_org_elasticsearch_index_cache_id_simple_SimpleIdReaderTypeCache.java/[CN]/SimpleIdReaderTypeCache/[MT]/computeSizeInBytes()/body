{
  long sizeInBytes=0;
  sizeInBytes+=RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + (idToDoc.values.length * RamUsageEstimator.NUM_BYTES_INT);
  sizeInBytes+=RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + (idToDoc.allocated.length);
  final boolean[] states=idToDoc.allocated;
  final Object[] keys=idToDoc.keys;
  for (int i=0; i < states.length; i++) {
    if (states[i]) {
      HashedBytesArray bytesArray=(HashedBytesArray)keys[i];
      if (bytesArray != null) {
        sizeInBytes+=RamUsageEstimator.NUM_BYTES_OBJECT_HEADER + (bytesArray.length() + RamUsageEstimator.NUM_BYTES_INT);
      }
 else {
        sizeInBytes+=RamUsageEstimator.NUM_BYTES_OBJECT_REF;
      }
    }
  }
  sizeInBytes+=RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + (RamUsageEstimator.NUM_BYTES_OBJECT_REF * docIdToId.length);
  for (  HashedBytesArray bytesArray : parentIdsValues) {
    if (bytesArray == null) {
      sizeInBytes+=RamUsageEstimator.NUM_BYTES_OBJECT_REF;
    }
 else {
      sizeInBytes+=RamUsageEstimator.NUM_BYTES_OBJECT_HEADER + (bytesArray.length() + RamUsageEstimator.NUM_BYTES_INT);
    }
  }
  sizeInBytes+=RamUsageEstimator.sizeOf(parentIdsOrdinals);
  return sizeInBytes;
}
