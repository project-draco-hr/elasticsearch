{
  CommonSettings.MemoryStorageFormat format;
  long packedDelta=maxValue - minValue + 1;
  int bitsRequired=packedDelta < 0 ? 64 : PackedInts.bitsRequired(packedDelta);
  PackedInts.FormatAndBits formatAndBits=PackedInts.fastestFormatAndBits(reader.maxDoc(),bitsRequired,acceptableOverheadRatio);
  final long singleValuesSize=formatAndBits.format.longCount(PackedInts.VERSION_CURRENT,reader.maxDoc(),formatAndBits.bitsPerValue) * 8L;
  final long ordinalsSize=build.getMemorySizeInBytes() + values.ramBytesUsed();
  long pagedSingleValuesSize=(reader.maxDoc() / pageSize + 1) * RamUsageEstimator.NUM_BYTES_OBJECT_REF;
  int pageIndex=0;
  long pageMinOrdinal=Long.MAX_VALUE;
  long pageMaxOrdinal=Long.MIN_VALUE;
  for (int i=1; i < reader.maxDoc(); ++i, pageIndex=(pageIndex + 1) % pageSize) {
    long ordinal=ordinals.getOrd(i);
    if (ordinal != Ordinals.MISSING_ORDINAL) {
      pageMaxOrdinal=Math.max(ordinal,pageMaxOrdinal);
      pageMinOrdinal=Math.min(ordinal,pageMinOrdinal);
    }
    if (pageIndex == pageSize - 1) {
      pagedSingleValuesSize+=getPageMemoryUsage(values,acceptableOverheadRatio,pageSize,pageMinOrdinal,pageMaxOrdinal);
      pageMinOrdinal=Long.MAX_VALUE;
      pageMaxOrdinal=Long.MIN_VALUE;
    }
  }
  if (pageIndex > 0) {
    pageIndex++;
    pagedSingleValuesSize+=getPageMemoryUsage(values,acceptableOverheadRatio,pageSize,pageMinOrdinal,pageMaxOrdinal);
  }
  if (ordinalsSize < singleValuesSize) {
    if (ordinalsSize < pagedSingleValuesSize) {
      format=CommonSettings.MemoryStorageFormat.ORDINALS;
    }
 else {
      format=CommonSettings.MemoryStorageFormat.PAGED;
    }
  }
 else {
    if (pagedSingleValuesSize < singleValuesSize) {
      format=CommonSettings.MemoryStorageFormat.PAGED;
    }
 else {
      format=CommonSettings.MemoryStorageFormat.PACKED;
    }
  }
  return format;
}
