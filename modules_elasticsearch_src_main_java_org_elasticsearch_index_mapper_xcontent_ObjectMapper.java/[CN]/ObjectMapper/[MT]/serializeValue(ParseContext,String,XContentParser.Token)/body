{
  XContentMapper mapper=mappers.get(currentFieldName);
  if (mapper != null) {
    mapper.parse(context);
    return;
  }
  Dynamic dynamic=this.dynamic;
  if (dynamic == null) {
    dynamic=context.root().dynamic();
  }
  if (dynamic == Dynamic.STRICT) {
    throw new StrictDynamicMappingException(currentFieldName);
  }
  if (dynamic == Dynamic.FALSE) {
    return;
  }
synchronized (mutex) {
    mapper=mappers.get(currentFieldName);
    if (mapper != null) {
      mapper.parse(context);
      return;
    }
    BuilderContext builderContext=new BuilderContext(context.path());
    if (token == XContentParser.Token.VALUE_STRING) {
      String text=context.parser().text();
      boolean resolved=false;
      if (text.contains(":") || text.contains("-") || text.contains("/")) {
        for (        FormatDateTimeFormatter dateTimeFormatter : context.root().dateTimeFormatters()) {
          try {
            dateTimeFormatter.parser().parseMillis(text);
            XContentMapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"date");
            if (builder == null) {
              builder=dateField(currentFieldName).dateTimeFormatter(dateTimeFormatter);
            }
            mapper=builder.build(builderContext);
            resolved=true;
            break;
          }
 catch (          Exception e) {
          }
        }
      }
      if (!resolved && text.indexOf('.') != -1) {
        try {
          IpFieldMapper.ipToLong(text);
          XContentMapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"ip");
          if (builder == null) {
            builder=ipField(currentFieldName);
          }
          mapper=builder.build(builderContext);
          resolved=true;
        }
 catch (        Exception e) {
        }
      }
      if (!resolved) {
        XContentMapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"string");
        if (builder == null) {
          builder=stringField(currentFieldName);
        }
        mapper=builder.build(builderContext);
      }
    }
 else     if (token == XContentParser.Token.VALUE_NUMBER) {
      XContentParser.NumberType numberType=context.parser().numberType();
      if (numberType == XContentParser.NumberType.INT) {
        if (context.parser().estimatedNumberType()) {
          XContentMapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"long");
          if (builder == null) {
            builder=longField(currentFieldName);
          }
          mapper=builder.build(builderContext);
        }
 else {
          XContentMapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"integer");
          if (builder == null) {
            builder=integerField(currentFieldName);
          }
          mapper=builder.build(builderContext);
        }
      }
 else       if (numberType == XContentParser.NumberType.LONG) {
        XContentMapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"long");
        if (builder == null) {
          builder=longField(currentFieldName);
        }
        mapper=builder.build(builderContext);
      }
 else       if (numberType == XContentParser.NumberType.FLOAT) {
        if (context.parser().estimatedNumberType()) {
          XContentMapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"double");
          if (builder == null) {
            builder=doubleField(currentFieldName);
          }
          mapper=builder.build(builderContext);
        }
 else {
          XContentMapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"float");
          if (builder == null) {
            builder=floatField(currentFieldName);
          }
          mapper=builder.build(builderContext);
        }
      }
 else       if (numberType == XContentParser.NumberType.DOUBLE) {
        XContentMapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"double");
        if (builder == null) {
          builder=doubleField(currentFieldName);
        }
        mapper=builder.build(builderContext);
      }
    }
 else     if (token == XContentParser.Token.VALUE_BOOLEAN) {
      XContentMapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,"boolean");
      if (builder == null) {
        builder=booleanField(currentFieldName);
      }
      mapper=builder.build(builderContext);
    }
 else {
      XContentMapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,null);
      if (builder != null) {
        mapper=builder.build(builderContext);
      }
 else {
        throw new ElasticSearchIllegalStateException("Can't handle serializing a dynamic type with content token [" + token + "] and field name ["+ currentFieldName+ "]");
      }
    }
    putMapper(mapper);
    mapper.traverse(new FieldMapperListener(){
      @Override public void fieldMapper(      FieldMapper fieldMapper){
        context.docMapper().addFieldMapper(fieldMapper);
      }
    }
);
    mapper.parse(context);
    context.addedMapper();
  }
}
