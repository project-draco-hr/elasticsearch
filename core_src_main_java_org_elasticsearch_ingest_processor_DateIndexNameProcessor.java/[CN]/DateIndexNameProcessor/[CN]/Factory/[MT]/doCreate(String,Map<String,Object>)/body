{
  String localeString=ConfigurationUtils.readOptionalStringProperty(TYPE,tag,config,"locale");
  String timezoneString=ConfigurationUtils.readOptionalStringProperty(TYPE,tag,config,"timezone");
  DateTimeZone timezone=timezoneString == null ? DateTimeZone.UTC : DateTimeZone.forID(timezoneString);
  Locale locale=Locale.ENGLISH;
  if (localeString != null) {
    try {
      locale=(new Locale.Builder()).setLanguageTag(localeString).build();
    }
 catch (    IllformedLocaleException e) {
      throw new IllegalArgumentException("Invalid language tag specified: " + localeString);
    }
  }
  List<String> dateFormatStrings=ConfigurationUtils.readOptionalList(TYPE,tag,config,"date_formats");
  if (dateFormatStrings == null) {
    dateFormatStrings=Collections.singletonList("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
  }
  List<Function<String,DateTime>> dateFormats=new ArrayList<>(dateFormatStrings.size());
  for (  String format : dateFormatStrings) {
    DateFormat dateFormat=DateFormat.fromString(format);
    dateFormats.add(dateFormat.getFunction(format,timezone,locale));
  }
  String field=ConfigurationUtils.readStringProperty(TYPE,tag,config,"field");
  String indexNamePrefix=ConfigurationUtils.readStringProperty(TYPE,tag,config,"index_name_prefix","");
  String dateRounding=ConfigurationUtils.readStringProperty(TYPE,tag,config,"date_rounding");
  String indexNameFormat=ConfigurationUtils.readStringProperty(TYPE,tag,config,"index_name_format","yyyy-MM-dd");
  return new DateIndexNameProcessor(tag,field,dateFormats,timezone,indexNamePrefix,dateRounding,indexNameFormat);
}
