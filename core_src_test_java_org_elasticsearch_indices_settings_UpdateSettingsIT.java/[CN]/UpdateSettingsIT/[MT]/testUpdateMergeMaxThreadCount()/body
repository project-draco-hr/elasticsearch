{
  MockAppender mockAppender=new MockAppender("testUpdateMergeMaxThreadCount");
  Logger rootLogger=LogManager.getRootLogger();
  Level savedLevel=rootLogger.getLevel();
  Loggers.addAppender(rootLogger,mockAppender);
  Loggers.setLevel(rootLogger,Level.TRACE);
  try {
    assertAcked(prepareCreate("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,"1").put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,"0").put(MergePolicyConfig.INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE_SETTING.getKey(),"2").put(MergePolicyConfig.INDEX_MERGE_POLICY_SEGMENTS_PER_TIER_SETTING.getKey(),"2").put(MergeSchedulerConfig.MAX_THREAD_COUNT_SETTING.getKey(),"10000").put(MergeSchedulerConfig.MAX_MERGE_COUNT_SETTING.getKey(),"10000")));
    assertFalse(mockAppender.sawUpdateMaxThreadCount);
    client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put(MergeSchedulerConfig.MAX_THREAD_COUNT_SETTING.getKey(),"1")).get();
    assertTrue(mockAppender.sawUpdateMaxThreadCount);
    GetSettingsResponse getSettingsResponse=client().admin().indices().prepareGetSettings("test").get();
    assertThat(getSettingsResponse.getSetting("test",MergeSchedulerConfig.MAX_THREAD_COUNT_SETTING.getKey()),equalTo("1"));
  }
  finally {
    Loggers.removeAppender(rootLogger,mockAppender);
    Loggers.setLevel(rootLogger,savedLevel);
  }
}
