{
  DeleteRequest deleteRequest=new DeleteRequest(request.param("index"),request.param("type"),request.param("id"));
  deleteRequest.timeout(request.paramAsTime("timeout",DeleteRequest.DEFAULT_TIMEOUT));
  deleteRequest.listenerThreaded(false);
  deleteRequest.operationThreaded(true);
  String replicationType=request.param("replication");
  if (replicationType != null) {
    deleteRequest.replicationType(ReplicationType.fromString(replicationType));
  }
  client.delete(deleteRequest,new ActionListener<DeleteResponse>(){
    @Override public void onResponse(    DeleteResponse result){
      try {
        XContentBuilder builder=RestXContentBuilder.restContentBuilder(request);
        builder.startObject().field("ok",true).field("_index",result.index()).field("_type",result.type()).field("_id",result.id()).endObject();
        channel.sendResponse(new XContentRestResponse(request,OK,builder));
      }
 catch (      Exception e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
