{
  SearchResponse response=client().prepareSearch("idx").addAggregation(terms("terms").field("tag").order(Order.term(true)).subAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).extendedBounds(new ExtendedBounds((long)minRandomValue,(long)maxRandomValue))).subAggregation(sumBucket("sum_histo_bucket","histo>_count"))).addAggregation(sumBucket("sum_terms_bucket","terms>sum_histo_bucket")).execute().actionGet();
  assertSearchResponse(response);
  Terms terms=response.getAggregations().get("terms");
  assertThat(terms,notNullValue());
  assertThat(terms.getName(),equalTo("terms"));
  List<Terms.Bucket> termsBuckets=terms.getBuckets();
  assertThat(termsBuckets.size(),equalTo(interval));
  double aggTermsSum=0;
  for (int i=0; i < interval; ++i) {
    Terms.Bucket termsBucket=termsBuckets.get(i);
    assertThat(termsBucket,notNullValue());
    assertThat((String)termsBucket.getKey(),equalTo("tag" + (i % interval)));
    Histogram histo=termsBucket.getAggregations().get("histo");
    assertThat(histo,notNullValue());
    assertThat(histo.getName(),equalTo("histo"));
    List<? extends Bucket> buckets=histo.getBuckets();
    double aggHistoSum=0;
    for (int j=0; j < numValueBuckets; ++j) {
      Histogram.Bucket bucket=buckets.get(j);
      assertThat(bucket,notNullValue());
      assertThat(((Number)bucket.getKey()).longValue(),equalTo((long)j * interval));
      aggHistoSum+=bucket.getDocCount();
    }
    InternalSimpleValue sumBucketValue=termsBucket.getAggregations().get("sum_histo_bucket");
    assertThat(sumBucketValue,notNullValue());
    assertThat(sumBucketValue.getName(),equalTo("sum_histo_bucket"));
    assertThat(sumBucketValue.value(),equalTo(aggHistoSum));
    aggTermsSum+=aggHistoSum;
  }
  InternalSimpleValue sumBucketValue=response.getAggregations().get("sum_terms_bucket");
  assertThat(sumBucketValue,notNullValue());
  assertThat(sumBucketValue.getName(),equalTo("sum_terms_bucket"));
  assertThat(sumBucketValue.value(),equalTo(aggTermsSum));
}
