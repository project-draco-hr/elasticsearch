{
  BytesReference source=request.source();
  if (source == null || source.length() == 0) {
    return null;
  }
  ParsedDocument doc=null;
  XContentParser parser=null;
  SearchContext.setCurrent(new SearchContext(0,new ShardSearchRequest().types(new String[0]),null,context.indexShard.searcher(),context.percolateIndexService,context.indexShard,null,null));
  try {
    parser=XContentFactory.xContent(source).createParser(source);
    String currentFieldName=null;
    XContentParser.Token token;
    while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
      if (token == XContentParser.Token.FIELD_NAME) {
        currentFieldName=parser.currentName();
        if ("doc".equals(currentFieldName)) {
          if (doc != null) {
            throw new ElasticSearchParseException("Either specify doc or get, not both");
          }
          MapperService mapperService=documentIndexService.mapperService();
          DocumentMapper docMapper=mapperService.documentMapperWithAutoCreate(request.documentType());
          doc=docMapper.parse(source(parser).type(request.documentType()).flyweight(true));
        }
      }
 else       if (token == XContentParser.Token.START_OBJECT) {
        if ("query".equals(currentFieldName)) {
          if (context.query != null) {
            throw new ElasticSearchParseException("Either specify query or filter, not both");
          }
          context.query=documentIndexService.queryParserService().parse(parser).query();
        }
 else         if ("filter".equals(currentFieldName)) {
          if (context.query != null) {
            throw new ElasticSearchParseException("Either specify query or filter, not both");
          }
          Filter filter=documentIndexService.queryParserService().parseInnerFilter(parser).filter();
          context.query=new XConstantScoreQuery(filter);
        }
      }
 else       if (token == null) {
        break;
      }
 else       if (token.isValue()) {
        if ("size".equals(currentFieldName)) {
          context.limit=true;
          context.size=parser.intValue();
          if (context.size < 0) {
            throw new ElasticSearchParseException("size is set to [" + context.size + "] and is expected to be higher or equal to 0");
          }
        }
 else         if ("sort".equals(currentFieldName)) {
          context.sort=parser.booleanValue();
        }
 else         if ("score".equals(currentFieldName)) {
          context.score=parser.booleanValue();
        }
      }
    }
  }
 catch (  IOException e) {
    throw new ElasticSearchParseException("failed to parse request",e);
  }
 finally {
    SearchContext.current().release();
    SearchContext.removeCurrent();
    if (parser != null) {
      parser.close();
    }
  }
  return doc;
}
