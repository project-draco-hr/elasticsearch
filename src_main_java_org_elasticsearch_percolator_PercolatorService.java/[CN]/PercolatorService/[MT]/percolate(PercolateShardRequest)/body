{
  IndexService percolateIndexService=indicesService.indexServiceSafe(request.index());
  IndexShard indexShard=percolateIndexService.shardSafe(request.shardId());
  ShardPercolateService shardPercolateService=indexShard.shardPercolateService();
  shardPercolateService.prePercolate();
  long startTime=System.nanoTime();
  SearchShardTarget searchShardTarget=new SearchShardTarget(clusterService.localNode().id(),request.index(),request.shardId());
  final PercolateContext context=new PercolateContext(request,searchShardTarget,indexShard,percolateIndexService,cacheRecycler,pageCacheRecycler);
  try {
    ParsedDocument parsedDocument=parseRequest(percolateIndexService,request,context);
    if (context.percolateQueries().isEmpty()) {
      return new PercolateShardResponse(context,request.index(),request.shardId());
    }
    if (request.docSource() != null && request.docSource().length() != 0) {
      parsedDocument=parseFetchedDoc(request.docSource(),percolateIndexService,request.documentType());
    }
 else     if (parsedDocument == null) {
      throw new ElasticsearchIllegalArgumentException("Nothing to percolate");
    }
    if (context.percolateQuery() == null && (context.trackScores() || context.doSort || context.facets() != null || context.aggregations() != null)) {
      context.percolateQuery(new MatchAllDocsQuery());
    }
    if (context.doSort && !context.limit) {
      throw new ElasticsearchIllegalArgumentException("Can't sort if size isn't specified");
    }
    if (context.highlight() != null && !context.limit) {
      throw new ElasticsearchIllegalArgumentException("Can't highlight if size isn't specified");
    }
    if (context.size < 0) {
      context.size=0;
    }
    final MemoryIndex memoryIndex=cache.get();
    for (    IndexableField field : parsedDocument.rootDoc().getFields()) {
      if (!field.fieldType().indexed() && field.name().equals(UidFieldMapper.NAME)) {
        continue;
      }
      try {
        TokenStream tokenStream=field.tokenStream(parsedDocument.analyzer());
        if (tokenStream != null) {
          memoryIndex.addField(field.name(),tokenStream,field.boost());
        }
      }
 catch (      IOException e) {
        throw new ElasticsearchException("Failed to create token stream",e);
      }
    }
    PercolatorType action;
    if (request.onlyCount()) {
      action=context.percolateQuery() != null ? queryCountPercolator : countPercolator;
    }
 else {
      if (context.doSort) {
        action=topMatchingPercolator;
      }
 else       if (context.percolateQuery() != null) {
        action=context.trackScores() ? scoringPercolator : queryPercolator;
      }
 else {
        action=matchPercolator;
      }
    }
    context.percolatorTypeId=action.id();
    context.initialize(memoryIndex,parsedDocument);
    indexShard.readAllowed();
    return action.doPercolate(request,context);
  }
  finally {
    context.release();
    shardPercolateService.postPercolate(System.nanoTime() - startTime);
  }
}
