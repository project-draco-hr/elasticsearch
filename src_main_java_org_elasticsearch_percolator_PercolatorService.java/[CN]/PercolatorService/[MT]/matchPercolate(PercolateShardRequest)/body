{
  return innerPercolate(request,new PercolateAction(){
    @Override public PercolateShardResponse doPercolateAction(    PercolateContext context){
      List<Text> matches=new ArrayList<Text>();
      if (context.query == null) {
        Lucene.ExistsCollector collector=new Lucene.ExistsCollector();
        for (        Map.Entry<Text,Query> entry : context.percolateQueries.entrySet()) {
          collector.reset();
          try {
            context.searcher.search(entry.getValue(),collector);
          }
 catch (          IOException e) {
            logger.warn("[" + entry.getKey() + "] failed to execute query",e);
          }
          if (collector.exists()) {
            matches.add(entry.getKey());
          }
        }
      }
 else {
        Engine.Searcher percolatorSearcher=context.indexShard.searcher();
        try {
          percolatorSearcher.searcher().search(context.query,match(logger,context.percolateQueries,context.searcher,context.fieldDataService,matches));
        }
 catch (        IOException e) {
          logger.warn("failed to execute",e);
        }
 finally {
          percolatorSearcher.release();
        }
      }
      return new PercolateShardResponse(matches.toArray(new Text[matches.size()]),request.index(),request.shardId());
    }
  }
);
}
