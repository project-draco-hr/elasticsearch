{
  super(settings);
  this.indicesService=indicesService;
  this.cacheRecycler=cacheRecycler;
  this.clusterService=clusterService;
  this.highlightPhase=highlightPhase;
  this.facetPhase=facetPhase;
  this.aggregationPhase=aggregationPhase;
  final long maxReuseBytes=settings.getAsBytesSize("indices.memory.memory_index.size_per_thread",new ByteSizeValue(1,ByteSizeUnit.MB)).bytes();
  cache=new CloseableThreadLocal<MemoryIndex>(){
    @Override protected MemoryIndex initialValue(){
      return new ExtendedMemoryIndex(true,maxReuseBytes);
    }
  }
;
  percolatorTypes=new ByteObjectOpenHashMap<PercolatorType>(6);
  percolatorTypes.put(countPercolator.id(),countPercolator);
  percolatorTypes.put(queryCountPercolator.id(),queryCountPercolator);
  percolatorTypes.put(matchPercolator.id(),matchPercolator);
  percolatorTypes.put(queryPercolator.id(),queryPercolator);
  percolatorTypes.put(scoringPercolator.id(),scoringPercolator);
  percolatorTypes.put(topMatchingPercolator.id(),topMatchingPercolator);
}
