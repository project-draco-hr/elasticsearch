{
  DiscoveryNode fromDiscoNode=allocation.nodes().resolveNode(fromNode);
  DiscoveryNode toDiscoNode=allocation.nodes().resolveNode(toNode);
  Decision decision=null;
  boolean found=false;
  for (  ShardRouting shardRouting : allocation.routingNodes().node(fromDiscoNode.getId())) {
    if (!shardRouting.shardId().getIndexName().equals(index)) {
      continue;
    }
    if (shardRouting.shardId().id() != shardId) {
      continue;
    }
    found=true;
    if (!shardRouting.started()) {
      if (explain) {
        return new RerouteExplanation(this,allocation.decision(Decision.NO,"move_allocation_command","shard " + shardId + " has not been started"));
      }
      throw new IllegalArgumentException("[move_allocation] can't move " + shardId + ", shard is not started (state = "+ shardRouting.state()+ "]");
    }
    RoutingNode toRoutingNode=allocation.routingNodes().node(toDiscoNode.getId());
    decision=allocation.deciders().canAllocate(shardRouting,toRoutingNode,allocation);
    if (decision.type() == Decision.Type.NO) {
      if (explain) {
        return new RerouteExplanation(this,decision);
      }
      throw new IllegalArgumentException("[move_allocation] can't move " + shardId + ", from "+ fromDiscoNode+ ", to "+ toDiscoNode+ ", since its not allowed, reason: "+ decision);
    }
    if (decision.type() == Decision.Type.THROTTLE) {
    }
    allocation.routingNodes().relocateShard(shardRouting,toRoutingNode.nodeId(),allocation.clusterInfo().getShardSize(shardRouting,ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE),allocation.changes());
  }
  if (!found) {
    if (explain) {
      return new RerouteExplanation(this,allocation.decision(Decision.NO,"move_allocation_command","shard " + shardId + " not found"));
    }
    throw new IllegalArgumentException("[move_allocation] can't move " + shardId + ", failed to find it on node "+ fromDiscoNode);
  }
  return new RerouteExplanation(this,decision);
}
