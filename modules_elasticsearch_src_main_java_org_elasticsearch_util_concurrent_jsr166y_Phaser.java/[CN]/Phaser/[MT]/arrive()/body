{
  int phase;
  for (; ; ) {
    long s=state;
    phase=phaseOf(s);
    if (phase < 0)     break;
    int parties=partiesOf(s);
    int unarrived=unarrivedOf(s) - 1;
    if (unarrived > 0) {
      if (casState(s,s - 1))       break;
    }
 else     if (unarrived == 0) {
      Phaser par=parent;
      if (par == null) {
        if (casState(s,trippedStateFor(onAdvance(phase,parties) ? -1 : ((phase + 1) & phaseMask),parties))) {
          releaseWaiters(phase);
          break;
        }
      }
 else {
        if (casState(s,s - 1)) {
          par.arrive();
          reconcileState();
          break;
        }
      }
    }
 else     if (phase != phaseOf(root.state))     reconcileState();
 else     throw new IllegalStateException(badBounds(parties,unarrived));
  }
  return phase;
}
