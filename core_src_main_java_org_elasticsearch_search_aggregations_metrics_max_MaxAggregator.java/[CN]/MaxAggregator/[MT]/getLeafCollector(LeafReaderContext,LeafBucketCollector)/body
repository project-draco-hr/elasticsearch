{
  if (valuesSource == null) {
    return LeafBucketCollector.NO_OP_COLLECTOR;
  }
  final BigArrays bigArrays=context.bigArrays();
  final SortedNumericDoubleValues allValues=valuesSource.doubleValues(ctx);
  final NumericDoubleValues values=MultiValueMode.MAX.select(allValues,Double.NEGATIVE_INFINITY);
  return new LeafBucketCollectorBase(sub,allValues){
    @Override public void collect(    int doc,    long bucket) throws IOException {
      if (bucket >= maxes.size()) {
        long from=maxes.size();
        maxes=bigArrays.grow(maxes,bucket + 1);
        maxes.fill(from,maxes.size(),Double.NEGATIVE_INFINITY);
      }
      final double value=values.get(doc);
      double max=maxes.get(bucket);
      max=Math.max(max,value);
      maxes.set(bucket,max);
    }
  }
;
}
