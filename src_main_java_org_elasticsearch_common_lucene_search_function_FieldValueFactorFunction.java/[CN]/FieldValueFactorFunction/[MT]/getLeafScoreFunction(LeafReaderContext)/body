{
  final SortedNumericDoubleValues values=this.indexFieldData.load(ctx).getDoubleValues();
  return new LeafScoreFunction(){
    @Override public double score(    int docId,    float subQueryScore){
      values.setDocument(docId);
      final int numValues=values.count();
      if (numValues > 0) {
        double val=values.valueAt(0) * boostFactor;
        double result=modifier.apply(val);
        if (Double.isNaN(result) || Double.isInfinite(result)) {
          throw new ElasticsearchException("Result of field modification [" + modifier.toString() + "("+ val+ ")] must be a number");
        }
        return result;
      }
 else {
        throw new ElasticsearchException("Missing value for field [" + field + "]");
      }
    }
    @Override public Explanation explainScore(    int docId,    Explanation subQueryScore){
      String modifierStr=modifier != null ? modifier.toString() : "";
      double score=score(docId,subQueryScore.getValue());
      return Explanation.match(CombineFunction.toFloat(score),"field value function: " + modifierStr + "("+ "doc['"+ field+ "'].value * factor="+ boostFactor+ ")");
    }
  }
;
}
