{
  String script=null;
  String scriptLang=null;
  String type=null;
  Map<String,Object> params=null;
  boolean reverse=false;
  SortMode sortMode=null;
  String nestedPath=null;
  Filter nestedFilter=null;
  XContentParser.Token token;
  String currentName=parser.currentName();
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("params".equals(currentName)) {
        params=parser.map();
      }
 else       if ("nested_filter".equals(currentName) || "nestedFilter".equals(currentName)) {
        ParsedFilter parsedFilter=context.queryParserService().parseInnerFilter(parser);
        nestedFilter=parsedFilter == null ? null : parsedFilter.filter();
      }
    }
 else     if (token.isValue()) {
      if ("reverse".equals(currentName)) {
        reverse=parser.booleanValue();
      }
 else       if ("order".equals(currentName)) {
        reverse="desc".equals(parser.text());
      }
 else       if ("script".equals(currentName)) {
        script=parser.text();
      }
 else       if ("type".equals(currentName)) {
        type=parser.text();
      }
 else       if ("lang".equals(currentName)) {
        scriptLang=parser.text();
      }
 else       if ("mode".equals(currentName)) {
        sortMode=SortMode.fromString(parser.text());
      }
 else       if ("nested_path".equals(currentName) || "nestedPath".equals(currentName)) {
        nestedPath=parser.text();
      }
    }
  }
  if (script == null) {
    throw new SearchParseException(context,"_script sorting requires setting the script to sort by");
  }
  if (type == null) {
    throw new SearchParseException(context,"_script sorting requires setting the type of the script");
  }
  SearchScript searchScript=context.scriptService().search(context.lookup(),scriptLang,script,params);
  IndexFieldData.XFieldComparatorSource fieldComparatorSource;
  if ("string".equals(type)) {
    fieldComparatorSource=StringScriptDataComparator.comparatorSource(searchScript);
  }
 else   if ("number".equals(type)) {
    fieldComparatorSource=DoubleScriptDataComparator.comparatorSource(searchScript);
  }
 else {
    throw new SearchParseException(context,"custom script sort type [" + type + "] not supported");
  }
  if ("string".equals(type) && (sortMode == SortMode.SUM || sortMode == SortMode.AVG)) {
    throw new SearchParseException(context,"type [string] doesn't support mode [" + sortMode + "]");
  }
  if (sortMode == null) {
    sortMode=reverse ? SortMode.MAX : SortMode.MIN;
  }
  ObjectMapper objectMapper;
  if (nestedPath != null) {
    ObjectMappers objectMappers=context.mapperService().objectMapper(nestedPath);
    if (objectMappers == null) {
      throw new ElasticSearchIllegalArgumentException("failed to find nested object mapping for explicit nested path [" + nestedPath + "]");
    }
    objectMapper=objectMappers.mapper();
    if (!objectMapper.nested().isNested()) {
      throw new ElasticSearchIllegalArgumentException("mapping for explicit nested path is not mapped as nested: [" + nestedPath + "]");
    }
    Filter rootDocumentsFilter=context.filterCache().cache(NonNestedDocsFilter.INSTANCE);
    Filter innerDocumentsFilter;
    if (nestedFilter != null) {
      innerDocumentsFilter=context.filterCache().cache(nestedFilter);
    }
 else {
      innerDocumentsFilter=context.filterCache().cache(objectMapper.nestedTypeFilter());
    }
    fieldComparatorSource=new NestedFieldComparatorSource(sortMode,fieldComparatorSource,rootDocumentsFilter,innerDocumentsFilter);
  }
  return new SortField("_script",fieldComparatorSource,reverse);
}
