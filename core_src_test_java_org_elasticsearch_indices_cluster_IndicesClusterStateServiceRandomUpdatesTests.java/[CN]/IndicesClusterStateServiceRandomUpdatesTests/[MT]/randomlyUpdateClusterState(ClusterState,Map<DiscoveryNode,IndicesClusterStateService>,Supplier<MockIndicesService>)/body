{
  for (int i=0; i < randomInt(5); i++) {
    if (state.metaData().indices().size() > 200) {
      break;
    }
    String name="index_" + randomAsciiOfLength(15).toLowerCase(Locale.ROOT);
    CreateIndexRequest request=new CreateIndexRequest(name,Settings.builder().put(SETTING_NUMBER_OF_SHARDS,randomIntBetween(1,3)).put(SETTING_NUMBER_OF_REPLICAS,randomInt(2)).build()).waitForActiveShards(ActiveShardCount.NONE);
    state=cluster.createIndex(state,request);
    assertTrue(state.metaData().hasIndex(name));
  }
  Set<String> indicesToDelete=new HashSet<>();
  int numberOfIndicesToDelete=randomInt(Math.min(2,state.metaData().indices().size()));
  for (  String index : randomSubsetOf(numberOfIndicesToDelete,state.metaData().indices().keys().toArray(String.class))) {
    indicesToDelete.add(state.metaData().index(index).getIndex().getName());
  }
  if (indicesToDelete.isEmpty() == false) {
    DeleteIndexRequest deleteRequest=new DeleteIndexRequest(indicesToDelete.toArray(new String[indicesToDelete.size()]));
    state=cluster.deleteIndices(state,deleteRequest);
    for (    String index : indicesToDelete) {
      assertFalse(state.metaData().hasIndex(index));
    }
  }
  int numberOfIndicesToClose=randomInt(Math.min(1,state.metaData().indices().size()));
  for (  String index : randomSubsetOf(numberOfIndicesToClose,state.metaData().indices().keys().toArray(String.class))) {
    CloseIndexRequest closeIndexRequest=new CloseIndexRequest(state.metaData().index(index).getIndex().getName());
    state=cluster.closeIndices(state,closeIndexRequest);
  }
  int numberOfIndicesToOpen=randomInt(Math.min(1,state.metaData().indices().size()));
  for (  String index : randomSubsetOf(numberOfIndicesToOpen,state.metaData().indices().keys().toArray(String.class))) {
    OpenIndexRequest openIndexRequest=new OpenIndexRequest(state.metaData().index(index).getIndex().getName());
    state=cluster.openIndices(state,openIndexRequest);
  }
  Set<String> indicesToUpdate=new HashSet<>();
  boolean containsClosedIndex=false;
  int numberOfIndicesToUpdate=randomInt(Math.min(2,state.metaData().indices().size()));
  for (  String index : randomSubsetOf(numberOfIndicesToUpdate,state.metaData().indices().keys().toArray(String.class))) {
    indicesToUpdate.add(state.metaData().index(index).getIndex().getName());
    if (state.metaData().index(index).getState() == IndexMetaData.State.CLOSE) {
      containsClosedIndex=true;
    }
  }
  if (indicesToUpdate.isEmpty() == false) {
    UpdateSettingsRequest updateSettingsRequest=new UpdateSettingsRequest(indicesToUpdate.toArray(new String[indicesToUpdate.size()]));
    Settings.Builder settings=Settings.builder();
    if (containsClosedIndex == false) {
      settings.put(SETTING_NUMBER_OF_REPLICAS,randomInt(2));
    }
    settings.put("index.refresh_interval",randomIntBetween(1,5) + "s");
    updateSettingsRequest.settings(settings.build());
    state=cluster.updateSettings(state,updateSettingsRequest);
  }
  if (rarely()) {
    state=cluster.reroute(state,new ClusterRerouteRequest());
  }
  List<ShardRouting> startedShards=new ArrayList<>();
  List<FailedShard> failedShards=new ArrayList<>();
  for (  DiscoveryNode node : state.nodes()) {
    IndicesClusterStateService indicesClusterStateService=clusterStateServiceMap.get(node);
    MockIndicesService indicesService=(MockIndicesService)indicesClusterStateService.indicesService;
    for (    MockIndexService indexService : indicesService) {
      for (      MockIndexShard indexShard : indexService) {
        ShardRouting persistedShardRouting=indexShard.routingEntry();
        if (persistedShardRouting.initializing() && randomBoolean()) {
          startedShards.add(persistedShardRouting);
        }
 else         if (rarely()) {
          failedShards.add(new FailedShard(persistedShardRouting,"fake shard failure",new Exception()));
        }
      }
    }
  }
  state=cluster.applyFailedShards(state,failedShards);
  state=cluster.applyStartedShards(state,startedShards);
  if (rarely()) {
    if (randomBoolean()) {
      if (state.nodes().getSize() < 10) {
        DiscoveryNodes newNodes=DiscoveryNodes.builder(state.nodes()).add(createNode()).build();
        state=ClusterState.builder(state).nodes(newNodes).build();
        state=cluster.reroute(state,new ClusterRerouteRequest());
        updateNodes(state,clusterStateServiceMap,indicesServiceSupplier);
      }
    }
 else {
      if (state.nodes().getDataNodes().size() > 3) {
        DiscoveryNode discoveryNode=randomFrom(state.nodes().getNodes().values().toArray(DiscoveryNode.class));
        if (discoveryNode.equals(state.nodes().getMasterNode()) == false) {
          DiscoveryNodes newNodes=DiscoveryNodes.builder(state.nodes()).remove(discoveryNode.getId()).build();
          state=ClusterState.builder(state).nodes(newNodes).build();
          state=cluster.deassociateDeadNodes(state,true,"removed and added a node");
          updateNodes(state,clusterStateServiceMap,indicesServiceSupplier);
        }
      }
    }
  }
  return state;
}
