{
  Directory dir=newDirectory();
  IndexWriterConfig iwc=newIndexWriterConfig();
  IndexWriter writer=new IndexWriter(dir,iwc);
  Document doc=new Document();
  doc.add(new StringField("id","1",random().nextBoolean() ? Field.Store.YES : Field.Store.NO));
  doc.add(new TextField("field","doc",random().nextBoolean() ? Field.Store.YES : Field.Store.NO));
  writer.addDocument(doc);
  DirectoryReader open=ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer,true),new ShardId("foo",1));
  IndexSearcher searcher=new IndexSearcher(open);
  assertEquals(1,searcher.search(new TermQuery(new Term("field","doc")),1).totalHits);
  searcher.setSimilarity(iwc.getSimilarity());
  IndexSearcherWrapper wrapper=new IndexSearcherWrapper(){
    @Override protected DirectoryReader wrap(    DirectoryReader reader) throws IOException {
      return new BrokenWrapper(reader,false);
    }
  }
;
  try (Engine.Searcher engineSearcher=new Engine.Searcher("foo",searcher)){
    try {
      wrapper.wrap(engineSearcher);
      fail("reader must delegate cache key");
    }
 catch (    IllegalStateException ex) {
    }
  }
   wrapper=new IndexSearcherWrapper(){
    @Override protected DirectoryReader wrap(    DirectoryReader reader) throws IOException {
      return new BrokenWrapper(reader,true);
    }
  }
;
  try (Engine.Searcher engineSearcher=new Engine.Searcher("foo",searcher)){
    try {
      wrapper.wrap(engineSearcher);
      fail("reader must delegate cache key");
    }
 catch (    IllegalStateException ex) {
    }
  }
   IOUtils.close(open,writer,dir);
}
