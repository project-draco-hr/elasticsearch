{
  Map<String,Object> root;
  XContentParser xContentParser=null;
  try {
    xContentParser=XContentFactory.xContent(source).createParser(source);
    root=xContentParser.map();
  }
 catch (  IOException e) {
    throw new MapperParsingException("Failed to parse mapping definition",e);
  }
 finally {
    if (xContentParser != null) {
      xContentParser.close();
    }
  }
  String rootName=root.keySet().iterator().next();
  Map<String,Object> rootObj;
  if (type == null) {
    rootObj=(Map<String,Object>)root.get(rootName);
    type=rootName;
  }
 else {
    if (type.equals(rootName)) {
      Object tmpNode=root.get(type);
      if (!(tmpNode instanceof Map)) {
        throw new MapperParsingException("Expected root node name [" + rootName + "] to be of object type, but its not");
      }
      rootObj=(Map<String,Object>)tmpNode;
    }
 else     if (rootName.equals("_default_")) {
      Object tmpNode=root.get("_default_");
      if (!(tmpNode instanceof Map)) {
        throw new MapperParsingException("_default_ mappings must have an inner object representing the actual mappings for the type");
      }
      rootObj=(Map<String,Object>)tmpNode;
    }
 else {
      rootObj=root;
    }
  }
  XContentTypeParser.ParserContext parserContext=new XContentTypeParser.ParserContext(rootObj,analysisService,typeParsers);
  XContentDocumentMapper.Builder docBuilder=doc((XContentObjectMapper.Builder)rootObjectTypeParser.parse(type,rootObj,parserContext));
  for (  Map.Entry<String,Object> entry : rootObj.entrySet()) {
    String fieldName=Strings.toUnderscoreCase(entry.getKey());
    Object fieldNode=entry.getValue();
    if (XContentSourceFieldMapper.CONTENT_TYPE.equals(fieldName) || "sourceField".equals(fieldName)) {
      docBuilder.sourceField(parseSourceField((Map<String,Object>)fieldNode,parserContext));
    }
 else     if (XContentIdFieldMapper.CONTENT_TYPE.equals(fieldName) || "idField".equals(fieldName)) {
      docBuilder.idField(parseIdField((Map<String,Object>)fieldNode,parserContext));
    }
 else     if (XContentTypeFieldMapper.CONTENT_TYPE.equals(fieldName) || "typeField".equals(fieldName)) {
      docBuilder.typeField(parseTypeField((Map<String,Object>)fieldNode,parserContext));
    }
 else     if (XContentUidFieldMapper.CONTENT_TYPE.equals(fieldName) || "uidField".equals(fieldName)) {
      docBuilder.uidField(parseUidField((Map<String,Object>)fieldNode,parserContext));
    }
 else     if (XContentBoostFieldMapper.CONTENT_TYPE.equals(fieldName) || "boostField".equals(fieldName)) {
      docBuilder.boostField(parseBoostField((Map<String,Object>)fieldNode,parserContext));
    }
 else     if (XContentAllFieldMapper.CONTENT_TYPE.equals(fieldName) || "allField".equals(fieldName)) {
      docBuilder.allField(parseAllField((Map<String,Object>)fieldNode,parserContext));
    }
 else     if ("index_analyzer".equals(fieldName)) {
      docBuilder.indexAnalyzer(analysisService.analyzer(fieldNode.toString()));
    }
 else     if ("search_analyzer".equals(fieldName)) {
      docBuilder.searchAnalyzer(analysisService.analyzer(fieldNode.toString()));
    }
 else     if ("analyzer".equals(fieldName)) {
      docBuilder.indexAnalyzer(analysisService.analyzer(fieldNode.toString()));
      docBuilder.searchAnalyzer(analysisService.analyzer(fieldNode.toString()));
    }
  }
  if (!docBuilder.hasIndexAnalyzer()) {
    docBuilder.indexAnalyzer(analysisService.defaultIndexAnalyzer());
  }
  if (!docBuilder.hasSearchAnalyzer()) {
    docBuilder.searchAnalyzer(analysisService.defaultSearchAnalyzer());
  }
  ImmutableMap<String,Object> attributes=ImmutableMap.of();
  if (rootObj.containsKey("_attributes")) {
    attributes=ImmutableMap.copyOf((Map<String,Object>)rootObj.get("_attributes"));
  }
  docBuilder.attributes(attributes);
  docBuilder.mappingSource(source);
  XContentDocumentMapper documentMapper=docBuilder.build();
  documentMapper.mappingSource(documentMapper.buildSource());
  return documentMapper;
}
