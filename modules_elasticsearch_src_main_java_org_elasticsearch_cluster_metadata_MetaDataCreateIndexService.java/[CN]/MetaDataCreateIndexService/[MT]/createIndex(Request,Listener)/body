{
  ImmutableSettings.Builder updatedSettingsBuilder=ImmutableSettings.settingsBuilder();
  for (  Map.Entry<String,String> entry : request.settings.getAsMap().entrySet()) {
    if (!entry.getKey().startsWith("index.")) {
      updatedSettingsBuilder.put("index." + entry.getKey(),entry.getValue());
    }
 else {
      updatedSettingsBuilder.put(entry.getKey(),entry.getValue());
    }
  }
  request.settings(updatedSettingsBuilder.build());
  clusterService.submitStateUpdateTask("create-index [" + request.index + "], cause ["+ request.cause+ "]",new ProcessedClusterStateUpdateTask(){
    @Override public ClusterState execute(    ClusterState currentState){
      try {
        if (request.origin == Request.Origin.API) {
          try {
            validate(request,currentState);
          }
 catch (          Exception e) {
            listener.onFailure(e);
            return currentState;
          }
        }
        List<IndexTemplateMetaData> templates=ImmutableList.of();
        if (request.origin == Request.Origin.API) {
          templates=findTemplates(request,currentState);
        }
        Map<String,Map<String,Object>> mappings=Maps.newHashMap();
        for (        Map.Entry<String,String> entry : request.mappings.entrySet()) {
          mappings.put(entry.getKey(),parseMapping(entry.getValue()));
        }
        for (        IndexTemplateMetaData template : templates) {
          for (          Map.Entry<String,CompressedString> entry : template.mappings().entrySet()) {
            if (mappings.containsKey(entry.getKey())) {
              XContentHelper.mergeDefaults(mappings.get(entry.getKey()),parseMapping(entry.getValue().string()));
            }
 else {
              mappings.put(entry.getKey(),parseMapping(entry.getValue().string()));
            }
          }
        }
        if (request.origin == Request.Origin.API) {
          File mappingsDir=new File(environment.configFile(),"mappings");
          if (mappingsDir.exists() && mappingsDir.isDirectory()) {
            File indexMappingsDir=new File(mappingsDir,request.index);
            if (indexMappingsDir.exists() && indexMappingsDir.isDirectory()) {
              addMappings(mappings,indexMappingsDir);
            }
            File defaultMappingsDir=new File(mappingsDir,"_default");
            if (defaultMappingsDir.exists() && defaultMappingsDir.isDirectory()) {
              addMappings(mappings,defaultMappingsDir);
            }
          }
        }
        ImmutableSettings.Builder indexSettingsBuilder=settingsBuilder();
        for (int i=templates.size() - 1; i >= 0; i--) {
          indexSettingsBuilder.put(templates.get(i).settings());
        }
        indexSettingsBuilder.put(request.settings);
        if (indexSettingsBuilder.get(SETTING_NUMBER_OF_SHARDS) == null) {
          if (request.index.equals(riverIndexName)) {
            indexSettingsBuilder.put(SETTING_NUMBER_OF_SHARDS,settings.getAsInt(SETTING_NUMBER_OF_SHARDS,1));
          }
 else {
            indexSettingsBuilder.put(SETTING_NUMBER_OF_SHARDS,settings.getAsInt(SETTING_NUMBER_OF_SHARDS,5));
          }
        }
        if (indexSettingsBuilder.get(SETTING_NUMBER_OF_REPLICAS) == null) {
          if (request.index.equals(riverIndexName)) {
            indexSettingsBuilder.put(SETTING_NUMBER_OF_REPLICAS,settings.getAsInt(SETTING_NUMBER_OF_REPLICAS,1));
          }
 else {
            indexSettingsBuilder.put(SETTING_NUMBER_OF_REPLICAS,settings.getAsInt(SETTING_NUMBER_OF_REPLICAS,1));
          }
        }
        Settings actualIndexSettings=indexSettingsBuilder.build();
        indicesService.createIndex(request.index,actualIndexSettings,clusterService.state().nodes().localNode().id());
        IndexService indexService=indicesService.indexServiceSafe(request.index);
        MapperService mapperService=indexService.mapperService();
        for (        Map.Entry<String,Map<String,Object>> entry : mappings.entrySet()) {
          try {
            mapperService.add(entry.getKey(),XContentFactory.jsonBuilder().map(entry.getValue()).string());
          }
 catch (          Exception e) {
            indicesService.deleteIndex(request.index);
            throw new MapperParsingException("mapping [" + entry.getKey() + "]",e);
          }
        }
        Map<String,MappingMetaData> mappingsMetaData=Maps.newHashMap();
        for (        DocumentMapper mapper : mapperService) {
          MappingMetaData mappingMd=new MappingMetaData(mapper);
          mappingsMetaData.put(mapper.type(),mappingMd);
        }
        final IndexMetaData.Builder indexMetaDataBuilder=newIndexMetaDataBuilder(request.index).settings(actualIndexSettings);
        for (        MappingMetaData mappingMd : mappingsMetaData.values()) {
          indexMetaDataBuilder.putMapping(mappingMd);
        }
        indexMetaDataBuilder.state(request.state);
        final IndexMetaData indexMetaData=indexMetaDataBuilder.build();
        MetaData newMetaData=newMetaDataBuilder().metaData(currentState.metaData()).put(indexMetaData).build();
        logger.info("[{}] creating index, cause [{}], shards [{}]/[{}], mappings {}",request.index,request.cause,indexMetaData.numberOfShards(),indexMetaData.numberOfReplicas(),mappings.keySet());
        ClusterBlocks.Builder blocks=ClusterBlocks.builder().blocks(currentState.blocks());
        if (!request.blocks.isEmpty()) {
          for (          ClusterBlock block : request.blocks) {
            blocks.addIndexBlock(request.index,block);
          }
        }
        if (request.state == State.CLOSE) {
          blocks.addIndexBlock(request.index,MetaDataStateIndexService.INDEX_CLOSED_BLOCK);
        }
        return newClusterStateBuilder().state(currentState).blocks(blocks).metaData(newMetaData).build();
      }
 catch (      Exception e) {
        listener.onFailure(e);
        return currentState;
      }
    }
    @Override public void clusterStateProcessed(    ClusterState clusterState){
      if (request.state == State.CLOSE) {
        listener.onResponse(new Response(true,clusterState.metaData().index(request.index)));
        return;
      }
      clusterService.submitStateUpdateTask("reroute after index [" + request.index + "] creation",new ProcessedClusterStateUpdateTask(){
        @Override public ClusterState execute(        ClusterState currentState){
          RoutingTable.Builder routingTableBuilder=RoutingTable.builder().routingTable(currentState.routingTable());
          IndexRoutingTable.Builder indexRoutingBuilder=new IndexRoutingTable.Builder(request.index).initializeEmpty(currentState.metaData().index(request.index));
          routingTableBuilder.add(indexRoutingBuilder);
          RoutingAllocation.Result routingResult=shardsAllocation.reroute(newClusterStateBuilder().state(currentState).routingTable(routingTableBuilder).build());
          return newClusterStateBuilder().state(currentState).routingResult(routingResult).build();
        }
        @Override public void clusterStateProcessed(        ClusterState clusterState){
          logger.info("[{}] created and added to cluster_state",request.index);
          listener.onResponse(new Response(true,clusterState.metaData().index(request.index)));
        }
      }
);
    }
  }
);
}
