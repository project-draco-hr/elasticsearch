{
  final VerifyIndex verifyIndex=new VerifyIndex();
  AtomicBoolean stop=new AtomicBoolean();
  Streamer<VerifyIndex> streamer=new Streamer<VerifyIndex>(stop,verifyIndex){
    @Override VerifyIndex createObj(){
      return new VerifyIndex();
    }
  }
;
  verifyIndex.start();
  assertThat(verifyIndex.checkIndexTime(),equalTo(0l));
  VerifyIndex lastRead=streamer.serializeDeserialize();
  assertThat(lastRead.checkIndexTime(),equalTo(0l));
  long took=randomLong();
  if (took < 0) {
    took=-took;
    took=Math.max(0l,took);
  }
  verifyIndex.checkIndexTime(took);
  assertThat(verifyIndex.checkIndexTime(),equalTo(took));
  boolean stopped=false;
  if (randomBoolean()) {
    verifyIndex.stop();
    stopped=true;
  }
  if (randomBoolean()) {
    verifyIndex.reset();
    took=0;
    assertThat(verifyIndex.checkIndexTime(),equalTo(took));
  }
  lastRead=streamer.serializeDeserialize();
  assertThat(lastRead.checkIndexTime(),equalTo(took));
  assertThat(lastRead.startTime(),equalTo(verifyIndex.startTime()));
  assertThat(lastRead.stopTime(),equalTo(verifyIndex.stopTime()));
  if (stopped) {
    assertThat(lastRead.time(),equalTo(verifyIndex.time()));
  }
 else {
    assertThat(lastRead.time(),lessThanOrEqualTo(verifyIndex.time()));
  }
}
