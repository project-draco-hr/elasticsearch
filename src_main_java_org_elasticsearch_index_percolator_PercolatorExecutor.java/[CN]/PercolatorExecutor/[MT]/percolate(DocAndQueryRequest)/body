{
  final CustomMemoryIndex memoryIndex=new CustomMemoryIndex();
  for (  IndexableField field : request.doc().rootDoc().getFields()) {
    if (!field.fieldType().indexed()) {
      continue;
    }
    if (field.name().equals(UidFieldMapper.NAME)) {
      continue;
    }
    TokenStream tokenStream;
    try {
      tokenStream=field.tokenStream(mapperService.documentMapper(request.doc().type()).mappers().smartNameFieldMapper(field.name()).indexAnalyzer());
    }
 catch (    IOException e) {
      throw new ElasticSearchException("Failed to create token stream",e);
    }
    if (tokenStream != null) {
      memoryIndex.addField(field.name(),tokenStream,field.boost());
    }
 else {
      Reader reader=field.readerValue();
      if (reader != null) {
        try {
          memoryIndex.addField(field.name(),request.doc().analyzer().tokenStream(field.name(),reader),field.boost());
        }
 catch (        IOException e) {
          throw new MapperParsingException("Failed to analyze field [" + field.name() + "]",e);
        }
      }
 else {
        String value=field.stringValue();
        if (value != null) {
          try {
            memoryIndex.addField(field.name(),request.doc().analyzer().tokenStream(field.name(),new FastStringReader(value)),field.boost());
          }
 catch (          IOException e) {
            throw new MapperParsingException("Failed to analyze field [" + field.name() + "]",e);
          }
        }
      }
    }
  }
  final IndexSearcher searcher=memoryIndex.createSearcher();
  List<String> matches=new ArrayList<String>();
  try {
    if (request.query() == null) {
      Lucene.ExistsCollector collector=new Lucene.ExistsCollector();
      for (      Map.Entry<String,Query> entry : queries.entrySet()) {
        collector.reset();
        try {
          searcher.search(entry.getValue(),collector);
        }
 catch (        IOException e) {
          logger.warn("[" + entry.getKey() + "] failed to execute query",e);
        }
        if (collector.exists()) {
          matches.add(entry.getKey());
        }
      }
    }
 else {
      IndexService percolatorIndex=percolatorIndexServiceSafe();
      if (percolatorIndex.numberOfShards() == 0) {
        throw new PercolateIndexUnavailable(new Index(PercolatorService.INDEX_NAME));
      }
      IndexShard percolatorShard=percolatorIndex.shard(0);
      Engine.Searcher percolatorSearcher=percolatorShard.searcher();
      try {
        percolatorSearcher.searcher().search(request.query(),new QueryCollector(logger,queries,searcher,percolatorIndex,matches));
      }
 catch (      IOException e) {
        logger.warn("failed to execute",e);
      }
 finally {
        percolatorSearcher.release();
      }
    }
  }
  finally {
    indexCache.clear(searcher.getIndexReader());
  }
  return new Response(matches,request.doc().mappingsModified());
}
