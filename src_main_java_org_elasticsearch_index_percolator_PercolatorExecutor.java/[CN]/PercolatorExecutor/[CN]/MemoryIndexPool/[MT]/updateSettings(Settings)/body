{
  final int newPoolSize=settings.getAsInt(PERCOLATE_POOL_SIZE,poolMaxSize);
  if (newPoolSize <= 0) {
    throw new ElasticSearchIllegalArgumentException(PERCOLATE_POOL_SIZE + " size must be > 0 but was [" + newPoolSize+ "]");
  }
  final ByteSizeValue byteSize=settings.getAsBytesSize(PERCOLATE_POOL_MAX_MEMORY,maxMemorySize);
  if (byteSize.bytes() < 0) {
    throw new ElasticSearchIllegalArgumentException(PERCOLATE_POOL_MAX_MEMORY + " must be positive but was [" + byteSize.bytes()+ "]");
  }
  timeout=settings.getAsTime(PERCOLATE_TIMEOUT,timeout);
  if (timeout.millis() < 0) {
    throw new ElasticSearchIllegalArgumentException(PERCOLATE_TIMEOUT + " must be positive but was [" + timeout+ "]");
  }
  if (maxMemorySize.equals(byteSize) && newPoolSize == poolMaxSize) {
    return;
  }
  maxMemorySize=byteSize;
  poolMaxSize=newPoolSize;
  poolCurrentSize=Integer.MAX_VALUE;
  bytesPerMemoryIndex=byteSize.bytes() / newPoolSize;
  memoryIndexQueue=new ArrayBlockingQueue<ReusableMemoryIndex>(newPoolSize);
  poolCurrentSize=0;
}
