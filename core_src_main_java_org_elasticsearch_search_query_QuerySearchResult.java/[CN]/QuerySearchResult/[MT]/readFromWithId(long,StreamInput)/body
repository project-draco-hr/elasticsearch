{
  this.id=id;
  from=in.readVInt();
  size=in.readVInt();
  int numSortFieldsPlus1=in.readVInt();
  if (numSortFieldsPlus1 == 0) {
    sortValueFormats=null;
  }
 else {
    sortValueFormats=new DocValueFormat[numSortFieldsPlus1 - 1];
    for (int i=0; i < sortValueFormats.length; ++i) {
      sortValueFormats[i]=in.readNamedWriteable(DocValueFormat.class);
    }
  }
  topDocs=readTopDocs(in);
  if (in.readBoolean()) {
    aggregations=InternalAggregations.readAggregations(in);
  }
  if (in.readBoolean()) {
    int size=in.readVInt();
    List<SiblingPipelineAggregator> pipelineAggregators=new ArrayList<>(size);
    for (int i=0; i < size; i++) {
      if (in.readBoolean()) {
        pipelineAggregators.add((SiblingPipelineAggregator)in.readNamedWriteable(PipelineAggregator.class));
      }
 else {
        BytesReference type=in.readBytesReference();
        PipelineAggregator pipelineAggregator=PipelineAggregatorStreams.stream(type).readResult(in);
        pipelineAggregators.add((SiblingPipelineAggregator)pipelineAggregator);
      }
    }
    this.pipelineAggregators=pipelineAggregators;
  }
  if (in.readBoolean()) {
    suggest=Suggest.readSuggest(in);
  }
  searchTimedOut=in.readBoolean();
  terminatedEarly=in.readOptionalBoolean();
  if (in.getVersion().onOrAfter(Version.V_2_2_0) && in.readBoolean()) {
    profileShardResults=new ProfileShardResult(in);
  }
}
