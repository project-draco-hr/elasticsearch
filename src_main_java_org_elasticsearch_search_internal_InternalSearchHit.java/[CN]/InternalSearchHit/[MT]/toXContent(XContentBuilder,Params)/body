{
  builder.startObject();
  if (explanation() != null) {
    builder.field("_shard",shard.shardId());
    builder.field("_node",shard.nodeIdText());
  }
  builder.field(Fields._INDEX,shard.indexText());
  builder.field(Fields._TYPE,type);
  builder.field(Fields._ID,id);
  if (version != -1) {
    builder.field(Fields._VERSION,version);
  }
  if (Float.isNaN(score)) {
    builder.nullField(Fields._SCORE);
  }
 else {
    builder.field(Fields._SCORE,score);
  }
  if (source != null) {
    RestXContentBuilder.restDocumentSource(source,builder,params);
  }
  if (fields != null && !fields.isEmpty()) {
    builder.startObject(Fields.FIELDS);
    for (    SearchHitField field : fields.values()) {
      if (field.values().isEmpty()) {
        continue;
      }
      String fieldName=field.getName();
      if (field.isMetadataField()) {
        builder.field(fieldName,field.value());
      }
 else {
        builder.startArray(fieldName);
        for (        Object value : field.getValues()) {
          builder.value(value);
        }
        builder.endArray();
      }
    }
    builder.endObject();
  }
  if (highlightFields != null && !highlightFields.isEmpty()) {
    builder.startObject(Fields.HIGHLIGHT);
    for (    HighlightField field : highlightFields.values()) {
      builder.field(field.name());
      if (field.fragments() == null) {
        builder.nullValue();
      }
 else {
        builder.startArray();
        for (        Text fragment : field.fragments()) {
          builder.value(fragment);
        }
        builder.endArray();
      }
    }
    builder.endObject();
  }
  if (sortValues != null && sortValues.length > 0) {
    builder.startArray(Fields.SORT);
    for (    Object sortValue : sortValues) {
      if (sortValue != null && sortValue.equals(MAX_TERM_AS_TEXT)) {
        builder.nullValue();
      }
 else {
        builder.value(sortValue);
      }
    }
    builder.endArray();
  }
  if (matchedQueries.length > 0) {
    builder.startArray(Fields.MATCHED_QUERIES);
    for (    String matchedFilter : matchedQueries) {
      builder.value(matchedFilter);
    }
    builder.endArray();
  }
  if (explanation() != null) {
    builder.field(Fields._EXPLANATION);
    buildExplanation(builder,explanation());
  }
  builder.endObject();
  return builder;
}
