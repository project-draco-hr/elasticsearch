{
  final StoppableSemaphore semaphore=new StoppableSemaphore(1);
  final Map<String,CompetitionResult> competitionResults=new HashMap<String,CompetitionResult>();
  final BenchmarkResponse benchmarkResponse=new BenchmarkResponse(request.benchmarkName(),competitionResults);
  if (this.nodeName == null) {
    this.nodeName=clusterService.localNode().name();
  }
synchronized (lock) {
    if (activeBenchmarks.containsKey(request.benchmarkName())) {
      throw new ElasticsearchException("Benchmark with id [" + request.benchmarkName() + "] is already running");
    }
    activeBenchmarks=ImmutableOpenMap.builder(activeBenchmarks).fPut(request.benchmarkName(),new BenchmarkState(request,benchmarkResponse,semaphore)).build();
  }
  try {
    for (    BenchmarkCompetitor competitor : request.competitors()) {
      final BenchmarkSettings settings=competitor.settings();
      final int iterations=settings.iterations();
      logger.debug("Executing [{}] iterations for benchmark [{}][{}] ",iterations,request.benchmarkName(),competitor.name());
      final List<CompetitionIteration> competitionIterations=new ArrayList<>(iterations);
      final CompetitionResult competitionResult=new CompetitionResult(competitor.name(),settings.concurrency(),settings.multiplier(),request.percentiles());
      final CompetitionNodeResult competitionNodeResult=new CompetitionNodeResult(competitor.name(),nodeName,iterations,competitionIterations);
      competitionResult.addCompetitionNodeResult(competitionNodeResult);
      benchmarkResponse.competitionResults.put(competitor.name(),competitionResult);
      final List<SearchRequest> searchRequests=competitor.settings().searchRequests();
      if (settings.warmup()) {
        final long beforeWarmup=System.nanoTime();
        final List<String> warmUpErrors=warmUp(competitor,searchRequests,semaphore);
        final long afterWarmup=System.nanoTime();
        competitionNodeResult.warmUpTime(TimeUnit.MILLISECONDS.convert(afterWarmup - beforeWarmup,TimeUnit.NANOSECONDS));
        if (!warmUpErrors.isEmpty()) {
          throw new BenchmarkExecutionException("Failed to execute warmup phase",warmUpErrors);
        }
      }
      final int numMeasurements=settings.multiplier() * searchRequests.size();
      final long[] timeBuckets=new long[numMeasurements];
      final long[] docBuckets=new long[numMeasurements];
      for (int i=0; i < iterations; i++) {
        if (settings.allowCacheClearing() && settings.clearCaches() != null) {
          try {
            client.admin().indices().clearCache(settings.clearCaches()).get();
          }
 catch (          ExecutionException e) {
            throw new BenchmarkExecutionException("Failed to clear caches",e);
          }
        }
        CompetitionIteration ci=runIteration(competitor,searchRequests,timeBuckets,docBuckets,semaphore);
        ci.percentiles(request.percentiles());
        competitionIterations.add(ci);
        competitionNodeResult.incrementCompletedIterations();
      }
      competitionNodeResult.totalExecutedQueries(settings.multiplier() * searchRequests.size() * iterations);
    }
    benchmarkResponse.state(BenchmarkResponse.State.COMPLETE);
  }
 catch (  BenchmarkExecutionException e) {
    benchmarkResponse.state(BenchmarkResponse.State.FAILED);
    benchmarkResponse.errors(e.errorMessages().toArray(new String[e.errorMessages().size()]));
  }
catch (  InterruptedException ex) {
    Thread.currentThread().interrupt();
    benchmarkResponse.state(BenchmarkResponse.State.ABORTED);
  }
 finally {
synchronized (lock) {
      semaphore.stop();
      activeBenchmarks=ImmutableOpenMap.builder(activeBenchmarks).fRemove(request.benchmarkName()).build();
    }
  }
  return benchmarkResponse;
}
