{
  assertAcked(prepareCreate("test").addMapping("parent").addMapping("child","_parent","type=parent"));
  ensureGreen();
  int numberOfParents=4;
  int numberOfChildrenPerParent=123;
  for (int i=1; i <= numberOfParents; i++) {
    String parentId=String.format(Locale.ROOT,"p%d",i);
    client().prepareIndex("test","parent",parentId).setSource("p_field",String.format(Locale.ROOT,"p_value%d",i)).execute().actionGet();
    for (int j=1; j <= numberOfChildrenPerParent; j++) {
      client().prepareIndex("test","child",String.format(Locale.ROOT,"%s_c%d",parentId,j)).setSource("c_field1",parentId,"c_field2",i % 2 == 0 ? "even" : "not_even").setParent(parentId).execute().actionGet();
    }
  }
  refresh();
  SearchResponse searchResponse=client().prepareSearch("test").setQuery(topChildrenQuery("child",termQuery("c_field1","p3"))).get();
  assertNoFailures(searchResponse);
  assertThat(searchResponse.getFailedShards(),equalTo(0));
  assertThat(searchResponse.getHits().totalHits(),equalTo(1l));
  assertThat(searchResponse.getHits().getAt(0).id(),equalTo("p3"));
  searchResponse=client().prepareSearch("test").setQuery(topChildrenQuery("child",termQuery("c_field2","even"))).execute().actionGet();
  assertNoFailures(searchResponse);
  assertThat(searchResponse.getFailedShards(),equalTo(0));
  assertThat(searchResponse.getHits().totalHits(),equalTo(2l));
  assertThat(searchResponse.getHits().getAt(0).id(),anyOf(equalTo("p2"),equalTo("p4")));
  assertThat(searchResponse.getHits().getAt(1).id(),anyOf(equalTo("p2"),equalTo("p4")));
}
