{
  final ClusterState clusterState=clusterService.state();
  clusterState.blocks().globalBlockedRaiseException(ClusterBlockLevel.READ);
  final AtomicReferenceArray<Object> percolateRequests=new AtomicReferenceArray<Object>(request.requests().size());
  TIntArrayList getRequestSlots=new TIntArrayList();
  List<GetRequest> existingDocsRequests=new ArrayList<GetRequest>();
  for (int i=0; i < request.requests().size(); i++) {
    PercolateRequest percolateRequest=request.requests().get(i);
    percolateRequest.startTime=System.currentTimeMillis();
    percolateRequests.set(i,percolateRequest);
    if (percolateRequest.getRequest() != null) {
      existingDocsRequests.add(percolateRequest.getRequest());
      getRequestSlots.add(i);
    }
  }
  final AtomicIntegerArray percolateRequestSlotsWithGet=new AtomicIntegerArray(getRequestSlots.toArray());
  if (!existingDocsRequests.isEmpty()) {
    final MultiGetRequest multiGetRequest=new MultiGetRequest();
    for (    GetRequest getRequest : existingDocsRequests) {
      multiGetRequest.add(new MultiGetRequest.Item(getRequest.index(),getRequest.type(),getRequest.id()).routing(getRequest.routing()));
    }
    multiGetAction.execute(multiGetRequest,new ActionListener<MultiGetResponse>(){
      @Override public void onResponse(      MultiGetResponse multiGetItemResponses){
        for (int i=0; i < multiGetItemResponses.getResponses().length; i++) {
          MultiGetItemResponse itemResponse=multiGetItemResponses.getResponses()[i];
          int slot=percolateRequestSlotsWithGet.get(i);
          if (!itemResponse.isFailed()) {
            GetResponse getResponse=itemResponse.getResponse();
            if (getResponse.isExists()) {
              percolateRequests.set(slot,new PercolateRequest((PercolateRequest)percolateRequests.get(slot),getResponse.getSourceAsBytesRef()));
            }
 else {
              percolateRequests.set(slot,new DocumentMissingException(null,getResponse.getType(),getResponse.getId()));
            }
          }
 else {
            percolateRequests.set(slot,itemResponse.getFailure());
          }
        }
        multiPercolate(request,percolateRequests,listener,clusterState);
      }
      @Override public void onFailure(      Throwable e){
        listener.onFailure(e);
      }
    }
);
  }
 else {
    multiPercolate(request,percolateRequests,listener,clusterState);
  }
}
