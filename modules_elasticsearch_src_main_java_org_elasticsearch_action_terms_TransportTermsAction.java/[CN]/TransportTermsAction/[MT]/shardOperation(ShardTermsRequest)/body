{
  IndexService indexService=indicesService.indexServiceSafe(request.index());
  IndexShard shard=indexService.shard(request.shardId());
  Engine.Searcher searcher=shard.searcher();
  ShardTermsResponse response=new ShardTermsResponse(request.index(),request.shardId(),searcher.reader().numDocs(),searcher.reader().maxDoc(),searcher.reader().numDeletedDocs());
  TermDocs termDocs=null;
  try {
    Pattern regexpPattern=null;
    if (request.regexp() != null) {
      regexpPattern=Pattern.compile(request.regexp(),Pattern.DOTALL | Pattern.CASE_INSENSITIVE);
    }
    for (    String fieldName : request.fields()) {
      FieldMapper fieldMapper=indexService.mapperService().smartNameFieldMapper(fieldName);
      String indexFieldName=fieldName;
      if (fieldMapper != null) {
        indexFieldName=fieldMapper.names().indexName();
      }
      indexFieldName=StringHelper.intern(indexFieldName);
      try {
        ExecuteTermResult executeTermResult;
        if (request.sortType() == TermsRequest.SortType.TERM && fieldMapper != null && (fieldMapper.sortType() == SortField.STRING || fieldMapper.sortType() == SortField.STRING_VAL)) {
          executeTermResult=executeTermSortedStringTerm(request,indexFieldName,searcher,regexpPattern,fieldMapper,termDocs);
        }
 else {
          executeTermResult=executeTerms(request,indexFieldName,searcher,regexpPattern,fieldMapper,termDocs);
        }
        termDocs=executeTermResult.termDocs;
        response.put(fieldName,executeTermResult.termsFreqs);
      }
 catch (      Exception e) {
        logger.warn("Failed to fetch terms for field [" + fieldName + "]",e);
      }
    }
    return response;
  }
  finally {
    if (termDocs != null) {
      try {
        termDocs.close();
      }
 catch (      IOException e) {
      }
    }
    searcher.release();
  }
}
