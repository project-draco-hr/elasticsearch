{
  TObjectIntHashMap<Object> termsFreqs=new TObjectIntHashMap<Object>();
  String sFrom=request.from();
  if (sFrom == null) {
    sFrom=request.prefix();
  }
  Object from=sFrom;
  if (from != null && fieldMapper != null) {
    from=fieldMapper.valueFromString(sFrom);
  }
  String sTo=request.to();
  Object to=sTo;
  if (to != null && fieldMapper != null) {
    to=fieldMapper.valueFromString(sTo);
  }
  TermEnum termEnum=null;
  Comparator<TermFreq> comparator=request.sortType() == TermsRequest.SortType.TERM ? TermFreq.termComparator() : TermFreq.freqComparator();
  BoundedTreeSet<TermFreq> sortedFreq=new BoundedTreeSet<TermFreq>(comparator,request.size());
  try {
    termEnum=searcher.reader().terms(new Term(indexFieldName,""));
    while (true) {
      Term term=termEnum.term();
      if (term == null || indexFieldName != term.field()) {
        break;
      }
      Object termValue=term.text();
      if (fieldMapper != null) {
        termValue=fieldMapper.valueFromTerm(term.text());
        if (fieldMapper.shouldBreakTermEnumeration(termValue)) {
          break;
        }
        if (termValue == null) {
          continue;
        }
      }
      if (from != null) {
        int fromCompareResult=((Comparable)termValue).compareTo(from);
        if (fromCompareResult < 0 || (fromCompareResult == 0 && !request.fromInclusive())) {
          termEnum.next();
          continue;
        }
      }
      if (request.prefix() != null && !term.text().startsWith(request.prefix())) {
        break;
      }
      if (regexpPattern != null && !regexpPattern.matcher(term.text()).matches()) {
        termEnum.next();
        continue;
      }
      if (to != null) {
        int toCompareResult=((Comparable)termValue).compareTo(to);
        if (toCompareResult > 0 || (toCompareResult == 0 && !request.toInclusive())) {
          break;
        }
      }
      int docFreq=termEnum.docFreq();
      if (request.exact()) {
        if (termDocs == null) {
          termDocs=searcher.reader().termDocs();
        }
        termDocs.seek(termEnum);
        docFreq=0;
        while (termDocs.next()) {
          if (!searcher.reader().isDeleted(termDocs.doc())) {
            docFreq++;
          }
        }
      }
      sortedFreq.add(new TermFreq(termValue,docFreq));
      if (!termEnum.next()) {
        break;
      }
    }
  }
  finally {
    if (termEnum != null) {
      try {
        termEnum.close();
      }
 catch (      IOException e) {
      }
    }
  }
  for (  TermFreq termFreq : sortedFreq) {
    termsFreqs.put(termFreq.term(),termFreq.docFreq());
  }
  return new ExecuteTermResult(termsFreqs,termDocs);
}
