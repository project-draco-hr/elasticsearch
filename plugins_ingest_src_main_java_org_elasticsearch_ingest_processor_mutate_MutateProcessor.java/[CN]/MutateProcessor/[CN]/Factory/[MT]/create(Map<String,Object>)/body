{
  Map<String,Object> update=ConfigurationUtils.readOptionalMap(config,"update");
  Map<String,String> rename=ConfigurationUtils.readOptionalMap(config,"rename");
  Map<String,String> convert=ConfigurationUtils.readOptionalMap(config,"convert");
  Map<String,String> split=ConfigurationUtils.readOptionalMap(config,"split");
  Map<String,List<String>> gsubConfig=ConfigurationUtils.readOptionalMap(config,"gsub");
  Map<String,String> join=ConfigurationUtils.readOptionalMap(config,"join");
  List<String> remove=ConfigurationUtils.readOptionalStringList(config,"remove");
  List<String> trim=ConfigurationUtils.readOptionalStringList(config,"trim");
  List<String> uppercase=ConfigurationUtils.readOptionalStringList(config,"uppercase");
  List<String> lowercase=ConfigurationUtils.readOptionalStringList(config,"lowercase");
  List<GsubExpression> gsubExpressions=null;
  if (gsubConfig != null) {
    gsubExpressions=new ArrayList<>();
    for (    Map.Entry<String,List<String>> entry : gsubConfig.entrySet()) {
      List<String> searchAndReplace=entry.getValue();
      if (searchAndReplace.size() != 2) {
        throw new IllegalArgumentException("Invalid search and replace values " + searchAndReplace + " for field: "+ entry.getKey());
      }
      Pattern searchPattern=Pattern.compile(searchAndReplace.get(0));
      gsubExpressions.add(new GsubExpression(entry.getKey(),searchPattern,searchAndReplace.get(1)));
    }
  }
  return new MutateProcessor((update == null) ? null : Collections.unmodifiableMap(update),(rename == null) ? null : Collections.unmodifiableMap(rename),(convert == null) ? null : Collections.unmodifiableMap(convert),(split == null) ? null : Collections.unmodifiableMap(split),(gsubExpressions == null) ? null : Collections.unmodifiableList(gsubExpressions),(join == null) ? null : Collections.unmodifiableMap(join),(remove == null) ? null : Collections.unmodifiableList(remove),(trim == null) ? null : Collections.unmodifiableList(trim),(uppercase == null) ? null : Collections.unmodifiableList(uppercase),(lowercase == null) ? null : Collections.unmodifiableList(lowercase));
}
