{
  TObjectIntHashMap<String> facets=aggregator.facets();
  if (facets.isEmpty()) {
    TermsStringFacetCollector.pushFacets(facets);
    return new InternalStringTermsFacet(facetName,arrayToCommaDelimitedString(fieldsNames),comparatorType,size,ImmutableList.<InternalStringTermsFacet.StringEntry>of(),aggregator.missing());
  }
 else {
    BoundedTreeSet<InternalStringTermsFacet.StringEntry> ordered=new BoundedTreeSet<InternalStringTermsFacet.StringEntry>(comparatorType.comparator(),size * numberOfShards);
    for (TObjectIntIterator<String> it=facets.iterator(); it.hasNext(); ) {
      it.advance();
      ordered.add(new InternalStringTermsFacet.StringEntry(it.key(),it.value()));
    }
    TermsStringFacetCollector.pushFacets(facets);
    return new InternalStringTermsFacet(facetName,arrayToCommaDelimitedString(fieldsNames),comparatorType,size,ordered,aggregator.missing());
  }
}
