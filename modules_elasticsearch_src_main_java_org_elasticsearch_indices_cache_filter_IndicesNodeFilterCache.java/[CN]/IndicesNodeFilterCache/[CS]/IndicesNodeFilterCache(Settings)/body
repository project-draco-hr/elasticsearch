{
  super(settings);
  String size=componentSettings.get("size","20%");
  if (size.endsWith("%")) {
    double percent=Double.parseDouble(size.substring(0,size.length() - 1));
    sizeInBytes=(long)((percent / 100) * JvmInfo.jvmInfo().getMem().getHeapMax().bytes());
  }
 else {
    sizeInBytes=ByteSizeValue.parseBytesSizeValue(size).bytes();
  }
  int weightedSize=(int)Math.min(sizeInBytes / AbstractWeightedFilterCache.FilterCacheValueWeigher.FACTOR,Integer.MAX_VALUE);
  cache=new ConcurrentLinkedHashMap.Builder<AbstractWeightedFilterCache.FilterCacheKey,FilterCacheValue<DocSet>>().maximumWeightedCapacity(weightedSize).weigher(new AbstractWeightedFilterCache.FilterCacheValueWeigher()).listener(this).build();
  logger.debug("using [node] filter cache with size [{}]",new ByteSizeValue(sizeInBytes));
}
