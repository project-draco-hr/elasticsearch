{
  logger.info("--> start 2 nodes");
  internalCluster().startNode(settingsBuilder().put("gateway.type","local"));
  internalCluster().startNode(settingsBuilder().put("gateway.type","local"));
  cluster().wipeIndices("_all");
  assertAcked(prepareCreate("test-idx-1",2,settingsBuilder().put("number_of_shards",6).put("number_of_replicas",0).put(MockDirectoryHelper.RANDOM_NO_DELETE_OPEN_FILE,false)));
  ensureGreen();
  logger.info("--> indexing some data into test-idx-1");
  for (int i=0; i < 100; i++) {
    index("test-idx-1","doc",Integer.toString(i),"foo","bar" + i);
  }
  refresh();
  assertThat(client().prepareCount("test-idx-1").get().getCount(),equalTo(100L));
  logger.info("--> shutdown one of the nodes");
  internalCluster().stopRandomDataNode();
  assertThat(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout("1m").setWaitForNodes("<2").execute().actionGet().isTimedOut(),equalTo(false));
  assertAcked(prepareCreate("test-idx-2",1,settingsBuilder().put("number_of_shards",6).put("number_of_replicas",0).put(MockDirectoryHelper.RANDOM_NO_DELETE_OPEN_FILE,false)));
  ensureGreen("test-idx-2");
  logger.info("--> indexing some data into test-idx-2");
  for (int i=0; i < 100; i++) {
    index("test-idx-2","doc",Integer.toString(i),"foo","bar" + i);
  }
  refresh();
  assertThat(client().prepareCount("test-idx-2").get().getCount(),equalTo(100L));
  logger.info("--> create repository");
  logger.info("--> creating repository");
  PutRepositoryResponse putRepositoryResponse=client().admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location",newTempDir())).execute().actionGet();
  assertThat(putRepositoryResponse.isAcknowledged(),equalTo(true));
  logger.info("--> start snapshot with default settings - should fail");
  CreateSnapshotResponse createSnapshotResponse=client().admin().cluster().prepareCreateSnapshot("test-repo","test-snap-1").setWaitForCompletion(true).execute().actionGet();
  assertThat(createSnapshotResponse.getSnapshotInfo().state(),equalTo(SnapshotState.FAILED));
  if (randomBoolean()) {
    logger.info("checking snapshot completion using status");
    client().admin().cluster().prepareCreateSnapshot("test-repo","test-snap-2").setWaitForCompletion(false).setPartial(true).execute().actionGet();
    awaitBusy(new Predicate<Object>(){
      @Override public boolean apply(      Object o){
        SnapshotsStatusResponse snapshotsStatusResponse=client().admin().cluster().prepareSnapshotStatus("test-repo").setSnapshots("test-snap-2").get();
        ImmutableList<SnapshotStatus> snapshotStatuses=snapshotsStatusResponse.getSnapshots();
        if (snapshotStatuses.size() == 1) {
          logger.trace("current snapshot status [{}]",snapshotStatuses.get(0));
          return snapshotStatuses.get(0).getState().completed();
        }
        return false;
      }
    }
);
    SnapshotsStatusResponse snapshotsStatusResponse=client().admin().cluster().prepareSnapshotStatus("test-repo").setSnapshots("test-snap-2").get();
    ImmutableList<SnapshotStatus> snapshotStatuses=snapshotsStatusResponse.getSnapshots();
    assertThat(snapshotStatuses.size(),equalTo(1));
    SnapshotStatus snapshotStatus=snapshotStatuses.get(0);
    logger.info("State: [{}], Reason: [{}]",createSnapshotResponse.getSnapshotInfo().state(),createSnapshotResponse.getSnapshotInfo().reason());
    assertThat(snapshotStatus.getShardsStats().getTotalShards(),equalTo(12));
    assertThat(snapshotStatus.getShardsStats().getDoneShards(),lessThan(12));
    assertThat(snapshotStatus.getShardsStats().getDoneShards(),greaterThan(6));
  }
 else {
    logger.info("checking snapshot completion using wait_for_completion flag");
    createSnapshotResponse=client().admin().cluster().prepareCreateSnapshot("test-repo","test-snap-2").setWaitForCompletion(true).setPartial(true).execute().actionGet();
    logger.info("State: [{}], Reason: [{}]",createSnapshotResponse.getSnapshotInfo().state(),createSnapshotResponse.getSnapshotInfo().reason());
    assertThat(createSnapshotResponse.getSnapshotInfo().totalShards(),equalTo(12));
    assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),lessThan(12));
    assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),greaterThan(6));
  }
  assertThat(client().admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap-2").execute().actionGet().getSnapshots().get(0).state(),equalTo(SnapshotState.PARTIAL));
  assertAcked(client().admin().indices().prepareClose("test-idx-1","test-idx-2").execute().actionGet());
  logger.info("--> restore incomplete snapshot - should fail");
  assertThrows(client().admin().cluster().prepareRestoreSnapshot("test-repo","test-snap-2").setRestoreGlobalState(false).setWaitForCompletion(true).execute(),SnapshotRestoreException.class);
  logger.info("--> restore snapshot for the index that was snapshotted completely");
  RestoreSnapshotResponse restoreSnapshotResponse=client().admin().cluster().prepareRestoreSnapshot("test-repo","test-snap-2").setRestoreGlobalState(false).setIndices("test-idx-2").setWaitForCompletion(true).execute().actionGet();
  assertThat(restoreSnapshotResponse.getRestoreInfo(),notNullValue());
  assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(),equalTo(6));
  assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),equalTo(6));
  assertThat(restoreSnapshotResponse.getRestoreInfo().failedShards(),equalTo(0));
  ensureGreen("test-idx-2");
  assertThat(client().prepareCount("test-idx-2").get().getCount(),equalTo(100L));
}
