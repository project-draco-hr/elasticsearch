{
  logger.info("--> start 2 nodes");
  internalCluster().startNode();
  internalCluster().startNode();
  cluster().wipeIndices("_all");
  logger.info("--> create an index that will have some unallocated shards");
  assertAcked(prepareCreate("test-idx-some",2,settingsBuilder().put("number_of_shards",6).put("number_of_replicas",0)));
  ensureGreen();
  logger.info("--> indexing some data into test-idx-some");
  for (int i=0; i < 100; i++) {
    index("test-idx-some","doc",Integer.toString(i),"foo","bar" + i);
  }
  refresh();
  assertThat(client().prepareCount("test-idx-some").get().getCount(),equalTo(100L));
  logger.info("--> shutdown one of the nodes");
  internalCluster().stopRandomDataNode();
  assertThat(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout("1m").setWaitForNodes("<2").execute().actionGet().isTimedOut(),equalTo(false));
  logger.info("--> create an index that will have all allocated shards");
  assertAcked(prepareCreate("test-idx-all",1,settingsBuilder().put("number_of_shards",6).put("number_of_replicas",0)));
  ensureGreen("test-idx-all");
  logger.info("--> create an index that will be closed");
  assertAcked(prepareCreate("test-idx-closed",1,settingsBuilder().put("number_of_shards",4).put("number_of_replicas",0)));
  ensureGreen("test-idx-closed");
  logger.info("--> indexing some data into test-idx-all");
  for (int i=0; i < 100; i++) {
    index("test-idx-all","doc",Integer.toString(i),"foo","bar" + i);
    index("test-idx-closed","doc",Integer.toString(i),"foo","bar" + i);
  }
  refresh();
  assertThat(client().prepareCount("test-idx-all").get().getCount(),equalTo(100L));
  assertAcked(client().admin().indices().prepareClose("test-idx-closed"));
  logger.info("--> create an index that will have no allocated shards");
  assertAcked(prepareCreate("test-idx-none",1,settingsBuilder().put("number_of_shards",6).put("index.routing.allocation.include.tag","nowhere").put("number_of_replicas",0)));
  logger.info("--> create repository");
  logger.info("--> creating repository");
  PutRepositoryResponse putRepositoryResponse=client().admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location",createTempDir())).execute().actionGet();
  assertThat(putRepositoryResponse.isAcknowledged(),equalTo(true));
  logger.info("--> start snapshot with default settings - should fail");
  CreateSnapshotResponse createSnapshotResponse=client().admin().cluster().prepareCreateSnapshot("test-repo","test-snap-1").setIndices("test-idx-all","test-idx-none","test-idx-some","test-idx-closed").setWaitForCompletion(true).execute().actionGet();
  assertThat(createSnapshotResponse.getSnapshotInfo().state(),equalTo(SnapshotState.FAILED));
  assertThat(createSnapshotResponse.getSnapshotInfo().reason(),containsString("Indices don't have primary shards"));
  assertThat(createSnapshotResponse.getSnapshotInfo().reason(),containsString("; Indices are closed [test-idx-closed]"));
  if (randomBoolean()) {
    logger.info("checking snapshot completion using status");
    client().admin().cluster().prepareCreateSnapshot("test-repo","test-snap-2").setIndices("test-idx-all","test-idx-none","test-idx-some","test-idx-closed").setWaitForCompletion(false).setPartial(true).execute().actionGet();
    awaitBusy(new Predicate<Object>(){
      @Override public boolean apply(      Object o){
        SnapshotsStatusResponse snapshotsStatusResponse=client().admin().cluster().prepareSnapshotStatus("test-repo").setSnapshots("test-snap-2").get();
        ImmutableList<SnapshotStatus> snapshotStatuses=snapshotsStatusResponse.getSnapshots();
        if (snapshotStatuses.size() == 1) {
          logger.trace("current snapshot status [{}]",snapshotStatuses.get(0));
          return snapshotStatuses.get(0).getState().completed();
        }
        return false;
      }
    }
);
    SnapshotsStatusResponse snapshotsStatusResponse=client().admin().cluster().prepareSnapshotStatus("test-repo").setSnapshots("test-snap-2").get();
    ImmutableList<SnapshotStatus> snapshotStatuses=snapshotsStatusResponse.getSnapshots();
    assertThat(snapshotStatuses.size(),equalTo(1));
    SnapshotStatus snapshotStatus=snapshotStatuses.get(0);
    logger.info("State: [{}], Reason: [{}]",createSnapshotResponse.getSnapshotInfo().state(),createSnapshotResponse.getSnapshotInfo().reason());
    assertThat(snapshotStatus.getShardsStats().getTotalShards(),equalTo(22));
    assertThat(snapshotStatus.getShardsStats().getDoneShards(),lessThan(12));
    assertThat(snapshotStatus.getShardsStats().getDoneShards(),greaterThan(6));
    awaitBusy(new Predicate<Object>(){
      @Override public boolean apply(      Object o){
        GetSnapshotsResponse response=client().admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap-2").get();
        assertThat(response.getSnapshots().size(),equalTo(1));
        SnapshotInfo snapshotInfo=response.getSnapshots().get(0);
        if (snapshotInfo.state().completed()) {
          assertThat(snapshotInfo.state(),equalTo(SnapshotState.PARTIAL));
          return true;
        }
        return false;
      }
    }
);
  }
 else {
    logger.info("checking snapshot completion using wait_for_completion flag");
    createSnapshotResponse=client().admin().cluster().prepareCreateSnapshot("test-repo","test-snap-2").setIndices("test-idx-all","test-idx-none","test-idx-some","test-idx-closed").setWaitForCompletion(true).setPartial(true).execute().actionGet();
    logger.info("State: [{}], Reason: [{}]",createSnapshotResponse.getSnapshotInfo().state(),createSnapshotResponse.getSnapshotInfo().reason());
    assertThat(createSnapshotResponse.getSnapshotInfo().totalShards(),equalTo(22));
    assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),lessThan(12));
    assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),greaterThan(6));
    assertThat(client().admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap-2").execute().actionGet().getSnapshots().get(0).state(),equalTo(SnapshotState.PARTIAL));
  }
  assertAcked(client().admin().indices().prepareClose("test-idx-some","test-idx-all").execute().actionGet());
  logger.info("--> restore incomplete snapshot - should fail");
  assertThrows(client().admin().cluster().prepareRestoreSnapshot("test-repo","test-snap-2").setRestoreGlobalState(false).setWaitForCompletion(true).execute(),SnapshotRestoreException.class);
  logger.info("--> restore snapshot for the index that was snapshotted completely");
  RestoreSnapshotResponse restoreSnapshotResponse=client().admin().cluster().prepareRestoreSnapshot("test-repo","test-snap-2").setRestoreGlobalState(false).setIndices("test-idx-all").setWaitForCompletion(true).execute().actionGet();
  assertThat(restoreSnapshotResponse.getRestoreInfo(),notNullValue());
  assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(),equalTo(6));
  assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),equalTo(6));
  assertThat(restoreSnapshotResponse.getRestoreInfo().failedShards(),equalTo(0));
  assertThat(client().prepareCount("test-idx-all").get().getCount(),equalTo(100L));
  logger.info("--> restore snapshot for the partial index");
  cluster().wipeIndices("test-idx-some");
  restoreSnapshotResponse=client().admin().cluster().prepareRestoreSnapshot("test-repo","test-snap-2").setRestoreGlobalState(false).setIndices("test-idx-some").setPartial(true).setWaitForCompletion(true).get();
  assertThat(restoreSnapshotResponse.getRestoreInfo(),notNullValue());
  assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(),equalTo(6));
  assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),allOf(greaterThan(0),lessThan(6)));
  assertThat(restoreSnapshotResponse.getRestoreInfo().failedShards(),greaterThan(0));
  assertThat(client().prepareCount("test-idx-some").get().getCount(),allOf(greaterThan(0L),lessThan(100L)));
  logger.info("--> restore snapshot for the index that didn't have any shards snapshotted successfully");
  cluster().wipeIndices("test-idx-none");
  restoreSnapshotResponse=client().admin().cluster().prepareRestoreSnapshot("test-repo","test-snap-2").setRestoreGlobalState(false).setIndices("test-idx-none").setPartial(true).setWaitForCompletion(true).get();
  assertThat(restoreSnapshotResponse.getRestoreInfo(),notNullValue());
  assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(),equalTo(6));
  assertThat(restoreSnapshotResponse.getRestoreInfo().successfulShards(),equalTo(0));
  assertThat(restoreSnapshotResponse.getRestoreInfo().failedShards(),equalTo(6));
  assertThat(client().prepareCount("test-idx-some").get().getCount(),allOf(greaterThan(0L),lessThan(100L)));
}
