{
  logger.info("--> start 2 nodes");
  Client client=client();
  assertAcked(prepareCreate("test-idx",2,settingsBuilder().put("number_of_shards",2).put("number_of_replicas",0)));
  ensureGreen();
  logger.info("--> indexing some data");
  for (int i=0; i < 100; i++) {
    index("test-idx","doc",Integer.toString(i),"foo","bar" + i);
  }
  refresh();
  assertThat(client.prepareCount("test-idx").get().getCount(),equalTo(100L));
  logger.info("--> create repository");
  logger.info("--> creating repository");
  PutRepositoryResponse putRepositoryResponse=client.admin().cluster().preparePutRepository("test-repo").setType(MockRepositoryModule.class.getCanonicalName()).setSettings(ImmutableSettings.settingsBuilder().put("location",newTempDir(LifecycleScope.TEST)).put("random",randomAsciiOfLength(10)).put("wait_after_unblock",200)).get();
  assertThat(putRepositoryResponse.isAcknowledged(),equalTo(true));
  String blockedNode=blockNodeWithIndex("test-idx");
  logger.info("--> snapshot");
  client.admin().cluster().prepareCreateSnapshot("test-repo","test-snap").setWaitForCompletion(false).setIndices("test-idx").get();
  logger.info("--> waiting for block to kick in");
  waitForBlock(blockedNode,"test-repo",TimeValue.timeValueSeconds(60));
  logger.info("--> execution was blocked on node [{}], shutting it down",blockedNode);
  unblockNode(blockedNode);
  logger.info("--> stopping node",blockedNode);
  stopNode(blockedNode);
  logger.info("--> waiting for completion");
  SnapshotInfo snapshotInfo=waitForCompletion("test-repo","test-snap",TimeValue.timeValueSeconds(60));
  logger.info("Number of failed shards [{}]",snapshotInfo.shardFailures().size());
  logger.info("--> done");
}
