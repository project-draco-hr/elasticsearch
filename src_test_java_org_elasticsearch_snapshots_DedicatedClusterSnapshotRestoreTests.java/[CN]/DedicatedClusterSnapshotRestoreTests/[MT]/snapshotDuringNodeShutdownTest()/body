{
  logger.info("--> start 2 nodes");
  ArrayList<String> nodes=newArrayList();
  nodes.add(cluster().startNode());
  nodes.add(cluster().startNode());
  Client client=cluster().client();
  assertAcked(prepareCreate("test-idx",2,settingsBuilder().put("number_of_shards",2).put("number_of_replicas",0).put(MockDirectoryHelper.RANDOM_NO_DELETE_OPEN_FILE,false)));
  ensureGreen();
  logger.info("--> indexing some data");
  for (int i=0; i < 100; i++) {
    index("test-idx","doc",Integer.toString(i),"foo","bar" + i);
  }
  refresh();
  assertThat(run(client.prepareCount("test-idx")).getCount(),equalTo(100L));
  logger.info("--> create repository");
  logger.info("--> creating repository");
  PutRepositoryResponse putRepositoryResponse=run(client.admin().cluster().preparePutRepository("test-repo").setType(MockRepositoryModule.class.getCanonicalName()).setSettings(ImmutableSettings.settingsBuilder().put("location",newTempDir(LifecycleScope.TEST)).put("random",randomAsciiOfLength(10)).put("random_data_file_blocking_rate",0.1).put("wait_after_unblock",200)));
  assertThat(putRepositoryResponse.isAcknowledged(),equalTo(true));
  logger.info("--> snapshot");
  run(client.admin().cluster().prepareCreateSnapshot("test-repo","test-snap").setWaitForCompletion(false).setIndices("test-idx"));
  String blockedNode=waitForCompletionOrBlock(nodes,"test-repo","test-snap",TimeValue.timeValueSeconds(60));
  if (blockedNode != null) {
    logger.info("--> execution was blocked on node [{}], shutting it down",blockedNode);
    unblock("test-repo");
    logger.info("--> stopping node",blockedNode);
    stopNode(blockedNode);
    logger.info("--> waiting for completion");
    SnapshotInfo snapshotInfo=waitForCompletion("test-repo","test-snap",TimeValue.timeValueSeconds(60));
    logger.info("Number of failed shards [{}]",snapshotInfo.shardFailures().size());
    logger.info("--> done");
  }
 else {
    logger.info("--> done without blocks");
    ImmutableList<SnapshotInfo> snapshotInfos=run(client().admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap")).getSnapshots();
    assertThat(snapshotInfos.size(),equalTo(1));
    assertThat(snapshotInfos.get(0).state(),equalTo(SnapshotState.SUCCESS));
    assertThat(snapshotInfos.get(0).shardFailures().size(),equalTo(0));
  }
}
