{
  final Path srDir=createTempDir();
  final Store srStore=createStore(srDir);
  Lucene.cleanLuceneIndex(srStore.directory());
  final AtomicBoolean succeeded=new AtomicBoolean(false);
  final CountDownLatch latch=new CountDownLatch(1);
  Thread t=new Thread(new Runnable(){
    @Override public void run(){
      try {
        latch.await();
      }
 catch (      InterruptedException e) {
      }
      try (ShadowEngine srEngine=createShadowEngine(srStore)){
        succeeded.set(true);
      }
 catch (      Exception e) {
        fail("should have been able to create the engine!");
      }
    }
  }
);
  t.start();
  latch.countDown();
  Store pStore=createStore(srDir);
  FsTranslog pTranslog=createTranslog();
  InternalEngine pEngine=createInternalEngine(pStore,pTranslog);
  ParseContext.Document document=testDocumentWithTextField();
  document.add(new Field(SourceFieldMapper.NAME,B_1.toBytes(),SourceFieldMapper.Defaults.FIELD_TYPE));
  ParsedDocument doc=testParsedDocument("1","1","test",null,-1,-1,document,B_1,null);
  pEngine.create(new Engine.Create(null,newUid("1"),doc));
  pEngine.flush(true,true);
  t.join();
  assertTrue("ShadowEngine should have been able to be created",succeeded.get());
  IOUtils.close(srStore,pTranslog,pEngine,pStore);
}
