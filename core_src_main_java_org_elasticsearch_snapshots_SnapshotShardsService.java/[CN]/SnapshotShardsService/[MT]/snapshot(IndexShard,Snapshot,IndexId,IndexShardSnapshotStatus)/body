{
  Repository repository=snapshotsService.getRepositoriesService().repository(snapshot.getRepository());
  ShardId shardId=indexShard.shardId();
  if (!indexShard.routingEntry().primary()) {
    throw new IndexShardSnapshotFailedException(shardId,"snapshot should be performed only on primary");
  }
  if (indexShard.routingEntry().relocating()) {
    throw new IndexShardSnapshotFailedException(shardId,"cannot snapshot while relocating");
  }
  if (indexShard.state() == IndexShardState.CREATED || indexShard.state() == IndexShardState.RECOVERING) {
    throw new IndexShardSnapshotFailedException(shardId,"shard didn't fully recover yet");
  }
  try {
    IndexCommit snapshotIndexCommit=indexShard.snapshotIndex(true);
    try {
      repository.snapshotShard(indexShard,snapshot.getSnapshotId(),indexId,snapshotIndexCommit,snapshotStatus);
      if (logger.isDebugEnabled()) {
        StringBuilder sb=new StringBuilder();
        sb.append("    index    : version [").append(snapshotStatus.indexVersion()).append("], number_of_files [").append(snapshotStatus.numberOfFiles()).append("] with total_size [").append(new ByteSizeValue(snapshotStatus.totalSize())).append("]\n");
        logger.debug("snapshot ({}) completed to {}, took [{}]\n{}",snapshot,repository,TimeValue.timeValueMillis(snapshotStatus.time()),sb);
      }
    }
  finally {
      indexShard.releaseSnapshot(snapshotIndexCommit);
    }
  }
 catch (  SnapshotFailedEngineException e) {
    throw e;
  }
catch (  IndexShardSnapshotFailedException e) {
    throw e;
  }
catch (  Exception e) {
    throw new IndexShardSnapshotFailedException(shardId,"Failed to snapshot",e);
  }
}
