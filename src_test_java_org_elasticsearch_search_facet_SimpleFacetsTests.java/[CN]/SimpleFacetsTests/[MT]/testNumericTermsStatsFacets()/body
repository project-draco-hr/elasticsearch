{
  String mapping=jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("lField").field("type","long").endObject().startObject("dField").field("type","double").endObject().startObject("num").field("type","float").endObject().startObject("multi_num").field("type","integer").endObject().endObject().endObject().endObject().string();
  assertAcked(prepareCreate("test").addMapping("type1",mapping));
  ensureGreen();
  client().prepareIndex("test","type1").setSource(jsonBuilder().startObject().field("lField",100l).field("dField",100.1d).field("num",100.0).startArray("multi_num").value(1.0).value(2.0f).endArray().endObject()).execute().actionGet();
  client().prepareIndex("test","type1").setSource(jsonBuilder().startObject().field("lField",100l).field("dField",100.1d).field("num",200.0).startArray("multi_num").value(2.0).value(3.0f).endArray().endObject()).execute().actionGet();
  client().prepareIndex("test","type1").setSource(jsonBuilder().startObject().field("lField",200l).field("dField",200.2d).field("num",500.0).startArray("multi_num").value(5.0).value(6.0f).endArray().endObject()).execute().actionGet();
  flushAndRefresh();
  for (int i=0; i < numberOfRuns(); i++) {
    SearchResponse searchResponse=client().prepareSearch().setQuery(matchAllQuery()).addFacet(termsStatsFacet("stats1").keyField("lField").valueField("num")).addFacet(termsStatsFacet("stats2").keyField("dField").valueField("num")).execute().actionGet();
    if (searchResponse.getFailedShards() > 0) {
      logger.warn("Failed shards:");
      for (      ShardSearchFailure shardSearchFailure : searchResponse.getShardFailures()) {
        logger.warn("-> {}",shardSearchFailure);
      }
    }
    assertThat(searchResponse.getFailedShards(),equalTo(0));
    TermsStatsFacet facet=searchResponse.getFacets().facet("stats1");
    assertThat(facet.getEntries().size(),equalTo(2));
    assertThat(facet.getEntries().get(0).getTerm().string(),equalTo("100"));
    assertThat(facet.getEntries().get(0).getCount(),equalTo(2l));
    assertThat(facet.getEntries().get(0).getMin(),closeTo(100d,0.00001d));
    assertThat(facet.getEntries().get(0).getMax(),closeTo(200d,0.00001d));
    assertThat(facet.getEntries().get(0).getTotal(),closeTo(300d,0.00001d));
    assertThat(facet.getEntries().get(1).getTerm().string(),equalTo("200"));
    assertThat(facet.getEntries().get(1).getCount(),equalTo(1l));
    assertThat(facet.getEntries().get(1).getMin(),closeTo(500d,0.00001d));
    assertThat(facet.getEntries().get(1).getMax(),closeTo(500d,0.00001d));
    assertThat(facet.getEntries().get(1).getTotal(),closeTo(500d,0.00001d));
    facet=searchResponse.getFacets().facet("stats2");
    assertThat(facet.getEntries().size(),equalTo(2));
    assertThat(facet.getEntries().get(0).getTerm().string(),equalTo("100.1"));
    assertThat(facet.getEntries().get(0).getCount(),equalTo(2l));
    assertThat(facet.getEntries().get(0).getMin(),closeTo(100d,0.00001d));
    assertThat(facet.getEntries().get(0).getMax(),closeTo(200d,0.00001d));
    assertThat(facet.getEntries().get(0).getTotal(),closeTo(300d,0.00001d));
    assertThat(facet.getEntries().get(1).getTerm().string(),equalTo("200.2"));
    assertThat(facet.getEntries().get(1).getCount(),equalTo(1l));
    assertThat(facet.getEntries().get(1).getMin(),closeTo(500d,0.00001d));
    assertThat(facet.getEntries().get(1).getMax(),closeTo(500d,0.00001d));
    assertThat(facet.getEntries().get(1).getTotal(),closeTo(500d,0.00001d));
  }
}
