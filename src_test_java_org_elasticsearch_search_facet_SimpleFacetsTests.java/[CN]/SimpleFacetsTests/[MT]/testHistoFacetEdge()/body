{
  String mapping=jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("num").field("type","integer").endObject().endObject().endObject().endObject().string();
  assertAcked(prepareCreate("test").addMapping("type1",mapping));
  ensureGreen();
  client().prepareIndex("test","type1").setSource(jsonBuilder().startObject().field("num",100).endObject()).execute().actionGet();
  client().prepareIndex("test","type1").setSource(jsonBuilder().startObject().field("num",200).endObject()).execute().actionGet();
  client().prepareIndex("test","type1").setSource(jsonBuilder().startObject().field("num",300).endObject()).execute().actionGet();
  flushAndRefresh();
  for (int i=0; i < numberOfRuns(); i++) {
    SearchResponse searchResponse=client().prepareSearch().setQuery(matchAllQuery()).addFacet(histogramFacet("facet1").field("num").valueField("num").interval(100)).execute().actionGet();
    if (searchResponse.getFailedShards() > 0) {
      logger.warn("Failed shards:");
      for (      ShardSearchFailure shardSearchFailure : searchResponse.getShardFailures()) {
        logger.warn("-> {}",shardSearchFailure);
      }
    }
    assertSearchResponse(searchResponse);
    HistogramFacet facet=searchResponse.getFacets().facet("facet1");
    assertThat(facet.getName(),equalTo("facet1"));
    assertThat(facet.getEntries().size(),equalTo(3));
    assertThat(facet.getEntries().get(0).getKey(),equalTo(100l));
    assertThat(facet.getEntries().get(0).getCount(),equalTo(1l));
    assertThat(facet.getEntries().get(1).getKey(),equalTo(200l));
    assertThat(facet.getEntries().get(1).getCount(),equalTo(1l));
    assertThat(facet.getEntries().get(2).getKey(),equalTo(300l));
    assertThat(facet.getEntries().get(2).getCount(),equalTo(1l));
  }
}
