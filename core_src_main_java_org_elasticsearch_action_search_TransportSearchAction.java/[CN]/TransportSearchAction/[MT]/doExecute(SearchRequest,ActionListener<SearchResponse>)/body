{
  try {
    ClusterState clusterState=clusterService.state();
    String[] concreteIndices=indexNameExpressionResolver.concreteIndexNames(clusterState,searchRequest);
    Map<String,Set<String>> routingMap=indexNameExpressionResolver.resolveSearchRouting(clusterState,searchRequest.routing(),searchRequest.indices());
    int shardCount=clusterService.operationRouting().searchShardsCount(clusterState,concreteIndices,routingMap);
    boolean hasOnlySuggest=searchRequest.hasOnlySuggest();
    if (shardCount == 1) {
      searchRequest.searchType(QUERY_AND_FETCH);
    }
 else     if (hasOnlySuggest && (searchRequest.searchType() == DFS_QUERY_AND_FETCH || searchRequest.searchType() == DFS_QUERY_THEN_FETCH)) {
      searchRequest.searchType(QUERY_THEN_FETCH);
    }
    if (hasOnlySuggest && (searchRequest.requestCache() == null || searchRequest.requestCache())) {
      searchRequest.requestCache(false);
    }
  }
 catch (  IndexNotFoundException|IndexClosedException e) {
  }
catch (  Exception e) {
    logger.debug("failed to optimize search type, continue as normal",e);
  }
  AbstractSearchAsyncAction searchAsyncAction;
switch (searchRequest.searchType()) {
case DFS_QUERY_THEN_FETCH:
    searchAsyncAction=new SearchDfsQueryThenFetchAsyncAction(logger,searchTransportService,clusterService,indexNameExpressionResolver,searchPhaseController,threadPool,searchRequest,listener);
  break;
case QUERY_THEN_FETCH:
searchAsyncAction=new SearchQueryThenFetchAsyncAction(logger,searchTransportService,clusterService,indexNameExpressionResolver,searchPhaseController,threadPool,searchRequest,listener);
break;
case DFS_QUERY_AND_FETCH:
searchAsyncAction=new SearchDfsQueryAndFetchAsyncAction(logger,searchTransportService,clusterService,indexNameExpressionResolver,searchPhaseController,threadPool,searchRequest,listener);
break;
case QUERY_AND_FETCH:
searchAsyncAction=new SearchQueryAndFetchAsyncAction(logger,searchTransportService,clusterService,indexNameExpressionResolver,searchPhaseController,threadPool,searchRequest,listener);
break;
default :
throw new IllegalStateException("Unknown search type: [" + searchRequest.searchType() + "]");
}
searchAsyncAction.start();
}
