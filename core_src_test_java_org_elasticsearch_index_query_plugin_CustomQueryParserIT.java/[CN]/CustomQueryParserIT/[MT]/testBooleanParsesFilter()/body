{
  Query q=boolQuery().should(new DummyQueryBuilder()).must(new DummyQueryBuilder()).filter(new DummyQueryBuilder()).mustNot(new DummyQueryBuilder()).toQuery(queryShardContext());
  assertThat(q,instanceOf(BooleanQuery.class));
  BooleanQuery bq=(BooleanQuery)q;
  assertEquals(4,bq.clauses().size());
  for (  BooleanClause clause : bq.clauses()) {
    DummyQueryParserPlugin.DummyQuery dummy=(DummyQueryParserPlugin.DummyQuery)clause.getQuery();
switch (clause.getOccur()) {
case FILTER:
case MUST_NOT:
      assertEquals(true,dummy.isFilter);
    break;
case MUST:
case SHOULD:
  assertEquals(false,dummy.isFilter);
break;
default :
throw new AssertionError();
}
}
q=boolQuery().should(new DummyQueryBuilder()).should(new DummyQueryBuilder()).must(new DummyQueryBuilder()).must(new DummyQueryBuilder()).filter(new DummyQueryBuilder()).filter(new DummyQueryBuilder()).mustNot(new DummyQueryBuilder()).mustNot(new DummyQueryBuilder()).toQuery(queryShardContext());
assertThat(q,instanceOf(BooleanQuery.class));
bq=(BooleanQuery)q;
assertEquals(8,bq.clauses().size());
for (BooleanClause clause : bq.clauses()) {
DummyQueryParserPlugin.DummyQuery dummy=(DummyQueryParserPlugin.DummyQuery)clause.getQuery();
switch (clause.getOccur()) {
case FILTER:
case MUST_NOT:
assertEquals(true,dummy.isFilter);
break;
case MUST:
case SHOULD:
assertEquals(false,dummy.isFilter);
break;
default :
throw new AssertionError();
}
}
}
