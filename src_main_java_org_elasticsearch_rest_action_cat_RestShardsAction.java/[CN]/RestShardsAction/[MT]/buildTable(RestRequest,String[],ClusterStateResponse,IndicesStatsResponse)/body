{
  Table table=getTableWithHeader(request);
  Set<String> indices=Sets.newHashSet(concreteIndices);
  for (  ShardRouting shard : state.getState().routingTable().allShards()) {
    if (!indices.contains(shard.index())) {
      continue;
    }
    CommonStats shardStats=stats.asMap().get(shard);
    table.startRow();
    table.addCell(shard.index());
    table.addCell(shard.id());
    table.addCell(shard.primary() ? "p" : "r");
    table.addCell(shard.state());
    table.addCell(shardStats == null ? null : shardStats.getDocs().getCount());
    table.addCell(shardStats == null ? null : shardStats.getStore().getSize());
    if (shard.assignedToNode()) {
      String ip=((InetSocketTransportAddress)state.getState().nodes().get(shard.currentNodeId()).address()).address().getAddress().getHostAddress();
      StringBuilder name=new StringBuilder();
      name.append(state.getState().nodes().get(shard.currentNodeId()).name());
      if (shard.relocating()) {
        String reloIp=((InetSocketTransportAddress)state.getState().nodes().get(shard.relocatingNodeId()).address()).address().getAddress().getHostAddress();
        String reloNme=state.getState().nodes().get(shard.relocatingNodeId()).name();
        name.append(" -> ");
        name.append(reloIp);
        name.append(" ");
        name.append(reloNme);
      }
      table.addCell(ip);
      table.addCell(name);
    }
 else {
      table.addCell(null);
      table.addCell(null);
    }
    table.endRow();
  }
  return table;
}
