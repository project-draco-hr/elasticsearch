{
  boolean sigarLoaded=false;
  try {
    settings.getClassLoader().loadClass("org.hyperic.sigar.Sigar");
    SigarService sigarService=new SigarService(settings);
    if (sigarService.sigarAvailable()) {
      bind(SigarService.class).toInstance(sigarService);
      bind(ProcessProbe.class).to(SigarProcessProbe.class).asEagerSingleton();
      bind(OsProbe.class).to(SigarOsProbe.class).asEagerSingleton();
      bind(NetworkProbe.class).to(SigarNetworkProbe.class).asEagerSingleton();
      bind(FsProbe.class).to(SigarFsProbe.class).asEagerSingleton();
      sigarLoaded=true;
    }
  }
 catch (  Throwable e) {
    Loggers.getLogger(MonitorModule.class).trace("failed to load sigar",e);
  }
  if (!sigarLoaded) {
    bind(ProcessProbe.class).to(JmxProcessProbe.class).asEagerSingleton();
    bind(OsProbe.class).to(JmxOsProbe.class).asEagerSingleton();
    bind(NetworkProbe.class).to(JmxNetworkProbe.class).asEagerSingleton();
    bind(FsProbe.class).to(JmxFsProbe.class).asEagerSingleton();
  }
  bind(ProcessService.class).asEagerSingleton();
  bind(OsService.class).asEagerSingleton();
  bind(NetworkService.class).asEagerSingleton();
  bind(JvmService.class).asEagerSingleton();
  bind(FsService.class).asEagerSingleton();
  bind(JvmMonitorService.class).asEagerSingleton();
  MapBinder<String,DumpContributorFactory> tokenFilterBinder=MapBinder.newMapBinder(binder(),String.class,DumpContributorFactory.class);
  Map<String,Settings> dumpContSettings=settings.getGroups("monitor.dump");
  for (  Map.Entry<String,Settings> entry : dumpContSettings.entrySet()) {
    String dumpContributorName=entry.getKey();
    Settings dumpContributorSettings=entry.getValue();
    Class<? extends DumpContributorFactory> type=dumpContributorSettings.getAsClass("type",null,"org.elasticsearch.monitor.dump." + dumpContributorName + ".","DumpContributor");
    if (type == null) {
      throw new IllegalArgumentException("Dump Contributor [" + dumpContributorName + "] must have a type associated with it");
    }
    tokenFilterBinder.addBinding(dumpContributorName).toProvider(FactoryProvider.newFactory(DumpContributorFactory.class,type)).in(Scopes.SINGLETON);
  }
  if (!dumpContSettings.containsKey(SUMMARY)) {
    tokenFilterBinder.addBinding(SUMMARY).toProvider(FactoryProvider.newFactory(DumpContributorFactory.class,SummaryDumpContributor.class)).in(Scopes.SINGLETON);
  }
  if (!dumpContSettings.containsKey(THREAD_DUMP)) {
    tokenFilterBinder.addBinding(THREAD_DUMP).toProvider(FactoryProvider.newFactory(DumpContributorFactory.class,ThreadDumpContributor.class)).in(Scopes.SINGLETON);
  }
  if (!dumpContSettings.containsKey(HEAP_DUMP)) {
    tokenFilterBinder.addBinding(HEAP_DUMP).toProvider(FactoryProvider.newFactory(DumpContributorFactory.class,HeapDumpContributor.class)).in(Scopes.SINGLETON);
  }
  if (!dumpContSettings.containsKey(CLUSTER)) {
    tokenFilterBinder.addBinding(CLUSTER).toProvider(FactoryProvider.newFactory(DumpContributorFactory.class,ClusterDumpContributor.class)).in(Scopes.SINGLETON);
  }
  bind(DumpMonitorService.class).asEagerSingleton();
}
