{
  boolean[] trackScores=new boolean[]{true,false};
  for (  boolean trackScore : trackScores) {
    logger.info("Track score={}",trackScore);
    SearchResponse response=client().prepareSearch("idx").setTypes("field-collapsing").setQuery(matchQuery("text","term rare")).addAggregation(terms("terms").field("group").subAggregation(topHits("hits").trackScores(trackScore).size(1).sort("_id",SortOrder.DESC))).get();
    assertSearchResponse(response);
    Terms terms=response.getAggregations().get("terms");
    assertThat(terms,notNullValue());
    assertThat(terms.getName(),equalTo("terms"));
    assertThat(terms.getBuckets().size(),equalTo(3));
    Terms.Bucket bucket=terms.getBucketByKey("a");
    assertThat(key(bucket),equalTo("a"));
    TopHits topHits=bucket.getAggregations().get("hits");
    SearchHits hits=topHits.getHits();
    assertThat(hits.getMaxScore(),trackScore ? not(equalTo(Float.NaN)) : equalTo(Float.NaN));
    assertThat(hits.getAt(0).score(),trackScore ? not(equalTo(Float.NaN)) : equalTo(Float.NaN));
    bucket=terms.getBucketByKey("b");
    assertThat(key(bucket),equalTo("b"));
    topHits=bucket.getAggregations().get("hits");
    hits=topHits.getHits();
    assertThat(hits.getMaxScore(),trackScore ? not(equalTo(Float.NaN)) : equalTo(Float.NaN));
    assertThat(hits.getAt(0).score(),trackScore ? not(equalTo(Float.NaN)) : equalTo(Float.NaN));
    bucket=terms.getBucketByKey("c");
    assertThat(key(bucket),equalTo("c"));
    topHits=bucket.getAggregations().get("hits");
    hits=topHits.getHits();
    assertThat(hits.getMaxScore(),trackScore ? not(equalTo(Float.NaN)) : equalTo(Float.NaN));
    assertThat(hits.getAt(0).score(),trackScore ? not(equalTo(Float.NaN)) : equalTo(Float.NaN));
  }
}
