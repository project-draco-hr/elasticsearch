{
  int size=randomIntBetween(1,10);
  int from=randomIntBetween(0,10);
  SearchResponse response=client().prepareSearch("idx").setTypes("type").addAggregation(terms("terms").executionHint(randomExecutionHint()).field(TERMS_AGGS_FIELD).subAggregation(topHits("hits").sort(SortBuilders.fieldSort(SORT_FIELD).order(SortOrder.DESC)).from(from).size(size))).get();
  assertSearchResponse(response);
  SearchResponse control=client().prepareSearch("idx").setTypes("type").setFrom(from).setSize(size).setPostFilter(QueryBuilders.termQuery(TERMS_AGGS_FIELD,"val0")).addSort(SORT_FIELD,SortOrder.DESC).get();
  assertSearchResponse(control);
  SearchHits controlHits=control.getHits();
  Terms terms=response.getAggregations().get("terms");
  assertThat(terms,notNullValue());
  assertThat(terms.getName(),equalTo("terms"));
  assertThat(terms.getBuckets().size(),equalTo(5));
  Terms.Bucket bucket=terms.getBucketByKey("val0");
  assertThat(bucket,notNullValue());
  assertThat(bucket.getDocCount(),equalTo(10L));
  TopHits topHits=bucket.getAggregations().get("hits");
  SearchHits hits=topHits.getHits();
  assertThat(hits.totalHits(),equalTo(controlHits.totalHits()));
  assertThat(hits.getHits().length,equalTo(controlHits.getHits().length));
  for (int i=0; i < hits.getHits().length; i++) {
    logger.info(i + ": top_hits: [" + hits.getAt(i).id()+ "]["+ hits.getAt(i).sortValues()[0]+ "] control: ["+ controlHits.getAt(i).id()+ "]["+ controlHits.getAt(i).sortValues()[0]+ "]");
    assertThat(hits.getAt(i).id(),equalTo(controlHits.getAt(i).id()));
    assertThat(hits.getAt(i).sortValues()[0],equalTo(controlHits.getAt(i).sortValues()[0]));
  }
}
