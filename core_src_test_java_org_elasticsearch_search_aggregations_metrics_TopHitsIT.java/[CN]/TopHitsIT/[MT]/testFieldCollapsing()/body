{
  SearchResponse response=client().prepareSearch("idx").setTypes("field-collapsing").setSearchType(SearchType.DFS_QUERY_THEN_FETCH).setQuery(matchQuery("text","term rare")).addAggregation(terms("terms").executionHint(randomExecutionHint()).field("group").order(Terms.Order.aggregation("max_score",false)).subAggregation(topHits("hits").size(1)).subAggregation(max("max_score").field("value"))).get();
  assertSearchResponse(response);
  Terms terms=response.getAggregations().get("terms");
  assertThat(terms,notNullValue());
  assertThat(terms.getName(),equalTo("terms"));
  assertThat(terms.getBuckets().size(),equalTo(3));
  Iterator<Terms.Bucket> bucketIterator=terms.getBuckets().iterator();
  Terms.Bucket bucket=bucketIterator.next();
  assertThat(key(bucket),equalTo("b"));
  TopHits topHits=bucket.getAggregations().get("hits");
  SearchHits hits=topHits.getHits();
  assertThat(hits.totalHits(),equalTo(4L));
  assertThat(hits.getHits().length,equalTo(1));
  assertThat(hits.getAt(0).id(),equalTo("6"));
  bucket=bucketIterator.next();
  assertThat(key(bucket),equalTo("c"));
  topHits=bucket.getAggregations().get("hits");
  hits=topHits.getHits();
  assertThat(hits.totalHits(),equalTo(3L));
  assertThat(hits.getHits().length,equalTo(1));
  assertThat(hits.getAt(0).id(),equalTo("9"));
  bucket=bucketIterator.next();
  assertThat(key(bucket),equalTo("a"));
  topHits=bucket.getAggregations().get("hits");
  hits=topHits.getHits();
  assertThat(hits.totalHits(),equalTo(2L));
  assertThat(hits.getHits().length,equalTo(1));
  assertThat(hits.getAt(0).id(),equalTo("2"));
}
