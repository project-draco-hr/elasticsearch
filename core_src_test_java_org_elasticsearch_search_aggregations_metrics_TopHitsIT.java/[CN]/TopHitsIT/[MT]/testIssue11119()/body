{
  SearchResponse response=client().prepareSearch("idx").setTypes("field-collapsing").setSize(0).setQuery(matchQuery("text","x y z")).addAggregation(terms("terms").executionHint(randomExecutionHint()).field("group").subAggregation(topHits("hits"))).get();
  assertSearchResponse(response);
  assertThat(response.getHits().getTotalHits(),equalTo(8L));
  assertThat(response.getHits().hits().length,equalTo(0));
  assertThat(response.getHits().maxScore(),equalTo(0f));
  Terms terms=response.getAggregations().get("terms");
  assertThat(terms,notNullValue());
  assertThat(terms.getName(),equalTo("terms"));
  assertThat(terms.getBuckets().size(),equalTo(3));
  for (  Terms.Bucket bucket : terms.getBuckets()) {
    assertThat(bucket,notNullValue());
    TopHits topHits=bucket.getAggregations().get("hits");
    SearchHits hits=topHits.getHits();
    float bestScore=Float.MAX_VALUE;
    for (int h=0; h < hits.getHits().length; h++) {
      float score=hits.getAt(h).getScore();
      assertThat(score,lessThanOrEqualTo(bestScore));
      assertThat(score,greaterThan(0f));
      bestScore=hits.getAt(h).getScore();
    }
  }
  response=client().prepareSearch("idx").setTypes("field-collapsing").setSize(0).setMinScore(0.0001f).setQuery(matchQuery("text","x y z")).addAggregation(terms("terms").executionHint(randomExecutionHint()).field("group")).get();
  assertSearchResponse(response);
  assertThat(response.getHits().getTotalHits(),equalTo(8L));
  assertThat(response.getHits().hits().length,equalTo(0));
  assertThat(response.getHits().maxScore(),equalTo(0f));
  terms=response.getAggregations().get("terms");
  assertThat(terms,notNullValue());
  assertThat(terms.getName(),equalTo("terms"));
  assertThat(terms.getBuckets().size(),equalTo(3));
}
