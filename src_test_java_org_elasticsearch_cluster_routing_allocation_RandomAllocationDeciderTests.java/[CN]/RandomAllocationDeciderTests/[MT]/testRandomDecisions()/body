{
  RandomAllocationDecider randomAllocationDecider=new RandomAllocationDecider(getRandom());
  AllocationService strategy=new AllocationService(settingsBuilder().build(),new AllocationDeciders(ImmutableSettings.EMPTY,new HashSet<>(Arrays.asList(new SameShardAllocationDecider(ImmutableSettings.EMPTY),randomAllocationDecider))),new ShardsAllocators(),ClusterInfoService.EMPTY);
  int indices=between(1,20);
  Builder metaBuilder=MetaData.builder();
  int maxNumReplicas=1;
  int totalNumShards=0;
  for (int i=0; i < indices; i++) {
    int replicas=between(0,6);
    maxNumReplicas=Math.max(maxNumReplicas,replicas + 1);
    int numShards=between(1,20);
    totalNumShards+=numShards * (replicas + 1);
    metaBuilder.put(IndexMetaData.builder("INDEX_" + i).numberOfShards(numShards).numberOfReplicas(replicas));
  }
  MetaData metaData=metaBuilder.build();
  RoutingTable.Builder routingTableBuilder=RoutingTable.builder();
  for (int i=0; i < indices; i++) {
    routingTableBuilder.addAsNew(metaData.index("INDEX_" + i));
  }
  RoutingTable routingTable=routingTableBuilder.build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build();
  int numIters=scaledRandomIntBetween(10,30);
  int nodeIdCounter=0;
  int atMostNodes=between(Math.max(1,maxNumReplicas),numIters);
  final boolean frequentNodes=randomBoolean();
  for (int i=0; i < numIters; i++) {
    ClusterState.Builder stateBuilder=ClusterState.builder(clusterState);
    DiscoveryNodes.Builder newNodesBuilder=DiscoveryNodes.builder(clusterState.nodes());
    if (clusterState.nodes().size() <= atMostNodes && (nodeIdCounter == 0 || (frequentNodes ? frequently() : rarely()))) {
      int numNodes=between(1,3);
      for (int j=0; j < numNodes; j++) {
        logger.info("adding node [{}]",nodeIdCounter);
        newNodesBuilder.put(newNode("NODE_" + (nodeIdCounter++)));
      }
    }
    if (nodeIdCounter > 1 && rarely()) {
      int nodeId=between(0,nodeIdCounter - 2);
      logger.info("removing node [{}]",nodeId);
      newNodesBuilder.remove("NODE_" + nodeId);
    }
    stateBuilder.nodes(newNodesBuilder.build());
    clusterState=stateBuilder.build();
    routingTable=strategy.reroute(clusterState).routingTable();
    clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
    if (clusterState.routingNodes().shardsWithState(INITIALIZING).size() > 0) {
      routingTable=strategy.applyStartedShards(clusterState,clusterState.routingNodes().shardsWithState(INITIALIZING)).routingTable();
      clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
    }
  }
  logger.info("Fill up nodes such that every shard can be allocated");
  if (clusterState.nodes().size() < maxNumReplicas) {
    ClusterState.Builder stateBuilder=ClusterState.builder(clusterState);
    DiscoveryNodes.Builder newNodesBuilder=DiscoveryNodes.builder(clusterState.nodes());
    for (int j=0; j < (maxNumReplicas - clusterState.nodes().size()); j++) {
      logger.info("adding node [{}]",nodeIdCounter);
      newNodesBuilder.put(newNode("NODE_" + (nodeIdCounter++)));
    }
    stateBuilder.nodes(newNodesBuilder.build());
    clusterState=stateBuilder.build();
  }
  randomAllocationDecider.allwaysSayYes=true;
  logger.info("now say YES to everything");
  int iterations=0;
  do {
    iterations++;
    routingTable=strategy.reroute(clusterState).routingTable();
    clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
    if (clusterState.routingNodes().shardsWithState(INITIALIZING).size() > 0) {
      routingTable=strategy.applyStartedShards(clusterState,clusterState.routingNodes().shardsWithState(INITIALIZING)).routingTable();
      clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
    }
  }
 while (clusterState.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size() != 0 || clusterState.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED).size() != 0 && iterations < 200);
  logger.info("Done Balancing after [{}] iterations",iterations);
  assertThat("max num iteration exceeded",iterations,Matchers.lessThan(200));
  assertThat(clusterState.routingNodes().shardsWithState(ShardRoutingState.INITIALIZING).size(),equalTo(0));
  assertThat(clusterState.routingNodes().shardsWithState(ShardRoutingState.UNASSIGNED).size(),equalTo(0));
  int shards=clusterState.routingNodes().shardsWithState(ShardRoutingState.STARTED).size();
  assertThat(shards,equalTo(totalNumShards));
  final int numNodes=clusterState.nodes().size();
  final int upperBound=(int)Math.round(((shards / numNodes) * 1.10));
  final int lowerBound=(int)Math.round(((shards / numNodes) * 0.90));
  for (int i=0; i < nodeIdCounter; i++) {
    if (clusterState.getRoutingNodes().node("NODE_" + i) == null) {
      continue;
    }
    assertThat(clusterState.getRoutingNodes().node("NODE_" + i).size(),Matchers.anyOf(Matchers.anyOf(equalTo((shards / numNodes) + 1),equalTo((shards / numNodes) - 1),equalTo((shards / numNodes))),Matchers.allOf(Matchers.greaterThanOrEqualTo(lowerBound),Matchers.lessThanOrEqualTo(upperBound))));
  }
}
