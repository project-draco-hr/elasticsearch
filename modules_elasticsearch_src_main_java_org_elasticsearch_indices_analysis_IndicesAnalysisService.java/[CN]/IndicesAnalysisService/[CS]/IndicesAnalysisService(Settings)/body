{
  super(settings);
  analyzerProviderFactories.put("standard",new PreBuiltAnalyzerProviderFactory("standard",AnalyzerScope.INDICES,new StandardAnalyzer(Lucene.ANALYZER_VERSION)));
  analyzerProviderFactories.put("keyword",new PreBuiltAnalyzerProviderFactory("keyword",AnalyzerScope.INDICES,new KeywordAnalyzer()));
  analyzerProviderFactories.put("stop",new PreBuiltAnalyzerProviderFactory("stop",AnalyzerScope.INDICES,new StopAnalyzer(Lucene.ANALYZER_VERSION)));
  analyzerProviderFactories.put("whitespace",new PreBuiltAnalyzerProviderFactory("whitespace",AnalyzerScope.INDICES,new WhitespaceAnalyzer()));
  analyzerProviderFactories.put("simple",new PreBuiltAnalyzerProviderFactory("simple",AnalyzerScope.INDICES,new SimpleAnalyzer()));
  analyzerProviderFactories.put("arabic",new PreBuiltAnalyzerProviderFactory("arabic",AnalyzerScope.INDICES,new ArabicAnalyzer(Lucene.ANALYZER_VERSION)));
  analyzerProviderFactories.put("brazilian",new PreBuiltAnalyzerProviderFactory("brazilian",AnalyzerScope.INDICES,new BrazilianAnalyzer(Lucene.ANALYZER_VERSION)));
  analyzerProviderFactories.put("chinese",new PreBuiltAnalyzerProviderFactory("chinese",AnalyzerScope.INDICES,new ChineseAnalyzer()));
  analyzerProviderFactories.put("cjk",new PreBuiltAnalyzerProviderFactory("cjk",AnalyzerScope.INDICES,new ChineseAnalyzer()));
  analyzerProviderFactories.put("czech",new PreBuiltAnalyzerProviderFactory("czech",AnalyzerScope.INDICES,new CzechAnalyzer(Lucene.ANALYZER_VERSION)));
  analyzerProviderFactories.put("dutch",new PreBuiltAnalyzerProviderFactory("dutch",AnalyzerScope.INDICES,new DutchAnalyzer(Lucene.ANALYZER_VERSION)));
  analyzerProviderFactories.put("french",new PreBuiltAnalyzerProviderFactory("french",AnalyzerScope.INDICES,new FrenchAnalyzer(Lucene.ANALYZER_VERSION)));
  analyzerProviderFactories.put("german",new PreBuiltAnalyzerProviderFactory("german",AnalyzerScope.INDICES,new GermanAnalyzer(Lucene.ANALYZER_VERSION)));
  analyzerProviderFactories.put("greek",new PreBuiltAnalyzerProviderFactory("greek",AnalyzerScope.INDICES,new GreekAnalyzer(Lucene.ANALYZER_VERSION)));
  analyzerProviderFactories.put("persian",new PreBuiltAnalyzerProviderFactory("persian",AnalyzerScope.INDICES,new PersianAnalyzer(Lucene.ANALYZER_VERSION)));
  analyzerProviderFactories.put("russian",new PreBuiltAnalyzerProviderFactory("russian",AnalyzerScope.INDICES,new RussianAnalyzer(Lucene.ANALYZER_VERSION)));
  analyzerProviderFactories.put("thai",new PreBuiltAnalyzerProviderFactory("thai",AnalyzerScope.INDICES,new ThaiAnalyzer(Lucene.ANALYZER_VERSION)));
}
