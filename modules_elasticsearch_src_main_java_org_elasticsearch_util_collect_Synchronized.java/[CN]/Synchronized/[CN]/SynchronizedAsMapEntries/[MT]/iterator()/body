{
  final Iterator<Map.Entry<K,Collection<V>>> iterator=super.iterator();
  return new ForwardingIterator<Map.Entry<K,Collection<V>>>(){
    @Override protected Iterator<Map.Entry<K,Collection<V>>> delegate(){
      return iterator;
    }
    @Override public Map.Entry<K,Collection<V>> next(){
      final Map.Entry<K,Collection<V>> entry=iterator.next();
      return new ForwardingMapEntry<K,Collection<V>>(){
        @Override protected Map.Entry<K,Collection<V>> delegate(){
          return entry;
        }
        @Override public Collection<V> getValue(){
          return typePreservingCollection(entry.getValue(),mutex);
        }
      }
;
    }
  }
;
}
