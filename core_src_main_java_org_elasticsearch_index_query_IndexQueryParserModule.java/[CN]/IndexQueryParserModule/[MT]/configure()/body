{
  bind(IndexQueryParserService.class).asEagerSingleton();
  bind(InnerHitsQueryParserHelper.class).asEagerSingleton();
  MapBinder<String,QueryParserFactory> queryBinder=MapBinder.newMapBinder(binder(),String.class,QueryParserFactory.class);
  Map<String,Settings> xContentQueryParserGroups=settings.getGroups(IndexQueryParserService.Defaults.QUERY_PREFIX);
  for (  Map.Entry<String,Settings> entry : xContentQueryParserGroups.entrySet()) {
    String qName=entry.getKey();
    Settings qSettings=entry.getValue();
    Class<? extends QueryParser> type=qSettings.getAsClass("type",null);
    if (type == null) {
      throw new IllegalArgumentException("Query Parser [" + qName + "] must be provided with a type");
    }
    queryBinder.addBinding(qName).toProvider(FactoryProvider.newFactory(QueryParserFactory.class,qSettings.getAsClass("type",null))).in(Scopes.SINGLETON);
  }
  QueryParsersProcessor.XContentQueryParsersBindings xContentQueryParsersBindings=new QueryParsersProcessor.XContentQueryParsersBindings(queryBinder,xContentQueryParserGroups);
  for (  QueryParsersProcessor processor : processors) {
    processor.processXContentQueryParsers(xContentQueryParsersBindings);
  }
  for (  Map.Entry<String,Class<? extends QueryParser>> entry : queries.entrySet()) {
    queryBinder.addBinding(entry.getKey()).toProvider(FactoryProvider.newFactory(QueryParserFactory.class,entry.getValue())).in(Scopes.SINGLETON);
  }
}
