{
  XContentParser parser=parseContext.parser();
  String fieldName=null;
  List<Object> values=null;
  String minShouldMatch=null;
  boolean disableCoord=TermsQueryBuilder.DEFAULT_DISABLE_COORD;
  TermsLookup termsLookup=null;
  String queryName=null;
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  XContentParser.Token token;
  String currentFieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (parseContext.isDeprecatedSetting(currentFieldName)) {
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if (fieldName != null) {
        throw new ParsingException(parseContext,"[terms] query does not support multiple fields");
      }
      fieldName=currentFieldName;
      values=parseValues(parseContext,parser);
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      fieldName=currentFieldName;
      termsLookup=TermsLookup.parseTermsLookup(parseContext,parser);
    }
 else     if (token.isValue()) {
      if (parseContext.parseFieldMatcher().match(currentFieldName,EXECUTION_FIELD)) {
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,MIN_SHOULD_MATCH_FIELD)) {
        if (minShouldMatch != null) {
          throw new IllegalArgumentException("[" + currentFieldName + "] is not allowed in a filter context for the ["+ TermsQueryBuilder.NAME+ "] query");
        }
        minShouldMatch=parser.textOrNull();
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=parser.floatValue();
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,DISABLE_COORD_FIELD)) {
        disableCoord=parser.booleanValue();
      }
 else       if ("_name".equals(currentFieldName)) {
        queryName=parser.text();
      }
 else {
        throw new ParsingException(parseContext,"[terms] query does not support [" + currentFieldName + "]");
      }
    }
  }
  if (fieldName == null) {
    throw new ParsingException(parseContext,"terms query requires a field name, followed by array of terms or a document lookup specification");
  }
  return new TermsQueryBuilder(fieldName,values,minShouldMatch,disableCoord,termsLookup).boost(boost).queryName(queryName);
}
