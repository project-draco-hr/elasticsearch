{
  final ExpressionContext exprctx=ctx.expression();
  final AfterthoughtContext atctx=ctx.afterthought();
  final Branch branch=utility.markBranch(ctx,exprctx);
  final Label start=new Label();
  branch.begin=atctx == null ? start : new Label();
  branch.end=new Label();
  branch.fals=branch.end;
  utility.pushJump(branch);
  if (ctx.initializer() != null) {
    writer.visit(ctx.initializer());
  }
  execute.mark(start);
  if (exprctx != null) {
    writer.visit(exprctx);
  }
  final BlockContext blockctx=ctx.block();
  boolean allLast=false;
  if (blockctx != null) {
    StatementMetadata blocksmd=metadata.getStatementMetadata(blockctx);
    allLast=blocksmd.allLast;
    int count=blocksmd.count > 0 ? blocksmd.count : 1;
    if (atctx != null) {
      ++count;
    }
    writeLoopCounter(count);
    writer.visit(blockctx);
  }
 else   if (ctx.empty() != null) {
    writeLoopCounter(1);
  }
 else {
    throw new IllegalStateException(WriterUtility.error(ctx) + "Unexpected state.");
  }
  if (atctx != null) {
    execute.mark(branch.begin);
    writer.visit(atctx);
  }
  if (atctx != null || !allLast) {
    execute.goTo(start);
  }
  execute.mark(branch.end);
  utility.popJump();
}
