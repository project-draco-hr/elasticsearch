{
  XContentParser parser=parseContext.parser();
  Query query=null;
  Filter filter=null;
  float boost=1.0f;
  String scope=null;
  String path=null;
  BlockJoinQuery.ScoreMode scoreMode=BlockJoinQuery.ScoreMode.Avg;
  LateBindingParentFilter currentParentFilterContext=parentFilterContext.get();
  LateBindingParentFilter usAsParentFilter=new LateBindingParentFilter();
  parentFilterContext.set(usAsParentFilter);
  String currentFieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("query".equals(currentFieldName)) {
        query=parseContext.parseInnerQuery();
      }
 else       if ("filter".equals(currentFieldName)) {
        filter=parseContext.parseInnerFilter();
      }
    }
 else     if (token.isValue()) {
      if ("path".equals(currentFieldName)) {
        path=parser.text();
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=parser.floatValue();
      }
 else       if ("_scope".equals(currentFieldName)) {
        scope=parser.text();
      }
 else       if ("score_mode".equals(currentFieldName) || "scoreMode".equals(scoreMode)) {
        String sScoreMode=parser.text();
        if ("avg".equals(sScoreMode)) {
          scoreMode=BlockJoinQuery.ScoreMode.Avg;
        }
 else         if ("max".equals(sScoreMode)) {
          scoreMode=BlockJoinQuery.ScoreMode.Max;
        }
 else         if ("total".equals(sScoreMode)) {
          scoreMode=BlockJoinQuery.ScoreMode.Total;
        }
 else         if ("none".equals(sScoreMode)) {
          scoreMode=BlockJoinQuery.ScoreMode.None;
        }
 else {
          throw new QueryParsingException(parseContext.index(),"illegal score_mode for nested query [" + sScoreMode + "]");
        }
      }
    }
  }
  if (query == null && filter == null) {
    throw new QueryParsingException(parseContext.index(),"[nested] requires either 'query' or 'filter' field");
  }
  if (path == null) {
    throw new QueryParsingException(parseContext.index(),"[nested] requires 'path' field");
  }
  if (filter != null) {
    query=new DeletionAwareConstantScoreQuery(filter);
  }
  query.setBoost(boost);
  MapperService.SmartNameObjectMapper mapper=parseContext.mapperService().smartNameObjectMapper(path);
  if (mapper == null) {
    throw new QueryParsingException(parseContext.index(),"[nested] failed to find nested object under path [" + path + "]");
  }
  ObjectMapper objectMapper=mapper.mapper();
  if (objectMapper == null) {
    throw new QueryParsingException(parseContext.index(),"[nested] failed to find nested object under path [" + path + "]");
  }
  if (!objectMapper.nested().isNested()) {
    throw new QueryParsingException(parseContext.index(),"[nested] nested object under path [" + path + "] is not of nested type");
  }
  Filter childFilter=parseContext.cacheFilter(objectMapper.nestedTypeFilter(),null);
  usAsParentFilter.filter=childFilter;
  query=new FilteredQuery(query,childFilter);
  Filter parentFilter=currentParentFilterContext;
  if (parentFilter == null) {
    parentFilter=NonNestedDocsFilter.INSTANCE;
    if (mapper.hasDocMapper()) {
      parentFilter=mapper.docMapper().typeFilter();
    }
    parentFilter=parseContext.cacheFilter(parentFilter,null);
  }
  parentFilterContext.set(currentParentFilterContext);
  BlockJoinQuery joinQuery=new BlockJoinQuery(query,parentFilter,scoreMode);
  if (scope != null) {
    SearchContext.current().addNestedQuery(scope,joinQuery);
  }
  return joinQuery;
}
