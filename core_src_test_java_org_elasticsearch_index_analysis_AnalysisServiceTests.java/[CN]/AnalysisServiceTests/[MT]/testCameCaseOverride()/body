{
  Settings settings=Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(),createTempDir().toString()).build();
  Settings indexSettings=settingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED,Version.CURRENT).put("index.analysis.filter.wordDelimiter.type","word_delimiter").put("index.analysis.filter.wordDelimiter.split_on_numerics",false).put("index.analysis.analyzer.custom_analyzer.tokenizer","whitespace").putArray("index.analysis.analyzer.custom_analyzer.filter","lowercase","wordDelimiter").put("index.analysis.analyzer.custom_analyzer_1.tokenizer","whitespace").putArray("index.analysis.analyzer.custom_analyzer_1.filter","lowercase","word_delimiter").build();
  IndexSettings idxSettings=IndexSettingsModule.newIndexSettings(new Index("index"),indexSettings);
  AnalysisService analysisService=new AnalysisRegistry(null,new Environment(settings)).build(idxSettings);
  TokenFilterFactory word_delimiter=analysisService.tokenFilter("word_delimiter");
  TokenFilterFactory override=analysisService.tokenFilter("wordDelimiter");
  assertNotEquals(word_delimiter.name(),override.name());
  assertNotSame(analysisService.tokenFilter("wordDelimiter"),analysisService.tokenFilter("word_delimiter"));
  assertSame(analysisService.tokenFilter("porterStem"),analysisService.tokenFilter("porter_stem"));
  IndexSettings idxSettings1=IndexSettingsModule.newIndexSettings(new Index("index"),settingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED,Version.CURRENT).build());
  AnalysisService analysisService1=new AnalysisRegistry(null,new Environment(settings)).build(idxSettings1);
  assertSame(analysisService1.tokenFilter("wordDelimiter"),analysisService1.tokenFilter("word_delimiter"));
  assertSame(analysisService1.tokenFilter("porterStem"),analysisService1.tokenFilter("porter_stem"));
}
