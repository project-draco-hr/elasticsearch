{
  client().admin().indices().prepareCreate("test").execute().actionGet();
  ensureGreen();
  logger.info("--> register a query");
  client().prepareIndex("test","_percolator","1").setSource(jsonBuilder().startObject().field("query",matchAllQuery()).endObject()).execute().actionGet();
  client().admin().indices().prepareRefresh("test").execute().actionGet();
  logger.info("--> First percolate request");
  PercolateResponse response=client().preparePercolate("test","type").setSource(jsonBuilder().startObject().startObject("doc").field("field","val").endObject().endObject()).execute().actionGet();
  assertThat(response.getMatches(),arrayWithSize(1));
  assertThat(convertFromTextArray(response.getMatches()),arrayContaining("1"));
  IndicesStatsResponse indicesResponse=client().admin().indices().prepareStats("test").execute().actionGet();
  assertThat(indicesResponse.getTotal().getPercolate().getCount(),equalTo(5l));
  assertThat(indicesResponse.getTotal().getPercolate().getCurrent(),equalTo(0l));
  NodesStatsResponse nodesResponse=client().admin().cluster().prepareNodesStats().execute().actionGet();
  long percolateCount=0;
  for (  NodeStats nodeStats : nodesResponse) {
    percolateCount+=nodeStats.getIndices().getPercolate().getCount();
  }
  assertThat(percolateCount,equalTo(5l));
  logger.info("--> Second percolate request");
  response=client().preparePercolate("test","type").setSource(jsonBuilder().startObject().startObject("doc").field("field","val").endObject().endObject()).execute().actionGet();
  assertThat(response.getMatches(),arrayWithSize(1));
  assertThat(convertFromTextArray(response.getMatches()),arrayContaining("1"));
  indicesResponse=client().admin().indices().prepareStats().setPercolate(true).execute().actionGet();
  assertThat(indicesResponse.getTotal().getPercolate().getCount(),equalTo(10l));
  assertThat(indicesResponse.getTotal().getPercolate().getCurrent(),equalTo(0l));
  percolateCount=0;
  nodesResponse=client().admin().cluster().prepareNodesStats().execute().actionGet();
  for (  NodeStats nodeStats : nodesResponse) {
    percolateCount+=nodeStats.getIndices().getPercolate().getCount();
  }
  assertThat(percolateCount,equalTo(10l));
  boolean moreThanOneMs=false;
  int counter=3;
  do {
    indicesResponse=client().admin().indices().prepareStats("test").execute().actionGet();
    if (indicesResponse.getTotal().getPercolate().getTimeInMillis() > 0) {
      moreThanOneMs=true;
      break;
    }
    logger.info("--> {}th percolate request",counter);
    response=client().preparePercolate("test","type").setSource(jsonBuilder().startObject().startObject("doc").field("field","val").endObject().endObject()).execute().actionGet();
    assertThat(response.getMatches(),arrayWithSize(1));
    assertThat(convertFromTextArray(response.getMatches()),arrayContaining("1"));
  }
 while (++counter <= 1000);
  assertTrue(moreThanOneMs,"Something is off, we should have spent at least 1ms on percolating...");
  long percolateSumTime=0;
  nodesResponse=client().admin().cluster().prepareNodesStats().execute().actionGet();
  for (  NodeStats nodeStats : nodesResponse) {
    percolateCount+=nodeStats.getIndices().getPercolate().getCount();
    percolateSumTime+=nodeStats.getIndices().getPercolate().getTimeInMillis();
  }
  assertThat(percolateSumTime,greaterThan(0l));
}
