{
  try {
    client().admin().indices().prepareDelete("test").execute().actionGet();
  }
 catch (  Exception e) {
  }
  try {
    client().admin().indices().prepareDelete("_percolator").execute().actionGet();
  }
 catch (  Exception e) {
  }
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("_size").field("enabled",true).field("stored","yes").endObject().endObject().endObject().string();
  client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards",2)).addMapping("type1",mapping).execute().actionGet();
  client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();
  logger.info("--> register a query");
  client().prepareIndex("_percolator","test","kuku").setSource(jsonBuilder().startObject().field("query",termQuery("field1","value1")).endObject()).setRefresh(true).execute().actionGet();
  client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().setWaitForActiveShards(4).execute().actionGet();
  logger.info("--> percolate a document");
  PercolateResponse percolate=client().preparePercolate("test","type1").setSource(jsonBuilder().startObject().startObject("doc").startObject("type1").field("field1","value1").endObject().endObject().endObject()).execute().actionGet();
  assertThat(percolate.getMatches().size(),equalTo(1));
  assertThat(percolate.getMatches(),hasItem("kuku"));
}
