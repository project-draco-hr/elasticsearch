{
  if (!lifecycle.started()) {
    return;
  }
  updateTasksExecutor.execute(new Runnable(){
    @Override public void run(){
      if (!lifecycle.started()) {
        logger.debug("processing [{}]: ignoring, cluster_service not started",source);
        return;
      }
      logger.debug("processing [{}]: execute",source);
      ClusterState previousClusterState=clusterState;
      try {
        clusterState=updateTask.execute(previousClusterState);
      }
 catch (      Exception e) {
        StringBuilder sb=new StringBuilder("failed to execute cluster state update, state:\nversion [").append(clusterState.version()).append("], source [").append(source).append("]\n");
        sb.append(clusterState.nodes().prettyPrint());
        sb.append(clusterState.routingTable().prettyPrint());
        sb.append(clusterState.readOnlyRoutingNodes().prettyPrint());
        logger.warn(sb.toString(),e);
        return;
      }
      if (previousClusterState != clusterState) {
        if (clusterState.nodes().localNodeMaster()) {
          clusterState=new ClusterState(clusterState.version() + 1,clusterState);
        }
 else {
          if (clusterState.version() < previousClusterState.version()) {
            logger.debug("got old cluster state [" + clusterState.version() + "<"+ previousClusterState.version()+ "] from source ["+ source+ "], ignoring");
            return;
          }
        }
        if (logger.isTraceEnabled()) {
          StringBuilder sb=new StringBuilder("cluster state updated:\nversion [").append(clusterState.version()).append("], source [").append(source).append("]\n");
          sb.append(clusterState.nodes().prettyPrint());
          sb.append(clusterState.routingTable().prettyPrint());
          sb.append(clusterState.readOnlyRoutingNodes().prettyPrint());
          logger.trace(sb.toString());
        }
 else         if (logger.isDebugEnabled()) {
          logger.debug("cluster state updated, version [{}], source [{}]",clusterState.version(),source);
        }
        ClusterChangedEvent clusterChangedEvent=new ClusterChangedEvent(source,clusterState,previousClusterState);
        final DiscoveryNodes.Delta nodesDelta=clusterChangedEvent.nodesDelta();
        if (nodesDelta.hasChanges() && logger.isInfoEnabled()) {
          String summary=nodesDelta.shortSummary();
          if (summary.length() > 0) {
            logger.info("{}, reason: {}",summary,source);
          }
        }
        for (        DiscoveryNode node : nodesDelta.addedNodes()) {
          try {
            transportService.connectToNode(node);
          }
 catch (          Exception e) {
            logger.warn("failed to connect to node [" + node + "]",e);
          }
        }
        for (        ClusterStateListener listener : clusterStateListeners) {
          listener.clusterChanged(clusterChangedEvent);
        }
        threadPool.execute(new Runnable(){
          @Override public void run(){
            for (            DiscoveryNode node : nodesDelta.removedNodes()) {
              transportService.disconnectFromNode(node);
            }
          }
        }
);
        if (clusterState.nodes().localNodeMaster()) {
          discoveryService.publish(clusterState);
        }
        if (updateTask instanceof ProcessedClusterStateUpdateTask) {
          ((ProcessedClusterStateUpdateTask)updateTask).clusterStateProcessed(clusterState);
        }
        logger.debug("processing [{}]: done applying updated cluster_state",source);
      }
 else {
        logger.debug("processing [{}]: no change in cluster_state",source);
      }
    }
  }
);
}
