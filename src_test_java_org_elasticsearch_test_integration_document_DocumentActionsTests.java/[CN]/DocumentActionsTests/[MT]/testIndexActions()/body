{
  createIndex();
  logger.info("Running Cluster Health");
  ClusterHealthResponse clusterHealth=client1.admin().cluster().health(clusterHealthRequest().setWaitForGreenStatus()).actionGet();
  logger.info("Done Cluster Health, status " + clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.GREEN));
  logger.info("Indexing [type1/1]");
  IndexResponse indexResponse=client1.prepareIndex().setIndex("test").setType("type1").setId("1").setSource(source("1","test")).setRefresh(true).execute().actionGet();
  assertThat(indexResponse.getIndex(),equalTo(getConcreteIndexName()));
  assertThat(indexResponse.getId(),equalTo("1"));
  assertThat(indexResponse.getType(),equalTo("type1"));
  logger.info("Refreshing");
  RefreshResponse refreshResponse=client1.admin().indices().prepareRefresh("test").execute().actionGet();
  assertThat(refreshResponse.getSuccessfulShards(),equalTo(10));
  assertThat(refreshResponse.getFailedShards(),equalTo(0));
  logger.info("--> index exists?");
  IndicesExistsResponse indicesExistsResponse=client1.admin().indices().prepareExists(getConcreteIndexName()).execute().actionGet();
  assertThat(indicesExistsResponse.isExists(),equalTo(true));
  logger.info("--> index exists?, fake index");
  indicesExistsResponse=client1.admin().indices().prepareExists("test1234565").execute().actionGet();
  assertThat(indicesExistsResponse.isExists(),equalTo(false));
  logger.info("Clearing cache");
  ClearIndicesCacheResponse clearIndicesCacheResponse=client1.admin().indices().clearCache(clearIndicesCacheRequest("test")).actionGet();
  assertThat(clearIndicesCacheResponse.getSuccessfulShards(),equalTo(10));
  assertThat(clearIndicesCacheResponse.getFailedShards(),equalTo(0));
  logger.info("Optimizing");
  OptimizeResponse optimizeResponse=client1.admin().indices().prepareOptimize("test").execute().actionGet();
  assertThat(optimizeResponse.getSuccessfulShards(),equalTo(10));
  assertThat(optimizeResponse.getFailedShards(),equalTo(0));
  GetResponse getResult;
  logger.info("Get [type1/1]");
  for (int i=0; i < 5; i++) {
    getResult=client1.prepareGet("test","type1","1").setOperationThreaded(false).execute().actionGet();
    assertThat(getResult.getIndex(),equalTo(getConcreteIndexName()));
    assertThat("cycle #" + i,getResult.getSourceAsString(),equalTo(source("1","test").string()));
    assertThat("cycle(map) #" + i,(String)((Map)getResult.getSourceAsMap().get("type1")).get("name"),equalTo("test"));
    getResult=client1.get(getRequest("test").setType("type1").setId("1").setOperationThreaded(true)).actionGet();
    assertThat("cycle #" + i,getResult.getSourceAsString(),equalTo(source("1","test").string()));
    assertThat(getResult.getIndex(),equalTo(getConcreteIndexName()));
  }
  logger.info("Get [type1/1] with script");
  for (int i=0; i < 5; i++) {
    getResult=client1.prepareGet("test","type1","1").setFields("_source.type1.name").execute().actionGet();
    assertThat(getResult.getIndex(),equalTo(getConcreteIndexName()));
    assertThat(getResult.isExists(),equalTo(true));
    assertThat(getResult.getSourceAsBytes(),nullValue());
    assertThat(getResult.getField("_source.type1.name").getValues().get(0).toString(),equalTo("test"));
  }
  logger.info("Get [type1/2] (should be empty)");
  for (int i=0; i < 5; i++) {
    getResult=client1.get(getRequest("test").setType("type1").setId("2")).actionGet();
    assertThat(getResult.isExists(),equalTo(false));
  }
  logger.info("Delete [type1/1]");
  DeleteResponse deleteResponse=client1.prepareDelete("test","type1","1").setReplicationType(ReplicationType.SYNC).execute().actionGet();
  assertThat(deleteResponse.getIndex(),equalTo(getConcreteIndexName()));
  assertThat(deleteResponse.getId(),equalTo("1"));
  assertThat(deleteResponse.getType(),equalTo("type1"));
  logger.info("Refreshing");
  client1.admin().indices().refresh(refreshRequest("test")).actionGet();
  logger.info("Get [type1/1] (should be empty)");
  for (int i=0; i < 5; i++) {
    getResult=client1.get(getRequest("test").setType("type1").setId("1")).actionGet();
    assertThat(getResult.isExists(),equalTo(false));
  }
  logger.info("Index [type1/1]");
  client1.index(indexRequest("test").setType("type1").setId("1").setSource(source("1","test"))).actionGet();
  logger.info("Index [type1/2]");
  client1.index(indexRequest("test").setType("type1").setId("2").setSource(source("2","test2"))).actionGet();
  logger.info("Flushing");
  FlushResponse flushResult=client1.admin().indices().prepareFlush("test").execute().actionGet();
  assertThat(flushResult.getSuccessfulShards(),equalTo(10));
  assertThat(flushResult.getFailedShards(),equalTo(0));
  logger.info("Refreshing");
  client1.admin().indices().refresh(refreshRequest("test")).actionGet();
  logger.info("Get [type1/1] and [type1/2]");
  for (int i=0; i < 5; i++) {
    getResult=client1.get(getRequest("test").setType("type1").setId("1")).actionGet();
    assertThat(getResult.getIndex(),equalTo(getConcreteIndexName()));
    assertThat("cycle #" + i,getResult.getSourceAsString(),equalTo(source("1","test").string()));
    getResult=client1.get(getRequest("test").setType("type1").setId("2")).actionGet();
    String ste1=getResult.getSourceAsString();
    String ste2=source("2","test2").string();
    assertThat("cycle #" + i,ste1,equalTo(ste2));
    assertThat(getResult.getIndex(),equalTo(getConcreteIndexName()));
  }
  logger.info("Count");
  for (int i=0; i < 5; i++) {
    CountResponse countResponse=client1.prepareCount("test").setQuery(termQuery("_type","type1")).setOperationThreading(BroadcastOperationThreading.NO_THREADS).execute().actionGet();
    assertThat("Failures " + countResponse.getShardFailures(),countResponse.getShardFailures().size(),equalTo(0));
    assertThat(countResponse.getCount(),equalTo(2l));
    assertThat(countResponse.getSuccessfulShards(),equalTo(5));
    assertThat(countResponse.getFailedShards(),equalTo(0));
    countResponse=client1.count(countRequest("test").setQuery(termQuery("_type","type1")).setOperationThreading(BroadcastOperationThreading.SINGLE_THREAD)).actionGet();
    assertThat(countResponse.getCount(),equalTo(2l));
    assertThat(countResponse.getSuccessfulShards(),equalTo(5));
    assertThat(countResponse.getFailedShards(),equalTo(0));
    countResponse=client1.count(countRequest("test").setQuery(termQuery("_type","type1")).setOperationThreading(BroadcastOperationThreading.THREAD_PER_SHARD)).actionGet();
    assertThat(countResponse.getCount(),equalTo(2l));
    assertThat(countResponse.getSuccessfulShards(),equalTo(5));
    assertThat(countResponse.getFailedShards(),equalTo(0));
    countResponse=client1.count(countRequest("test").setQuery(Unicode.fromStringAsBytes("{ term : { _type : \"type1 } }"))).actionGet();
    assertThat(countResponse.getCount(),equalTo(0l));
    assertThat(countResponse.getSuccessfulShards(),equalTo(0));
    assertThat(countResponse.getFailedShards(),equalTo(5));
    countResponse=client1.prepareCount("test").execute().actionGet();
    assertThat("Failures " + countResponse.getShardFailures(),countResponse.getShardFailures().size(),equalTo(0));
    assertThat(countResponse.getCount(),equalTo(2l));
    assertThat(countResponse.getSuccessfulShards(),equalTo(5));
    assertThat(countResponse.getFailedShards(),equalTo(0));
  }
  logger.info("Delete by query");
  DeleteByQueryResponse queryResponse=client2.prepareDeleteByQuery().setIndices("test").setQuery(termQuery("name","test2")).execute().actionGet();
  assertThat(queryResponse.getIndex(getConcreteIndexName()).getSuccessfulShards(),equalTo(5));
  assertThat(queryResponse.getIndex(getConcreteIndexName()).getFailedShards(),equalTo(0));
  client1.admin().indices().refresh(refreshRequest("test")).actionGet();
  logger.info("Get [type1/1] and [type1/2], should be empty");
  for (int i=0; i < 5; i++) {
    getResult=client1.get(getRequest("test").setType("type1").setId("1")).actionGet();
    assertThat(getResult.getIndex(),equalTo(getConcreteIndexName()));
    assertThat("cycle #" + i,getResult.getSourceAsString(),equalTo(source("1","test").string()));
    getResult=client1.get(getRequest("test").setType("type1").setId("2")).actionGet();
    assertThat("cycle #" + i,getResult.isExists(),equalTo(false));
    assertThat(getResult.getIndex(),equalTo(getConcreteIndexName()));
  }
}
