{
  final String indexUUID=indexSettings.getUUID();
  final Path[] paths=env.availableShardPaths(shardId);
  Path loadedPath=null;
  for (  Path path : paths) {
    ShardStateMetaData load=ShardStateMetaData.FORMAT.loadLatestState(logger,path);
    if (load != null) {
      if (load.indexUUID.equals(indexUUID) == false && IndexMetaData.INDEX_UUID_NA_VALUE.equals(load.indexUUID) == false) {
        logger.warn("{} found shard on path: [{}] with a different index UUID - this shard seems to be leftover from a different index with the same name. Remove the leftover shard in order to reuse the path with the current index",shardId,path);
        throw new IllegalStateException(shardId + " index UUID in shard state was: " + load.indexUUID+ " expected: "+ indexUUID+ " on shard path: "+ path);
      }
      if (loadedPath == null) {
        loadedPath=path;
      }
 else {
        throw new IllegalStateException(shardId + " more than one shard state found");
      }
    }
  }
  if (loadedPath == null) {
    return null;
  }
 else {
    final Path dataPath;
    final Path statePath=loadedPath;
    if (indexSettings.hasCustomDataPath()) {
      dataPath=env.resolveCustomLocation(indexSettings,shardId);
    }
 else {
      dataPath=statePath;
    }
    logger.debug("{} loaded data path [{}], state path [{}]",shardId,dataPath,statePath);
    return new ShardPath(indexSettings.hasCustomDataPath(),dataPath,statePath,indexUUID,shardId);
  }
}
