{
  final Path dataPath;
  final Path statePath;
  if (indexSettings.hasCustomDataPath()) {
    dataPath=env.resolveCustomLocation(indexSettings,shardId);
    statePath=env.nodePaths()[0].resolve(shardId);
  }
 else {
    long totFreeSpace=0;
    for (    NodeEnvironment.NodePath nodePath : env.nodePaths()) {
      totFreeSpace+=nodePath.fileStore.getUsableSpace();
    }
    long estShardSizeInBytes=Math.max(avgShardSizeInBytes,(long)(totFreeSpace / 20.0));
    final NodeEnvironment.NodePath[] paths=env.nodePaths();
    NodeEnvironment.NodePath bestPath=null;
    long maxUsableBytes=Long.MIN_VALUE;
    for (    NodeEnvironment.NodePath nodePath : paths) {
      FileStore fileStore=nodePath.fileStore;
      long usableBytes=fileStore.getUsableSpace();
      Integer count=dataPathToShardCount.get(nodePath.path);
      if (count != null) {
        usableBytes-=estShardSizeInBytes * count;
      }
      if (usableBytes > maxUsableBytes) {
        maxUsableBytes=usableBytes;
        bestPath=nodePath;
      }
    }
    statePath=bestPath.resolve(shardId);
    dataPath=statePath;
  }
  final String indexUUID=indexSettings.getUUID();
  return new ShardPath(indexSettings.hasCustomDataPath(),dataPath,statePath,indexUUID,shardId);
}
