{
  Map<String,Class<? extends PostingsFormatProvider>> postingFormatProviders=Maps.newHashMap(customProviders);
  Map<String,Settings> postingsFormatsSettings=indexSettings.getGroups(PostingsFormatProvider.POSTINGS_FORMAT_SETTINGS_PREFIX);
  for (  Map.Entry<String,Settings> entry : postingsFormatsSettings.entrySet()) {
    String name=entry.getKey();
    Settings settings=entry.getValue();
    Class<? extends PostingsFormatProvider> type=settings.getAsClass("type",null,"org.elasticsearch.index.codec.postingsformat.","PostingsFormatProvider");
    if (type == null) {
      throw new ElasticSearchIllegalArgumentException("PostingsFormat Factory [" + name + "] must have a type associated with it");
    }
    postingFormatProviders.put(name,type);
  }
  MapBinder<String,PostingsFormatProvider.Factory> postingFormatFactoryBinder=MapBinder.newMapBinder(binder(),String.class,PostingsFormatProvider.Factory.class);
  for (  Map.Entry<String,Class<? extends PostingsFormatProvider>> entry : postingFormatProviders.entrySet()) {
    postingFormatFactoryBinder.addBinding(entry.getKey()).toProvider(FactoryProvider.newFactory(PostingsFormatProvider.Factory.class,entry.getValue())).in(Scopes.SINGLETON);
  }
  for (  PreBuiltPostingsFormatProvider.Factory factory : PostingFormats.listFactories()) {
    if (postingFormatProviders.containsKey(factory.name())) {
      continue;
    }
    postingFormatFactoryBinder.addBinding(factory.name()).toInstance(factory);
  }
  bind(PostingsFormatService.class).asEagerSingleton();
  bind(CodecService.class).asEagerSingleton();
}
