{
  int allocatedProcessors=randomIntBetween(1,Runtime.getRuntime().availableProcessors());
  long refreshInterval;
  if (randomBoolean()) {
    refreshInterval=-1;
  }
 else {
    refreshInterval=randomLong();
    while (refreshInterval == Long.MIN_VALUE) {
      refreshInterval=randomLong();
    }
    refreshInterval=Math.abs(refreshInterval);
  }
  OsInfo info=probe.osInfo(refreshInterval,allocatedProcessors);
  assertNotNull(info);
  assertEquals(refreshInterval,info.getRefreshInterval());
  assertEquals(Constants.OS_NAME,info.getName());
  assertEquals(Constants.OS_ARCH,info.getArch());
  assertEquals(Constants.OS_VERSION,info.getVersion());
  assertEquals(allocatedProcessors,info.getAllocatedProcessors());
  assertEquals(Runtime.getRuntime().availableProcessors(),info.getAvailableProcessors());
}
