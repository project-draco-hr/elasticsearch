{
  Type[] genericParameterTypes;
  if (methodOrConstructor instanceof Method) {
    Method method=(Method)methodOrConstructor;
    if (!method.getDeclaringClass().isAssignableFrom(rawType)) {
      throw new IllegalArgumentException(method + " is not defined by a supertype of " + type);
    }
    genericParameterTypes=method.getGenericParameterTypes();
  }
 else   if (methodOrConstructor instanceof Constructor) {
    Constructor constructor=(Constructor)methodOrConstructor;
    if (!constructor.getDeclaringClass().isAssignableFrom(rawType)) {
      throw new IllegalArgumentException(constructor + " does not construct a supertype of " + type);
    }
    genericParameterTypes=constructor.getGenericParameterTypes();
  }
 else {
    throw new IllegalArgumentException("Not a method or a constructor: " + methodOrConstructor);
  }
  return resolveAll(genericParameterTypes);
}
