{
  ValuesSourceConfig<ValuesSource.Numeric> config=new ValuesSourceConfig<>(ValuesSource.Numeric.class);
  String field=null;
  String script=null;
  String scriptLang=null;
  Map<String,Object> scriptParams=null;
  boolean assumeSorted=false;
  XContentParser.Token token;
  String currentFieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.VALUE_STRING) {
      if ("field".equals(currentFieldName)) {
        field=parser.text();
      }
 else       if ("script".equals(currentFieldName)) {
        script=parser.text();
      }
 else       if ("lang".equals(currentFieldName)) {
        scriptLang=parser.text();
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("params".equals(currentFieldName)) {
        scriptParams=parser.map();
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else     if (token == XContentParser.Token.VALUE_BOOLEAN) {
      if ("script_values_sorted".equals(currentFieldName) || "scriptValuesSorted".equals(currentFieldName)) {
        assumeSorted=parser.booleanValue();
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else {
      throw new SearchParseException(context,"Unexpected token " + token + " in ["+ aggregationName+ "].");
    }
  }
  if (script != null) {
    config.script(context.scriptService().search(context.lookup(),scriptLang,script,scriptParams));
  }
  if (!assumeSorted && requiresSortedValues()) {
    config.ensureSorted(true);
  }
  if (field == null) {
    return createFactory(aggregationName,config);
  }
  FieldMapper<?> mapper=context.smartNameFieldMapper(field);
  if (mapper == null) {
    config.unmapped(true);
    return createFactory(aggregationName,config);
  }
  IndexFieldData<?> indexFieldData=context.fieldData().getForField(mapper);
  config.fieldContext(new FieldContext(field,indexFieldData));
  return createFactory(aggregationName,config);
}
