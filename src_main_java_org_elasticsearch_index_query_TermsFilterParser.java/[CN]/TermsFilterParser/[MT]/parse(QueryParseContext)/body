{
  XContentParser parser=parseContext.parser();
  MapperService.SmartNameFieldMappers smartNameFieldMappers;
  QueryCachingPolicy cache=parseContext.autoFilterCachePolicy();
  String filterName=null;
  String currentFieldName=null;
  String lookupIndex=parseContext.index().name();
  String lookupType=null;
  String lookupId=null;
  String lookupPath=null;
  String lookupRouting=null;
  HashedBytesRef cacheKey=null;
  XContentParser.Token token;
  List<Object> terms=Lists.newArrayList();
  String fieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if (fieldName != null) {
        throw new QueryParsingException(parseContext,"[terms] filter does not support multiple fields");
      }
      fieldName=currentFieldName;
      while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
        Object value=parser.objectBytes();
        if (value == null) {
          throw new QueryParsingException(parseContext,"No value specified for terms filter");
        }
        terms.add(value);
      }
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      fieldName=currentFieldName;
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          currentFieldName=parser.currentName();
        }
 else         if (token.isValue()) {
          if ("index".equals(currentFieldName)) {
            lookupIndex=parser.text();
          }
 else           if ("type".equals(currentFieldName)) {
            lookupType=parser.text();
          }
 else           if ("id".equals(currentFieldName)) {
            lookupId=parser.text();
          }
 else           if ("path".equals(currentFieldName)) {
            lookupPath=parser.text();
          }
 else           if ("routing".equals(currentFieldName)) {
            lookupRouting=parser.textOrNull();
          }
 else {
            throw new QueryParsingException(parseContext,"[terms] filter does not support [" + currentFieldName + "] within lookup element");
          }
        }
      }
      if (lookupType == null) {
        throw new QueryParsingException(parseContext,"[terms] filter lookup element requires specifying the type");
      }
      if (lookupId == null) {
        throw new QueryParsingException(parseContext,"[terms] filter lookup element requires specifying the id");
      }
      if (lookupPath == null) {
        throw new QueryParsingException(parseContext,"[terms] filter lookup element requires specifying the path");
      }
    }
 else     if (token.isValue()) {
      if (EXECUTION_KEY.equals(currentFieldName)) {
      }
 else       if ("_name".equals(currentFieldName)) {
        filterName=parser.text();
      }
 else       if ("_cache".equals(currentFieldName)) {
        cache=parseContext.parseFilterCachePolicy();
      }
 else       if ("_cache_key".equals(currentFieldName) || "_cacheKey".equals(currentFieldName)) {
        cacheKey=new HashedBytesRef(parser.text());
      }
 else {
        throw new QueryParsingException(parseContext,"[terms] filter does not support [" + currentFieldName + "]");
      }
    }
  }
  if (fieldName == null) {
    throw new QueryParsingException(parseContext,"terms filter requires a field name, followed by array of terms");
  }
  FieldMapper<?> fieldMapper=null;
  smartNameFieldMappers=parseContext.smartFieldMappers(fieldName);
  if (smartNameFieldMappers != null) {
    if (smartNameFieldMappers.hasMapper()) {
      fieldMapper=smartNameFieldMappers.mapper();
      fieldName=fieldMapper.names().indexName();
    }
  }
  if (lookupId != null) {
    final TermsLookup lookup=new TermsLookup(lookupIndex,lookupType,lookupId,lookupRouting,lookupPath,parseContext);
    final GetResponse getResponse=client.get(new GetRequest(lookup.getIndex(),lookup.getType(),lookup.getId()).preference("_local").routing(lookup.getRouting())).actionGet();
    if (getResponse.isExists()) {
      List<Object> values=XContentMapValues.extractRawValues(lookup.getPath(),getResponse.getSourceAsMap());
      terms.addAll(values);
    }
  }
  if (terms.isEmpty()) {
    return Queries.newMatchNoDocsFilter();
  }
  Filter filter;
  if (fieldMapper != null) {
    filter=fieldMapper.termsFilter(terms,parseContext);
  }
 else {
    BytesRef[] filterValues=new BytesRef[terms.size()];
    for (int i=0; i < filterValues.length; i++) {
      filterValues[i]=BytesRefs.toBytesRef(terms.get(i));
    }
    filter=Queries.wrap(new TermsQuery(fieldName,filterValues));
  }
  if (cache != null) {
    filter=parseContext.cacheFilter(filter,cacheKey,cache);
  }
  if (filterName != null) {
    parseContext.addNamedFilter(filterName,filter);
  }
  return filter;
}
