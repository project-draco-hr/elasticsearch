{
  XContentParser parser=parseContext.parser();
  MapperService.SmartNameFieldMappers smartNameFieldMappers;
  FilterCachingPolicy cache=parseContext.autoFilterCachePolicy();
  String filterName=null;
  String currentFieldName=null;
  String lookupIndex=parseContext.index().name();
  String lookupType=null;
  String lookupId=null;
  String lookupPath=null;
  String lookupRouting=null;
  boolean lookupCache=true;
  HashedBytesRef cacheKey=null;
  XContentParser.Token token;
  String execution=EXECUTION_VALUE_PLAIN;
  List<Object> terms=Lists.newArrayList();
  String fieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if (fieldName != null) {
        throw new QueryParsingException(parseContext.index(),"[terms] filter does not support multiple fields");
      }
      fieldName=currentFieldName;
      while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
        Object value=parser.objectBytes();
        if (value == null) {
          throw new QueryParsingException(parseContext.index(),"No value specified for terms filter");
        }
        terms.add(value);
      }
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      fieldName=currentFieldName;
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          currentFieldName=parser.currentName();
        }
 else         if (token.isValue()) {
          if ("index".equals(currentFieldName)) {
            lookupIndex=parser.text();
          }
 else           if ("type".equals(currentFieldName)) {
            lookupType=parser.text();
          }
 else           if ("id".equals(currentFieldName)) {
            lookupId=parser.text();
          }
 else           if ("path".equals(currentFieldName)) {
            lookupPath=parser.text();
          }
 else           if ("routing".equals(currentFieldName)) {
            lookupRouting=parser.textOrNull();
          }
 else           if ("cache".equals(currentFieldName)) {
            lookupCache=parser.booleanValue();
          }
 else {
            throw new QueryParsingException(parseContext.index(),"[terms] filter does not support [" + currentFieldName + "] within lookup element");
          }
        }
      }
      if (lookupType == null) {
        throw new QueryParsingException(parseContext.index(),"[terms] filter lookup element requires specifying the type");
      }
      if (lookupId == null) {
        throw new QueryParsingException(parseContext.index(),"[terms] filter lookup element requires specifying the id");
      }
      if (lookupPath == null) {
        throw new QueryParsingException(parseContext.index(),"[terms] filter lookup element requires specifying the path");
      }
    }
 else     if (token.isValue()) {
      if (EXECUTION_KEY.equals(currentFieldName)) {
        execution=parser.text();
      }
 else       if ("_name".equals(currentFieldName)) {
        filterName=parser.text();
      }
 else       if ("_cache".equals(currentFieldName)) {
        cache=parseContext.parseFilterCachePolicy();
      }
 else       if ("_cache_key".equals(currentFieldName) || "_cacheKey".equals(currentFieldName)) {
        cacheKey=new HashedBytesRef(parser.text());
      }
 else {
        throw new QueryParsingException(parseContext.index(),"[terms] filter does not support [" + currentFieldName + "]");
      }
    }
  }
  if (fieldName == null) {
    throw new QueryParsingException(parseContext.index(),"terms filter requires a field name, followed by array of terms");
  }
  FieldMapper fieldMapper=null;
  smartNameFieldMappers=parseContext.smartFieldMappers(fieldName);
  String[] previousTypes=null;
  if (smartNameFieldMappers != null) {
    if (smartNameFieldMappers.hasMapper()) {
      fieldMapper=smartNameFieldMappers.mapper();
      fieldName=fieldMapper.names().indexName();
    }
    if (smartNameFieldMappers.explicitTypeInNameWithDocMapper()) {
      previousTypes=QueryParseContext.setTypesWithPrevious(new String[]{smartNameFieldMappers.docMapper().type()});
    }
  }
  if (lookupId != null) {
    if (fieldMapper == null) {
      return Queries.MATCH_NO_FILTER;
    }
    TermsLookup termsLookup=new TermsLookup(fieldMapper,lookupIndex,lookupType,lookupId,lookupRouting,lookupPath,parseContext);
    Filter filter=termsFilterCache.termsFilter(termsLookup,lookupCache,cacheKey);
    if (filter == null) {
      return null;
    }
    if (cache != null) {
      filter=parseContext.cacheFilter(filter,cacheKey,cache);
    }
    return filter;
  }
  if (terms.isEmpty()) {
    return Queries.MATCH_NO_FILTER;
  }
  try {
    Filter filter;
    if (EXECUTION_VALUE_PLAIN.equals(execution)) {
      if (fieldMapper != null) {
        filter=fieldMapper.termsFilter(terms,parseContext);
      }
 else {
        BytesRef[] filterValues=new BytesRef[terms.size()];
        for (int i=0; i < filterValues.length; i++) {
          filterValues[i]=BytesRefs.toBytesRef(terms.get(i));
        }
        filter=new TermsFilter(fieldName,filterValues);
      }
    }
 else     if (EXECUTION_VALUE_FIELDDATA.equals(execution)) {
      if (fieldMapper == null) {
        return Queries.MATCH_NO_FILTER;
      }
      filter=fieldMapper.fieldDataTermsFilter(terms,parseContext);
    }
 else     if (EXECUTION_VALUE_BOOL.equals(execution)) {
      XBooleanFilter boolFiler=new XBooleanFilter();
      if (fieldMapper != null) {
        for (        Object term : terms) {
          boolFiler.add(parseContext.cacheFilter(fieldMapper.termFilter(term,parseContext),null,parseContext.autoFilterCachePolicy()),BooleanClause.Occur.SHOULD);
        }
      }
 else {
        for (        Object term : terms) {
          boolFiler.add(parseContext.cacheFilter(new TermFilter(new Term(fieldName,BytesRefs.toBytesRef(term))),null,parseContext.autoFilterCachePolicy()),BooleanClause.Occur.SHOULD);
        }
      }
      filter=boolFiler;
    }
 else     if (EXECUTION_VALUE_BOOL_NOCACHE.equals(execution)) {
      XBooleanFilter boolFiler=new XBooleanFilter();
      if (fieldMapper != null) {
        for (        Object term : terms) {
          boolFiler.add(fieldMapper.termFilter(term,parseContext),BooleanClause.Occur.SHOULD);
        }
      }
 else {
        for (        Object term : terms) {
          boolFiler.add(new TermFilter(new Term(fieldName,BytesRefs.toBytesRef(term))),BooleanClause.Occur.SHOULD);
        }
      }
      filter=boolFiler;
    }
 else     if (EXECUTION_VALUE_AND.equals(execution)) {
      List<Filter> filters=Lists.newArrayList();
      if (fieldMapper != null) {
        for (        Object term : terms) {
          filters.add(parseContext.cacheFilter(fieldMapper.termFilter(term,parseContext),null,parseContext.autoFilterCachePolicy()));
        }
      }
 else {
        for (        Object term : terms) {
          filters.add(parseContext.cacheFilter(new TermFilter(new Term(fieldName,BytesRefs.toBytesRef(term))),null,parseContext.autoFilterCachePolicy()));
        }
      }
      filter=new AndFilter(filters);
    }
 else     if (EXECUTION_VALUE_AND_NOCACHE.equals(execution)) {
      List<Filter> filters=Lists.newArrayList();
      if (fieldMapper != null) {
        for (        Object term : terms) {
          filters.add(fieldMapper.termFilter(term,parseContext));
        }
      }
 else {
        for (        Object term : terms) {
          filters.add(new TermFilter(new Term(fieldName,BytesRefs.toBytesRef(term))));
        }
      }
      filter=new AndFilter(filters);
    }
 else     if (EXECUTION_VALUE_OR.equals(execution)) {
      List<Filter> filters=Lists.newArrayList();
      if (fieldMapper != null) {
        for (        Object term : terms) {
          filters.add(parseContext.cacheFilter(fieldMapper.termFilter(term,parseContext),null,parseContext.autoFilterCachePolicy()));
        }
      }
 else {
        for (        Object term : terms) {
          filters.add(parseContext.cacheFilter(new TermFilter(new Term(fieldName,BytesRefs.toBytesRef(term))),null,parseContext.autoFilterCachePolicy()));
        }
      }
      filter=new OrFilter(filters);
    }
 else     if (EXECUTION_VALUE_OR_NOCACHE.equals(execution)) {
      List<Filter> filters=Lists.newArrayList();
      if (fieldMapper != null) {
        for (        Object term : terms) {
          filters.add(fieldMapper.termFilter(term,parseContext));
        }
      }
 else {
        for (        Object term : terms) {
          filters.add(new TermFilter(new Term(fieldName,BytesRefs.toBytesRef(term))));
        }
      }
      filter=new OrFilter(filters);
    }
 else {
      throw new QueryParsingException(parseContext.index(),"terms filter execution value [" + execution + "] not supported");
    }
    if (cache != null) {
      filter=parseContext.cacheFilter(filter,cacheKey,cache);
    }
    filter=wrapSmartNameFilter(filter,smartNameFieldMappers,parseContext);
    if (filterName != null) {
      parseContext.addNamedFilter(filterName,filter);
    }
    return filter;
  }
  finally {
    if (smartNameFieldMappers != null && smartNameFieldMappers.explicitTypeInNameWithDocMapper()) {
      QueryParseContext.setTypes(previousTypes);
    }
  }
}
