{
  XContentParser parser=parseContext.parser();
  MapperService.SmartNameFieldMappers smartNameFieldMappers=null;
  Boolean cache=null;
  String filterName=null;
  String currentFieldName=null;
  CacheKeyFilter.Key cacheKey=null;
  XContentParser.Token token;
  String execution="plain";
  List<String> terms=Lists.newArrayList();
  String fieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      fieldName=currentFieldName;
      while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
        String value=parser.text();
        if (value == null) {
          throw new QueryParsingException(parseContext.index(),"No value specified for term filter");
        }
        terms.add(value);
      }
    }
 else     if (token.isValue()) {
      if ("execution".equals(currentFieldName)) {
        execution=parser.text();
      }
 else       if ("_name".equals(currentFieldName)) {
        filterName=parser.text();
      }
 else       if ("_cache".equals(currentFieldName)) {
        cache=parser.booleanValue();
      }
 else       if ("_cache_key".equals(currentFieldName) || "_cacheKey".equals(currentFieldName)) {
        cacheKey=new CacheKeyFilter.Key(parser.text());
      }
 else {
        throw new QueryParsingException(parseContext.index(),"[terms] filter does not support [" + currentFieldName + "]");
      }
    }
  }
  if (fieldName == null) {
    throw new QueryParsingException(parseContext.index(),"bool filter requires a field name, followed by array of terms");
  }
  FieldMapper fieldMapper=null;
  smartNameFieldMappers=parseContext.smartFieldMappers(fieldName);
  String[] previousTypes=null;
  if (smartNameFieldMappers != null) {
    if (smartNameFieldMappers.hasMapper()) {
      fieldMapper=smartNameFieldMappers.mapper();
      fieldName=fieldMapper.names().indexName();
    }
    if (smartNameFieldMappers.explicitTypeInNameWithDocMapper()) {
      previousTypes=QueryParseContext.setTypesWithPrevious(new String[]{smartNameFieldMappers.docMapper().type()});
    }
  }
  try {
    Filter filter;
    if ("plain".equals(execution)) {
      Term[] filterTerms=new Term[terms.size()];
      if (fieldMapper != null) {
        for (int i=0; i < filterTerms.length; i++) {
          filterTerms[i]=fieldMapper.names().createIndexNameTerm(fieldMapper.indexedValue(terms.get(i)));
        }
      }
 else {
        for (int i=0; i < filterTerms.length; i++) {
          filterTerms[i]=new Term(fieldName,terms.get(i));
        }
      }
      filter=new XTermsFilter(filterTerms);
      if (cache == null || cache) {
        filter=parseContext.cacheFilter(filter,cacheKey);
      }
    }
 else     if ("bool".equals(execution)) {
      XBooleanFilter boolFiler=new XBooleanFilter();
      if (fieldMapper != null) {
        for (        String term : terms) {
          boolFiler.add(parseContext.cacheFilter(fieldMapper.fieldFilter(term,parseContext),null),BooleanClause.Occur.SHOULD);
        }
      }
 else {
        for (        String term : terms) {
          boolFiler.add(parseContext.cacheFilter(new TermFilter(new Term(fieldName,term)),null),BooleanClause.Occur.SHOULD);
        }
      }
      filter=boolFiler;
      if (cache != null && cache) {
        filter=parseContext.cacheFilter(filter,cacheKey);
      }
    }
 else     if ("bool_nocache".equals(execution)) {
      XBooleanFilter boolFiler=new XBooleanFilter();
      if (fieldMapper != null) {
        for (        String term : terms) {
          boolFiler.add(fieldMapper.fieldFilter(term,parseContext),BooleanClause.Occur.SHOULD);
        }
      }
 else {
        for (        String term : terms) {
          boolFiler.add(new TermFilter(new Term(fieldName,term)),BooleanClause.Occur.SHOULD);
        }
      }
      filter=boolFiler;
      if (cache == null || cache) {
        filter=parseContext.cacheFilter(filter,cacheKey);
      }
    }
 else     if ("and".equals(execution)) {
      List<Filter> filters=Lists.newArrayList();
      if (fieldMapper != null) {
        for (        String term : terms) {
          filters.add(parseContext.cacheFilter(fieldMapper.fieldFilter(term,parseContext),null));
        }
      }
 else {
        for (        String term : terms) {
          filters.add(parseContext.cacheFilter(new TermFilter(new Term(fieldName,term)),null));
        }
      }
      filter=new AndFilter(filters);
      if (cache != null && cache) {
        filter=parseContext.cacheFilter(filter,cacheKey);
      }
    }
 else     if ("and_nocache".equals(execution)) {
      List<Filter> filters=Lists.newArrayList();
      if (fieldMapper != null) {
        for (        String term : terms) {
          filters.add(fieldMapper.fieldFilter(term,parseContext));
        }
      }
 else {
        for (        String term : terms) {
          filters.add(new TermFilter(new Term(fieldName,term)));
        }
      }
      filter=new AndFilter(filters);
      if (cache == null || cache) {
        filter=parseContext.cacheFilter(filter,cacheKey);
      }
    }
 else     if ("or".equals(execution)) {
      List<Filter> filters=Lists.newArrayList();
      if (fieldMapper != null) {
        for (        String term : terms) {
          filters.add(parseContext.cacheFilter(fieldMapper.fieldFilter(term,parseContext),null));
        }
      }
 else {
        for (        String term : terms) {
          filters.add(parseContext.cacheFilter(new TermFilter(new Term(fieldName,term)),null));
        }
      }
      filter=new OrFilter(filters);
      if (cache != null && cache) {
        filter=parseContext.cacheFilter(filter,cacheKey);
      }
    }
 else     if ("or_nocache".equals(execution)) {
      List<Filter> filters=Lists.newArrayList();
      if (fieldMapper != null) {
        for (        String term : terms) {
          filters.add(fieldMapper.fieldFilter(term,parseContext));
        }
      }
 else {
        for (        String term : terms) {
          filters.add(new TermFilter(new Term(fieldName,term)));
        }
      }
      filter=new OrFilter(filters);
      if (cache == null || cache) {
        filter=parseContext.cacheFilter(filter,cacheKey);
      }
    }
 else {
      throw new QueryParsingException(parseContext.index(),"bool filter execution value [" + execution + "] not supported");
    }
    filter=wrapSmartNameFilter(filter,smartNameFieldMappers,parseContext);
    if (filterName != null) {
      parseContext.addNamedFilter(filterName,filter);
    }
    return filter;
  }
  finally {
    if (smartNameFieldMappers != null && smartNameFieldMappers.explicitTypeInNameWithDocMapper()) {
      QueryParseContext.setTypes(previousTypes);
    }
  }
}
