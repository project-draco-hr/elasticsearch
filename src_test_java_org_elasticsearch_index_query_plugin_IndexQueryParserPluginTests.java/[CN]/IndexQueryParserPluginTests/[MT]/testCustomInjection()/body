{
  Settings settings=ImmutableSettings.builder().put("name","testCustomInjection").put(IndexMetaData.SETTING_VERSION_CREATED,Version.CURRENT).put("path.home",createTempDir()).build();
  IndexQueryParserModule queryParserModule=new IndexQueryParserModule(settings);
  queryParserModule.addProcessor(new IndexQueryParserModule.QueryParsersProcessor(){
    @Override public void processXContentQueryParsers(    XContentQueryParsersBindings bindings){
      bindings.processXContentQueryParser("my",PluginJsonQueryParser.class);
    }
  }
);
  Index index=new Index("test");
  Injector injector=new ModulesBuilder().add(new EnvironmentModule(new Environment(settings)),new SettingsModule(settings),new ThreadPoolModule(new ThreadPool(settings)),new IndicesQueriesModule(),new ScriptModule(settings),new IndexSettingsModule(index,settings),new IndexCacheModule(settings),new AnalysisModule(settings),new SimilarityModule(settings),queryParserModule,new IndexNameModule(index),new FunctionScoreModule(),new AbstractModule(){
    @Override protected void configure(){
      bind(ClusterService.class).toProvider(Providers.of((ClusterService)null));
      bind(CircuitBreakerService.class).to(NoneCircuitBreakerService.class);
    }
  }
).createInjector();
  IndexQueryParserService indexQueryParserService=injector.getInstance(IndexQueryParserService.class);
  PluginJsonQueryParser myJsonQueryParser=(PluginJsonQueryParser)indexQueryParserService.queryParser("my");
  assertThat(myJsonQueryParser.names()[0],equalTo("my"));
  terminate(injector.getInstance(ThreadPool.class));
}
