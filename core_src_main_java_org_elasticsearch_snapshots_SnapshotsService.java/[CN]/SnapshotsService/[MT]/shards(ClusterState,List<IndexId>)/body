{
  ImmutableOpenMap.Builder<ShardId,SnapshotsInProgress.ShardSnapshotStatus> builder=ImmutableOpenMap.builder();
  MetaData metaData=clusterState.metaData();
  for (  IndexId index : indices) {
    final String indexName=index.getName();
    IndexMetaData indexMetaData=metaData.index(indexName);
    if (indexMetaData == null) {
      builder.put(new ShardId(indexName,IndexMetaData.INDEX_UUID_NA_VALUE,0),new SnapshotsInProgress.ShardSnapshotStatus(null,State.MISSING,"missing index"));
    }
 else     if (indexMetaData.getState() == IndexMetaData.State.CLOSE) {
      for (int i=0; i < indexMetaData.getNumberOfShards(); i++) {
        ShardId shardId=new ShardId(indexMetaData.getIndex(),i);
        builder.put(shardId,new SnapshotsInProgress.ShardSnapshotStatus(null,State.MISSING,"index is closed"));
      }
    }
 else {
      IndexRoutingTable indexRoutingTable=clusterState.getRoutingTable().index(indexName);
      for (int i=0; i < indexMetaData.getNumberOfShards(); i++) {
        ShardId shardId=new ShardId(indexMetaData.getIndex(),i);
        if (indexRoutingTable != null) {
          ShardRouting primary=indexRoutingTable.shard(i).primaryShard();
          if (primary == null || !primary.assignedToNode()) {
            builder.put(shardId,new SnapshotsInProgress.ShardSnapshotStatus(null,State.MISSING,"primary shard is not allocated"));
          }
 else           if (primary.relocating() || primary.initializing()) {
            builder.put(shardId,new SnapshotsInProgress.ShardSnapshotStatus(primary.currentNodeId(),State.WAITING));
          }
 else           if (!primary.started()) {
            builder.put(shardId,new SnapshotsInProgress.ShardSnapshotStatus(primary.currentNodeId(),State.MISSING,"primary shard hasn't been started yet"));
          }
 else {
            builder.put(shardId,new SnapshotsInProgress.ShardSnapshotStatus(primary.currentNodeId()));
          }
        }
 else {
          builder.put(shardId,new SnapshotsInProgress.ShardSnapshotStatus(null,State.MISSING,"missing routing table"));
        }
      }
    }
  }
  return builder.build();
}
