{
  threadPool.executor(ThreadPool.Names.SNAPSHOT).execute(new Runnable(){
    @Override public void run(){
      final Snapshot snapshot=entry.snapshot();
      try {
        final Repository repository=repositoriesService.repository(snapshot.getRepository());
        logger.trace("[{}] finalizing snapshot in repository, state: [{}], failure[{}]",snapshot,entry.state(),failure);
        ArrayList<ShardSearchFailure> failures=new ArrayList<>();
        ArrayList<SnapshotShardFailure> shardFailures=new ArrayList<>();
        for (        ObjectObjectCursor<ShardId,ShardSnapshotStatus> shardStatus : entry.shards()) {
          ShardId shardId=shardStatus.key;
          ShardSnapshotStatus status=shardStatus.value;
          if (status.state().failed()) {
            failures.add(new ShardSearchFailure(status.reason(),new SearchShardTarget(status.nodeId(),shardId.getIndex(),shardId.id())));
            shardFailures.add(new SnapshotShardFailure(status.nodeId(),shardId,status.reason()));
          }
        }
        SnapshotInfo snapshotInfo=repository.finalizeSnapshot(snapshot.getSnapshotId(),entry.indices(),entry.startTime(),failure,entry.shards().size(),Collections.unmodifiableList(shardFailures));
        removeSnapshotFromClusterState(snapshot,snapshotInfo,null);
      }
 catch (      Throwable t) {
        logger.warn("[{}] failed to finalize snapshot",t,snapshot);
        removeSnapshotFromClusterState(snapshot,null,t);
      }
    }
  }
);
}
