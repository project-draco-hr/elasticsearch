{
  serviceA.registerHandler("sayHello",new BaseTransportRequestHandler<VoidStreamable>(){
    @Override public VoidStreamable newInstance(){
      return VoidStreamable.INSTANCE;
    }
    @Override public String executor(){
      return ThreadPool.Names.GENERIC;
    }
    @Override public void messageReceived(    VoidStreamable request,    TransportChannel channel){
      try {
        channel.sendResponse(VoidStreamable.INSTANCE,TransportResponseOptions.options().withCompress(true));
      }
 catch (      IOException e) {
        e.printStackTrace();
        assertThat(e.getMessage(),false,equalTo(true));
      }
    }
  }
);
  TransportFuture<VoidStreamable> res=serviceB.submitRequest(serviceANode,"sayHello",VoidStreamable.INSTANCE,TransportRequestOptions.options().withCompress(true),new BaseTransportResponseHandler<VoidStreamable>(){
    @Override public VoidStreamable newInstance(){
      return VoidStreamable.INSTANCE;
    }
    @Override public String executor(){
      return ThreadPool.Names.GENERIC;
    }
    @Override public void handleResponse(    VoidStreamable response){
    }
    @Override public void handleException(    TransportException exp){
      exp.printStackTrace();
      assertThat("got exception instead of a response: " + exp.getMessage(),false,equalTo(true));
    }
  }
);
  try {
    VoidStreamable message=res.get();
    assertThat(message,notNullValue());
  }
 catch (  Exception e) {
    assertThat(e.getMessage(),false,equalTo(true));
  }
  serviceA.removeHandler("sayHello");
}
