{
  serviceA.registerHandler("sayHello",new BaseTransportRequestHandler<StringMessageRequest>(){
    @Override public StringMessageRequest newInstance(){
      return new StringMessageRequest();
    }
    @Override public String executor(){
      return ThreadPool.Names.GENERIC;
    }
    @Override public void messageReceived(    StringMessageRequest request,    TransportChannel channel){
      assertThat("moshe",equalTo(request.message));
      try {
        channel.sendResponse(new StringMessageResponse("hello " + request.message));
      }
 catch (      IOException e) {
        e.printStackTrace();
        assertThat(e.getMessage(),false,equalTo(true));
      }
    }
  }
);
  TransportFuture<StringMessageResponse> res=serviceB.submitRequest(serviceANode,"sayHello",new StringMessageRequest("moshe"),new BaseTransportResponseHandler<StringMessageResponse>(){
    @Override public StringMessageResponse newInstance(){
      return new StringMessageResponse();
    }
    @Override public String executor(){
      return ThreadPool.Names.GENERIC;
    }
    @Override public void handleResponse(    StringMessageResponse response){
      assertThat("hello moshe",equalTo(response.message));
    }
    @Override public void handleException(    TransportException exp){
      exp.printStackTrace();
      assertThat("got exception instead of a response: " + exp.getMessage(),false,equalTo(true));
    }
  }
);
  try {
    StringMessageResponse message=res.get();
    assertThat("hello moshe",equalTo(message.message));
  }
 catch (  Exception e) {
    assertThat(e.getMessage(),false,equalTo(true));
  }
  res=serviceB.submitRequest(serviceANode,"sayHello",new StringMessageRequest("moshe"),TransportRequestOptions.options().withCompress(true),new BaseTransportResponseHandler<StringMessageResponse>(){
    @Override public StringMessageResponse newInstance(){
      return new StringMessageResponse();
    }
    @Override public String executor(){
      return ThreadPool.Names.GENERIC;
    }
    @Override public void handleResponse(    StringMessageResponse response){
      assertThat("hello moshe",equalTo(response.message));
    }
    @Override public void handleException(    TransportException exp){
      exp.printStackTrace();
      assertThat("got exception instead of a response: " + exp.getMessage(),false,equalTo(true));
    }
  }
);
  try {
    StringMessageResponse message=res.get();
    assertThat("hello moshe",equalTo(message.message));
  }
 catch (  Exception e) {
    assertThat(e.getMessage(),false,equalTo(true));
  }
  serviceA.removeHandler("sayHello");
}
