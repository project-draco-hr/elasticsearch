{
  boolean asc=randomBoolean();
  SearchResponse response=client().prepareSearch("idx").setTypes("type").addAggregation(terms("num_tags").field("num_tag").collectMode(randomFrom(SubAggCollectionMode.values())).order(Terms.Order.aggregation("filter",asc)).subAggregation(filter("filter",QueryBuilders.matchAllQuery()))).execute().actionGet();
  assertSearchResponse(response);
  Terms tags=response.getAggregations().get("num_tags");
  assertThat(tags,notNullValue());
  assertThat(tags.getName(),equalTo("num_tags"));
  assertThat(tags.getBuckets().size(),equalTo(2));
  Iterator<Terms.Bucket> iters=tags.getBuckets().iterator();
  Terms.Bucket tag=iters.next();
  assertThat(tag,notNullValue());
  assertThat(key(tag),equalTo(asc ? "0" : "1"));
  assertThat(tag.getDocCount(),equalTo(asc ? 2L : 3L));
  Filter filter=tag.getAggregations().get("filter");
  assertThat(filter,notNullValue());
  assertThat(filter.getDocCount(),equalTo(asc ? 2L : 3L));
  tag=iters.next();
  assertThat(tag,notNullValue());
  assertThat(key(tag),equalTo(asc ? "1" : "0"));
  assertThat(tag.getDocCount(),equalTo(asc ? 3L : 2L));
  filter=tag.getAggregations().get("filter");
  assertThat(filter,notNullValue());
  assertThat(filter.getDocCount(),equalTo(asc ? 3L : 2L));
}
