{
  final Struct owner=structsMap.get(struct);
  if (owner == null) {
    throw new IllegalArgumentException("Owner struct [" + struct + "] not defined"+ " for method ["+ name+ "].");
  }
  if (!name.matches("^[_a-zA-Z][_a-zA-Z0-9]*$")) {
    throw new IllegalArgumentException("Invalid method name" + " [" + name + "] with the struct ["+ owner.name+ "].");
  }
  MethodKey methodKey=new MethodKey(name,args.length);
  if (owner.constructors.containsKey(methodKey)) {
    throw new IllegalArgumentException("Constructors and methods" + " may not have the same signature [" + methodKey + "] within the same struct"+ " ["+ owner.name+ "].");
  }
  if (owner.staticMethods.containsKey(methodKey) || owner.methods.containsKey(methodKey)) {
    throw new IllegalArgumentException("Duplicate method signature [" + methodKey + "] found within the struct ["+ owner.name+ "].");
  }
  final Class<?> implClass;
  final Class<?>[] params;
  if (augmentation == false) {
    implClass=owner.clazz;
    params=new Class<?>[args.length];
    for (int count=0; count < args.length; ++count) {
      params[count]=args[count].clazz;
    }
  }
 else {
    implClass=Augmentation.class;
    params=new Class<?>[args.length + 1];
    params[0]=owner.clazz;
    for (int count=0; count < args.length; ++count) {
      params[count + 1]=args[count].clazz;
    }
  }
  final java.lang.reflect.Method reflect;
  try {
    reflect=implClass.getMethod(name,params);
  }
 catch (  NoSuchMethodException exception) {
    throw new IllegalArgumentException("Method [" + name + "] not found for class ["+ owner.clazz.getName()+ "]"+ " with arguments "+ Arrays.toString(params)+ ".");
  }
  if (!reflect.getReturnType().equals(rtn.clazz)) {
    throw new IllegalArgumentException("Specified return type class [" + rtn.clazz + "]"+ " does not match the found return type class ["+ reflect.getReturnType()+ "] for the"+ " method ["+ name+ "]"+ " within the struct ["+ owner.name+ "].");
  }
  final org.objectweb.asm.commons.Method asm=org.objectweb.asm.commons.Method.getMethod(reflect);
  MethodHandle handle;
  try {
    handle=MethodHandles.publicLookup().in(implClass).unreflect(reflect);
  }
 catch (  final IllegalAccessException exception) {
    throw new IllegalArgumentException("Method [" + name + "]"+ " not found for class ["+ implClass.getName()+ "]"+ " with arguments "+ Arrays.toString(params)+ ".");
  }
  final int modifiers=reflect.getModifiers();
  final Method method=new Method(name,owner,augmentation,rtn,Arrays.asList(args),asm,modifiers,handle);
  if (augmentation == false && java.lang.reflect.Modifier.isStatic(modifiers)) {
    owner.staticMethods.put(methodKey,method);
  }
 else {
    owner.methods.put(methodKey,method);
  }
}
