{
  if (!clazz.clazz.isInterface()) {
    return null;
  }
  boolean hasAnnotation=clazz.clazz.isAnnotationPresent(FunctionalInterface.class);
  List<java.lang.reflect.Method> methods=new ArrayList<>();
  for (  java.lang.reflect.Method m : clazz.clazz.getMethods()) {
    if (m.isDefault()) {
      continue;
    }
    if (Modifier.isStatic(m.getModifiers())) {
      continue;
    }
    try {
      Object.class.getMethod(m.getName(),m.getParameterTypes());
      continue;
    }
 catch (    ReflectiveOperationException e) {
    }
    methods.add(m);
  }
  if (methods.size() != 1) {
    if (hasAnnotation) {
      throw new IllegalArgumentException("Class: " + clazz.name + " is marked with FunctionalInterface but doesn't fit the bill: "+ methods);
    }
    return null;
  }
  java.lang.reflect.Method oneMethod=methods.get(0);
  Method painless=clazz.methods.get(new Definition.MethodKey(oneMethod.getName(),oneMethod.getParameterCount()));
  if (painless == null || painless.method.equals(org.objectweb.asm.commons.Method.getMethod(oneMethod)) == false) {
    throw new IllegalArgumentException("Class: " + clazz.name + " is functional but the functional "+ "method is not whitelisted!");
  }
  return painless;
}
