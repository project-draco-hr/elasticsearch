{
  structsMap=new HashMap<>();
  transformsMap=new HashMap<>();
  runtimeMap=new HashMap<>();
  addStructs();
  voidType=getType("void");
  booleanType=getType("boolean");
  byteType=getType("byte");
  shortType=getType("short");
  charType=getType("char");
  intType=getType("int");
  longType=getType("long");
  floatType=getType("float");
  doubleType=getType("double");
  voidobjType=getType("Void");
  booleanobjType=getType("Boolean");
  byteobjType=getType("Byte");
  shortobjType=getType("Short");
  charobjType=getType("Character");
  intobjType=getType("Integer");
  longobjType=getType("Long");
  floatobjType=getType("Float");
  doubleobjType=getType("Double");
  objectType=getType("Object");
  defType=getType("def");
  numberType=getType("Number");
  charseqType=getType("CharSequence");
  stringType=getType("String");
  mathType=getType("Math");
  utilityType=getType("Utility");
  defobjType=getType("Def");
  itrType=getType("Iterator");
  oitrType=getType("Iterator<Object>");
  sitrType=getType("Iterator<String>");
  collectionType=getType("Collection");
  ocollectionType=getType("Collection<Object>");
  scollectionType=getType("Collection<String>");
  listType=getType("List");
  arraylistType=getType("ArrayList");
  olistType=getType("List<Object>");
  oarraylistType=getType("ArrayList<Object>");
  slistType=getType("List<String>");
  sarraylistType=getType("ArrayList<String>");
  setType=getType("Set");
  hashsetType=getType("HashSet");
  osetType=getType("Set<Object>");
  ohashsetType=getType("HashSet<Object>");
  ssetType=getType("Set<String>");
  shashsetType=getType("HashSet<String>");
  mapType=getType("Map");
  hashmapType=getType("HashMap");
  oomapType=getType("Map<Object,Object>");
  oohashmapType=getType("HashMap<Object,Object>");
  smapType=getType("Map<String,def>");
  shashmapType=getType("HashMap<String,def>");
  somapType=getType("Map<String,Object>");
  sohashmapType=getType("HashMap<String,Object>");
  execType=getType("Executable");
  exceptionType=getType("Exception");
  arithexcepType=getType("ArithmeticException");
  iargexcepType=getType("IllegalArgumentException");
  istateexceptType=getType("IllegalStateException");
  nfexcepType=getType("NumberFormatException");
  geoPointType=getType("GeoPoint");
  stringsType=getType("Strings");
  longsType=getType("Longs");
  doublesType=getType("Doubles");
  geoPointsType=getType("GeoPoints");
  featureTestType=getType("FeatureTest");
  addElements();
  copyStructs();
  addTransforms();
  addRuntimeClasses();
}
