{
  Struct struct=classes.get(clazz);
  Map<String,Method> methods=struct.methods;
  Map<String,MethodHandle> getters=new HashMap<>();
  Map<String,MethodHandle> setters=new HashMap<>();
  for (  Map.Entry<String,Field> member : struct.members.entrySet()) {
    getters.put(member.getKey(),member.getValue().getter);
    setters.put(member.getKey(),member.getValue().setter);
  }
  for (  Map.Entry<String,Method> method : methods.entrySet()) {
    String name=method.getKey();
    Method m=method.getValue();
    if (m.arguments.size() == 0 && name.startsWith("get") && name.length() > 3 && Character.isUpperCase(name.charAt(3))) {
      StringBuilder newName=new StringBuilder();
      newName.append(Character.toLowerCase(name.charAt(3)));
      newName.append(name.substring(4));
      getters.putIfAbsent(newName.toString(),m.handle);
    }
 else     if (m.arguments.size() == 0 && name.startsWith("is") && name.length() > 2 && Character.isUpperCase(name.charAt(2))) {
      StringBuilder newName=new StringBuilder();
      newName.append(Character.toLowerCase(name.charAt(2)));
      newName.append(name.substring(3));
      getters.putIfAbsent(newName.toString(),m.handle);
    }
    if (m.arguments.size() == 1 && name.startsWith("set") && name.length() > 3 && Character.isUpperCase(name.charAt(3))) {
      StringBuilder newName=new StringBuilder();
      newName.append(Character.toLowerCase(name.charAt(3)));
      newName.append(name.substring(4));
      setters.putIfAbsent(newName.toString(),m.handle);
    }
  }
  return new RuntimeClass(methods,getters,setters);
}
