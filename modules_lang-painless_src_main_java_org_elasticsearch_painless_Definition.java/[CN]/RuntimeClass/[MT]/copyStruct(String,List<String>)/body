{
  final Struct owner=structsMap.get(struct);
  if (owner == null) {
    throw new IllegalArgumentException("Owner struct [" + struct + "] not defined for copy.");
  }
  for (int count=0; count < children.size(); ++count) {
    final Struct child=structsMap.get(children.get(count));
    if (child == null) {
      throw new IllegalArgumentException("Child struct [" + children.get(count) + "]"+ " not defined for copy to owner struct ["+ owner.name+ "].");
    }
    if (!child.clazz.isAssignableFrom(owner.clazz)) {
      throw new ClassCastException("Child struct [" + child.name + "]"+ " is not a super type of owner struct ["+ owner.name+ "] in copy.");
    }
    for (    Map.Entry<MethodKey,Method> kvPair : child.methods.entrySet()) {
      MethodKey methodKey=kvPair.getKey();
      Method method=kvPair.getValue();
      if (owner.methods.get(methodKey) == null) {
        owner.methods.put(methodKey,new Method(method.name,owner,method.rtn,method.arguments,method.method,method.modifiers,method.handle));
      }
    }
    for (    Field field : child.members.values()) {
      if (owner.members.get(field.name) == null) {
        owner.members.put(field.name,new Field(field.name,field.javaName,owner,field.type,field.modifiers,field.getter,field.setter));
      }
    }
  }
}
