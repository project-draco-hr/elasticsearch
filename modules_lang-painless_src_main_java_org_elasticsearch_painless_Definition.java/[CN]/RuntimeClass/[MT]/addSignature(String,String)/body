{
  String elements[]=signature.split("\u0020");
  if (elements.length != 2) {
    throw new IllegalArgumentException("Malformed signature: " + signature);
  }
  Type rtn=getTypeInternal(elements[0]);
  int parenIndex=elements[1].indexOf('(');
  if (parenIndex != -1) {
    int parenEnd=elements[1].indexOf(')');
    final Type args[];
    if (parenEnd > parenIndex + 1) {
      String arguments[]=elements[1].substring(parenIndex + 1,parenEnd).split(",");
      args=new Type[arguments.length];
      for (int i=0; i < arguments.length; i++) {
        args[i]=getTypeInternal(arguments[i]);
      }
    }
 else {
      args=new Type[0];
    }
    String methodName=elements[1].substring(0,parenIndex);
    if (methodName.equals("<init>")) {
      if (!elements[0].equals(className)) {
        throw new IllegalArgumentException("Constructors must return their own type");
      }
      addConstructorInternal(className,"<init>",args);
    }
 else {
      if (methodName.indexOf('/') >= 0) {
        String nameAndAlias[]=methodName.split("/");
        if (nameAndAlias.length != 2) {
          throw new IllegalArgumentException("Currently only two aliases are allowed!");
        }
        addMethodInternal(className,nameAndAlias[0],nameAndAlias[1],rtn,args);
      }
 else {
        addMethodInternal(className,methodName,null,rtn,args);
      }
    }
  }
 else {
    addFieldInternal(className,elements[1],null,rtn);
  }
}
