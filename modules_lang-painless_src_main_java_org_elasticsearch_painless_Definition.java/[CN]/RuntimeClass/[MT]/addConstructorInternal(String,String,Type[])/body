{
  final Struct owner=structsMap.get(struct);
  if (owner == null) {
    throw new IllegalArgumentException("Owner struct [" + struct + "] not defined for constructor ["+ name+ "].");
  }
  if (!name.matches("<init>")) {
    throw new IllegalArgumentException("Invalid constructor name [" + name + "] with the struct ["+ owner.name+ "].");
  }
  MethodKey methodKey=new MethodKey(name,args.length);
  if (owner.constructors.containsKey(methodKey)) {
    throw new IllegalArgumentException("Duplicate constructor [" + methodKey + "] found within the struct ["+ owner.name+ "].");
  }
  if (owner.staticMethods.containsKey(methodKey)) {
    throw new IllegalArgumentException("Constructors and static methods may not have the same signature" + " [" + methodKey + "] within the same struct ["+ owner.name+ "].");
  }
  if (owner.methods.containsKey(methodKey)) {
    throw new IllegalArgumentException("Constructors and methods may not have the same signature" + " [" + methodKey + "] within the same struct ["+ owner.name+ "].");
  }
  final Class<?>[] classes=new Class<?>[args.length];
  for (int count=0; count < classes.length; ++count) {
    classes[count]=args[count].clazz;
  }
  final java.lang.reflect.Constructor<?> reflect;
  try {
    reflect=owner.clazz.getConstructor(classes);
  }
 catch (  final NoSuchMethodException exception) {
    throw new IllegalArgumentException("Constructor [" + name + "] not found for class"+ " ["+ owner.clazz.getName()+ "] with arguments "+ Arrays.toString(classes)+ ".");
  }
  final org.objectweb.asm.commons.Method asm=org.objectweb.asm.commons.Method.getMethod(reflect);
  final Type returnType=getTypeInternal("void");
  final MethodHandle handle;
  try {
    handle=MethodHandles.publicLookup().in(owner.clazz).unreflectConstructor(reflect);
  }
 catch (  final IllegalAccessException exception) {
    throw new IllegalArgumentException("Constructor " + " not found for class [" + owner.clazz.getName() + "]"+ " with arguments "+ Arrays.toString(classes)+ ".");
  }
  final Method constructor=new Method(name,owner,returnType,Arrays.asList(args),asm,reflect.getModifiers(),handle);
  owner.constructors.put(methodKey,constructor);
}
