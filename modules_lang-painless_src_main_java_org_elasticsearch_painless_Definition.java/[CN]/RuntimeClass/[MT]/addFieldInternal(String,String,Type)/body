{
  final Struct owner=structsMap.get(struct);
  if (owner == null) {
    throw new IllegalArgumentException("Owner struct [" + struct + "] not defined for "+ " field ["+ name+ "].");
  }
  if (!name.matches("^[_a-zA-Z][_a-zA-Z0-9]*$")) {
    throw new IllegalArgumentException("Invalid field " + " name [" + name + "] with the struct ["+ owner.name+ "].");
  }
  if (owner.staticMembers.containsKey(name) || owner.members.containsKey(name)) {
    throw new IllegalArgumentException("Duplicate field name [" + name + "]"+ " found within the struct ["+ owner.name+ "].");
  }
  java.lang.reflect.Field reflect;
  try {
    reflect=owner.clazz.getField(name);
  }
 catch (  final NoSuchFieldException exception) {
    throw new IllegalArgumentException("Field [" + name + "]"+ " not found for class ["+ owner.clazz.getName()+ "].");
  }
  final int modifiers=reflect.getModifiers();
  boolean isStatic=java.lang.reflect.Modifier.isStatic(modifiers);
  MethodHandle getter=null;
  MethodHandle setter=null;
  try {
    if (!isStatic) {
      getter=MethodHandles.publicLookup().unreflectGetter(reflect);
      setter=MethodHandles.publicLookup().unreflectSetter(reflect);
    }
  }
 catch (  final IllegalAccessException exception) {
    throw new IllegalArgumentException("Getter/Setter [" + name + "]"+ " not found for class ["+ owner.clazz.getName()+ "].");
  }
  final Field field=new Field(name,reflect.getName(),owner,type,modifiers,getter,setter);
  if (isStatic) {
    if (!java.lang.reflect.Modifier.isFinal(modifiers)) {
      throw new IllegalArgumentException("Static [" + name + "]"+ " within the struct ["+ owner.name+ "] is not final.");
    }
    owner.staticMembers.put(name,field);
  }
 else {
    owner.members.put(name,field);
  }
}
