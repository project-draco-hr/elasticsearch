{
  Query innerQuery=query.toQuery(context);
  if (innerQuery == null) {
    return null;
  }
  innerQuery.setBoost(boost);
  DocumentMapper parentDocMapper=context.mapperService().documentMapper(type);
  if (parentDocMapper == null) {
    throw new QueryParsingException(context.parseContext(),"[has_parent] query configured 'parent_type' [" + type + "] is not a valid type");
  }
  if (innerHit != null) {
    try (XContentParser parser=innerHit.getXcontentParser()){
      XContentParser.Token token=parser.nextToken();
      if (token != XContentParser.Token.START_OBJECT) {
        throw new IllegalStateException("start object expected but was: [" + token + "]");
      }
      InnerHitsSubSearchContext innerHits=context.indexQueryParserService().getInnerHitsQueryParserHelper().parse(parser);
      if (innerHits != null) {
        ParsedQuery parsedQuery=new ParsedQuery(innerQuery,context.copyNamedQueries());
        InnerHitsContext.ParentChildInnerHits parentChildInnerHits=new InnerHitsContext.ParentChildInnerHits(innerHits.getSubSearchContext(),parsedQuery,null,context.mapperService(),parentDocMapper);
        String name=innerHits.getName() != null ? innerHits.getName() : type;
        context.addInnerHits(name,parentChildInnerHits);
      }
    }
   }
  Set<String> parentTypes=new HashSet<>(5);
  parentTypes.add(parentDocMapper.type());
  ParentChildIndexFieldData parentChildIndexFieldData=null;
  for (  DocumentMapper documentMapper : context.mapperService().docMappers(false)) {
    ParentFieldMapper parentFieldMapper=documentMapper.parentFieldMapper();
    if (parentFieldMapper.active()) {
      DocumentMapper parentTypeDocumentMapper=context.mapperService().documentMapper(parentFieldMapper.type());
      parentChildIndexFieldData=context.getForField(parentFieldMapper.fieldType());
      if (parentTypeDocumentMapper == null) {
        parentTypes.add(parentFieldMapper.type());
      }
    }
  }
  if (parentChildIndexFieldData == null) {
    throw new QueryParsingException(context.parseContext(),"[has_parent] no _parent field configured");
  }
  Query parentFilter=null;
  if (parentTypes.size() == 1) {
    DocumentMapper documentMapper=context.mapperService().documentMapper(parentTypes.iterator().next());
    if (documentMapper != null) {
      parentFilter=documentMapper.typeFilter();
    }
  }
 else {
    BooleanQuery.Builder parentsFilter=new BooleanQuery.Builder();
    for (    String parentTypeStr : parentTypes) {
      DocumentMapper documentMapper=context.mapperService().documentMapper(parentTypeStr);
      if (documentMapper != null) {
        parentsFilter.add(documentMapper.typeFilter(),BooleanClause.Occur.SHOULD);
      }
    }
    parentFilter=parentsFilter.build();
  }
  if (parentFilter == null) {
    return null;
  }
  innerQuery=Queries.filtered(innerQuery,parentDocMapper.typeFilter());
  Filter childrenFilter=new QueryWrapperFilter(Queries.not(parentFilter));
  if (context.indexVersionCreated().onOrAfter(Version.V_2_0_0_beta1)) {
    return new HasChildQueryBuilder.LateParsingQuery(childrenFilter,innerQuery,HasChildQueryBuilder.DEFAULT_MIN_CHILDREN,HasChildQueryBuilder.DEFAULT_MAX_CHILDREN,type,score ? ScoreMode.Max : ScoreMode.None,parentChildIndexFieldData);
  }
 else {
    if (score) {
      return new ParentQuery(parentChildIndexFieldData,innerQuery,parentDocMapper.type(),childrenFilter);
    }
 else {
      return new ParentConstantScoreQuery(parentChildIndexFieldData,innerQuery,parentDocMapper.type(),childrenFilter);
    }
  }
}
