{
  Version version=queryShardContext().indexVersionCreated();
  GeoDistanceRangeQueryBuilder builder;
  if (randomBoolean()) {
    builder=new GeoDistanceRangeQueryBuilder(GEO_POINT_FIELD_NAME,randomGeohash(3,12));
  }
 else {
    GeoPoint point=RandomGeoGenerator.randomPoint(random());
    if (randomBoolean()) {
      builder=new GeoDistanceRangeQueryBuilder(GEO_POINT_FIELD_NAME,point);
    }
 else {
      builder=new GeoDistanceRangeQueryBuilder(GEO_POINT_FIELD_NAME,point.lat(),point.lon());
    }
  }
  GeoPoint point=builder.point();
  final double maxRadius=GeoUtils.maxRadialDistance(point);
  final int fromValueMeters=randomInt((int)(maxRadius * 0.5));
  final int toValueMeters=randomIntBetween(fromValueMeters + 1,(int)maxRadius);
  DistanceUnit fromToUnits=randomFrom(DistanceUnit.values());
  final String fromToUnitsStr=fromToUnits.toString();
  final double fromValue=DistanceUnit.convert(fromValueMeters,DistanceUnit.DEFAULT,fromToUnits);
  final double toValue=DistanceUnit.convert(toValueMeters,DistanceUnit.DEFAULT,fromToUnits);
  if (randomBoolean()) {
    int branch=randomInt(2);
    fromToUnits=DistanceUnit.DEFAULT;
switch (branch) {
case 0:
      builder.from(fromValueMeters);
    break;
case 1:
  builder.to(toValueMeters);
break;
case 2:
builder.from(fromValueMeters);
builder.to(toValueMeters);
break;
}
}
 else {
int branch=randomInt(2);
switch (branch) {
case 0:
builder.from(fromValue + fromToUnitsStr);
break;
case 1:
builder.to(toValue + fromToUnitsStr);
break;
case 2:
builder.from(fromValue + fromToUnitsStr);
builder.to(toValue + fromToUnitsStr);
break;
}
}
if (randomBoolean()) {
builder.includeLower(randomBoolean());
}
if (randomBoolean()) {
builder.includeUpper(randomBoolean());
}
if (randomBoolean()) {
builder.geoDistance(randomFrom(GeoDistance.values()));
}
if (randomBoolean() && version.before(Version.V_2_2_0)) {
builder.optimizeBbox(randomFrom("none","memory","indexed"));
}
builder.unit(fromToUnits);
if (randomBoolean()) {
builder.setValidationMethod(randomFrom(GeoValidationMethod.values()));
}
return builder;
}
