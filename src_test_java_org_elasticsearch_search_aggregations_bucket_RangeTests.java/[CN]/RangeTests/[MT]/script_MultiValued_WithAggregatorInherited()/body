{
  SearchResponse response=client().prepareSearch("idx").addAggregation(range("range").script("doc['values'].values").addUnboundedTo("r1",3).addRange("r2",3,6).addUnboundedFrom("r3",6).subAggregation(sum("sum"))).execute().actionGet();
  assertSearchResponse(response);
  Range range=response.getAggregations().get("range");
  assertThat(range,notNullValue());
  assertThat(range.getName(),equalTo("range"));
  assertThat(range.buckets().size(),equalTo(3));
  Range.Bucket bucket=range.getByKey("r1");
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKey(),equalTo("r1"));
  assertThat(bucket.getFrom(),equalTo(Double.NEGATIVE_INFINITY));
  assertThat(bucket.getTo(),equalTo(3.0));
  assertThat(bucket.getDocCount(),equalTo(2l));
  Sum sum=bucket.getAggregations().get("sum");
  assertThat(sum,notNullValue());
  assertThat(sum.getName(),equalTo("sum"));
  assertThat(sum.getValue(),equalTo((double)1 + 2 + 2+ 3));
  bucket=range.getByKey("r2");
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKey(),equalTo("r2"));
  assertThat(bucket.getFrom(),equalTo(3.0));
  assertThat(bucket.getTo(),equalTo(6.0));
  assertThat(bucket.getDocCount(),equalTo(4l));
  sum=bucket.getAggregations().get("sum");
  assertThat(sum,notNullValue());
  assertThat(sum.getName(),equalTo("sum"));
  assertThat(sum.getValue(),equalTo((double)2 + 3 + 3+ 4+ 4+ 5+ 5+ 6));
  bucket=range.getByKey("r3");
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKey(),equalTo("r3"));
  assertThat(bucket.getFrom(),equalTo(6.0));
  assertThat(bucket.getTo(),equalTo(Double.POSITIVE_INFINITY));
  assertThat(bucket.getDocCount(),equalTo(numDocs - 4l));
  sum=bucket.getAggregations().get("sum");
  assertThat(sum,notNullValue());
  assertThat(sum.getName(),equalTo("sum"));
  long total=0;
  for (int i=4; i < numDocs; ++i) {
    total+=(i + 1) + (i + 2);
  }
  assertThat(sum.getValue(),equalTo((double)total));
}
