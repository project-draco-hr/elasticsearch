{
  prepareCreate("empty_bucket_idx").addMapping("type",SINGLE_VALUED_FIELD_NAME,"type=integer").execute().actionGet();
  List<IndexRequestBuilder> builders=new ArrayList<>();
  for (int i=0; i < 2; i++) {
    builders.add(client().prepareIndex("empty_bucket_idx","type","" + i).setSource(jsonBuilder().startObject().field(SINGLE_VALUED_FIELD_NAME,i * 2).endObject()));
  }
  indexRandom(true,builders.toArray(new IndexRequestBuilder[builders.size()]));
  SearchResponse searchResponse=client().prepareSearch("empty_bucket_idx").setQuery(matchAllQuery()).addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(1l).minDocCount(0).subAggregation(range("range").addRange("0-2",0.0,2.0))).execute().actionGet();
  assertThat(searchResponse.getHits().getTotalHits(),equalTo(2l));
  Histogram histo=searchResponse.getAggregations().get("histo");
  assertThat(histo,Matchers.notNullValue());
  Histogram.Bucket bucket=histo.getBucketByKey(1l);
  assertThat(bucket,Matchers.notNullValue());
  Range range=bucket.getAggregations().get("range");
  List<Range.Bucket> buckets=new ArrayList<>(range.getBuckets());
  assertThat(range,Matchers.notNullValue());
  assertThat(range.getName(),equalTo("range"));
  assertThat(buckets.size(),is(1));
  assertThat(buckets.get(0).getKey(),equalTo("0-2"));
  assertThat(buckets.get(0).getFrom().doubleValue(),equalTo(0.0));
  assertThat(buckets.get(0).getTo().doubleValue(),equalTo(2.0));
  assertThat(buckets.get(0).getDocCount(),equalTo(0l));
}
