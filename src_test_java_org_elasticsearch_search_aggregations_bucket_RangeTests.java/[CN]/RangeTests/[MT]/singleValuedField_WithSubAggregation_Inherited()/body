{
  SearchResponse response=client().prepareSearch("idx").addAggregation(range("range").field("value").addUnboundedTo(3).addRange(3,6).addUnboundedFrom(6).subAggregation(avg("avg"))).execute().actionGet();
  assertSearchResponse(response);
  Range range=response.getAggregations().get("range");
  assertThat(range,notNullValue());
  assertThat(range.getName(),equalTo("range"));
  assertThat(range.buckets().size(),equalTo(3));
  Range.Bucket bucket=range.getByKey("*-3.0");
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKey(),equalTo("*-3.0"));
  assertThat(bucket.getFrom(),equalTo(Double.NEGATIVE_INFINITY));
  assertThat(bucket.getTo(),equalTo(3.0));
  assertThat(bucket.getDocCount(),equalTo(2l));
  Avg avg=bucket.getAggregations().get("avg");
  assertThat(avg,notNullValue());
  assertThat(avg.getValue(),equalTo(1.5));
  bucket=range.getByKey("3.0-6.0");
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKey(),equalTo("3.0-6.0"));
  assertThat(bucket.getFrom(),equalTo(3.0));
  assertThat(bucket.getTo(),equalTo(6.0));
  assertThat(bucket.getDocCount(),equalTo(3l));
  avg=bucket.getAggregations().get("avg");
  assertThat(avg,notNullValue());
  assertThat(avg.getValue(),equalTo(4.0));
  bucket=range.getByKey("6.0-*");
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKey(),equalTo("6.0-*"));
  assertThat(bucket.getFrom(),equalTo(6.0));
  assertThat(bucket.getTo(),equalTo(Double.POSITIVE_INFINITY));
  assertThat(bucket.getDocCount(),equalTo(numDocs - 5l));
  avg=bucket.getAggregations().get("avg");
  assertThat(avg,notNullValue());
  long total=0;
  for (int i=5; i < numDocs; ++i) {
    total+=i + 1;
  }
  assertThat(avg.getValue(),equalTo((double)total / (numDocs - 5)));
}
