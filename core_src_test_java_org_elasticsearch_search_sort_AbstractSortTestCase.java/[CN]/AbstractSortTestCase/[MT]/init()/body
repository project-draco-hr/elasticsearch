{
  Path genericConfigFolder=createTempDir();
  Settings baseSettings=Settings.builder().put(Environment.PATH_HOME_SETTING.getKey(),createTempDir().toString()).put(Environment.PATH_CONF_SETTING.getKey(),genericConfigFolder).build();
  Environment environment=new Environment(baseSettings);
  ScriptContextRegistry scriptContextRegistry=new ScriptContextRegistry(Collections.emptyList());
  ScriptEngineRegistry scriptEngineRegistry=new ScriptEngineRegistry(Collections.singletonList(new ScriptEngineRegistry.ScriptEngineRegistration(TestEngineService.class,TestEngineService.TYPES)));
  ScriptSettings scriptSettings=new ScriptSettings(scriptEngineRegistry,scriptContextRegistry);
  scriptService=new ScriptService(baseSettings,environment,Collections.singleton(new TestEngineService()),new ResourceWatcherService(baseSettings,null),scriptEngineRegistry,scriptContextRegistry,scriptSettings){
    @Override public CompiledScript compile(    Script script,    ScriptContext scriptContext,    Map<String,String> params){
      return new CompiledScript(ScriptType.INLINE,"mockName","test",script);
    }
  }
;
  namedWriteableRegistry=new NamedWriteableRegistry();
  indicesQueriesRegistry=new SearchModule(Settings.EMPTY,namedWriteableRegistry).getQueryParserRegistry();
}
