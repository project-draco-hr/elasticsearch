{
  for (int runs=0; runs < NUMBER_OF_TESTBUILDERS; runs++) {
    T firstsort=createTestItem();
    assertFalse("sort is equal to null",firstsort.equals(null));
    assertFalse("sort is equal to incompatible type",firstsort.equals(""));
    assertTrue("sort is not equal to self",firstsort.equals(firstsort));
    assertThat("same sort's hashcode returns different values if called multiple times",firstsort.hashCode(),equalTo(firstsort.hashCode()));
    assertThat("different sorts should not be equal",mutate(firstsort),not(equalTo(firstsort)));
    assertThat("different sorts should have different hashcode",mutate(firstsort).hashCode(),not(equalTo(firstsort.hashCode())));
    T secondsort=copyItem(firstsort);
    assertTrue("sort is not equal to self",secondsort.equals(secondsort));
    assertTrue("sort is not equal to its copy",firstsort.equals(secondsort));
    assertTrue("equals is not symmetric",secondsort.equals(firstsort));
    assertThat("sort copy's hashcode is different from original hashcode",secondsort.hashCode(),equalTo(firstsort.hashCode()));
    T thirdsort=copyItem(secondsort);
    assertTrue("sort is not equal to self",thirdsort.equals(thirdsort));
    assertTrue("sort is not equal to its copy",secondsort.equals(thirdsort));
    assertThat("sort copy's hashcode is different from original hashcode",secondsort.hashCode(),equalTo(thirdsort.hashCode()));
    assertTrue("equals is not transitive",firstsort.equals(thirdsort));
    assertThat("sort copy's hashcode is different from original hashcode",firstsort.hashCode(),equalTo(thirdsort.hashCode()));
    assertTrue("equals is not symmetric",thirdsort.equals(secondsort));
    assertTrue("equals is not symmetric",thirdsort.equals(firstsort));
  }
}
