{
  binder().bind(IngestRestFilter.class).asEagerSingleton();
  binder().bind(PipelineExecutionService.class).asEagerSingleton();
  binder().bind(PipelineStore.class).asEagerSingleton();
  binder().bind(SimulateExecutionService.class).asEagerSingleton();
  addProcessor(GeoIpProcessor.TYPE,new GeoIpProcessor.Factory());
  addProcessor(GrokProcessor.TYPE,new GrokProcessor.Factory());
  addProcessor(DateProcessor.TYPE,new DateProcessor.Factory());
  addProcessor(AddProcessor.TYPE,new AddProcessor.Factory());
  addProcessor(RenameProcessor.TYPE,new RenameProcessor.Factory());
  addProcessor(RemoveProcessor.TYPE,new RemoveProcessor.Factory());
  addProcessor(SplitProcessor.TYPE,new SplitProcessor.Factory());
  addProcessor(JoinProcessor.TYPE,new JoinProcessor.Factory());
  addProcessor(UppercaseProcessor.TYPE,new UppercaseProcessor.Factory());
  addProcessor(LowercaseProcessor.TYPE,new LowercaseProcessor.Factory());
  addProcessor(TrimProcessor.TYPE,new TrimProcessor.Factory());
  addProcessor(ConvertProcessor.TYPE,new ConvertProcessor.Factory());
  addProcessor(GsubProcessor.TYPE,new GsubProcessor.Factory());
  addProcessor(MetaDataProcessor.TYPE,new MetaDataProcessor.Factory());
  MapBinder<String,Processor.Factory> mapBinder=MapBinder.newMapBinder(binder(),String.class,Processor.Factory.class);
  for (  Map.Entry<String,Processor.Factory> entry : processors.entrySet()) {
    mapBinder.addBinding(entry.getKey()).toInstance(entry.getValue());
  }
}
