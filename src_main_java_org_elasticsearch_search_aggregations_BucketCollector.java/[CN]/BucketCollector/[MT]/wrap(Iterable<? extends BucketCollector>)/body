{
  final BucketCollector[] collectors=Iterables.toArray(collectorList,BucketCollector.class);
switch (collectors.length) {
case 0:
    return NO_OP_COLLECTOR;
case 1:
  return collectors[0];
default :
return new BucketCollector(){
  @Override public LeafBucketCollector getLeafCollector(  LeafReaderContext ctx) throws IOException {
    List<LeafBucketCollector> leafCollectors=new ArrayList<>();
    for (    BucketCollector c : collectors) {
      leafCollectors.add(c.getLeafCollector(ctx));
    }
    return LeafBucketCollector.wrap(leafCollectors);
  }
  @Override public void preCollection() throws IOException {
    for (    BucketCollector collector : collectors) {
      collector.preCollection();
    }
  }
  @Override public void postCollection() throws IOException {
    for (    BucketCollector collector : collectors) {
      collector.postCollection();
    }
  }
  @Override public boolean needsScores(){
    for (    BucketCollector collector : collectors) {
      if (collector.needsScores()) {
        return true;
      }
    }
    return false;
  }
}
;
}
}
