{
  final BucketCollector[] collectors=Iterables.toArray(collectorList,BucketCollector.class);
switch (collectors.length) {
case 0:
    return NO_OP_COLLECTOR;
case 1:
  return collectors[0];
default :
return new BucketCollector(){
  @Override public void collect(  int docId,  long bucketOrdinal) throws IOException {
    for (    BucketCollector collector : collectors) {
      collector.collect(docId,bucketOrdinal);
    }
  }
  @Override public void setNextReader(  AtomicReaderContext reader){
    for (    BucketCollector collector : collectors) {
      collector.setNextReader(reader);
    }
  }
  @Override public void postCollection() throws IOException {
    for (    BucketCollector collector : collectors) {
      collector.postCollection();
    }
  }
  @Override public void gatherAnalysis(  BucketAnalysisCollector results,  long bucketOrdinal){
    for (    BucketCollector collector : collectors) {
      collector.gatherAnalysis(results,bucketOrdinal);
    }
  }
}
;
}
}
