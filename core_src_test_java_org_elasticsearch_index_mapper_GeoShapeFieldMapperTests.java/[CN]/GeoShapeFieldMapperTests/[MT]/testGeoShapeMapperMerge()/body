{
  String stage1Mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("shape").field("type","geo_shape").field("tree","geohash").field("strategy","recursive").field("precision","1m").field("tree_levels",8).field("distance_error_pct",0.01).field("orientation","ccw").endObject().endObject().endObject().endObject().string();
  MapperService mapperService=createIndex("test").mapperService();
  DocumentMapper docMapper=mapperService.merge("type",new CompressedXContent(stage1Mapping),MapperService.MergeReason.MAPPING_UPDATE,false);
  String stage2Mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("shape").field("type","geo_shape").field("tree","quadtree").field("strategy","term").field("precision","1km").field("tree_levels",26).field("distance_error_pct",26).field("orientation","cw").endObject().endObject().endObject().endObject().string();
  try {
    mapperService.merge("type",new CompressedXContent(stage2Mapping),MapperService.MergeReason.MAPPING_UPDATE,false);
    fail();
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage(),containsString("mapper [shape] has different [strategy]"));
    assertThat(e.getMessage(),containsString("mapper [shape] has different [tree]"));
    assertThat(e.getMessage(),containsString("mapper [shape] has different [tree_levels]"));
    assertThat(e.getMessage(),containsString("mapper [shape] has different [precision]"));
  }
  FieldMapper fieldMapper=docMapper.mappers().getMapper("shape");
  assertThat(fieldMapper,instanceOf(GeoShapeFieldMapper.class));
  GeoShapeFieldMapper geoShapeFieldMapper=(GeoShapeFieldMapper)fieldMapper;
  PrefixTreeStrategy strategy=geoShapeFieldMapper.fieldType().defaultStrategy();
  assertThat(strategy,instanceOf(RecursivePrefixTreeStrategy.class));
  assertThat(strategy.getGrid(),instanceOf(GeohashPrefixTree.class));
  assertThat(strategy.getDistErrPct(),equalTo(0.01));
  assertThat(strategy.getGrid().getMaxLevels(),equalTo(GeoUtils.geoHashLevelsForPrecision(1d)));
  assertThat(geoShapeFieldMapper.fieldType().orientation(),equalTo(ShapeBuilder.Orientation.CCW));
  stage2Mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("shape").field("type","geo_shape").field("precision","1m").field("tree_levels",8).field("distance_error_pct",0.001).field("orientation","cw").endObject().endObject().endObject().endObject().string();
  docMapper=mapperService.merge("type",new CompressedXContent(stage2Mapping),MapperService.MergeReason.MAPPING_UPDATE,false);
  fieldMapper=docMapper.mappers().getMapper("shape");
  assertThat(fieldMapper,instanceOf(GeoShapeFieldMapper.class));
  geoShapeFieldMapper=(GeoShapeFieldMapper)fieldMapper;
  strategy=geoShapeFieldMapper.fieldType().defaultStrategy();
  assertThat(strategy,instanceOf(RecursivePrefixTreeStrategy.class));
  assertThat(strategy.getGrid(),instanceOf(GeohashPrefixTree.class));
  assertThat(strategy.getDistErrPct(),equalTo(0.001));
  assertThat(strategy.getGrid().getMaxLevels(),equalTo(GeoUtils.geoHashLevelsForPrecision(1d)));
  assertThat(geoShapeFieldMapper.fieldType().orientation(),equalTo(ShapeBuilder.Orientation.CW));
}
