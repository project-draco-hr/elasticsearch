{
  int totalNumDocs=merge.totalNumDocs();
  long totalSizeInBytes=merge.totalBytesSize();
  long time=System.currentTimeMillis();
  currentMerges.inc();
  currentMergesNumDocs.inc(totalNumDocs);
  currentMergesSizeInBytes.inc(totalSizeInBytes);
  if (logger.isTraceEnabled()) {
    logger.trace("merge [{}] starting..., merging [{}]/[{}], into [{}]",merge.info.name,totalNumDocs,new ByteSizeValue(totalSizeInBytes),new ByteSizeValue(merge.estimatedMergeBytes));
  }
  try {
    TrackingMergeScheduler.setCurrentMerge(merge);
    super.doMerge(merge);
  }
  finally {
    TrackingMergeScheduler.removeCurrentMerge();
    long took=System.currentTimeMillis() - time;
    currentMerges.dec();
    currentMergesNumDocs.dec(totalNumDocs);
    currentMergesSizeInBytes.dec(totalSizeInBytes);
    totalMergesNumDocs.inc(totalNumDocs);
    totalMergesSizeInBytes.inc(totalSizeInBytes);
    totalMerges.inc(took);
    if (took > 20000) {
      logger.debug("merge [{}] done, took [{}]",merge.info.name,TimeValue.timeValueMillis(took));
    }
 else     if (logger.isTraceEnabled()) {
      logger.trace("merge [{}] done, took [{}]",merge.info.name,TimeValue.timeValueMillis(took));
    }
  }
}
