{
  int totalNumDocs=merge.totalNumDocs();
  long totalSizeInBytes=merge.totalBytesSize();
  long time=System.currentTimeMillis();
  currentMerges.inc();
  currentMergesNumDocs.inc(totalNumDocs);
  currentMergesSizeInBytes.inc(totalSizeInBytes);
  OnGoingMerge onGoingMerge=new OnGoingMerge(merge);
  onGoingMerges.add(onGoingMerge);
  if (logger.isTraceEnabled()) {
    logger.trace("merge [{}] starting..., merging [{}] segments, [{}] docs, [{}] size, into [{}] estimated_size",merge.info == null ? "_na_" : merge.info.info.name,merge.segments.size(),totalNumDocs,new ByteSizeValue(totalSizeInBytes),new ByteSizeValue(merge.estimatedMergeBytes));
  }
  try {
    beforeMerge(onGoingMerge);
    super.doMerge(writer,merge);
  }
  finally {
    long took=System.currentTimeMillis() - time;
    onGoingMerges.remove(onGoingMerge);
    afterMerge(onGoingMerge);
    currentMerges.dec();
    currentMergesNumDocs.dec(totalNumDocs);
    currentMergesSizeInBytes.dec(totalSizeInBytes);
    totalMergesNumDocs.inc(totalNumDocs);
    totalMergesSizeInBytes.inc(totalSizeInBytes);
    totalMerges.inc(took);
    long stoppedMS=merge.rateLimiter.getTotalStoppedNS() / 1000000;
    long throttledMS=merge.rateLimiter.getTotalPausedNS() / 1000000;
    totalMergeStoppedTime.inc(stoppedMS);
    totalMergeThrottledTime.inc(throttledMS);
    String message=String.format(Locale.ROOT,"merge segment [%s] done: took [%s], [%,.1f MB], [%,d docs], [%s stopped], [%s throttled], [%,.1f MB written], [%,.1f MB/sec throttle]",merge.info == null ? "_na_" : merge.info.info.name,TimeValue.timeValueMillis(took),totalSizeInBytes / 1024f / 1024f,totalNumDocs,TimeValue.timeValueMillis(stoppedMS),TimeValue.timeValueMillis(throttledMS),merge.rateLimiter.getTotalBytesWritten() / 1024f / 1024f,merge.rateLimiter.getMBPerSec());
    if (took > 20000) {
      logger.debug(message);
    }
 else     if (logger.isTraceEnabled()) {
      logger.trace(message);
    }
  }
}
