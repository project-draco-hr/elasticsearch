{
  if (finalSize < 1) {
    throw new IllegalArgumentException("size must be positive, got " + finalSize);
  }
  if (numberOfShards < 1) {
    throw new IllegalArgumentException("number of shards must be positive, got " + numberOfShards);
  }
  if (numberOfShards == 1) {
    return finalSize;
  }
  final long shardSampleSize=(long)(finalSize * 1.5 + 10);
  return (int)Math.min(Integer.MAX_VALUE,shardSampleSize);
}
