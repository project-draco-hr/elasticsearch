{
  logger.info("--> creating index [test1]");
  client1.admin().indices().create(createIndexRequest("test1")).actionGet();
  logger.info("--> creating index [test2]");
  client1.admin().indices().create(createIndexRequest("test2")).actionGet();
  logger.info("--> running cluster_health");
  ClusterHealthResponse clusterHealth=client1.admin().cluster().health(clusterHealthRequest().waitForGreenStatus()).actionGet();
  logger.info("--> done cluster_health, status " + clusterHealth.status());
  assertThat(clusterHealth.timedOut(),equalTo(false));
  assertThat(clusterHealth.status(),equalTo(ClusterHealthStatus.GREEN));
  logger.info("--> adding filtering aliases to index [test1]");
  client1.admin().indices().prepareAliases().addAlias("test1","aliasToTest1").execute().actionGet();
  client1.admin().indices().prepareAliases().addAlias("test1","aliasToTests").execute().actionGet();
  client1.admin().indices().prepareAliases().addAlias("test1","foos",termFilter("name","foo")).execute().actionGet();
  client1.admin().indices().prepareAliases().addAlias("test1","bars",termFilter("name","bar")).execute().actionGet();
  logger.info("--> adding filtering aliases to index [test2]");
  client1.admin().indices().prepareAliases().addAlias("test2","aliasToTest2").execute().actionGet();
  client1.admin().indices().prepareAliases().addAlias("test2","aliasToTests").execute().actionGet();
  client1.admin().indices().prepareAliases().addAlias("test2","foos",termFilter("name","foo")).execute().actionGet();
  Thread.sleep(300);
  logger.info("--> indexing against [test1]");
  client1.index(indexRequest("test1").type("type1").id("1").source(source("1","foo test")).refresh(true)).actionGet();
  client1.index(indexRequest("test1").type("type1").id("2").source(source("2","bar test")).refresh(true)).actionGet();
  client1.index(indexRequest("test1").type("type1").id("3").source(source("3","baz test")).refresh(true)).actionGet();
  client1.index(indexRequest("test1").type("type1").id("4").source(source("4","something else")).refresh(true)).actionGet();
  logger.info("--> indexing against [test2]");
  client1.index(indexRequest("test2").type("type1").id("5").source(source("5","foo test")).refresh(true)).actionGet();
  client1.index(indexRequest("test2").type("type1").id("6").source(source("6","bar test")).refresh(true)).actionGet();
  client1.index(indexRequest("test2").type("type1").id("7").source(source("7","baz test")).refresh(true)).actionGet();
  client1.index(indexRequest("test2").type("type1").id("8").source(source("8","something else")).refresh(true)).actionGet();
  logger.info("--> checking filtering alias for two indices");
  SearchResponse searchResponse=client1.prepareSearch("foos").setQuery(QueryBuilders.matchAllQuery()).execute().actionGet();
  assertHits(searchResponse.hits(),"1","5");
  logger.info("--> checking filtering alias for one index");
  searchResponse=client1.prepareSearch("bars").setQuery(QueryBuilders.matchAllQuery()).execute().actionGet();
  assertHits(searchResponse.hits(),"2");
  logger.info("--> checking filtering alias for two indices and one complete index");
  searchResponse=client1.prepareSearch("foos","test1").setQuery(QueryBuilders.matchAllQuery()).execute().actionGet();
  assertHits(searchResponse.hits(),"1","2","3","4","5");
  logger.info("--> checking filtering alias for two indices and non-filtering alias for one index");
  searchResponse=client1.prepareSearch("foos","aliasToTest1").setQuery(QueryBuilders.matchAllQuery()).execute().actionGet();
  assertHits(searchResponse.hits(),"1","2","3","4","5");
  logger.info("--> checking filtering alias for two indices and non-filtering alias for both indices");
  searchResponse=client1.prepareSearch("foos","aliasToTests").setQuery(QueryBuilders.matchAllQuery()).execute().actionGet();
  assertThat(searchResponse.hits().totalHits(),equalTo(8L));
}
