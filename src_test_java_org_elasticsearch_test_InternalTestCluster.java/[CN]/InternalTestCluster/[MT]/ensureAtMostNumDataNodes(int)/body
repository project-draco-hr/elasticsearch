{
  int size=numDataNodes();
  if (size <= n) {
    return;
  }
  final Iterator<NodeAndClient> values=n == 0 ? nodes.values().iterator() : Iterators.filter(nodes.values().iterator(),Predicates.and(new DataNodePredicate(),Predicates.not(new MasterNodePredicate(getMasterName()))));
  final Iterator<NodeAndClient> limit=Iterators.limit(values,size - n);
  logger.info("changing cluster size from {} to {}, {} data nodes",size(),n + numSharedClientNodes,n);
  Set<NodeAndClient> nodesToRemove=new HashSet<>();
  while (limit.hasNext()) {
    NodeAndClient next=limit.next();
    nodesToRemove.add(next);
    next.close();
  }
  for (  NodeAndClient toRemove : nodesToRemove) {
    nodes.remove(toRemove.name);
  }
  if (!nodesToRemove.isEmpty() && size() > 0) {
    assertNoTimeout(client().admin().cluster().prepareHealth().setWaitForNodes(Integer.toString(nodes.size())).get());
  }
}
