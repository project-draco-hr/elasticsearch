{
  if (Thread.interrupted())   throw new InterruptedException();
  int s;
  long ns, ms;
  if ((s=status) >= 0 && (ns=unit.toNanos(timeout)) > 0L) {
    long deadline=System.nanoTime() + ns;
    ForkJoinPool p=null;
    ForkJoinPool.WorkQueue w=null;
    Thread t=Thread.currentThread();
    if (t instanceof ForkJoinWorkerThread) {
      ForkJoinWorkerThread wt=(ForkJoinWorkerThread)t;
      p=wt.pool;
      w=wt.workQueue;
      s=p.helpJoinOnce(w,this);
    }
    boolean canBlock=false;
    boolean interrupted=false;
    try {
      while ((s=status) >= 0) {
        if (w != null && w.runState < 0)         cancelIgnoringExceptions(this);
 else         if (!canBlock) {
          if (p == null || p.tryCompensate(this,null))           canBlock=true;
        }
 else {
          if ((ms=TimeUnit.NANOSECONDS.toMillis(ns)) > 0L && U.compareAndSwapInt(this,STATUS,s,s | SIGNAL)) {
synchronized (this) {
              if (status >= 0) {
                try {
                  wait(ms);
                }
 catch (                InterruptedException ie) {
                  if (p == null)                   interrupted=true;
                }
              }
 else               notifyAll();
            }
          }
          if ((s=status) < 0 || interrupted || (ns=deadline - System.nanoTime()) <= 0L)           break;
        }
      }
    }
  finally {
      if (p != null && canBlock)       p.incrementActiveCount();
    }
    if (interrupted)     throw new InterruptedException();
  }
  if ((s&=DONE_MASK) != NORMAL) {
    Throwable ex;
    if (s == CANCELLED)     throw new CancellationException();
    if (s != EXCEPTIONAL)     throw new TimeoutException();
    if ((ex=getThrowableException()) != null)     throw new ExecutionException(ex);
  }
  return getRawResult();
}
