{
  channelPipeline.addLast("openChannels",this.serverOpenChannels);
  HttpRequestDecoder requestDecoder=new HttpRequestDecoder((int)this.maxInitialLineLength.bytes(),(int)this.maxHeaderSize.bytes(),(int)this.maxChunkSize.bytes());
  if (this.maxCumulationBufferCapacity != null) {
    if (this.maxCumulationBufferCapacity.bytes() > Integer.MAX_VALUE) {
      requestDecoder.setMaxCumulationBufferCapacity(Integer.MAX_VALUE);
    }
 else {
      requestDecoder.setMaxCumulationBufferCapacity((int)this.maxCumulationBufferCapacity.bytes());
    }
  }
  if (this.maxCompositeBufferComponents != -1) {
    requestDecoder.setMaxCumulationBufferComponents(this.maxCompositeBufferComponents);
  }
  channelPipeline.addLast("decoder",requestDecoder);
  if (this.compression) {
    channelPipeline.addLast("decoder_compress",new HttpContentDecompressor());
  }
  HttpChunkAggregator httpChunkAggregator=new HttpChunkAggregator((int)this.maxContentLength.bytes());
  if (this.maxCompositeBufferComponents != -1) {
    httpChunkAggregator.setMaxCumulationBufferComponents(this.maxCompositeBufferComponents);
  }
  channelPipeline.addLast("aggregator",httpChunkAggregator);
  channelPipeline.addLast("encoder",new HttpResponseEncoder());
  if (this.compression) {
    channelPipeline.addLast("encoder_compress",new HttpContentCompressor(this.compressionLevel));
  }
  channelPipeline.addLast("handler",new HttpRequestHandler(this));
}
