{
  this.serverOpenChannels=new OpenChannelsHandler(logger);
  if (blockingServer) {
    serverBootstrap=new ServerBootstrap(new OioServerSocketChannelFactory(Executors.newCachedThreadPool(daemonThreadFactory(settings,"http_server_boss")),Executors.newCachedThreadPool(daemonThreadFactory(settings,"http_server_worker"))));
  }
 else {
    serverBootstrap=new ServerBootstrap(new NioServerSocketChannelFactory(Executors.newCachedThreadPool(daemonThreadFactory(settings,"http_server_boss")),Executors.newCachedThreadPool(daemonThreadFactory(settings,"http_server_worker")),workerCount));
  }
  serverBootstrap.setPipelineFactory(configureServerChannelPipelineFactory());
  if (tcpNoDelay != null) {
    serverBootstrap.setOption("child.tcpNoDelay",tcpNoDelay);
  }
  if (tcpKeepAlive != null) {
    serverBootstrap.setOption("child.keepAlive",tcpKeepAlive);
  }
  if (tcpSendBufferSize != null && tcpSendBufferSize.bytes() > 0) {
    serverBootstrap.setOption("child.sendBufferSize",tcpSendBufferSize.bytes());
  }
  if (tcpReceiveBufferSize != null && tcpReceiveBufferSize.bytes() > 0) {
    serverBootstrap.setOption("child.receiveBufferSize",tcpReceiveBufferSize.bytes());
  }
  serverBootstrap.setOption("receiveBufferSizePredictorFactory",receiveBufferSizePredictorFactory);
  serverBootstrap.setOption("child.receiveBufferSizePredictorFactory",receiveBufferSizePredictorFactory);
  if (reuseAddress != null) {
    serverBootstrap.setOption("reuseAddress",reuseAddress);
    serverBootstrap.setOption("child.reuseAddress",reuseAddress);
  }
  InetAddress hostAddressX;
  try {
    hostAddressX=networkService.resolveBindHostAddress(bindHost);
  }
 catch (  IOException e) {
    throw new BindHttpException("Failed to resolve host [" + bindHost + "]",e);
  }
  final InetAddress hostAddress=hostAddressX;
  PortsRange portsRange=new PortsRange(port);
  final AtomicReference<Exception> lastException=new AtomicReference<>();
  boolean success=portsRange.iterate(new PortsRange.PortCallback(){
    @Override public boolean onPortNumber(    int portNumber){
      try {
        serverChannel=serverBootstrap.bind(new InetSocketAddress(hostAddress,portNumber));
      }
 catch (      Exception e) {
        lastException.set(e);
        return false;
      }
      return true;
    }
  }
);
  if (!success) {
    throw new BindHttpException("Failed to bind to [" + port + "]",lastException.get());
  }
  InetSocketAddress boundAddress=(InetSocketAddress)serverChannel.getLocalAddress();
  InetSocketAddress publishAddress;
  try {
    publishAddress=new InetSocketAddress(networkService.resolvePublishHostAddress(publishHost),boundAddress.getPort());
  }
 catch (  Exception e) {
    throw new BindTransportException("Failed to resolve publish address",e);
  }
  this.boundAddress=new BoundTransportAddress(new InetSocketTransportAddress(boundAddress),new InetSocketTransportAddress(publishAddress));
}
