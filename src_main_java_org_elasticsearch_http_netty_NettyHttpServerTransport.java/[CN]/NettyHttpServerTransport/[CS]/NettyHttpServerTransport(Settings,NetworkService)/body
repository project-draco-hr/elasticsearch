{
  super(settings);
  this.networkService=networkService;
  if (settings.getAsBoolean("netty.epollBugWorkaround",false)) {
    System.setProperty("org.jboss.netty.epollBugWorkaround","true");
  }
  ByteSizeValue maxContentLength=componentSettings.getAsBytesSize("max_content_length",settings.getAsBytesSize("http.max_content_length",new ByteSizeValue(100,ByteSizeUnit.MB)));
  this.maxChunkSize=componentSettings.getAsBytesSize("max_chunk_size",settings.getAsBytesSize("http.max_chunk_size",new ByteSizeValue(8,ByteSizeUnit.KB)));
  this.maxHeaderSize=componentSettings.getAsBytesSize("max_header_size",settings.getAsBytesSize("http.max_header_size",new ByteSizeValue(8,ByteSizeUnit.KB)));
  this.maxInitialLineLength=componentSettings.getAsBytesSize("max_initial_line_length",settings.getAsBytesSize("http.max_initial_line_length",new ByteSizeValue(4,ByteSizeUnit.KB)));
  this.resetCookies=componentSettings.getAsBoolean("reset_cookies",settings.getAsBoolean("http.reset_cookies",false));
  this.maxCumulationBufferCapacity=componentSettings.getAsBytesSize("max_cumulation_buffer_capacity",null);
  this.maxCompositeBufferComponents=componentSettings.getAsInt("max_composite_buffer_components",-1);
  this.workerCount=componentSettings.getAsInt("worker_count",ThreadPool.boundedNumberOfProcessors() * 2);
  this.blockingServer=settings.getAsBoolean("http.blocking_server",settings.getAsBoolean(TCP_BLOCKING_SERVER,settings.getAsBoolean(TCP_BLOCKING,false)));
  this.port=componentSettings.get("port",settings.get("http.port","9200-9300"));
  this.bindHost=componentSettings.get("bind_host",settings.get("http.bind_host",settings.get("http.host")));
  this.publishHost=componentSettings.get("publish_host",settings.get("http.publish_host",settings.get("http.host")));
  this.tcpNoDelay=componentSettings.getAsBoolean("tcp_no_delay",settings.getAsBoolean(TCP_NO_DELAY,true));
  this.tcpKeepAlive=componentSettings.getAsBoolean("tcp_keep_alive",settings.getAsBoolean(TCP_KEEP_ALIVE,true));
  this.reuseAddress=componentSettings.getAsBoolean("reuse_address",settings.getAsBoolean(TCP_REUSE_ADDRESS,NetworkUtils.defaultReuseAddress()));
  this.tcpSendBufferSize=componentSettings.getAsBytesSize("tcp_send_buffer_size",settings.getAsBytesSize(TCP_SEND_BUFFER_SIZE,TCP_DEFAULT_SEND_BUFFER_SIZE));
  this.tcpReceiveBufferSize=componentSettings.getAsBytesSize("tcp_receive_buffer_size",settings.getAsBytesSize(TCP_RECEIVE_BUFFER_SIZE,TCP_DEFAULT_RECEIVE_BUFFER_SIZE));
  long defaultReceiverPredictor=512 * 1024;
  if (JvmInfo.jvmInfo().mem().directMemoryMax().bytes() > 0) {
    long l=(long)((0.3 * JvmInfo.jvmInfo().mem().directMemoryMax().bytes()) / workerCount);
    defaultReceiverPredictor=Math.min(defaultReceiverPredictor,Math.max(l,64 * 1024));
  }
  ByteSizeValue receivePredictorMin=componentSettings.getAsBytesSize("receive_predictor_min",componentSettings.getAsBytesSize("receive_predictor_size",new ByteSizeValue(defaultReceiverPredictor)));
  ByteSizeValue receivePredictorMax=componentSettings.getAsBytesSize("receive_predictor_max",componentSettings.getAsBytesSize("receive_predictor_size",new ByteSizeValue(defaultReceiverPredictor)));
  if (receivePredictorMax.bytes() == receivePredictorMin.bytes()) {
    receiveBufferSizePredictorFactory=new FixedReceiveBufferSizePredictorFactory((int)receivePredictorMax.bytes());
  }
 else {
    receiveBufferSizePredictorFactory=new AdaptiveReceiveBufferSizePredictorFactory((int)receivePredictorMin.bytes(),(int)receivePredictorMin.bytes(),(int)receivePredictorMax.bytes());
  }
  this.compression=settings.getAsBoolean("http.compression",false);
  this.compressionLevel=settings.getAsInt("http.compression_level",6);
  if (maxContentLength.bytes() > Integer.MAX_VALUE) {
    logger.warn("maxContentLength[" + maxContentLength + "] set to high value, resetting it to [100mb]");
    maxContentLength=new ByteSizeValue(100,ByteSizeUnit.MB);
  }
  this.maxContentLength=maxContentLength;
  logger.debug("using max_chunk_size[{}], max_header_size[{}], max_initial_line_length[{}], max_content_length[{}], receive_predictor[{}->{}]",maxChunkSize,maxHeaderSize,maxInitialLineLength,this.maxContentLength,receivePredictorMin,receivePredictorMax);
}
