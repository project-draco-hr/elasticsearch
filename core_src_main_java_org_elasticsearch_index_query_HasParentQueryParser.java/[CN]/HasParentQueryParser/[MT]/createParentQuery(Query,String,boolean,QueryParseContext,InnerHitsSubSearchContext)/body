{
  DocumentMapper parentDocMapper=parseContext.mapperService().documentMapper(parentType);
  if (parentDocMapper == null) {
    throw new QueryParsingException(parseContext,"[has_parent] query configured 'parent_type' [" + parentType + "] is not a valid type");
  }
  if (innerHits != null) {
    ParsedQuery parsedQuery=new ParsedQuery(innerQuery,parseContext.copyNamedQueries());
    InnerHitsContext.ParentChildInnerHits parentChildInnerHits=new InnerHitsContext.ParentChildInnerHits(innerHits.getSubSearchContext(),parsedQuery,null,parseContext.mapperService(),parentDocMapper);
    String name=innerHits.getName() != null ? innerHits.getName() : parentType;
    parseContext.addInnerHits(name,parentChildInnerHits);
  }
  Set<String> parentTypes=new HashSet<>(5);
  parentTypes.add(parentDocMapper.type());
  ParentChildIndexFieldData parentChildIndexFieldData=null;
  for (  DocumentMapper documentMapper : parseContext.mapperService().docMappers(false)) {
    ParentFieldMapper parentFieldMapper=documentMapper.parentFieldMapper();
    if (parentFieldMapper.active()) {
      DocumentMapper parentTypeDocumentMapper=parseContext.mapperService().documentMapper(parentFieldMapper.type());
      parentChildIndexFieldData=parseContext.getForField(parentFieldMapper.fieldType());
      if (parentTypeDocumentMapper == null) {
        parentTypes.add(parentFieldMapper.type());
      }
    }
  }
  if (parentChildIndexFieldData == null) {
    throw new QueryParsingException(parseContext,"[has_parent] no _parent field configured");
  }
  Query parentTypeQuery=null;
  if (parentTypes.size() == 1) {
    DocumentMapper documentMapper=parseContext.mapperService().documentMapper(parentTypes.iterator().next());
    if (documentMapper != null) {
      parentTypeQuery=documentMapper.typeFilter();
    }
  }
 else {
    BooleanQuery.Builder parentsFilter=new BooleanQuery.Builder();
    for (    String parentTypeStr : parentTypes) {
      DocumentMapper documentMapper=parseContext.mapperService().documentMapper(parentTypeStr);
      if (documentMapper != null) {
        parentsFilter.add(documentMapper.typeFilter(),BooleanClause.Occur.SHOULD);
      }
    }
    parentTypeQuery=parentsFilter.build();
  }
  if (parentTypeQuery == null) {
    return null;
  }
  innerQuery=Queries.filtered(innerQuery,parentDocMapper.typeFilter());
  Query childrenFilter=Queries.not(parentTypeQuery);
  ScoreMode scoreMode=score ? ScoreMode.Max : ScoreMode.None;
  return joinUtilHelper(parentType,parentChildIndexFieldData,childrenFilter,scoreMode,innerQuery,0,Integer.MAX_VALUE);
}
