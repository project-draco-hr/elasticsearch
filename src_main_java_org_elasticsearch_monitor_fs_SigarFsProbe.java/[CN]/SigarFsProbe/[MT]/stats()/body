{
  if (!nodeEnv.hasNodeFile()) {
    return new FsStats(System.currentTimeMillis(),new FsStats.Info[0]);
  }
  Path[] dataLocations=nodeEnv.nodeDataPaths();
  FsStats.Info[] infos=new FsStats.Info[dataLocations.length];
  for (int i=0; i < dataLocations.length; i++) {
    Path dataLocation=dataLocations[i];
    FsStats.Info info=new FsStats.Info();
    info.path=dataLocation.toAbsolutePath().toString();
    try {
      FileSystem fileSystem=fileSystems.get(dataLocation);
      Sigar sigar=sigarService.sigar();
      if (fileSystem == null) {
        FileSystemMap fileSystemMap=sigar.getFileSystemMap();
        if (fileSystemMap != null) {
          fileSystem=fileSystemMap.getMountPoint(dataLocation.toAbsolutePath().toString());
          fileSystems.put(dataLocation,fileSystem);
        }
      }
      if (fileSystem != null) {
        info.mount=fileSystem.getDirName();
        info.dev=fileSystem.getDevName();
        FileSystemUsage fileSystemUsage=sigar.getFileSystemUsage(fileSystem.getDirName());
        if (fileSystemUsage != null) {
          info.total=fileSystemUsage.getTotal() * 1024;
          info.free=fileSystemUsage.getFree() * 1024;
          info.available=fileSystemUsage.getAvail() * 1024;
          info.diskReads=fileSystemUsage.getDiskReads();
          info.diskWrites=fileSystemUsage.getDiskWrites();
          info.diskReadBytes=fileSystemUsage.getDiskReadBytes();
          info.diskWriteBytes=fileSystemUsage.getDiskWriteBytes();
          info.diskQueue=fileSystemUsage.getDiskQueue();
          info.diskServiceTime=fileSystemUsage.getDiskServiceTime();
        }
      }
    }
 catch (    SigarException e) {
    }
    infos[i]=info;
  }
  return new FsStats(System.currentTimeMillis(),infos);
}
