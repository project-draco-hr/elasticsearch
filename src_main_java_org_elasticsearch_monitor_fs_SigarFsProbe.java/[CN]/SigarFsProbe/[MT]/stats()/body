{
  if (!nodeEnv.hasNodeFile()) {
    return new FsStats(System.currentTimeMillis(),new FsStats.Info[0]);
  }
  File[] dataLocations=nodeEnv.nodeDataLocations();
  FsStats.Info[] infos=new FsStats.Info[dataLocations.length];
  for (int i=0; i < dataLocations.length; i++) {
    File dataLocation=dataLocations[i];
    FsStats.Info info=new FsStats.Info();
    info.path=dataLocation.getAbsolutePath();
    try {
      FileSystem fileSystem=fileSystems.get(dataLocation);
      if (fileSystem == null) {
        fileSystem=sigarService.sigar().getFileSystemMap().getMountPoint(dataLocation.getPath());
        fileSystems.put(dataLocation,fileSystem);
      }
      FileSystemUsage fileSystemUsage=sigarService.sigar().getFileSystemUsage(fileSystem.getDirName());
      info.mount=fileSystem.getDirName();
      info.dev=fileSystem.getDevName();
      info.total=fileSystemUsage.getTotal() * 1024;
      info.free=fileSystemUsage.getFree() * 1024;
      info.available=fileSystemUsage.getAvail() * 1024;
      info.diskReads=fileSystemUsage.getDiskReads();
      info.diskWrites=fileSystemUsage.getDiskWrites();
      info.diskReadBytes=fileSystemUsage.getDiskReadBytes();
      info.diskWriteBytes=fileSystemUsage.getDiskWriteBytes();
      info.diskQueue=fileSystemUsage.getDiskQueue();
      info.diskServiceTime=fileSystemUsage.getDiskServiceTime();
    }
 catch (    SigarException e) {
    }
    infos[i]=info;
  }
  return new FsStats(System.currentTimeMillis(),infos);
}
