{
  try {
    new TermSuggestionBuilder(null);
    fail("Should not allow null as field name");
  }
 catch (  NullPointerException e) {
    assertEquals("suggestion requires a field name",e.getMessage());
  }
  try {
    new TermSuggestionBuilder("");
    fail("Should not allow empty string as field name");
  }
 catch (  IllegalArgumentException e) {
    assertEquals("suggestion field name is empty",e.getMessage());
  }
  TermSuggestionBuilder builder=new TermSuggestionBuilder(randomAsciiOfLengthBetween(2,20));
  try {
    builder.accuracy(-0.5f);
    fail("Should not allow accuracy to be set to a negative value.");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    builder.accuracy(1.1f);
    fail("Should not allow accuracy to be greater than 1.0.");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    builder.maxEdits(0);
    fail("Should not allow maxEdits to be less than 1.");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    builder.maxEdits(-1);
    fail("Should not allow maxEdits to be a negative value.");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    builder.maxEdits(3);
    fail("Should not allow maxEdits to be greater than 2.");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    builder.maxInspections(-1);
    fail("Should not allow maxInspections to be a negative value.");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    builder.maxTermFreq(-0.5f);
    fail("Should not allow max term freq to be a negative value.");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    builder.maxTermFreq(1.5f);
    fail("If max term freq is greater than 1, it must be a whole number.");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    builder.maxTermFreq(2.0f);
  }
 catch (  IllegalArgumentException e) {
    fail("A max term freq greater than 1 that is a whole number should be allowed.");
  }
  try {
    builder.minDocFreq(-0.5f);
    fail("Should not allow min doc freq to be a negative value.");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    builder.minDocFreq(1.5f);
    fail("If min doc freq is greater than 1, it must be a whole number.");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    builder.minDocFreq(2.0f);
  }
 catch (  IllegalArgumentException e) {
    fail("A min doc freq greater than 1 that is a whole number should be allowed.");
  }
  try {
    builder.minWordLength(0);
    fail("A min word length < 1 should not be allowed.");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    builder.minWordLength(-1);
    fail("Should not allow min word length to be a negative value.");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    builder.prefixLength(-1);
    fail("Should not allow prefix length to be a negative value.");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    builder.size(0);
    fail("Size must be a positive value.");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    builder.size(-1);
    fail("Size must be a positive value.");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    builder.sort(null);
    fail("Should not allow setting a null sort value.");
  }
 catch (  NullPointerException e) {
  }
  try {
    builder.stringDistance(null);
    fail("Should not allow setting a null string distance value.");
  }
 catch (  NullPointerException e) {
  }
  try {
    builder.suggestMode(null);
    fail("Should not allow setting a null suggest mode value.");
  }
 catch (  NullPointerException e) {
  }
}
