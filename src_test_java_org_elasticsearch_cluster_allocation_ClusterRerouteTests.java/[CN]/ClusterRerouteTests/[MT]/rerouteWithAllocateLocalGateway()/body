{
  Settings commonSettings=settingsBuilder().put(DisableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_DISABLE_NEW_ALLOCATION,true).put(DisableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_DISABLE_ALLOCATION,true).put("gateway.type","local").build();
  logger.info("--> cleaning nodes");
  buildNode("node1",settingsBuilder().put("gateway.type","local").build());
  buildNode("node2",settingsBuilder().put("gateway.type","local").build());
  cleanAndCloseNodes();
  logger.info("--> starting 2 nodes");
  startNode("node1",commonSettings);
  startNode("node2",commonSettings);
  logger.info("--> create an index with 1 shard, 1 replica, nothing should allocate");
  client("node1").admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards",1)).execute().actionGet();
  ClusterState state=client("node1").admin().cluster().prepareState().execute().actionGet().getState();
  assertThat(state.routingNodes().unassigned().size(),equalTo(2));
  logger.info("--> explicitly allocate shard 1, actually allocating, no dry run");
  state=client("node1").admin().cluster().prepareReroute().add(new AllocateAllocationCommand(new ShardId("test",0),"node1",true)).execute().actionGet().getState();
  assertThat(state.routingNodes().unassigned().size(),equalTo(1));
  assertThat(state.routingNodes().node(state.nodes().resolveNode("node1").id()).shards().get(0).state(),equalTo(ShardRoutingState.INITIALIZING));
  ClusterHealthResponse healthResponse=client("node1").admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForYellowStatus().execute().actionGet();
  assertThat(healthResponse.isTimedOut(),equalTo(false));
  logger.info("--> get the state, verify shard 1 primary allocated");
  state=client("node1").admin().cluster().prepareState().execute().actionGet().getState();
  assertThat(state.routingNodes().unassigned().size(),equalTo(1));
  assertThat(state.routingNodes().node(state.nodes().resolveNode("node1").id()).shards().get(0).state(),equalTo(ShardRoutingState.STARTED));
  client("node1").prepareIndex("test","type","1").setSource("field","value").setRefresh(true).execute().actionGet();
  logger.info("--> closing all nodes");
  File shardLocation=((InternalNode)node("node1")).injector().getInstance(NodeEnvironment.class).shardLocations(new ShardId("test",0))[0];
  closeAllNodes();
  logger.info("--> deleting the shard data");
  FileSystemUtils.deleteRecursively(shardLocation);
  logger.info("--> starting nodes back, will not allocate the shard since it has no data, but the index will be there");
  startNode("node1",commonSettings);
  startNode("node2",commonSettings);
  Thread.sleep(300);
  assertThat(client("node1").admin().cluster().prepareHealth().execute().actionGet().getStatus(),equalTo(ClusterHealthStatus.RED));
  logger.info("--> explicitly allocate primary");
  state=client("node1").admin().cluster().prepareReroute().add(new AllocateAllocationCommand(new ShardId("test",0),"node1",true)).execute().actionGet().getState();
  assertThat(state.routingNodes().unassigned().size(),equalTo(1));
  assertThat(state.routingNodes().node(state.nodes().resolveNode("node1").id()).shards().get(0).state(),equalTo(ShardRoutingState.INITIALIZING));
  healthResponse=client("node1").admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForYellowStatus().execute().actionGet();
  assertThat(healthResponse.isTimedOut(),equalTo(false));
  logger.info("--> get the state, verify shard 1 primary allocated");
  state=client("node1").admin().cluster().prepareState().execute().actionGet().getState();
  assertThat(state.routingNodes().unassigned().size(),equalTo(1));
  assertThat(state.routingNodes().node(state.nodes().resolveNode("node1").id()).shards().get(0).state(),equalTo(ShardRoutingState.STARTED));
}
