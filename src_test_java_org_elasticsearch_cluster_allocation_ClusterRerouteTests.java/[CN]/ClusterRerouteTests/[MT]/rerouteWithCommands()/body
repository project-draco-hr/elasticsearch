{
  Settings commonSettings=settingsBuilder().put(DisableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_DISABLE_NEW_ALLOCATION,true).put(DisableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_DISABLE_ALLOCATION,true).build();
  String node_1=cluster().startNode(commonSettings);
  String node_2=cluster().startNode(commonSettings);
  logger.info("--> create an index with 1 shard, 1 replica, nothing should allocate");
  client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards",1)).execute().actionGet();
  ClusterState state=client().admin().cluster().prepareState().execute().actionGet().getState();
  assertThat(state.routingNodes().unassigned().size(),equalTo(2));
  logger.info("--> explicitly allocate shard 1, *under dry_run*");
  state=client().admin().cluster().prepareReroute().add(new AllocateAllocationCommand(new ShardId("test",0),node_1,true)).setDryRun(true).execute().actionGet().getState();
  assertThat(state.routingNodes().unassigned().size(),equalTo(1));
  assertThat(state.routingNodes().node(state.nodes().resolveNode(node_1).id()).shards().get(0).state(),equalTo(ShardRoutingState.INITIALIZING));
  logger.info("--> get the state, verify nothing changed because of the dry run");
  state=client().admin().cluster().prepareState().execute().actionGet().getState();
  assertThat(state.routingNodes().unassigned().size(),equalTo(2));
  logger.info("--> explicitly allocate shard 1, actually allocating, no dry run");
  state=client().admin().cluster().prepareReroute().add(new AllocateAllocationCommand(new ShardId("test",0),node_1,true)).execute().actionGet().getState();
  assertThat(state.routingNodes().unassigned().size(),equalTo(1));
  assertThat(state.routingNodes().node(state.nodes().resolveNode(node_1).id()).shards().get(0).state(),equalTo(ShardRoutingState.INITIALIZING));
  ClusterHealthResponse healthResponse=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForYellowStatus().execute().actionGet();
  assertThat(healthResponse.isTimedOut(),equalTo(false));
  logger.info("--> get the state, verify shard 1 primary allocated");
  state=client().admin().cluster().prepareState().execute().actionGet().getState();
  assertThat(state.routingNodes().unassigned().size(),equalTo(1));
  assertThat(state.routingNodes().node(state.nodes().resolveNode(node_1).id()).shards().get(0).state(),equalTo(ShardRoutingState.STARTED));
  logger.info("--> move shard 1 primary from node1 to node2");
  state=client().admin().cluster().prepareReroute().add(new MoveAllocationCommand(new ShardId("test",0),node_1,node_2)).execute().actionGet().getState();
  assertThat(state.routingNodes().node(state.nodes().resolveNode(node_1).id()).shards().get(0).state(),equalTo(ShardRoutingState.RELOCATING));
  assertThat(state.routingNodes().node(state.nodes().resolveNode(node_2).id()).shards().get(0).state(),equalTo(ShardRoutingState.INITIALIZING));
  healthResponse=client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForYellowStatus().setWaitForRelocatingShards(0).execute().actionGet();
  assertThat(healthResponse.isTimedOut(),equalTo(false));
  logger.info("--> get the state, verify shard 1 primary moved from node1 to node2");
  state=client().admin().cluster().prepareState().execute().actionGet().getState();
  assertThat(state.routingNodes().unassigned().size(),equalTo(1));
  assertThat(state.routingNodes().node(state.nodes().resolveNode(node_2).id()).shards().get(0).state(),equalTo(ShardRoutingState.STARTED));
}
