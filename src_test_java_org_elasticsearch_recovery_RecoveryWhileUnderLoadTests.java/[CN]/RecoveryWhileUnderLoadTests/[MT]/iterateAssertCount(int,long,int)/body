{
  SearchResponse[] iterationResults=new SearchResponse[iterations];
  boolean error=false;
  for (int i=0; i < iterations; i++) {
    SearchResponse searchResponse=client().prepareSearch().setSearchType(SearchType.COUNT).setQuery(matchAllQuery()).get();
    logSearchResponse(numberOfShards,numberOfDocs,i,searchResponse);
    iterationResults[i]=searchResponse;
    if (searchResponse.getHits().totalHits() != numberOfDocs) {
      error=true;
    }
  }
  if (error) {
    IndicesStatsResponse indicesStatsResponse=client().admin().indices().prepareStats().get();
    for (    ShardStats shardStats : indicesStatsResponse.getShards()) {
      DocsStats docsStats=shardStats.getStats().docs;
      logger.info("Shard [{}] - count {}, primary {}",shardStats.getShardId(),docsStats.getCount(),shardStats.getShardRouting().primary());
    }
    logger.info("--> trying to wait");
    assertThat(awaitBusy(new Predicate<Object>(){
      @Override public boolean apply(      Object o){
        SearchResponse searchResponse=client().prepareSearch().setSearchType(SearchType.COUNT).setQuery(matchAllQuery()).get();
        return searchResponse.getHits().totalHits() == numberOfDocs;
      }
    }
,30,TimeUnit.SECONDS),equalTo(true));
  }
  for (int i=0; i < iterations; i++) {
    assertHitCount(iterationResults[i],numberOfDocs);
  }
}
