{
  if (disabled) {
    throw new ElasticSearchIllegalStateException("Shutdown is disabled");
  }
  final Set<DiscoveryNode> nodes=Sets.newHashSet();
  if (state.nodes().isAllNodes(request.nodesIds)) {
    logger.info("[cluster_shutdown]: requested, shutting down in [{}]",request.delay);
    nodes.addAll(state.nodes().dataNodes().values());
    nodes.addAll(state.nodes().masterNodes().values());
    Thread t=new Thread(new Runnable(){
      @Override public void run(){
        try {
          Thread.sleep(request.delay.millis());
        }
 catch (        InterruptedException e) {
        }
        logger.trace("[cluster_shutdown]: stopping the cluster service so no re-routing will occur");
        clusterService.stop();
        final CountDownLatch latch=new CountDownLatch(nodes.size());
        for (        final DiscoveryNode node : nodes) {
          if (node.id().equals(state.nodes().masterNodeId())) {
            latch.countDown();
          }
 else {
            logger.trace("[cluster_shutdown]: sending shutdown request to [{}]",node);
            transportService.sendRequest(node,NodeShutdownRequestHandler.ACTION,new NodeShutdownRequest(request),new VoidTransportResponseHandler(ThreadPool.Names.SAME){
              @Override public void handleResponse(              VoidStreamable response){
                logger.trace("[cluster_shutdown]: received shutdown response from [{}]",node);
                latch.countDown();
              }
              @Override public void handleException(              TransportException exp){
                logger.warn("[cluster_shutdown]: received failed shutdown response from [{}]",exp,node);
                latch.countDown();
              }
            }
);
          }
        }
        try {
          latch.await();
        }
 catch (        InterruptedException e) {
        }
        logger.info("[cluster_shutdown]: done shutting down all nodes except master, proceeding to master");
        logger.trace("[cluster_shutdown]: shutting down the master [{}]",state.nodes().masterNode());
        transportService.sendRequest(state.nodes().masterNode(),NodeShutdownRequestHandler.ACTION,new NodeShutdownRequest(request),new VoidTransportResponseHandler(ThreadPool.Names.SAME){
          @Override public void handleResponse(          VoidStreamable response){
            logger.trace("[cluster_shutdown]: received shutdown response from master");
          }
          @Override public void handleException(          TransportException exp){
            logger.warn("[cluster_shutdown]: received failed shutdown response master",exp);
          }
        }
);
      }
    }
);
    t.start();
  }
 else {
    final String[] nodesIds=state.nodes().resolveNodesIds(request.nodesIds);
    logger.info("[partial_cluster_shutdown]: requested, shutting down [{}] in [{}]",nodesIds,request.delay);
    for (    String nodeId : nodesIds) {
      final DiscoveryNode node=state.nodes().get(nodeId);
      if (node != null) {
        nodes.add(node);
      }
    }
    Thread t=new Thread(new Runnable(){
      @Override public void run(){
        try {
          Thread.sleep(request.delay.millis());
        }
 catch (        InterruptedException e) {
        }
        final CountDownLatch latch=new CountDownLatch(nodesIds.length);
        for (        String nodeId : nodesIds) {
          final DiscoveryNode node=state.nodes().get(nodeId);
          if (node == null) {
            logger.warn("[partial_cluster_shutdown]: no node to shutdown for node_id [{}]",nodeId);
            latch.countDown();
            continue;
          }
          logger.trace("[partial_cluster_shutdown]: sending shutdown request to [{}]",node);
          transportService.sendRequest(node,NodeShutdownRequestHandler.ACTION,new NodeShutdownRequest(request),new VoidTransportResponseHandler(ThreadPool.Names.SAME){
            @Override public void handleResponse(            VoidStreamable response){
              logger.trace("[partial_cluster_shutdown]: received shutdown response from [{}]",node);
              latch.countDown();
            }
            @Override public void handleException(            TransportException exp){
              logger.warn("[partial_cluster_shutdown]: received failed shutdown response from [{}]",exp,node);
              latch.countDown();
            }
          }
);
        }
        try {
          latch.await();
        }
 catch (        InterruptedException e) {
        }
        logger.info("[partial_cluster_shutdown]: done shutting down [{}]",((Object)nodesIds));
      }
    }
);
    t.start();
  }
  return new NodesShutdownResponse(clusterName,nodes.toArray(new DiscoveryNode[nodes.size()]));
}
