{
  if (!lifecycle.started()) {
    return;
  }
  updateTasksExecutor.execute(new Runnable(){
    @Override public void run(){
      if (!lifecycle.started()) {
        return;
      }
      ClusterState previousClusterState=clusterState;
      clusterState=updateTask.execute(previousClusterState);
      if (previousClusterState != clusterState) {
        if (clusterState.nodes().localNodeMaster()) {
          clusterState=newClusterStateBuilder().state(clusterState).incrementVersion().build();
        }
        if (logger.isDebugEnabled()) {
          logger.debug("Cluster state updated, version [{}], source [{}]",clusterState.version(),source);
        }
        if (logger.isTraceEnabled()) {
          StringBuilder sb=new StringBuilder("Cluster State:\n");
          sb.append(clusterState.nodes().prettyPrint());
          sb.append(clusterState.routingTable().prettyPrint());
          sb.append(clusterState.routingNodes().prettyPrint());
          logger.trace(sb.toString());
        }
        ClusterChangedEvent clusterChangedEvent=new ClusterChangedEvent(source,clusterState,previousClusterState,discoveryService.firstMaster());
        final Nodes.Delta nodesDelta=clusterChangedEvent.nodesDelta();
        if (nodesDelta.hasChanges() && logger.isInfoEnabled()) {
          String summary=nodesDelta.shortSummary();
          if (summary.length() > 0) {
            logger.info(summary);
          }
        }
        threadPool.execute(new Runnable(){
          @Override public void run(){
            transportService.nodesAdded(nodesDelta.addedNodes());
          }
        }
);
        for (        TimeoutHolder timeoutHolder : clusterStateTimeoutListeners) {
          timeoutHolder.listener.clusterChanged(clusterChangedEvent);
        }
        for (        ClusterStateListener listener : clusterStateListeners) {
          listener.clusterChanged(clusterChangedEvent);
        }
        threadPool.execute(new Runnable(){
          @Override public void run(){
            transportService.nodesRemoved(nodesDelta.removedNodes());
          }
        }
);
        if (clusterState.nodes().localNodeMaster()) {
          discoveryService.publish(clusterState);
        }
        if (updateTask instanceof ProcessedClusterStateUpdateTask) {
          ((ProcessedClusterStateUpdateTask)updateTask).clusterStateProcessed(clusterState);
        }
      }
    }
  }
);
}
