{
  if (fieldsIn.length < 1) {
    throw new IllegalArgumentException("fieldsIn must not be empty");
  }
  if (fieldsIn.length != maxPassagesIn.length) {
    throw new IllegalArgumentException("invalid number of maxPassagesIn");
  }
  final IndexReader reader=searcher.getIndexReader();
  query=rewrite(query);
  SortedSet<Term> queryTerms=new TreeSet<Term>();
  query.extractTerms(queryTerms);
  IndexReaderContext readerContext=reader.getContext();
  List<AtomicReaderContext> leaves=readerContext.leaves();
  int[] docids=new int[docidsIn.length];
  System.arraycopy(docidsIn,0,docids,0,docidsIn.length);
  final String fields[]=new String[fieldsIn.length];
  System.arraycopy(fieldsIn,0,fields,0,fieldsIn.length);
  final int maxPassages[]=new int[maxPassagesIn.length];
  System.arraycopy(maxPassagesIn,0,maxPassages,0,maxPassagesIn.length);
  Arrays.sort(docids);
  new InPlaceMergeSorter(){
    @Override protected void swap(    int i,    int j){
      String tmp=fields[i];
      fields[i]=fields[j];
      fields[j]=tmp;
      int tmp2=maxPassages[i];
      maxPassages[i]=maxPassages[j];
      maxPassages[j]=tmp2;
    }
    @Override protected int compare(    int i,    int j){
      return fields[i].compareTo(fields[j]);
    }
  }
.sort(0,fields.length);
  String[][] contents=loadFieldValues(searcher,fields,docids,maxLength);
  Map<String,Object[]> highlights=new HashMap<String,Object[]>();
  for (int i=0; i < fields.length; i++) {
    String field=fields[i];
    int numPassages=maxPassages[i];
    Term floor=new Term(field,"");
    Term ceiling=new Term(field,UnicodeUtil.BIG_TERM);
    SortedSet<Term> fieldTerms=queryTerms.subSet(floor,ceiling);
    BytesRef terms[]=new BytesRef[fieldTerms.size()];
    int termUpto=0;
    for (    Term term : fieldTerms) {
      terms[termUpto++]=term.bytes();
    }
    Map<Integer,Object> fieldHighlights=highlightField(field,contents[i],getBreakIterator(field),terms,docids,leaves,numPassages);
    Object[] result=new Object[docids.length];
    for (int j=0; j < docidsIn.length; j++) {
      result[j]=fieldHighlights.get(docidsIn[j]);
    }
    highlights.put(field,result);
  }
  return highlights;
}
