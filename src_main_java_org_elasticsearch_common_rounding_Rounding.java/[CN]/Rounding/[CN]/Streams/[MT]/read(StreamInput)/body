{
  Rounding rounding=null;
  byte id=in.readByte();
switch (id) {
case Interval.ID:
    rounding=new Interval();
  break;
case TimeZoneRounding.TimeTimeZoneRoundingFloor.ID:
rounding=new TimeZoneRounding.TimeTimeZoneRoundingFloor();
break;
case TimeZoneRounding.UTCTimeZoneRoundingFloor.ID:
rounding=new TimeZoneRounding.UTCTimeZoneRoundingFloor();
break;
case TimeZoneRounding.DayTimeZoneRoundingFloor.ID:
rounding=new TimeZoneRounding.DayTimeZoneRoundingFloor();
break;
case TimeZoneRounding.UTCIntervalTimeZoneRounding.ID:
rounding=new TimeZoneRounding.UTCIntervalTimeZoneRounding();
break;
case TimeZoneRounding.TimeIntervalTimeZoneRounding.ID:
rounding=new TimeZoneRounding.TimeIntervalTimeZoneRounding();
break;
case TimeZoneRounding.DayIntervalTimeZoneRounding.ID:
rounding=new TimeZoneRounding.DayIntervalTimeZoneRounding();
break;
case TimeZoneRounding.FactorRounding.ID:
rounding=new FactorRounding();
break;
case PrePostRounding.ID:
rounding=new PrePostRounding();
break;
default :
throw new ElasticsearchException("unknown rounding id [" + id + "]");
}
rounding.readFrom(in);
return rounding;
}
