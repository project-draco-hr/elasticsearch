{
  TFloatIntHashMap facets=aggregator.facets();
  if (facets.isEmpty()) {
    pushFacets(facets);
    return new InternalFloatTermsFacet(facetName,comparatorType,size,ImmutableList.<InternalFloatTermsFacet.FloatEntry>of(),aggregator.missing());
  }
 else {
    BoundedTreeSet<InternalFloatTermsFacet.FloatEntry> ordered=new BoundedTreeSet<InternalFloatTermsFacet.FloatEntry>(comparatorType.comparator(),size * numberOfShards);
    for (TFloatIntIterator it=facets.iterator(); it.hasNext(); ) {
      it.advance();
      ordered.add(new InternalFloatTermsFacet.FloatEntry(it.key(),it.value()));
    }
    pushFacets(facets);
    return new InternalFloatTermsFacet(facetName,comparatorType,size,ordered,aggregator.missing());
  }
}
