{
  final GetRequest getRequest=new GetRequest(request.param("index"),request.param("type"),request.param("id"));
  getRequest.listenerThreaded(false);
  getRequest.operationThreaded(true);
  String sField=request.param("fields");
  if (sField != null) {
    String[] sFields=fieldsPattern.split(sField);
    if (sFields != null) {
      getRequest.fields(sFields);
    }
  }
  client.get(getRequest,new ActionListener<GetResponse>(){
    @Override public void onResponse(    GetResponse response){
      try {
        if (!response.exists()) {
          XContentBuilder builder=restContentBuilder(request);
          builder.startObject();
          builder.field("_index",response.index());
          builder.field("_type",response.type());
          builder.field("_id",response.id());
          builder.endObject();
          channel.sendResponse(new JsonRestResponse(request,NOT_FOUND,builder));
        }
 else {
          XContentBuilder builder=restContentBuilder(request);
          builder.startObject();
          builder.field("_index",response.index());
          builder.field("_type",response.type());
          builder.field("_id",response.id());
          if (response.source() != null) {
            builder.rawField("_source",response.source());
          }
          if (response.fields() != null && !response.fields().isEmpty()) {
            builder.startObject("fields");
            for (            GetField field : response.fields().values()) {
              if (field.values().isEmpty()) {
                continue;
              }
              if (field.values().size() == 1) {
                builder.field(field.name(),field.values().get(0));
              }
 else {
                builder.field(field.name());
                builder.startArray();
                for (                Object value : field.values()) {
                  builder.value(value);
                }
                builder.endArray();
              }
            }
            builder.endObject();
          }
          builder.endObject();
          channel.sendResponse(new JsonRestResponse(request,OK,builder));
        }
      }
 catch (      Exception e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new JsonThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
