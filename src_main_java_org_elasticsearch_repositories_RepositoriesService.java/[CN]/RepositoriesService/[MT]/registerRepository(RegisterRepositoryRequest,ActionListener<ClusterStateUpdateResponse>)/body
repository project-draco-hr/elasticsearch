{
  final RepositoryMetaData newRepositoryMetaData=new RepositoryMetaData(request.name,request.type,request.settings);
  clusterService.submitStateUpdateTask(request.cause,new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(request,listener){
    @Override protected ClusterStateUpdateResponse newResponse(    boolean acknowledged){
      return new ClusterStateUpdateResponse(acknowledged);
    }
    @Override public ClusterState execute(    ClusterState currentState){
      ensureRepositoryNotInUse(currentState,request.name);
      if (!registerRepository(newRepositoryMetaData)) {
        return currentState;
      }
      MetaData metaData=currentState.metaData();
      MetaData.Builder mdBuilder=MetaData.builder(currentState.metaData());
      RepositoriesMetaData repositories=metaData.custom(RepositoriesMetaData.TYPE);
      if (repositories == null) {
        logger.info("put repository [{}]",request.name);
        repositories=new RepositoriesMetaData(new RepositoryMetaData(request.name,request.type,request.settings));
      }
 else {
        boolean found=false;
        List<RepositoryMetaData> repositoriesMetaData=new ArrayList<>(repositories.repositories().size() + 1);
        for (        RepositoryMetaData repositoryMetaData : repositories.repositories()) {
          if (repositoryMetaData.name().equals(newRepositoryMetaData.name())) {
            found=true;
            repositoriesMetaData.add(newRepositoryMetaData);
          }
 else {
            repositoriesMetaData.add(repositoryMetaData);
          }
        }
        if (!found) {
          logger.info("put repository [{}]",request.name);
          repositoriesMetaData.add(new RepositoryMetaData(request.name,request.type,request.settings));
        }
 else {
          logger.info("update repository [{}]",request.name);
        }
        repositories=new RepositoriesMetaData(repositoriesMetaData.toArray(new RepositoryMetaData[repositoriesMetaData.size()]));
      }
      mdBuilder.putCustom(RepositoriesMetaData.TYPE,repositories);
      return ClusterState.builder(currentState).metaData(mdBuilder).build();
    }
    @Override public void onFailure(    String source,    Throwable t){
      logger.warn("failed to create repository [{}]",t,request.name);
      super.onFailure(source,t);
    }
    @Override public boolean mustAck(    DiscoveryNode discoveryNode){
      return discoveryNode.masterNode();
    }
  }
);
}
