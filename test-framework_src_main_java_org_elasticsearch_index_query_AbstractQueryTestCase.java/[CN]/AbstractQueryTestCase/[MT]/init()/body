{
  Version version=randomBoolean() ? Version.CURRENT : VersionUtils.randomVersionBetween(random(),Version.V_2_0_0_beta1,Version.CURRENT);
  Settings settings=Settings.settingsBuilder().put("name",AbstractQueryTestCase.class.toString()).put("path.home",createTempDir()).put(ScriptService.SCRIPT_AUTO_RELOAD_ENABLED_SETTING,false).build();
  Settings indexSettings=Settings.settingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED,version).build();
  index=new Index(randomAsciiOfLengthBetween(1,10));
  IndexSettings idxSettings=IndexSettingsModule.newIndexSettings(index,indexSettings);
  final TestClusterService clusterService=new TestClusterService();
  clusterService.setState(new ClusterState.Builder(clusterService.state()).metaData(new MetaData.Builder().put(new IndexMetaData.Builder(index.name()).settings(indexSettings).numberOfShards(1).numberOfReplicas(0))));
  final Client proxy=(Client)Proxy.newProxyInstance(Client.class.getClassLoader(),new Class[]{Client.class},clientInvocationHandler);
  injector=new ModulesBuilder().add(new EnvironmentModule(new Environment(settings)),new SettingsModule(settings,new SettingsFilter(settings)),new ThreadPoolModule(new ThreadPool(settings)),new IndicesModule(){
    @Override public void configure(){
      bindQueryParsersExtension();
      bindMapperExtension();
    }
  }
,new ScriptModule(settings){
    @Override protected void configure(){
      Settings settings=Settings.builder().put("path.home",createTempDir()).put(ScriptService.SCRIPT_AUTO_RELOAD_ENABLED_SETTING,false).build();
      MockScriptEngine mockScriptEngine=new MockScriptEngine();
      Multibinder<ScriptEngineService> multibinder=Multibinder.newSetBinder(binder(),ScriptEngineService.class);
      multibinder.addBinding().toInstance(mockScriptEngine);
      Set<ScriptEngineService> engines=new HashSet<>();
      engines.add(mockScriptEngine);
      List<ScriptContext.Plugin> customContexts=new ArrayList<>();
      bind(ScriptContextRegistry.class).toInstance(new ScriptContextRegistry(customContexts));
      try {
        ScriptService scriptService=new ScriptService(settings,new Environment(settings),engines,null,new ScriptContextRegistry(customContexts));
        bind(ScriptService.class).toInstance(scriptService);
      }
 catch (      IOException e) {
        throw new IllegalStateException("error while binding ScriptService",e);
      }
    }
  }
,new IndexSettingsModule(index,indexSettings),new AbstractModule(){
    @Override protected void configure(){
      bind(Client.class).toInstance(proxy);
      Multibinder.newSetBinder(binder(),ScoreFunctionParser.class);
      bind(ScoreFunctionParserMapper.class).asEagerSingleton();
      bind(ClusterService.class).toProvider(Providers.of(clusterService));
      bind(CircuitBreakerService.class).to(NoneCircuitBreakerService.class);
      bind(NamedWriteableRegistry.class).asEagerSingleton();
    }
  }
).createInjector();
  AnalysisService analysisService=new AnalysisRegistry(null,new Environment(settings)).build(idxSettings);
  ScriptService scriptService=injector.getInstance(ScriptService.class);
  SimilarityService similarityService=new SimilarityService(idxSettings,Collections.emptyMap());
  MapperRegistry mapperRegistry=injector.getInstance(MapperRegistry.class);
  MapperService mapperService=new MapperService(idxSettings,analysisService,similarityService,mapperRegistry);
  indexFieldDataService=new IndexFieldDataService(idxSettings,injector.getInstance(IndicesFieldDataCache.class),injector.getInstance(CircuitBreakerService.class),mapperService);
  BitsetFilterCache bitsetFilterCache=new BitsetFilterCache(idxSettings,new IndicesWarmer(idxSettings.getNodeSettings(),null),new BitsetFilterCache.Listener(){
    @Override public void onCache(    ShardId shardId,    Accountable accountable){
    }
    @Override public void onRemoval(    ShardId shardId,    Accountable accountable){
    }
  }
);
  indicesQueriesRegistry=injector.getInstance(IndicesQueriesRegistry.class);
  queryShardContext=new QueryShardContext(idxSettings,proxy,bitsetFilterCache,indexFieldDataService,mapperService,similarityService,scriptService,indicesQueriesRegistry);
  currentTypes=new String[randomIntBetween(0,5)];
  for (int i=0; i < currentTypes.length; i++) {
    String type=randomAsciiOfLengthBetween(1,10);
    mapperService.merge(type,new CompressedXContent(PutMappingRequest.buildFromSimplifiedDef(type,STRING_FIELD_NAME,"type=string",STRING_FIELD_NAME_2,"type=string",INT_FIELD_NAME,"type=integer",DOUBLE_FIELD_NAME,"type=double",BOOLEAN_FIELD_NAME,"type=boolean",DATE_FIELD_NAME,"type=date",OBJECT_FIELD_NAME,"type=object",GEO_POINT_FIELD_NAME,"type=geo_point,lat_lon=true,geohash=true,geohash_prefix=true",GEO_SHAPE_FIELD_NAME,"type=geo_shape").string()),false,false);
    mapperService.merge(type,new CompressedXContent("{\"properties\":{\"" + OBJECT_FIELD_NAME + "\":{\"type\":\"object\","+ "\"properties\":{\""+ DATE_FIELD_NAME+ "\":{\"type\":\"date\"},\""+ INT_FIELD_NAME+ "\":{\"type\":\"integer\"}}}}}"),false,false);
    currentTypes[i]=type;
  }
  namedWriteableRegistry=injector.getInstance(NamedWriteableRegistry.class);
}
