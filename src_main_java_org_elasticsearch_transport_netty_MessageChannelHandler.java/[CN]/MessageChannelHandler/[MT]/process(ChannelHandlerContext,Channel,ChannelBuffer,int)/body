{
  transportServiceAdapter.received(size + 4);
  int markedReaderIndex=buffer.readerIndex();
  int expectedIndexReader=markedReaderIndex + size;
  StreamInput streamIn=new ChannelBufferStreamInput(buffer,size);
  long requestId=buffer.readLong();
  byte status=buffer.readByte();
  boolean isRequest=TransportStreams.statusIsRequest(status);
  HandlesStreamInput wrappedStream;
  if (TransportStreams.statusIsCompress(status)) {
    wrappedStream=CachedStreamInput.cachedHandlesLzf(streamIn);
  }
 else {
    wrappedStream=CachedStreamInput.cachedHandles(streamIn);
  }
  if (isRequest) {
    String action=handleRequest(channel,wrappedStream,requestId);
    if (buffer.readerIndex() != expectedIndexReader) {
      if (buffer.readerIndex() < expectedIndexReader) {
        logger.warn("Message not fully read (request) for [{}] and action [{}], resetting",requestId,action);
      }
 else {
        logger.warn("Message read past expected size (request) for [{}] and action [{}], resetting",requestId,action);
      }
      buffer.readerIndex(expectedIndexReader);
    }
  }
 else {
    TransportResponseHandler handler=transportServiceAdapter.remove(requestId);
    if (handler != null) {
      if (TransportStreams.statusIsError(status)) {
        handlerResponseError(wrappedStream,handler);
      }
 else {
        handleResponse(wrappedStream,handler);
      }
    }
 else {
      buffer.readerIndex(markedReaderIndex + size);
    }
    if (buffer.readerIndex() != expectedIndexReader) {
      if (buffer.readerIndex() < expectedIndexReader) {
        logger.warn("Message not fully read (response) for [{}] handler {}, error [{}], resetting",requestId,handler,TransportStreams.statusIsError(status));
      }
 else {
        logger.warn("Message read past expected size (response) for [{}] handler {}, error [{}], resetting",requestId,handler,TransportStreams.statusIsError(status));
      }
      buffer.readerIndex(expectedIndexReader);
    }
  }
  wrappedStream.cleanHandles();
}
