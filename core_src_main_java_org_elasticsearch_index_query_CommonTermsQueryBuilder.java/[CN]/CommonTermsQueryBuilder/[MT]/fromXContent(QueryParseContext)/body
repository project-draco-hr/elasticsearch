{
  XContentParser parser=parseContext.parser();
  String fieldName=null;
  Object text=null;
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  String analyzer=null;
  String lowFreqMinimumShouldMatch=null;
  String highFreqMinimumShouldMatch=null;
  boolean disableCoord=CommonTermsQueryBuilder.DEFAULT_DISABLE_COORD;
  Operator highFreqOperator=CommonTermsQueryBuilder.DEFAULT_HIGH_FREQ_OCCUR;
  Operator lowFreqOperator=CommonTermsQueryBuilder.DEFAULT_LOW_FREQ_OCCUR;
  float cutoffFrequency=CommonTermsQueryBuilder.DEFAULT_CUTOFF_FREQ;
  String queryName=null;
  XContentParser.Token token;
  String currentFieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (parseContext.isDeprecatedSetting(currentFieldName)) {
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if (fieldName != null) {
        throw new ParsingException(parser.getTokenLocation(),"[common] query doesn't support multiple fields, found [" + fieldName + "] and ["+ currentFieldName+ "]");
      }
      fieldName=currentFieldName;
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          currentFieldName=parser.currentName();
        }
 else         if (token == XContentParser.Token.START_OBJECT) {
          if (parseContext.getParseFieldMatcher().match(currentFieldName,MINIMUM_SHOULD_MATCH_FIELD)) {
            String innerFieldName=null;
            while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
              if (token == XContentParser.Token.FIELD_NAME) {
                innerFieldName=parser.currentName();
              }
 else               if (token.isValue()) {
                if (parseContext.getParseFieldMatcher().match(innerFieldName,LOW_FREQ_FIELD)) {
                  lowFreqMinimumShouldMatch=parser.text();
                }
 else                 if (parseContext.getParseFieldMatcher().match(innerFieldName,HIGH_FREQ_FIELD)) {
                  highFreqMinimumShouldMatch=parser.text();
                }
 else {
                  throw new ParsingException(parser.getTokenLocation(),"[" + CommonTermsQueryBuilder.NAME + "] query does not support ["+ innerFieldName+ "] for ["+ currentFieldName+ "]");
                }
              }
 else {
                throw new ParsingException(parser.getTokenLocation(),"[" + CommonTermsQueryBuilder.NAME + "] unexpected token type ["+ token+ "] after ["+ innerFieldName+ "]");
              }
            }
          }
 else {
            throw new ParsingException(parser.getTokenLocation(),"[" + CommonTermsQueryBuilder.NAME + "] query does not support ["+ currentFieldName+ "]");
          }
        }
 else         if (token.isValue()) {
          if (parseContext.getParseFieldMatcher().match(currentFieldName,QUERY_FIELD)) {
            text=parser.objectText();
          }
 else           if (parseContext.getParseFieldMatcher().match(currentFieldName,ANALYZER_FIELD)) {
            analyzer=parser.text();
          }
 else           if (parseContext.getParseFieldMatcher().match(currentFieldName,DISABLE_COORD_FIELD)) {
            disableCoord=parser.booleanValue();
          }
 else           if (parseContext.getParseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.BOOST_FIELD)) {
            boost=parser.floatValue();
          }
 else           if (parseContext.getParseFieldMatcher().match(currentFieldName,HIGH_FREQ_OPERATOR_FIELD)) {
            highFreqOperator=Operator.fromString(parser.text());
          }
 else           if (parseContext.getParseFieldMatcher().match(currentFieldName,LOW_FREQ_OPERATOR_FIELD)) {
            lowFreqOperator=Operator.fromString(parser.text());
          }
 else           if (parseContext.getParseFieldMatcher().match(currentFieldName,MINIMUM_SHOULD_MATCH_FIELD)) {
            lowFreqMinimumShouldMatch=parser.text();
          }
 else           if (parseContext.getParseFieldMatcher().match(currentFieldName,CUTOFF_FREQUENCY_FIELD)) {
            cutoffFrequency=parser.floatValue();
          }
 else           if (parseContext.getParseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.NAME_FIELD)) {
            queryName=parser.text();
          }
 else {
            throw new ParsingException(parser.getTokenLocation(),"[" + CommonTermsQueryBuilder.NAME + "] query does not support ["+ currentFieldName+ "]");
          }
        }
      }
    }
 else {
      fieldName=parser.currentName();
      text=parser.objectText();
    }
  }
  return Optional.of(new CommonTermsQueryBuilder(fieldName,text).lowFreqMinimumShouldMatch(lowFreqMinimumShouldMatch).highFreqMinimumShouldMatch(highFreqMinimumShouldMatch).analyzer(analyzer).highFreqOperator(highFreqOperator).lowFreqOperator(lowFreqOperator).disableCoord(disableCoord).cutoffFrequency(cutoffFrequency).boost(boost).queryName(queryName));
}
