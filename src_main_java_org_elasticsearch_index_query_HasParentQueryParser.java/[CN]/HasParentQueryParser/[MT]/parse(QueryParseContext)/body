{
  XContentParser parser=parseContext.parser();
  Query innerQuery=null;
  boolean queryFound=false;
  float boost=1.0f;
  String parentType=null;
  boolean score=false;
  String currentFieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("query".equals(currentFieldName)) {
        String[] origTypes=QueryParseContext.setTypesWithPrevious(parentType == null ? null : new String[]{parentType});
        try {
          innerQuery=parseContext.parseInnerQuery();
          queryFound=true;
        }
  finally {
          QueryParseContext.setTypes(origTypes);
        }
      }
 else {
        throw new QueryParsingException(parseContext.index(),"[has_parent] query does not support [" + currentFieldName + "]");
      }
    }
 else     if (token.isValue()) {
      if ("type".equals(currentFieldName) || "parent_type".equals(currentFieldName) || "parentType".equals(currentFieldName)) {
        parentType=parser.text();
      }
 else       if ("_scope".equals(currentFieldName)) {
        throw new QueryParsingException(parseContext.index(),"the [_scope] support in [has_parent] query has been removed, use a filter as a facet_filter in the relevant global facet");
      }
 else       if ("score_type".equals(currentFieldName) || "scoreType".equals(currentFieldName)) {
        String scoreTypeValue=parser.text();
        if ("score".equals(scoreTypeValue)) {
          score=true;
        }
 else         if ("none".equals(scoreTypeValue)) {
          score=false;
        }
      }
 else       if ("score_mode".equals(currentFieldName) || "scoreMode".equals(currentFieldName)) {
        String scoreModeValue=parser.text();
        if ("score".equals(scoreModeValue)) {
          score=true;
        }
 else         if ("none".equals(scoreModeValue)) {
          score=false;
        }
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=parser.floatValue();
      }
 else {
        throw new QueryParsingException(parseContext.index(),"[has_parent] query does not support [" + currentFieldName + "]");
      }
    }
  }
  if (!queryFound) {
    throw new QueryParsingException(parseContext.index(),"[has_parent] query requires 'query' field");
  }
  if (innerQuery == null) {
    return null;
  }
  if (parentType == null) {
    throw new QueryParsingException(parseContext.index(),"[has_parent] query requires 'parent_type' field");
  }
  DocumentMapper parentDocMapper=parseContext.mapperService().documentMapper(parentType);
  if (parentDocMapper == null) {
    throw new QueryParsingException(parseContext.index(),"[has_parent] query configured 'parent_type' [" + parentType + "] is not a valid type");
  }
  List<String> childTypes=new ArrayList<String>(2);
  for (  DocumentMapper documentMapper : parseContext.mapperService()) {
    ParentFieldMapper parentFieldMapper=documentMapper.parentFieldMapper();
    if (parentFieldMapper == null) {
      continue;
    }
    if (parentDocMapper.type().equals(parentFieldMapper.type())) {
      childTypes.add(documentMapper.type());
    }
  }
  Filter childFilter;
  if (childTypes.size() == 1) {
    DocumentMapper documentMapper=parseContext.mapperService().documentMapper(childTypes.get(0));
    childFilter=parseContext.cacheFilter(documentMapper.typeFilter(),null);
  }
 else {
    XBooleanFilter childrenFilter=new XBooleanFilter();
    for (    String childType : childTypes) {
      DocumentMapper documentMapper=parseContext.mapperService().documentMapper(childType);
      Filter filter=parseContext.cacheFilter(documentMapper.typeFilter(),null);
      childrenFilter.add(filter,BooleanClause.Occur.SHOULD);
    }
    childFilter=childrenFilter;
  }
  innerQuery.setBoost(boost);
  innerQuery=new XFilteredQuery(innerQuery,parseContext.cacheFilter(parentDocMapper.typeFilter(),null));
  SearchContext searchContext=SearchContext.current();
  if (searchContext == null) {
    throw new ElasticSearchIllegalStateException("[has_parent] Can't execute, search context not set.");
  }
  Query query;
  if (score) {
    ParentQuery parentQuery=new ParentQuery(searchContext,innerQuery,parentType,childTypes,childFilter);
    searchContext.addRewrite(parentQuery);
    query=parentQuery;
  }
 else {
    HasParentFilter hasParentFilter=HasParentFilter.create(innerQuery,parentType,searchContext);
    searchContext.addRewrite(hasParentFilter);
    query=new ConstantScoreQuery(hasParentFilter);
  }
  query.setBoost(boost);
  return query;
}
