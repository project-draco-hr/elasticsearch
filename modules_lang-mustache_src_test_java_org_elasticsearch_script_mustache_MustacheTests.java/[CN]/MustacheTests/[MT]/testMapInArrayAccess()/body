{
  String template="{{data.0.key}} {{data.1.key}}";
  CompiledScript mustache=new CompiledScript(ScriptService.ScriptType.INLINE,"inline","mustache",engine.compile(null,template,Collections.emptyMap()));
  Map<String,Object> vars=new HashMap<>();
  Object data=randomFrom(new Object[]{singletonMap("key","foo"),singletonMap("key","bar")},Arrays.asList(singletonMap("key","foo"),singletonMap("key","bar")));
  vars.put("data",data);
  Object output=engine.executable(mustache,vars).run();
  assertThat(output,notNullValue());
  assertThat(output,instanceOf(BytesReference.class));
  BytesReference bytes=(BytesReference)output;
  assertThat(bytes.toUtf8(),equalTo("foo bar"));
  Set<Object> setData=new HashSet<>();
  setData.add(singletonMap("key","foo"));
  setData.add(singletonMap("key","bar"));
  vars.put("data",setData);
  output=engine.executable(mustache,vars).run();
  assertThat(output,notNullValue());
  assertThat(output,instanceOf(BytesReference.class));
  bytes=(BytesReference)output;
  assertThat(bytes.toUtf8(),both(containsString("foo")).and(containsString("bar")));
}
