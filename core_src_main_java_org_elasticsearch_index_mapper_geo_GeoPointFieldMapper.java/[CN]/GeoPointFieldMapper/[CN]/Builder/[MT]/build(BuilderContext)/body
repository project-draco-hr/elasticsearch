{
  ContentPath.Type origPathType=context.path().pathType();
  context.path().pathType(pathType);
  DoubleFieldMapper latMapper=null;
  DoubleFieldMapper lonMapper=null;
  GeoPointFieldType geoPointFieldType=(GeoPointFieldType)fieldType;
  context.path().add(name);
  if (enableLatLon) {
    NumberFieldMapper.Builder<?,?> latMapperBuilder=doubleField(Names.LAT).includeInAll(false);
    NumberFieldMapper.Builder<?,?> lonMapperBuilder=doubleField(Names.LON).includeInAll(false);
    if (precisionStep != null) {
      latMapperBuilder.precisionStep(precisionStep);
      lonMapperBuilder.precisionStep(precisionStep);
    }
    latMapper=(DoubleFieldMapper)latMapperBuilder.includeInAll(false).store(fieldType.stored()).docValues(false).build(context);
    lonMapper=(DoubleFieldMapper)lonMapperBuilder.includeInAll(false).store(fieldType.stored()).docValues(false).build(context);
    geoPointFieldType.setLatLonEnabled(latMapper.fieldType(),lonMapper.fieldType());
  }
  StringFieldMapper geohashMapper=null;
  if (enableGeoHash || enableGeohashPrefix) {
    geohashMapper=stringField(Names.GEOHASH).index(true).tokenized(false).includeInAll(false).omitNorms(true).indexOptions(IndexOptions.DOCS).build(context);
    geoPointFieldType.setGeohashEnabled(geohashMapper.fieldType(),geoHashPrecision,enableGeohashPrefix);
  }
  context.path().remove();
  context.path().pathType(origPathType);
  fieldType.setTokenized(false);
  setupFieldType(context);
  fieldType.setHasDocValues(false);
  defaultFieldType.setHasDocValues(false);
  return new GeoPointFieldMapper(name,fieldType,defaultFieldType,context.indexSettings(),origPathType,latMapper,lonMapper,geohashMapper,multiFieldsBuilder.build(this,context),ignoreMalformed(context),coerce(context));
}
