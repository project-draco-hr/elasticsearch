{
  super(settings);
  this.fileChunkSize=componentSettings.getAsBytesSize("file_chunk_size",settings.getAsBytesSize("index.shard.recovery.file_chunk_size",new ByteSizeValue(100,ByteSizeUnit.KB)));
  this.translogOps=componentSettings.getAsInt("translog_ops",settings.getAsInt("index.shard.recovery.translog_ops",1000));
  this.translogSize=componentSettings.getAsBytesSize("translog_size",settings.getAsBytesSize("index.shard.recovery.translog_size",new ByteSizeValue(100,ByteSizeUnit.KB)));
  this.compress=componentSettings.getAsBoolean("compress",true);
  this.concurrentStreams=componentSettings.getAsInt("concurrent_streams",settings.getAsInt("index.shard.recovery.concurrent_streams",5));
  this.concurrentStreamPool=(ThreadPoolExecutor)DynamicExecutors.newScalingThreadPool(1,concurrentStreams,TimeValue.timeValueSeconds(5).millis(),EsExecutors.daemonThreadFactory(settings,"[recovery_stream]"));
  logger.debug("using concurrent_streams [{}], file_chunk_size [{}], translog_size [{}], translog_ops [{}], and compress [{}]",concurrentStreams,fileChunkSize,translogSize,translogOps,compress);
  nodeSettingsService.addListener(new ApplySettings());
}
