{
  ByteSizeValue maxSizePerSec=settings.getAsBytesSize("indices.recovery.max_size_per_sec",RecoverySettings.this.maxSizePerSec);
  if (!Objects.equal(maxSizePerSec,RecoverySettings.this.maxSizePerSec)) {
    logger.info("updating [indices.recovery.max_size_per_sec] from [{}] to [{}]",RecoverySettings.this.maxSizePerSec,maxSizePerSec);
    RecoverySettings.this.maxSizePerSec=maxSizePerSec;
    if (maxSizePerSec.bytes() <= 0) {
      rateLimiter=null;
    }
 else     if (rateLimiter != null) {
      rateLimiter.setMaxRate(maxSizePerSec.mbFrac());
    }
 else {
      rateLimiter=new RateLimiter(maxSizePerSec.mbFrac());
    }
  }
  ByteSizeValue fileChunkSize=settings.getAsBytesSize("indices.recovery.file_chunk_size",RecoverySettings.this.fileChunkSize);
  if (!fileChunkSize.equals(RecoverySettings.this.fileChunkSize)) {
    logger.info("updating [indices.recovery.file_chunk_size] from [{}] to [{}]",RecoverySettings.this.fileChunkSize,fileChunkSize);
    RecoverySettings.this.fileChunkSize=fileChunkSize;
  }
  int translogOps=settings.getAsInt("indices.recovery.translog_ops",RecoverySettings.this.translogOps);
  if (translogOps != RecoverySettings.this.translogOps) {
    logger.info("updating [indices.recovery.translog_ops] from [{}] to [{}]",RecoverySettings.this.translogOps,translogOps);
    RecoverySettings.this.translogOps=translogOps;
  }
  ByteSizeValue translogSize=settings.getAsBytesSize("indices.recovery.translog_size",RecoverySettings.this.translogSize);
  if (!translogSize.equals(RecoverySettings.this.translogSize)) {
    logger.info("updating [indices.recovery.translog_size] from [{}] to [{}]",RecoverySettings.this.translogSize,translogSize);
    RecoverySettings.this.translogSize=translogSize;
  }
  boolean compress=settings.getAsBoolean("indices.recovery.compress",RecoverySettings.this.compress);
  if (compress != RecoverySettings.this.compress) {
    logger.info("updating [indices.recovery.compress] from [{}] to [{}]",RecoverySettings.this.compress,compress);
    RecoverySettings.this.compress=compress;
  }
  int concurrentStreams=settings.getAsInt("indices.recovery.concurrent_streams",RecoverySettings.this.concurrentStreams);
  if (concurrentStreams != RecoverySettings.this.concurrentStreams) {
    logger.info("updating [indices.recovery.concurrent_streams] from [{}] to [{}]",RecoverySettings.this.concurrentStreams,concurrentStreams);
    RecoverySettings.this.concurrentStreams=concurrentStreams;
    RecoverySettings.this.concurrentStreamPool.setMaximumPoolSize(concurrentStreams);
  }
}
