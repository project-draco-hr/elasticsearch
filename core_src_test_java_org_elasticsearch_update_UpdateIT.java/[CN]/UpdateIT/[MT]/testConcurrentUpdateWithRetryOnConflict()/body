{
  final boolean useBulkApi=randomBoolean();
  createTestIndex();
  ensureGreen();
  int numberOfThreads=scaledRandomIntBetween(2,5);
  final CountDownLatch latch=new CountDownLatch(numberOfThreads);
  final CountDownLatch startLatch=new CountDownLatch(1);
  final int numberOfUpdatesPerThread=scaledRandomIntBetween(100,500);
  final List<Throwable> failures=new CopyOnWriteArrayList<>();
  for (int i=0; i < numberOfThreads; i++) {
    Runnable r=new Runnable(){
      @Override public void run(){
        try {
          startLatch.await();
          for (int i=0; i < numberOfUpdatesPerThread; i++) {
            if (i % 100 == 0) {
              logger.debug("Client [{}] issued [{}] of [{}] requests",Thread.currentThread().getName(),i,numberOfUpdatesPerThread);
            }
            if (useBulkApi) {
              UpdateRequestBuilder updateRequestBuilder=client().prepareUpdate(indexOrAlias(),"type1",Integer.toString(i)).setScript(new Script("field",ScriptService.ScriptType.INLINE,"field_inc",null)).setRetryOnConflict(Integer.MAX_VALUE).setUpsert(jsonBuilder().startObject().field("field",1).endObject());
              client().prepareBulk().add(updateRequestBuilder).execute().actionGet();
            }
 else {
              client().prepareUpdate(indexOrAlias(),"type1",Integer.toString(i)).setScript(new Script("field",ScriptService.ScriptType.INLINE,"field_inc",null)).setRetryOnConflict(Integer.MAX_VALUE).setUpsert(jsonBuilder().startObject().field("field",1).endObject()).execute().actionGet();
            }
          }
          logger.info("Client [{}] issued all [{}] requests.",Thread.currentThread().getName(),numberOfUpdatesPerThread);
        }
 catch (        InterruptedException e) {
          logger.warn("Test was forcefully stopped. Client [{}] may still have outstanding requests.",Thread.currentThread().getName());
          failures.add(e);
          Thread.currentThread().interrupt();
        }
catch (        Throwable e) {
          failures.add(e);
        }
 finally {
          latch.countDown();
        }
      }
    }
;
    Thread updater=new Thread(r);
    updater.setName("UpdateIT-Client-" + i);
    updater.start();
  }
  startLatch.countDown();
  latch.await();
  for (  Throwable throwable : failures) {
    logger.info("Captured failure on concurrent update:",throwable);
  }
  assertThat(failures.size(),equalTo(0));
  for (int i=0; i < numberOfUpdatesPerThread; i++) {
    GetResponse response=client().prepareGet("test","type1",Integer.toString(i)).execute().actionGet();
    assertThat(response.getId(),equalTo(Integer.toString(i)));
    assertThat(response.isExists(),equalTo(true));
    assertThat(response.getVersion(),equalTo((long)numberOfThreads));
    assertThat((Integer)response.getSource().get("field"),equalTo(numberOfThreads));
  }
}
