{
  createTestIndex();
  ensureGreen();
  try {
    client().prepareUpdate(indexOrAlias(),"type1","1").setScript(new Script("field",ScriptService.ScriptType.INLINE,"field_inc",null)).execute().actionGet();
    fail();
  }
 catch (  DocumentMissingException e) {
  }
  client().prepareIndex("test","type1","1").setSource("field",1).execute().actionGet();
  UpdateResponse updateResponse=client().prepareUpdate(indexOrAlias(),"type1","1").setScript(new Script("field",ScriptService.ScriptType.INLINE,"field_inc",null)).execute().actionGet();
  assertThat(updateResponse.getVersion(),equalTo(2L));
  assertEquals(DocWriteResponse.Result.UPDATED,updateResponse.getResult());
  assertThat(updateResponse.getIndex(),equalTo("test"));
  for (int i=0; i < 5; i++) {
    GetResponse getResponse=client().prepareGet("test","type1","1").execute().actionGet();
    assertThat(getResponse.getSourceAsMap().get("field").toString(),equalTo("2"));
  }
  Map<String,Object> params=new HashMap<>();
  params.put("inc",3);
  updateResponse=client().prepareUpdate(indexOrAlias(),"type1","1").setScript(new Script("field",ScriptService.ScriptType.INLINE,"field_inc",params)).execute().actionGet();
  assertThat(updateResponse.getVersion(),equalTo(3L));
  assertEquals(DocWriteResponse.Result.UPDATED,updateResponse.getResult());
  assertThat(updateResponse.getIndex(),equalTo("test"));
  for (int i=0; i < 5; i++) {
    GetResponse getResponse=client().prepareGet("test","type1","1").execute().actionGet();
    assertThat(getResponse.getSourceAsMap().get("field").toString(),equalTo("5"));
  }
  updateResponse=client().prepareUpdate(indexOrAlias(),"type1","1").setScript(new Script("",ScriptService.ScriptType.INLINE,"put_values",Collections.singletonMap("_ctx",Collections.singletonMap("op","none")))).execute().actionGet();
  assertThat(updateResponse.getVersion(),equalTo(3L));
  assertEquals(DocWriteResponse.Result.NOOP,updateResponse.getResult());
  assertThat(updateResponse.getIndex(),equalTo("test"));
  for (int i=0; i < 5; i++) {
    GetResponse getResponse=client().prepareGet("test","type1","1").execute().actionGet();
    assertThat(getResponse.getSourceAsMap().get("field").toString(),equalTo("5"));
  }
  updateResponse=client().prepareUpdate(indexOrAlias(),"type1","1").setScript(new Script("",ScriptService.ScriptType.INLINE,"put_values",Collections.singletonMap("_ctx",Collections.singletonMap("op","delete")))).execute().actionGet();
  assertThat(updateResponse.getVersion(),equalTo(4L));
  assertEquals(DocWriteResponse.Result.DELETED,updateResponse.getResult());
  assertThat(updateResponse.getIndex(),equalTo("test"));
  for (int i=0; i < 5; i++) {
    GetResponse getResponse=client().prepareGet("test","type1","1").execute().actionGet();
    assertThat(getResponse.isExists(),equalTo(false));
  }
  client().prepareIndex("test","type1","1").setSource("field",1).execute().actionGet();
  updateResponse=client().prepareUpdate(indexOrAlias(),"type1","1").setScript(new Script("field",ScriptService.ScriptType.INLINE,"field_inc",null)).setFields("field").setFetchSource(true).execute().actionGet();
  assertThat(updateResponse.getIndex(),equalTo("test"));
  assertThat(updateResponse.getGetResult(),notNullValue());
  assertThat(updateResponse.getGetResult().getIndex(),equalTo("test"));
  assertThat(updateResponse.getGetResult().sourceRef(),notNullValue());
  assertThat(updateResponse.getGetResult().field("field").getValue(),notNullValue());
  client().prepareIndex("test","type1","1").setSource("field1",1,"field2",2).execute().actionGet();
  updateResponse=client().prepareUpdate(indexOrAlias(),"type1","1").setScript(new Script("field1",ScriptService.ScriptType.INLINE,"field_inc",null)).setFetchSource("field1","field2").get();
  assertThat(updateResponse.getIndex(),equalTo("test"));
  assertThat(updateResponse.getGetResult(),notNullValue());
  assertThat(updateResponse.getGetResult().getIndex(),equalTo("test"));
  assertThat(updateResponse.getGetResult().sourceRef(),notNullValue());
  assertThat(updateResponse.getGetResult().field("field1"),nullValue());
  assertThat(updateResponse.getGetResult().sourceAsMap().size(),equalTo(1));
  assertThat(updateResponse.getGetResult().sourceAsMap().get("field1"),equalTo(2));
  client().prepareIndex("test","type1","1").setSource("field",1).execute().actionGet();
  updateResponse=client().prepareUpdate(indexOrAlias(),"type1","1").setDoc(XContentFactory.jsonBuilder().startObject().field("field2",2).endObject()).execute().actionGet();
  for (int i=0; i < 5; i++) {
    GetResponse getResponse=client().prepareGet("test","type1","1").execute().actionGet();
    assertThat(getResponse.getSourceAsMap().get("field").toString(),equalTo("1"));
    assertThat(getResponse.getSourceAsMap().get("field2").toString(),equalTo("2"));
  }
  updateResponse=client().prepareUpdate(indexOrAlias(),"type1","1").setDoc(XContentFactory.jsonBuilder().startObject().field("field",3).endObject()).execute().actionGet();
  for (int i=0; i < 5; i++) {
    GetResponse getResponse=client().prepareGet("test","type1","1").execute().actionGet();
    assertThat(getResponse.getSourceAsMap().get("field").toString(),equalTo("3"));
    assertThat(getResponse.getSourceAsMap().get("field2").toString(),equalTo("2"));
  }
  Map<String,Object> testMap=new HashMap<>();
  Map<String,Object> testMap2=new HashMap<>();
  Map<String,Object> testMap3=new HashMap<>();
  testMap3.put("commonkey",testMap);
  testMap3.put("map3",5);
  testMap2.put("map2",6);
  testMap.put("commonkey",testMap2);
  testMap.put("map1",8);
  client().prepareIndex("test","type1","1").setSource("map",testMap).execute().actionGet();
  updateResponse=client().prepareUpdate(indexOrAlias(),"type1","1").setDoc(XContentFactory.jsonBuilder().startObject().field("map",testMap3).endObject()).execute().actionGet();
  for (int i=0; i < 5; i++) {
    GetResponse getResponse=client().prepareGet("test","type1","1").execute().actionGet();
    Map map1=(Map)getResponse.getSourceAsMap().get("map");
    assertThat(map1.size(),equalTo(3));
    assertThat(map1.containsKey("map1"),equalTo(true));
    assertThat(map1.containsKey("map3"),equalTo(true));
    assertThat(map1.containsKey("commonkey"),equalTo(true));
    Map map2=(Map)map1.get("commonkey");
    assertThat(map2.size(),equalTo(3));
    assertThat(map2.containsKey("map1"),equalTo(true));
    assertThat(map2.containsKey("map2"),equalTo(true));
    assertThat(map2.containsKey("commonkey"),equalTo(true));
  }
}
