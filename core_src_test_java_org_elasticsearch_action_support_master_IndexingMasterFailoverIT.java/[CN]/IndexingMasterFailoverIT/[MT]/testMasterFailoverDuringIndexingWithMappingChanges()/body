{
  logger.info("--> start 4 nodes, 3 master, 1 data");
  final Settings sharedSettings=Settings.builder().put(FaultDetection.SETTING_PING_TIMEOUT,"1s").put(FaultDetection.SETTING_PING_RETRIES,"1").put("discovery.zen.join_timeout","10s").put(DiscoverySettings.PUBLISH_TIMEOUT_SETTING.getKey(),"1s").put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(),2).build();
  internalCluster().startMasterOnlyNodesAsync(3,sharedSettings).get();
  String dataNode=internalCluster().startDataOnlyNode(sharedSettings);
  logger.info("--> wait for all nodes to join the cluster");
  ensureStableCluster(4);
  client().admin().indices().prepareCreate("myindex").setSettings(Settings.builder().put("index.number_of_shards",1).put("index.number_of_replicas",0)).get();
  ensureGreen("myindex");
  final CyclicBarrier barrier=new CyclicBarrier(2);
  Thread indexingThread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        barrier.await();
      }
 catch (      InterruptedException e) {
        logger.warn("Barrier interrupted",e);
        return;
      }
catch (      BrokenBarrierException e) {
        logger.warn("Broken barrier",e);
        return;
      }
      for (int i=0; i < 10; i++) {
        IndexResponse response=client(dataNode).prepareIndex("myindex","mytype").setSource("field_" + i,"val").get();
        assertThat(response.isCreated(),equalTo(true));
      }
    }
  }
);
  indexingThread.setName("indexingThread");
  indexingThread.start();
  barrier.await();
  String master=internalCluster().getMasterName();
  Set<String> otherNodes=new HashSet<>(Arrays.asList(internalCluster().getNodeNames()));
  otherNodes.remove(master);
  NetworkPartition partition=new NetworkDisconnectPartition(Collections.singleton(master),otherNodes,random());
  internalCluster().setDisruptionScheme(partition);
  logger.info("--> disrupting network");
  partition.startDisrupting();
  logger.info("--> waiting for new master to be elected");
  ensureStableCluster(3,dataNode);
  partition.stopDisrupting();
  logger.info("--> waiting to heal");
  ensureStableCluster(4);
  indexingThread.join();
  ensureGreen("myindex");
  refresh();
  assertThat(client().prepareSearch("myindex").get().getHits().getTotalHits(),equalTo(10L));
}
