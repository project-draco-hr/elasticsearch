{
  final String shardsAllocatorType=settings.get(AllocationModule.SHARDS_ALLOCATOR_TYPE_KEY,AllocationModule.BALANCED_ALLOCATOR);
  final Class<? extends ShardsAllocator> shardsAllocator=shardsAllocators.get(shardsAllocatorType);
  if (shardsAllocator == null) {
    throw new IllegalArgumentException("Unknown ShardsAllocator type [" + shardsAllocatorType + "]");
  }
 else   if (shardsAllocatorType.equals(EVEN_SHARD_COUNT_ALLOCATOR)) {
    final ESLogger logger=Loggers.getLogger(getClass(),settings);
    logger.warn("{} allocator has been removed in 2.0 using {} instead",AllocationModule.EVEN_SHARD_COUNT_ALLOCATOR,AllocationModule.BALANCED_ALLOCATOR);
  }
  bind(ShardsAllocator.class).to(shardsAllocator).asEagerSingleton();
  Multibinder<AllocationDecider> allocationMultibinder=Multibinder.newSetBinder(binder(),AllocationDecider.class);
  for (  Class<? extends AllocationDecider> allocation : allocationDeciders) {
    allocationMultibinder.addBinding().to(allocation).asEagerSingleton();
  }
  bind(GatewayAllocator.class).asEagerSingleton();
  bind(AllocationDeciders.class).asEagerSingleton();
  bind(AllocationService.class).asEagerSingleton();
}
