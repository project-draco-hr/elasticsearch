{
  AllocationService strategy=createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries",10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE,"always").build());
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").numberOfShards(2).numberOfReplicas(1)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build();
  logger.info("Adding two nodes and performing rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1")).put(newNode("node2"))).build();
  RoutingTable prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  logger.info("Start the shards (primaries)");
  RoutingNodes routingNodes=clusterState.routingNodes();
  prevRoutingTable=routingTable;
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(2));
  for (int i=0; i < routingTable.index("test").shards().size(); i++) {
    assertThat(routingTable.index("test").shard(i).size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).shards().size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).primaryShard().state(),equalTo(STARTED));
    assertThat(routingTable.index("test").shard(i).primaryShard().currentNodeId(),anyOf(equalTo("node1"),equalTo("node2")));
    assertThat(routingTable.index("test").shard(i).replicaShards().size(),equalTo(1));
    assertThat(routingTable.index("test").shard(i).replicaShards().get(0).state(),equalTo(INITIALIZING));
    assertThat(routingTable.index("test").shard(i).replicaShards().get(0).currentNodeId(),anyOf(equalTo("node2"),equalTo("node1")));
  }
  logger.info("Start the shards (backups)");
  routingNodes=clusterState.routingNodes();
  prevRoutingTable=routingTable;
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(2));
  for (int i=0; i < routingTable.index("test").shards().size(); i++) {
    assertThat(routingTable.index("test").shard(i).size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).shards().size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).primaryShard().state(),equalTo(STARTED));
    assertThat(routingTable.index("test").shard(i).primaryShard().currentNodeId(),anyOf(equalTo("node1"),equalTo("node2")));
    assertThat(routingTable.index("test").shard(i).replicaShards().size(),equalTo(1));
    assertThat(routingTable.index("test").shard(i).replicaShards().get(0).state(),equalTo(STARTED));
    assertThat(routingTable.index("test").shard(i).replicaShards().get(0).currentNodeId(),anyOf(equalTo("node2"),equalTo("node1")));
  }
  logger.info("Adding third node and reroute");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).put(newNode("node3"))).build();
  prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  routingNodes=clusterState.routingNodes();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(2));
  assertThat(routingNodes.node("node1").numberOfShardsWithState(STARTED,RELOCATING),equalTo(2));
  assertThat(routingNodes.node("node1").numberOfShardsWithState(STARTED),lessThan(3));
  assertThat(routingNodes.node("node2").numberOfShardsWithState(STARTED,RELOCATING),equalTo(2));
  assertThat(routingNodes.node("node2").numberOfShardsWithState(STARTED),lessThan(3));
  assertThat(routingNodes.node("node3").numberOfShardsWithState(INITIALIZING),equalTo(1));
  logger.info("Fail the shards on node 3");
  ShardRouting shardToFail=routingNodes.node("node3").get(0);
  routingNodes=clusterState.routingNodes();
  prevRoutingTable=routingTable;
  routingTable=strategy.applyFailedShard(clusterState,new ImmutableShardRouting(shardToFail)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  routingNodes=clusterState.routingNodes();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(2));
  assertThat(routingNodes.node("node1").numberOfShardsWithState(STARTED,RELOCATING),equalTo(2));
  assertThat(routingNodes.node("node1").numberOfShardsWithState(STARTED),lessThan(3));
  assertThat(routingNodes.node("node2").numberOfShardsWithState(STARTED,RELOCATING),equalTo(2));
  assertThat(routingNodes.node("node2").numberOfShardsWithState(STARTED),lessThan(3));
  assertThat(routingNodes.node("node3").numberOfShardsWithState(INITIALIZING),equalTo(1));
  assertThat(routingNodes.node("node3").get(0).shardId(),not(equalTo(shardToFail.shardId())));
}
