{
  createIndex("idx");
  IndexRequestBuilder[] builders=new IndexRequestBuilder[randomInt(30)];
  for (int i=0; i < builders.length; i++) {
    String name="name_" + randomIntBetween(1,10);
    builders[i]=client().prepareIndex("idx","type").setSource(jsonBuilder().startObject().field("name",name).field("value",randomInt()).endObject());
  }
  indexRandom(true,builders);
  ensureSearchable();
  final Map<String,Object> nestedMetaData=new HashMap<String,Object>(){
{
      put("nested","value");
    }
  }
;
  Map<String,Object> metaData=new HashMap<String,Object>(){
{
      put("key","value");
      put("numeric",1.2);
      put("bool",true);
      put("complex",nestedMetaData);
    }
  }
;
  MaxBucketPipelineAggregatorBuilder maxBucketBuilder=maxBucket("the_max_bucket","the_terms>the_sum");
  maxBucketBuilder.setMetaData(metaData);
  SearchResponse response=client().prepareSearch("idx").addAggregation(terms("the_terms").setMetaData(metaData).field("name").subAggregation(sum("the_sum").setMetaData(metaData).field("value"))).addAggregation(maxBucketBuilder).execute().actionGet();
  assertSearchResponse(response);
  Aggregations aggs=response.getAggregations();
  assertNotNull(aggs);
  Terms terms=aggs.get("the_terms");
  assertNotNull(terms);
  assertMetaData(terms.getMetaData());
  List<? extends Terms.Bucket> buckets=terms.getBuckets();
  for (  Terms.Bucket bucket : buckets) {
    Aggregations subAggs=bucket.getAggregations();
    assertNotNull(subAggs);
    Sum sum=subAggs.get("the_sum");
    assertNotNull(sum);
    assertMetaData(sum.getMetaData());
  }
  InternalBucketMetricValue maxBucket=aggs.get("the_max_bucket");
  assertNotNull(maxBucket);
  assertMetaData(maxBucket.getMetaData());
}
