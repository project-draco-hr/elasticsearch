{
  Natives.tryMlockall();
  Random random=new Random();
  Settings settings=settingsBuilder().put("index.refresh_interval","-1").put("gateway.type","local").put(SETTING_NUMBER_OF_SHARDS,1).put(SETTING_NUMBER_OF_REPLICAS,0).build();
  String clusterName=TermsAggregationSearchBenchmark.class.getSimpleName();
  nodes=new InternalNode[1];
  for (int i=0; i < nodes.length; i++) {
    nodes[i]=(InternalNode)nodeBuilder().clusterName(clusterName).settings(settingsBuilder().put(settings).put("name","node" + i)).node();
  }
  Node clientNode=nodeBuilder().clusterName(clusterName).settings(settingsBuilder().put(settings).put("name","client")).client(true).node();
  client=clientNode.client();
  Thread.sleep(10000);
  try {
    client.admin().indices().create(createIndexRequest("test").mapping("type1",jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("s_value_dv").field("type","string").field("index","no").startObject("fielddata").field("format","doc_values").endObject().endObject().startObject("sm_value_dv").field("type","string").field("index","no").startObject("fielddata").field("format","doc_values").endObject().endObject().startObject("l_value_dv").field("type","long").field("index","no").startObject("fielddata").field("format","doc_values").endObject().endObject().startObject("lm_value_dv").field("type","long").field("index","no").startObject("fielddata").field("format","doc_values").endObject().endObject().endObject().endObject().endObject())).actionGet();
    long[] lValues=new long[NUMBER_OF_TERMS];
    for (int i=0; i < NUMBER_OF_TERMS; i++) {
      lValues[i]=ThreadLocalRandom.current().nextLong();
    }
    ObjectOpenHashSet<String> uniqueTerms=ObjectOpenHashSet.newInstance();
    for (int i=0; i < NUMBER_OF_TERMS; i++) {
      boolean added;
      do {
        added=uniqueTerms.add(RandomStrings.randomAsciiOfLength(random,STRING_TERM_SIZE));
      }
 while (!added);
    }
    String[] sValues=uniqueTerms.toArray(String.class);
    uniqueTerms=null;
    StopWatch stopWatch=new StopWatch().start();
    System.out.println("--> Indexing [" + COUNT + "] ...");
    long ITERS=COUNT / BATCH;
    long i=1;
    int counter=0;
    for (; i <= ITERS; i++) {
      BulkRequestBuilder request=client.prepareBulk();
      for (int j=0; j < BATCH; j++) {
        counter++;
        XContentBuilder builder=jsonBuilder().startObject();
        builder.field("id",Integer.toString(counter));
        final String sValue=sValues[ThreadLocalRandom.current().nextInt(sValues.length)];
        final long lValue=lValues[ThreadLocalRandom.current().nextInt(lValues.length)];
        builder.field("s_value",sValue);
        builder.field("l_value",lValue);
        builder.field("s_value_dv",sValue);
        builder.field("l_value_dv",lValue);
        for (        String field : new String[]{"sm_value","sm_value_dv"}) {
          builder.startArray(field);
          for (int k=0; k < NUMBER_OF_MULTI_VALUE_TERMS; k++) {
            builder.value(sValues[ThreadLocalRandom.current().nextInt(sValues.length)]);
          }
          builder.endArray();
        }
        for (        String field : new String[]{"lm_value","lm_value_dv"}) {
          builder.startArray(field);
          for (int k=0; k < NUMBER_OF_MULTI_VALUE_TERMS; k++) {
            builder.value(lValues[ThreadLocalRandom.current().nextInt(sValues.length)]);
          }
          builder.endArray();
        }
        builder.endObject();
        request.add(Requests.indexRequest("test").type("type1").id(Integer.toString(counter)).source(builder));
      }
      BulkResponse response=request.execute().actionGet();
      if (response.hasFailures()) {
        System.err.println("--> failures...");
      }
      if (((i * BATCH) % 10000) == 0) {
        System.out.println("--> Indexed " + (i * BATCH) + " took "+ stopWatch.stop().lastTaskTime());
        stopWatch.start();
      }
    }
    System.out.println("--> Indexing took " + stopWatch.totalTime() + ", TPS "+ (((double)(COUNT)) / stopWatch.totalTime().secondsFrac()));
  }
 catch (  Exception e) {
    System.out.println("--> Index already exists, ignoring indexing phase, waiting for green");
    ClusterHealthResponse clusterHealthResponse=client.admin().cluster().prepareHealth().setWaitForGreenStatus().setTimeout("10m").execute().actionGet();
    if (clusterHealthResponse.isTimedOut()) {
      System.err.println("--> Timed out waiting for cluster health");
    }
  }
  client.admin().indices().prepareRefresh().execute().actionGet();
  COUNT=client.prepareCount().setQuery(matchAllQuery()).execute().actionGet().getCount();
  System.out.println("--> Number of docs in index: " + COUNT);
  List<StatsResult> stats=Lists.newArrayList();
  stats.add(terms("terms_facet_s",Method.FACET,"s_value",null));
  stats.add(terms("terms_facet_s_dv",Method.FACET,"s_value_dv",null));
  stats.add(terms("terms_facet_map_s",Method.FACET,"s_value","map"));
  stats.add(terms("terms_facet_map_s_dv",Method.FACET,"s_value_dv","map"));
  stats.add(terms("terms_agg_s",Method.AGGREGATION,"s_value",null));
  stats.add(terms("terms_agg_s_local_ordinals",Method.AGGREGATION,"s_value","ordinals"));
  stats.add(terms("terms_agg_s_dv",Method.AGGREGATION,"s_value_dv",null));
  stats.add(terms("terms_agg_s_dv_local_ordinals",Method.AGGREGATION,"s_value_dv","ordinals"));
  stats.add(terms("terms_agg_map_s",Method.AGGREGATION,"s_value","map"));
  stats.add(terms("terms_agg_map_s_dv",Method.AGGREGATION,"s_value_dv","map"));
  stats.add(terms("terms_facet_l",Method.FACET,"l_value",null));
  stats.add(terms("terms_facet_l_dv",Method.FACET,"l_value_dv",null));
  stats.add(terms("terms_agg_l",Method.AGGREGATION,"l_value",null));
  stats.add(terms("terms_agg_l_dv",Method.AGGREGATION,"l_value_dv",null));
  stats.add(terms("terms_facet_sm",Method.FACET,"sm_value",null));
  stats.add(terms("terms_facet_sm_dv",Method.FACET,"sm_value_dv",null));
  stats.add(terms("terms_facet_map_sm",Method.FACET,"sm_value","map"));
  stats.add(terms("terms_facet_map_sm_dv",Method.FACET,"sm_value_dv","map"));
  stats.add(terms("terms_agg_sm",Method.AGGREGATION,"sm_value",null));
  stats.add(terms("terms_agg_sm_local_ordinals",Method.AGGREGATION,"sm_value","ordinals"));
  stats.add(terms("terms_agg_sm_dv",Method.AGGREGATION,"sm_value_dv",null));
  stats.add(terms("terms_agg_sm_dv_local_ordinals",Method.AGGREGATION,"sm_value_dv","ordinals"));
  stats.add(terms("terms_agg_map_sm",Method.AGGREGATION,"sm_value","map"));
  stats.add(terms("terms_agg_map_sm_dv",Method.AGGREGATION,"sm_value_dv","map"));
  stats.add(terms("terms_facet_lm",Method.FACET,"lm_value",null));
  stats.add(terms("terms_facet_lm_dv",Method.FACET,"lm_value_dv",null));
  stats.add(terms("terms_agg_lm",Method.AGGREGATION,"lm_value",null));
  stats.add(terms("terms_agg_lm_dv",Method.AGGREGATION,"lm_value_dv",null));
  stats.add(termsStats("terms_stats_facet_s_l",Method.FACET,"s_value","l_value",null));
  stats.add(termsStats("terms_stats_facet_s_l_dv",Method.FACET,"s_value_dv","l_value_dv",null));
  stats.add(termsStats("terms_stats_agg_s_l",Method.AGGREGATION,"s_value","l_value",null));
  stats.add(termsStats("terms_stats_agg_s_l_dv",Method.AGGREGATION,"s_value_dv","l_value_dv",null));
  stats.add(termsStats("terms_stats_facet_s_lm",Method.FACET,"s_value","lm_value",null));
  stats.add(termsStats("terms_stats_facet_s_lm_dv",Method.FACET,"s_value_dv","lm_value_dv",null));
  stats.add(termsStats("terms_stats_agg_s_lm",Method.AGGREGATION,"s_value","lm_value",null));
  stats.add(termsStats("terms_stats_agg_s_lm_dv",Method.AGGREGATION,"s_value_dv","lm_value_dv",null));
  stats.add(termsStats("terms_stats_facet_sm_l",Method.FACET,"sm_value","l_value",null));
  stats.add(termsStats("terms_stats_facet_sm_l_dv",Method.FACET,"sm_value_dv","l_value_dv",null));
  stats.add(termsStats("terms_stats_agg_sm_l",Method.AGGREGATION,"sm_value","l_value",null));
  stats.add(termsStats("terms_stats_agg_sm_l_dv",Method.AGGREGATION,"sm_value_dv","l_value_dv",null));
  stats.add(termsStats("terms_stats_facet_s_l",Method.FACET,"s_value","l_value",null));
  stats.add(termsStats("terms_stats_facet_s_l_dv",Method.FACET,"s_value_dv","l_value_dv",null));
  stats.add(termsStats("terms_stats_agg_s_l",Method.AGGREGATION,"s_value","l_value",null));
  stats.add(termsStats("terms_stats_agg_s_l_dv",Method.AGGREGATION,"s_value_dv","l_value_dv",null));
  stats.add(termsStats("terms_stats_facet_s_lm",Method.FACET,"s_value","lm_value",null));
  stats.add(termsStats("terms_stats_facet_s_lm_dv",Method.FACET,"s_value_dv","lm_value_dv",null));
  stats.add(termsStats("terms_stats_agg_s_lm",Method.AGGREGATION,"s_value","lm_value",null));
  stats.add(termsStats("terms_stats_agg_s_lm_dv",Method.AGGREGATION,"s_value_dv","lm_value_dv",null));
  stats.add(termsStats("terms_stats_facet_sm_l",Method.FACET,"sm_value","l_value",null));
  stats.add(termsStats("terms_stats_facet_sm_l_dv",Method.FACET,"sm_value_dv","l_value_dv",null));
  stats.add(termsStats("terms_stats_agg_sm_l",Method.AGGREGATION,"sm_value","l_value",null));
  stats.add(termsStats("terms_stats_agg_sm_l_dv",Method.AGGREGATION,"sm_value_dv","l_value_dv",null));
  System.out.println("------------------ SUMMARY ----------------------------------------------");
  System.out.format(Locale.ENGLISH,"%35s%10s%10s%15s\n","name","took","millis","fieldata size");
  for (  StatsResult stat : stats) {
    System.out.format(Locale.ENGLISH,"%35s%10s%10d%15s\n",stat.name,TimeValue.timeValueMillis(stat.took),(stat.took / QUERY_COUNT),stat.fieldDataMemoryUsed);
  }
  System.out.println("------------------ SUMMARY ----------------------------------------------");
  clientNode.close();
  for (  Node node : nodes) {
    node.close();
  }
}
