{
  if (running.compareAndSet(false,true)) {
    try {
      List<HttpHost> sniffedNodes=hostsSniffer.sniffHosts();
      if (excludeHost != null) {
        sniffedNodes.remove(excludeHost);
      }
      logger.debug("sniffed nodes: " + sniffedNodes);
      this.restClient.setHosts(sniffedNodes.toArray(new HttpHost[sniffedNodes.size()]));
    }
 catch (    Throwable t) {
      logger.error("error while sniffing nodes",t);
    }
 finally {
      try {
        this.scheduledFuture.cancel(false);
        logger.debug("scheduling next sniff in " + nextSniffDelay + " ms");
        this.scheduledFuture=this.scheduledExecutorService.schedule(this,nextSniffDelay,TimeUnit.MILLISECONDS);
      }
 catch (      Throwable t) {
        logger.error("error while scheduling next sniffer task",t);
      }
 finally {
        this.nextSniffDelay=sniffInterval;
        running.set(false);
      }
    }
  }
}
