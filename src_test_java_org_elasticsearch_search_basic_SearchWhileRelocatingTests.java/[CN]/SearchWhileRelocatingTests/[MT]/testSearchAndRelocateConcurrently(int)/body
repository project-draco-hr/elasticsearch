{
  final int numShards=between(1,20);
  client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards",numShards).put("index.number_of_replicas",numberOfReplicas)).addMapping("type1","loc","type=geo_point","test","type=string").execute().actionGet();
  ensureGreen();
  List<IndexRequestBuilder> indexBuilders=new ArrayList<>();
  final int numDocs=between(10,20);
  for (int i=0; i < numDocs; i++) {
    indexBuilders.add(client().prepareIndex("test","type",Integer.toString(i)).setSource(jsonBuilder().startObject().field("test","value").startObject("loc").field("lat",11).field("lon",21).endObject().endObject()));
  }
  indexRandom(true,indexBuilders.toArray(new IndexRequestBuilder[indexBuilders.size()]));
  assertHitCount(client().prepareSearch().get(),(long)(numDocs));
  final int numIters=scaledRandomIntBetween(5,20);
  for (int i=0; i < numIters; i++) {
    final AtomicBoolean stop=new AtomicBoolean(false);
    final List<Throwable> thrownExceptions=new CopyOnWriteArrayList<>();
    final List<Throwable> nonCriticalExceptions=new CopyOnWriteArrayList<>();
    Thread[] threads=new Thread[scaledRandomIntBetween(1,3)];
    for (int j=0; j < threads.length; j++) {
      threads[j]=new Thread(){
        public void run(){
          boolean criticalException=true;
          try {
            while (!stop.get()) {
              SearchResponse sr=client().prepareSearch().setSize(numDocs).get();
              criticalException=sr.getTotalShards() == sr.getSuccessfulShards() || sr.getFailedShards() > 0;
              assertHitCount(sr,(long)(numDocs));
              criticalException=true;
              final SearchHits sh=sr.getHits();
              assertThat("Expected hits to be the same size the actual hits array",sh.getTotalHits(),equalTo((long)(sh.getHits().length)));
            }
          }
 catch (          SearchPhaseExecutionException ex) {
            if (numberOfReplicas == 1 || !ex.getMessage().contains("all shards failed")) {
              thrownExceptions.add(ex);
            }
          }
catch (          Throwable t) {
            if (!criticalException) {
              nonCriticalExceptions.add(t);
            }
 else {
              thrownExceptions.add(t);
            }
          }
        }
      }
;
    }
    for (int j=0; j < threads.length; j++) {
      threads[j].start();
    }
    allowNodes("test",between(1,3));
    client().admin().cluster().prepareReroute().get();
    stop.set(true);
    for (int j=0; j < threads.length; j++) {
      threads[j].join();
    }
    ClusterHealthResponse resp=client().admin().cluster().prepareHealth().setWaitForYellowStatus().setWaitForRelocatingShards(0).setWaitForEvents(Priority.LANGUID).setTimeout("5m").get();
    assertNoTimeout(resp);
    if (!thrownExceptions.isEmpty() || !nonCriticalExceptions.isEmpty()) {
      Client client=client();
      boolean postSearchOK=true;
      String verified="POST SEARCH OK";
      for (int j=0; j < 10; j++) {
        if (client.prepareSearch().get().getHits().getTotalHits() != numDocs) {
          verified="POST SEARCH FAIL";
          postSearchOK=false;
          break;
        }
      }
      assertThat("numberOfReplicas: " + numberOfReplicas + " failed in iteration "+ i+ ", verification: "+ verified,thrownExceptions,Matchers.emptyIterable());
      logger.info("Non-CriticalExceptions: " + nonCriticalExceptions.toString());
      assertThat("numberOfReplicas: " + numberOfReplicas + " failed in iteration "+ i+ ", verification: "+ verified,postSearchOK,is(true));
    }
  }
}
