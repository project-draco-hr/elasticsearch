{
  final int numShards=between(10,20);
  client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards",numShards).put("index.number_of_replicas",numberOfReplicas).put("index.store.type","niofs")).addMapping("type1","loc","type=geo_point","test","type=string").execute().actionGet();
  ensureGreen();
  List<IndexRequestBuilder> indexBuilders=new ArrayList<IndexRequestBuilder>();
  final int numDocs=between(10,20);
  for (int i=0; i < numDocs; i++) {
    indexBuilders.add(client().prepareIndex("test","type",Integer.toString(i)).setSource(jsonBuilder().startObject().field("test","value").startObject("loc").field("lat",11).field("lon",21).endObject().endObject()));
  }
  indexRandom(true,indexBuilders.toArray(new IndexRequestBuilder[indexBuilders.size()]));
  assertHitCount(client().prepareSearch().get(),(long)(numDocs));
  final int numIters=atLeast(3);
  for (int i=0; i < numIters; i++) {
    allowNodes("test",between(1,3));
    client().admin().cluster().prepareReroute().get();
    final AtomicBoolean stop=new AtomicBoolean(false);
    final List<Throwable> thrownExceptions=new CopyOnWriteArrayList<Throwable>();
    final Thread t=new Thread(){
      public void run(){
        try {
          while (!stop.get()) {
            SearchResponse sr=client().prepareSearch().setSize(numDocs).get();
            assertHitCount(sr,(long)(numDocs));
            final SearchHits sh=sr.getHits();
            assertThat("Expected hits to be the same size the actual hits array",sh.getTotalHits(),equalTo((long)(sh.getHits().length)));
          }
        }
 catch (        Throwable t) {
          thrownExceptions.add(t);
        }
      }
    }
;
    t.start();
    ClusterHealthResponse resp=client().admin().cluster().prepareHealth().setWaitForRelocatingShards(0).execute().actionGet();
    stop.set(true);
    t.join();
    assertThat(resp.isTimedOut(),equalTo(false));
    if (!thrownExceptions.isEmpty()) {
      Client client=client();
      String verified="POST SEARCH OK";
      for (int j=0; j < 10; j++) {
        if (client.prepareSearch().get().getHits().getTotalHits() != numDocs) {
          verified="POST SEARCH FAIL";
          break;
        }
      }
      assertThat("failed in iteration " + i + ", verification: "+ verified,thrownExceptions,Matchers.emptyIterable());
    }
  }
}
