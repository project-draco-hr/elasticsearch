{
  if (!running) {
    return;
  }
  final DiscoveryNode masterToPing=masterNode;
  if (masterToPing == null) {
    threadPool.schedule(MasterPinger.this,pingInterval);
    return;
  }
  transportService.sendRequest(masterToPing,MasterPingRequestHandler.ACTION,new MasterPingRequest(nodesProvider.nodes().localNode().id(),masterToPing.id()),options().withHighType().withTimeout(pingRetryTimeout),new BaseTransportResponseHandler<MasterPingResponseResponse>(){
    @Override public MasterPingResponseResponse newInstance(){
      return new MasterPingResponseResponse();
    }
    @Override public void handleResponse(    MasterPingResponseResponse response){
      if (!running) {
        return;
      }
      MasterFaultDetection.this.retryCount=0;
      if (masterToPing.equals(MasterFaultDetection.this.masterNode())) {
        if (!response.connectedToMaster) {
          logger.trace("[master] [{}] does not have us registered with it...",masterToPing);
          notifyDisconnectedFromMaster();
        }
        threadPool.schedule(MasterPinger.this,pingInterval);
      }
    }
    @Override public void handleException(    TransportException exp){
      if (!running) {
        return;
      }
synchronized (masterNodeMutex) {
        if (masterToPing.equals(MasterFaultDetection.this.masterNode())) {
          int retryCount=++MasterFaultDetection.this.retryCount;
          logger.trace("[master] failed to ping [{}], retry [{}] out of [{}]",exp,masterNode,retryCount,pingRetryCount);
          if (retryCount >= pingRetryCount) {
            logger.debug("[master] failed to ping [{}], tried [{}] times, each with maximum [{}] timeout",masterNode,pingRetryCount,pingRetryTimeout);
            notifyMasterFailure(masterToPing,"failed to ping, tried [" + pingRetryCount + "] times, each with  maximum ["+ pingRetryTimeout+ "] timeout");
          }
 else {
            transportService.sendRequest(masterToPing,MasterPingRequestHandler.ACTION,new MasterPingRequest(nodesProvider.nodes().localNode().id(),masterToPing.id()),options().withHighType().withTimeout(pingRetryTimeout),this);
          }
        }
      }
    }
    @Override public boolean spawn(){
      return false;
    }
  }
);
}
