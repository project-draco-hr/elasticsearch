{
  if (rawType instanceof Class<?>) {
    Class rawTypeAsClass=(Class)rawType;
    if (ownerType == null && rawTypeAsClass.getEnclosingClass() != null) {
      throw new IllegalArgumentException("No owner type for enclosed " + rawType);
    }
    if (ownerType != null && rawTypeAsClass.getEnclosingClass() == null) {
      throw new IllegalArgumentException("Owner type for unenclosed " + rawType);
    }
  }
  this.ownerType=ownerType == null ? null : canonicalize(ownerType);
  this.rawType=canonicalize(rawType);
  this.typeArguments=typeArguments.clone();
  for (int t=0; t < this.typeArguments.length; t++) {
    Objects.requireNonNull(this.typeArguments[t],"type parameter");
    checkNotPrimitive(this.typeArguments[t],"type parameters");
    this.typeArguments[t]=canonicalize(this.typeArguments[t]);
  }
}
