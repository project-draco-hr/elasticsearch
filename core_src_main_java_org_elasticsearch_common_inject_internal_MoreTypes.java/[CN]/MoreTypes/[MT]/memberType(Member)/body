{
  Objects.requireNonNull(member,"member");
  if (member instanceof MemberImpl) {
    return ((MemberImpl)member).memberType;
  }
 else   if (member instanceof Field) {
    return Field.class;
  }
 else   if (member instanceof Method) {
    return Method.class;
  }
 else   if (member instanceof Constructor) {
    return Constructor.class;
  }
 else {
    throw new IllegalArgumentException("Unsupported implementation class for Member, " + member.getClass());
  }
}
