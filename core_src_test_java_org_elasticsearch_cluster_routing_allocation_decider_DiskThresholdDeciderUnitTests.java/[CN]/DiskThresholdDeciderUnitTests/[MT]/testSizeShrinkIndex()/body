{
  ImmutableOpenMap.Builder<String,Long> shardSizes=ImmutableOpenMap.builder();
  shardSizes.put("[test][0][p]",10L);
  shardSizes.put("[test][1][p]",100L);
  shardSizes.put("[test][2][p]",500L);
  shardSizes.put("[test][3][p]",500L);
  ClusterInfo info=new DevNullClusterInfo(ImmutableOpenMap.of(),ImmutableOpenMap.of(),shardSizes.build());
  MetaData.Builder metaBuilder=MetaData.builder();
  metaBuilder.put(IndexMetaData.builder("test").settings(settings(Version.CURRENT).put("index.uuid","1234")).numberOfShards(4).numberOfReplicas(0));
  metaBuilder.put(IndexMetaData.builder("target").settings(settings(Version.CURRENT).put("index.uuid","5678").put("index.shrink.source.name","test").put("index.shrink.source.uuid","1234")).numberOfShards(1).numberOfReplicas(0));
  metaBuilder.put(IndexMetaData.builder("target2").settings(settings(Version.CURRENT).put("index.uuid","9101112").put("index.shrink.source.name","test").put("index.shrink.source.uuid","1234")).numberOfShards(2).numberOfReplicas(0));
  MetaData metaData=metaBuilder.build();
  RoutingTable.Builder routingTableBuilder=RoutingTable.builder();
  routingTableBuilder.addAsNew(metaData.index("test"));
  routingTableBuilder.addAsNew(metaData.index("target"));
  routingTableBuilder.addAsNew(metaData.index("target2"));
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTableBuilder.build()).build();
  AllocationService allocationService=createAllocationService();
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1"))).build();
  RoutingAllocation.Result result=allocationService.reroute(clusterState,"foo");
  clusterState=ClusterState.builder(clusterState).routingTable(result.routingTable()).build();
  result=allocationService.applyStartedShards(clusterState,clusterState.getRoutingTable().index("test").shardsWithState(ShardRoutingState.UNASSIGNED));
  clusterState=ClusterState.builder(clusterState).routingTable(result.routingTable()).build();
  RoutingAllocation allocation=new RoutingAllocation(null,clusterState.getRoutingNodes(),clusterState,info,0,false);
  final Index index=new Index("test","1234");
  ShardRouting test_0=ShardRouting.newUnassigned(new ShardId(index,0),null,true,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,"foo"));
  test_0=ShardRoutingHelper.initialize(test_0,"node1");
  test_0=ShardRoutingHelper.moveToStarted(test_0);
  ShardRouting test_1=ShardRouting.newUnassigned(new ShardId(index,1),null,true,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,"foo"));
  test_1=ShardRoutingHelper.initialize(test_1,"node2");
  test_1=ShardRoutingHelper.moveToStarted(test_1);
  ShardRouting test_2=ShardRouting.newUnassigned(new ShardId(index,2),null,true,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,"foo"));
  test_2=ShardRoutingHelper.initialize(test_2,"node1");
  ShardRouting test_3=ShardRouting.newUnassigned(new ShardId(index,3),null,true,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,"foo"));
  test_3=ShardRoutingHelper.initialize(test_3,"node1");
  assertEquals(500l,DiskThresholdDecider.getExpectedShardSize(test_3,allocation,0));
  assertEquals(500L,DiskThresholdDecider.getExpectedShardSize(test_2,allocation,0));
  assertEquals(100L,DiskThresholdDecider.getExpectedShardSize(test_1,allocation,0));
  assertEquals(10L,DiskThresholdDecider.getExpectedShardSize(test_0,allocation,0));
  ShardRouting target=ShardRouting.newUnassigned(new ShardId(new Index("target","5678"),0),null,true,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,"foo"));
  assertEquals(1110L,DiskThresholdDecider.getExpectedShardSize(target,allocation,0));
  ShardRouting target2=ShardRouting.newUnassigned(new ShardId(new Index("target2","9101112"),0),null,true,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,"foo"));
  assertEquals(110L,DiskThresholdDecider.getExpectedShardSize(target2,allocation,0));
  target2=ShardRouting.newUnassigned(new ShardId(new Index("target2","9101112"),1),null,true,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,"foo"));
  assertEquals(1000L,DiskThresholdDecider.getExpectedShardSize(target2,allocation,0));
}
