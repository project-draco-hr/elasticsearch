{
  if (!event.state().nodes().localNodeMaster()) {
    return;
  }
  final int dataNodeCount=event.state().nodes().dataNodes().size();
  Map<Integer,List<String>> nrReplicasChanged=new HashMap<>();
  for (  final IndexMetaData indexMetaData : event.state().metaData()) {
    String autoExpandReplicas=indexMetaData.settings().get(IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS);
    if (autoExpandReplicas != null && Booleans.parseBoolean(autoExpandReplicas,true)) {
      try {
        final int min;
        final int max;
        final int dash=autoExpandReplicas.indexOf('-');
        if (-1 == dash) {
          logger.warn("failed to set [{}] for index [{}], it should be dash delimited [{}]",IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS,indexMetaData.index(),autoExpandReplicas);
          continue;
        }
        final String sMin=autoExpandReplicas.substring(0,dash);
        try {
          min=Integer.parseInt(sMin);
        }
 catch (        NumberFormatException e) {
          logger.warn("failed to set [{}] for index [{}], minimum value is not a number [{}]",e,IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS,indexMetaData.index(),sMin);
          continue;
        }
        String sMax=autoExpandReplicas.substring(dash + 1);
        if (sMax.equals(ALL_NODES_VALUE)) {
          max=dataNodeCount - 1;
        }
 else {
          try {
            max=Integer.parseInt(sMax);
          }
 catch (          NumberFormatException e) {
            logger.warn("failed to set [{}] for index [{}], maximum value is neither [{}] nor a number [{}]",e,IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS,indexMetaData.index(),ALL_NODES_VALUE,sMax);
            continue;
          }
        }
        int numberOfReplicas=dataNodeCount - 1;
        if (numberOfReplicas < min) {
          numberOfReplicas=min;
        }
 else         if (numberOfReplicas > max) {
          numberOfReplicas=max;
        }
        if (numberOfReplicas == indexMetaData.numberOfReplicas()) {
          continue;
        }
        if (numberOfReplicas >= min && numberOfReplicas <= max) {
          if (!nrReplicasChanged.containsKey(numberOfReplicas)) {
            nrReplicasChanged.put(numberOfReplicas,new ArrayList<String>());
          }
          nrReplicasChanged.get(numberOfReplicas).add(indexMetaData.index());
        }
      }
 catch (      Exception e) {
        logger.warn("[{}] failed to parse auto expand replicas",e,indexMetaData.index());
      }
    }
  }
  if (nrReplicasChanged.size() > 0) {
    for (    final Integer fNumberOfReplicas : nrReplicasChanged.keySet()) {
      Settings settings=ImmutableSettings.settingsBuilder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,fNumberOfReplicas).build();
      final List<String> indices=nrReplicasChanged.get(fNumberOfReplicas);
      UpdateSettingsClusterStateUpdateRequest updateRequest=new UpdateSettingsClusterStateUpdateRequest().indices(indices.toArray(new String[indices.size()])).settings(settings).ackTimeout(TimeValue.timeValueMillis(0)).masterNodeTimeout(TimeValue.timeValueMinutes(10));
      updateSettings(updateRequest,new ActionListener<ClusterStateUpdateResponse>(){
        @Override public void onResponse(        ClusterStateUpdateResponse response){
          for (          String index : indices) {
            logger.info("[{}] auto expanded replicas to [{}]",index,fNumberOfReplicas);
          }
        }
        @Override public void onFailure(        Throwable t){
          for (          String index : indices) {
            logger.warn("[{}] fail to auto expand replicas to [{}]",index,fNumberOfReplicas);
          }
        }
      }
);
    }
  }
}
