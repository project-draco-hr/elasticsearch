{
  if (!event.state().nodes().localNodeMaster()) {
    return;
  }
  for (  final IndexMetaData indexMetaData : event.state().metaData()) {
    String autoExpandReplicas=indexMetaData.settings().get(IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS);
    if (autoExpandReplicas != null && Booleans.parseBoolean(autoExpandReplicas,true)) {
      try {
        int min;
        int max;
        try {
          min=Integer.parseInt(autoExpandReplicas.substring(0,autoExpandReplicas.indexOf('-')));
          String sMax=autoExpandReplicas.substring(autoExpandReplicas.indexOf('-') + 1);
          if (sMax.equals("all")) {
            max=event.state().nodes().dataNodes().size() - 1;
          }
 else {
            max=Integer.parseInt(sMax);
          }
        }
 catch (        Exception e) {
          logger.warn("failed to set [{}], wrong format [{}]",e,IndexMetaData.SETTING_AUTO_EXPAND_REPLICAS,autoExpandReplicas);
          continue;
        }
        int numberOfReplicas=event.state().nodes().dataNodes().size() - 1;
        if (numberOfReplicas < min) {
          numberOfReplicas=min;
        }
 else         if (numberOfReplicas > max) {
          numberOfReplicas=max;
        }
        if (numberOfReplicas == indexMetaData.numberOfReplicas()) {
          continue;
        }
        if (numberOfReplicas >= min && numberOfReplicas <= max) {
          final int fNumberOfReplicas=numberOfReplicas;
          Settings settings=ImmutableSettings.settingsBuilder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,fNumberOfReplicas).build();
          updateSettings(settings,new String[]{indexMetaData.index()},TimeValue.timeValueMinutes(10),new Listener(){
            @Override public void onSuccess(){
              logger.info("[{}] auto expanded replicas to [{}]",indexMetaData.index(),fNumberOfReplicas);
            }
            @Override public void onFailure(            Throwable t){
              logger.warn("[{}] fail to auto expand replicas to [{}]",indexMetaData.index(),fNumberOfReplicas);
            }
          }
);
        }
      }
 catch (      Exception e) {
        logger.warn("[{}] failed to parse auto expand replicas",e,indexMetaData.index());
      }
    }
  }
}
