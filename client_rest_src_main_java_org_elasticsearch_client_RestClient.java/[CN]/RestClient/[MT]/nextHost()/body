{
  Collection<HttpHost> nextHosts=Collections.emptySet();
  do {
    Set<HttpHost> filteredHosts=new HashSet<>(hosts);
    for (    Map.Entry<HttpHost,DeadHostState> entry : blacklist.entrySet()) {
      if (System.nanoTime() - entry.getValue().getDeadUntilNanos() < 0) {
        filteredHosts.remove(entry.getKey());
      }
    }
    if (filteredHosts.isEmpty()) {
      List<Map.Entry<HttpHost,DeadHostState>> sortedHosts=new ArrayList<>(blacklist.entrySet());
      if (sortedHosts.size() > 0) {
        Collections.sort(sortedHosts,new Comparator<Map.Entry<HttpHost,DeadHostState>>(){
          @Override public int compare(          Map.Entry<HttpHost,DeadHostState> o1,          Map.Entry<HttpHost,DeadHostState> o2){
            return Long.compare(o1.getValue().getDeadUntilNanos(),o2.getValue().getDeadUntilNanos());
          }
        }
);
        HttpHost deadHost=sortedHosts.get(0).getKey();
        logger.trace("resurrecting host [" + deadHost + "]");
        nextHosts=Collections.singleton(deadHost);
      }
    }
 else {
      List<HttpHost> rotatedHosts=new ArrayList<>(filteredHosts);
      Collections.rotate(rotatedHosts,rotatedHosts.size() - lastHostIndex.getAndIncrement());
      nextHosts=rotatedHosts;
    }
  }
 while (nextHosts.isEmpty());
  return nextHosts;
}
