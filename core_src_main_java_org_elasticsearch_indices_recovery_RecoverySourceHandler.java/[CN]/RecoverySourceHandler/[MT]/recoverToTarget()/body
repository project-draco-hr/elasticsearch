{
  try (Translog.View translogView=shard.acquireTranslogView()){
    logger.trace("captured translog id [{}] for recovery",translogView.minTranslogGeneration());
    final IndexCommit phase1Snapshot;
    try {
      phase1Snapshot=shard.acquireIndexCommit(false);
    }
 catch (    Exception e) {
      IOUtils.closeWhileHandlingException(translogView);
      throw new RecoveryEngineException(shard.shardId(),1,"Snapshot failed",e);
    }
    try {
      phase1(phase1Snapshot,translogView);
    }
 catch (    Exception e) {
      throw new RecoveryEngineException(shard.shardId(),1,"phase1 failed",e);
    }
 finally {
      try {
        shard.releaseIndexCommit(phase1Snapshot);
      }
 catch (      IOException ex) {
        logger.warn("releasing snapshot caused exception",ex);
      }
    }
    if (shard.state() == IndexShardState.RELOCATED) {
      throw new IndexShardRelocatedException(request.shardId());
    }
    logger.trace("{} snapshot translog for recovery. current size is [{}]",shard.shardId(),translogView.totalOperations());
    try {
      phase2(translogView.snapshot());
    }
 catch (    Exception e) {
      throw new RecoveryEngineException(shard.shardId(),2,"phase2 failed",e);
    }
    finalizeRecovery();
  }
   return response;
}
