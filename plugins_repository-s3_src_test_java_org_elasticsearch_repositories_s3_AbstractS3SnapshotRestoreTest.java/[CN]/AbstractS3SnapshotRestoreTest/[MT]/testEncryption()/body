{
  Client client=client();
  logger.info("-->  creating s3 repository with bucket[{}] and path [{}]",internalCluster().getInstance(Settings.class).get("repositories.s3.bucket"),basePath);
  PutRepositoryResponse putRepositoryResponse=client.admin().cluster().preparePutRepository("test-repo").setType("s3").setSettings(Settings.settingsBuilder().put(S3Repository.Repository.BASE_PATH_SETTING.getKey(),basePath).put(S3Repository.Repository.CHUNK_SIZE_SETTING.getKey(),randomIntBetween(1000,10000)).put(S3Repository.Repository.SERVER_SIDE_ENCRYPTION_SETTING.getKey(),true)).get();
  assertThat(putRepositoryResponse.isAcknowledged(),equalTo(true));
  createIndex("test-idx-1","test-idx-2","test-idx-3");
  ensureGreen();
  logger.info("--> indexing some data");
  for (int i=0; i < 100; i++) {
    index("test-idx-1","doc",Integer.toString(i),"foo","bar" + i);
    index("test-idx-2","doc",Integer.toString(i),"foo","baz" + i);
    index("test-idx-3","doc",Integer.toString(i),"foo","baz" + i);
  }
  refresh();
  assertThat(client.prepareSearch("test-idx-1").setSize(0).get().getHits().totalHits(),equalTo(100L));
  assertThat(client.prepareSearch("test-idx-2").setSize(0).get().getHits().totalHits(),equalTo(100L));
  assertThat(client.prepareSearch("test-idx-3").setSize(0).get().getHits().totalHits(),equalTo(100L));
  logger.info("--> snapshot");
  CreateSnapshotResponse createSnapshotResponse=client.admin().cluster().prepareCreateSnapshot("test-repo","test-snap").setWaitForCompletion(true).setIndices("test-idx-*","-test-idx-3").get();
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),greaterThan(0));
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));
  assertThat(client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").get().getSnapshots().get(0).state(),equalTo(SnapshotState.SUCCESS));
  Settings settings=internalCluster().getInstance(Settings.class);
  Settings bucket=settings.getByPrefix("repositories.s3.");
  AmazonS3 s3Client=internalCluster().getInstance(AwsS3Service.class).client(null,S3Repository.Repositories.PROTOCOL_SETTING.get(settings),S3Repository.Repositories.REGION_SETTING.get(settings),S3Repository.Repositories.KEY_SETTING.get(settings),S3Repository.Repositories.SECRET_SETTING.get(settings),null,null);
  String bucketName=bucket.get("bucket");
  logger.info("--> verify encryption for bucket [{}], prefix [{}]",bucketName,basePath);
  List<S3ObjectSummary> summaries=s3Client.listObjects(bucketName,basePath).getObjectSummaries();
  for (  S3ObjectSummary summary : summaries) {
    assertThat(s3Client.getObjectMetadata(bucketName,summary.getKey()).getSSEAlgorithm(),equalTo("AES256"));
  }
  logger.info("--> delete some data");
  for (int i=0; i < 50; i++) {
    client.prepareDelete("test-idx-1","doc",Integer.toString(i)).get();
  }
  for (int i=50; i < 100; i++) {
    client.prepareDelete("test-idx-2","doc",Integer.toString(i)).get();
  }
  for (int i=0; i < 100; i+=2) {
    client.prepareDelete("test-idx-3","doc",Integer.toString(i)).get();
  }
  refresh();
  assertThat(client.prepareSearch("test-idx-1").setSize(0).get().getHits().totalHits(),equalTo(50L));
  assertThat(client.prepareSearch("test-idx-2").setSize(0).get().getHits().totalHits(),equalTo(50L));
  assertThat(client.prepareSearch("test-idx-3").setSize(0).get().getHits().totalHits(),equalTo(50L));
  logger.info("--> close indices");
  client.admin().indices().prepareClose("test-idx-1","test-idx-2").get();
  logger.info("--> restore all indices from the snapshot");
  RestoreSnapshotResponse restoreSnapshotResponse=client.admin().cluster().prepareRestoreSnapshot("test-repo","test-snap").setWaitForCompletion(true).execute().actionGet();
  assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(),greaterThan(0));
  ensureGreen();
  assertThat(client.prepareSearch("test-idx-1").setSize(0).get().getHits().totalHits(),equalTo(100L));
  assertThat(client.prepareSearch("test-idx-2").setSize(0).get().getHits().totalHits(),equalTo(100L));
  assertThat(client.prepareSearch("test-idx-3").setSize(0).get().getHits().totalHits(),equalTo(50L));
  logger.info("--> delete indices");
  cluster().wipeIndices("test-idx-1","test-idx-2");
  logger.info("--> restore one index after deletion");
  restoreSnapshotResponse=client.admin().cluster().prepareRestoreSnapshot("test-repo","test-snap").setWaitForCompletion(true).setIndices("test-idx-*","-test-idx-2").execute().actionGet();
  assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(),greaterThan(0));
  ensureGreen();
  assertThat(client.prepareSearch("test-idx-1").setSize(0).get().getHits().totalHits(),equalTo(100L));
  ClusterState clusterState=client.admin().cluster().prepareState().get().getState();
  assertThat(clusterState.getMetaData().hasIndex("test-idx-1"),equalTo(true));
  assertThat(clusterState.getMetaData().hasIndex("test-idx-2"),equalTo(false));
}
