{
  IndexService indexService=createIndex("index");
  DocumentMapperParser parser=indexService.mapperService().documentMapperParser();
  final BuilderContext ctx=new BuilderContext(indexService.getIndexSettings().getSettings(),new ContentPath(1));
  assertFalse(new Builder("anything").index(false).build(ctx).fieldType().hasDocValues());
  assertTrue(new Builder("anything").index(false).fieldDataSettings(DOC_VALUES_SETTINGS).build(ctx).fieldType().hasDocValues());
  assertTrue(new Builder("anything").index(false).docValues(true).build(ctx).fieldType().hasDocValues());
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("str1").field("type","string").startObject("fielddata").field("format","paged_bytes").endObject().endObject().startObject("str2").field("type","string").field("index","not_analyzed").startObject("fielddata").field("format","doc_values").endObject().endObject().endObject().endObject().endObject().string();
  DocumentMapper defaultMapper=parser.parse("type",new CompressedXContent(mapping));
  ParsedDocument parsedDoc=defaultMapper.parse("test","type","1",XContentFactory.jsonBuilder().startObject().field("str1","1234").field("str2","1234").endObject().bytes());
  final Document doc=parsedDoc.rootDoc();
  assertEquals(DocValuesType.NONE,docValuesType(doc,"str1"));
  assertEquals(DocValuesType.SORTED_SET,docValuesType(doc,"str2"));
}
