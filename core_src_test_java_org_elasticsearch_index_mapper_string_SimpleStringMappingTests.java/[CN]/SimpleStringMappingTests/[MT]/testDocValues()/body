{
  final BuilderContext ctx=new BuilderContext(indexService.settingsService().getSettings(),new ContentPath(1));
  try {
    new StringFieldMapper.Builder("anything").docValues(true).build(ctx);
    fail();
  }
 catch (  Exception e) {
  }
  assertFalse(new Builder("anything").index(false).build(ctx).fieldType().hasDocValues());
  assertTrue(new Builder("anything").index(true).tokenized(false).build(ctx).fieldType().hasDocValues());
  assertFalse(new Builder("anything").index(true).tokenized(true).build(ctx).fieldType().hasDocValues());
  assertFalse(new Builder("anything").index(false).tokenized(false).docValues(false).build(ctx).fieldType().hasDocValues());
  assertTrue(new Builder("anything").index(false).docValues(true).build(ctx).fieldType().hasDocValues());
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("str1").field("type","string").field("index","no").endObject().startObject("str2").field("type","string").field("index","not_analyzed").endObject().startObject("str3").field("type","string").field("index","analyzed").endObject().startObject("str4").field("type","string").field("index","not_analyzed").field("doc_values",false).endObject().startObject("str5").field("type","string").field("index","no").field("doc_values",true).endObject().endObject().endObject().endObject().string();
  DocumentMapper defaultMapper=parser.parse(mapping);
  ParsedDocument parsedDoc=defaultMapper.parse("test","type","1",XContentFactory.jsonBuilder().startObject().field("str1","1234").field("str2","1234").field("str3","1234").field("str4","1234").field("str5","1234").endObject().bytes());
  final Document doc=parsedDoc.rootDoc();
  assertEquals(DocValuesType.NONE,docValuesType(doc,"str1"));
  assertEquals(DocValuesType.SORTED_SET,docValuesType(doc,"str2"));
  assertEquals(DocValuesType.NONE,docValuesType(doc,"str3"));
  assertEquals(DocValuesType.NONE,docValuesType(doc,"str4"));
  assertEquals(DocValuesType.SORTED_SET,docValuesType(doc,"str5"));
}
