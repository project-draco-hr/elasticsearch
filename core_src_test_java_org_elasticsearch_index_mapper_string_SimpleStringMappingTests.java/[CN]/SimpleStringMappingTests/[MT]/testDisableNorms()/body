{
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","string").endObject().endObject().endObject().endObject().string();
  DocumentMapper defaultMapper=indexService.mapperService().merge("type",new CompressedXContent(mapping),true,false);
  ParsedDocument doc=defaultMapper.parse("test","type","1",XContentFactory.jsonBuilder().startObject().field("field","1234").endObject().bytes());
  IndexableFieldType fieldType=doc.rootDoc().getField("field").fieldType();
  assertEquals(false,fieldType.omitNorms());
  String updatedMapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","string").startObject("norms").field("enabled",false).endObject().endObject().endObject().endObject().endObject().string();
  MergeResult mergeResult=defaultMapper.merge(parser.parse(updatedMapping).mapping(),false,false);
  assertFalse(Arrays.toString(mergeResult.buildConflicts()),mergeResult.hasConflicts());
  doc=defaultMapper.parse("test","type","1",XContentFactory.jsonBuilder().startObject().field("field","1234").endObject().bytes());
  fieldType=doc.rootDoc().getField("field").fieldType();
  assertEquals(true,fieldType.omitNorms());
  updatedMapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","string").startObject("norms").field("enabled",true).endObject().endObject().endObject().endObject().endObject().string();
  try {
    defaultMapper.merge(parser.parse(updatedMapping).mapping(),true,false);
    fail();
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage(),containsString("different [omit_norms]"));
  }
}
