{
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","string").field("analyzer","standard").field("search_analyzer","keyword").endObject().endObject().endObject().endObject().string();
  DocumentMapper mapper=parser.parse("type",new CompressedXContent(mapping));
  assertEquals(mapping,mapper.mappingSource().toString());
  mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","string").field("analyzer","default").field("search_analyzer","keyword").endObject().endObject().endObject().endObject().string();
  mapper=parser.parse("type",new CompressedXContent(mapping));
  assertEquals(mapping,mapper.mappingSource().toString());
  mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","string").field("analyzer","keyword").endObject().endObject().endObject().endObject().string();
  mapper=parser.parse("type",new CompressedXContent(mapping));
  assertEquals(mapping,mapper.mappingSource().toString());
  mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","string").field("analyzer","keyword").field("search_analyzer","default").endObject().endObject().endObject().endObject().string();
  mapper=parser.parse("type",new CompressedXContent(mapping));
  assertEquals(mapping,mapper.mappingSource().toString());
  mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","string").field("analyzer","keyword").endObject().endObject().endObject().endObject().string();
  mapper=parser.parse("type",new CompressedXContent(mapping));
  XContentBuilder builder=XContentFactory.jsonBuilder();
  mapper.toXContent(builder,new ToXContent.MapParams(Collections.singletonMap("include_defaults","true")));
  String mappingString=builder.string();
  assertTrue(mappingString.contains("analyzer"));
  assertTrue(mappingString.contains("search_analyzer"));
  assertTrue(mappingString.contains("search_quote_analyzer"));
}
