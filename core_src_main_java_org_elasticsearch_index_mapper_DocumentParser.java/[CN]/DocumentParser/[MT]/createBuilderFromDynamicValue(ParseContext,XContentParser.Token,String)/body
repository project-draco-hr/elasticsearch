{
  if (token == XContentParser.Token.VALUE_STRING) {
    if (context.root().dateDetection()) {
      String text=context.parser().text();
      if (Strings.countOccurrencesOf(text,":") > 1 || Strings.countOccurrencesOf(text,"-") > 1 || Strings.countOccurrencesOf(text,"/") > 1) {
        for (        FormatDateTimeFormatter dateTimeFormatter : context.root().dynamicDateTimeFormatters()) {
          try {
            dateTimeFormatter.parser().parseMillis(text);
            Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,XContentFieldType.DATE);
            if (builder == null) {
              builder=newDateBuilder(currentFieldName,dateTimeFormatter,Version.indexCreated(context.indexSettings()));
            }
            return builder;
          }
 catch (          Exception e) {
          }
        }
      }
    }
    if (context.root().numericDetection()) {
      String text=context.parser().text();
      try {
        Long.parseLong(text);
        Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,XContentFieldType.LONG);
        if (builder == null) {
          builder=newLongBuilder(currentFieldName,Version.indexCreated(context.indexSettings()));
        }
        return builder;
      }
 catch (      NumberFormatException e) {
      }
      try {
        Double.parseDouble(text);
        Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,XContentFieldType.DOUBLE);
        if (builder == null) {
          builder=newFloatBuilder(currentFieldName,Version.indexCreated(context.indexSettings()));
        }
        return builder;
      }
 catch (      NumberFormatException e) {
      }
    }
    Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,XContentFieldType.STRING);
    if (builder == null) {
      builder=new TextFieldMapper.Builder(currentFieldName).addMultiField(new KeywordFieldMapper.Builder("keyword").ignoreAbove(256));
    }
    return builder;
  }
 else   if (token == XContentParser.Token.VALUE_NUMBER) {
    XContentParser.NumberType numberType=context.parser().numberType();
    if (numberType == XContentParser.NumberType.INT || numberType == XContentParser.NumberType.LONG) {
      Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,XContentFieldType.LONG);
      if (builder == null) {
        builder=newLongBuilder(currentFieldName,Version.indexCreated(context.indexSettings()));
      }
      return builder;
    }
 else     if (numberType == XContentParser.NumberType.FLOAT || numberType == XContentParser.NumberType.DOUBLE) {
      Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,XContentFieldType.DOUBLE);
      if (builder == null) {
        builder=newFloatBuilder(currentFieldName,Version.indexCreated(context.indexSettings()));
      }
      return builder;
    }
  }
 else   if (token == XContentParser.Token.VALUE_BOOLEAN) {
    Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,XContentFieldType.BOOLEAN);
    if (builder == null) {
      builder=new BooleanFieldMapper.Builder(currentFieldName);
    }
    return builder;
  }
 else   if (token == XContentParser.Token.VALUE_EMBEDDED_OBJECT) {
    Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,XContentFieldType.BINARY);
    if (builder == null) {
      builder=new BinaryFieldMapper.Builder(currentFieldName);
    }
    return builder;
  }
 else {
    Mapper.Builder builder=context.root().findTemplateBuilder(context,currentFieldName,XContentFieldType.STRING);
    if (builder != null) {
      return builder;
    }
  }
  throw new IllegalStateException("Can't handle serializing a dynamic type with content token [" + token + "] and field name ["+ currentFieldName+ "]");
}
