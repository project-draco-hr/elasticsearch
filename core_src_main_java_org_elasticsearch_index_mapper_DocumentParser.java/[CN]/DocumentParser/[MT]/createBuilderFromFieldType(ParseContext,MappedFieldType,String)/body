{
  Mapper.Builder builder=null;
  if (fieldType instanceof StringFieldType) {
    builder=context.root().findTemplateBuilder(context,currentFieldName,"string");
    if (builder == null) {
      builder=new StringFieldMapper.Builder(currentFieldName);
    }
  }
 else   if (fieldType instanceof TextFieldType) {
    builder=context.root().findTemplateBuilder(context,currentFieldName,"string");
    if (builder == null) {
      builder=new TextFieldMapper.Builder(currentFieldName);
    }
  }
 else   if (fieldType instanceof KeywordFieldType) {
    builder=context.root().findTemplateBuilder(context,currentFieldName,"string");
    if (builder == null) {
      builder=new KeywordFieldMapper.Builder(currentFieldName);
    }
  }
 else   if (fieldType instanceof DateFieldType) {
    builder=context.root().findTemplateBuilder(context,currentFieldName,"date");
    if (builder == null) {
      builder=new DateFieldMapper.Builder(currentFieldName);
    }
  }
 else   if (fieldType.numericType() != null) {
switch (fieldType.numericType()) {
case LONG:
      builder=context.root().findTemplateBuilder(context,currentFieldName,"long");
    if (builder == null) {
      builder=new LongFieldMapper.Builder(currentFieldName);
    }
  break;
case DOUBLE:
builder=context.root().findTemplateBuilder(context,currentFieldName,"double");
if (builder == null) {
builder=new DoubleFieldMapper.Builder(currentFieldName);
}
break;
case INT:
builder=context.root().findTemplateBuilder(context,currentFieldName,"integer");
if (builder == null) {
builder=new IntegerFieldMapper.Builder(currentFieldName);
}
break;
case FLOAT:
builder=context.root().findTemplateBuilder(context,currentFieldName,"float");
if (builder == null) {
builder=new FloatFieldMapper.Builder(currentFieldName);
}
break;
default :
throw new AssertionError("Unexpected numeric type " + fieldType.numericType());
}
}
return builder;
}
