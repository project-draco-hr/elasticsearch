{
  ObjectMapper.Dynamic dynamic=parentMapper.dynamic();
  if (dynamic == null) {
    dynamic=dynamicOrDefault(context.root().dynamic());
  }
  if (dynamic == ObjectMapper.Dynamic.STRICT) {
    throw new StrictDynamicMappingException(parentMapper.fullPath(),currentFieldName);
  }
  if (dynamic == ObjectMapper.Dynamic.FALSE) {
    return null;
  }
  final Mapper.BuilderContext builderContext=new Mapper.BuilderContext(context.indexSettings(),context.path());
  final MappedFieldType existingFieldType=context.mapperService().fullName(context.path().fullPathAsText(currentFieldName));
  Mapper.Builder builder=null;
  if (existingFieldType != null) {
    builder=createBuilderFromFieldType(context,existingFieldType,currentFieldName);
    if (builder != null) {
      if (builder instanceof StringFieldMapper.Builder) {
        StringFieldMapper.Builder stringBuilder=(StringFieldMapper.Builder)builder;
        stringBuilder.store(existingFieldType.stored());
        stringBuilder.indexOptions(existingFieldType.indexOptions());
        stringBuilder.tokenized(existingFieldType.tokenized());
        stringBuilder.omitNorms(existingFieldType.omitNorms());
        stringBuilder.docValues(existingFieldType.hasDocValues());
        stringBuilder.indexAnalyzer(existingFieldType.indexAnalyzer());
        stringBuilder.searchAnalyzer(existingFieldType.searchAnalyzer());
      }
 else       if (builder instanceof NumberFieldMapper.Builder) {
        NumberFieldMapper.Builder<?,?> numberBuilder=(NumberFieldMapper.Builder<?,?>)builder;
        numberBuilder.store(existingFieldType.stored());
        numberBuilder.indexOptions(existingFieldType.indexOptions());
        numberBuilder.tokenized(existingFieldType.tokenized());
        numberBuilder.omitNorms(existingFieldType.omitNorms());
        numberBuilder.docValues(existingFieldType.hasDocValues());
        numberBuilder.precisionStep(existingFieldType.numericPrecisionStep());
      }
    }
  }
  if (builder == null) {
    builder=createBuilderFromDynamicValue(context,token,currentFieldName);
  }
  Mapper mapper=builder.build(builderContext);
  mapper=parseAndMergeUpdate(mapper,context);
  ObjectMapper update=null;
  if (mapper != null) {
    update=parentMapper.mappingUpdate(mapper);
  }
  return update;
}
