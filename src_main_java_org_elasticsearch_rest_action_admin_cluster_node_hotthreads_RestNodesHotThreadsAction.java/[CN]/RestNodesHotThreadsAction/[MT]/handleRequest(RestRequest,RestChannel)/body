{
  String[] nodesIds=RestActions.splitNodes(request.param("nodeId"));
  NodesHotThreadsRequest nodesHotThreadsRequest=new NodesHotThreadsRequest(nodesIds);
  nodesHotThreadsRequest.setThreads(request.paramAsInt("threads",nodesHotThreadsRequest.getThreads()));
  nodesHotThreadsRequest.setType(request.param("type",nodesHotThreadsRequest.getType()));
  nodesHotThreadsRequest.setInterval(TimeValue.parseTimeValue(request.param("interval"),nodesHotThreadsRequest.getInterval()));
  nodesHotThreadsRequest.setSnapshots(request.paramAsInt("snapshots",nodesHotThreadsRequest.getSnapshots()));
  client.admin().cluster().nodesHotThreads(nodesHotThreadsRequest,new ActionListener<NodesHotThreadsResponse>(){
    @Override public void onResponse(    NodesHotThreadsResponse response){
      try {
        StringBuilder sb=new StringBuilder();
        for (        NodeHotThreads node : response) {
          sb.append("::: ").append(node.getNode().toString()).append("\n");
          Strings.spaceify(3,node.getHotThreads(),sb);
          sb.append('\n');
        }
        channel.sendResponse(new StringRestResponse(RestStatus.OK,sb.toString()));
      }
 catch (      Exception e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
