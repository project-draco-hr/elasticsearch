{
  Path unzipDir=createTempDir();
  Path unzipDataDir=unzipDir.resolve("data");
  String indexName=indexFile.replace(".zip","").toLowerCase(Locale.ROOT);
  Path backwardsIndex=getDataPath(indexFile);
  try (InputStream stream=Files.newInputStream(backwardsIndex)){
    TestUtil.unzip(stream,unzipDir);
  }
   assertTrue(Files.exists(unzipDataDir));
  Path[] list=FileSystemUtils.files(unzipDataDir);
  if (list.length != 1) {
    throw new IllegalStateException("Backwards index must contain exactly one cluster");
  }
  Path src=list[0].resolve("nodes/0/indices/" + indexName);
  assertTrue("[" + indexFile + "] missing index dir: "+ src.toString(),Files.exists(src));
  if (randomBoolean()) {
    logger.info("--> injecting index [{}] into single data path",indexName);
    copyIndex(logger,src,indexName,singleDataPath);
  }
 else {
    logger.info("--> injecting index [{}] into multi data path",indexName);
    copyIndex(logger,src,indexName,multiDataPath);
  }
  final Iterable<NodeEnvironment> instances=internalCluster().getInstances(NodeEnvironment.class);
  for (  NodeEnvironment nodeEnv : instances) {
    MultiDataPathUpgrader.upgradeMultiDataPath(nodeEnv,logger);
  }
  client().admin().cluster().prepareReroute().get();
  ensureGreen(indexName);
  return indexName;
}
