{
  InternalIndexService indexService=(InternalIndexService)indicesService.indexServiceSafe(request.index());
  InternalIndexShard indexShard=(InternalIndexShard)indexService.shardSafe(request.shardId());
  ShardStatus shardStatus=new ShardStatus(indexShard.routingEntry());
  shardStatus.state=indexShard.state();
  try {
    shardStatus.storeSize=indexShard.store().estimateSize();
  }
 catch (  IOException e) {
  }
  if (indexShard.state() == IndexShardState.STARTED) {
    shardStatus.translogId=indexShard.translog().currentId();
    shardStatus.translogOperations=indexShard.translog().size();
    Engine.Searcher searcher=indexShard.searcher();
    try {
      shardStatus.docs=new DocsStatus();
      shardStatus.docs.numDocs=searcher.reader().numDocs();
      shardStatus.docs.maxDoc=searcher.reader().maxDoc();
      shardStatus.docs.deletedDocs=searcher.reader().numDeletedDocs();
    }
  finally {
      searcher.release();
    }
  }
  RecoveryStatus peerRecoveryStatus=indexShard.peerRecoveryStatus();
  if (peerRecoveryStatus == null) {
    peerRecoveryStatus=peerRecoveryTarget.peerRecoveryStatus(indexShard.shardId());
  }
  if (peerRecoveryStatus != null) {
    PeerRecoveryStatus.Stage stage;
switch (peerRecoveryStatus.stage()) {
case INIT:
      stage=PeerRecoveryStatus.Stage.INIT;
    break;
case INDEX:
  stage=PeerRecoveryStatus.Stage.INDEX;
break;
case TRANSLOG:
stage=PeerRecoveryStatus.Stage.TRANSLOG;
break;
case FINALIZE:
stage=PeerRecoveryStatus.Stage.FINALIZE;
break;
case DONE:
stage=PeerRecoveryStatus.Stage.DONE;
break;
default :
stage=PeerRecoveryStatus.Stage.INIT;
}
shardStatus.peerRecoveryStatus=new PeerRecoveryStatus(stage,peerRecoveryStatus.startTime(),peerRecoveryStatus.time(),peerRecoveryStatus.phase1TotalSize(),peerRecoveryStatus.phase1ExistingTotalSize(),peerRecoveryStatus.currentFilesSize(),peerRecoveryStatus.currentTranslogOperations());
}
IndexShardGatewayService gatewayService=indexService.shardInjector(request.shardId()).getInstance(IndexShardGatewayService.class);
org.elasticsearch.index.gateway.RecoveryStatus gatewayRecoveryStatus=gatewayService.recoveryStatus();
if (gatewayRecoveryStatus != null) {
GatewayRecoveryStatus.Stage stage;
switch (gatewayRecoveryStatus.stage()) {
case INIT:
stage=GatewayRecoveryStatus.Stage.INIT;
break;
case INDEX:
stage=GatewayRecoveryStatus.Stage.INDEX;
break;
case TRANSLOG:
stage=GatewayRecoveryStatus.Stage.TRANSLOG;
break;
case DONE:
stage=GatewayRecoveryStatus.Stage.DONE;
break;
default :
stage=GatewayRecoveryStatus.Stage.INIT;
}
shardStatus.gatewayRecoveryStatus=new GatewayRecoveryStatus(stage,gatewayRecoveryStatus.startTime(),gatewayRecoveryStatus.time(),gatewayRecoveryStatus.index().totalSize(),gatewayRecoveryStatus.index().existingTotalSize(),gatewayRecoveryStatus.index().currentFilesSize(),gatewayRecoveryStatus.translog().currentTranslogOperations());
}
SnapshotStatus snapshotStatus=gatewayService.snapshotStatus();
if (snapshotStatus != null) {
GatewaySnapshotStatus.Stage stage;
switch (snapshotStatus.stage()) {
case DONE:
stage=GatewaySnapshotStatus.Stage.DONE;
break;
case FAILURE:
stage=GatewaySnapshotStatus.Stage.FAILURE;
break;
case TRANSLOG:
stage=GatewaySnapshotStatus.Stage.TRANSLOG;
break;
case FINALIZE:
stage=GatewaySnapshotStatus.Stage.FINALIZE;
break;
case INDEX:
stage=GatewaySnapshotStatus.Stage.INDEX;
break;
default :
stage=GatewaySnapshotStatus.Stage.NONE;
break;
}
shardStatus.gatewaySnapshotStatus=new GatewaySnapshotStatus(stage,snapshotStatus.startTime(),snapshotStatus.time(),snapshotStatus.index().totalSize());
}
return shardStatus;
}
