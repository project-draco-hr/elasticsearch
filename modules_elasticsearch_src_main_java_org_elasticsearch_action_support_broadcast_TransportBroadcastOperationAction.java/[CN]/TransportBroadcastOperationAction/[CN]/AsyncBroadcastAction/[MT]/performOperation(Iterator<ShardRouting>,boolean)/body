{
  final ShardRouting shard=shardIt.next();
  if (!shard.active()) {
    onOperation(shard,shardIt,null,false);
  }
 else {
    final ShardRequest shardRequest=newShardRequest(shard,request);
    if (shard.currentNodeId().equals(nodes.localNodeId())) {
      if (localAsync) {
        threadPool.execute(new Runnable(){
          @Override public void run(){
            try {
              onOperation(shard,shardOperation(shardRequest),true);
            }
 catch (            Exception e) {
              onOperation(shard,shardIt,e,true);
            }
          }
        }
);
      }
 else {
        try {
          onOperation(shard,shardOperation(shardRequest),false);
        }
 catch (        Exception e) {
          onOperation(shard,shardIt,e,false);
        }
      }
    }
 else {
      Node node=nodes.get(shard.currentNodeId());
      transportService.sendRequest(node,transportShardAction(),shardRequest,new BaseTransportResponseHandler<ShardResponse>(){
        @Override public ShardResponse newInstance(){
          return newShardResponse();
        }
        @Override public void handleResponse(        ShardResponse response){
          onOperation(shard,response,false);
        }
        @Override public void handleException(        RemoteTransportException exp){
          onOperation(shard,shardIt,exp,false);
        }
        @Override public boolean spawn(){
          return false;
        }
      }
);
    }
  }
}
