{
  try {
    final BinaryDocValues values=DocValues.getBinary(context.reader(),fieldNames.indexName());
    if (numericType.isFloatingPoint()) {
      return new AtomicDoubleFieldData(-1){
        @Override public SortedNumericDoubleValues getDoubleValues(){
switch (numericType) {
case FLOAT:
            return new BinaryAsSortedNumericFloatValues(values);
case DOUBLE:
          return new BinaryAsSortedNumericDoubleValues(values);
default :
        throw new ElasticsearchIllegalArgumentException("" + numericType);
    }
  }
}
;
}
 else {
return new AtomicLongFieldData(-1){
  @Override public SortedNumericDocValues getLongValues(){
    return new BinaryAsSortedNumericDocValues(values);
  }
}
;
}
}
 catch (IOException e) {
throw new ElasticsearchIllegalStateException("Cannot load doc values",e);
}
}
