{
  assertAcked(prepareCreate("test").setSettings(ImmutableSettings.builder().put(AbstractIndexStore.INDEX_STORE_THROTTLE_TYPE,"merge").put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,"1").put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,"0").put(TieredMergePolicyProvider.INDEX_MERGE_POLICY_MAX_MERGE_AT_ONCE,"2").put(TieredMergePolicyProvider.INDEX_MERGE_POLICY_SEGMENTS_PER_TIER,"2").put(ConcurrentMergeSchedulerProvider.MAX_THREAD_COUNT,"1").put(ConcurrentMergeSchedulerProvider.MAX_MERGE_COUNT,"1").put("index.merge.policy.type","tiered")));
  ensureGreen();
  long termUpto=0;
  IndicesStatsResponse stats;
  boolean done=false;
  long start=System.currentTimeMillis();
  while (!done) {
    for (int i=0; i < 100; i++) {
      StringBuilder sb=new StringBuilder();
      for (int j=0; j < 100; j++) {
        sb.append(' ');
        sb.append(termUpto++);
      }
      client().prepareIndex("test","type","" + termUpto).setSource("field" + (i % 10),sb.toString()).get();
      if (i % 2 == 0) {
        refresh();
      }
    }
    refresh();
    stats=client().admin().indices().prepareStats().execute().actionGet();
    done=stats.getPrimaries().getIndexing().getTotal().getThrottleTimeInMillis() > 0;
    if (System.currentTimeMillis() - start > 300 * 1000) {
      fail("index throttling didn't kick in after 5 minutes of intense merging");
    }
  }
  logger.info("test: now optimize");
  client().admin().indices().prepareOptimize("test").get();
  flush();
  logger.info("test: test done");
}
