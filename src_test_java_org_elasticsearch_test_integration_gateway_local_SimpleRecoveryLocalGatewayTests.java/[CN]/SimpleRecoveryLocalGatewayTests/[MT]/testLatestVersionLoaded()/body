{
  buildNode("node1",settingsBuilder().put("gateway.type","local").build());
  buildNode("node2",settingsBuilder().put("gateway.type","local").build());
  cleanAndCloseNodes();
  Node node1=startNode("node1",settingsBuilder().put("gateway.type","local").put("index.number_of_shards",1).put("gateway.recover_after_nodes",2).build());
  Node node2=startNode("node2",settingsBuilder().put("gateway.type","local").put("index.number_of_shards",1).put("gateway.recover_after_nodes",2).build());
  node1.client().prepareIndex("test","type1","1").setSource(jsonBuilder().startObject().field("field","value1").endObject()).execute().actionGet();
  node1.client().admin().indices().prepareFlush().execute().actionGet();
  node1.client().prepareIndex("test","type1","2").setSource(jsonBuilder().startObject().field("field","value2").endObject()).execute().actionGet();
  node1.client().admin().indices().prepareRefresh().execute().actionGet();
  logger.info("--> running cluster_health (wait for the shards to startup)");
  ClusterHealthResponse clusterHealth=client("node1").admin().cluster().health(clusterHealthRequest().setWaitForGreenStatus().setWaitForActiveShards(2)).actionGet();
  logger.info("--> done cluster_health, status " + clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.GREEN));
  for (int i=0; i < 10; i++) {
    assertThat(node1.client().prepareCount().setQuery(matchAllQuery()).execute().actionGet().getCount(),equalTo(2l));
  }
  logger.info("--> closing first node, and indexing more data to the second node");
  closeNode("node1");
  node2.client().prepareIndex("test","type1","3").setSource(jsonBuilder().startObject().field("field","value3").endObject()).execute().actionGet();
  node2.client().admin().indices().prepareRefresh().execute().actionGet();
  for (int i=0; i < 10; i++) {
    assertThat(node2.client().prepareCount().setQuery(matchAllQuery()).execute().actionGet().getCount(),equalTo(3l));
  }
  logger.info("--> add some metadata, additional type and template");
  node2.client().admin().indices().preparePutMapping("test").setType("type2").setSource(jsonBuilder().startObject().startObject("type1").startObject("_source").field("enabled",false).endObject().endObject().endObject()).execute().actionGet();
  node2.client().admin().indices().preparePutTemplate("template_1").setTemplate("te*").setOrder(0).addMapping("type1",XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("field1").field("type","string").field("store","yes").endObject().startObject("field2").field("type","string").field("store","yes").field("index","not_analyzed").endObject().endObject().endObject().endObject()).execute().actionGet();
  node2.client().admin().indices().prepareAliases().addAlias("test","test_alias",FilterBuilders.termFilter("field","value")).execute().actionGet();
  logger.info("--> closing the second node");
  closeNode("node2");
  logger.info("--> starting two nodes back, verifying we got the latest version");
  node1=startNode("node1",settingsBuilder().put("gateway.type","local").put("gateway.recover_after_nodes",2).build());
  node2=startNode("node2",settingsBuilder().put("gateway.type","local").put("gateway.recover_after_nodes",2).build());
  logger.info("--> running cluster_health (wait for the shards to startup)");
  clusterHealth=client("node1").admin().cluster().health(clusterHealthRequest().setWaitForGreenStatus().setWaitForActiveShards(2)).actionGet();
  logger.info("--> done cluster_health, status " + clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.GREEN));
  for (int i=0; i < 10; i++) {
    assertThat(node1.client().prepareCount().setQuery(matchAllQuery()).execute().actionGet().getCount(),equalTo(3l));
  }
  ClusterState state=node1.client().admin().cluster().prepareState().execute().actionGet().getState();
  assertThat(state.metaData().index("test").mapping("type2"),notNullValue());
  assertThat(state.metaData().templates().get("template_1").template(),equalTo("te*"));
  assertThat(state.metaData().index("test").aliases().get("test_alias"),notNullValue());
  assertThat(state.metaData().index("test").aliases().get("test_alias").filter(),notNullValue());
}
