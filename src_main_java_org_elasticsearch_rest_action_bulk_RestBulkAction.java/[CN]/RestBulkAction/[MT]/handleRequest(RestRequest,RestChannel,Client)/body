{
  BulkRequest bulkRequest=Requests.bulkRequest();
  String defaultIndex=request.param("index");
  String defaultType=request.param("type");
  String defaultRouting=request.param("routing");
  String consistencyLevel=request.param("consistency");
  if (consistencyLevel != null) {
    bulkRequest.consistencyLevel(WriteConsistencyLevel.fromString(consistencyLevel));
  }
  bulkRequest.timeout(request.paramAsTime("timeout",BulkShardRequest.DEFAULT_TIMEOUT));
  bulkRequest.refresh(request.paramAsBoolean("refresh",bulkRequest.refresh()));
  bulkRequest.add(request.content(),defaultIndex,defaultType,defaultRouting,null,allowExplicitIndex);
  client.bulk(bulkRequest,new RestBuilderListener<BulkResponse>(channel){
    @Override public RestResponse buildResponse(    BulkResponse response,    XContentBuilder builder) throws Exception {
      builder.startObject();
      builder.field(Fields.TOOK,response.getTookInMillis());
      builder.field(Fields.ERRORS,response.hasFailures());
      builder.startArray(Fields.ITEMS);
      for (      BulkItemResponse itemResponse : response) {
        builder.startObject();
        builder.startObject(itemResponse.getOpType());
        builder.field(Fields._INDEX,itemResponse.getIndex());
        builder.field(Fields._TYPE,itemResponse.getType());
        builder.field(Fields._ID,itemResponse.getId());
        long version=itemResponse.getVersion();
        if (version != -1) {
          builder.field(Fields._VERSION,itemResponse.getVersion());
        }
        if (itemResponse.isFailed()) {
          builder.field(Fields.STATUS,itemResponse.getFailure().getStatus().getStatus());
          builder.field(Fields.ERROR,itemResponse.getFailure().getMessage());
        }
 else {
          ActionWriteResponse.ShardInfo shardInfo=itemResponse.getResponse().getShardInfo();
          shardInfo.toXContent(builder,request);
          if (itemResponse.getResponse() instanceof DeleteResponse) {
            DeleteResponse deleteResponse=itemResponse.getResponse();
            if (deleteResponse.isFound()) {
              builder.field(Fields.STATUS,shardInfo.status().getStatus());
            }
 else {
              builder.field(Fields.STATUS,RestStatus.NOT_FOUND.getStatus());
            }
            builder.field(Fields.FOUND,deleteResponse.isFound());
          }
 else           if (itemResponse.getResponse() instanceof IndexResponse) {
            IndexResponse indexResponse=itemResponse.getResponse();
            if (indexResponse.isCreated()) {
              builder.field(Fields.STATUS,RestStatus.CREATED.getStatus());
            }
 else {
              builder.field(Fields.STATUS,shardInfo.status().getStatus());
            }
          }
 else           if (itemResponse.getResponse() instanceof UpdateResponse) {
            UpdateResponse updateResponse=itemResponse.getResponse();
            if (updateResponse.isCreated()) {
              builder.field(Fields.STATUS,RestStatus.CREATED.getStatus());
            }
 else {
              builder.field(Fields.STATUS,shardInfo.status().getStatus());
            }
          }
        }
        builder.endObject();
        builder.endObject();
      }
      builder.endArray();
      builder.endObject();
      return new BytesRestResponse(OK,builder);
    }
  }
);
}
