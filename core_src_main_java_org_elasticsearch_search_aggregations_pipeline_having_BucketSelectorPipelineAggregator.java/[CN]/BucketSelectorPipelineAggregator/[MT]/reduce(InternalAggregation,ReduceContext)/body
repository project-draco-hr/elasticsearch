{
  InternalMultiBucketAggregation<InternalMultiBucketAggregation,InternalMultiBucketAggregation.InternalBucket> originalAgg=(InternalMultiBucketAggregation<InternalMultiBucketAggregation,InternalMultiBucketAggregation.InternalBucket>)aggregation;
  List<? extends Bucket> buckets=originalAgg.getBuckets();
  CompiledScript compiledScript=reduceContext.scriptService().compile(script,ScriptContext.Standard.AGGS,reduceContext,Collections.emptyMap());
  List newBuckets=new ArrayList<>();
  for (  Bucket bucket : buckets) {
    Map<String,Object> vars=new HashMap<>();
    if (script.getParams() != null) {
      vars.putAll(script.getParams());
    }
    for (    Map.Entry<String,String> entry : bucketsPathsMap.entrySet()) {
      String varName=entry.getKey();
      String bucketsPath=entry.getValue();
      Double value=resolveBucketValue(originalAgg,bucket,bucketsPath,gapPolicy);
      vars.put(varName,value);
    }
    ExecutableScript executableScript=reduceContext.scriptService().executable(compiledScript,vars);
    Object scriptReturnValue=executableScript.run();
    final boolean keepBucket;
    if ("expression".equals(script.getLang())) {
      double scriptDoubleValue=(double)scriptReturnValue;
      keepBucket=scriptDoubleValue == 1.0;
    }
 else {
      keepBucket=(boolean)scriptReturnValue;
    }
    if (keepBucket) {
      newBuckets.add(bucket);
    }
  }
  return originalAgg.create(newBuckets);
}
