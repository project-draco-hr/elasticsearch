{
  if (value.endsWith("d") || value.endsWith("D")) {
    if (radix != 10) {
      throw new IllegalStateException(error("Invalid tree structure."));
    }
    try {
      constant=Double.parseDouble(value.substring(0,value.length() - 1));
      actual=definition.getType("double");
    }
 catch (    final NumberFormatException exception) {
      throw new IllegalArgumentException(error("Invalid double constant [" + value + "]."));
    }
  }
 else   if (value.endsWith("f") || value.endsWith("F")) {
    if (radix != 10) {
      throw new IllegalStateException(error("Invalid tree structure."));
    }
    try {
      constant=Float.parseFloat(value.substring(0,value.length() - 1));
      actual=definition.getType("float");
    }
 catch (    final NumberFormatException exception) {
      throw new IllegalArgumentException(error("Invalid float constant [" + value + "]."));
    }
  }
 else   if (value.endsWith("l") || value.endsWith("L")) {
    try {
      constant=Long.parseLong(value.substring(0,value.length() - 1),radix);
      actual=definition.getType("long");
    }
 catch (    final NumberFormatException exception) {
      throw new IllegalArgumentException(error("Invalid long constant [" + value + "]."));
    }
  }
 else {
    try {
      final Sort sort=expected == null ? Sort.INT : expected.sort;
      final int integer=Integer.parseInt(value,radix);
      if (sort == Sort.BYTE && integer >= Byte.MIN_VALUE && integer <= Byte.MAX_VALUE) {
        constant=(byte)integer;
        actual=definition.getType("byte");
      }
 else       if (sort == Sort.CHAR && integer >= Character.MIN_VALUE && integer <= Character.MAX_VALUE) {
        constant=(char)integer;
        actual=definition.getType("char");
      }
 else       if (sort == Sort.SHORT && integer >= Short.MIN_VALUE && integer <= Short.MAX_VALUE) {
        constant=(short)integer;
        actual=definition.getType("short");
      }
 else {
        constant=integer;
        actual=definition.getType("int");
      }
    }
 catch (    final NumberFormatException exception) {
      throw new IllegalArgumentException(error("Invalid int constant [" + value + "]."));
    }
  }
}
