{
  final Sort sort=type.sort;
  final boolean exact=!settings.getNumericOverflow() && ((sort == Sort.INT || sort == Sort.LONG) && (token == MUL || token == DIV || token == ADD || token == SUB) || (sort == Sort.FLOAT || sort == Sort.DOUBLE) && (token == MUL || token == DIV || token == REM || token == ADD || token == SUB));
  if (sort == Sort.LONG && (token == LSH || token == USH || token == RSH)) {
    execute.cast(org.objectweb.asm.Type.LONG_TYPE,org.objectweb.asm.Type.INT_TYPE);
  }
  if (exact) {
switch (sort) {
case INT:
switch (token) {
case MUL:
        execute.invokeStatic(definition.mathType.type,MULEXACT_INT);
      break;
case DIV:
    execute.invokeStatic(definition.utilityType.type,DIVWOOVERLOW_INT);
  break;
case ADD:
execute.invokeStatic(definition.mathType.type,ADDEXACT_INT);
break;
case SUB:
execute.invokeStatic(definition.mathType.type,SUBEXACT_INT);
break;
default :
throw new IllegalStateException(Metadata.error(source) + "Unexpected writer state.");
}
break;
case LONG:
switch (token) {
case MUL:
execute.invokeStatic(definition.mathType.type,MULEXACT_LONG);
break;
case DIV:
execute.invokeStatic(definition.utilityType.type,DIVWOOVERLOW_LONG);
break;
case ADD:
execute.invokeStatic(definition.mathType.type,ADDEXACT_LONG);
break;
case SUB:
execute.invokeStatic(definition.mathType.type,SUBEXACT_LONG);
break;
default :
throw new IllegalStateException(Metadata.error(source) + "Unexpected writer state.");
}
break;
case FLOAT:
switch (token) {
case MUL:
execute.invokeStatic(definition.utilityType.type,MULWOOVERLOW_FLOAT);
break;
case DIV:
execute.invokeStatic(definition.utilityType.type,DIVWOOVERLOW_FLOAT);
break;
case REM:
execute.invokeStatic(definition.utilityType.type,REMWOOVERLOW_FLOAT);
break;
case ADD:
execute.invokeStatic(definition.utilityType.type,ADDWOOVERLOW_FLOAT);
break;
case SUB:
execute.invokeStatic(definition.utilityType.type,SUBWOOVERLOW_FLOAT);
break;
default :
throw new IllegalStateException(Metadata.error(source) + "Unexpected writer state.");
}
break;
case DOUBLE:
switch (token) {
case MUL:
execute.invokeStatic(definition.utilityType.type,MULWOOVERLOW_DOUBLE);
break;
case DIV:
execute.invokeStatic(definition.utilityType.type,DIVWOOVERLOW_DOUBLE);
break;
case REM:
execute.invokeStatic(definition.utilityType.type,REMWOOVERLOW_DOUBLE);
break;
case ADD:
execute.invokeStatic(definition.utilityType.type,ADDWOOVERLOW_DOUBLE);
break;
case SUB:
execute.invokeStatic(definition.utilityType.type,SUBWOOVERLOW_DOUBLE);
break;
default :
throw new IllegalStateException(Metadata.error(source) + "Unexpected writer state.");
}
break;
default :
throw new IllegalStateException(Metadata.error(source) + "Unexpected writer state.");
}
}
 else {
if ((sort == Sort.FLOAT || sort == Sort.DOUBLE) && (token == LSH || token == USH || token == RSH || token == BWAND || token == BWXOR || token == BWOR)) {
throw new IllegalStateException(Metadata.error(source) + "Unexpected writer state.");
}
if (sort == Sort.DEF) {
switch (token) {
case MUL:
execute.invokeStatic(definition.defobjType.type,DEF_MUL_CALL);
break;
case DIV:
execute.invokeStatic(definition.defobjType.type,DEF_DIV_CALL);
break;
case REM:
execute.invokeStatic(definition.defobjType.type,DEF_REM_CALL);
break;
case ADD:
execute.invokeStatic(definition.defobjType.type,DEF_ADD_CALL);
break;
case SUB:
execute.invokeStatic(definition.defobjType.type,DEF_SUB_CALL);
break;
case LSH:
execute.invokeStatic(definition.defobjType.type,DEF_LSH_CALL);
break;
case USH:
execute.invokeStatic(definition.defobjType.type,DEF_RSH_CALL);
break;
case RSH:
execute.invokeStatic(definition.defobjType.type,DEF_USH_CALL);
break;
case BWAND:
execute.invokeStatic(definition.defobjType.type,DEF_AND_CALL);
break;
case BWXOR:
execute.invokeStatic(definition.defobjType.type,DEF_XOR_CALL);
break;
case BWOR:
execute.invokeStatic(definition.defobjType.type,DEF_OR_CALL);
break;
default :
throw new IllegalStateException(Metadata.error(source) + "Unexpected writer state.");
}
}
 else {
switch (token) {
case MUL:
execute.math(GeneratorAdapter.MUL,type.type);
break;
case DIV:
execute.math(GeneratorAdapter.DIV,type.type);
break;
case REM:
execute.math(GeneratorAdapter.REM,type.type);
break;
case ADD:
execute.math(GeneratorAdapter.ADD,type.type);
break;
case SUB:
execute.math(GeneratorAdapter.SUB,type.type);
break;
case LSH:
execute.math(GeneratorAdapter.SHL,type.type);
break;
case USH:
execute.math(GeneratorAdapter.USHR,type.type);
break;
case RSH:
execute.math(GeneratorAdapter.SHR,type.type);
break;
case BWAND:
execute.math(GeneratorAdapter.AND,type.type);
break;
case BWXOR:
execute.math(GeneratorAdapter.XOR,type.type);
break;
case BWOR:
execute.math(GeneratorAdapter.OR,type.type);
break;
default :
throw new IllegalStateException(Metadata.error(source) + "Unexpected writer state.");
}
}
}
}
