{
  final String[] values=new String[randomIntBetween(2,20)];
  for (int i=0; i < values.length; ++i) {
    values[i]=TestUtil.randomSimpleString(random());
  }
  final int numParents=scaledRandomIntBetween(10,3072);
  List<Document> docs=new ArrayList<>();
  FixedBitSet parents=new FixedBitSet(64);
  for (int i=0; i < numParents; ++i) {
    docs.clear();
    final int numChildren=randomInt(4);
    for (int j=0; j < numChildren; ++j) {
      final Document child=new Document();
      final int numValues=randomInt(3);
      for (int k=0; k < numValues; ++k) {
        final String value=RandomPicks.randomFrom(random(),values);
        addField(child,"text",value);
      }
      docs.add(child);
    }
    final Document parent=new Document();
    parent.add(new StringField("type","parent",Store.YES));
    final String value=RandomPicks.randomFrom(random(),values);
    if (value != null) {
      addField(parent,"text",value);
    }
    docs.add(parent);
    int bit=parents.prevSetBit(parents.length() - 1) + docs.size();
    parents=FixedBitSet.ensureCapacity(parents,bit);
    parents.set(bit);
    writer.addDocuments(docs);
    if (randomInt(10) == 0) {
      writer.commit();
    }
  }
  DirectoryReader directoryReader=DirectoryReader.open(writer);
  directoryReader=ElasticsearchDirectoryReader.wrap(directoryReader,new ShardId(indexService.index(),0));
  IndexSearcher searcher=new IndexSearcher(directoryReader);
  IndexFieldData<?> fieldData=getForField("text");
  final Object missingValue;
switch (randomInt(4)) {
case 0:
    missingValue="_first";
  break;
case 1:
missingValue="_last";
break;
case 2:
missingValue=new BytesRef(RandomPicks.randomFrom(random(),values));
break;
default :
missingValue=new BytesRef(TestUtil.randomSimpleString(random()));
break;
}
Query parentFilter=new TermQuery(new Term("type","parent"));
Query childFilter=Queries.not(parentFilter);
Nested nested=createNested(searcher,parentFilter,childFilter);
BytesRefFieldComparatorSource nestedComparatorSource=new BytesRefFieldComparatorSource(fieldData,missingValue,sortMode,nested);
ToParentBlockJoinQuery query=new ToParentBlockJoinQuery(new ConstantScoreQuery(childFilter),new QueryBitSetProducer(parentFilter),ScoreMode.None);
Sort sort=new Sort(new SortField("text",nestedComparatorSource));
TopFieldDocs topDocs=searcher.search(query,randomIntBetween(1,numParents),sort);
assertTrue(topDocs.scoreDocs.length > 0);
BytesRef previous=null;
for (int i=0; i < topDocs.scoreDocs.length; ++i) {
final int docID=topDocs.scoreDocs[i].doc;
assertTrue("expected " + docID + " to be a parent",parents.get(docID));
BytesRef cmpValue=null;
for (int child=parents.prevSetBit(docID - 1) + 1; child < docID; ++child) {
String[] sVals=searcher.doc(child).getValues("text");
final BytesRef[] vals;
if (sVals.length == 0) {
vals=new BytesRef[0];
}
 else {
vals=new BytesRef[sVals.length];
for (int j=0; j < vals.length; ++j) {
vals[j]=new BytesRef(sVals[j]);
}
}
for (BytesRef value : vals) {
if (cmpValue == null) {
cmpValue=value;
}
 else if (sortMode == MultiValueMode.MIN && value.compareTo(cmpValue) < 0) {
cmpValue=value;
}
 else if (sortMode == MultiValueMode.MAX && value.compareTo(cmpValue) > 0) {
cmpValue=value;
}
}
}
if (cmpValue == null) {
if ("_first".equals(missingValue)) {
cmpValue=new BytesRef();
}
 else if ("_last".equals(missingValue) == false) {
cmpValue=(BytesRef)missingValue;
}
}
if (previous != null && cmpValue != null) {
assertTrue(previous.utf8ToString() + "   /   " + cmpValue.utf8ToString(),previous.compareTo(cmpValue) <= 0);
}
previous=cmpValue;
}
searcher.getIndexReader().close();
}
