{
  fillExtendedMvSet();
  refreshReader();
  FieldDataType fieldDataType=new FieldDataType("string",Settings.builder().put("global_values","fixed"));
  IndexOrdinalsFieldData ifd=getForField(fieldDataType,"value",hasDocValues());
  IndexOrdinalsFieldData globalOrdinals=ifd.loadGlobal(topLevelReader);
  assertThat(topLevelReader.leaves().size(),equalTo(3));
  assertThat(globalOrdinals,instanceOf(GlobalOrdinalsIndexFieldData.class));
  LeafReaderContext leaf=topLevelReader.leaves().get(0);
  AtomicOrdinalsFieldData afd=globalOrdinals.load(leaf);
  RandomAccessOrds values=afd.getOrdinalsValues();
  assertIteratorConsistentWithRandomAccess(values,leaf.reader().maxDoc());
  values.setDocument(0);
  assertThat(values.cardinality(),equalTo(2));
  long ord=values.nextOrd();
  assertThat(ord,equalTo(3L));
  assertThat(values.lookupOrd(ord).utf8ToString(),equalTo("02"));
  ord=values.nextOrd();
  assertThat(ord,equalTo(5L));
  assertThat(values.lookupOrd(ord).utf8ToString(),equalTo("04"));
  values.setDocument(1);
  assertThat(values.cardinality(),equalTo(0));
  values.setDocument(2);
  assertThat(values.cardinality(),equalTo(1));
  ord=values.nextOrd();
  assertThat(ord,equalTo(4L));
  assertThat(values.lookupOrd(ord).utf8ToString(),equalTo("03"));
  leaf=topLevelReader.leaves().get(1);
  afd=globalOrdinals.load(leaf);
  values=afd.getOrdinalsValues();
  assertIteratorConsistentWithRandomAccess(values,leaf.reader().maxDoc());
  values.setDocument(0);
  assertThat(values.cardinality(),equalTo(3));
  ord=values.nextOrd();
  assertThat(ord,equalTo(5L));
  assertThat(values.lookupOrd(ord).utf8ToString(),equalTo("04"));
  ord=values.nextOrd();
  assertThat(ord,equalTo(6L));
  assertThat(values.lookupOrd(ord).utf8ToString(),equalTo("05"));
  ord=values.nextOrd();
  assertThat(ord,equalTo(7L));
  assertThat(values.lookupOrd(ord).utf8ToString(),equalTo("06"));
  values.setDocument(1);
  assertThat(values.cardinality(),equalTo(3));
  ord=values.nextOrd();
  assertThat(ord,equalTo(7L));
  assertThat(values.lookupOrd(ord).utf8ToString(),equalTo("06"));
  ord=values.nextOrd();
  assertThat(ord,equalTo(8L));
  assertThat(values.lookupOrd(ord).utf8ToString(),equalTo("07"));
  ord=values.nextOrd();
  assertThat(ord,equalTo(9L));
  assertThat(values.lookupOrd(ord).utf8ToString(),equalTo("08"));
  values.setDocument(2);
  assertThat(values.cardinality(),equalTo(0));
  values.setDocument(3);
  assertThat(values.cardinality(),equalTo(3));
  ord=values.nextOrd();
  assertThat(ord,equalTo(9L));
  assertThat(values.lookupOrd(ord).utf8ToString(),equalTo("08"));
  ord=values.nextOrd();
  assertThat(ord,equalTo(10L));
  assertThat(values.lookupOrd(ord).utf8ToString(),equalTo("09"));
  ord=values.nextOrd();
  assertThat(ord,equalTo(11L));
  assertThat(values.lookupOrd(ord).utf8ToString(),equalTo("10"));
  leaf=topLevelReader.leaves().get(2);
  afd=globalOrdinals.load(leaf);
  values=afd.getOrdinalsValues();
  assertIteratorConsistentWithRandomAccess(values,leaf.reader().maxDoc());
  values.setDocument(0);
  values.setDocument(0);
  assertThat(values.cardinality(),equalTo(3));
  ord=values.nextOrd();
  assertThat(ord,equalTo(0L));
  assertThat(values.lookupOrd(ord).utf8ToString(),equalTo("!08"));
  ord=values.nextOrd();
  assertThat(ord,equalTo(1L));
  assertThat(values.lookupOrd(ord).utf8ToString(),equalTo("!09"));
  ord=values.nextOrd();
  assertThat(ord,equalTo(2L));
  assertThat(values.lookupOrd(ord).utf8ToString(),equalTo("!10"));
}
