{
  if (shard.state() == IndexShardState.CLOSED) {
    return;
  }
  if (settings.isWarmerEnabled() == false) {
    return;
  }
  if (logger.isTraceEnabled()) {
    if (isTopReader) {
      logger.trace("{} top warming [{}]",shard.shardId(),searcher.reader());
    }
 else {
      logger.trace("{} warming [{}]",shard.shardId(),searcher.reader());
    }
  }
  shard.warmerService().onPreWarm();
  long time=System.nanoTime();
  final List<TerminationHandle> terminationHandles=new ArrayList<>();
  for (  final Listener listener : listeners) {
    if (isTopReader) {
      terminationHandles.add(listener.warmTopReader(shard,searcher));
    }
 else {
      terminationHandles.add(listener.warmNewReaders(shard,searcher));
    }
  }
  for (  TerminationHandle terminationHandle : terminationHandles) {
    try {
      terminationHandle.awaitTermination();
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      if (isTopReader) {
        logger.warn("top warming has been interrupted",e);
      }
 else {
        logger.warn("warming has been interrupted",e);
      }
      break;
    }
  }
  long took=System.nanoTime() - time;
  shard.warmerService().onPostWarm(took);
  if (shard.warmerService().logger().isTraceEnabled()) {
    if (isTopReader) {
      shard.warmerService().logger().trace("top warming took [{}]",new TimeValue(took,TimeUnit.NANOSECONDS));
    }
 else {
      shard.warmerService().logger().trace("warming took [{}]",new TimeValue(took,TimeUnit.NANOSECONDS));
    }
  }
}
