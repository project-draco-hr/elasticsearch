{
  Settings settings=settingsBuilder().putInt(SETTING_NUMBER_OF_SHARDS,11).putInt(SETTING_NUMBER_OF_REPLICAS,1).build();
  logger.info("Starting sever1");
  startServer("server1",settings);
  ClusterService clusterService1=((InternalServer)server("server1")).injector().getInstance(ClusterService.class);
  logger.info("Creating index [test]");
  client("server1").admin().indices().create(createIndexRequest("test")).actionGet();
  Thread.sleep(1000);
  ClusterState clusterState1=clusterService1.state();
  RoutingNode routingNodeEntry1=clusterState1.routingNodes().nodesToShards().get(clusterState1.nodes().localNodeId());
  assertThat(routingNodeEntry1.numberOfShardsWithState(STARTED),equalTo(11));
  clusterState1=client("server1").admin().cluster().state(clusterState()).actionGet().state();
  routingNodeEntry1=clusterState1.routingNodes().nodesToShards().get(clusterState1.nodes().localNodeId());
  assertThat(routingNodeEntry1.numberOfShardsWithState(STARTED),equalTo(11));
  logger.info("Starting server2");
  startServer("server2",settings);
  ClusterService clusterService2=((InternalServer)server("server2")).injector().getInstance(ClusterService.class);
  Thread.sleep(1500);
  clusterState1=clusterService1.state();
  routingNodeEntry1=clusterState1.routingNodes().nodesToShards().get(clusterState1.nodes().localNodeId());
  assertThat(routingNodeEntry1.numberOfShardsWithState(STARTED),equalTo(11));
  ClusterState clusterState2=clusterService2.state();
  RoutingNode routingNodeEntry2=clusterState2.routingNodes().nodesToShards().get(clusterState2.nodes().localNodeId());
  assertThat(routingNodeEntry2.numberOfShardsWithState(STARTED),equalTo(11));
  logger.info("Starting server3");
  startServer("server3",settings);
  ClusterService clusterService3=((InternalServer)server("server3")).injector().getInstance(ClusterService.class);
  Thread.sleep(1500);
  clusterState1=clusterService1.state();
  routingNodeEntry1=clusterState1.routingNodes().nodesToShards().get(clusterState1.nodes().localNodeId());
  assertThat(routingNodeEntry1.numberOfShardsWithState(STARTED),anyOf(equalTo(7),equalTo(8)));
  clusterState2=clusterService2.state();
  routingNodeEntry2=clusterState2.routingNodes().nodesToShards().get(clusterState2.nodes().localNodeId());
  assertThat(routingNodeEntry2.numberOfShardsWithState(STARTED),anyOf(equalTo(7),equalTo(8)));
  ClusterState clusterState3=clusterService3.state();
  RoutingNode routingNodeEntry3=clusterState3.routingNodes().nodesToShards().get(clusterState3.nodes().localNodeId());
  assertThat(routingNodeEntry3.numberOfShardsWithState(STARTED),equalTo(7));
  assertThat(routingNodeEntry1.numberOfShardsWithState(STARTED) + routingNodeEntry2.numberOfShardsWithState(STARTED) + routingNodeEntry3.numberOfShardsWithState(STARTED),equalTo(22));
  logger.info("Closing server1");
  closeServer("server1");
  Thread.sleep(1500);
  clusterState2=clusterService2.state();
  routingNodeEntry2=clusterState2.routingNodes().nodesToShards().get(clusterState2.nodes().localNodeId());
  assertThat(routingNodeEntry2.numberOfShardsWithState(STARTED),equalTo(11));
  clusterState3=clusterService3.state();
  routingNodeEntry3=clusterState3.routingNodes().nodesToShards().get(clusterState3.nodes().localNodeId());
  assertThat(routingNodeEntry3.numberOfShardsWithState(STARTED),equalTo(11));
  assertThat(routingNodeEntry2.numberOfShardsWithState(STARTED) + routingNodeEntry3.numberOfShardsWithState(STARTED),equalTo(22));
  logger.info("Deleting index [test]");
  client("server2").admin().indices().delete(deleteIndexRequest("test")).actionGet();
  Thread.sleep(1500);
  clusterState2=clusterService2.state();
  routingNodeEntry2=clusterState2.routingNodes().nodesToShards().get(clusterState2.nodes().localNodeId());
  assertThat(routingNodeEntry2,nullValue());
  clusterState3=clusterService3.state();
  routingNodeEntry3=clusterState3.routingNodes().nodesToShards().get(clusterState3.nodes().localNodeId());
  assertThat(routingNodeEntry3,nullValue());
}
