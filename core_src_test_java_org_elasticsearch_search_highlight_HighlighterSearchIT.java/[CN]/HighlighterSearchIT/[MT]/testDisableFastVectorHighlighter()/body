{
  assertAcked(prepareCreate("test").addMapping("type1","title","type=string,store=yes,term_vector=with_positions_offsets,analyzer=classic"));
  ensureGreen();
  IndexRequestBuilder[] indexRequestBuilders=new IndexRequestBuilder[5];
  for (int i=0; i < indexRequestBuilders.length; i++) {
    indexRequestBuilders[i]=client().prepareIndex("test","type1",Integer.toString(i)).setSource("title","This is a test for the workaround for the fast vector highlighting SOLR-3724");
  }
  indexRandom(true,indexRequestBuilders);
  SearchResponse search=client().prepareSearch().setQuery(matchPhraseQuery("title","test for the workaround")).highlighter(new HighlightBuilder().field("title",50,1,10)).get();
  for (int i=0; i < indexRequestBuilders.length; i++) {
    assertNotHighlighted(search,i,"title");
  }
  search=client().prepareSearch().setQuery(matchPhraseQuery("title","test for the workaround")).highlighter(new HighlightBuilder().field("title",50,1,10).highlighterType("plain")).get();
  for (int i=0; i < indexRequestBuilders.length; i++) {
    assertHighlight(search,i,"title",0,1,equalTo("This is a <em>test</em> for the <em>workaround</em> for the fast vector highlighting SOLR-3724"));
  }
  search=client().prepareSearch().setQuery(matchPhraseQuery("title","test for the workaround")).highlighter(new HighlightBuilder().field(new HighlightBuilder.Field("title").highlighterType("plain")).highlighterType("plain")).get();
  for (int i=0; i < indexRequestBuilders.length; i++) {
    assertHighlight(search,i,"title",0,1,equalTo("This is a <em>test</em> for the <em>workaround</em> for the fast vector highlighting SOLR-3724"));
  }
}
