{
  XContentBuilder mappings=jsonBuilder();
  mappings.startObject();
  mappings.startObject("type").startObject("_source").field("enabled",false).endObject().startObject("properties").startObject("unstored_field").field("index_options","offsets").field("term_vector","with_positions_offsets").field("type","string").field("store",false).endObject().startObject("text").field("index_options","offsets").field("term_vector","with_positions_offsets").field("type","string").field("store",true).endObject().endObject().endObject();
  mappings.endObject();
  assertAcked(prepareCreate("test").addMapping("type",mappings));
  ensureYellow();
  client().prepareIndex("test","type","1").setSource(jsonBuilder().startObject().field("unstored_text","text").field("text","text").endObject()).get();
  refresh();
  String highlighter=randomFrom("plain","postings","fvh");
  SearchResponse search=client().prepareSearch().setQuery(constantScoreQuery(matchQuery("text","text"))).highlighter(new HighlightBuilder().field(new Field("*").highlighterType(highlighter))).get();
  assertHighlight(search,0,"text",0,equalTo("<em>text</em>"));
  search=client().prepareSearch().setQuery(constantScoreQuery(matchQuery("text","text"))).highlighter(new HighlightBuilder().field(new Field("unstored_text"))).get();
  assertNoFailures(search);
  assertThat(search.getHits().getAt(0).getHighlightFields().size(),equalTo(0));
}
