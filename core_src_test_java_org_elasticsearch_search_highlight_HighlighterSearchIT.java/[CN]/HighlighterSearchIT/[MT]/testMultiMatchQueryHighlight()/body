{
  String[] highlighterTypes=new String[]{"fvh","plain","postings"};
  XContentBuilder mapping=XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("_all").field("store","yes").field("index_options","offsets").endObject().startObject("properties").startObject("field1").field("type","string").field("index_options","offsets").field("term_vector","with_positions_offsets").endObject().startObject("field2").field("type","string").field("index_options","offsets").field("term_vector","with_positions_offsets").endObject().endObject().endObject().endObject();
  assertAcked(prepareCreate("test").addMapping("type1",mapping));
  ensureGreen();
  client().prepareIndex("test","type1").setSource("field1","The quick brown fox jumps over","field2","The quick brown fox jumps over").get();
  refresh();
  final int iters=scaledRandomIntBetween(20,30);
  for (int i=0; i < iters; i++) {
    String highlighterType=rarely() ? null : RandomPicks.randomFrom(getRandom(),highlighterTypes);
    MultiMatchQueryBuilder.Type[] supportedQueryTypes;
    if ("postings".equals(highlighterType)) {
      supportedQueryTypes=new MultiMatchQueryBuilder.Type[]{MultiMatchQueryBuilder.Type.BEST_FIELDS,MultiMatchQueryBuilder.Type.CROSS_FIELDS,MultiMatchQueryBuilder.Type.MOST_FIELDS,MultiMatchQueryBuilder.Type.PHRASE};
    }
 else {
      supportedQueryTypes=MultiMatchQueryBuilder.Type.values();
    }
    MultiMatchQueryBuilder.Type matchQueryType=RandomPicks.randomFrom(getRandom(),supportedQueryTypes);
    final MultiMatchQueryBuilder multiMatchQueryBuilder=multiMatchQuery("the quick brown fox","field1","field2").type(matchQueryType);
    SearchSourceBuilder source=searchSource().query(multiMatchQueryBuilder).highlight(highlight().highlightQuery(randomBoolean() ? multiMatchQueryBuilder : null).highlighterType(highlighterType).field(new Field("field1").requireFieldMatch(true).preTags("<field1>").postTags("</field1>")));
    logger.info("Running multi-match type: [" + matchQueryType + "] highlight with type: ["+ highlighterType+ "]");
    SearchResponse searchResponse=client().search(searchRequest("test").source(source)).actionGet();
    assertHitCount(searchResponse,1l);
    assertHighlight(searchResponse,0,"field1",0,anyOf(equalTo("<field1>The quick brown fox</field1> jumps over"),equalTo("<field1>The</field1> <field1>quick</field1> <field1>brown</field1> <field1>fox</field1> jumps over")));
  }
}
