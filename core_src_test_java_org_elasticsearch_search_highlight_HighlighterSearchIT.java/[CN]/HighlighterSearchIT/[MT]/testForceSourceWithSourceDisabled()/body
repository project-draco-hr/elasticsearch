{
  assertAcked(prepareCreate("test").addMapping("type1",jsonBuilder().startObject().startObject("type1").startObject("_source").field("enabled",false).endObject().startObject("properties").startObject("field1").field("type","string").field("store","yes").field("index_options","offsets").field("term_vector","with_positions_offsets").endObject().endObject().endObject().endObject()));
  ensureGreen();
  client().prepareIndex("test","type1").setSource("field1","The quick brown fox jumps over the lazy dog","field2","second field content").get();
  refresh();
  SearchResponse searchResponse=client().prepareSearch("test").setQuery(termQuery("field1","quick")).addHighlightedField(new Field("field1").preTags("<xxx>").postTags("</xxx>")).get();
  assertHighlight(searchResponse,0,"field1",0,1,equalTo("The <xxx>quick</xxx> brown fox jumps over the lazy dog"));
  assertFailures(client().prepareSearch("test").setQuery(termQuery("field1","quick")).addHighlightedField(new Field("field1").preTags("<xxx>").postTags("</xxx>").highlighterType("plain").forceSource(true)),RestStatus.BAD_REQUEST,containsString("source is forced for fields [field1] but type [type1] has disabled _source"));
  assertFailures(client().prepareSearch("test").setQuery(termQuery("field1","quick")).addHighlightedField(new Field("field1").preTags("<xxx>").postTags("</xxx>").highlighterType("fvh").forceSource(true)),RestStatus.BAD_REQUEST,containsString("source is forced for fields [field1] but type [type1] has disabled _source"));
  assertFailures(client().prepareSearch("test").setQuery(termQuery("field1","quick")).addHighlightedField(new Field("field1").preTags("<xxx>").postTags("</xxx>").highlighterType("postings").forceSource(true)),RestStatus.BAD_REQUEST,containsString("source is forced for fields [field1] but type [type1] has disabled _source"));
  SearchSourceBuilder searchSource=SearchSourceBuilder.searchSource().query(termQuery("field1","quick")).highlight(highlight().forceSource(true).field("field1"));
  assertFailures(client().prepareSearch("test").setSource(searchSource),RestStatus.BAD_REQUEST,containsString("source is forced for fields [field1] but type [type1] has disabled _source"));
  searchSource=SearchSourceBuilder.searchSource().query(termQuery("field1","quick")).highlight(highlight().forceSource(true).field("field*"));
  assertFailures(client().prepareSearch("test").setSource(searchSource),RestStatus.BAD_REQUEST,matches("source is forced for fields \\[field\\d, field\\d\\] but type \\[type1\\] has disabled _source"));
}
