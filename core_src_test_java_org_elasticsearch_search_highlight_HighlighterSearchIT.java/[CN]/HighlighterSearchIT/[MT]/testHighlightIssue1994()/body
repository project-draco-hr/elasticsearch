{
  assertAcked(prepareCreate("test").addMapping("type1","title","type=text,store=false","titleTV","type=text,store=false,term_vector=with_positions_offsets"));
  ensureYellow();
  indexRandom(false,client().prepareIndex("test","type1","1").setSource("title",new String[]{"This is a test on the highlighting bug present in elasticsearch","The bug is bugging us"},"titleTV",new String[]{"This is a test on the highlighting bug present in elasticsearch","The bug is bugging us"}));
  indexRandom(true,client().prepareIndex("test","type1","2").setSource("titleTV",new String[]{"some text to highlight","highlight other text"}));
  SearchResponse search=client().prepareSearch().setQuery(matchQuery("title","bug")).highlighter(new HighlightBuilder().field("title",-1,2).field("titleTV",-1,2).requireFieldMatch(false)).get();
  assertHighlight(search,0,"title",0,equalTo("This is a test on the highlighting <em>bug</em> present in elasticsearch"));
  assertHighlight(search,0,"title",1,2,equalTo("The <em>bug</em> is bugging us"));
  assertHighlight(search,0,"titleTV",0,equalTo("This is a test on the highlighting <em>bug</em> present in elasticsearch"));
  assertHighlight(search,0,"titleTV",1,2,equalTo("The <em>bug</em> is bugging us"));
  search=client().prepareSearch().setQuery(matchQuery("titleTV","highlight")).highlighter(new HighlightBuilder().field("titleTV",-1,2)).get();
  assertHighlight(search,0,"titleTV",0,equalTo("some text to <em>highlight</em>"));
  assertHighlight(search,0,"titleTV",1,2,equalTo("<em>highlight</em> other text"));
}
