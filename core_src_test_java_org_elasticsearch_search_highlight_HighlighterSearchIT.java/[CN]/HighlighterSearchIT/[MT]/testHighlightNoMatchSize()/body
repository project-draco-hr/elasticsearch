{
  assertAcked(prepareCreate("test").addMapping("type1","text","type=text," + randomStoreField() + "term_vector=with_positions_offsets,index_options=offsets"));
  ensureGreen();
  String text="I am pretty long so some of me should get cut off. Second sentence";
  index("test","type1","1","text",text);
  refresh();
  HighlightBuilder.Field field=new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain");
  SearchResponse response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertNotHighlighted(response,0,"text");
  field.highlighterType("fvh");
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertNotHighlighted(response,0,"text");
  field.highlighterType("postings");
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertNotHighlighted(response,0,"text");
  field.highlighterType("plain").noMatchSize(0);
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertNotHighlighted(response,0,"text");
  field.highlighterType("fvh");
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertNotHighlighted(response,0,"text");
  field.highlighterType("postings");
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertNotHighlighted(response,0,"text");
  field.highlighterType("plain").noMatchSize(21);
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertHighlight(response,0,"text",0,1,equalTo("I am pretty long so"));
  field.highlighterType("fvh");
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertHighlight(response,0,"text",0,1,equalTo("I am pretty long so some"));
  field.highlighterType("postings");
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertHighlight(response,0,"text",0,1,equalTo("I am pretty long so some of me should get cut off."));
  field.highlighterType("plain").noMatchSize(text.length() * 2);
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertHighlight(response,0,"text",0,1,equalTo(text));
  field.highlighterType("fvh");
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertHighlight(response,0,"text",0,1,equalTo(text));
  field.highlighterType("postings");
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertHighlight(response,0,"text",0,1,equalTo("I am pretty long so some of me should get cut off."));
  field.highlighterType("plain").noMatchSize(text.length());
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertHighlight(response,0,"text",0,1,equalTo(text));
  field.highlighterType("fvh");
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertHighlight(response,0,"text",0,1,equalTo(text));
  field.highlighterType("postings");
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertHighlight(response,0,"text",0,1,equalTo("I am pretty long so some of me should get cut off."));
  field.highlighterType("plain").noMatchSize(null);
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get();
  assertHighlight(response,0,"text",0,1,equalTo("I am pretty long so"));
  field.highlighterType("fvh");
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get();
  assertHighlight(response,0,"text",0,1,equalTo("I am pretty long so some"));
  field.highlighterType("postings");
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get();
  assertHighlight(response,0,"text",0,1,equalTo("I am pretty long so some of me should get cut off."));
  field.highlighterType("plain").noMatchSize(randomIntBetween(Integer.MIN_VALUE,-1));
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertNotHighlighted(response,0,"text");
  field.highlighterType("fvh");
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertNotHighlighted(response,0,"text");
  field.highlighterType("postings");
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertNotHighlighted(response,0,"text");
}
