{
  assertAcked(prepareCreate("test").addMapping("type1",jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("title").field("type","text").field("store",true).field("index_options","docs").endObject().endObject().endObject().endObject()));
  ensureGreen();
  IndexRequestBuilder[] indexRequestBuilders=new IndexRequestBuilder[5];
  for (int i=0; i < indexRequestBuilders.length; i++) {
    indexRequestBuilders[i]=client().prepareIndex("test","type1",Integer.toString(i)).setSource("title","This is a test for the postings highlighter");
  }
  indexRandom(true,indexRequestBuilders);
  SearchResponse search=client().prepareSearch().setQuery(matchQuery("title","this is a test")).highlighter(new HighlightBuilder().field("title")).get();
  assertNoFailures(search);
  assertFailures(client().prepareSearch().setQuery(matchQuery("title","this is a test")).highlighter(new HighlightBuilder().field("title").highlighterType("postings")),RestStatus.BAD_REQUEST,containsString("the field [title] should be indexed with positions and offsets in the postings list to be used with postings highlighter"));
  assertFailures(client().prepareSearch().setQuery(matchQuery("title","this is a test")).highlighter(new HighlightBuilder().field("title").highlighterType("postings")),RestStatus.BAD_REQUEST,containsString("the field [title] should be indexed with positions and offsets in the postings list to be used with postings highlighter"));
  assertNoFailures(client().prepareSearch().setQuery(matchQuery("title","this is a test")).highlighter(new HighlightBuilder().field("tit*").highlighterType("postings")).get());
}
