{
  String script=null;
  String scriptLang=null;
  String type=null;
  Map<String,Object> params=null;
  boolean reverse=false;
  XContentParser.Token token;
  String currentName=parser.currentName();
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentName=parser.currentName();
    }
 else     if (token.isValue()) {
      if ("reverse".equals(currentName)) {
        reverse=parser.booleanValue();
      }
 else       if ("order".equals(currentName)) {
        reverse="desc".equals(parser.text());
      }
 else       if ("script".equals(currentName)) {
        script=parser.text();
      }
 else       if ("type".equals(currentName)) {
        type=parser.text();
      }
 else       if ("params".equals(currentName)) {
        params=parser.map();
      }
 else       if ("lang".equals(currentName)) {
        scriptLang=parser.text();
      }
    }
  }
  if (script == null) {
    throw new SearchParseException(context,"_script sorting requires setting the script to sort by");
  }
  if (type == null) {
    throw new SearchParseException(context,"_script sorting requires setting the type of the script");
  }
  SearchScript searchScript=context.scriptService().search(context.lookup(),scriptLang,script,params);
  FieldComparatorSource fieldComparatorSource;
  if ("string".equals(type)) {
    fieldComparatorSource=StringFieldsFunctionDataComparator.comparatorSource(searchScript);
  }
 else   if ("number".equals(type)) {
    fieldComparatorSource=DoubleFieldsFunctionDataComparator.comparatorSource(searchScript);
  }
 else {
    throw new SearchParseException(context,"custom script sort type [" + type + "] not supported");
  }
  return new SortField("_script",fieldComparatorSource,reverse);
}
