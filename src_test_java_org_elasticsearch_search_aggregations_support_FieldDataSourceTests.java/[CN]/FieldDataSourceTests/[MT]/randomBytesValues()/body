{
  final boolean multiValued=randomBoolean();
  final int maxLength=rarely() ? 3 : 10;
  return new BytesValues(multiValued){
    BytesRef previous;
    @Override public int setDocument(    int docId){
      return randomInt(multiValued ? 10 : 1);
    }
    @Override public BytesRef nextValue(){
      if (previous != null && randomBoolean()) {
        scratch.copyBytes(previous);
      }
 else {
        scratch.copyChars(randomAsciiOfLength(maxLength));
      }
      previous=BytesRef.deepCopyOf(scratch);
      return scratch;
    }
  }
;
}
