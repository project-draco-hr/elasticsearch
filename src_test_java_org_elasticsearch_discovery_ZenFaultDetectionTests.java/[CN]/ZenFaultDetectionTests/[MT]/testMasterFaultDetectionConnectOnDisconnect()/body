{
  ImmutableSettings.Builder settings=ImmutableSettings.builder();
  boolean shouldRetry=randomBoolean();
  settings.put("discovery.zen.fd.connect_on_network_disconnect",shouldRetry).put("discovery.zen.fd.ping_interval","5m");
  final DiscoveryNodes nodes=buildNodesForA(false);
  MasterFaultDetection masterFD=new MasterFaultDetection(settings.build(),threadPool,serviceA,new DiscoveryNodesProvider(){
    @Override public DiscoveryNodes nodes(){
      return nodes;
    }
    @Override public NodeService nodeService(){
      return null;
    }
  }
);
  masterFD.start(nodeB,"test");
  final String[] failureReason=new String[1];
  final DiscoveryNode[] failureNode=new DiscoveryNode[1];
  final CountDownLatch notified=new CountDownLatch(1);
  masterFD.addListener(new MasterFaultDetection.Listener(){
    @Override public void onMasterFailure(    DiscoveryNode masterNode,    String reason){
      failureNode[0]=masterNode;
      failureReason[0]=reason;
      notified.countDown();
    }
    @Override public void onDisconnectedFromMaster(){
    }
  }
);
  serviceB.stop();
  notified.await(30,TimeUnit.SECONDS);
  assertEquals(nodeB,failureNode[0]);
  Matcher<String> matcher=Matchers.containsString("verified");
  if (!shouldRetry) {
    matcher=Matchers.not(matcher);
  }
  assertThat(failureReason[0],matcher);
}
