{
  final TermsConsumer delegateConsumer=delegatesFieldsConsumer.addField(field);
  final TermsConsumer suggestTermConsumer=suggestFieldsConsumer.addField(field);
  final GroupedPostingsConsumer groupedPostingsConsumer=new GroupedPostingsConsumer(delegateConsumer,suggestTermConsumer);
  return new TermsConsumer(){
    @Override public PostingsConsumer startTerm(    BytesRef text) throws IOException {
      groupedPostingsConsumer.startTerm(text);
      return groupedPostingsConsumer;
    }
    @Override public Comparator<BytesRef> getComparator() throws IOException {
      return delegateConsumer.getComparator();
    }
    @Override public void finishTerm(    BytesRef text,    TermStats stats) throws IOException {
      suggestTermConsumer.finishTerm(text,stats);
      delegateConsumer.finishTerm(text,stats);
    }
    @Override public void finish(    long sumTotalTermFreq,    long sumDocFreq,    int docCount) throws IOException {
      suggestTermConsumer.finish(sumTotalTermFreq,sumDocFreq,docCount);
      delegateConsumer.finish(sumTotalTermFreq,sumDocFreq,docCount);
    }
  }
;
}
