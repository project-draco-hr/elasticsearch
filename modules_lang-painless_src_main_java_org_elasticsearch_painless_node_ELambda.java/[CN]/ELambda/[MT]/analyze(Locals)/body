{
  Set<String> variables=new HashSet<>();
  for (  AStatement statement : statements) {
    statement.extractVariables(variables);
  }
  captures=new ArrayList<>();
  for (  String variable : variables) {
    if (locals.hasVariable(variable)) {
      captures.add(locals.getVariable(location,variable));
    }
  }
  List<String> paramTypes=new ArrayList<>();
  List<String> paramNames=new ArrayList<>();
  for (  Variable var : captures) {
    paramTypes.add(var.type.name);
    paramNames.add(var.name);
  }
  paramTypes.addAll(paramTypeStrs);
  paramNames.addAll(paramNameStrs);
  desugared=new SFunction(reserved,location,"def",name,paramTypes,paramNames,statements,true);
  desugared.generate();
  desugared.analyze(Locals.newLambdaScope(locals.getProgramScope(),desugared.parameters,captures.size(),reserved.getMaxLoopCounter()));
  if (expected == null) {
    ref=null;
    actual=Definition.getType("String");
    defPointer="Sthis." + name + ","+ captures.size();
  }
 else {
    defPointer=null;
    try {
      Method interfaceMethod=expected.struct.getFunctionalMethod();
      if (interfaceMethod == null) {
        throw new IllegalArgumentException("Cannot pass lambda to [" + expected.name + "], not a functional interface");
      }
      Class<?> captureClasses[]=new Class<?>[captures.size()];
      for (int i=0; i < captures.size(); i++) {
        captureClasses[i]=captures.get(i).type.clazz;
      }
      ref=new FunctionRef(expected,interfaceMethod,desugared.method,captureClasses);
    }
 catch (    IllegalArgumentException e) {
      throw createError(e);
    }
    actual=expected;
  }
}
