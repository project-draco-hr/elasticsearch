{
  writer.writeDebugInfo(location);
  if (ref != null) {
    writer.writeDebugInfo(location);
    for (    Variable capture : captures) {
      writer.visitVarInsn(capture.type.type.getOpcode(Opcodes.ILOAD),capture.getSlot());
    }
    String invokedType=ref.invokedType.toMethodDescriptorString();
    Type samMethodType=Type.getMethodType(ref.samMethodType.toMethodDescriptorString());
    Type interfaceType=Type.getMethodType(ref.interfaceMethodType.toMethodDescriptorString());
    if (ref.needsBridges()) {
      writer.invokeDynamic(ref.invokedName,invokedType,LAMBDA_BOOTSTRAP_HANDLE,samMethodType,ref.implMethodASM,samMethodType,LambdaMetafactory.FLAG_BRIDGES,1,interfaceType);
    }
 else {
      writer.invokeDynamic(ref.invokedName,invokedType,LAMBDA_BOOTSTRAP_HANDLE,samMethodType,ref.implMethodASM,samMethodType,0);
    }
  }
 else {
    writer.push((String)null);
    for (    Variable capture : captures) {
      writer.visitVarInsn(capture.type.type.getOpcode(Opcodes.ILOAD),capture.getSlot());
    }
  }
  globals.addSyntheticMethod(desugared);
}
