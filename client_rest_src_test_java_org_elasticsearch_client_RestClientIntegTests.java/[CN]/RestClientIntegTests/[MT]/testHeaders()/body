{
  for (  String method : getHttpMethods()) {
    Set<String> standardHeaders=new HashSet<>(Arrays.asList("Connection","Host","User-agent","Date"));
    if (method.equals("HEAD") == false) {
      standardHeaders.add("Content-length");
    }
    int numHeaders=RandomInts.randomIntBetween(getRandom(),1,5);
    Map<String,String> expectedHeaders=new HashMap<>();
    for (    Header defaultHeader : defaultHeaders) {
      expectedHeaders.put(defaultHeader.getName(),defaultHeader.getValue());
    }
    Header[] headers=new Header[numHeaders];
    for (int i=0; i < numHeaders; i++) {
      String headerName="Header" + (getRandom().nextBoolean() ? i : "");
      String headerValue=RandomStrings.randomAsciiOfLengthBetween(getRandom(),3,10);
      headers[i]=new BasicHeader(headerName,headerValue);
      expectedHeaders.put(headerName,headerValue);
    }
    int statusCode=randomStatusCode(getRandom());
    Response esResponse;
    try {
      esResponse=restClient.performRequest(method,"/" + statusCode,Collections.<String,String>emptyMap(),(HttpEntity)null,headers);
    }
 catch (    ResponseException e) {
      esResponse=e.getResponse();
    }
    assertThat(esResponse.getStatusLine().getStatusCode(),equalTo(statusCode));
    for (    Header responseHeader : esResponse.getHeaders()) {
      if (responseHeader.getName().startsWith("Header")) {
        String headerValue=expectedHeaders.remove(responseHeader.getName());
        assertNotNull("found response header [" + responseHeader.getName() + "] that wasn't originally sent",headerValue);
      }
 else {
        assertTrue("unknown header was returned " + responseHeader.getName(),standardHeaders.remove(responseHeader.getName()));
      }
    }
    assertEquals("some headers that were sent weren't returned: " + expectedHeaders,0,expectedHeaders.size());
    assertEquals("some expected standard headers weren't returned: " + standardHeaders,0,standardHeaders.size());
  }
}
