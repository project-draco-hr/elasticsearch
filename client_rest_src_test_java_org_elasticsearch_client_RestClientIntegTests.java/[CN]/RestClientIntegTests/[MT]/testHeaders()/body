{
  for (  String method : getHttpMethods()) {
    final Set<String> standardHeaders=new HashSet<>(Arrays.asList("Connection","Host","User-agent","Date"));
    if (method.equals("HEAD") == false) {
      standardHeaders.add("Content-length");
    }
    final int numHeaders=randomIntBetween(1,5);
    final Header[] headers=generateHeaders("Header","Header-array",numHeaders);
    final Map<String,List<String>> expectedHeaders=new HashMap<>();
    addHeaders(expectedHeaders,defaultHeaders,headers);
    final int statusCode=randomStatusCode(getRandom());
    Response esResponse;
    try {
      esResponse=restClient.performRequest(method,"/" + statusCode,Collections.<String,String>emptyMap(),headers);
    }
 catch (    ResponseException e) {
      esResponse=e.getResponse();
    }
    assertThat(esResponse.getStatusLine().getStatusCode(),equalTo(statusCode));
    for (    final Header responseHeader : esResponse.getHeaders()) {
      final String name=responseHeader.getName();
      final String value=responseHeader.getValue();
      if (name.startsWith("Header")) {
        final List<String> values=expectedHeaders.get(name);
        assertNotNull("found response header [" + name + "] that wasn't originally sent: "+ value,values);
        assertTrue("found incorrect response header [" + name + "]: "+ value,values.remove(value));
        if (values.isEmpty()) {
          expectedHeaders.remove(name);
        }
      }
 else {
        assertTrue("unknown header was returned " + name,standardHeaders.remove(name));
      }
    }
    assertTrue("some headers that were sent weren't returned: " + expectedHeaders,expectedHeaders.isEmpty());
    assertTrue("some expected standard headers weren't returned: " + standardHeaders,standardHeaders.isEmpty());
  }
}
