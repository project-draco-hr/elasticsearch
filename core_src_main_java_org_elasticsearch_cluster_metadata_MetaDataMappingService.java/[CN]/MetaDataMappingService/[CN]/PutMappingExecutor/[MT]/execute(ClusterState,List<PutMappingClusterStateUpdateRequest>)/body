{
  List<String> indicesToClose=new ArrayList<>();
  Map<PutMappingClusterStateUpdateRequest,ClusterStateTaskExecutionResult> executionResults=new HashMap<>();
  try {
    for (    PutMappingClusterStateUpdateRequest request : tasks) {
      for (      String index : request.indices()) {
        if (currentState.metaData().hasIndex(index)) {
          if (indicesService.hasIndex(index) == false) {
            final IndexMetaData indexMetaData=currentState.metaData().index(index);
            IndexService indexService=indicesService.createIndex(nodeServicesProvider,indexMetaData,Collections.EMPTY_LIST);
            indicesToClose.add(indexMetaData.getIndex());
            if (indexMetaData.getMappings().containsKey(MapperService.DEFAULT_MAPPING)) {
              indexService.mapperService().merge(MapperService.DEFAULT_MAPPING,indexMetaData.getMappings().get(MapperService.DEFAULT_MAPPING).source(),false,request.updateAllTypes());
            }
            if (indexMetaData.getMappings().containsKey(request.type())) {
              indexService.mapperService().merge(request.type(),indexMetaData.getMappings().get(request.type()).source(),false,request.updateAllTypes());
            }
          }
        }
      }
    }
    for (    PutMappingClusterStateUpdateRequest request : tasks) {
      try {
        currentState=applyRequest(currentState,request);
        executionResults.put(request,ClusterStateTaskExecutionResult.success());
      }
 catch (      Throwable t) {
        executionResults.put(request,ClusterStateTaskExecutionResult.failure(t));
      }
    }
    return new Result<>(currentState,executionResults);
  }
  finally {
    for (    String index : indicesToClose) {
      indicesService.removeIndex(index,"created for mapping processing");
    }
  }
}
