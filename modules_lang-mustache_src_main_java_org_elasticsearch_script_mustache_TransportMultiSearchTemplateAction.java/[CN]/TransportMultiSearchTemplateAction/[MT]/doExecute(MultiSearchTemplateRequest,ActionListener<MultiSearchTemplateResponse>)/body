{
  final AtomicArray<MultiSearchTemplateResponse.Item> responses=new AtomicArray<>(request.requests().size());
  final AtomicInteger counter=new AtomicInteger(responses.length());
  for (int i=0; i < responses.length(); i++) {
    final int index=i;
    searchTemplateAction.execute(request.requests().get(i),new ActionListener<SearchTemplateResponse>(){
      @Override public void onResponse(      SearchTemplateResponse searchTemplateResponse){
        responses.set(index,new MultiSearchTemplateResponse.Item(searchTemplateResponse,null));
        if (counter.decrementAndGet() == 0) {
          finishHim();
        }
      }
      @Override public void onFailure(      Exception e){
        responses.set(index,new MultiSearchTemplateResponse.Item(null,e));
        if (counter.decrementAndGet() == 0) {
          finishHim();
        }
      }
      private void finishHim(){
        MultiSearchTemplateResponse.Item[] items=responses.toArray(new MultiSearchTemplateResponse.Item[responses.length()]);
        listener.onResponse(new MultiSearchTemplateResponse(items));
      }
    }
);
  }
}
