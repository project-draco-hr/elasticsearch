{
  long overallStartTime=System.currentTimeMillis();
  Settings settings=settingsBuilder().put("index.refresh_interval","-1").put(SETTING_NUMBER_OF_SHARDS,5).put(SETTING_NUMBER_OF_REPLICAS,0).put("cluster.name",CLUSTER_NAME).build();
  Node[] nodes=new Node[1];
  for (int i=0; i < nodes.length; i++) {
    nodes[i]=new Node(settingsBuilder().put(settings).put("name","node" + i).build()).start();
  }
  Node clientNode=new Node(settingsBuilder().put(settings).put("name","client").put("node.client",true).build()).start();
  Client client=clientNode.client();
  try {
    client.admin().indices().prepareCreate(INDEX_NAME);
    System.out.println("Indexing " + NUM_DOCS + " documents");
    StopWatch stopWatch=new StopWatch().start();
    for (int i=0; i < NUM_DOCS; ) {
      BulkRequestBuilder request=client.prepareBulk();
      for (int j=0; j < BATCH && i < NUM_DOCS; ++j) {
        final int lowCard=RandomInts.randomInt(R,LOW_CARD);
        final int highCard=RandomInts.randomInt(R,HIGH_CARD);
        int gauss=-1;
        while (gauss < 0) {
          gauss=(int)(R.nextGaussian() * 1000) + 5000;
        }
        request.add(client.prepareIndex(INDEX_NAME,TYPE_NAME,Integer.toString(i)).setSource(LOW_CARD_FIELD_NAME,lowCard,HIGH_CARD_FIELD_NAME,highCard,GAUSSIAN_FIELD_NAME,gauss));
        ++i;
      }
      BulkResponse response=request.execute().actionGet();
      if (response.hasFailures()) {
        System.err.println("--> failures...");
        System.err.println(response.buildFailureMessage());
      }
      if ((i % 100000) == 0) {
        System.out.println("--> Indexed " + i + " took "+ stopWatch.stop().lastTaskTime());
        stopWatch.start();
      }
    }
    client.admin().indices().prepareRefresh(INDEX_NAME).execute().actionGet();
  }
 catch (  Exception e) {
    System.out.println("Index already exists, skipping index creation");
  }
  ClusterHealthResponse clusterHealthResponse=client.admin().cluster().prepareHealth().setWaitForGreenStatus().setTimeout("10m").execute().actionGet();
  if (clusterHealthResponse.isTimedOut()) {
    System.err.println("--> Timed out waiting for cluster health");
  }
  System.out.println("Run\tField\tMethod\tAggregationTime\tEstimatedMemory");
  for (int i=0; i < WARM + RUNS; ++i) {
    for (    String field : new String[]{LOW_CARD_FIELD_NAME,HIGH_CARD_FIELD_NAME,GAUSSIAN_FIELD_NAME}) {
      for (      PercentilesMethod method : new PercentilesMethod[]{PercentilesMethod.TDIGEST,PercentilesMethod.HDR}) {
        long start=System.nanoTime();
        SearchResponse resp=null;
        for (int j=0; j < ITERS; ++j) {
          resp=client.prepareSearch(INDEX_NAME).setSize(0).addAggregation(percentiles("percentiles").field(field).method(method)).execute().actionGet();
        }
        long end=System.nanoTime();
        long memoryEstimate=0;
switch (method) {
case TDIGEST:
          memoryEstimate=((InternalTDigestPercentiles)resp.getAggregations().get("percentiles")).getEstimatedMemoryFootprint();
        break;
case HDR:
      memoryEstimate=((InternalHDRPercentiles)resp.getAggregations().get("percentiles")).getEstimatedMemoryFootprint();
    break;
}
if (i >= WARM) {
  System.out.println((i - WARM) + "\t" + field+ "\t"+ method+ "\t"+ new TimeValue((end - start) / ITERS,TimeUnit.NANOSECONDS).millis()+ "\t"+ new SizeValue(memoryEstimate,SizeUnit.SINGLE).singles());
}
}
}
}
long overallEndTime=System.currentTimeMillis();
System.out.println("Benchmark completed in " + ((overallEndTime - overallStartTime) / 1000) + " seconds");
}
