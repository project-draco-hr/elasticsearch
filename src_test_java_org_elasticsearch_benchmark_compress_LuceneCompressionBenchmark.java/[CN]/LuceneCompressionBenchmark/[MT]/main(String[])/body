{
  final long MAX_SIZE=ByteSizeValue.parseBytesSizeValue("50mb").bytes();
  final boolean WITH_TV=true;
  final Compressor compressor=CompressorFactory.defaultCompressor();
  File testFile=new File("target/test/compress/lucene");
  FileSystemUtils.deleteRecursively(testFile);
  testFile.mkdirs();
  FSDirectory uncompressedDir=new NIOFSDirectory(new File(testFile,"uncompressed"));
  IndexWriter uncompressedWriter=new IndexWriter(uncompressedDir,new IndexWriterConfig(Lucene.VERSION,Lucene.STANDARD_ANALYZER));
  FSDirectory compressedDir=new NIOFSDirectory(new File(testFile,"compressed")){
    @Override public IndexOutput createOutput(    String name) throws IOException {
      if (name.endsWith(".fdt")) {
        return compressor.indexOutput(super.createOutput(name));
      }
      if (WITH_TV && name.endsWith(".tvf")) {
        return compressor.indexOutput(super.createOutput(name));
      }
      return super.createOutput(name);
    }
    @Override public IndexInput openInput(    String name) throws IOException {
      if (name.endsWith(".fdt")) {
        IndexInput in=super.openInput(name);
        Compressor compressor1=CompressorFactory.compressor(in);
        if (compressor1 != null) {
          return compressor1.indexInput(in);
        }
 else {
          return in;
        }
      }
      if (WITH_TV && name.endsWith(".tvf")) {
        IndexInput in=super.openInput(name);
        Compressor compressor1=CompressorFactory.compressor(in);
        if (compressor1 != null) {
          return compressor1.indexInput(in);
        }
 else {
          return in;
        }
      }
      return super.openInput(name);
    }
    @Override public IndexInput openInput(    String name,    int bufferSize) throws IOException {
      if (name.endsWith(".fdt") || name.endsWith(".tvf")) {
        IndexInput in=super.openInput(name,bufferSize);
        if (in instanceof CompressedIndexInput) {
          return in;
        }
        Compressor compressor1=CompressorFactory.compressor(in);
        if (compressor1 != null) {
          return compressor1.indexInput(in);
        }
 else {
          return in;
        }
      }
      return super.openInput(name,bufferSize);
    }
  }
;
  IndexWriter compressedWriter=new IndexWriter(compressedDir,new IndexWriterConfig(Lucene.VERSION,Lucene.STANDARD_ANALYZER));
  System.out.println("feeding data...");
  TestData testData=new TestData();
  while (testData.next() && testData.getTotalSize() < MAX_SIZE) {
    XContentBuilder builder=XContentFactory.jsonBuilder();
    testData.current(builder);
    builder.close();
    Document doc=new Document();
    doc.add(new Field("_source",builder.underlyingBytes(),0,builder.underlyingBytesLength()));
    if (WITH_TV) {
      Field field=new Field("text",builder.string(),Field.Store.NO,Field.Index.ANALYZED,Field.TermVector.WITH_POSITIONS_OFFSETS);
      doc.add(field);
    }
    uncompressedWriter.addDocument(doc);
    compressedWriter.addDocument(doc);
  }
  System.out.println("optimizing...");
  uncompressedWriter.forceMerge(1);
  compressedWriter.forceMerge(1);
  uncompressedWriter.waitForMerges();
  compressedWriter.waitForMerges();
  System.out.println("done");
  uncompressedDir.close();
  compressedWriter.close();
  compressedDir.close();
  uncompressedDir.close();
}
