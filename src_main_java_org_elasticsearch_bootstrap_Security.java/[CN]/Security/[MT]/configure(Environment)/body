{
  ESLogger log=Loggers.getLogger(Security.class);
  StringHelper.randomId();
  InputStream config=Security.class.getResourceAsStream(POLICY_RESOURCE);
  if (config == null) {
    throw new NoSuchFileException(POLICY_RESOURCE);
  }
  Path newConfig=processTemplate(config,environment);
  System.setProperty("java.security.policy",newConfig.toString());
  Policy policy=null;
  try {
    policy=Policy.getInstance("JavaPolicy",new URIParameter(newConfig.toUri()));
  }
 catch (  NoSuchAlgorithmException impossible) {
    throw new RuntimeException(impossible);
  }
  PermissionCollection permissions=policy.getPermissions(Security.class.getProtectionDomain());
  log.trace("generated permissions: {}",permissions);
  System.setSecurityManager(new SecurityManager());
  try {
    Files.delete(newConfig);
  }
 catch (  SecurityException broken) {
    log.error("unable to properly access temporary files, permissions: {}",permissions);
    throw broken;
  }
catch (  IOException ignore) {
  }
}
