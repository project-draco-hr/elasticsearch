{
  Random random=random();
  Set<String> indicesSet=new HashSet<>();
  for (  IndexRequestBuilder builder : builders) {
    indicesSet.add(builder.request().index());
  }
  Set<Tuple<String,String>> bogusIds=new HashSet<>();
  if (random.nextBoolean() && !builders.isEmpty() && dummyDocuments) {
    builders=new ArrayList<>(builders);
    final String[] indices=indicesSet.toArray(new String[indicesSet.size()]);
    final int numBogusDocs=scaledRandomIntBetween(1,builders.size() * 2);
    final int unicodeLen=between(1,10);
    for (int i=0; i < numBogusDocs; i++) {
      String id=randomRealisticUnicodeOfLength(unicodeLen) + Integer.toString(dummmyDocIdGenerator.incrementAndGet());
      String index=RandomPicks.randomFrom(random,indices);
      bogusIds.add(new Tuple<>(index,id));
      builders.add(client().prepareIndex(index,RANDOM_BOGUS_TYPE,id).setSource("{}"));
    }
  }
  final String[] indices=indicesSet.toArray(new String[indicesSet.size()]);
  Collections.shuffle(builders,random());
  final CopyOnWriteArrayList<Tuple<IndexRequestBuilder,Exception>> errors=new CopyOnWriteArrayList<>();
  List<CountDownLatch> inFlightAsyncOperations=new ArrayList<>();
  if (builders.size() < FREQUENT_BULK_THRESHOLD ? frequently() : builders.size() < ALWAYS_BULK_THRESHOLD ? rarely() : false) {
    if (frequently()) {
      logger.info("Index [{}] docs async: [{}] bulk: [{}]",builders.size(),true,false);
      for (      IndexRequestBuilder indexRequestBuilder : builders) {
        indexRequestBuilder.execute(new PayloadLatchedActionListener<IndexResponse,IndexRequestBuilder>(indexRequestBuilder,newLatch(inFlightAsyncOperations),errors));
        postIndexAsyncActions(indices,inFlightAsyncOperations,maybeFlush);
      }
    }
 else {
      logger.info("Index [{}] docs async: [{}] bulk: [{}]",builders.size(),false,false);
      for (      IndexRequestBuilder indexRequestBuilder : builders) {
        indexRequestBuilder.execute().actionGet();
        postIndexAsyncActions(indices,inFlightAsyncOperations,maybeFlush);
      }
    }
  }
 else {
    List<List<IndexRequestBuilder>> partition=eagerPartition(builders,Math.min(MAX_BULK_INDEX_REQUEST_SIZE,Math.max(1,(int)(builders.size() * randomDouble()))));
    logger.info("Index [{}] docs async: [{}] bulk: [{}] partitions [{}]",builders.size(),false,true,partition.size());
    for (    List<IndexRequestBuilder> segmented : partition) {
      BulkRequestBuilder bulkBuilder=client().prepareBulk();
      for (      IndexRequestBuilder indexRequestBuilder : segmented) {
        bulkBuilder.add(indexRequestBuilder);
      }
      BulkResponse actionGet=bulkBuilder.execute().actionGet();
      assertThat(actionGet.hasFailures() ? actionGet.buildFailureMessage() : "",actionGet.hasFailures(),equalTo(false));
    }
  }
  for (  CountDownLatch operation : inFlightAsyncOperations) {
    operation.await();
  }
  final List<Exception> actualErrors=new ArrayList<>();
  for (  Tuple<IndexRequestBuilder,Exception> tuple : errors) {
    if (ExceptionsHelper.unwrapCause(tuple.v2()) instanceof EsRejectedExecutionException) {
      tuple.v1().execute().actionGet();
    }
 else {
      actualErrors.add(tuple.v2());
    }
  }
  assertThat(actualErrors,emptyIterable());
  if (!bogusIds.isEmpty()) {
    for (    Tuple<String,String> doc : bogusIds) {
      assertTrue("failed to delete a dummy doc [" + doc.v1() + "]["+ doc.v2()+ "]",client().prepareDelete(doc.v1(),RANDOM_BOGUS_TYPE,doc.v2()).get().isFound());
    }
  }
  if (forceRefresh) {
    assertNoFailures(client().admin().indices().prepareRefresh(indices).setIndicesOptions(IndicesOptions.lenientExpandOpen()).execute().get());
  }
}
