{
  String clusterAddresses=System.getProperty(TESTS_CLUSTER);
  if (Strings.hasLength(clusterAddresses)) {
    if (scope == Scope.TEST) {
      throw new IllegalArgumentException("Cannot run TEST scope test with " + TESTS_CLUSTER);
    }
    return buildExternalCluster(clusterAddresses);
  }
  final String nodePrefix;
switch (scope) {
case TEST:
    nodePrefix=TEST_CLUSTER_NODE_PREFIX;
  break;
case SUITE:
nodePrefix=SUITE_CLUSTER_NODE_PREFIX;
break;
default :
throw new ElasticsearchException("Scope not supported: " + scope);
}
boolean supportsDedicatedMasters=getSupportsDedicatedMasters();
int numDataNodes=getNumDataNodes();
int minNumDataNodes;
int maxNumDataNodes;
if (numDataNodes >= 0) {
minNumDataNodes=maxNumDataNodes=numDataNodes;
}
 else {
minNumDataNodes=getMinNumDataNodes();
maxNumDataNodes=getMaxNumDataNodes();
}
Collection<Class<? extends Plugin>> mockPlugins=getMockPlugins();
Tuple<String,NodeConfigurationSource> configSource=getNodeConfigSource();
final String nodeMode=configSource.v1();
final NodeConfigurationSource nodeConfigurationSource=configSource.v2();
return new InternalTestCluster(nodeMode,seed,createTempDir(),supportsDedicatedMasters,minNumDataNodes,maxNumDataNodes,InternalTestCluster.clusterName(scope.name(),seed) + "-cluster",nodeConfigurationSource,getNumClientNodes(),InternalTestCluster.DEFAULT_ENABLE_HTTP_PIPELINING,nodePrefix,mockPlugins,getClientWrapper());
}
