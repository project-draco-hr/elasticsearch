{
  while (scanner.checkToken(Token.ID.DocumentEnd)) {
    scanner.getToken();
  }
  Event event;
  if (!scanner.checkToken(Token.ID.StreamEnd)) {
    Token token=scanner.peekToken();
    Mark startMark=token.getStartMark();
    List<Object> version_tags=processDirectives();
    List<Object> version=(List<Object>)version_tags.get(0);
    Map<String,String> tags=(Map<String,String>)version_tags.get(1);
    if (!scanner.checkToken(Token.ID.DocumentStart)) {
      throw new ParserException(null,null,"expected '<document start>', but found " + scanner.peekToken().getTokenId(),scanner.peekToken().getStartMark());
    }
    token=scanner.getToken();
    Mark endMark=token.getEndMark();
    Integer[] versionInteger;
    if (version != null) {
      versionInteger=new Integer[2];
      versionInteger=version.toArray(versionInteger);
    }
 else {
      versionInteger=null;
    }
    event=new DocumentStartEvent(startMark,endMark,true,versionInteger,tags);
    states.push(new ParseDocumentEnd());
    state=new ParseDocumentContent();
  }
 else {
    StreamEndToken token=(StreamEndToken)scanner.getToken();
    event=new StreamEndEvent(token.getStartMark(),token.getEndMark());
    if (!states.isEmpty()) {
      throw new YAMLException("Unexpected end of stream. States left: " + states);
    }
    if (!marks.isEmpty()) {
      throw new YAMLException("Unexpected end of stream. Marks left: " + marks);
    }
    state=null;
  }
  return event;
}
