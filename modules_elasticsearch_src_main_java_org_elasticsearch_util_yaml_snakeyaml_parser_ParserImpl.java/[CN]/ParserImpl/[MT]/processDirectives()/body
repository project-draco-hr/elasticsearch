{
  yamlVersion=null;
  tagHandles=new HashMap<String,String>();
  while (scanner.checkToken(Token.ID.Directive)) {
    DirectiveToken token=(DirectiveToken)scanner.getToken();
    if (token.getName().equals("YAML")) {
      if (yamlVersion != null) {
        throw new ParserException(null,null,"found duplicate YAML directive",token.getStartMark());
      }
      List<Integer> value=(List<Integer>)token.getValue();
      Integer major=value.get(0);
      if (major != 1) {
        throw new ParserException(null,null,"found incompatible YAML document (version 1.* is required)",token.getStartMark());
      }
      yamlVersion=(List<Integer>)token.getValue();
    }
 else     if (token.getName().equals("TAG")) {
      List<String> value=(List<String>)token.getValue();
      String handle=value.get(0);
      String prefix=value.get(1);
      if (tagHandles.containsKey(handle)) {
        throw new ParserException(null,null,"duplicate tag handle " + handle,token.getStartMark());
      }
      tagHandles.put(handle,prefix);
    }
  }
  List<Object> value=new ArrayList<Object>(2);
  value.add(yamlVersion);
  if (!tagHandles.isEmpty()) {
    value.add(new HashMap<String,String>(tagHandles));
  }
 else {
    value.add(new HashMap<String,String>());
  }
  for (  String key : DEFAULT_TAGS.keySet()) {
    if (!tagHandles.containsKey(key)) {
      tagHandles.put(key,DEFAULT_TAGS.get(key));
    }
  }
  return value;
}
