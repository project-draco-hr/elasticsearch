{
  String match=null;
  String pathMatch=null;
  String unmatch=null;
  String pathUnmatch=null;
  Map<String,Object> mapping=null;
  String matchMappingType=null;
  String matchPattern=MatchType.SIMPLE.toString();
  for (  Map.Entry<String,Object> entry : conf.entrySet()) {
    String propName=entry.getKey();
    if ("match".equals(propName)) {
      match=entry.getValue().toString();
    }
 else     if ("path_match".equals(propName)) {
      pathMatch=entry.getValue().toString();
    }
 else     if ("unmatch".equals(propName)) {
      unmatch=entry.getValue().toString();
    }
 else     if ("path_unmatch".equals(propName)) {
      pathUnmatch=entry.getValue().toString();
    }
 else     if ("match_mapping_type".equals(propName)) {
      matchMappingType=entry.getValue().toString();
    }
 else     if ("match_pattern".equals(propName)) {
      matchPattern=entry.getValue().toString();
    }
 else     if ("mapping".equals(propName)) {
      mapping=(Map<String,Object>)entry.getValue();
    }
 else     if (indexVersionCreated.onOrAfter(Version.V_5_0_0_alpha1)) {
      throw new IllegalArgumentException("Illegal dynamic template parameter: [" + propName + "]");
    }
  }
  if (match == null && pathMatch == null && matchMappingType == null) {
    throw new MapperParsingException("template must have match, path_match or match_mapping_type set " + conf.toString());
  }
  if (mapping == null) {
    throw new MapperParsingException("template must have mapping set");
  }
  XContentFieldType xcontentFieldType=null;
  if (matchMappingType != null && matchMappingType.equals("*") == false) {
    try {
      xcontentFieldType=XContentFieldType.fromString(matchMappingType);
    }
 catch (    IllegalArgumentException e) {
      DEPRECATION_LOGGER.deprecated("Ignoring unrecognized match_mapping_type: [" + matchMappingType + "]");
      return null;
    }
  }
  return new DynamicTemplate(name,pathMatch,pathUnmatch,match,unmatch,xcontentFieldType,MatchType.fromString(matchPattern),mapping);
}
