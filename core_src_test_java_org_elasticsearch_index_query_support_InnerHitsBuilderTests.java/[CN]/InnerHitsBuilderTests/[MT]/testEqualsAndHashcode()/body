{
  for (int runs=0; runs < NUMBER_OF_TESTBUILDERS; runs++) {
    InnerHitsBuilder firstInnerHits=randomInnerHits();
    assertFalse("inner hit is equal to null",firstInnerHits.equals(null));
    assertFalse("inner hit is equal to incompatible type",firstInnerHits.equals(""));
    assertTrue("inner it is not equal to self",firstInnerHits.equals(firstInnerHits));
    assertThat("same inner hit's hashcode returns different values if called multiple times",firstInnerHits.hashCode(),equalTo(firstInnerHits.hashCode()));
    InnerHitsBuilder secondBuilder=serializedCopy(firstInnerHits);
    assertTrue("inner hit is not equal to self",secondBuilder.equals(secondBuilder));
    assertTrue("inner hit is not equal to its copy",firstInnerHits.equals(secondBuilder));
    assertTrue("equals is not symmetric",secondBuilder.equals(firstInnerHits));
    assertThat("inner hits copy's hashcode is different from original hashcode",secondBuilder.hashCode(),equalTo(firstInnerHits.hashCode()));
    InnerHitsBuilder thirdBuilder=serializedCopy(secondBuilder);
    assertTrue("inner hit is not equal to self",thirdBuilder.equals(thirdBuilder));
    assertTrue("inner hit is not equal to its copy",secondBuilder.equals(thirdBuilder));
    assertThat("inner hit copy's hashcode is different from original hashcode",secondBuilder.hashCode(),equalTo(thirdBuilder.hashCode()));
    assertTrue("equals is not transitive",firstInnerHits.equals(thirdBuilder));
    assertThat("inner hit copy's hashcode is different from original hashcode",firstInnerHits.hashCode(),equalTo(thirdBuilder.hashCode()));
    assertTrue("equals is not symmetric",thirdBuilder.equals(secondBuilder));
    assertTrue("equals is not symmetric",thirdBuilder.equals(firstInnerHits));
  }
}
