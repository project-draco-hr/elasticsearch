{
  emptyArray=new HashMap<String,List<Object>>();
  List<Object> empty1=new ArrayList<Object>();
  empty1.add(-1);
  empty1.add(-1);
  emptyArray.put("1",empty1);
  List<Object> empty2=new ArrayList<Object>();
  empty2.add(-1);
  empty2.add(-1);
  emptyArray.put("2",empty2);
  List<Object> empty3=new ArrayList<Object>();
  empty3.add(-1);
  empty3.add(-1);
  emptyArray.put("3",empty3);
  expectedPositionsArray=new HashMap<String,List<Object>>();
  List<Object> pos1=new ArrayList<Object>();
  pos1.add(1);
  pos1.add(2);
  expectedPositionsArray.put("1",pos1);
  List<Object> pos2=new ArrayList<Object>();
  pos2.add(0);
  pos2.add(1);
  expectedPositionsArray.put("2",pos2);
  List<Object> pos3=new ArrayList<Object>();
  pos3.add(0);
  pos3.add(4);
  expectedPositionsArray.put("3",pos3);
  expectedPayloadsArray=new HashMap<String,List<Object>>();
  List<Object> pay1=new ArrayList<Object>();
  pay1.add(2);
  pay1.add(3);
  expectedPayloadsArray.put("1",pay1);
  List<Object> pay2=new ArrayList<Object>();
  pay2.add(1);
  pay2.add(2);
  expectedPayloadsArray.put("2",pay2);
  List<Object> pay3=new ArrayList<Object>();
  pay3.add(1);
  pay3.add(-1);
  expectedPayloadsArray.put("3",pay3);
  expectedStartOffsetsArray=new HashMap<String,List<Object>>();
  List<Object> starts1=new ArrayList<Object>();
  starts1.add(4);
  starts1.add(8);
  expectedStartOffsetsArray.put("1",starts1);
  List<Object> starts2=new ArrayList<Object>();
  starts2.add(0);
  starts2.add(4);
  expectedStartOffsetsArray.put("2",starts2);
  List<Object> starts3=new ArrayList<Object>();
  starts3.add(0);
  starts3.add(16);
  expectedStartOffsetsArray.put("3",starts3);
  expectedEndOffsetsArray=new HashMap<String,List<Object>>();
  List<Object> ends1=new ArrayList<Object>();
  ends1.add(7);
  ends1.add(11);
  expectedEndOffsetsArray.put("1",ends1);
  List<Object> ends2=new ArrayList<Object>();
  ends2.add(3);
  ends2.add(7);
  expectedEndOffsetsArray.put("2",ends2);
  List<Object> ends3=new ArrayList<Object>();
  ends3.add(3);
  ends3.add(17);
  expectedEndOffsetsArray.put("3",ends3);
  XContentBuilder mapping=XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("int_payload_field").field("type","string").field("index_options","offsets").field("analyzer","payload_int").endObject().endObject().endObject().endObject();
  ElasticsearchAssertions.assertAcked(prepareCreate("test").addMapping("type1",mapping).setSettings(ImmutableSettings.settingsBuilder().put("index.analysis.analyzer.payload_int.tokenizer","whitespace").putArray("index.analysis.analyzer.payload_int.filter","delimited_int").put("index.analysis.filter.delimited_int.delimiter","|").put("index.analysis.filter.delimited_int.encoding","int").put("index.analysis.filter.delimited_int.type","delimited_payload_filter").put("index.number_of_replicas",0).put("index.number_of_shards",randomIntBetween(1,6))));
  indexRandom(true,client().prepareIndex("test","type1","1").setSource("int_payload_field","a|1 b|2 b|3 c|4 d "),client().prepareIndex("test","type1","2").setSource("int_payload_field","b|1 b|2 c|3 d|4 a "),client().prepareIndex("test","type1","3").setSource("int_payload_field","b|1 c|2 d|3 a|4 b "));
  ensureGreen();
}
