{
  ObjectMapper nestedObjectMapper=context.getObjectMapper(path);
  if (nestedObjectMapper == null) {
    if (ignoreUnmapped) {
      return new MatchNoDocsQuery();
    }
 else {
      throw new IllegalStateException("[" + NAME + "] failed to find nested object under path ["+ path+ "]");
    }
  }
  if (!nestedObjectMapper.nested().isNested()) {
    throw new IllegalStateException("[" + NAME + "] nested object under path ["+ path+ "] is not of nested type");
  }
  final BitSetProducer parentFilter;
  final Query childFilter;
  final Query innerQuery;
  ObjectMapper objectMapper=context.nestedScope().getObjectMapper();
  if (objectMapper == null) {
    parentFilter=context.bitsetFilter(Queries.newNonNestedFilter());
  }
 else {
    parentFilter=context.bitsetFilter(objectMapper.nestedTypeFilter());
  }
  childFilter=nestedObjectMapper.nestedTypeFilter();
  try {
    context.nestedScope().nextLevel(nestedObjectMapper);
    innerQuery=this.query.toQuery(context);
    if (innerQuery == null) {
      return null;
    }
  }
  finally {
    context.nestedScope().previousLevel();
  }
  return new ToParentBlockJoinQuery(Queries.filtered(innerQuery,childFilter),parentFilter,scoreMode);
}
