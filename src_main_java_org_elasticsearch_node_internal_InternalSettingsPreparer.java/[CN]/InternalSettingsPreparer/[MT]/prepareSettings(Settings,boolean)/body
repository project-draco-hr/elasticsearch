{
  String[] ignorePrefixes=new String[]{"es.default.","elasticsearch.default."};
  boolean useSystemProperties=!pSettings.getAsBoolean("config.ignore_system_properties",false);
  ImmutableSettings.Builder settingsBuilder=settingsBuilder().put(pSettings);
  if (useSystemProperties) {
    settingsBuilder.putProperties("elasticsearch.default.",System.getProperties()).putProperties("es.default.",System.getProperties()).putProperties("elasticsearch.",System.getProperties(),ignorePrefixes).putProperties("es.",System.getProperties(),ignorePrefixes);
  }
  settingsBuilder.replacePropertyPlaceholders();
  Environment environment=new Environment(settingsBuilder.build());
  if (loadConfigSettings) {
    boolean loadFromEnv=true;
    if (useSystemProperties) {
      if (Strings.hasText(System.getProperty("es.default.config"))) {
        loadFromEnv=true;
        settingsBuilder.loadFromUrl(environment.resolveConfig(System.getProperty("es.default.config")));
      }
      if (Strings.hasText(System.getProperty("es.config"))) {
        loadFromEnv=false;
        settingsBuilder.loadFromUrl(environment.resolveConfig(System.getProperty("es.config")));
      }
      if (Strings.hasText(System.getProperty("elasticsearch.config"))) {
        loadFromEnv=false;
        settingsBuilder.loadFromUrl(environment.resolveConfig(System.getProperty("elasticsearch.config")));
      }
    }
    if (loadFromEnv) {
      try {
        settingsBuilder.loadFromUrl(environment.resolveConfig("elasticsearch.yml"));
      }
 catch (      FailedToResolveConfigException e) {
      }
catch (      NoClassDefFoundError e) {
      }
      try {
        settingsBuilder.loadFromUrl(environment.resolveConfig("elasticsearch.json"));
      }
 catch (      FailedToResolveConfigException e) {
      }
      try {
        settingsBuilder.loadFromUrl(environment.resolveConfig("elasticsearch.properties"));
      }
 catch (      FailedToResolveConfigException e) {
      }
    }
  }
  settingsBuilder.put(pSettings);
  if (useSystemProperties) {
    settingsBuilder.putProperties("elasticsearch.",System.getProperties(),ignorePrefixes).putProperties("es.",System.getProperties(),ignorePrefixes);
  }
  settingsBuilder.replacePropertyPlaceholders();
  for (  Map.Entry<String,String> entry : pSettings.getAsMap().entrySet()) {
    String setting=entry.getKey();
    if (setting.startsWith("force.")) {
      settingsBuilder.remove(setting);
      settingsBuilder.put(setting.substring(".force".length()),entry.getValue());
    }
  }
  settingsBuilder.replacePropertyPlaceholders();
  if (settingsBuilder.get("name") == null) {
    String name=System.getProperty("name");
    if (name == null || name.isEmpty()) {
      name=settingsBuilder.get("node.name");
      if (name == null || name.isEmpty()) {
        name=Names.randomNodeName(environment.resolveConfig("names.txt"));
      }
    }
    if (name != null) {
      settingsBuilder.put("name",name);
    }
  }
  if (settingsBuilder.get(ClusterName.SETTING) == null) {
    settingsBuilder.put(ClusterName.SETTING,ClusterName.DEFAULT.value());
  }
  Settings v1=settingsBuilder.build();
  environment=new Environment(v1);
  settingsBuilder=settingsBuilder().put(v1);
  settingsBuilder.put("path.logs",cleanPath(environment.logsFile().getAbsolutePath()));
  v1=settingsBuilder.build();
  return new Tuple<Settings,Environment>(v1,environment);
}
