{
  File dataRoot=environment.dataFiles()[0];
  String dataPath1=new File(dataRoot,"data1").getCanonicalPath();
  String dataPath2=new File(dataRoot,"data2").getCanonicalPath();
  startNode("node1",settingsBuilder().putArray("path.data",dataPath1,dataPath2));
  createIndexWithStoreType("node1","test","niofs","least_used");
  String storeString=getStoreDirectory("node1","test",0).toString();
  logger.info(storeString);
  assertThat(storeString,startsWith("store(least_used[rate_limited(niofs(" + dataPath1));
  assertThat(storeString,containsString("), rate_limited(niofs(" + dataPath2));
  assertThat(storeString,endsWith(", type=MERGE, rate=20.0)])"));
  createIndexWithStoreType("node1","test","niofs","random");
  storeString=getStoreDirectory("node1","test",0).toString();
  logger.info(storeString);
  assertThat(storeString,startsWith("store(random[rate_limited(niofs(" + dataPath1));
  assertThat(storeString,containsString("), rate_limited(niofs(" + dataPath2));
  assertThat(storeString,endsWith(", type=MERGE, rate=20.0)])"));
  createIndexWithStoreType("node1","test","mmapfs","least_used");
  storeString=getStoreDirectory("node1","test",0).toString();
  logger.info(storeString);
  assertThat(storeString,startsWith("store(least_used[rate_limited(mmapfs(" + dataPath1));
  assertThat(storeString,containsString("), rate_limited(mmapfs(" + dataPath2));
  assertThat(storeString,endsWith(", type=MERGE, rate=20.0)])"));
  createIndexWithStoreType("node1","test","simplefs","least_used");
  storeString=getStoreDirectory("node1","test",0).toString();
  logger.info(storeString);
  assertThat(storeString,startsWith("store(least_used[rate_limited(simplefs(" + dataPath1));
  assertThat(storeString,containsString("), rate_limited(simplefs(" + dataPath2));
  assertThat(storeString,endsWith(", type=MERGE, rate=20.0)])"));
  createIndexWithStoreType("node1","test","memory","least_used");
  storeString=getStoreDirectory("node1","test",0).toString();
  logger.info(storeString);
  assertThat(storeString,equalTo("store(least_used[byte_buffer])"));
  createIndexWithoutRateLimitingStoreType("node1","test","niofs","least_used");
  storeString=getStoreDirectory("node1","test",0).toString();
  logger.info(storeString);
  assertThat(storeString,startsWith("store(least_used[niofs(" + dataPath1));
  assertThat(storeString,containsString("), niofs(" + dataPath2));
  assertThat(storeString,endsWith(")])"));
}
