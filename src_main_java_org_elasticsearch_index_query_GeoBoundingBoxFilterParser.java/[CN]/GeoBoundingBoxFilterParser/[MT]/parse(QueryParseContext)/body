{
  XContentParser parser=parseContext.parser();
  boolean cache=false;
  CacheKeyFilter.Key cacheKey=null;
  String fieldName=null;
  double top=Double.NaN;
  double bottom=Double.NaN;
  double left=Double.NaN;
  double right=Double.NaN;
  String filterName=null;
  String currentFieldName=null;
  XContentParser.Token token;
  boolean normalize=true;
  GeoPoint sparse=new GeoPoint();
  String type="memory";
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      fieldName=currentFieldName;
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          currentFieldName=parser.currentName();
          token=parser.nextToken();
          if (FIELD.equals(currentFieldName)) {
            fieldName=parser.text();
          }
 else           if (TOP.equals(currentFieldName)) {
            top=parser.doubleValue();
          }
 else           if (BOTTOM.equals(currentFieldName)) {
            bottom=parser.doubleValue();
          }
 else           if (LEFT.equals(currentFieldName)) {
            left=parser.doubleValue();
          }
 else           if (RIGHT.equals(currentFieldName)) {
            right=parser.doubleValue();
          }
 else {
            if (TOP_LEFT.equals(currentFieldName) || TOPLEFT.equals(currentFieldName)) {
              GeoUtils.parseGeoPoint(parser,sparse);
              top=sparse.getLat();
              left=sparse.getLon();
            }
 else             if (BOTTOM_RIGHT.equals(currentFieldName) || BOTTOMRIGHT.equals(currentFieldName)) {
              GeoUtils.parseGeoPoint(parser,sparse);
              bottom=sparse.getLat();
              right=sparse.getLon();
            }
 else             if (TOP_RIGHT.equals(currentFieldName) || TOPRIGHT.equals(currentFieldName)) {
              GeoUtils.parseGeoPoint(parser,sparse);
              top=sparse.getLat();
              right=sparse.getLon();
            }
 else             if (BOTTOM_LEFT.equals(currentFieldName) || BOTTOMLEFT.equals(currentFieldName)) {
              GeoUtils.parseGeoPoint(parser,sparse);
              bottom=sparse.getLat();
              left=sparse.getLon();
            }
 else {
              throw new ElasticsearchParseException("Unexpected field [" + currentFieldName + "]");
            }
          }
        }
 else {
          throw new ElasticsearchParseException("fieldname expected but [" + token + "] found");
        }
      }
    }
 else     if (token.isValue()) {
      if ("_name".equals(currentFieldName)) {
        filterName=parser.text();
      }
 else       if ("_cache".equals(currentFieldName)) {
        cache=parser.booleanValue();
      }
 else       if ("_cache_key".equals(currentFieldName) || "_cacheKey".equals(currentFieldName)) {
        cacheKey=new CacheKeyFilter.Key(parser.text());
      }
 else       if ("normalize".equals(currentFieldName)) {
        normalize=parser.booleanValue();
      }
 else       if ("type".equals(currentFieldName)) {
        type=parser.text();
      }
 else {
        throw new QueryParsingException(parseContext.index(),"[geo_bbox] filter does not support [" + currentFieldName + "]");
      }
    }
  }
  final GeoPoint topLeft=sparse.reset(top,left);
  final GeoPoint bottomRight=new GeoPoint(bottom,right);
  if (normalize) {
    GeoUtils.normalizePoint(topLeft);
    GeoUtils.normalizePoint(bottomRight);
  }
  MapperService.SmartNameFieldMappers smartMappers=parseContext.smartFieldMappers(fieldName);
  if (smartMappers == null || !smartMappers.hasMapper()) {
    throw new QueryParsingException(parseContext.index(),"failed to find geo_point field [" + fieldName + "]");
  }
  FieldMapper<?> mapper=smartMappers.mapper();
  if (!(mapper instanceof GeoPointFieldMapper)) {
    throw new QueryParsingException(parseContext.index(),"field [" + fieldName + "] is not a geo_point field");
  }
  GeoPointFieldMapper geoMapper=((GeoPointFieldMapper)mapper);
  Filter filter;
  if ("indexed".equals(type)) {
    filter=IndexedGeoBoundingBoxFilter.create(topLeft,bottomRight,geoMapper);
  }
 else   if ("memory".equals(type)) {
    IndexGeoPointFieldData indexFieldData=parseContext.getForField(mapper);
    filter=new InMemoryGeoBoundingBoxFilter(topLeft,bottomRight,indexFieldData);
  }
 else {
    throw new QueryParsingException(parseContext.index(),"geo bounding box type [" + type + "] not supported, either 'indexed' or 'memory' are allowed");
  }
  if (cache) {
    filter=parseContext.cacheFilter(filter,cacheKey);
  }
  filter=wrapSmartNameFilter(filter,smartMappers,parseContext);
  if (filterName != null) {
    parseContext.addNamedFilter(filterName,filter);
  }
  return filter;
}
