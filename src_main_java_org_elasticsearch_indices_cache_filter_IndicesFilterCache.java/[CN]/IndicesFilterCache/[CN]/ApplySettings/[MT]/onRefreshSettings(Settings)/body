{
  boolean replace=false;
  String size=settings.get(INDICES_CACHE_FILTER_SIZE,IndicesFilterCache.this.size);
  if (!size.equals(IndicesFilterCache.this.size)) {
    logger.info("updating [{}] from [{}] to [{}]",INDICES_CACHE_FILTER_SIZE,IndicesFilterCache.this.size,size);
    IndicesFilterCache.this.size=size;
    replace=true;
  }
  TimeValue expire=settings.getAsTime(INDICES_CACHE_FILTER_EXPIRE,IndicesFilterCache.this.expire);
  if (!Objects.equal(expire,IndicesFilterCache.this.expire)) {
    logger.info("updating [{}] from [{}] to [{}]",INDICES_CACHE_FILTER_EXPIRE,IndicesFilterCache.this.expire,expire);
    IndicesFilterCache.this.expire=expire;
    replace=true;
  }
  final int concurrencyLevel=settings.getAsInt(INDICES_CACHE_FILTER_CONCURRENCY_LEVEL,IndicesFilterCache.this.concurrencyLevel);
  if (concurrencyLevel <= 0) {
    throw new ElasticsearchIllegalArgumentException("concurrency_level must be > 0 but was: " + concurrencyLevel);
  }
  if (!Objects.equal(concurrencyLevel,IndicesFilterCache.this.concurrencyLevel)) {
    logger.info("updating [{}] from [{}] to [{}]",INDICES_CACHE_FILTER_CONCURRENCY_LEVEL,IndicesFilterCache.this.concurrencyLevel,concurrencyLevel);
    IndicesFilterCache.this.concurrencyLevel=concurrencyLevel;
    replace=true;
  }
  if (replace) {
    Cache<WeightedFilterCache.FilterCacheKey,DocIdSet> oldCache=IndicesFilterCache.this.cache;
    computeSizeInBytes();
    buildCache();
    oldCache.invalidateAll();
  }
}
