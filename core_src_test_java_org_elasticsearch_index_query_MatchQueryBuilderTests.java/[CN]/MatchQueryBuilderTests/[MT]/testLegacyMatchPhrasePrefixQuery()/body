{
  MatchQueryBuilder expectedQB=new MatchQueryBuilder("message","to be or not to be");
  expectedQB.type(Type.PHRASE_PREFIX);
  expectedQB.slop(2);
  expectedQB.maxExpansions(30);
  String json="{\n" + "  \"match\" : {\n" + "    \"message\" : {\n"+ "      \"query\" : \"to be or not to be\",\n"+ "      \"type\" : \"phrase_prefix\",\n"+ "      \"operator\" : \"OR\",\n"+ "      \"slop\" : 2,\n"+ "      \"prefix_length\" : 0,\n"+ "      \"max_expansions\" : 30,\n"+ "      \"fuzzy_transpositions\" : true,\n"+ "      \"lenient\" : false,\n"+ "      \"zero_terms_query\" : \"NONE\",\n"+ "      \"boost\" : 1.0\n"+ "    }\n"+ "  }\n"+ "}";
  MatchQueryBuilder qb=(MatchQueryBuilder)parseQuery(json,ParseFieldMatcher.EMPTY);
  checkGeneratedJson(json,qb);
  assertEquals(json,expectedQB,qb);
  assertSerialization(qb);
  try {
    parseQuery(json,ParseFieldMatcher.STRICT);
    fail("Expected query to fail with strict parsing");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage(),containsString("Deprecated field [type] used, replaced by [match_phrase and match_phrase_prefix query]"));
  }
}
