{
  SearchResponse response=client().prepareSearch("idx").addAggregation(range("range").field(MULTI_VALUED_FIELD_NAME).addUnboundedTo(-1).addUnboundedFrom(1000)).execute().actionGet();
  assertSearchResponse(response);
  Range range=response.getAggregations().get("range");
  assertThat(range,notNullValue());
  assertThat(range.getName(),equalTo("range"));
  List<? extends Bucket> buckets=range.getBuckets();
  assertThat(range.getBuckets().size(),equalTo(2));
  Range.Bucket bucket=buckets.get(0);
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKey(),equalTo("*--1.0"));
  assertThat(((Number)bucket.getFrom()).doubleValue(),equalTo(Double.NEGATIVE_INFINITY));
  assertThat(((Number)bucket.getTo()).doubleValue(),equalTo(-1.0));
  assertThat(bucket.getFromAsString(),nullValue());
  assertThat(bucket.getToAsString(),equalTo("-1.0"));
  assertThat(bucket.getDocCount(),equalTo(0L));
  bucket=buckets.get(1);
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKey(),equalTo("1000.0-*"));
  assertThat(((Number)bucket.getFrom()).doubleValue(),equalTo(1000d));
  assertThat(((Number)bucket.getTo()).doubleValue(),equalTo(Double.POSITIVE_INFINITY));
  assertThat(bucket.getFromAsString(),equalTo("1000.0"));
  assertThat(bucket.getToAsString(),nullValue());
  assertThat(bucket.getDocCount(),equalTo(0L));
}
