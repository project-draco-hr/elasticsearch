def smoke_test_release(release, files, expected_hash, plugins):
    for release_file in files:
        if (not os.path.isfile(release_file)):
            raise RuntimeError(('Smoketest failed missing file %s' % release_file))
        tmp_dir = tempfile.mkdtemp()
        if release_file.endswith('tar.gz'):
            run(('tar -xzf %s -C %s' % (release_file, tmp_dir)))
        elif release_file.endswith('zip'):
            run(('unzip %s -d %s' % (release_file, tmp_dir)))
        else:
            print ('  Skip SmokeTest for [%s]' % release_file)
            continue
        es_run_path = os.path.join(tmp_dir, ('elasticsearch-%s' % release), 'bin/elasticsearch')
        print ('  Smoke testing package [%s]' % release_file)
        es_plugin_path = os.path.join(tmp_dir, ('elasticsearch-%s' % release), 'bin/elasticsearch-plugin')
        plugin_names = {}
        for plugin in plugins:
            print ('     Install plugin [%s]' % plugin)
            run(('%s; %s -Des.plugins.staging=true %s %s' % (java_exe(), es_plugin_path, 'install -b', plugin)))
            plugin_names[plugin] = True
        if ('x-pack' in plugin_names):
            headers = {'Authorization': ('Basic %s' % base64.b64encode('es_admin:foobar').decode('UTF-8')), }
            es_shield_path = os.path.join(tmp_dir, ('elasticsearch-%s' % release), 'bin/x-pack/users')
            print '     Install dummy shield user'
            run(('%s; %s  useradd es_admin -r admin -p foobar' % (java_exe(), es_shield_path)))
        else:
            headers = {}
        print ('  Starting elasticsearch deamon from [%s]' % os.path.join(tmp_dir, ('elasticsearch-%s' % release)))
        try:
            run(('%s; %s -Ees.node.name=smoke_tester -Ees.cluster.name=prepare_release -Ees.script.inline=true -Ees.script.indexed=true -Ees.repositories.url.allowed_urls=http://snapshot.test* %s -Ees.pidfile=%s' % (java_exe(), es_run_path, '-d', os.path.join(tmp_dir, ('elasticsearch-%s' % release), 'es-smoke.pid'))))
            conn = HTTPConnection(host='127.0.0.1', port=9200, timeout=20)
            if (not wait_for_node_startup(header=headers)):
                print 'elasticsearch logs:'
                print ('*' * 80)
                logs = read_fully(os.path.join(tmp_dir, ('elasticsearch-%s' % release), 'logs/prepare_release.log'))
                print logs
                print ('*' * 80)
                raise RuntimeError("server didn't start up")
            try:
                conn.request('GET', '', headers=headers)
                res = conn.getresponse()
                if (res.status == 200):
                    version = json.loads(res.read().decode('utf-8'))['version']
                    if (release != version['number']):
                        raise RuntimeError(('Expected version [%s] but was [%s]' % (release, version['number'])))
                    if version['build_snapshot']:
                        raise RuntimeError('Expected non snapshot version')
                    if (expected_hash != version['build_hash'].strip()):
                        raise RuntimeError(('HEAD hash does not match expected [%s] but got [%s]' % (expected_hash, version['build_hash'])))
                    print '  Verify if plugins are listed in _nodes'
                    conn.request('GET', '/_nodes?plugin=true&pretty=true', headers=headers)
                    res = conn.getresponse()
                    if (res.status == 200):
                        nodes = json.loads(res.read().decode('utf-8'))['nodes']
                        for (_, node) in nodes.items():
                            node_plugins = node['plugins']
                            for node_plugin in node_plugins:
                                if (not plugin_names.get(node_plugin['name'].strip(), False)):
                                    raise RuntimeError(('Unexpected plugin %s' % node_plugin['name']))
                                del plugin_names[node_plugin['name']]
                        if plugin_names:
                            raise RuntimeError(('Plugins not loaded %s' % list(plugin_names.keys())))
                    else:
                        raise RuntimeError(('Expected HTTP 200 but got %s' % res.status))
                else:
                    raise RuntimeError(('Expected HTTP 200 but got %s' % res.status))
            finally:
                conn.close()
        finally:
            pid_path = os.path.join(tmp_dir, ('elasticsearch-%s' % release), 'es-smoke.pid')
            if os.path.exists(pid_path):
                pid = int(read_fully(pid_path))
                os.kill(pid, signal.SIGKILL)
            shutil.rmtree(tmp_dir)
        print ('  ' + ('*' * 80))
        print ()
