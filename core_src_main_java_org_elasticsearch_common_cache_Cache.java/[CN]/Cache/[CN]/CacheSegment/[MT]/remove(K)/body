{
  Future<Entry<K,V>> future;
  Entry<K,V> entry=null;
  try (ReleasableLock ignored=writeLock.acquire()){
    future=map.remove(key);
  }
   if (future != null) {
    segmentStats.eviction();
    try {
      entry=future.get();
    }
 catch (    ExecutionException|InterruptedException e) {
      throw new IllegalStateException("future should be a completedFuture for which get should not throw",e);
    }
  }
  return entry;
}
