{
  CacheSegment<K,V> segment=getCacheSegment(key);
  Tuple<Entry<K,V>,Entry<K,V>> tuple=segment.put(key,value,now);
  boolean replaced=false;
  try (ReleasableLock ignored=lruLock.acquire()){
    if (tuple.v2() != null && tuple.v2().state == State.EXISTING) {
      if (unlink(tuple.v2())) {
        replaced=true;
      }
    }
    promote(tuple.v1(),now);
  }
   if (replaced) {
    removalListener.onRemoval(new RemovalNotification<>(tuple.v2().key,tuple.v2().value,RemovalNotification.RemovalReason.REPLACED));
  }
}
