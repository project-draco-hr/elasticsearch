{
  CloseableHttpClient httpClient=HttpClientBuilder.create().build();
  int numNodes=RandomInts.randomIntBetween(random(),1,5);
  HttpHost[] hosts=new HttpHost[numNodes];
  for (int i=0; i < numNodes; i++) {
    hosts[i]=new HttpHost("localhost",9200);
  }
  try {
    new StaticConnectionPool(null,random().nextBoolean(),RequestConfig.DEFAULT,hosts);
  }
 catch (  NullPointerException e) {
    assertEquals(e.getMessage(),"client cannot be null");
  }
  try {
    new StaticConnectionPool(httpClient,random().nextBoolean(),null,hosts);
  }
 catch (  NullPointerException e) {
    assertEquals(e.getMessage(),"pingRequestConfig cannot be null");
  }
  try {
    new StaticConnectionPool(httpClient,random().nextBoolean(),RequestConfig.DEFAULT,(HttpHost)null);
  }
 catch (  NullPointerException e) {
    assertEquals(e.getMessage(),"host cannot be null");
  }
  try {
    new StaticConnectionPool(httpClient,random().nextBoolean(),RequestConfig.DEFAULT,(HttpHost[])null);
  }
 catch (  IllegalArgumentException e) {
    assertEquals(e.getMessage(),"no hosts provided");
  }
  try {
    new StaticConnectionPool(httpClient,random().nextBoolean(),RequestConfig.DEFAULT);
  }
 catch (  IllegalArgumentException e) {
    assertEquals(e.getMessage(),"no hosts provided");
  }
  StaticConnectionPool staticConnectionPool=new StaticConnectionPool(httpClient,random().nextBoolean(),RequestConfig.DEFAULT,hosts);
  assertNotNull(staticConnectionPool);
}
