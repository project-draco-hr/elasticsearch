{
  FieldMapper f1=new FakeFieldMapper("foo","bar");
  FieldTypeLookup lookup=new FieldTypeLookup();
  lookup=lookup.copyAndAddAll("type",newList(f1),randomBoolean());
  MappedFieldType ft2=FakeFieldMapper.makeFieldType("foo","bar");
  ft2.setBoost(2.0f);
  FieldMapper f2=new FakeFieldMapper("foo",ft2);
  try {
    lookup.copyAndAddAll("type2",newList(f2),false);
    fail("expected conflict");
  }
 catch (  IllegalArgumentException e) {
    assertTrue(e.getMessage().contains("to update [boost] across all types"));
  }
  lookup.copyAndAddAll("type",newList(f2),false);
  lookup.copyAndAddAll("type2",newList(f2),true);
  MappedFieldType ft3=FakeFieldMapper.makeFieldType("foo","bar");
  ft3.setStored(true);
  FieldMapper f3=new FakeFieldMapper("foo",ft3);
  try {
    lookup.copyAndAddAll("type2",newList(f3),false);
    fail("expected conflict");
  }
 catch (  IllegalArgumentException e) {
    assertTrue(e.getMessage().contains("has different [store] values"));
  }
  try {
    lookup.copyAndAddAll("type2",newList(f3),true);
    fail("expected conflict");
  }
 catch (  IllegalArgumentException e) {
    assertTrue(e.getMessage().contains("has different [store] values"));
  }
}
