{
  XContentParser.Token token;
  String currentFieldName=null;
  List<String> fields=new ArrayList<>();
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (currentFieldName != null) {
      if (currentFieldName.equals("fields")) {
        if (token == XContentParser.Token.START_ARRAY) {
          while (parser.nextToken() != XContentParser.Token.END_ARRAY) {
            fields.add(parser.text());
          }
        }
 else {
          throw new ElasticsearchParseException("failed to parse term vectors request. field [fields] must be an array");
        }
      }
 else       if (currentFieldName.equals("offsets")) {
        termVectorsRequest.offsets(parser.booleanValue());
      }
 else       if (currentFieldName.equals("positions")) {
        termVectorsRequest.positions(parser.booleanValue());
      }
 else       if (currentFieldName.equals("payloads")) {
        termVectorsRequest.payloads(parser.booleanValue());
      }
 else       if (currentFieldName.equals("term_statistics") || currentFieldName.equals("termStatistics")) {
        termVectorsRequest.termStatistics(parser.booleanValue());
      }
 else       if (currentFieldName.equals("field_statistics") || currentFieldName.equals("fieldStatistics")) {
        termVectorsRequest.fieldStatistics(parser.booleanValue());
      }
 else       if (currentFieldName.equals("dfs")) {
        throw new IllegalArgumentException("distributed frequencies is not supported anymore for term vectors");
      }
 else       if (currentFieldName.equals("per_field_analyzer") || currentFieldName.equals("perFieldAnalyzer")) {
        termVectorsRequest.perFieldAnalyzer(readPerFieldAnalyzer(parser.map()));
      }
 else       if (currentFieldName.equals("filter")) {
        termVectorsRequest.filterSettings(readFilterSettings(parser,termVectorsRequest));
      }
 else       if ("_index".equals(currentFieldName)) {
        termVectorsRequest.index=parser.text();
      }
 else       if ("_type".equals(currentFieldName)) {
        termVectorsRequest.type=parser.text();
      }
 else       if ("_id".equals(currentFieldName)) {
        if (termVectorsRequest.doc != null) {
          throw new ElasticsearchParseException("failed to parse term vectors request. either [id] or [doc] can be specified, but not both!");
        }
        termVectorsRequest.id=parser.text();
      }
 else       if ("doc".equals(currentFieldName)) {
        if (termVectorsRequest.id != null) {
          throw new ElasticsearchParseException("failed to parse term vectors request. either [id] or [doc] can be specified, but not both!");
        }
        termVectorsRequest.doc(jsonBuilder().copyCurrentStructure(parser));
      }
 else       if ("_routing".equals(currentFieldName) || "routing".equals(currentFieldName)) {
        termVectorsRequest.routing=parser.text();
      }
 else       if ("_parent".equals(currentFieldName) || "parent".equals(currentFieldName)) {
        termVectorsRequest.parent=parser.text();
      }
 else       if ("_version".equals(currentFieldName) || "version".equals(currentFieldName)) {
        termVectorsRequest.version=parser.longValue();
      }
 else       if ("_version_type".equals(currentFieldName) || "_versionType".equals(currentFieldName) || "version_type".equals(currentFieldName)|| "versionType".equals(currentFieldName)) {
        termVectorsRequest.versionType=VersionType.fromString(parser.text());
      }
 else {
        throw new ElasticsearchParseException("failed to parse term vectors request. unknown field [{}]",currentFieldName);
      }
    }
  }
  if (fields.size() > 0) {
    String[] fieldsAsArray=new String[fields.size()];
    termVectorsRequest.selectedFields(fields.toArray(fieldsAsArray));
  }
}
