{
  JsonToken token;
  List<SortField> sortFields=Lists.newArrayListWithCapacity(2);
  while ((token=jp.nextToken()) != JsonToken.END_OBJECT) {
    if (token == JsonToken.FIELD_NAME) {
      String fieldName=jp.getCurrentName();
      boolean reverse=false;
      String innerJsonName=null;
      int type=-1;
      while ((token=jp.nextToken()) != JsonToken.END_OBJECT) {
        if (token == JsonToken.FIELD_NAME) {
          innerJsonName=jp.getCurrentName();
        }
 else         if (token == JsonToken.VALUE_TRUE) {
          if ("reverse".equals(innerJsonName)) {
            reverse=true;
          }
        }
 else {
          if ("type".equals(innerJsonName)) {
            type=sortFieldTypesMapper.get(jp.getText());
            if (type == -1) {
              throw new SearchParseException("No sort type for [" + jp.getText() + "] with field ["+ fieldName+ "]");
            }
          }
        }
      }
      if ("score".equals(fieldName)) {
        if (reverse) {
          sortFields.add(SORT_SCORE_REVERSE);
        }
 else {
          sortFields.add(SORT_SCORE);
        }
      }
 else       if ("doc".equals(fieldName)) {
        if (reverse) {
          sortFields.add(SORT_DOC_REVERSE);
        }
 else {
          sortFields.add(SORT_DOC);
        }
      }
 else {
        FieldMappers fieldMappers=context.mapperService().smartNameFieldMappers(fieldName);
        if (fieldMappers == null || fieldMappers.mappers().isEmpty()) {
          if (type == -1) {
            throw new SearchParseException("No built in mapping found for [" + fieldName + "], and no explicit type defined");
          }
        }
 else {
          fieldName=fieldMappers.mappers().get(0).indexName();
          if (type == -1) {
            type=fieldMappers.mappers().get(0).sortType();
          }
        }
        sortFields.add(new SortField(fieldName,type,reverse));
      }
    }
  }
  if (!sortFields.isEmpty()) {
    context.sort(new Sort(sortFields.toArray(new SortField[sortFields.size()])));
  }
}
