{
  client.admin().indices().prepareDelete().execute().actionGet();
  client.admin().indices().prepareCreate("test1").execute().actionGet();
  client.admin().indices().prepareCreate("test2").execute().actionGet();
  ClusterHealthResponse clusterHealthResponse=client.admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();
  assertThat(clusterHealthResponse.timedOut(),equalTo(false));
  client.prepareIndex("test1","type1",Integer.toString(1)).setSource("field","value").execute().actionGet();
  client.prepareIndex("test1","type2",Integer.toString(1)).setSource("field","value").execute().actionGet();
  client.prepareIndex("test2","type",Integer.toString(1)).setSource("field","value").execute().actionGet();
  client.admin().indices().prepareRefresh().execute().actionGet();
  IndicesStats stats=client.admin().indices().prepareStats().execute().actionGet();
  assertThat(stats.primaries().docs().count(),equalTo(3l));
  assertThat(stats.total().docs().count(),equalTo(6l));
  assertThat(stats.primaries().indexing().total().indexCount(),equalTo(3l));
  assertThat(stats.total().indexing().total().indexCount(),equalTo(6l));
  assertThat(stats.total().store(),notNullValue());
  assertThat(stats.total().merge(),nullValue());
  assertThat(stats.total().flush(),nullValue());
  assertThat(stats.total().refresh(),nullValue());
  assertThat(stats.index("test1").primaries().docs().count(),equalTo(2l));
  assertThat(stats.index("test1").total().docs().count(),equalTo(4l));
  assertThat(stats.index("test1").primaries().store(),notNullValue());
  assertThat(stats.index("test1").primaries().merge(),nullValue());
  assertThat(stats.index("test1").primaries().flush(),nullValue());
  assertThat(stats.index("test1").primaries().refresh(),nullValue());
  assertThat(stats.index("test2").primaries().docs().count(),equalTo(1l));
  assertThat(stats.index("test2").total().docs().count(),equalTo(2l));
  assertThat(stats.index("test1").total().indexing().total().indexCurrent(),equalTo(0l));
  assertThat(stats.index("test1").total().indexing().total().deleteCurrent(),equalTo(0l));
  assertThat(stats.index("test1").total().search().total().fetchCurrent(),equalTo(0l));
  assertThat(stats.index("test1").total().search().total().queryCurrent(),equalTo(0l));
  stats=client.admin().indices().prepareStats().setDocs(false).setStore(false).setIndexing(false).setFlush(true).setRefresh(true).setMerge(true).execute().actionGet();
  assertThat(stats.total().docs(),nullValue());
  assertThat(stats.total().store(),nullValue());
  assertThat(stats.total().indexing(),nullValue());
  assertThat(stats.total().merge(),notNullValue());
  assertThat(stats.total().flush(),notNullValue());
  assertThat(stats.total().refresh(),notNullValue());
  stats=client.admin().indices().prepareStats().setTypes("type1","type").execute().actionGet();
  assertThat(stats.primaries().indexing().typeStats().get("type1").indexCount(),equalTo(1l));
  assertThat(stats.primaries().indexing().typeStats().get("type").indexCount(),equalTo(1l));
  assertThat(stats.primaries().indexing().typeStats().get("type2"),nullValue());
  assertThat(stats.primaries().indexing().typeStats().get("type1").indexCurrent(),equalTo(0l));
  assertThat(stats.primaries().indexing().typeStats().get("type1").deleteCurrent(),equalTo(0l));
  assertThat(stats.total().get().count(),equalTo(0l));
  GetResponse getResponse=client.prepareGet("test1","type1","1").execute().actionGet();
  assertThat(getResponse.exists(),equalTo(true));
  stats=client.admin().indices().prepareStats().execute().actionGet();
  assertThat(stats.total().get().count(),equalTo(1l));
  assertThat(stats.total().get().existsCount(),equalTo(1l));
  assertThat(stats.total().get().missingCount(),equalTo(0l));
  getResponse=client.prepareGet("test1","type1","2").execute().actionGet();
  assertThat(getResponse.exists(),equalTo(false));
  stats=client.admin().indices().prepareStats().execute().actionGet();
  assertThat(stats.total().get().count(),equalTo(2l));
  assertThat(stats.total().get().existsCount(),equalTo(1l));
  assertThat(stats.total().get().missingCount(),equalTo(1l));
}
