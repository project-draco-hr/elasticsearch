{
  EnumSet<ShardStatusChangeType> changes=purgeDeletedAndClosedShards();
  final List<IndexShard> activeToInactiveIndexingShards=new ArrayList<>();
  final int activeShards=updateShardStatuses(changes,activeToInactiveIndexingShards);
  for (  IndexShard indexShard : activeToInactiveIndexingShards) {
    try {
      indexShard.markAsInactive();
    }
 catch (    EngineClosedException e) {
      logger.trace("ignore EngineClosedException while marking shard [{}][{}] as inactive",indexShard.shardId().index().name(),indexShard.shardId().id());
    }
catch (    FlushNotAllowedEngineException e) {
      logger.trace("ignore FlushNotAllowedException while marking shard [{}][{}] as inactive",indexShard.shardId().index().name(),indexShard.shardId().id());
    }
  }
  if (changes.isEmpty() == false) {
    calcAndSetShardBuffers(activeShards,"[" + changes + "]");
  }
}
