{
  String field=null;
  List<RangeAggregator.Range> ranges=null;
  GeoPoint origin=null;
  DistanceUnit unit=DistanceUnit.DEFAULT;
  GeoDistance distanceType=GeoDistance.DEFAULT;
  boolean keyed=false;
  XContentParser.Token token;
  String currentFieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.VALUE_STRING) {
      if ("field".equals(currentFieldName)) {
        field=parser.text();
      }
 else       if ("unit".equals(currentFieldName)) {
        unit=DistanceUnit.fromString(parser.text());
      }
 else       if ("distance_type".equals(currentFieldName) || "distanceType".equals(currentFieldName)) {
        distanceType=GeoDistance.fromString(parser.text());
      }
 else       if ("point".equals(currentFieldName) || "origin".equals(currentFieldName) || "center".equals(currentFieldName)) {
        origin=new GeoPoint();
        origin.resetFromString(parser.text());
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else     if (token == XContentParser.Token.VALUE_BOOLEAN) {
      if ("keyed".equals(currentFieldName)) {
        keyed=parser.booleanValue();
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if ("ranges".equals(currentFieldName)) {
        ranges=new ArrayList<>();
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          String fromAsStr=null;
          String toAsStr=null;
          double from=0.0;
          double to=Double.POSITIVE_INFINITY;
          String key=null;
          String toOrFromOrKey=null;
          while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
            if (token == XContentParser.Token.FIELD_NAME) {
              toOrFromOrKey=parser.currentName();
            }
 else             if (token == XContentParser.Token.VALUE_NUMBER) {
              if ("from".equals(toOrFromOrKey)) {
                from=parser.doubleValue();
              }
 else               if ("to".equals(toOrFromOrKey)) {
                to=parser.doubleValue();
              }
            }
 else             if (token == XContentParser.Token.VALUE_STRING) {
              if ("key".equals(toOrFromOrKey)) {
                key=parser.text();
              }
 else               if ("from".equals(toOrFromOrKey)) {
                fromAsStr=parser.text();
              }
 else               if ("to".equals(toOrFromOrKey)) {
                toAsStr=parser.text();
              }
            }
          }
          ranges.add(new RangeAggregator.Range(key(key,from,to),from,fromAsStr,to,toAsStr));
        }
      }
 else       if ("point".equals(currentFieldName) || "origin".equals(currentFieldName) || "center".equals(currentFieldName)) {
        double lat=Double.NaN;
        double lon=Double.NaN;
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          if (Double.isNaN(lon)) {
            lon=parser.doubleValue();
          }
 else           if (Double.isNaN(lat)) {
            lat=parser.doubleValue();
          }
 else {
            throw new SearchParseException(context,"malformed [origin] geo point array in geo_distance aggregator [" + aggregationName + "]. "+ "a geo point array must be of the form [lon, lat]");
          }
        }
        origin=new GeoPoint(lat,lon);
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("point".equals(currentFieldName) || "origin".equals(currentFieldName) || "center".equals(currentFieldName)) {
        double lat=Double.NaN;
        double lon=Double.NaN;
        while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
          if (token == XContentParser.Token.FIELD_NAME) {
            currentFieldName=parser.currentName();
          }
 else           if (token == XContentParser.Token.VALUE_NUMBER) {
            if ("lat".equals(currentFieldName)) {
              lat=parser.doubleValue();
            }
 else             if ("lon".equals(currentFieldName)) {
              lon=parser.doubleValue();
            }
          }
        }
        if (Double.isNaN(lat) || Double.isNaN(lon)) {
          throw new SearchParseException(context,"malformed [origin] geo point object. either [lat] or [lon] (or both) are " + "missing in geo_distance aggregator [" + aggregationName + "]");
        }
        origin=new GeoPoint(lat,lon);
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else {
      throw new SearchParseException(context,"Unexpected token " + token + " in ["+ aggregationName+ "].");
    }
  }
  if (ranges == null) {
    throw new SearchParseException(context,"Missing [ranges] in geo_distance aggregator [" + aggregationName + "]");
  }
  if (origin == null) {
    throw new SearchParseException(context,"Missing [origin] in geo_distance aggregator [" + aggregationName + "]");
  }
  ValuesSourceConfig<GeoPointValuesSource> config=new ValuesSourceConfig<>(GeoPointValuesSource.class);
  if (field == null) {
    return new GeoDistanceFactory(aggregationName,config,InternalGeoDistance.FACTORY,origin,unit,distanceType,ranges,keyed);
  }
  FieldMapper<?> mapper=context.smartNameFieldMapper(field);
  if (mapper == null) {
    config.unmapped(true);
    return new GeoDistanceFactory(aggregationName,config,InternalGeoDistance.FACTORY,origin,unit,distanceType,ranges,keyed);
  }
  IndexFieldData<?> indexFieldData=context.fieldData().getForField(mapper);
  config.fieldContext(new FieldContext(field,indexFieldData));
  return new GeoDistanceFactory(aggregationName,config,InternalGeoDistance.FACTORY,origin,unit,distanceType,ranges,keyed);
}
