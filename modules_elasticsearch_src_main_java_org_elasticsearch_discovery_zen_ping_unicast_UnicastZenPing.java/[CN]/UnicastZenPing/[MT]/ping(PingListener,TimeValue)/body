{
  final SendPingsHandler sendPingsHandler=new SendPingsHandler(pingIdGenerator.incrementAndGet());
  receivedResponses.put(sendPingsHandler.id(),new ConcurrentHashMap<DiscoveryNode,PingResponse>());
  sendPings(timeout,false,sendPingsHandler);
  threadPool.schedule(timeout,ThreadPool.Names.CACHED,new Runnable(){
    @Override public void run(){
      sendPings(timeout,true,sendPingsHandler);
      for (      DiscoveryNode node : sendPingsHandler.nodeToDisconnect) {
        transportService.disconnectFromNode(node);
      }
      ConcurrentMap<DiscoveryNode,PingResponse> responses=receivedResponses.remove(sendPingsHandler.id());
      sendPingsHandler.close();
      listener.onPing(responses.values().toArray(new PingResponse[responses.size()]));
    }
  }
);
}
