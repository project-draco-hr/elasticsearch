{
  Map<String,List<BytesRef>> payloads=new HashMap<String,List<BytesRef>>();
  for (  String token : tokens) {
    if (payloads.get(token) == null) {
      payloads.put(token,new ArrayList<BytesRef>());
    }
    boolean createPayload=randomBoolean();
    if (createPayload) {
switch (encoding) {
case 0:
{
          float theFloat=randomFloat();
          payloads.get(token).add(new BytesRef(PayloadHelper.encodeFloat(theFloat)));
          break;
        }
case 1:
{
        payloads.get(token).add(new BytesRef(PayloadHelper.encodeInt(randomInt())));
        break;
      }
case 2:
{
      String payload=randomUnicodeOfLengthBetween(50,100);
      for (int c=0; c < payload.length(); c++) {
        if (Character.isWhitespace(payload.charAt(c))) {
          payload=payload.replace(payload.charAt(c),'w');
        }
      }
      payloads.get(token).add(new BytesRef(payload));
      break;
    }
default :
{
    throw new ElasticSearchException("unsupported encoding type");
  }
}
}
 else {
payloads.get(token).add(new BytesRef());
}
}
return payloads;
}
