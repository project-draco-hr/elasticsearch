{
  logger.info("Setting up the index ...");
  ImmutableSettings.Builder settings=settingsBuilder().put(indexSettings()).put("index.analysis.analyzer","standard").put("index.number_of_shards",randomIntBetween(2,10));
  assertAcked(prepareCreate("test").setSettings(settings).addMapping("type1","text","type=string"));
  ensureGreen();
  int numDocs=scaledRandomIntBetween(25,100);
  logger.info("Indexing {} documents...",numDocs);
  List<IndexRequestBuilder> builders=new ArrayList<>();
  for (int i=0; i < numDocs; i++) {
    builders.add(client().prepareIndex("test","type1",i + "").setSource("text","cat"));
  }
  indexRandom(true,builders);
  XContentBuilder expectedStats=jsonBuilder().startObject().startObject("text").startObject("field_statistics").field("sum_doc_freq",numDocs).field("doc_count",numDocs).field("sum_ttf",numDocs).endObject().startObject("terms").startObject("cat").field("doc_freq",numDocs).field("ttf",numDocs).endObject().endObject().endObject().endObject();
  logger.info("Without dfs 'cat' should appear strictly less than {} times.",numDocs);
  TermVectorResponse response=client().prepareTermVector("test","type1",randomIntBetween(0,numDocs - 1) + "").setSelectedFields("text").setFieldStatistics(true).setTermStatistics(true).get();
  checkStats(response.getFields(),expectedStats,false);
  logger.info("With dfs 'cat' should appear exactly {} times.",numDocs);
  response=client().prepareTermVector("test","type1",randomIntBetween(0,numDocs - 1) + "").setSelectedFields("text").setFieldStatistics(true).setTermStatistics(true).setDfs(true).get();
  checkStats(response.getFields(),expectedStats,true);
}
