{
  String[] fieldNames=new String[10];
  for (int i=0; i < fieldNames.length; i++) {
    fieldNames[i]="field" + String.valueOf(i);
  }
  XContentBuilder mapping=jsonBuilder().startObject().startObject("type1").startObject("properties");
  XContentBuilder source=jsonBuilder().startObject();
  for (  String field : fieldNames) {
    mapping.startObject(field).field("type","string").field("term_vector",randomBoolean() ? "with_positions_offsets_payloads" : "no").field("analyzer","tv_test").endObject();
    source.field(field,"the quick brown fox jumps over the lazy dog");
  }
  mapping.endObject().endObject().endObject();
  source.endObject();
  assertAcked(prepareCreate("test").addMapping("type1",mapping).setSettings(settingsBuilder().put(indexSettings()).put("index.analysis.analyzer.tv_test.tokenizer","whitespace").putArray("index.analysis.analyzer.tv_test.filter","type_as_payload","lowercase")));
  ensureGreen();
  for (int i=0; i < 10; i++) {
    client().prepareIndex("test","type1",Integer.toString(i)).setSource(source).execute().actionGet();
    refresh();
  }
  for (int i=0; i < 10; i++) {
    TermVectorResponse response=client().prepareTermVector("test","type1",Integer.toString(i)).setPayloads(true).setOffsets(true).setPositions(true).setSelectedFields(fieldNames).execute().actionGet();
    assertThat("doc id: " + i + " doesn't exists but should",response.isExists(),equalTo(true));
    Fields fields=response.getFields();
    assertThat(fields.size(),equalTo(fieldNames.length));
    for (    String fieldName : fieldNames) {
      checkBrownFoxTermVector(fields,fieldName,false);
    }
  }
}
