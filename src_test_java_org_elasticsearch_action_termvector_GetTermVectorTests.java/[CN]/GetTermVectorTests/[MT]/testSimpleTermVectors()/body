{
  XContentBuilder mapping=XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("field").field("type","string").field("term_vector","with_positions_offsets_payloads").field("analyzer","tv_test").endObject().endObject().endObject().endObject();
  assertAcked(prepareCreate("test").addMapping("type1",mapping).setSettings(settingsBuilder().put(indexSettings()).put("index.analysis.analyzer.tv_test.tokenizer","whitespace").putArray("index.analysis.analyzer.tv_test.filter","type_as_payload","lowercase")));
  ensureYellow();
  for (int i=0; i < 10; i++) {
    client().prepareIndex("test","type1",Integer.toString(i)).setSource(XContentFactory.jsonBuilder().startObject().field("field","the quick brown fox jumps over the lazy dog").endObject()).execute().actionGet();
    refresh();
  }
  String[] values={"brown","dog","fox","jumps","lazy","over","quick","the"};
  int[] freq={1,1,1,1,1,1,1,2};
  int[][] pos={{2},{8},{3},{4},{7},{5},{1},{0,6}};
  int[][] startOffset={{10},{40},{16},{20},{35},{26},{4},{0,31}};
  int[][] endOffset={{15},{43},{19},{25},{39},{30},{9},{3,34}};
  for (int i=0; i < 10; i++) {
    TermVectorRequestBuilder resp=client().prepareTermVector("test","type1",Integer.toString(i)).setPayloads(true).setOffsets(true).setPositions(true).setSelectedFields();
    TermVectorResponse response=resp.execute().actionGet();
    assertThat("doc id: " + i + " doesn't exists but should",response.isExists(),equalTo(true));
    Fields fields=response.getFields();
    assertThat(fields.size(),equalTo(1));
    Terms terms=fields.terms("field");
    assertThat(terms.size(),equalTo(8l));
    TermsEnum iterator=terms.iterator(null);
    for (int j=0; j < values.length; j++) {
      String string=values[j];
      BytesRef next=iterator.next();
      assertThat(next,Matchers.notNullValue());
      assertThat("expected " + string,string,equalTo(next.utf8ToString()));
      assertThat(next,Matchers.notNullValue());
      DocsAndPositionsEnum docsAndPositions=iterator.docsAndPositions(null,null);
      assertThat(docsAndPositions.nextDoc(),equalTo(0));
      assertThat(freq[j],equalTo(docsAndPositions.freq()));
      int[] termPos=pos[j];
      int[] termStartOffset=startOffset[j];
      int[] termEndOffset=endOffset[j];
      assertThat(termPos.length,equalTo(freq[j]));
      assertThat(termStartOffset.length,equalTo(freq[j]));
      assertThat(termEndOffset.length,equalTo(freq[j]));
      for (int k=0; k < freq[j]; k++) {
        int nextPosition=docsAndPositions.nextPosition();
        assertThat("term: " + string,nextPosition,equalTo(termPos[k]));
        assertThat("term: " + string,docsAndPositions.startOffset(),equalTo(termStartOffset[k]));
        assertThat("term: " + string,docsAndPositions.endOffset(),equalTo(termEndOffset[k]));
        assertThat("term: " + string,docsAndPositions.getPayload(),equalTo(new BytesRef("word")));
      }
    }
    assertThat(iterator.next(),Matchers.nullValue());
  }
}
