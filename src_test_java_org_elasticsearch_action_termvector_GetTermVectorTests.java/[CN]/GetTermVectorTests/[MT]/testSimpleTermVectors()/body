{
  XContentBuilder mapping=jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("field").field("type","string").field("term_vector","with_positions_offsets_payloads").field("analyzer","tv_test").endObject().endObject().endObject().endObject();
  assertAcked(prepareCreate("test").addMapping("type1",mapping).addAlias(new Alias("alias")).setSettings(settingsBuilder().put(indexSettings()).put("index.analysis.analyzer.tv_test.tokenizer","whitespace").putArray("index.analysis.analyzer.tv_test.filter","type_as_payload","lowercase")));
  ensureYellow();
  for (int i=0; i < 10; i++) {
    client().prepareIndex("test","type1",Integer.toString(i)).setSource(jsonBuilder().startObject().field("field","the quick brown fox jumps over the lazy dog").endObject()).execute().actionGet();
    refresh();
  }
  for (int i=0; i < 10; i++) {
    TermVectorRequestBuilder resp=client().prepareTermVector(indexOrAlias(),"type1",Integer.toString(i)).setPayloads(true).setOffsets(true).setPositions(true).setSelectedFields();
    TermVectorResponse response=resp.execute().actionGet();
    assertThat(response.getIndex(),equalTo("test"));
    assertThat("doc id: " + i + " doesn't exists but should",response.isExists(),equalTo(true));
    Fields fields=response.getFields();
    assertThat(fields.size(),equalTo(1));
    checkBrownFoxTermVector(fields,"field",true);
  }
}
