{
  String resultString="";
  ObjectIntOpenHashMap<String> payloadCounter=new ObjectIntOpenHashMap<String>();
  for (  String token : tokens) {
    if (!payloadCounter.containsKey(token)) {
      payloadCounter.putIfAbsent(token,0);
    }
 else {
      payloadCounter.put(token,payloadCounter.get(token) + 1);
    }
    resultString=resultString + token;
    BytesRef payload=payloads.get(token).get(payloadCounter.get(token));
    if (payload.length > 0) {
      resultString=resultString + delimiter;
switch (encoding) {
case 0:
{
          resultString=resultString + Float.toString(PayloadHelper.decodeFloat(payload.bytes,payload.offset));
          break;
        }
case 1:
{
        resultString=resultString + Integer.toString(PayloadHelper.decodeInt(payload.bytes,payload.offset));
        break;
      }
case 2:
{
      resultString=resultString + payload.utf8ToString();
      break;
    }
default :
{
    throw new ElasticSearchException("unsupported encoding type");
  }
}
}
resultString=resultString + " ";
}
return resultString;
}
