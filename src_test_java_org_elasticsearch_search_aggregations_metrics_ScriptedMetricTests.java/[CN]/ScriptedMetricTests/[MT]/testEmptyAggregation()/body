{
  Map<String,Object> varsMap=new HashMap<>();
  varsMap.put("multiplier",1);
  Map<String,Object> params=new HashMap<>();
  params.put("_agg",new ArrayList<>());
  params.put("vars",varsMap);
  SearchResponse searchResponse=client().prepareSearch("empty_bucket_idx").setQuery(matchAllQuery()).addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0).subAggregation(scriptedMetric("scripted").params(params).initScript("vars.multiplier = 3").mapScript("_agg.add(vars.multiplier)").combineScript("newaggregation = []; sum = 0;for (a in _agg) { sum += a}; newaggregation.add(sum); return newaggregation").reduceScript("newaggregation = []; sum = 0;for (aggregation in _aggs) { for (a in aggregation) { sum += a} }; newaggregation.add(sum); return newaggregation"))).execute().actionGet();
  assertThat(searchResponse.getHits().getTotalHits(),equalTo(2l));
  Histogram histo=searchResponse.getAggregations().get("histo");
  assertThat(histo,notNullValue());
  Histogram.Bucket bucket=histo.getBuckets().get(1);
  assertThat(bucket,notNullValue());
  ScriptedMetric scriptedMetric=bucket.getAggregations().get("scripted");
  assertThat(scriptedMetric,notNullValue());
  assertThat(scriptedMetric.getName(),equalTo("scripted"));
  assertThat(scriptedMetric.aggregation(),nullValue());
}
