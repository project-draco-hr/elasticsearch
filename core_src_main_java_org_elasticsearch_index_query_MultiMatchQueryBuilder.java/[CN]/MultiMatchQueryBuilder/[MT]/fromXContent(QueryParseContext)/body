{
  XContentParser parser=parseContext.parser();
  Object value=null;
  Map<String,Float> fieldsBoosts=new HashMap<>();
  MultiMatchQueryBuilder.Type type=DEFAULT_TYPE;
  String analyzer=null;
  int slop=DEFAULT_PHRASE_SLOP;
  Fuzziness fuzziness=null;
  int prefixLength=DEFAULT_PREFIX_LENGTH;
  int maxExpansions=DEFAULT_MAX_EXPANSIONS;
  Operator operator=DEFAULT_OPERATOR;
  String minimumShouldMatch=null;
  String fuzzyRewrite=null;
  Boolean useDisMax=null;
  Float tieBreaker=null;
  Float cutoffFrequency=null;
  boolean lenient=DEFAULT_LENIENCY;
  MatchQuery.ZeroTermsQuery zeroTermsQuery=DEFAULT_ZERO_TERMS_QUERY;
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  String queryName=null;
  XContentParser.Token token;
  String currentFieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (parseContext.getParseFieldMatcher().match(currentFieldName,FIELDS_FIELD)) {
      if (token == XContentParser.Token.START_ARRAY) {
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          parseFieldAndBoost(parser,fieldsBoosts);
        }
      }
 else       if (token.isValue()) {
        parseFieldAndBoost(parser,fieldsBoosts);
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"[" + NAME + "] query does not support ["+ currentFieldName+ "]");
      }
    }
 else     if (token.isValue()) {
      if (parseContext.getParseFieldMatcher().match(currentFieldName,QUERY_FIELD)) {
        value=parser.objectText();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,TYPE_FIELD)) {
        type=MultiMatchQueryBuilder.Type.parse(parser.text(),parseContext.getParseFieldMatcher());
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,ANALYZER_FIELD)) {
        analyzer=parser.text();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.BOOST_FIELD)) {
        boost=parser.floatValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,SLOP_FIELD)) {
        slop=parser.intValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,Fuzziness.FIELD)) {
        fuzziness=Fuzziness.parse(parser);
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,PREFIX_LENGTH_FIELD)) {
        prefixLength=parser.intValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,MAX_EXPANSIONS_FIELD)) {
        maxExpansions=parser.intValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,OPERATOR_FIELD)) {
        operator=Operator.fromString(parser.text());
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,MINIMUM_SHOULD_MATCH_FIELD)) {
        minimumShouldMatch=parser.textOrNull();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,FUZZY_REWRITE_FIELD)) {
        fuzzyRewrite=parser.textOrNull();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,USE_DIS_MAX_FIELD)) {
        useDisMax=parser.booleanValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,TIE_BREAKER_FIELD)) {
        tieBreaker=parser.floatValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,CUTOFF_FREQUENCY_FIELD)) {
        cutoffFrequency=parser.floatValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,LENIENT_FIELD)) {
        lenient=parser.booleanValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,ZERO_TERMS_QUERY_FIELD)) {
        String zeroTermsDocs=parser.text();
        if ("none".equalsIgnoreCase(zeroTermsDocs)) {
          zeroTermsQuery=MatchQuery.ZeroTermsQuery.NONE;
        }
 else         if ("all".equalsIgnoreCase(zeroTermsDocs)) {
          zeroTermsQuery=MatchQuery.ZeroTermsQuery.ALL;
        }
 else {
          throw new ParsingException(parser.getTokenLocation(),"Unsupported zero_terms_docs value [" + zeroTermsDocs + "]");
        }
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.NAME_FIELD)) {
        queryName=parser.text();
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"[" + NAME + "] query does not support ["+ currentFieldName+ "]");
      }
    }
 else {
      throw new ParsingException(parser.getTokenLocation(),"[" + NAME + "] unknown token ["+ token+ "] after ["+ currentFieldName+ "]");
    }
  }
  if (value == null) {
    throw new ParsingException(parser.getTokenLocation(),"No text specified for multi_match query");
  }
  if (fieldsBoosts.isEmpty()) {
    throw new ParsingException(parser.getTokenLocation(),"No fields specified for multi_match query");
  }
  return new MultiMatchQueryBuilder(value).fields(fieldsBoosts).type(type).analyzer(analyzer).cutoffFrequency(cutoffFrequency).fuzziness(fuzziness).fuzzyRewrite(fuzzyRewrite).useDisMax(useDisMax).lenient(lenient).maxExpansions(maxExpansions).minimumShouldMatch(minimumShouldMatch).operator(operator).prefixLength(prefixLength).slop(slop).tieBreaker(tieBreaker).zeroTermsQuery(zeroTermsQuery).boost(boost).queryName(queryName);
}
