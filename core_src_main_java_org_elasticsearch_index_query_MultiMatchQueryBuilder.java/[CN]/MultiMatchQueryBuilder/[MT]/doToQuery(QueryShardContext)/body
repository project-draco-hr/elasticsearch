{
  MultiMatchQuery multiMatchQuery=new MultiMatchQuery(context);
  if (analyzer != null) {
    if (context.analysisService().analyzer(analyzer) == null) {
      throw new QueryShardException(context,"[" + NAME + "] analyzer ["+ analyzer+ "] not found");
    }
    multiMatchQuery.setAnalyzer(analyzer);
  }
  multiMatchQuery.setPhraseSlop(slop);
  if (fuzziness != null) {
    multiMatchQuery.setFuzziness(fuzziness);
  }
  multiMatchQuery.setFuzzyPrefixLength(prefixLength);
  multiMatchQuery.setMaxExpansions(maxExpansions);
  multiMatchQuery.setOccur(operator.toBooleanClauseOccur());
  if (fuzzyRewrite != null) {
    multiMatchQuery.setFuzzyRewriteMethod(QueryParsers.parseRewriteMethod(context.parseFieldMatcher(),fuzzyRewrite,null));
  }
  if (tieBreaker != null) {
    multiMatchQuery.setTieBreaker(tieBreaker);
  }
  if (cutoffFrequency != null) {
    multiMatchQuery.setCommonTermsCutoff(cutoffFrequency);
  }
  multiMatchQuery.setLenient(lenient);
  multiMatchQuery.setZeroTermsQuery(zeroTermsQuery);
  if (useDisMax != null) {
    boolean typeUsesDismax=type.tieBreaker() != 1.0f;
    if (typeUsesDismax != useDisMax) {
      if (useDisMax && tieBreaker == null) {
        multiMatchQuery.setTieBreaker(0.0f);
      }
 else {
        multiMatchQuery.setTieBreaker(1.0f);
      }
    }
  }
  Map<String,Float> newFieldsBoosts=handleFieldsMatchPattern(context.mapperService(),fieldsBoosts);
  Query query=multiMatchQuery.parse(type,newFieldsBoosts,value,minimumShouldMatch);
  if (query == null) {
    return null;
  }
  return query;
}
