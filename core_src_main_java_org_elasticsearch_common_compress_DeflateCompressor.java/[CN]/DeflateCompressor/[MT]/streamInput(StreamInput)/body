{
  final byte[] headerBytes=new byte[HEADER.length];
  int len=0;
  while (len < headerBytes.length) {
    final int read=in.read(headerBytes,len,headerBytes.length - len);
    if (read == -1) {
      break;
    }
    len+=read;
  }
  if (len != HEADER.length || Arrays.equals(headerBytes,HEADER) == false) {
    throw new IllegalArgumentException("Input stream is not compressed with DEFLATE!");
  }
  final boolean nowrap=true;
  final Inflater inflater=new Inflater(nowrap);
  InputStream decompressedIn=new InflaterInputStream(in,inflater,BUFFER_SIZE);
  decompressedIn=new BufferedInputStream(decompressedIn,BUFFER_SIZE);
  return new InputStreamStreamInput(decompressedIn){
    final AtomicBoolean closed=new AtomicBoolean(false);
    public void close() throws IOException {
      try {
        super.close();
      }
  finally {
        if (closed.compareAndSet(false,true)) {
          inflater.end();
        }
      }
    }
  }
;
}
