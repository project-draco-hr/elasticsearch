{
  if (random.nextBoolean()) {
    builder.put(AbstractMergePolicyProvider.INDEX_COMPOUND_FORMAT,random.nextBoolean() ? random.nextDouble() : random.nextBoolean());
  }
  Class<? extends MergePolicyProvider<?>> mergePolicy=TieredMergePolicyProvider.class;
switch (random.nextInt(5)) {
case 4:
    mergePolicy=LogByteSizeMergePolicyProvider.class;
  break;
case 3:
mergePolicy=LogDocMergePolicyProvider.class;
break;
case 0:
mergePolicy=null;
}
if (mergePolicy != null) {
builder.put(MergePolicyModule.MERGE_POLICY_TYPE_KEY,mergePolicy.getName());
}
if (random.nextBoolean()) {
builder.put(MergeSchedulerProvider.FORCE_ASYNC_MERGE,random.nextBoolean());
}
switch (random.nextInt(4)) {
case 3:
builder.put(MergeSchedulerModule.MERGE_SCHEDULER_TYPE_KEY,ConcurrentMergeSchedulerProvider.class);
final int maxThreadCount=RandomInts.randomIntBetween(random,1,4);
final int maxMergeCount=RandomInts.randomIntBetween(random,maxThreadCount,maxThreadCount + 4);
builder.put(ConcurrentMergeSchedulerProvider.MAX_MERGE_COUNT,maxMergeCount);
builder.put(ConcurrentMergeSchedulerProvider.MAX_THREAD_COUNT,maxThreadCount);
break;
}
return builder;
}
