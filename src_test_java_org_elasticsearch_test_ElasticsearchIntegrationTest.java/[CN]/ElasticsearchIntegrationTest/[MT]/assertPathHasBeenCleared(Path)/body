{
  logger.info("--> checking that [{}] has been cleared",path);
  final List<Path> foundFiles=new ArrayList<>();
  StringBuilder sb=new StringBuilder();
  sb.append("[");
  if (Files.exists(path)) {
    try (DirectoryStream<Path> stream=Files.newDirectoryStream(path)){
      for (      Path file : stream) {
        logger.info("--> found file: [{}]",file.toAbsolutePath().toString());
        if (Files.isDirectory(file)) {
          assertPathHasBeenCleared(file);
        }
 else         if (Files.isRegularFile(file)) {
          foundFiles.add(file);
          sb.append(file.toAbsolutePath().toString());
          sb.append("\n");
        }
      }
    }
   }
  sb.append("]");
  if (Constants.WINDOWS) {
    if (foundFiles.size() > 0) {
      for (      Path file : foundFiles) {
        assertFalse(foundFiles.size() + " files exist that should have been cleaned:\n" + sb.toString(),file.getFileName().toString().startsWith(IndexFileNames.SEGMENTS));
      }
    }
  }
 else {
    assertThat(foundFiles.size() + " files exist that should have been cleaned:\n" + sb.toString(),foundFiles.size(),equalTo(0));
  }
}
