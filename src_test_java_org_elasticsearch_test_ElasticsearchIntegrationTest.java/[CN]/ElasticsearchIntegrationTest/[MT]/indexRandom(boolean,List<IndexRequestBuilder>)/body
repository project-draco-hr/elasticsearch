{
  if (builders.size() == 0) {
    return;
  }
  Random random=getRandom();
  Set<String> indicesSet=new HashSet<String>();
  for (  IndexRequestBuilder builder : builders) {
    indicesSet.add(builder.request().index());
  }
  final String[] indices=indicesSet.toArray(new String[indicesSet.size()]);
  Collections.shuffle(builders,random);
  final CopyOnWriteArrayList<Tuple<IndexRequestBuilder,Throwable>> errors=new CopyOnWriteArrayList<Tuple<IndexRequestBuilder,Throwable>>();
  List<CountDownLatch> inFlightAsyncOperations=new ArrayList<CountDownLatch>();
  if (builders.size() < FREQUENT_BULK_THRESHOLD ? frequently() : rarely()) {
    if (frequently()) {
      logger.info("Index [{}] docs async: [{}] bulk: [{}]",builders.size(),true,false);
      for (      IndexRequestBuilder indexRequestBuilder : builders) {
        indexRequestBuilder.execute(new PayloadLatchedActionListener<IndexResponse,IndexRequestBuilder>(indexRequestBuilder,newLatch(inFlightAsyncOperations),errors));
        postIndexAsyncActions(indices,inFlightAsyncOperations);
      }
    }
 else {
      logger.info("Index [{}] docs async: [{}] bulk: [{}]",builders.size(),false,false);
      for (      IndexRequestBuilder indexRequestBuilder : builders) {
        indexRequestBuilder.execute().actionGet();
        postIndexAsyncActions(indices,inFlightAsyncOperations);
      }
    }
  }
 else {
    logger.info("Index [{}] docs async: [{}] bulk: [{}]",builders.size(),false,true);
    for (    List<IndexRequestBuilder> segmented : Lists.partition(builders,between(MAX_BULK_INDEX_REQUEST_SIZE / 2,MAX_BULK_INDEX_REQUEST_SIZE))) {
      BulkRequestBuilder bulkBuilder=client().prepareBulk();
      for (      IndexRequestBuilder indexRequestBuilder : segmented) {
        bulkBuilder.add(indexRequestBuilder);
      }
      BulkResponse actionGet=bulkBuilder.execute().actionGet();
      assertThat(actionGet.hasFailures() ? actionGet.buildFailureMessage() : "",actionGet.hasFailures(),equalTo(false));
    }
  }
  for (  CountDownLatch operation : inFlightAsyncOperations) {
    operation.await();
  }
  final List<Throwable> actualErrors=new ArrayList<Throwable>();
  for (  Tuple<IndexRequestBuilder,Throwable> tuple : errors) {
    if (ExceptionsHelper.unwrapCause(tuple.v2()) instanceof EsRejectedExecutionException) {
      tuple.v1().execute().actionGet();
    }
 else {
      actualErrors.add(tuple.v2());
    }
  }
  assertThat(actualErrors,emptyIterable());
  if (forceRefresh) {
    assertNoFailures(client().admin().indices().prepareRefresh(indices).setIndicesOptions(IndicesOptions.lenient()).execute().get());
  }
}
