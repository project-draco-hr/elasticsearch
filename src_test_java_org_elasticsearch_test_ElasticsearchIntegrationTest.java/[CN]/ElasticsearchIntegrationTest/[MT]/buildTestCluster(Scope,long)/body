{
  int numClientNodes=InternalTestCluster.DEFAULT_NUM_CLIENT_NODES;
  boolean enableRandomBenchNodes=InternalTestCluster.DEFAULT_ENABLE_RANDOM_BENCH_NODES;
  boolean enableHttpPipelining=InternalTestCluster.DEFAULT_ENABLE_HTTP_PIPELINING;
  int minNumDataNodes=InternalTestCluster.DEFAULT_MIN_NUM_DATA_NODES;
  int maxNumDataNodes=InternalTestCluster.DEFAULT_MAX_NUM_DATA_NODES;
  SettingsSource settingsSource=InternalTestCluster.DEFAULT_SETTINGS_SOURCE;
  final String nodePrefix;
switch (scope) {
case GLOBAL:
    if (globalCompatibilityVersion().before(Version.V_1_2_0)) {
      numClientNodes=0;
    }
  nodePrefix=GLOBAL_CLUSTER_NODE_PREFIX;
break;
case TEST:
nodePrefix=TEST_CLUSTER_NODE_PREFIX;
break;
case SUITE:
nodePrefix=SUITE_CLUSTER_NODE_PREFIX;
break;
default :
throw new ElasticsearchException("Scope not supported: " + scope);
}
if (scope == Scope.GLOBAL) {
String cluster=System.getProperty(TESTS_CLUSTER);
if (Strings.hasLength(cluster)) {
String[] stringAddresses=cluster.split(",");
TransportAddress[] transportAddresses=new TransportAddress[stringAddresses.length];
int i=0;
for (String stringAddress : stringAddresses) {
String[] split=stringAddress.split(":");
if (split.length < 2) {
throw new IllegalArgumentException("address [" + cluster + "] not valid");
}
try {
transportAddresses[i++]=new InetSocketTransportAddress(split[0],Integer.valueOf(split[1]));
}
 catch (NumberFormatException e) {
throw new IllegalArgumentException("port is not valid, expected number but was [" + split[1] + "]");
}
}
return new ExternalTestCluster(transportAddresses);
}
}
 else {
settingsSource=new SettingsSource(){
@Override public Settings node(int nodeOrdinal){
return ImmutableSettings.builder().put(InternalNode.HTTP_ENABLED,false).put(nodeSettings(nodeOrdinal)).build();
}
@Override public Settings transportClient(){
return transportClientSettings();
}
}
;
int numDataNodes=getNumDataNodes();
if (numDataNodes >= 0) {
minNumDataNodes=maxNumDataNodes=numDataNodes;
}
 else {
minNumDataNodes=getMinNumDataNodes();
maxNumDataNodes=getMaxNumDataNodes();
}
numClientNodes=getNumClientNodes();
enableRandomBenchNodes=enableRandomBenchNodes();
}
return new InternalTestCluster(seed,minNumDataNodes,maxNumDataNodes,clusterName(scope.name(),Integer.toString(CHILD_JVM_ID),seed),settingsSource,numClientNodes,enableRandomBenchNodes,enableHttpPipelining,CHILD_JVM_ID,nodePrefix);
}
