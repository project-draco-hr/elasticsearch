{
  String clusterAddresses=System.getProperty(TESTS_CLUSTER);
  if (Strings.hasLength(clusterAddresses)) {
    if (scope == Scope.TEST) {
      throw new IllegalArgumentException("Cannot run TEST scope test with " + TESTS_CLUSTER);
    }
    return buildExternalCluster(clusterAddresses);
  }
  final String nodePrefix;
  final LifecycleScope nodeDirScope;
switch (scope) {
case TEST:
    nodePrefix=TEST_CLUSTER_NODE_PREFIX;
  nodeDirScope=LifecycleScope.TEST;
break;
case SUITE:
nodePrefix=SUITE_CLUSTER_NODE_PREFIX;
nodeDirScope=LifecycleScope.SUITE;
break;
default :
throw new ElasticsearchException("Scope not supported: " + scope);
}
SettingsSource settingsSource=new SettingsSource(){
@Override public Settings node(int nodeOrdinal){
return ImmutableSettings.builder().put(Node.HTTP_ENABLED,false).put(nodeSettings(nodeOrdinal)).build();
}
@Override public Settings transportClient(){
return transportClientSettings();
}
}
;
int numDataNodes=getNumDataNodes();
int minNumDataNodes;
int maxNumDataNodes;
if (numDataNodes >= 0) {
minNumDataNodes=maxNumDataNodes=numDataNodes;
}
 else {
minNumDataNodes=getMinNumDataNodes();
maxNumDataNodes=getMaxNumDataNodes();
}
return new InternalTestCluster(seed,createTempDir(),minNumDataNodes,maxNumDataNodes,InternalTestCluster.clusterName(scope.name(),seed) + "-cluster",settingsSource,getNumClientNodes(),InternalTestCluster.DEFAULT_ENABLE_HTTP_PIPELINING,nodePrefix);
}
