{
  final String nodePrefix;
switch (scope) {
case TEST:
    nodePrefix=TEST_CLUSTER_NODE_PREFIX;
  break;
case SUITE:
nodePrefix=SUITE_CLUSTER_NODE_PREFIX;
break;
default :
throw new ElasticsearchException("Scope not supported: " + scope);
}
SettingsSource settingsSource=new SettingsSource(){
@Override public Settings node(int nodeOrdinal){
return ImmutableSettings.builder().put(Node.HTTP_ENABLED,false).put(nodeSettings(nodeOrdinal)).build();
}
@Override public Settings transportClient(){
return transportClientSettings();
}
}
;
int numDataNodes=getNumDataNodes();
int minNumDataNodes;
int maxNumDataNodes;
if (numDataNodes >= 0) {
minNumDataNodes=maxNumDataNodes=numDataNodes;
}
 else {
minNumDataNodes=getMinNumDataNodes();
maxNumDataNodes=getMaxNumDataNodes();
}
return new InternalTestCluster(seed,minNumDataNodes,maxNumDataNodes,clusterName(scope.name(),Integer.toString(CHILD_JVM_ID),seed),settingsSource,getNumClientNodes(),enableRandomBenchNodes(),InternalTestCluster.DEFAULT_ENABLE_HTTP_PIPELINING,CHILD_JVM_ID,nodePrefix);
}
