{
  long currentClusterSeed=randomLong();
  SettingsSource settingsSource=new SettingsSource(){
    @Override public Settings node(    int nodeOrdinal){
      return nodeSettings(nodeOrdinal);
    }
    @Override public Settings transportClient(){
      return transportClientSettings();
    }
  }
;
  int numDataNodes=getNumDataNodes();
  int minNumDataNodes, maxNumDataNodes;
  if (numDataNodes >= 0) {
    minNumDataNodes=maxNumDataNodes=numDataNodes;
  }
 else {
    minNumDataNodes=getMinNumDataNodes();
    maxNumDataNodes=getMaxNumDataNodes();
  }
  int numClientNodes=getNumClientNodes();
  boolean enableRandomBenchNodes=enableRandomBenchNodes();
  String nodePrefix;
switch (scope) {
case TEST:
    nodePrefix=TEST_CLUSTER_NODE_PREFIX;
  break;
case SUITE:
nodePrefix=SUITE_CLUSTER_NODE_PREFIX;
break;
case GLOBAL:
nodePrefix=GLOBAL_CLUSTER_NODE_PREFIX;
break;
default :
throw new ElasticsearchException("Unknown scope: " + scope);
}
return new InternalTestCluster(currentClusterSeed,minNumDataNodes,maxNumDataNodes,clusterName(scope.name(),Integer.toString(CHILD_JVM_ID),currentClusterSeed),settingsSource,numClientNodes,enableRandomBenchNodes,CHILD_JVM_ID,nodePrefix);
}
