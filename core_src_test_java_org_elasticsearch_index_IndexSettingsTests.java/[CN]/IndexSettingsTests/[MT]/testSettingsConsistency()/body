{
  Version version=VersionUtils.getPreviousVersion();
  IndexMetaData metaData=newIndexMeta("index",Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED,version).build());
  IndexSettings settings=new IndexSettings(metaData,Settings.EMPTY);
  assertEquals(version,settings.getIndexVersionCreated());
  assertEquals("_na_",settings.getUUID());
  try {
    settings.updateIndexMetaData(newIndexMeta("index",Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED,Version.CURRENT).put("index.test.setting.int",42).build()));
    fail("version has changed");
  }
 catch (  IllegalArgumentException ex) {
    assertTrue(ex.getMessage(),ex.getMessage().startsWith("version mismatch on settings update expected: "));
  }
  metaData=newIndexMeta("index",Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED,Version.fromId(999999)).build());
  settings=new IndexSettings(metaData,Settings.EMPTY);
  assertEquals(Version.fromId(999999),settings.getIndexVersionCreated());
  assertEquals("_na_",settings.getUUID());
  settings.updateIndexMetaData(newIndexMeta("index",Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED,Version.fromId(999999)).put("index.test.setting.int",42).build()));
  metaData=newIndexMeta("index",Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED,Version.CURRENT).put(IndexMetaData.SETTING_INDEX_UUID,"0xdeadbeef").build());
  settings=new IndexSettings(metaData,Settings.EMPTY);
  try {
    settings.updateIndexMetaData(newIndexMeta("index",Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED,Version.CURRENT).put("index.test.setting.int",42).build()));
    fail("uuid missing/change");
  }
 catch (  IllegalArgumentException ex) {
    assertEquals("uuid mismatch on settings update expected: 0xdeadbeef but was: _na_",ex.getMessage());
  }
  assertEquals(metaData.getSettings().getAsMap(),settings.getSettings().getAsMap());
}
