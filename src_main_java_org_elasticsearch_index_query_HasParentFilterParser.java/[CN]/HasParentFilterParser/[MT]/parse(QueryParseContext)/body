{
  XContentParser parser=parseContext.parser();
  Query query=null;
  boolean queryFound=false;
  String parentType=null;
  boolean cache=false;
  CacheKeyFilter.Key cacheKey=null;
  String filterName=null;
  String currentFieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("query".equals(currentFieldName)) {
        String[] origTypes=QueryParseContext.setTypesWithPrevious(parentType == null ? null : new String[]{parentType});
        try {
          query=parseContext.parseInnerQuery();
          queryFound=true;
        }
  finally {
          QueryParseContext.setTypes(origTypes);
        }
      }
 else       if ("filter".equals(currentFieldName)) {
        String[] origTypes=QueryParseContext.setTypesWithPrevious(parentType == null ? null : new String[]{parentType});
        try {
          Filter innerFilter=parseContext.parseInnerFilter();
          query=new XConstantScoreQuery(innerFilter);
          queryFound=true;
        }
  finally {
          QueryParseContext.setTypes(origTypes);
        }
      }
 else {
        throw new QueryParsingException(parseContext.index(),"[has_parent] filter does not support [" + currentFieldName + "]");
      }
    }
 else     if (token.isValue()) {
      if ("type".equals(currentFieldName) || "parent_type".equals(currentFieldName) || "parentType".equals(currentFieldName)) {
        parentType=parser.text();
      }
 else       if ("_scope".equals(currentFieldName)) {
        throw new QueryParsingException(parseContext.index(),"the [_scope] support in [has_parent] filter has been removed, use a filter as a facet_filter in the relevant global facet");
      }
 else       if ("_name".equals(currentFieldName)) {
        filterName=parser.text();
      }
 else       if ("_cache".equals(currentFieldName)) {
        cache=parser.booleanValue();
      }
 else       if ("_cache_key".equals(currentFieldName) || "_cacheKey".equals(currentFieldName)) {
        cacheKey=new CacheKeyFilter.Key(parser.text());
      }
 else {
        throw new QueryParsingException(parseContext.index(),"[has_parent] filter does not support [" + currentFieldName + "]");
      }
    }
  }
  if (!queryFound) {
    throw new QueryParsingException(parseContext.index(),"[has_parent] filter requires 'query' field");
  }
  if (query == null) {
    return null;
  }
  if (parentType == null) {
    throw new QueryParsingException(parseContext.index(),"[has_parent] filter requires 'parent_type' field");
  }
  DocumentMapper parentDocMapper=parseContext.mapperService().documentMapper(parentType);
  if (parentDocMapper == null) {
    throw new QueryParsingException(parseContext.index(),"[has_parent] filter configured 'parent_type' [" + parentType + "] is not a valid type");
  }
  query=new XFilteredQuery(query,parseContext.cacheFilter(parentDocMapper.typeFilter(),null));
  SearchContext searchContext=SearchContext.current();
  if (searchContext == null) {
    throw new ElasticSearchIllegalStateException("[has_parent] Can't execute, search context not set");
  }
  HasParentFilter parentFilter=HasParentFilter.create(query,parentType,searchContext);
  searchContext.addRewrite(parentFilter);
  Filter filter=parentFilter;
  if (cache) {
    filter=parseContext.cacheFilter(filter,cacheKey);
  }
  if (filterName != null) {
    parseContext.addNamedFilter(filterName,filter);
  }
  return filter;
}
