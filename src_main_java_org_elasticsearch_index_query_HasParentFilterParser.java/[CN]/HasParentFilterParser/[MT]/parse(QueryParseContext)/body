{
  ensureNotDeleteByQuery(NAME,parseContext);
  XContentParser parser=parseContext.parser();
  boolean queryFound=false;
  boolean filterFound=false;
  String parentType=null;
  String filterName=null;
  String currentFieldName=null;
  XContentParser.Token token;
  XContentStructure.InnerQuery innerQuery=null;
  XContentStructure.InnerFilter innerFilter=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("query".equals(currentFieldName)) {
        innerQuery=new XContentStructure.InnerQuery(parseContext,parentType == null ? null : new String[]{parentType});
        queryFound=true;
      }
 else       if ("filter".equals(currentFieldName)) {
        innerFilter=new XContentStructure.InnerFilter(parseContext,parentType == null ? null : new String[]{parentType});
        filterFound=true;
      }
 else {
        throw new QueryParsingException(parseContext.index(),"[has_parent] filter does not support [" + currentFieldName + "]");
      }
    }
 else     if (token.isValue()) {
      if ("type".equals(currentFieldName) || "parent_type".equals(currentFieldName) || "parentType".equals(currentFieldName)) {
        parentType=parser.text();
      }
 else       if ("_scope".equals(currentFieldName)) {
        throw new QueryParsingException(parseContext.index(),"the [_scope] support in [has_parent] filter has been removed, use a filter as a facet_filter in the relevant global facet");
      }
 else       if ("_name".equals(currentFieldName)) {
        filterName=parser.text();
      }
 else       if ("_cache".equals(currentFieldName)) {
      }
 else       if ("_cache_key".equals(currentFieldName) || "_cacheKey".equals(currentFieldName)) {
      }
 else {
        throw new QueryParsingException(parseContext.index(),"[has_parent] filter does not support [" + currentFieldName + "]");
      }
    }
  }
  if (!queryFound && !filterFound) {
    throw new QueryParsingException(parseContext.index(),"[has_parent] filter requires 'query' or 'filter' field");
  }
  if (parentType == null) {
    throw new QueryParsingException(parseContext.index(),"[has_parent] filter requires 'parent_type' field");
  }
  Query query;
  if (queryFound) {
    query=innerQuery.asQuery(parentType);
  }
 else {
    query=innerFilter.asFilter(parentType);
  }
  if (query == null) {
    return null;
  }
  DocumentMapper parentDocMapper=parseContext.mapperService().documentMapper(parentType);
  if (parentDocMapper == null) {
    throw new QueryParsingException(parseContext.index(),"[has_parent] filter configured 'parent_type' [" + parentType + "] is not a valid type");
  }
  query=new XFilteredQuery(query,parseContext.cacheFilter(parentDocMapper.typeFilter(),null));
  Set<String> parentTypes=new HashSet<>(5);
  parentTypes.add(parentType);
  ParentChildIndexFieldData parentChildIndexFieldData=null;
  for (  DocumentMapper documentMapper : parseContext.mapperService()) {
    ParentFieldMapper parentFieldMapper=documentMapper.parentFieldMapper();
    if (parentFieldMapper.active()) {
      DocumentMapper parentTypeDocumentMapper=parseContext.mapperService().documentMapper(parentFieldMapper.type());
      parentChildIndexFieldData=parseContext.fieldData().getForField(parentFieldMapper);
      if (parentTypeDocumentMapper == null) {
        parentTypes.add(parentFieldMapper.type());
      }
    }
  }
  if (parentChildIndexFieldData == null) {
    throw new QueryParsingException(parseContext.index(),"[has_parent] no _parent field configured");
  }
  Filter parentFilter;
  if (parentTypes.size() == 1) {
    DocumentMapper documentMapper=parseContext.mapperService().documentMapper(parentTypes.iterator().next());
    parentFilter=parseContext.cacheFilter(documentMapper.typeFilter(),null);
  }
 else {
    XBooleanFilter parentsFilter=new XBooleanFilter();
    for (    String parentTypeStr : parentTypes) {
      DocumentMapper documentMapper=parseContext.mapperService().documentMapper(parentTypeStr);
      Filter filter=parseContext.cacheFilter(documentMapper.typeFilter(),null);
      parentsFilter.add(filter,BooleanClause.Occur.SHOULD);
    }
    parentFilter=parentsFilter;
  }
  Filter childrenFilter=parseContext.cacheFilter(new NotFilter(parentFilter),null);
  Query parentConstantScoreQuery=new ParentConstantScoreQuery(parentChildIndexFieldData,query,parentType,childrenFilter);
  if (filterName != null) {
    parseContext.addNamedFilter(filterName,new CustomQueryWrappingFilter(parentConstantScoreQuery));
  }
  return new CustomQueryWrappingFilter(parentConstantScoreQuery);
}
