{
  int numFieldsWritten=0;
  PostingsEnum docsAndPosEnum=null;
  PostingsEnum docsEnum=null;
  for (  String field : termVectorsByField) {
    if ((selectedFields != null) && (!selectedFields.contains(field))) {
      continue;
    }
    Terms fieldTermVector=termVectorsByField.terms(field);
    Terms topLevelTerms=topLevelFields.terms(field);
    if (topLevelTerms == null) {
      topLevelTerms=fieldTermVector;
    }
    TermsEnum topLevelIterator=topLevelTerms.iterator();
    boolean positions=flags.contains(Flag.Positions) && fieldTermVector.hasPositions();
    boolean offsets=flags.contains(Flag.Offsets) && fieldTermVector.hasOffsets();
    boolean payloads=flags.contains(Flag.Payloads) && fieldTermVector.hasPayloads();
    startField(field,fieldTermVector.size(),positions,offsets,payloads);
    if (flags.contains(Flag.FieldStatistics)) {
      if (dfs != null) {
        writeFieldStatistics(dfs.fieldStatistics().get(field));
      }
 else {
        writeFieldStatistics(topLevelTerms);
      }
    }
    TermsEnum iterator=fieldTermVector.iterator();
    final boolean useDocsAndPos=positions || offsets || payloads;
    while (iterator.next() != null) {
      BytesRef term=iterator.term();
      boolean foundTerm=topLevelIterator.seekExact(term);
      startTerm(term);
      if (flags.contains(Flag.TermStatistics)) {
        if (dfs != null) {
          writeTermStatistics(dfs.termStatistics().get(new Term(field,term.utf8ToString())));
        }
 else {
          writeTermStatistics(topLevelIterator);
        }
      }
      if (useDocsAndPos) {
        docsAndPosEnum=writeTermWithDocsAndPos(iterator,docsAndPosEnum,positions,offsets,payloads);
      }
 else {
        docsEnum=writeTermWithDocsOnly(iterator,docsEnum);
      }
    }
    numFieldsWritten++;
  }
  response.setTermVectorsField(output);
  response.setHeader(writeHeader(numFieldsWritten,flags.contains(Flag.TermStatistics),flags.contains(Flag.FieldStatistics)));
}
