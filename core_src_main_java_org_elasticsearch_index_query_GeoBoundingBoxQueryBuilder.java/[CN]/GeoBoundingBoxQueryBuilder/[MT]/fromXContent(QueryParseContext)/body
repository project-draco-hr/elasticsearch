{
  XContentParser parser=parseContext.parser();
  String fieldName=null;
  double top=Double.NaN;
  double bottom=Double.NaN;
  double left=Double.NaN;
  double right=Double.NaN;
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  String queryName=null;
  String currentFieldName=null;
  XContentParser.Token token;
  boolean coerce=GeoValidationMethod.DEFAULT_LENIENT_PARSING;
  boolean ignoreMalformed=GeoValidationMethod.DEFAULT_LENIENT_PARSING;
  GeoValidationMethod validationMethod=null;
  boolean ignoreUnmapped=DEFAULT_IGNORE_UNMAPPED;
  GeoPoint sparse=new GeoPoint();
  String type="memory";
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      fieldName=currentFieldName;
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          currentFieldName=parser.currentName();
          token=parser.nextToken();
          if (parseContext.isDeprecatedSetting(currentFieldName)) {
          }
 else           if (parseContext.parseFieldMatcher().match(currentFieldName,FIELD_FIELD)) {
            fieldName=parser.text();
          }
 else           if (parseContext.parseFieldMatcher().match(currentFieldName,TOP_FIELD)) {
            top=parser.doubleValue();
          }
 else           if (parseContext.parseFieldMatcher().match(currentFieldName,BOTTOM_FIELD)) {
            bottom=parser.doubleValue();
          }
 else           if (parseContext.parseFieldMatcher().match(currentFieldName,LEFT_FIELD)) {
            left=parser.doubleValue();
          }
 else           if (parseContext.parseFieldMatcher().match(currentFieldName,RIGHT_FIELD)) {
            right=parser.doubleValue();
          }
 else {
            if (parseContext.parseFieldMatcher().match(currentFieldName,TOP_LEFT_FIELD)) {
              GeoUtils.parseGeoPoint(parser,sparse);
              top=sparse.getLat();
              left=sparse.getLon();
            }
 else             if (parseContext.parseFieldMatcher().match(currentFieldName,BOTTOM_RIGHT_FIELD)) {
              GeoUtils.parseGeoPoint(parser,sparse);
              bottom=sparse.getLat();
              right=sparse.getLon();
            }
 else             if (parseContext.parseFieldMatcher().match(currentFieldName,TOP_RIGHT_FIELD)) {
              GeoUtils.parseGeoPoint(parser,sparse);
              top=sparse.getLat();
              right=sparse.getLon();
            }
 else             if (parseContext.parseFieldMatcher().match(currentFieldName,BOTTOM_LEFT_FIELD)) {
              GeoUtils.parseGeoPoint(parser,sparse);
              bottom=sparse.getLat();
              left=sparse.getLon();
            }
 else {
              throw new ElasticsearchParseException("failed to parse [{}] query. unexpected field [{}]",QUERY_NAME_FIELD.getPreferredName(),currentFieldName);
            }
          }
        }
 else {
          throw new ElasticsearchParseException("failed to parse [{}] query. field name expected but [{}] found",QUERY_NAME_FIELD.getPreferredName(),token);
        }
      }
    }
 else     if (token.isValue()) {
      if (parseContext.parseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.NAME_FIELD)) {
        queryName=parser.text();
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.BOOST_FIELD)) {
        boost=parser.floatValue();
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,COERCE_FIELD)) {
        coerce=parser.booleanValue();
        if (coerce) {
          ignoreMalformed=true;
        }
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,VALIDATION_METHOD_FIELD)) {
        validationMethod=GeoValidationMethod.fromString(parser.text());
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,IGNORE_UNMAPPED_FIELD)) {
        ignoreUnmapped=parser.booleanValue();
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,TYPE_FIELD)) {
        type=parser.text();
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,IGNORE_MALFORMED_FIELD)) {
        ignoreMalformed=parser.booleanValue();
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"failed to parse [{}] query. unexpected field [{}]",QUERY_NAME_FIELD.getPreferredName(),currentFieldName);
      }
    }
  }
  final GeoPoint topLeft=sparse.reset(top,left);
  final GeoPoint bottomRight=new GeoPoint(bottom,right);
  GeoBoundingBoxQueryBuilder builder=new GeoBoundingBoxQueryBuilder(fieldName);
  builder.setCorners(topLeft,bottomRight);
  builder.queryName(queryName);
  builder.boost(boost);
  builder.type(GeoExecType.fromString(type));
  builder.ignoreUnmapped(ignoreUnmapped);
  if (validationMethod != null) {
    builder.setValidationMethod(validationMethod);
  }
 else {
    builder.setValidationMethod(GeoValidationMethod.infer(coerce,ignoreMalformed));
  }
  return builder;
}
