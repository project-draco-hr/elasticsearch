{
  if (facets.isEmpty()) {
    cacheRecycler.pushDoubleIntMap(facets);
    return new InternalDoubleTermsFacet(facetName,comparatorType,size,ImmutableList.<InternalDoubleTermsFacet.DoubleEntry>of(),missing,total);
  }
 else {
    if (size < EntryPriorityQueue.LIMIT) {
      EntryPriorityQueue ordered=new EntryPriorityQueue(size,comparatorType.comparator());
      for (TDoubleIntIterator it=facets.iterator(); it.hasNext(); ) {
        it.advance();
        ordered.insertWithOverflow(new InternalDoubleTermsFacet.DoubleEntry(it.key(),it.value()));
      }
      InternalDoubleTermsFacet.DoubleEntry[] list=new InternalDoubleTermsFacet.DoubleEntry[ordered.size()];
      for (int i=ordered.size() - 1; i >= 0; i--) {
        list[i]=(InternalDoubleTermsFacet.DoubleEntry)ordered.pop();
      }
      cacheRecycler.pushDoubleIntMap(facets);
      return new InternalDoubleTermsFacet(facetName,comparatorType,size,Arrays.asList(list),missing,total);
    }
 else {
      BoundedTreeSet<InternalDoubleTermsFacet.DoubleEntry> ordered=new BoundedTreeSet<InternalDoubleTermsFacet.DoubleEntry>(comparatorType.comparator(),size);
      for (TDoubleIntIterator it=facets.iterator(); it.hasNext(); ) {
        it.advance();
        ordered.add(new InternalDoubleTermsFacet.DoubleEntry(it.key(),it.value()));
      }
      cacheRecycler.pushDoubleIntMap(facets);
      return new InternalDoubleTermsFacet(facetName,comparatorType,size,ordered,missing,total);
    }
  }
}
