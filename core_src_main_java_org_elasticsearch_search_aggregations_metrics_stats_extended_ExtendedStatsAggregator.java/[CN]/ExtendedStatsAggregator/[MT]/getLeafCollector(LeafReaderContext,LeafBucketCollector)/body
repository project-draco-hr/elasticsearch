{
  if (valuesSource == null) {
    return LeafBucketCollector.NO_OP_COLLECTOR;
  }
  final BigArrays bigArrays=context.bigArrays();
  final SortedNumericDoubleValues values=valuesSource.doubleValues(ctx);
  return new LeafBucketCollectorBase(sub,values){
    @Override public void collect(    int doc,    long bucket) throws IOException {
      if (bucket >= counts.size()) {
        final long from=counts.size();
        final long overSize=BigArrays.overSize(bucket + 1);
        counts=bigArrays.resize(counts,overSize);
        sums=bigArrays.resize(sums,overSize);
        mins=bigArrays.resize(mins,overSize);
        maxes=bigArrays.resize(maxes,overSize);
        sumOfSqrs=bigArrays.resize(sumOfSqrs,overSize);
        mins.fill(from,overSize,Double.POSITIVE_INFINITY);
        maxes.fill(from,overSize,Double.NEGATIVE_INFINITY);
      }
      values.setDocument(doc);
      final int valuesCount=values.count();
      counts.increment(bucket,valuesCount);
      double sum=0;
      double sumOfSqr=0;
      double min=mins.get(bucket);
      double max=maxes.get(bucket);
      for (int i=0; i < valuesCount; i++) {
        double value=values.valueAt(i);
        sum+=value;
        sumOfSqr+=value * value;
        min=Math.min(min,value);
        max=Math.max(max,value);
      }
      sums.increment(bucket,sum);
      sumOfSqrs.increment(bucket,sumOfSqr);
      mins.set(bucket,min);
      maxes.set(bucket,max);
    }
  }
;
}
