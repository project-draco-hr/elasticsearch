{
switch (InternalExtendedStats.Metrics.resolve(name)) {
case count:
    return valuesSource == null ? 0 : counts.get(owningBucketOrd);
case sum:
  return valuesSource == null ? 0 : sums.get(owningBucketOrd);
case min:
return valuesSource == null ? Double.POSITIVE_INFINITY : mins.get(owningBucketOrd);
case max:
return valuesSource == null ? Double.NEGATIVE_INFINITY : maxes.get(owningBucketOrd);
case avg:
return valuesSource == null ? Double.NaN : sums.get(owningBucketOrd) / counts.get(owningBucketOrd);
case sum_of_squares:
return valuesSource == null ? 0 : sumOfSqrs.get(owningBucketOrd);
case variance:
return valuesSource == null ? Double.NaN : variance(owningBucketOrd);
case std_deviation:
return valuesSource == null ? Double.NaN : Math.sqrt(variance(owningBucketOrd));
case std_upper:
if (valuesSource == null) {
return Double.NaN;
}
return (sums.get(owningBucketOrd) / counts.get(owningBucketOrd)) + (Math.sqrt(variance(owningBucketOrd)) * this.sigma);
case std_lower:
if (valuesSource == null) {
return Double.NaN;
}
return (sums.get(owningBucketOrd) / counts.get(owningBucketOrd)) - (Math.sqrt(variance(owningBucketOrd)) * this.sigma);
default :
throw new IllegalArgumentException("Unknown value [" + name + "] in common stats aggregation");
}
}
