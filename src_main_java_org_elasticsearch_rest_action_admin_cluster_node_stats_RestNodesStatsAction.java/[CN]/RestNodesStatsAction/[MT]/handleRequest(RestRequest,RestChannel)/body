{
  String[] nodesIds=Strings.splitStringByCommaToArray(request.param("nodeId"));
  NodesStatsRequest nodesStatsRequest=new NodesStatsRequest(nodesIds);
  boolean clear=request.paramAsBoolean("clear",false);
  if (clear) {
    nodesStatsRequest.clear();
  }
  boolean all=request.paramAsBoolean("all",false);
  if (all) {
    nodesStatsRequest.all();
  }
  if (request.hasParam("indices")) {
    nodesStatsRequest.indices(request.paramAsBoolean("indices",false));
  }
  nodesStatsRequest.os(request.paramAsBoolean("os",nodesStatsRequest.os()));
  nodesStatsRequest.process(request.paramAsBoolean("process",nodesStatsRequest.process()));
  nodesStatsRequest.jvm(request.paramAsBoolean("jvm",nodesStatsRequest.jvm()));
  nodesStatsRequest.threadPool(request.paramAsBoolean("thread_pool",nodesStatsRequest.threadPool()));
  nodesStatsRequest.network(request.paramAsBoolean("network",nodesStatsRequest.network()));
  nodesStatsRequest.fs(request.paramAsBoolean("fs",nodesStatsRequest.fs()));
  nodesStatsRequest.transport(request.paramAsBoolean("transport",nodesStatsRequest.transport()));
  nodesStatsRequest.http(request.paramAsBoolean("http",nodesStatsRequest.http()));
  nodesStatsRequest.breaker(request.paramAsBoolean("breaker",nodesStatsRequest.breaker()));
  executeNodeStats(request,channel,nodesStatsRequest);
}
