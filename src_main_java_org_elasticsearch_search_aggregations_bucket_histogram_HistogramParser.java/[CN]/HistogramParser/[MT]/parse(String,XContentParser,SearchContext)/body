{
  ValuesSourceConfig<NumericValuesSource> config=new ValuesSourceConfig<NumericValuesSource>(NumericValuesSource.class);
  String field=null;
  String script=null;
  String scriptLang=null;
  Map<String,Object> scriptParams=null;
  boolean keyed=false;
  boolean emptyBuckets=false;
  InternalOrder order=(InternalOrder)InternalOrder.KEY_ASC;
  long interval=-1;
  boolean assumeSorted=false;
  String format=null;
  XContentParser.Token token;
  String currentFieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.VALUE_STRING) {
      if ("field".equals(currentFieldName)) {
        field=parser.text();
      }
 else       if ("script".equals(currentFieldName)) {
        script=parser.text();
      }
 else       if ("script_lang".equals(currentFieldName) || "scriptLang".equals(currentFieldName)) {
        scriptLang=parser.text();
      }
 else       if ("format".equals(currentFieldName)) {
        format=parser.text();
      }
    }
 else     if (token == XContentParser.Token.VALUE_NUMBER) {
      if ("interval".equals(currentFieldName)) {
        interval=parser.longValue();
      }
    }
 else     if (token == XContentParser.Token.VALUE_BOOLEAN) {
      if ("keyed".equals(currentFieldName)) {
        keyed=parser.booleanValue();
      }
 else       if ("empty_buckets".equals(currentFieldName) || "emptyBuckets".equals(currentFieldName)) {
        emptyBuckets=parser.booleanValue();
      }
 else       if ("script_values_sorted".equals(currentFieldName)) {
        assumeSorted=parser.booleanValue();
      }
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("params".equals(currentFieldName)) {
        scriptParams=parser.map();
      }
 else       if ("order".equals(currentFieldName)) {
        while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
          if (token == XContentParser.Token.FIELD_NAME) {
            currentFieldName=parser.currentName();
          }
 else           if (token == XContentParser.Token.VALUE_STRING) {
            String dir=parser.text();
            boolean asc="asc".equals(dir);
            order=resolveOrder(currentFieldName,asc);
          }
        }
      }
    }
  }
  if (interval < 0) {
    throw new SearchParseException(context,"Missing required field [interval] for histogram aggregation [" + aggregationName + "]");
  }
  Rounding rounding=new Rounding.Interval(interval);
  if (script != null) {
    config.script(context.scriptService().search(context.lookup(),scriptLang,script,scriptParams));
  }
  if (!assumeSorted) {
    config.ensureSorted(true);
  }
  if (field == null) {
    return new HistogramAggregator.Factory(aggregationName,config,rounding,order,keyed,emptyBuckets,InternalHistogram.FACTORY);
  }
  FieldMapper<?> mapper=context.smartNameFieldMapper(field);
  if (mapper == null) {
    config.unmapped(true);
    return new HistogramAggregator.Factory(aggregationName,config,rounding,order,keyed,emptyBuckets,InternalHistogram.FACTORY);
  }
  IndexFieldData<?> indexFieldData=context.fieldData().getForField(mapper);
  config.fieldContext(new FieldContext(field,indexFieldData));
  if (format != null) {
    config.formatter(new ValueFormatter.Number.Pattern(format));
  }
  return new HistogramAggregator.Factory(aggregationName,config,rounding,order,keyed,emptyBuckets,InternalHistogram.FACTORY);
}
