{
  PropertyPlaceholder propertyPlaceholder=new PropertyPlaceholder("${","}",false);
  PropertyPlaceholder.PlaceholderResolver placeholderResolver=new PropertyPlaceholder.PlaceholderResolver(){
    @Override public String resolvePlaceholder(    String placeholderName){
      if (placeholderName.startsWith("env.")) {
        return System.getenv(placeholderName.substring("env.".length()));
      }
      String value=System.getProperty(placeholderName);
      if (value != null) {
        return value;
      }
      value=System.getenv(placeholderName);
      if (value != null) {
        return value;
      }
      return map.get(placeholderName);
    }
    @Override public boolean shouldIgnoreMissing(    String placeholderName){
      if (placeholderName.startsWith("env.")) {
        return true;
      }
      return false;
    }
  }
;
  for (  Map.Entry<String,String> entry : Maps.newHashMap(map).entrySet()) {
    String possiblePlaceholder=entry.getValue();
    boolean ignored=false;
    for (    String ignoredValue : ignoredValues) {
      if (ignoredValue.equals(possiblePlaceholder)) {
        ignored=true;
        break;
      }
    }
    if (ignored) {
      continue;
    }
    String value=propertyPlaceholder.replacePlaceholders(possiblePlaceholder,placeholderResolver);
    if (Strings.hasLength(value)) {
      map.put(entry.getKey(),value);
    }
 else {
      map.remove(entry.getKey());
    }
  }
  return this;
}
