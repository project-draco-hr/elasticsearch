{
  Random random=getRandom();
  int numDocs=100 + random.nextInt(1000);
  int numOrdinals=1 + random.nextInt(200);
  int numValues=100 + random.nextInt(100000);
  OrdinalsBuilder builder=new OrdinalsBuilder(numDocs);
  Set<OrdAndId> ordsAndIdSet=new HashSet<>();
  for (int i=0; i < numValues; i++) {
    ordsAndIdSet.add(new OrdAndId(random.nextInt(numOrdinals),random.nextInt(numDocs)));
  }
  List<OrdAndId> ordsAndIds=new ArrayList<>(ordsAndIdSet);
  Collections.sort(ordsAndIds,new Comparator<OrdAndId>(){
    @Override public int compare(    OrdAndId o1,    OrdAndId o2){
      if (o1.ord < o2.ord) {
        return -1;
      }
      if (o1.ord == o2.ord) {
        if (o1.id < o2.id) {
          return -1;
        }
        if (o1.id > o2.id) {
          return 1;
        }
        return 0;
      }
      return 1;
    }
  }
);
  long lastOrd=-1;
  for (  OrdAndId ordAndId : ordsAndIds) {
    if (lastOrd != ordAndId.ord) {
      lastOrd=ordAndId.ord;
      builder.nextOrdinal();
    }
    ordAndId.ord=builder.currentOrdinal();
    builder.addDoc(ordAndId.id);
  }
  Collections.sort(ordsAndIds,new Comparator<OrdAndId>(){
    @Override public int compare(    OrdAndId o1,    OrdAndId o2){
      if (o1.id < o2.id) {
        return -1;
      }
      if (o1.id == o2.id) {
        if (o1.ord < o2.ord) {
          return -1;
        }
        if (o1.ord > o2.ord) {
          return 1;
        }
        return 0;
      }
      return 1;
    }
  }
);
  Ordinals ords=creationMultiOrdinals(builder);
  RandomAccessOrds docs=ords.ordinals();
  final SortedDocValues singleOrds=MultiValueMode.MIN.select(docs,-1);
  int docId=ordsAndIds.get(0).id;
  List<Long> docOrds=new ArrayList<>();
  for (  OrdAndId ordAndId : ordsAndIds) {
    if (docId == ordAndId.id) {
      docOrds.add(ordAndId.ord);
    }
 else {
      if (!docOrds.isEmpty()) {
        assertThat((long)singleOrds.getOrd(docId),equalTo(docOrds.get(0)));
        docs.setDocument(docId);
        final int numOrds=docs.cardinality();
        assertThat(numOrds,equalTo(docOrds.size()));
        for (int i=0; i < numOrds; i++) {
          assertThat(docs.nextOrd(),equalTo(docOrds.get(i)));
        }
        final long[] array=new long[docOrds.size()];
        for (int i=0; i < array.length; i++) {
          array[i]=docOrds.get(i);
        }
        assertIter(docs,docId,array);
      }
      for (int i=docId + 1; i < ordAndId.id; i++) {
        assertThat((long)singleOrds.getOrd(i),equalTo(RandomAccessOrds.NO_MORE_ORDS));
      }
      docId=ordAndId.id;
      docOrds.clear();
      docOrds.add(ordAndId.ord);
    }
  }
}
