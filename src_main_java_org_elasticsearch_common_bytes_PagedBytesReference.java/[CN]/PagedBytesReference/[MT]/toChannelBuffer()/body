{
  if (length == 0) {
    return ChannelBuffers.EMPTY_BUFFER;
  }
  ChannelBuffer[] buffers;
  ChannelBuffer currentBuffer=null;
  BytesRef ref=new BytesRef();
  int pos=0;
  if (offset != 0) {
    int fragmentSize=Math.min(length,PAGE_SIZE - (offset % PAGE_SIZE));
    bytearray.get(offset,fragmentSize,ref);
    currentBuffer=ChannelBuffers.wrappedBuffer(ref.bytes,ref.offset,fragmentSize);
    pos+=fragmentSize;
  }
  if (pos == length && currentBuffer != null) {
    return currentBuffer;
  }
  int numBuffers=countRequiredBuffers((currentBuffer != null ? 1 : 0),length - pos);
  buffers=new ChannelBuffer[numBuffers];
  int bufferSlot=0;
  if (currentBuffer != null) {
    buffers[bufferSlot]=currentBuffer;
    bufferSlot++;
  }
  while (pos < length) {
    int remaining=length - pos;
    int bulkSize=(remaining > PAGE_SIZE) ? PAGE_SIZE : remaining;
    bytearray.get(offset + pos,bulkSize,ref);
    currentBuffer=ChannelBuffers.wrappedBuffer(ref.bytes,ref.offset,bulkSize);
    buffers[bufferSlot]=currentBuffer;
    bufferSlot++;
    pos+=bulkSize;
  }
  assert(numBuffers == bufferSlot);
  return ChannelBuffers.wrappedBuffer(length <= NIO_GATHERING_LIMIT,buffers);
}
