{
  if (refreshInterval.millis() != 0) {
    if (cachedDiscoNodes != null && (refreshInterval.millis() < 0 || (System.currentTimeMillis() - lastRefresh) < refreshInterval.millis())) {
      if (logger.isTraceEnabled())       logger.trace("using cache to retrieve node list");
      return cachedDiscoNodes;
    }
    lastRefresh=System.currentTimeMillis();
  }
  logger.debug("start building nodes list using Azure API");
  cachedDiscoNodes=Lists.newArrayList();
  Set<Instance> response=azureComputeService.instances();
  String ipAddress=null;
  try {
    InetAddress inetAddress=networkService.resolvePublishHostAddress(null);
    if (inetAddress != null) {
      ipAddress=inetAddress.getHostAddress();
    }
    if (logger.isTraceEnabled())     logger.trace("ipAddress found: [{}]",ipAddress);
  }
 catch (  IOException e) {
    if (logger.isTraceEnabled())     logger.trace("exception while finding ipAddress",e);
  }
  try {
    for (    Instance instance : response) {
      String networkAddress=null;
      if (host_type == HostType.PRIVATE_IP) {
        if (instance.getPrivateIp() != null) {
          if (logger.isTraceEnabled() && instance.getPrivateIp().equals(ipAddress)) {
            logger.trace("adding ourselves {}",ipAddress);
          }
          networkAddress=instance.getPrivateIp();
        }
 else {
          logger.trace("no private ip provided ignoring {}",instance.getName());
        }
      }
      if (host_type == HostType.PUBLIC_IP) {
        if (instance.getPublicIp() != null && instance.getPublicPort() != null) {
          networkAddress=instance.getPublicIp() + ":" + instance.getPublicPort();
        }
 else {
          logger.trace("no public ip provided ignoring {}",instance.getName());
        }
      }
      if (networkAddress == null) {
        throw new ElasticsearchIllegalArgumentException("can't find any " + host_type.name() + " address");
      }
 else {
        TransportAddress[] addresses=transportService.addressesFromString(networkAddress);
        logger.trace("adding {}, transport_address {}",networkAddress,addresses[0]);
        cachedDiscoNodes.add(new DiscoveryNode("#cloud-" + instance.getName(),addresses[0],version.minimumCompatibilityVersion()));
      }
    }
  }
 catch (  Throwable e) {
    logger.warn("Exception caught during discovery {} : {}",e.getClass().getName(),e.getMessage());
    logger.trace("Exception caught during discovery",e);
  }
  logger.debug("{} node(s) added",cachedDiscoNodes.size());
  logger.debug("using dynamic discovery nodes {}",cachedDiscoNodes);
  return cachedDiscoNodes;
}
