{
  super(settings);
  this.azureComputeService=azureComputeService;
  this.transportService=transportService;
  this.networkService=networkService;
  this.version=version;
  this.refreshInterval=componentSettings.getAsTime(Fields.REFRESH,settings.getAsTime("cloud.azure." + Fields.REFRESH,TimeValue.timeValueSeconds(0)));
  HostType tmpHostType;
  String strHostType=componentSettings.get(Fields.HOST_TYPE,settings.get("cloud.azure." + Fields.HOST_TYPE_DEPRECATED,HostType.PRIVATE_IP.name())).toUpperCase();
  try {
    tmpHostType=HostType.valueOf(strHostType);
  }
 catch (  IllegalArgumentException e) {
    logger.warn("wrong value for [{}]: [{}]. falling back to [{}]...",Fields.HOST_TYPE,strHostType,HostType.PRIVATE_IP.name().toLowerCase());
    tmpHostType=HostType.PRIVATE_IP;
  }
  this.hostType=tmpHostType;
  String portName=settings.get("cloud.azure." + Fields.PORT_NAME_DEPRECATED);
  if (portName != null) {
    logger.warn("setting [{}] has been deprecated. please replace with [{}].",Fields.PORT_NAME_DEPRECATED,Fields.ENDPOINT_NAME);
    this.publicEndpointName=portName;
  }
 else {
    this.publicEndpointName=componentSettings.get(Fields.ENDPOINT_NAME,"elasticsearch");
  }
  this.deploymentName=componentSettings.get(Fields.SERVICE_NAME,settings.get("cloud.azure." + Fields.SERVICE_NAME_DEPRECATED));
  this.deploymentSlot=DeploymentSlot.Production;
}
