{
  String path=System.getProperty(TESTS_BACKWARDS_COMPATIBILITY_PATH);
  if (path == null || path.isEmpty()) {
    throw new IllegalArgumentException("Invalid Backwards tests location path:" + path);
  }
  String version=System.getProperty(TESTS_BACKWARDS_COMPATIBILITY_VERSION);
  if (version == null || version.isEmpty()) {
    throw new IllegalArgumentException("Invalid Backwards tests version:" + version);
  }
  if (Version.fromString(version).before(Version.CURRENT.minimumCompatibilityVersion())) {
    throw new IllegalArgumentException("Backcompat elasticsearch version must be same major version as current. " + "backcompat: " + version + ", current: "+ Version.CURRENT.toString());
  }
  File dir;
  if (version == null || version.isEmpty()) {
    File[] subdirs=new File(path).listFiles(new FileFilter(){
      @Override public boolean accept(      File file){
        return file.getName().startsWith("elasticsearch-") && file.isDirectory();
      }
    }
);
    if (subdirs == null || subdirs.length == 0) {
      throw new IllegalArgumentException("Backwards dir " + path + " must be a directory, and contain elasticsearch releases");
    }
    dir=subdirs[randomInt(subdirs.length - 1)];
    version=dir.getName().substring("elasticsearch-".length());
  }
 else {
    dir=new File(path,"elasticsearch-" + version);
    if (!dir.exists()) {
      throw new IllegalArgumentException("Backwards tests location is missing: " + dir.getAbsolutePath());
    }
    if (!dir.isDirectory()) {
      throw new IllegalArgumentException("Backwards tests location is not a directory: " + dir.getAbsolutePath());
    }
  }
  Version v=Version.fromString(version);
  if (v == null) {
    throw new IllegalArgumentException("Backcompat elasticsearch version could not be parsed: " + version);
  }
  if (v.major != Version.CURRENT.major) {
    throw new IllegalArgumentException("Backcompat elasticsearch version must be same major version as current. " + "backcompat: " + version + ", current: "+ Version.CURRENT.toString());
  }
  return dir;
}
