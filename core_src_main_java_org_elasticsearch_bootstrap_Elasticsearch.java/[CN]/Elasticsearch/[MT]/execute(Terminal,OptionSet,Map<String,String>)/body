{
  if (options.nonOptionArguments().isEmpty() == false) {
    throw new UserException(ExitCodes.USAGE,"Positional arguments not allowed, found " + options.nonOptionArguments());
  }
  if (options.has(versionOption)) {
    if (options.has(daemonizeOption) || options.has(pidfileOption)) {
      throw new UserException(ExitCodes.USAGE,"Elasticsearch version option is mutually exclusive with any other option");
    }
    terminal.println("Version: " + org.elasticsearch.Version.CURRENT + ", Build: "+ Build.CURRENT.shortHash()+ "/"+ Build.CURRENT.date()+ ", JVM: "+ JvmInfo.jvmInfo().version());
    return;
  }
  final boolean daemonize=options.has(daemonizeOption);
  final Path pidFile=pidfileOption.value(options);
  final boolean quiet=options.has(quietOption);
  try {
    init(daemonize,pidFile,quiet,settings);
  }
 catch (  NodeValidationException e) {
    throw new UserException(ExitCodes.CONFIG,e.getMessage());
  }
}
