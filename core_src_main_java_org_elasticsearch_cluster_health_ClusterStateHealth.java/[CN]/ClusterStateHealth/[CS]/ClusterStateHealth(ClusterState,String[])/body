{
  RoutingTableValidation validation=clusterState.routingTable().validate(clusterState.metaData());
  validationFailures=validation.failures();
  numberOfNodes=clusterState.nodes().size();
  numberOfDataNodes=clusterState.nodes().dataNodes().size();
  for (  String index : concreteIndices) {
    IndexRoutingTable indexRoutingTable=clusterState.routingTable().index(index);
    IndexMetaData indexMetaData=clusterState.metaData().index(index);
    if (indexRoutingTable == null) {
      continue;
    }
    ClusterIndexHealth indexHealth=new ClusterIndexHealth(indexMetaData,indexRoutingTable);
    indices.put(indexHealth.getIndex(),indexHealth);
  }
  status=ClusterHealthStatus.GREEN;
  for (  ClusterIndexHealth indexHealth : indices.values()) {
    activePrimaryShards+=indexHealth.getActivePrimaryShards();
    activeShards+=indexHealth.getActiveShards();
    relocatingShards+=indexHealth.getRelocatingShards();
    initializingShards+=indexHealth.getInitializingShards();
    unassignedShards+=indexHealth.getUnassignedShards();
    if (indexHealth.getStatus() == ClusterHealthStatus.RED) {
      status=ClusterHealthStatus.RED;
    }
 else     if (indexHealth.getStatus() == ClusterHealthStatus.YELLOW && status != ClusterHealthStatus.RED) {
      status=ClusterHealthStatus.YELLOW;
    }
  }
  if (!validationFailures.isEmpty()) {
    status=ClusterHealthStatus.RED;
  }
 else   if (clusterState.blocks().hasGlobalBlock(RestStatus.SERVICE_UNAVAILABLE)) {
    status=ClusterHealthStatus.RED;
  }
  if (status.equals(ClusterHealthStatus.GREEN)) {
    this.activeShardsPercent=100;
  }
 else {
    List<ShardRouting> shardRoutings=clusterState.getRoutingTable().allShards();
    int activeShardCount=0;
    int totalShardCount=0;
    for (    ShardRouting shardRouting : shardRoutings) {
      if (shardRouting.active())       activeShardCount++;
      totalShardCount++;
    }
    this.activeShardsPercent=(((double)activeShardCount) / totalShardCount) * 100;
  }
}
