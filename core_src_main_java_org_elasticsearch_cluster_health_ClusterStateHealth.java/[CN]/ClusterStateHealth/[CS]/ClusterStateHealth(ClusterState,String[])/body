{
  numberOfNodes=clusterState.nodes().getSize();
  numberOfDataNodes=clusterState.nodes().getDataNodes().size();
  for (  String index : concreteIndices) {
    IndexRoutingTable indexRoutingTable=clusterState.routingTable().index(index);
    IndexMetaData indexMetaData=clusterState.metaData().index(index);
    if (indexRoutingTable == null) {
      continue;
    }
    ClusterIndexHealth indexHealth=new ClusterIndexHealth(indexMetaData,indexRoutingTable);
    indices.put(indexHealth.getIndex(),indexHealth);
  }
  ClusterHealthStatus computeStatus=ClusterHealthStatus.GREEN;
  int computeActivePrimaryShards=0;
  int computeActiveShards=0;
  int computeRelocatingShards=0;
  int computeInitializingShards=0;
  int computeUnassignedShards=0;
  for (  ClusterIndexHealth indexHealth : indices.values()) {
    computeActivePrimaryShards+=indexHealth.getActivePrimaryShards();
    computeActiveShards+=indexHealth.getActiveShards();
    computeRelocatingShards+=indexHealth.getRelocatingShards();
    computeInitializingShards+=indexHealth.getInitializingShards();
    computeUnassignedShards+=indexHealth.getUnassignedShards();
    if (indexHealth.getStatus() == ClusterHealthStatus.RED) {
      computeStatus=ClusterHealthStatus.RED;
    }
 else     if (indexHealth.getStatus() == ClusterHealthStatus.YELLOW && computeStatus != ClusterHealthStatus.RED) {
      computeStatus=ClusterHealthStatus.YELLOW;
    }
  }
  if (clusterState.blocks().hasGlobalBlock(RestStatus.SERVICE_UNAVAILABLE)) {
    computeStatus=ClusterHealthStatus.RED;
  }
  this.status=computeStatus;
  this.activePrimaryShards=computeActivePrimaryShards;
  this.activeShards=computeActiveShards;
  this.relocatingShards=computeRelocatingShards;
  this.initializingShards=computeInitializingShards;
  this.unassignedShards=computeUnassignedShards;
  if (computeStatus.equals(ClusterHealthStatus.GREEN)) {
    this.activeShardsPercent=100;
  }
 else {
    List<ShardRouting> shardRoutings=clusterState.getRoutingTable().allShards();
    int activeShardCount=0;
    int totalShardCount=0;
    for (    ShardRouting shardRouting : shardRoutings) {
      if (shardRouting.active())       activeShardCount++;
      totalShardCount++;
    }
    this.activeShardsPercent=(((double)activeShardCount) / totalShardCount) * 100;
  }
}
