{
  int numFields=randomIntBetween(5,10);
  logger.info("Creating an index with multiple fields ...");
  XContentBuilder mapping=jsonBuilder().startObject().startObject("type1").startObject("properties");
  for (int i=0; i < numFields; i++) {
    mapping.startObject("field" + i).field("type","string").endObject();
  }
  mapping.endObject().endObject().endObject();
  assertAcked(prepareCreate("test").addMapping("type1",mapping).get());
  ensureGreen();
  logger.info("Indexing a single document ...");
  XContentBuilder doc=jsonBuilder().startObject();
  for (int i=0; i < numFields; i++) {
    doc.field("field" + i,generateRandomStringArray(5,10));
  }
  doc.endObject();
  List<IndexRequestBuilder> builders=new ArrayList<>();
  builders.add(client().prepareIndex("test","type1","1").setSource(doc));
  indexRandom(true,builders);
  logger.info("Checking the document matches ...");
  MoreLikeThisQueryBuilder mltQuery=moreLikeThisQuery().docs((Item)new Item().doc(doc).index("test").type("type1")).minTermFreq(0).minDocFreq(0).maxQueryTerms(100).percentTermsToMatch(1);
  SearchResponse response=client().prepareSearch("test").setTypes("type1").setQuery(mltQuery).get();
  assertSearchResponse(response);
  assertHitCount(response,1);
}
