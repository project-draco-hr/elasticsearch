{
  logger.info("Creating index test");
  assertAcked(prepareCreate("test").addMapping("type1",jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("text").field("type","string").endObject().endObject().endObject().endObject()));
  logger.info("Running Cluster Health");
  assertThat(ensureGreen(),equalTo(ClusterHealthStatus.GREEN));
  logger.info("Indexing...");
  String[] texts=new String[]{"Apache Lucene","free and open source","information retrieval","software library","programmed in Java","Doug Cutting","Apache Software Foundation","Apache Software License","Lucene programming languages","Delphi, Perl, C#, C++, Python, Ruby, and PHP"};
  List<IndexRequestBuilder> builders=new ArrayList<>(10);
  for (int i=0; i < texts.length; i++) {
    builders.add(client().prepareIndex("test","type1").setSource("text",texts[i]).setId(String.valueOf(i)));
  }
  indexRandom(true,builders);
  int iters=between(10,20);
  for (int j=0; j < iters; j++) {
    logger.info("Running MoreLikeThis DSL with IDs");
    String id=String.valueOf(getRandom().nextInt(texts.length));
    Client client=client();
    MoreLikeThisQueryBuilder queryBuilder=QueryBuilders.moreLikeThisQuery("text").ids(id).minTermFreq(1).minDocFreq(1);
    SearchResponse mltResponseDSL=client.prepareSearch().setSearchType(SearchType.QUERY_THEN_FETCH).setTypes("type1").setQuery(queryBuilder).setSize(texts.length).execute().actionGet();
    assertSearchResponse(mltResponseDSL);
    logger.info("Running MoreLikeThis API");
    MoreLikeThisRequest mltRequest=moreLikeThisRequest("test").type("type1").searchSize(texts.length).id(id).minTermFreq(1).minDocFreq(1);
    SearchResponse mltResponseAPI=client.moreLikeThis(mltRequest).actionGet();
    assertSearchResponse(mltResponseAPI);
    logger.info("Ensure the documents and scores returned are the same.");
    SearchHit[] hitsDSL=mltResponseDSL.getHits().hits();
    SearchHit[] hitsAPI=mltResponseAPI.getHits().hits();
    Comparator<SearchHit> cmp=new Comparator<SearchHit>(){
      @Override public int compare(      SearchHit o1,      SearchHit o2){
        if (Float.compare(o1.getScore(),o2.getScore()) == 0) {
          return o1.getId().compareTo(o2.getId());
        }
        return Float.compare(o1.getScore(),o2.getScore());
      }
    }
;
    ArrayUtil.timSort(hitsDSL,cmp);
    ArrayUtil.timSort(hitsAPI,cmp);
    assertThat("Not the same number of results.",hitsAPI.length,equalTo(hitsDSL.length));
    for (int i=0; i < hitsDSL.length; i++) {
      assertThat("Expected id: " + hitsDSL[i].getId() + " at position "+ i+ " but wasn't.",hitsAPI[i].getId(),equalTo(hitsDSL[i].getId()));
      assertThat("Expected score: " + hitsDSL[i].getScore() + " at position "+ i+ " but wasn't.",hitsAPI[i].getScore(),equalTo(hitsDSL[i].getScore()));
    }
  }
}
