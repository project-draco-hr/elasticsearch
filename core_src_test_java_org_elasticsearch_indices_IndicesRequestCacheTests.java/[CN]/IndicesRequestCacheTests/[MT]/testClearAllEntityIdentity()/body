{
  IndicesRequestCache cache=new IndicesRequestCache(Settings.EMPTY);
  AtomicBoolean indexShard=new AtomicBoolean(true);
  ShardRequestCache requestCacheStats=new ShardRequestCache();
  Directory dir=newDirectory();
  IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig());
  writer.addDocument(newDoc(0,"foo"));
  DirectoryReader reader=ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer),new ShardId("foo","bar",1));
  TermQueryBuilder termQuery=new TermQueryBuilder("id","0");
  TestEntity entity=new TestEntity(requestCacheStats,reader,indexShard,0);
  writer.updateDocument(new Term("id","0"),newDoc(0,"bar"));
  DirectoryReader secondReader=ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer),new ShardId("foo","bar",1));
  TestEntity secondEntity=new TestEntity(requestCacheStats,secondReader,indexShard,0);
  writer.updateDocument(new Term("id","0"),newDoc(0,"baz"));
  DirectoryReader thirdReader=ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer),new ShardId("foo","bar",1));
  AtomicBoolean differentIdentity=new AtomicBoolean(true);
  TestEntity thirddEntity=new TestEntity(requestCacheStats,thirdReader,differentIdentity,0);
  BytesReference value1=cache.getOrCompute(entity,reader,termQuery.buildAsBytes());
  assertEquals("foo",value1.toUtf8());
  BytesReference value2=cache.getOrCompute(secondEntity,secondReader,termQuery.buildAsBytes());
  assertEquals("bar",value2.toUtf8());
  logger.info("Memory size: {}",requestCacheStats.stats().getMemorySize());
  BytesReference value3=cache.getOrCompute(thirddEntity,thirdReader,termQuery.buildAsBytes());
  assertEquals("baz",value3.toUtf8());
  assertEquals(3,cache.count());
  final long hitCount=requestCacheStats.stats().getHitCount();
  cache.clear(randomFrom(entity,secondEntity));
  cache.cleanCache();
  assertEquals(1,cache.count());
  value3=cache.getOrCompute(thirddEntity,thirdReader,termQuery.buildAsBytes());
  assertEquals(hitCount + 1,requestCacheStats.stats().getHitCount());
  assertEquals("baz",value3.toUtf8());
  IOUtils.close(reader,secondReader,thirdReader,writer,dir,cache);
}
