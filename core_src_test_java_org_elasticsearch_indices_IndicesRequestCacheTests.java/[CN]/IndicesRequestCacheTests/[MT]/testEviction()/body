{
  final ByteSizeValue size;
{
    IndicesRequestCache cache=new IndicesRequestCache(Settings.EMPTY);
    AtomicBoolean indexShard=new AtomicBoolean(true);
    ShardRequestCache requestCacheStats=new ShardRequestCache();
    Directory dir=newDirectory();
    IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig());
    writer.addDocument(newDoc(0,"foo"));
    DirectoryReader reader=ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer),new ShardId("foo","bar",1));
    TermQueryBuilder termQuery=new TermQueryBuilder("id","0");
    TestEntity entity=new TestEntity(requestCacheStats,reader,indexShard,0);
    writer.updateDocument(new Term("id","0"),newDoc(0,"bar"));
    DirectoryReader secondReader=ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer),new ShardId("foo","bar",1));
    TestEntity secondEntity=new TestEntity(requestCacheStats,secondReader,indexShard,0);
    BytesReference value1=cache.getOrCompute(entity,reader,termQuery.buildAsBytes());
    assertEquals("foo",value1.streamInput().readString());
    BytesReference value2=cache.getOrCompute(secondEntity,secondReader,termQuery.buildAsBytes());
    assertEquals("bar",value2.streamInput().readString());
    size=requestCacheStats.stats().getMemorySize();
    IOUtils.close(reader,secondReader,writer,dir,cache);
  }
  IndicesRequestCache cache=new IndicesRequestCache(Settings.builder().put(IndicesRequestCache.INDICES_CACHE_QUERY_SIZE.getKey(),size.bytes() + 1 + "b").build());
  AtomicBoolean indexShard=new AtomicBoolean(true);
  ShardRequestCache requestCacheStats=new ShardRequestCache();
  Directory dir=newDirectory();
  IndexWriter writer=new IndexWriter(dir,newIndexWriterConfig());
  writer.addDocument(newDoc(0,"foo"));
  DirectoryReader reader=ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer),new ShardId("foo","bar",1));
  TermQueryBuilder termQuery=new TermQueryBuilder("id","0");
  TestEntity entity=new TestEntity(requestCacheStats,reader,indexShard,0);
  writer.updateDocument(new Term("id","0"),newDoc(0,"bar"));
  DirectoryReader secondReader=ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer),new ShardId("foo","bar",1));
  TestEntity secondEntity=new TestEntity(requestCacheStats,secondReader,indexShard,0);
  writer.updateDocument(new Term("id","0"),newDoc(0,"baz"));
  DirectoryReader thirdReader=ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer),new ShardId("foo","bar",1));
  TestEntity thirddEntity=new TestEntity(requestCacheStats,thirdReader,indexShard,0);
  BytesReference value1=cache.getOrCompute(entity,reader,termQuery.buildAsBytes());
  assertEquals("foo",value1.streamInput().readString());
  BytesReference value2=cache.getOrCompute(secondEntity,secondReader,termQuery.buildAsBytes());
  assertEquals("bar",value2.streamInput().readString());
  logger.info("Memory size: {}",requestCacheStats.stats().getMemorySize());
  BytesReference value3=cache.getOrCompute(thirddEntity,thirdReader,termQuery.buildAsBytes());
  assertEquals("baz",value3.streamInput().readString());
  assertEquals(2,cache.count());
  assertEquals(1,requestCacheStats.stats().getEvictions());
  IOUtils.close(reader,secondReader,thirdReader,writer,dir,cache);
}
