{
  int numberOfAsyncOps=randomIntBetween(600,700);
  final CountDownLatch latch=new CountDownLatch(numberOfAsyncOps);
  final Set<Object> responses=Collections.newSetFromMap(new ConcurrentHashMap<>());
  assertAcked(prepareCreate(INDEX_NAME));
  ensureGreen();
  BulkProcessor bulkProcessor=BulkProcessor.builder(client(),new BulkProcessor.Listener(){
    @Override public void beforeBulk(    long executionId,    BulkRequest request){
    }
    @Override public void afterBulk(    long executionId,    BulkRequest request,    BulkResponse response){
      responses.add(response);
      latch.countDown();
    }
    @Override public void afterBulk(    long executionId,    BulkRequest request,    Throwable failure){
      responses.add(failure);
      latch.countDown();
    }
  }
).setBulkActions(1).setConcurrentRequests(randomIntBetween(0,100)).setBackoffPolicy(backoffPolicy).build();
  indexDocs(bulkProcessor,numberOfAsyncOps);
  latch.await(10,TimeUnit.SECONDS);
  bulkProcessor.close();
  assertThat(responses.size(),equalTo(numberOfAsyncOps));
  for (  Object response : responses) {
    if (response instanceof BulkResponse) {
      BulkResponse bulkResponse=(BulkResponse)response;
      for (      BulkItemResponse bulkItemResponse : bulkResponse.getItems()) {
        if (bulkItemResponse.isFailed()) {
          BulkItemResponse.Failure failure=bulkItemResponse.getFailure();
          Throwable rootCause=ExceptionsHelper.unwrapCause(failure.getCause());
          if (rootCause instanceof EsRejectedExecutionException) {
            if (rejectedExecutionExpected == false) {
              throw new AssertionError("Unexpected failure reason",rootCause);
            }
          }
 else {
            throw new AssertionError("Unexpected failure",rootCause);
          }
        }
      }
    }
 else {
      Throwable t=(Throwable)response;
      throw new AssertionError("Unexpected failure",t);
    }
  }
  client().admin().indices().refresh(new RefreshRequest()).get();
  Matcher<Long> searchResultCount;
  if (rejectedExecutionExpected) {
    searchResultCount=lessThanOrEqualTo((long)numberOfAsyncOps);
  }
 else {
    searchResultCount=equalTo((long)numberOfAsyncOps);
  }
  SearchResponse results=client().prepareSearch(INDEX_NAME).setTypes(TYPE_NAME).setQuery(QueryBuilders.matchAllQuery()).setSize(0).get();
  assertThat(results.getHits().totalHits(),searchResultCount);
}
