{
  String mappingBefore=jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("copy_test").field("type","string").array("copy_to","foo","bar").endObject().endObject().endObject().endObject().string();
  String mappingAfter=jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("copy_test").field("type","string").array("copy_to","baz","bar").endObject().endObject().endObject().endObject().string();
  DocumentMapper docMapperBefore=MapperTestUtils.newParser().parse(mappingBefore);
  ImmutableList<AbstractFieldMapper.CopyToField> fields=docMapperBefore.mappers().name("copy_test").mapper().copyTo().copyToFields();
  assertThat(fields.size(),equalTo(2));
  assertThat(fields.get(0).field(),equalTo("foo"));
  assertThat(fields.get(1).field(),equalTo("bar"));
  DocumentMapper docMapperAfter=MapperTestUtils.newParser().parse(mappingAfter);
  DocumentMapper.MergeResult mergeResult=docMapperBefore.merge(docMapperAfter,mergeFlags().simulate(true));
  assertThat(Arrays.toString(mergeResult.conflicts()),mergeResult.hasConflicts(),equalTo(false));
  docMapperBefore.merge(docMapperAfter,mergeFlags().simulate(false));
  fields=docMapperBefore.mappers().name("copy_test").mapper().copyTo().copyToFields();
  assertThat(fields.size(),equalTo(2));
  assertThat(fields.get(0).field(),equalTo("baz"));
  assertThat(fields.get(1).field(),equalTo("bar"));
}
