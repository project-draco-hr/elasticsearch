{
  IndexMetaData metaData=newIndexMeta("index",Settings.settingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED,Version.CURRENT).put(SearchSlowLog.INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_TRACE_SETTING.getKey(),"100ms").put(SearchSlowLog.INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_DEBUG_SETTING.getKey(),"200ms").put(SearchSlowLog.INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_INFO_SETTING.getKey(),"300ms").put(SearchSlowLog.INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_WARN_SETTING.getKey(),"400ms").build());
  IndexSettings settings=new IndexSettings(metaData,Settings.EMPTY);
  SearchSlowLog log=new SearchSlowLog(settings);
  assertEquals(TimeValue.timeValueMillis(100).nanos(),log.getQueryTraceThreshold());
  assertEquals(TimeValue.timeValueMillis(200).nanos(),log.getQueryDebugThreshold());
  assertEquals(TimeValue.timeValueMillis(300).nanos(),log.getQueryInfoThreshold());
  assertEquals(TimeValue.timeValueMillis(400).nanos(),log.getQueryWarnThreshold());
  settings.updateIndexMetaData(newIndexMeta("index",Settings.builder().put(SearchSlowLog.INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_TRACE_SETTING.getKey(),"120ms").put(SearchSlowLog.INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_DEBUG_SETTING.getKey(),"220ms").put(SearchSlowLog.INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_INFO_SETTING.getKey(),"320ms").put(SearchSlowLog.INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_WARN_SETTING.getKey(),"420ms").build()));
  assertEquals(TimeValue.timeValueMillis(120).nanos(),log.getQueryTraceThreshold());
  assertEquals(TimeValue.timeValueMillis(220).nanos(),log.getQueryDebugThreshold());
  assertEquals(TimeValue.timeValueMillis(320).nanos(),log.getQueryInfoThreshold());
  assertEquals(TimeValue.timeValueMillis(420).nanos(),log.getQueryWarnThreshold());
  metaData=newIndexMeta("index",Settings.settingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED,Version.CURRENT).build());
  settings.updateIndexMetaData(metaData);
  assertEquals(TimeValue.timeValueMillis(-1).nanos(),log.getQueryTraceThreshold());
  assertEquals(TimeValue.timeValueMillis(-1).nanos(),log.getQueryDebugThreshold());
  assertEquals(TimeValue.timeValueMillis(-1).nanos(),log.getQueryInfoThreshold());
  assertEquals(TimeValue.timeValueMillis(-1).nanos(),log.getQueryWarnThreshold());
  settings=new IndexSettings(metaData,Settings.EMPTY);
  log=new SearchSlowLog(settings);
  assertEquals(TimeValue.timeValueMillis(-1).nanos(),log.getQueryTraceThreshold());
  assertEquals(TimeValue.timeValueMillis(-1).nanos(),log.getQueryDebugThreshold());
  assertEquals(TimeValue.timeValueMillis(-1).nanos(),log.getQueryInfoThreshold());
  assertEquals(TimeValue.timeValueMillis(-1).nanos(),log.getQueryWarnThreshold());
  try {
    settings.updateIndexMetaData(newIndexMeta("index",Settings.builder().put(SearchSlowLog.INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_TRACE_SETTING.getKey(),"NOT A TIME VALUE").build()));
    fail();
  }
 catch (  IllegalArgumentException ex) {
    assertEquals(ex.getMessage(),"Failed to parse setting [index.search.slowlog.threshold.query.trace] with value [NOT A TIME VALUE] as a time value: unit is missing or unrecognized");
  }
  try {
    settings.updateIndexMetaData(newIndexMeta("index",Settings.builder().put(SearchSlowLog.INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_DEBUG_SETTING.getKey(),"NOT A TIME VALUE").build()));
    fail();
  }
 catch (  IllegalArgumentException ex) {
    assertEquals(ex.getMessage(),"Failed to parse setting [index.search.slowlog.threshold.query.debug] with value [NOT A TIME VALUE] as a time value: unit is missing or unrecognized");
  }
  try {
    settings.updateIndexMetaData(newIndexMeta("index",Settings.builder().put(SearchSlowLog.INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_INFO_SETTING.getKey(),"NOT A TIME VALUE").build()));
    fail();
  }
 catch (  IllegalArgumentException ex) {
    assertEquals(ex.getMessage(),"Failed to parse setting [index.search.slowlog.threshold.query.info] with value [NOT A TIME VALUE] as a time value: unit is missing or unrecognized");
  }
  try {
    settings.updateIndexMetaData(newIndexMeta("index",Settings.builder().put(SearchSlowLog.INDEX_SEARCH_SLOWLOG_THRESHOLD_QUERY_WARN_SETTING.getKey(),"NOT A TIME VALUE").build()));
    fail();
  }
 catch (  IllegalArgumentException ex) {
    assertEquals(ex.getMessage(),"Failed to parse setting [index.search.slowlog.threshold.query.warn] with value [NOT A TIME VALUE] as a time value: unit is missing or unrecognized");
  }
}
