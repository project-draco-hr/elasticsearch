{
  String suggestionName=randomAsciiOfLength(10);
  CompletionSuggestionBuilder context=SuggestBuilders.completionSuggestion(FIELD).text(suggest).size(hits.length + 1).contexts(new CompletionSuggestionBuilder.Contexts2x().addCategory("st",Long.toString(prefix)));
  SearchResponse suggestResponse=client().prepareSearch(INDEX).suggest(new SuggestBuilder().addSuggestion(suggestionName,context)).execute().actionGet();
  ArrayList<String> suggestions=new ArrayList<>();
  Suggest suggest2=suggestResponse.getSuggest();
  assertTrue(suggest2.iterator().hasNext());
  for (  Suggestion<? extends Entry<? extends Option>> s : suggest2) {
    CompletionSuggestion suggestion=(CompletionSuggestion)s;
    for (    CompletionSuggestion.Entry entry : suggestion) {
      List<CompletionSuggestion.Entry.Option> options=entry.getOptions();
      for (      CompletionSuggestion.Entry.Option option : options) {
        Map<String,Object> payload=option.getPayloadAsMap();
        int group=(Integer)payload.get("group");
        String text=option.getText().string();
        assertEquals(prefix,group);
        suggestions.add(text);
      }
    }
  }
  assertSuggestionsMatch(suggestions,hits);
}
