{
  MultiTermQueryBuilder<?> multiTermQueryBuilder;
switch (RandomInts.randomIntBetween(r,0,5)) {
case 0:
    RangeQueryBuilder stringRangeQuery=new RangeQueryBuilder(AbstractQueryTestCase.STRING_FIELD_NAME);
  stringRangeQuery.from("a" + RandomStrings.randomAsciiOfLengthBetween(r,1,10));
stringRangeQuery.to("z" + RandomStrings.randomAsciiOfLengthBetween(r,1,10));
multiTermQueryBuilder=stringRangeQuery;
break;
case 1:
RangeQueryBuilder numericRangeQuery=new RangeQueryBuilder(AbstractQueryTestCase.INT_FIELD_NAME);
numericRangeQuery.from(RandomInts.randomIntBetween(r,1,100));
numericRangeQuery.to(RandomInts.randomIntBetween(r,101,200));
multiTermQueryBuilder=numericRangeQuery;
break;
case 2:
multiTermQueryBuilder=new FuzzyQueryBuilder(AbstractQueryTestCase.INT_FIELD_NAME,RandomInts.randomInt(r,1000));
break;
case 3:
multiTermQueryBuilder=new FuzzyQueryBuilder(AbstractQueryTestCase.STRING_FIELD_NAME,RandomStrings.randomAsciiOfLengthBetween(r,1,10));
break;
case 4:
multiTermQueryBuilder=new PrefixQueryBuilderTests().createTestQueryBuilder();
break;
case 5:
multiTermQueryBuilder=new WildcardQueryBuilderTests().createTestQueryBuilder();
break;
default :
throw new UnsupportedOperationException();
}
if (r.nextBoolean()) {
multiTermQueryBuilder.boost(2.0f / RandomInts.randomIntBetween(r,1,20));
}
return multiTermQueryBuilder;
}
