{
  checkTypeName(other);
  boolean indexed=indexOptions() != IndexOptions.NONE;
  boolean mergeWithIndexed=other.indexOptions() != IndexOptions.NONE;
  if (indexed != mergeWithIndexed || tokenized() != other.tokenized()) {
    conflicts.add("mapper [" + name() + "] has different [index] values");
  }
  if (stored() != other.stored()) {
    conflicts.add("mapper [" + name() + "] has different [store] values");
  }
  if (hasDocValues() == false && other.hasDocValues()) {
    conflicts.add("mapper [" + name() + "] has different [doc_values] values, cannot change from disabled to enabled");
  }
  if (omitNorms() && !other.omitNorms()) {
    conflicts.add("mapper [" + name() + "] has different [omit_norms] values, cannot change from disable to enabled");
  }
  if (storeTermVectors() != other.storeTermVectors()) {
    conflicts.add("mapper [" + name() + "] has different [store_term_vector] values");
  }
  if (storeTermVectorOffsets() != other.storeTermVectorOffsets()) {
    conflicts.add("mapper [" + name() + "] has different [store_term_vector_offsets] values");
  }
  if (storeTermVectorPositions() != other.storeTermVectorPositions()) {
    conflicts.add("mapper [" + name() + "] has different [store_term_vector_positions] values");
  }
  if (storeTermVectorPayloads() != other.storeTermVectorPayloads()) {
    conflicts.add("mapper [" + name() + "] has different [store_term_vector_payloads] values");
  }
  if (indexAnalyzer() == null || "default".equals(indexAnalyzer().name())) {
    if (other.indexAnalyzer() != null && "default".equals(other.indexAnalyzer().name()) == false) {
      conflicts.add("mapper [" + name() + "] has different [analyzer]");
    }
  }
 else   if (other.indexAnalyzer() == null || "default".equals(other.indexAnalyzer().name())) {
    conflicts.add("mapper [" + name() + "] has different [analyzer]");
  }
 else   if (indexAnalyzer().name().equals(other.indexAnalyzer().name()) == false) {
    conflicts.add("mapper [" + name() + "] has different [analyzer]");
  }
  if (Objects.equals(similarity(),other.similarity()) == false) {
    conflicts.add("mapper [" + name() + "] has different [similarity]");
  }
  if (strict) {
    if (omitNorms() != other.omitNorms()) {
      conflicts.add("mapper [" + name() + "] is used by multiple types. Set update_all_types to true to update [omit_norms] across all types.");
    }
    if (boost() != other.boost()) {
      conflicts.add("mapper [" + name() + "] is used by multiple types. Set update_all_types to true to update [boost] across all types.");
    }
    if (normsLoading() != other.normsLoading()) {
      conflicts.add("mapper [" + name() + "] is used by multiple types. Set update_all_types to true to update [norms.loading] across all types.");
    }
    if (Objects.equals(searchAnalyzer(),other.searchAnalyzer()) == false) {
      conflicts.add("mapper [" + name() + "] is used by multiple types. Set update_all_types to true to update [search_analyzer] across all types.");
    }
    if (Objects.equals(searchQuoteAnalyzer(),other.searchQuoteAnalyzer()) == false) {
      conflicts.add("mapper [" + name() + "] is used by multiple types. Set update_all_types to true to update [search_quote_analyzer] across all types.");
    }
    if (Objects.equals(fieldDataType(),other.fieldDataType()) == false) {
      conflicts.add("mapper [" + name() + "] is used by multiple types. Set update_all_types to true to update [fielddata] across all types.");
    }
    if (Objects.equals(nullValue(),other.nullValue()) == false) {
      conflicts.add("mapper [" + name() + "] is used by multiple types. Set update_all_types to true to update [null_value] across all types.");
    }
  }
}
