{
  System.setProperty("es.logger.prefix","");
  final ESLogger logger=ESLoggerFactory.getLogger("benchmark");
  logger.info("--> loading process probe");
  ProcessProbe probe=ProcessProbe.getInstance();
  logger.info("--> warming up...");
  for (int i=0; i < ITERATIONS; i++) {
    probe.getOpenFileDescriptorCount();
    probe.getMaxFileDescriptorCount();
    probe.getTotalVirtualMemorySize();
    probe.getProcessCpuPercent();
    probe.getProcessCpuTotalTime();
  }
  logger.info("--> warmed up");
  logger.info("--> testing 'getOpenFileDescriptorCount' method...");
  long start=System.currentTimeMillis();
  for (int i=0; i < ITERATIONS; i++) {
    probe.getOpenFileDescriptorCount();
  }
  long elapsed=System.currentTimeMillis() - start;
  logger.info("--> total [{}] ms, avg [{}] ms",elapsed,(elapsed / (double)ITERATIONS));
  logger.info("--> testing 'getMaxFileDescriptorCount' method...");
  start=System.currentTimeMillis();
  for (int i=0; i < ITERATIONS; i++) {
    probe.getMaxFileDescriptorCount();
  }
  elapsed=System.currentTimeMillis() - start;
  logger.info("--> total [{}] ms, avg [{}] ms",elapsed,(elapsed / (double)ITERATIONS));
  logger.info("--> testing 'getTotalVirtualMemorySize' method...");
  start=System.currentTimeMillis();
  for (int i=0; i < ITERATIONS; i++) {
    probe.getTotalVirtualMemorySize();
  }
  elapsed=System.currentTimeMillis() - start;
  logger.info("--> total [{}] ms, avg [{}] ms",elapsed,(elapsed / (double)ITERATIONS));
  logger.info("--> testing 'getProcessCpuPercent' method...");
  start=System.currentTimeMillis();
  for (int i=0; i < ITERATIONS; i++) {
    probe.getProcessCpuPercent();
  }
  elapsed=System.currentTimeMillis() - start;
  logger.info("--> total [{}] ms, avg [{}] ms",elapsed,(elapsed / (double)ITERATIONS));
  logger.info("--> testing 'getProcessCpuTotalTime' method...");
  start=System.currentTimeMillis();
  for (int i=0; i < ITERATIONS; i++) {
    probe.getProcessCpuTotalTime();
  }
  elapsed=System.currentTimeMillis() - start;
  logger.info("--> total [{}] ms, avg [{}] ms",elapsed,(elapsed / (double)ITERATIONS));
  logger.info("--> calculating process CPU user time with 'getAllThreadIds + getThreadUserTime' methods...");
  final ThreadMXBean threadMxBean=ManagementFactory.getThreadMXBean();
  final long[] threadIds=threadMxBean.getAllThreadIds();
  long sum=0;
  start=System.currentTimeMillis();
  for (int i=0; i < ITERATIONS; i++) {
    for (    long threadId : threadIds) {
      sum+=threadMxBean.getThreadUserTime(threadId);
    }
  }
  elapsed=System.currentTimeMillis() - start;
  logger.info("--> execution time [total: {} ms, avg: {} ms] for {} iterations with average result of {}",elapsed,(elapsed / (double)ITERATIONS),ITERATIONS,(sum / (double)ITERATIONS));
  if (threadMxBean instanceof com.sun.management.ThreadMXBean) {
    logger.info("--> calculating process CPU user time with 'getAllThreadIds + getThreadUserTime(long[])' methods...");
    final com.sun.management.ThreadMXBean threadMxBean2=(com.sun.management.ThreadMXBean)threadMxBean;
    sum=0;
    start=System.currentTimeMillis();
    for (int i=0; i < ITERATIONS; i++) {
      long[] user=threadMxBean2.getThreadUserTime(threadIds);
      for (int n=0; n != threadIds.length; ++n) {
        sum+=user[n];
      }
    }
    elapsed=System.currentTimeMillis() - start;
    logger.info("--> execution time [total: {} ms, avg: {} ms] for {} iterations with average result of {}",elapsed,(elapsed / (double)ITERATIONS),ITERATIONS,(sum / (double)ITERATIONS));
  }
}
