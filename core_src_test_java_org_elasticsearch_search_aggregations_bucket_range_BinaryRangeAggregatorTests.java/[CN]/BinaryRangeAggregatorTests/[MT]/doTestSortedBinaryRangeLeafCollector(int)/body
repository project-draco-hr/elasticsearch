{
  final Set<BytesRef> termSet=new HashSet<>();
  final int numTerms=TestUtil.nextInt(random(),maxNumValuesPerDoc,100);
  while (termSet.size() < numTerms) {
    termSet.add(new BytesRef(TestUtil.randomSimpleString(random(),randomInt(2))));
  }
  final BytesRef[] terms=termSet.toArray(new BytesRef[0]);
  Arrays.sort(terms);
  final int numRanges=randomIntBetween(1,10);
  BinaryRangeAggregator.Range[] ranges=new BinaryRangeAggregator.Range[numRanges];
  for (int i=0; i < numRanges; ++i) {
    ranges[i]=new BinaryRangeAggregator.Range(Integer.toString(i),randomBoolean() ? null : new BytesRef(TestUtil.randomSimpleString(random(),randomInt(2))),randomBoolean() ? null : new BytesRef(TestUtil.randomSimpleString(random(),randomInt(2))));
  }
  Arrays.sort(ranges,BinaryRangeAggregator.RANGE_COMPARATOR);
  FakeSortedBinaryDocValues values=new FakeSortedBinaryDocValues(terms);
  final int[] counts=new int[ranges.length];
  SortedBinaryRangeLeafCollector collector=new SortedBinaryRangeLeafCollector(values,ranges,null){
    @Override protected void doCollect(    LeafBucketCollector sub,    int doc,    long bucket) throws IOException {
      counts[(int)bucket]++;
    }
  }
;
  final int[] expectedCounts=new int[ranges.length];
  final int maxDoc=randomIntBetween(5,10);
  for (int doc=0; doc < maxDoc; ++doc) {
    LongHashSet ordinalSet=new LongHashSet();
    final int numValues=randomInt(maxNumValuesPerDoc);
    while (ordinalSet.size() < numValues) {
      ordinalSet.add(random().nextInt(terms.length));
    }
    final long[] ords=ordinalSet.toArray();
    Arrays.sort(ords);
    values.ords=ords;
    collector.collect(doc);
    for (int i=0; i < ranges.length; ++i) {
      for (      long ord : ords) {
        BytesRef term=terms[(int)ord];
        if ((ranges[i].from == null || ranges[i].from.compareTo(term) <= 0) && (ranges[i].to == null || ranges[i].to.compareTo(term) > 0)) {
          expectedCounts[i]++;
          break;
        }
      }
    }
  }
  assertArrayEquals(expectedCounts,counts);
}
