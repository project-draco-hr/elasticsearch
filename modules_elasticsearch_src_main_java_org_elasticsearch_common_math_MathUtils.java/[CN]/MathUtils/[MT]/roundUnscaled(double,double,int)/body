{
switch (roundingMethod) {
case BigDecimal.ROUND_CEILING:
    if (sign == -1) {
      unscaled=Math.floor(nextAfter(unscaled,Double.NEGATIVE_INFINITY));
    }
 else {
      unscaled=Math.ceil(nextAfter(unscaled,Double.POSITIVE_INFINITY));
    }
  break;
case BigDecimal.ROUND_DOWN:
unscaled=Math.floor(nextAfter(unscaled,Double.NEGATIVE_INFINITY));
break;
case BigDecimal.ROUND_FLOOR:
if (sign == -1) {
unscaled=Math.ceil(nextAfter(unscaled,Double.POSITIVE_INFINITY));
}
 else {
unscaled=Math.floor(nextAfter(unscaled,Double.NEGATIVE_INFINITY));
}
break;
case BigDecimal.ROUND_HALF_DOWN:
{
unscaled=nextAfter(unscaled,Double.NEGATIVE_INFINITY);
double fraction=unscaled - Math.floor(unscaled);
if (fraction > 0.5) {
unscaled=Math.ceil(unscaled);
}
 else {
unscaled=Math.floor(unscaled);
}
break;
}
case BigDecimal.ROUND_HALF_EVEN:
{
double fraction=unscaled - Math.floor(unscaled);
if (fraction > 0.5) {
unscaled=Math.ceil(unscaled);
}
 else if (fraction < 0.5) {
unscaled=Math.floor(unscaled);
}
 else {
if (Math.floor(unscaled) / 2.0 == Math.floor(Math.floor(unscaled) / 2.0)) {
unscaled=Math.floor(unscaled);
}
 else {
unscaled=Math.ceil(unscaled);
}
}
break;
}
case BigDecimal.ROUND_HALF_UP:
{
unscaled=nextAfter(unscaled,Double.POSITIVE_INFINITY);
double fraction=unscaled - Math.floor(unscaled);
if (fraction >= 0.5) {
unscaled=Math.ceil(unscaled);
}
 else {
unscaled=Math.floor(unscaled);
}
break;
}
case BigDecimal.ROUND_UNNECESSARY:
if (unscaled != Math.floor(unscaled)) {
throw new ArithmeticException("Inexact result from rounding");
}
break;
case BigDecimal.ROUND_UP:
unscaled=Math.ceil(nextAfter(unscaled,Double.POSITIVE_INFINITY));
break;
default :
throw MathRuntimeException.createIllegalArgumentException("invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4})," + " {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})",roundingMethod,"ROUND_CEILING",BigDecimal.ROUND_CEILING,"ROUND_DOWN",BigDecimal.ROUND_DOWN,"ROUND_FLOOR",BigDecimal.ROUND_FLOOR,"ROUND_HALF_DOWN",BigDecimal.ROUND_HALF_DOWN,"ROUND_HALF_EVEN",BigDecimal.ROUND_HALF_EVEN,"ROUND_HALF_UP",BigDecimal.ROUND_HALF_UP,"ROUND_UNNECESSARY",BigDecimal.ROUND_UNNECESSARY,"ROUND_UP",BigDecimal.ROUND_UP);
}
return unscaled;
}
