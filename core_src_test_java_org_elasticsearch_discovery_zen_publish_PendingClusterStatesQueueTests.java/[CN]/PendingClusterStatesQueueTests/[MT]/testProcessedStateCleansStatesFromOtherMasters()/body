{
  List<ClusterState> states=randomStates(scaledRandomIntBetween(10,300),"master1","master2","master3","master4");
  PendingClusterStatesQueue queue=createQueueWithStates(states);
  List<ClusterStateContext> committedContexts=randomCommitStates(queue);
  ClusterState randomCommitted=randomFrom(committedContexts).state;
  queue.markAsProcessed(randomCommitted);
  final String processedMaster=randomCommitted.nodes().getMasterNodeId();
  for (  ClusterStateContext context : queue.pendingStates) {
    final String pendingMaster=context.state.nodes().getMasterNodeId();
    assertThat("found a cluster state from [" + pendingMaster + "], after a state from ["+ processedMaster+ "] was processed",pendingMaster,equalTo(processedMaster));
  }
  for (  ClusterStateContext context : committedContexts) {
    if (context.state.nodes().getMasterNodeId().equals(processedMaster) == false) {
      assertThat(((MockListener)context.listener).failure,notNullValue());
    }
  }
}
