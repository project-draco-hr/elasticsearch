{
  DeleteRequest deleteRequest=new DeleteRequest(request.param("index"),request.param("type"),request.param("id"));
  deleteRequest.listenerThreaded(false);
  deleteRequest.operationThreaded(true);
  deleteRequest.routing(request.param("routing"));
  deleteRequest.parent(request.param("parent"));
  deleteRequest.timeout(request.paramAsTime("timeout",DeleteRequest.DEFAULT_TIMEOUT));
  deleteRequest.refresh(request.paramAsBoolean("refresh",deleteRequest.refresh()));
  deleteRequest.version(RestActions.parseVersion(request));
  deleteRequest.versionType(VersionType.fromString(request.param("version_type"),deleteRequest.versionType()));
  String replicationType=request.param("replication");
  if (replicationType != null) {
    deleteRequest.replicationType(ReplicationType.fromString(replicationType));
  }
  String consistencyLevel=request.param("consistency");
  if (consistencyLevel != null) {
    deleteRequest.consistencyLevel(WriteConsistencyLevel.fromString(consistencyLevel));
  }
  client.delete(deleteRequest,new RestBuilderListener<DeleteResponse>(channel){
    @Override public RestResponse buildResponse(    DeleteResponse result,    XContentBuilder builder) throws Exception {
      builder.startObject().field(Fields.FOUND,result.isFound()).field(Fields._INDEX,result.getIndex()).field(Fields._TYPE,result.getType()).field(Fields._ID,result.getId()).field(Fields._VERSION,result.getVersion()).endObject();
      RestStatus status=OK;
      if (!result.isFound()) {
        status=NOT_FOUND;
      }
      return new BytesRestResponse(status,builder);
    }
  }
);
}
