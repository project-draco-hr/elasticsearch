{
  XContentParser parser=parseContext.parser();
  XContentParser.Token token;
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  String queryName=null;
  String currentFieldName=null;
  GeoPoint point=new GeoPoint(Double.NaN,Double.NaN);
  String fieldName=null;
  Object vDistance=null;
  DistanceUnit unit=GeoDistanceQueryBuilder.DEFAULT_DISTANCE_UNIT;
  GeoDistance geoDistance=GeoDistanceQueryBuilder.DEFAULT_GEO_DISTANCE;
  String optimizeBbox=GeoDistanceQueryBuilder.DEFAULT_OPTIMIZE_BBOX;
  boolean coerce=GeoDistanceQueryBuilder.DEFAULT_COERCE;
  boolean ignoreMalformed=GeoDistanceQueryBuilder.DEFAULT_IGNORE_MALFORMED;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (parseContext.isDeprecatedSetting(currentFieldName)) {
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      fieldName=currentFieldName;
      GeoUtils.parseGeoPoint(parser,point);
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      String currentName=parser.currentName();
      fieldName=currentFieldName;
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          currentName=parser.currentName();
        }
 else         if (token.isValue()) {
          if (currentName.equals(GeoPointFieldMapper.Names.LAT)) {
            point.resetLat(parser.doubleValue());
          }
 else           if (currentName.equals(GeoPointFieldMapper.Names.LON)) {
            point.resetLon(parser.doubleValue());
          }
 else           if (currentName.equals(GeoPointFieldMapper.Names.GEOHASH)) {
            point.resetFromGeoHash(parser.text());
          }
 else {
            throw new ParsingException(parser.getTokenLocation(),"[geo_distance] query does not support [" + currentFieldName + "]");
          }
        }
      }
    }
 else     if (token.isValue()) {
      if ("distance".equals(currentFieldName)) {
        if (token == XContentParser.Token.VALUE_STRING) {
          vDistance=parser.text();
        }
 else {
          vDistance=parser.numberValue();
        }
      }
 else       if ("unit".equals(currentFieldName)) {
        unit=DistanceUnit.fromString(parser.text());
      }
 else       if ("distance_type".equals(currentFieldName) || "distanceType".equals(currentFieldName)) {
        geoDistance=GeoDistance.fromString(parser.text());
      }
 else       if (currentFieldName.endsWith(GeoPointFieldMapper.Names.LAT_SUFFIX)) {
        point.resetLat(parser.doubleValue());
        fieldName=currentFieldName.substring(0,currentFieldName.length() - GeoPointFieldMapper.Names.LAT_SUFFIX.length());
      }
 else       if (currentFieldName.endsWith(GeoPointFieldMapper.Names.LON_SUFFIX)) {
        point.resetLon(parser.doubleValue());
        fieldName=currentFieldName.substring(0,currentFieldName.length() - GeoPointFieldMapper.Names.LON_SUFFIX.length());
      }
 else       if (currentFieldName.endsWith(GeoPointFieldMapper.Names.GEOHASH_SUFFIX)) {
        point.resetFromGeoHash(parser.text());
        fieldName=currentFieldName.substring(0,currentFieldName.length() - GeoPointFieldMapper.Names.GEOHASH_SUFFIX.length());
      }
 else       if ("_name".equals(currentFieldName)) {
        queryName=parser.text();
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=parser.floatValue();
      }
 else       if ("optimize_bbox".equals(currentFieldName) || "optimizeBbox".equals(currentFieldName)) {
        optimizeBbox=parser.textOrNull();
      }
 else       if ("coerce".equals(currentFieldName) || ("normalize".equals(currentFieldName))) {
        coerce=parser.booleanValue();
        if (coerce == true) {
          ignoreMalformed=true;
        }
      }
 else       if ("ignore_malformed".equals(currentFieldName)) {
        ignoreMalformed=parser.booleanValue();
      }
 else {
        point.resetFromString(parser.text());
        fieldName=currentFieldName;
      }
    }
  }
  if (vDistance == null) {
    throw new ParsingException(parser.getTokenLocation(),"geo_distance requires 'distance' to be specified");
  }
  GeoDistanceQueryBuilder qb=new GeoDistanceQueryBuilder(fieldName);
  if (vDistance instanceof Number) {
    qb.distance(((Number)vDistance).doubleValue(),unit);
  }
 else {
    qb.distance((String)vDistance,unit);
  }
  qb.point(point);
  qb.coerce(coerce);
  qb.ignoreMalformed(ignoreMalformed);
  qb.optimizeBbox(optimizeBbox);
  qb.geoDistance(geoDistance);
  qb.boost(boost);
  qb.queryName(queryName);
  return qb;
}
