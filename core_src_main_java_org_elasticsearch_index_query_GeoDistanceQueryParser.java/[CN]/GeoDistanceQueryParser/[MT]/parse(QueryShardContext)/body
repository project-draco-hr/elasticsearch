{
  QueryParseContext parseContext=context.parseContext();
  XContentParser parser=parseContext.parser();
  XContentParser.Token token;
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  String queryName=null;
  String currentFieldName=null;
  GeoPoint point=new GeoPoint();
  String fieldName=null;
  double distance=0;
  Object vDistance=null;
  DistanceUnit unit=DistanceUnit.DEFAULT;
  GeoDistance geoDistance=GeoDistance.DEFAULT;
  String optimizeBbox="memory";
  final boolean indexCreatedBeforeV2_0=parseContext.shardContext().indexVersionCreated().before(Version.V_2_0_0);
  boolean coerce=false;
  boolean ignoreMalformed=false;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (parseContext.isDeprecatedSetting(currentFieldName)) {
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      fieldName=currentFieldName;
      GeoUtils.parseGeoPoint(parser,point);
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      String currentName=parser.currentName();
      fieldName=currentFieldName;
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          currentName=parser.currentName();
        }
 else         if (token.isValue()) {
          if (currentName.equals(GeoPointFieldMapper.Names.LAT)) {
            point.resetLat(parser.doubleValue());
          }
 else           if (currentName.equals(GeoPointFieldMapper.Names.LON)) {
            point.resetLon(parser.doubleValue());
          }
 else           if (currentName.equals(GeoPointFieldMapper.Names.GEOHASH)) {
            point.resetFromGeoHash(parser.text());
          }
 else {
            throw new QueryParsingException(parseContext,"[geo_distance] query does not support [" + currentFieldName + "]");
          }
        }
      }
    }
 else     if (token.isValue()) {
      if (currentFieldName.equals("distance")) {
        if (token == XContentParser.Token.VALUE_STRING) {
          vDistance=parser.text();
        }
 else {
          vDistance=parser.numberValue();
        }
      }
 else       if (currentFieldName.equals("unit")) {
        unit=DistanceUnit.fromString(parser.text());
      }
 else       if (currentFieldName.equals("distance_type") || currentFieldName.equals("distanceType")) {
        geoDistance=GeoDistance.fromString(parser.text());
      }
 else       if (currentFieldName.endsWith(GeoPointFieldMapper.Names.LAT_SUFFIX)) {
        point.resetLat(parser.doubleValue());
        fieldName=currentFieldName.substring(0,currentFieldName.length() - GeoPointFieldMapper.Names.LAT_SUFFIX.length());
      }
 else       if (currentFieldName.endsWith(GeoPointFieldMapper.Names.LON_SUFFIX)) {
        point.resetLon(parser.doubleValue());
        fieldName=currentFieldName.substring(0,currentFieldName.length() - GeoPointFieldMapper.Names.LON_SUFFIX.length());
      }
 else       if (currentFieldName.endsWith(GeoPointFieldMapper.Names.GEOHASH_SUFFIX)) {
        point.resetFromGeoHash(parser.text());
        fieldName=currentFieldName.substring(0,currentFieldName.length() - GeoPointFieldMapper.Names.GEOHASH_SUFFIX.length());
      }
 else       if ("_name".equals(currentFieldName)) {
        queryName=parser.text();
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=parser.floatValue();
      }
 else       if ("optimize_bbox".equals(currentFieldName) || "optimizeBbox".equals(currentFieldName)) {
        optimizeBbox=parser.textOrNull();
      }
 else       if ("coerce".equals(currentFieldName) || (indexCreatedBeforeV2_0 && "normalize".equals(currentFieldName))) {
        coerce=parser.booleanValue();
        if (coerce == true) {
          ignoreMalformed=true;
        }
      }
 else       if ("ignore_malformed".equals(currentFieldName) && coerce == false) {
        ignoreMalformed=parser.booleanValue();
      }
 else {
        point.resetFromString(parser.text());
        fieldName=currentFieldName;
      }
    }
  }
  if (!indexCreatedBeforeV2_0 && !ignoreMalformed) {
    if (point.lat() > 90.0 || point.lat() < -90.0) {
      throw new QueryParsingException(parseContext,"illegal latitude value [{}] for [{}]",point.lat(),GeoDistanceQueryBuilder.NAME);
    }
    if (point.lon() > 180.0 || point.lon() < -180) {
      throw new QueryParsingException(parseContext,"illegal longitude value [{}] for [{}]",point.lon(),GeoDistanceQueryBuilder.NAME);
    }
  }
  if (coerce) {
    GeoUtils.normalizePoint(point,coerce,coerce);
  }
  if (vDistance == null) {
    throw new QueryParsingException(parseContext,"geo_distance requires 'distance' to be specified");
  }
 else   if (vDistance instanceof Number) {
    distance=DistanceUnit.DEFAULT.convert(((Number)vDistance).doubleValue(),unit);
  }
 else {
    distance=DistanceUnit.parse((String)vDistance,unit,DistanceUnit.DEFAULT);
  }
  distance=geoDistance.normalize(distance,DistanceUnit.DEFAULT);
  MappedFieldType fieldType=parseContext.shardContext().fieldMapper(fieldName);
  if (fieldType == null) {
    throw new QueryParsingException(parseContext,"failed to find geo_point field [" + fieldName + "]");
  }
  if (!(fieldType instanceof GeoPointFieldMapper.GeoPointFieldType)) {
    throw new QueryParsingException(parseContext,"field [" + fieldName + "] is not a geo_point field");
  }
  GeoPointFieldMapper.GeoPointFieldType geoFieldType=((GeoPointFieldMapper.GeoPointFieldType)fieldType);
  IndexGeoPointFieldData indexFieldData=context.getForField(fieldType);
  Query query=new GeoDistanceRangeQuery(point,null,distance,true,false,geoDistance,geoFieldType,indexFieldData,optimizeBbox);
  if (queryName != null) {
    context.addNamedQuery(queryName,query);
  }
  query.setBoost(boost);
  return query;
}
