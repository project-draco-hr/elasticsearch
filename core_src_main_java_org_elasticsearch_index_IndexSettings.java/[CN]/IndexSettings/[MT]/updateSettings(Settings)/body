{
  final Translog.Durability durability=getFromSettings(settings,this.durability);
  if (durability != this.durability) {
    logger.info("updating durability from [{}] to [{}]",this.durability,durability);
    this.durability=durability;
  }
  TimeValue refreshInterval=settings.getAsTime(IndexSettings.INDEX_REFRESH_INTERVAL,this.refreshInterval);
  if (!refreshInterval.equals(this.refreshInterval)) {
    logger.info("updating refresh_interval from [{}] to [{}]",this.refreshInterval,refreshInterval);
    this.refreshInterval=refreshInterval;
  }
  ByteSizeValue flushThresholdSize=settings.getAsBytesSize(IndexSettings.INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE,this.flushThresholdSize);
  if (!flushThresholdSize.equals(this.flushThresholdSize)) {
    logger.info("updating flush_threshold_size from [{}] to [{}]",this.flushThresholdSize,flushThresholdSize);
    this.flushThresholdSize=flushThresholdSize;
  }
  final boolean flushOnClose=settings.getAsBoolean(INDEX_FLUSH_ON_CLOSE,this.flushOnClose);
  if (flushOnClose != this.flushOnClose) {
    logger.info("updating {} from [{}] to [{}]",INDEX_FLUSH_ON_CLOSE,this.flushOnClose,flushOnClose);
    this.flushOnClose=flushOnClose;
  }
  final int maxThreadCount=settings.getAsInt(MergeSchedulerConfig.MAX_THREAD_COUNT,mergeSchedulerConfig.getMaxThreadCount());
  if (maxThreadCount != mergeSchedulerConfig.getMaxThreadCount()) {
    logger.info("updating [{}] from [{}] to [{}]",MergeSchedulerConfig.MAX_THREAD_COUNT,mergeSchedulerConfig.getMaxMergeCount(),maxThreadCount);
    mergeSchedulerConfig.setMaxThreadCount(maxThreadCount);
  }
  final int maxMergeCount=settings.getAsInt(MergeSchedulerConfig.MAX_MERGE_COUNT,mergeSchedulerConfig.getMaxMergeCount());
  if (maxMergeCount != mergeSchedulerConfig.getMaxMergeCount()) {
    logger.info("updating [{}] from [{}] to [{}]",MergeSchedulerConfig.MAX_MERGE_COUNT,mergeSchedulerConfig.getMaxMergeCount(),maxMergeCount);
    mergeSchedulerConfig.setMaxMergeCount(maxMergeCount);
  }
  final boolean autoThrottle=settings.getAsBoolean(MergeSchedulerConfig.AUTO_THROTTLE,mergeSchedulerConfig.isAutoThrottle());
  if (autoThrottle != mergeSchedulerConfig.isAutoThrottle()) {
    logger.info("updating [{}] from [{}] to [{}]",MergeSchedulerConfig.AUTO_THROTTLE,mergeSchedulerConfig.isAutoThrottle(),autoThrottle);
    mergeSchedulerConfig.setAutoThrottle(autoThrottle);
  }
  long gcDeletesInMillis=settings.getAsTime(IndexSettings.INDEX_GC_DELETES_SETTING,TimeValue.timeValueMillis(this.gcDeletesInMillis)).getMillis();
  if (gcDeletesInMillis != this.gcDeletesInMillis) {
    logger.info("updating {} from [{}] to [{}]",IndexSettings.INDEX_GC_DELETES_SETTING,TimeValue.timeValueMillis(this.gcDeletesInMillis),TimeValue.timeValueMillis(gcDeletesInMillis));
    this.gcDeletesInMillis=gcDeletesInMillis;
  }
  mergePolicyConfig.onRefreshSettings(settings);
}
