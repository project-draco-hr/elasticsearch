{
  IndexShard indexShard=getShard(request);
  if (indexShard == null) {
    channel.sendResponse(new ShardActiveResponse(false,clusterService.localNode()));
  }
 else {
    ClusterStateObserver observer=new ClusterStateObserver(clusterService,request.timeout,logger,threadPool.getThreadContext());
    boolean shardActive=shardActive(indexShard);
    if (shardActive) {
      channel.sendResponse(new ShardActiveResponse(true,clusterService.localNode()));
    }
 else {
      observer.waitForNextChange(new ClusterStateObserver.Listener(){
        @Override public void onNewClusterState(        ClusterState state){
          sendResult(shardActive(getShard(request)));
        }
        @Override public void onClusterServiceClose(){
          sendResult(false);
        }
        @Override public void onTimeout(        TimeValue timeout){
          sendResult(shardActive(getShard(request)));
        }
        public void sendResult(        boolean shardActive){
          try {
            channel.sendResponse(new ShardActiveResponse(shardActive,clusterService.localNode()));
          }
 catch (          IOException e) {
            logger.error("failed send response for shard active while trying to delete shard {} - shard will probably not be removed",e,request.shardId);
          }
catch (          EsRejectedExecutionException e) {
            logger.error("failed send response for shard active while trying to delete shard {} - shard will probably not be removed",e,request.shardId);
          }
        }
      }
,new ClusterStateObserver.ValidationPredicate(){
        @Override protected boolean validate(        ClusterState newState){
          IndexShard indexShard=getShard(request);
          return indexShard == null || shardActive(indexShard);
        }
      }
);
    }
  }
}
