{
  final Weight boundingBoxWeight;
  if (boundingBoxFilter != null) {
    boundingBoxWeight=searcher.createNormalizedWeight(boundingBoxFilter,false);
  }
 else {
    boundingBoxWeight=null;
  }
  return new ConstantScoreWeight(this){
    @Override public Scorer scorer(    LeafReaderContext context) throws IOException {
      final DocIdSetIterator approximation;
      if (boundingBoxWeight != null) {
        Scorer s=boundingBoxWeight.scorer(context);
        if (s == null) {
          return null;
        }
        approximation=s.iterator();
      }
 else {
        approximation=DocIdSetIterator.all(context.reader().maxDoc());
      }
      final MultiGeoPointValues values=indexFieldData.load(context).getGeoPointValues();
      final TwoPhaseIterator twoPhaseIterator=new TwoPhaseIterator(approximation){
        @Override public boolean matches() throws IOException {
          final int doc=approximation.docID();
          values.setDocument(doc);
          final int length=values.count();
          for (int i=0; i < length; i++) {
            GeoPoint point=values.valueAt(i);
            if (distanceBoundingCheck.isWithin(point.lat(),point.lon())) {
              double d=fixedSourceDistance.calculate(point.lat(),point.lon());
              if (d >= inclusiveLowerPoint && d <= inclusiveUpperPoint) {
                return true;
              }
            }
          }
          return false;
        }
        @Override public float matchCost(){
          if (distanceBoundingCheck == GeoDistance.ALWAYS_INSTANCE) {
            return 0.0f;
          }
 else {
            return 4.0f;
          }
        }
      }
;
      return new ConstantScoreScorer(this,score(),twoPhaseIterator);
    }
  }
;
}
