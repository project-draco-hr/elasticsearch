{
  int left=length;
  ChunkEncoder enc=cachedEncoder.get().get();
  int chunkLen=Math.min(LZFChunk.MAX_CHUNK_LEN,left);
  LZFChunk first=enc.encodeChunk(data,0,chunkLen);
  left-=chunkLen;
  if (left < 1) {
    return first.getData();
  }
  int resultBytes=first.length();
  int inputOffset=chunkLen;
  LZFChunk last=first;
  do {
    chunkLen=Math.min(left,LZFChunk.MAX_CHUNK_LEN);
    LZFChunk chunk=enc.encodeChunk(data,inputOffset,chunkLen);
    inputOffset+=chunkLen;
    left-=chunkLen;
    resultBytes+=chunk.length();
    last.setNext(chunk);
    last=chunk;
  }
 while (left > 0);
  byte[] result=new byte[resultBytes];
  int ptr=0;
  for (; first != null; first=first.next()) {
    ptr=first.copyTo(result,ptr);
  }
  return result;
}
