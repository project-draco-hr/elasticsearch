{
  final ToXContent.Params params=ToXContent.EMPTY_PARAMS;
  MetaDataStateFormat<MetaData> format=GatewayMetaState.globalStateFormat(randomFrom(XContentType.values()),params,randomBoolean());
  final Path[] dirs=new Path[2];
  dirs[0]=newTempDirPath(LifecycleScope.TEST);
  dirs[1]=newTempDirPath(LifecycleScope.TEST);
  for (  Path dir : dirs) {
    Files.createDirectories(dir.resolve(MetaDataStateFormat.STATE_DIR_NAME));
  }
  final Path dir1=randomFrom(dirs);
  final int v1=randomInt(10);
  format.write(randomMeta(),GatewayMetaState.GLOBAL_STATE_FILE_PREFIX,v1,dir1);
  final int numLegacyFiles=randomIntBetween(1,5);
  for (int i=0; i < numLegacyFiles; ++i) {
    final Path dir2=randomFrom(dirs);
    final int v2=v1 + 1 + randomInt(10);
    try (XContentBuilder xcontentBuilder=XContentFactory.contentBuilder(format.format(),Files.newOutputStream(dir2.resolve(MetaDataStateFormat.STATE_DIR_NAME).resolve(GatewayMetaState.GLOBAL_STATE_FILE_PREFIX + v2)))){
      xcontentBuilder.startObject();
      MetaData.Builder.toXContent(randomMeta(),xcontentBuilder,params);
      xcontentBuilder.endObject();
    }
   }
  try {
    MetaDataStateFormat.loadLatestState(logger,format,GatewayMetaState.GLOBAL_STATE_FILE_PATTERN,"foobar",dirs);
    fail("latest version can not be read");
  }
 catch (  ElasticsearchIllegalStateException ex) {
    assertThat(ex.getMessage(),startsWith("Could not find a state file to recover from among "));
  }
}
