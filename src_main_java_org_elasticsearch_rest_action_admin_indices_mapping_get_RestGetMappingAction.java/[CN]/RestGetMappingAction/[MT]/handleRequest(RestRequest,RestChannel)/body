{
  final String[] indices=splitIndices(request.param("index"));
  final String[] types=splitTypes(request.param("type"));
  boolean local=request.paramAsBooleanOptional("local",false);
  GetMappingsRequest getMappingsRequest=new GetMappingsRequest();
  getMappingsRequest.indices(indices).types(types).local(local);
  client.admin().indices().getMappings(getMappingsRequest,new ActionListener<GetMappingsResponse>(){
    @Override public void onResponse(    GetMappingsResponse response){
      try {
        boolean foundAny=false;
        XContentBuilder builder=RestXContentBuilder.restContentBuilder(request);
        builder.startObject();
        ImmutableMap<String,ImmutableMap<String,MappingMetaData>> mappingsByIndex=response.getMappings();
        if (indices.length == 1 && mappingsByIndex.isEmpty()) {
          channel.sendResponse(new XContentThrowableRestResponse(request,new IndexMissingException(new Index(indices[0]))));
          return;
        }
        ImmutableSet<String> uniqueTypes=ImmutableSet.copyOf(types);
        if (indices.length == 1 && uniqueTypes.size() == 1) {
          boolean foundType=false;
          ImmutableMap<String,MappingMetaData> indexMetaData=mappingsByIndex.entrySet().iterator().next().getValue();
          for (          MappingMetaData mappingMd : indexMetaData.values()) {
            if (!uniqueTypes.isEmpty() && !uniqueTypes.contains(mappingMd.type())) {
              continue;
            }
            foundAny=true;
            foundType=true;
            builder.field(mappingMd.type());
            builder.map(mappingMd.sourceAsMap());
          }
          if (!foundType) {
            channel.sendResponse(new XContentThrowableRestResponse(request,new TypeMissingException(new Index(indices[0]),uniqueTypes.iterator().next())));
            return;
          }
        }
 else {
          for (          Map.Entry<String,ImmutableMap<String,MappingMetaData>> indexEntry : mappingsByIndex.entrySet()) {
            builder.startObject(indexEntry.getKey(),XContentBuilder.FieldCaseConversion.NONE);
            for (            Map.Entry<String,MappingMetaData> typeEntry : indexEntry.getValue().entrySet()) {
              if (!uniqueTypes.isEmpty() && !uniqueTypes.contains(typeEntry.getKey())) {
                continue;
              }
              foundAny=true;
              builder.field(typeEntry.getKey());
              builder.map(typeEntry.getValue().sourceAsMap());
            }
            if (indexEntry.getValue().isEmpty() && uniqueTypes.isEmpty()) {
              foundAny=true;
            }
            builder.endObject();
          }
        }
        builder.endObject();
        channel.sendResponse(new XContentRestResponse(request,foundAny || indices.length == 0 ? OK : NOT_FOUND,builder));
      }
 catch (      Throwable e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
