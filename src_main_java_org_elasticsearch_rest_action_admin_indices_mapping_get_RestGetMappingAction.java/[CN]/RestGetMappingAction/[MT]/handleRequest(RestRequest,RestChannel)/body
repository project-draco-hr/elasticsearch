{
  final String[] indices=Strings.splitStringByCommaToArray(request.param("index"));
  final String[] types=Strings.splitStringByCommaToArray(request.param("type"));
  boolean local=request.paramAsBooleanOptional("local",false);
  GetMappingsRequest getMappingsRequest=new GetMappingsRequest();
  getMappingsRequest.indices(indices).types(types).local(local);
  client.admin().indices().getMappings(getMappingsRequest,new ActionListener<GetMappingsResponse>(){
    @Override public void onResponse(    GetMappingsResponse response){
      try {
        XContentBuilder builder=RestXContentBuilder.restContentBuilder(request);
        builder.startObject();
        ImmutableMap<String,ImmutableMap<String,MappingMetaData>> mappingsByIndex=response.getMappings();
        if (mappingsByIndex.isEmpty()) {
          if (indices.length != 0 && types.length != 0) {
            channel.sendResponse(new XContentThrowableRestResponse(request,new TypeMissingException(new Index(indices[0]),types[0])));
          }
 else           if (indices.length != 0) {
            channel.sendResponse(new XContentThrowableRestResponse(request,new IndexMissingException(new Index(indices[0]))));
          }
 else           if (types.length != 0) {
            channel.sendResponse(new XContentThrowableRestResponse(request,new TypeMissingException(new Index("_all"),types[0])));
          }
 else {
            builder.endObject();
            channel.sendResponse(new XContentRestResponse(request,OK,builder));
          }
          return;
        }
        for (        Map.Entry<String,ImmutableMap<String,MappingMetaData>> indexEntry : mappingsByIndex.entrySet()) {
          builder.startObject(indexEntry.getKey(),XContentBuilder.FieldCaseConversion.NONE);
          for (          Map.Entry<String,MappingMetaData> typeEntry : indexEntry.getValue().entrySet()) {
            builder.field(typeEntry.getKey());
            builder.map(typeEntry.getValue().sourceAsMap());
          }
          builder.endObject();
        }
        builder.endObject();
        channel.sendResponse(new XContentRestResponse(request,OK,builder));
      }
 catch (      Throwable e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
