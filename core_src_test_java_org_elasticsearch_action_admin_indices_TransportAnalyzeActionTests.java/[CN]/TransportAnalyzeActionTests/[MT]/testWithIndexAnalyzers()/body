{
  AnalyzeRequest request=new AnalyzeRequest();
  request.analyzer("standard");
  request.text("the quick brown fox");
  request.analyzer("custom_analyzer");
  request.text("the qu1ck brown fox");
  AnalyzeResponse analyze=TransportAnalyzeAction.analyze(request,AllFieldMapper.NAME,null,indexAnalyzers,registry,environment);
  List<AnalyzeResponse.AnalyzeToken> tokens=analyze.getTokens();
  assertEquals(4,tokens.size());
  request.analyzer("whitespace");
  request.text("the qu1ck brown fox-dog");
  analyze=TransportAnalyzeAction.analyze(request,AllFieldMapper.NAME,null,indexAnalyzers,registry,environment);
  tokens=analyze.getTokens();
  assertEquals(4,tokens.size());
  request.analyzer("custom_analyzer");
  request.text("the qu1ck brown fox-dog");
  analyze=TransportAnalyzeAction.analyze(request,AllFieldMapper.NAME,null,indexAnalyzers,registry,environment);
  tokens=analyze.getTokens();
  assertEquals(5,tokens.size());
  request.analyzer(null);
  request.tokenizer("whitespace");
  request.addTokenFilter("lowercase");
  request.addTokenFilter("wordDelimiter");
  request.text("the qu1ck brown fox-dog");
  analyze=TransportAnalyzeAction.analyze(request,AllFieldMapper.NAME,null,indexAnalyzers,registry,environment);
  tokens=analyze.getTokens();
  assertEquals(5,tokens.size());
  assertEquals("the",tokens.get(0).getTerm());
  assertEquals("qu1ck",tokens.get(1).getTerm());
  assertEquals("brown",tokens.get(2).getTerm());
  assertEquals("fox",tokens.get(3).getTerm());
  assertEquals("dog",tokens.get(4).getTerm());
  request.analyzer(null);
  request.tokenizer("trigram");
  request.addTokenFilter("synonym");
  request.text("kimchy");
  analyze=TransportAnalyzeAction.analyze(request,AllFieldMapper.NAME,null,indexAnalyzers,registry,environment);
  tokens=analyze.getTokens();
  assertEquals(2,tokens.size());
  assertEquals("sha",tokens.get(0).getTerm());
  assertEquals("hay",tokens.get(1).getTerm());
}
