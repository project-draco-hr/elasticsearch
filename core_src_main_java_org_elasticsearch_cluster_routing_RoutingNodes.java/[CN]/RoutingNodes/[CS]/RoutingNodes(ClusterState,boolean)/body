{
  this.readOnly=readOnly;
  this.metaData=clusterState.metaData();
  this.blocks=clusterState.blocks();
  this.routingTable=clusterState.routingTable();
  this.customs=clusterState.customs();
  Map<String,List<ShardRouting>> nodesToShards=newHashMap();
  for (  ObjectCursor<DiscoveryNode> cursor : clusterState.nodes().dataNodes().values()) {
    nodesToShards.put(cursor.value.id(),new ArrayList<ShardRouting>());
  }
  for (  IndexRoutingTable indexRoutingTable : routingTable.indicesRouting().values()) {
    for (    IndexShardRoutingTable indexShard : indexRoutingTable) {
      for (      ShardRouting shard : indexShard) {
        if (shard.assignedToNode()) {
          List<ShardRouting> entries=nodesToShards.get(shard.currentNodeId());
          if (entries == null) {
            entries=newArrayList();
            nodesToShards.put(shard.currentNodeId(),entries);
          }
          final ShardRouting sr=getRouting(shard,readOnly);
          entries.add(sr);
          assignedShardsAdd(sr);
          if (shard.relocating()) {
            entries=nodesToShards.get(shard.relocatingNodeId());
            relocatingShards++;
            if (entries == null) {
              entries=newArrayList();
              nodesToShards.put(shard.relocatingNodeId(),entries);
            }
            ShardRouting targetShardRouting=shard.buildTargetRelocatingShard();
            if (readOnly) {
              targetShardRouting.freeze();
            }
            entries.add(targetShardRouting);
            assignedShardsAdd(targetShardRouting);
          }
 else           if (!shard.active()) {
            if (shard.primary()) {
              inactivePrimaryCount++;
            }
            inactiveShardCount++;
          }
        }
 else {
          final ShardRouting sr=getRouting(shard,readOnly);
          assignedShardsAdd(sr);
          unassignedShards.add(sr);
        }
      }
    }
  }
  for (  Map.Entry<String,List<ShardRouting>> entry : nodesToShards.entrySet()) {
    String nodeId=entry.getKey();
    this.nodesToShards.put(nodeId,new RoutingNode(nodeId,clusterState.nodes().get(nodeId),entry.getValue()));
  }
}
