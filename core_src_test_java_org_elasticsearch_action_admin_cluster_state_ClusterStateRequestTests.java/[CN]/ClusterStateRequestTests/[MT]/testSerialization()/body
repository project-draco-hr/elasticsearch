{
  int iterations=randomIntBetween(5,20);
  for (int i=0; i < iterations; i++) {
    IndicesOptions indicesOptions=IndicesOptions.fromOptions(randomBoolean(),randomBoolean(),randomBoolean(),randomBoolean());
    ClusterStateRequest clusterStateRequest=new ClusterStateRequest().routingTable(randomBoolean()).metaData(randomBoolean()).nodes(randomBoolean()).blocks(randomBoolean()).indices("testindex","testindex2").indicesOptions(indicesOptions);
    Version testVersion=VersionUtils.randomVersionBetween(random(),Version.CURRENT.minimumCompatibilityVersion(),Version.CURRENT);
    BytesStreamOutput output=new BytesStreamOutput();
    output.setVersion(testVersion);
    clusterStateRequest.writeTo(output);
    StreamInput streamInput=StreamInput.wrap(output.bytes());
    streamInput.setVersion(testVersion);
    ClusterStateRequest deserializedCSRequest=new ClusterStateRequest();
    deserializedCSRequest.readFrom(streamInput);
    assertThat(deserializedCSRequest.routingTable(),equalTo(clusterStateRequest.routingTable()));
    assertThat(deserializedCSRequest.metaData(),equalTo(clusterStateRequest.metaData()));
    assertThat(deserializedCSRequest.nodes(),equalTo(clusterStateRequest.nodes()));
    assertThat(deserializedCSRequest.blocks(),equalTo(clusterStateRequest.blocks()));
    assertThat(deserializedCSRequest.indices(),equalTo(clusterStateRequest.indices()));
    if (testVersion.onOrAfter(Version.V_1_5_0)) {
      assertOptionsMatch(deserializedCSRequest.indicesOptions(),clusterStateRequest.indicesOptions());
    }
 else {
      assertOptionsMatch(deserializedCSRequest.indicesOptions(),IndicesOptions.lenientExpandOpen());
    }
  }
}
