{
  GroupRedBlackTree values=summary;
  if (values.size() == 0) {
    return Double.NaN;
  }
 else   if (values.size() == 1) {
    return x < values.mean(values.root()) ? 0 : 1;
  }
 else {
    double r=0;
    Iterator<IntCursor> it=values.iterator();
    int a=it.next().value;
    int b=it.next().value;
    double left=(values.mean(b) - values.mean(a)) / 2;
    double right=left;
    while (it.hasNext()) {
      if (x < values.mean(a) + right) {
        return (r + values.count(a) * interpolate(x,values.mean(a) - left,values.mean(a) + right)) / count;
      }
      r+=values.count(a);
      a=b;
      b=it.next().value;
      left=right;
      right=(values.mean(b) - values.mean(a)) / 2;
    }
    left=right;
    a=b;
    if (x < values.mean(a) + right) {
      return (r + values.count(a) * interpolate(x,values.mean(a) - left,values.mean(a) + right)) / count;
    }
 else {
      return 1;
    }
  }
}
