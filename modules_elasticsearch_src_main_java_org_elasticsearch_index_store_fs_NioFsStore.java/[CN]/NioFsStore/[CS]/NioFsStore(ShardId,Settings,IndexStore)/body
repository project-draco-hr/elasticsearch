{
  super(shardId,indexSettings);
  this.syncToDisk=componentSettings.getAsBoolean("sync_to_disk",false);
  String fsLock=componentSettings.get("use_fs_lock","none");
  LockFactory lockFactory=new NoLockFactory();
  if (fsLock.equals("native")) {
    lockFactory=new NativeFSLockFactory();
  }
 else   if (fsLock.equals("simple")) {
    lockFactory=new SimpleFSLockFactory();
  }
  File location=((FsIndexStore)indexStore).shardLocation(shardId);
  this.fsDirectory=new CustomNioFSDirectory(location,lockFactory,syncToDisk);
  SwitchDirectory switchDirectory=buildSwitchDirectoryIfNeeded(fsDirectory);
  if (switchDirectory != null) {
    suggestUseCompoundFile=false;
    logger.debug("Using [nio_fs] Store with path [{}], cache [true] with extensions [{}]",fsDirectory.getFile(),switchDirectory.primaryExtensions());
    directory=switchDirectory;
  }
 else {
    suggestUseCompoundFile=true;
    directory=fsDirectory;
    logger.debug("Using [nio_fs] Store with path [{}]",fsDirectory.getFile());
  }
}
