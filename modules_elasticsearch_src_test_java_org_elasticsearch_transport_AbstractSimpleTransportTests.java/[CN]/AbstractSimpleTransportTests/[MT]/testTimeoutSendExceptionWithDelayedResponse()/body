{
  serviceA.registerHandler("sayHelloTimeoutDelayedResponse",new BaseTransportRequestHandler<StringMessage>(){
    @Override public StringMessage newInstance(){
      return new StringMessage();
    }
    @Override public void messageReceived(    StringMessage request,    TransportChannel channel){
      TimeValue sleep=TimeValue.parseTimeValue(request.message,null);
      try {
        Thread.sleep(sleep.millis());
      }
 catch (      InterruptedException e) {
      }
      try {
        channel.sendResponse(new StringMessage("hello " + request.message));
      }
 catch (      IOException e) {
        e.printStackTrace();
        assertThat(e.getMessage(),false,equalTo(true));
      }
    }
  }
);
  TransportFuture<StringMessage> res=serviceB.submitRequest(serviceANode,"sayHelloTimeoutDelayedResponse",new StringMessage("300ms"),options().withTimeout(100),new BaseTransportResponseHandler<StringMessage>(){
    @Override public StringMessage newInstance(){
      return new StringMessage();
    }
    @Override public void handleResponse(    StringMessage response){
      assertThat("got response instead of exception",false,equalTo(true));
    }
    @Override public void handleException(    TransportException exp){
      assertThat(exp,instanceOf(ReceiveTimeoutTransportException.class));
    }
  }
);
  try {
    StringMessage message=res.txGet();
    assertThat("exception should be thrown",false,equalTo(true));
  }
 catch (  Exception e) {
    assertThat(e,instanceOf(ReceiveTimeoutTransportException.class));
  }
  Thread.sleep(400);
  for (int i=0; i < 10; i++) {
    final int counter=i;
    res=serviceB.submitRequest(serviceANode,"sayHelloTimeoutDelayedResponse",new StringMessage(counter + "ms"),options().withTimeout(100),new BaseTransportResponseHandler<StringMessage>(){
      @Override public StringMessage newInstance(){
        return new StringMessage();
      }
      @Override public void handleResponse(      StringMessage response){
        assertThat("hello " + counter + "ms",equalTo(response.message));
      }
      @Override public void handleException(      TransportException exp){
        exp.printStackTrace();
        assertThat("got exception instead of a response for " + counter + ": "+ exp.getDetailedMessage(),false,equalTo(true));
      }
    }
);
    StringMessage message=res.txGet();
    assertThat(message.message,equalTo("hello " + counter + "ms"));
  }
  serviceA.removeHandler("sayHelloTimeoutDelayedResponse");
}
