{
  serviceA.registerHandler("sayHelloTimeout",new BaseTransportRequestHandler<StringMessage>(){
    @Override public StringMessage newInstance(){
      return new StringMessage();
    }
    @Override public void messageReceived(    StringMessage request,    TransportChannel channel){
      System.out.println("got message: " + request.message);
      assertThat("moshe",equalTo(request.message));
    }
  }
);
  TransportFuture<StringMessage> res=serviceB.submitRequest(serviceANode,"sayHelloTimeout",new StringMessage("moshe"),TimeValue.timeValueMillis(100),new BaseTransportResponseHandler<StringMessage>(){
    @Override public StringMessage newInstance(){
      return new StringMessage();
    }
    @Override public void handleResponse(    StringMessage response){
      assertThat("got response instead of exception",false,equalTo(true));
    }
    @Override public void handleException(    RemoteTransportException exp){
      assertThat(exp,instanceOf(ReceiveTimeoutTransportException.class));
    }
  }
);
  try {
    StringMessage message=res.txGet();
    assertThat("exception should be thrown",false,equalTo(true));
  }
 catch (  Exception e) {
    assertThat(e,instanceOf(ReceiveTimeoutTransportException.class));
  }
  serviceA.removeHandler("sayHelloTimeout");
  System.out.println("after ...");
}
