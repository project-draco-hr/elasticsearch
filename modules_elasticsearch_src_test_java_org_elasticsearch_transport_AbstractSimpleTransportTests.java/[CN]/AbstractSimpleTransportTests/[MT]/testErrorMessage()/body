{
  serviceA.registerHandler("sayHelloException",new BaseTransportRequestHandler<StringMessage>(){
    @Override public StringMessage newInstance(){
      return new StringMessage();
    }
    @Override public void messageReceived(    StringMessage request,    TransportChannel channel) throws Exception {
      assertThat("moshe",equalTo(request.message));
      throw new RuntimeException("bad message !!!");
    }
  }
);
  TransportFuture<StringMessage> res=serviceB.submitRequest(serviceANode,"sayHelloException",new StringMessage("moshe"),new BaseTransportResponseHandler<StringMessage>(){
    @Override public StringMessage newInstance(){
      return new StringMessage();
    }
    @Override public void handleResponse(    StringMessage response){
      assertThat("got response instead of exception",false,equalTo(true));
    }
    @Override public void handleException(    TransportException exp){
      assertThat("bad message !!!",equalTo(exp.getCause().getMessage()));
    }
  }
);
  try {
    res.txGet();
    assertThat("exception should be thrown",false,equalTo(true));
  }
 catch (  Exception e) {
    assertThat("bad message !!!",equalTo(e.getCause().getMessage()));
  }
  serviceA.removeHandler("sayHelloException");
}
