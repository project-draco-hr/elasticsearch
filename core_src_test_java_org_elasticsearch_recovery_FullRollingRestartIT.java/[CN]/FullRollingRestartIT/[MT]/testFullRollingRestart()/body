{
  Settings settings=Settings.builder().put(ZenDiscovery.SETTING_JOIN_TIMEOUT,"30s").build();
  internalCluster().startNode(settings);
  createIndex("test");
  final String healthTimeout="1m";
  for (int i=0; i < 1000; i++) {
    client().prepareIndex("test","type1",Long.toString(i)).setSource(MapBuilder.<String,Object>newMapBuilder().put("test","value" + i).map()).execute().actionGet();
  }
  flush();
  for (int i=1000; i < 2000; i++) {
    client().prepareIndex("test","type1",Long.toString(i)).setSource(MapBuilder.<String,Object>newMapBuilder().put("test","value" + i).map()).execute().actionGet();
  }
  logger.info("--> now start adding nodes");
  internalCluster().startNodesAsync(2,settings).get();
  assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout).setWaitForGreenStatus().setWaitForRelocatingShards(0).setWaitForNodes("3"));
  logger.info("--> add two more nodes");
  internalCluster().startNodesAsync(2,settings).get();
  setMinimumMasterNodes(3);
  assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout).setWaitForGreenStatus().setWaitForRelocatingShards(0).setWaitForNodes("5"));
  logger.info("--> refreshing and checking data");
  refresh();
  for (int i=0; i < 10; i++) {
    assertHitCount(client().prepareCount().setQuery(matchAllQuery()).get(),2000l);
  }
  internalCluster().stopRandomDataNode();
  assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout).setWaitForGreenStatus().setWaitForRelocatingShards(0).setWaitForNodes("4"));
  setMinimumMasterNodes(2);
  internalCluster().stopRandomDataNode();
  assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout).setWaitForGreenStatus().setWaitForRelocatingShards(0).setWaitForNodes("3"));
  logger.info("--> stopped two nodes, verifying data");
  refresh();
  for (int i=0; i < 10; i++) {
    assertHitCount(client().prepareCount().setQuery(matchAllQuery()).get(),2000l);
  }
  internalCluster().stopRandomDataNode();
  assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout).setWaitForGreenStatus().setWaitForRelocatingShards(0).setWaitForNodes("2"));
  setMinimumMasterNodes(1);
  internalCluster().stopRandomDataNode();
  assertTimeout(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setTimeout(healthTimeout).setWaitForYellowStatus().setWaitForRelocatingShards(0).setWaitForNodes("1"));
  logger.info("--> one node left, verifying data");
  refresh();
  for (int i=0; i < 10; i++) {
    assertHitCount(client().prepareCount().setQuery(matchAllQuery()).get(),2000l);
  }
}
