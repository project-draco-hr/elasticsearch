{
  logger.trace("listing store meta data for {}",shardId);
  long startTime=System.currentTimeMillis();
  boolean exists=false;
  try {
    IndexService indexService=indicesService.indexService(shardId.index().name());
    if (indexService != null) {
      IndexShard indexShard=indexService.shard(shardId.id());
      if (indexShard != null) {
        final Store store=indexShard.store();
        store.incRef();
        try {
          exists=true;
          return new StoreFilesMetaData(true,shardId,store.getMetadataOrEmpty().asMap());
        }
  finally {
          store.decRef();
        }
      }
    }
    IndexMetaData metaData=clusterService.state().metaData().index(shardId.index().name());
    if (metaData == null) {
      return new StoreFilesMetaData(false,shardId,ImmutableMap.<String,StoreFileMetaData>of());
    }
    String storeType=metaData.settings().get("index.store.type","fs");
    if (!storeType.contains("fs")) {
      return new StoreFilesMetaData(false,shardId,ImmutableMap.<String,StoreFileMetaData>of());
    }
    Path[] shardLocations=nodeEnv.shardDataPaths(shardId,metaData.settings());
    Path[] shardIndexLocations=new Path[shardLocations.length];
    for (int i=0; i < shardLocations.length; i++) {
      shardIndexLocations[i]=shardLocations[i].resolve("index");
    }
    exists=FileSystemUtils.exists(shardIndexLocations);
    if (!exists) {
      return new StoreFilesMetaData(false,shardId,ImmutableMap.<String,StoreFileMetaData>of());
    }
    return new StoreFilesMetaData(false,shardId,Store.readMetadataSnapshot(shardIndexLocations,logger).asMap());
  }
  finally {
    TimeValue took=new TimeValue(System.currentTimeMillis() - startTime);
    if (exists) {
      logger.debug("loaded store meta data for {} (took [{}])",shardId,took);
    }
 else {
      logger.trace("loaded store meta data for {} (took [{}])",shardId,took);
    }
  }
}
