{
  IndexService indexService=indicesService.indexService(shardId.index().name());
  if (indexService != null) {
    InternalIndexShard indexShard=(InternalIndexShard)indexService.shard(shardId.id());
    if (indexShard != null) {
      Store store=indexShard.store();
      store.incRef();
      try {
        return new StoreFilesMetaData(true,shardId,indexShard.store().getMetadata().asMap());
      }
  finally {
        store.decRef();
      }
    }
  }
  IndexMetaData metaData=clusterService.state().metaData().index(shardId.index().name());
  if (metaData == null) {
    return new StoreFilesMetaData(false,shardId,ImmutableMap.<String,StoreFileMetaData>of());
  }
  String storeType=metaData.settings().get("index.store.type","fs");
  if (!storeType.contains("fs")) {
    return new StoreFilesMetaData(false,shardId,ImmutableMap.<String,StoreFileMetaData>of());
  }
  File[] shardLocations=nodeEnv.shardLocations(shardId);
  File[] shardIndexLocations=new File[shardLocations.length];
  for (int i=0; i < shardLocations.length; i++) {
    shardIndexLocations[i]=new File(shardLocations[i],"index");
  }
  boolean exists=false;
  for (  File shardIndexLocation : shardIndexLocations) {
    if (shardIndexLocation.exists()) {
      exists=true;
      break;
    }
  }
  if (!exists) {
    return new StoreFilesMetaData(false,shardId,ImmutableMap.<String,StoreFileMetaData>of());
  }
  final Store.MetadataSnapshot storeFileMetaDatas=Store.readMetadataSnapshot(shardIndexLocations,logger);
  return new StoreFilesMetaData(false,shardId,storeFileMetaDatas.asMap());
}
