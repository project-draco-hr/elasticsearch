{
  ArrayList<Token> result=new ArrayList<Token>();
  if (lst1 == null || lst2 == null) {
    if (lst2 != null)     result.addAll(lst2);
    if (lst1 != null)     result.addAll(lst1);
    return result;
  }
  int pos=0;
  Iterator<Token> iter1=lst1.iterator();
  Iterator<Token> iter2=lst2.iterator();
  Token tok1=iter1.hasNext() ? iter1.next() : null;
  Token tok2=iter2.hasNext() ? iter2.next() : null;
  int pos1=tok1 != null ? tok1.getPositionIncrement() : 0;
  int pos2=tok2 != null ? tok2.getPositionIncrement() : 0;
  while (tok1 != null || tok2 != null) {
    while (tok1 != null && (pos1 <= pos2 || tok2 == null)) {
      Token tok=new Token(tok1.startOffset(),tok1.endOffset(),tok1.type());
      tok.copyBuffer(tok1.buffer(),0,tok1.length());
      tok.setPositionIncrement(pos1 - pos);
      result.add(tok);
      pos=pos1;
      tok1=iter1.hasNext() ? iter1.next() : null;
      pos1+=tok1 != null ? tok1.getPositionIncrement() : 0;
    }
    while (tok2 != null && (pos2 <= pos1 || tok1 == null)) {
      Token tok=new Token(tok2.startOffset(),tok2.endOffset(),tok2.type());
      tok.copyBuffer(tok2.buffer(),0,tok2.length());
      tok.setPositionIncrement(pos2 - pos);
      result.add(tok);
      pos=pos2;
      tok2=iter2.hasNext() ? iter2.next() : null;
      pos2+=tok2 != null ? tok2.getPositionIncrement() : 0;
    }
  }
  return result;
}
