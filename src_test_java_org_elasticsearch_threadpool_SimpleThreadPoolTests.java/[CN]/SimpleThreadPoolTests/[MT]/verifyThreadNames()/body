{
  ThreadMXBean threadBean=ManagementFactory.getThreadMXBean();
  Set<String> preNodeStartThreadNames=Sets.newHashSet();
  for (  long l : threadBean.getAllThreadIds()) {
    ThreadInfo threadInfo=threadBean.getThreadInfo(l);
    if (threadInfo != null) {
      preNodeStartThreadNames.add(threadInfo.getThreadName());
    }
  }
  logger.info("pre node threads are {}",preNodeStartThreadNames);
  String node=internalCluster().startNode();
  logger.info("do some indexing, flushing, optimize, and searches");
  int numDocs=randomIntBetween(2,100);
  IndexRequestBuilder[] builders=new IndexRequestBuilder[numDocs];
  for (int i=0; i < numDocs; ++i) {
    builders[i]=client().prepareIndex("idx","type").setSource(jsonBuilder().startObject().field("str_value","s" + i).field("str_values",new String[]{"s" + (i * 2),"s" + (i * 2 + 1)}).field("l_value",i).field("l_values",new int[]{i * 2,i * 2 + 1}).field("d_value",i).field("d_values",new double[]{i * 2,i * 2 + 1}).endObject());
  }
  indexRandom(true,builders);
  int numSearches=randomIntBetween(2,100);
  for (int i=0; i < numSearches; i++) {
    assertNoFailures(client().prepareSearch("idx").setQuery(QueryBuilders.termQuery("str_value","s" + i)).get());
    assertNoFailures(client().prepareSearch("idx").setQuery(QueryBuilders.termQuery("l_value",i)).get());
  }
  Set<String> threadNames=Sets.newHashSet();
  for (  long l : threadBean.getAllThreadIds()) {
    ThreadInfo threadInfo=threadBean.getThreadInfo(l);
    if (threadInfo != null) {
      threadNames.add(threadInfo.getThreadName());
    }
  }
  logger.info("post node threads are {}",threadNames);
  threadNames.removeAll(preNodeStartThreadNames);
  logger.info("post node *new* threads are {}",threadNames);
  for (  String threadName : threadNames) {
    if (threadName.contains("[" + MulticastChannel.SHARED_CHANNEL_NAME + "]")) {
      continue;
    }
    assertThat(threadName,anyOf(containsString("[" + node + "]"),containsString("[" + InternalTestCluster.TRANSPORT_CLIENT_PREFIX + node+ "]")));
  }
}
