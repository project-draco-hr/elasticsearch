{
  String multilinesGeoJson=XContentFactory.jsonBuilder().startObject().field("type","envelope").startArray("coordinates").startArray().value(-50).value(30).endArray().startArray().value(50).value(-30).endArray().endArray().endObject().string();
  Rectangle expected=SPATIAL_CONTEXT.makeRectangle(-50,50,-30,30);
  assertGeometryEquals(expected,multilinesGeoJson);
  multilinesGeoJson=XContentFactory.jsonBuilder().startObject().field("type","envelope").startArray("coordinates").startArray().value(50).value(30).endArray().startArray().value(-50).value(-30).endArray().endArray().endObject().string();
  expected=SPATIAL_CONTEXT.makeRectangle(-50,50,-30,30);
  assertGeometryEquals(expected,multilinesGeoJson);
  multilinesGeoJson=XContentFactory.jsonBuilder().startObject().field("type","envelope").startArray("coordinates").startArray().value(50).value(30).endArray().startArray().value(-50).value(-30).endArray().startArray().value(50).value(-39).endArray().endArray().endObject().string();
  XContentParser parser=JsonXContent.jsonXContent.createParser(multilinesGeoJson);
  parser.nextToken();
  ElasticsearchGeoAssertions.assertValidException(parser,ElasticsearchParseException.class);
  multilinesGeoJson=XContentFactory.jsonBuilder().startObject().field("type","envelope").startArray("coordinates").endArray().endObject().string();
  parser=JsonXContent.jsonXContent.createParser(multilinesGeoJson);
  parser.nextToken();
  ElasticsearchGeoAssertions.assertValidException(parser,ElasticsearchParseException.class);
}
