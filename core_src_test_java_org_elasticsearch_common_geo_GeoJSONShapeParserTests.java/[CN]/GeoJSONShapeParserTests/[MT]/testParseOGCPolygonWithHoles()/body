{
  String polygonGeoJson=XContentFactory.jsonBuilder().startObject().field("type","Polygon").startArray("coordinates").startArray().startArray().value(176.0).value(15.0).endArray().startArray().value(-177.0).value(10.0).endArray().startArray().value(-177.0).value(-10.0).endArray().startArray().value(176.0).value(-15.0).endArray().startArray().value(172.0).value(0.0).endArray().startArray().value(176.0).value(15.0).endArray().endArray().startArray().startArray().value(-172.0).value(8.0).endArray().startArray().value(174.0).value(10.0).endArray().startArray().value(-172.0).value(-8.0).endArray().startArray().value(-172.0).value(8.0).endArray().endArray().endArray().endObject().string();
  XContentParser parser=JsonXContent.jsonXContent.createParser(polygonGeoJson);
  parser.nextToken();
  Shape shape=ShapeBuilder.parse(parser).build();
  ElasticsearchGeoAssertions.assertPolygon(shape);
  polygonGeoJson=XContentFactory.jsonBuilder().startObject().field("type","Polygon").startArray("coordinates").startArray().startArray().value(-177.0).value(10.0).endArray().startArray().value(176.0).value(15.0).endArray().startArray().value(172.0).value(0.0).endArray().startArray().value(176.0).value(-15.0).endArray().startArray().value(-177.0).value(-10.0).endArray().startArray().value(-177.0).value(10.0).endArray().endArray().startArray().startArray().value(178.0).value(8.0).endArray().startArray().value(-178.0).value(8.0).endArray().startArray().value(-180.0).value(-8.0).endArray().startArray().value(178.0).value(8.0).endArray().endArray().endArray().endObject().string();
  parser=JsonXContent.jsonXContent.createParser(polygonGeoJson);
  parser.nextToken();
  shape=ShapeBuilder.parse(parser).build();
  ElasticsearchGeoAssertions.assertMultiPolygon(shape);
  polygonGeoJson=XContentFactory.jsonBuilder().startObject().field("type","Polygon").startArray("coordinates").startArray().startArray().value(176.0).value(15.0).endArray().startArray().value(180.0).value(10.0).endArray().startArray().value(179.0).value(-10.0).endArray().startArray().value(176.0).value(-15.0).endArray().startArray().value(172.0).value(0.0).endArray().startArray().value(176.0).value(15.0).endArray().endArray().startArray().startArray().value(177.0).value(8.0).endArray().startArray().value(179.0).value(10.0).endArray().startArray().value(179.0).value(-8.0).endArray().startArray().value(177.0).value(8.0).endArray().endArray().endArray().endObject().string();
  parser=JsonXContent.jsonXContent.createParser(polygonGeoJson);
  parser.nextToken();
  shape=ShapeBuilder.parse(parser).build();
  ElasticsearchGeoAssertions.assertPolygon(shape);
  polygonGeoJson=XContentFactory.jsonBuilder().startObject().field("type","Polygon").startArray("coordinates").startArray().startArray().value(183.0).value(10.0).endArray().startArray().value(183.0).value(-10.0).endArray().startArray().value(176.0).value(-15.0).endArray().startArray().value(172.0).value(0.0).endArray().startArray().value(176.0).value(15.0).endArray().startArray().value(183.0).value(10.0).endArray().endArray().startArray().startArray().value(178.0).value(8.0).endArray().startArray().value(182.0).value(8.0).endArray().startArray().value(180.0).value(-8.0).endArray().startArray().value(178.0).value(8.0).endArray().endArray().endArray().endObject().string();
  parser=JsonXContent.jsonXContent.createParser(polygonGeoJson);
  parser.nextToken();
  shape=ShapeBuilder.parse(parser).build();
  ElasticsearchGeoAssertions.assertMultiPolygon(shape);
}
