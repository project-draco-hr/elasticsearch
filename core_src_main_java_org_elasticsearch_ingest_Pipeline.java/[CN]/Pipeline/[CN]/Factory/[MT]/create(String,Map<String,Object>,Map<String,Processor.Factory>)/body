{
  String description=ConfigurationUtils.readOptionalStringProperty(null,null,config,DESCRIPTION_KEY);
  Integer version=ConfigurationUtils.readIntProperty(null,null,config,VERSION_KEY,null);
  List<Map<String,Map<String,Object>>> processorConfigs=ConfigurationUtils.readList(null,null,config,PROCESSORS_KEY);
  List<Processor> processors=ConfigurationUtils.readProcessorConfigs(processorConfigs,processorFactories);
  List<Map<String,Map<String,Object>>> onFailureProcessorConfigs=ConfigurationUtils.readOptionalList(null,null,config,ON_FAILURE_KEY);
  List<Processor> onFailureProcessors=ConfigurationUtils.readProcessorConfigs(onFailureProcessorConfigs,processorFactories);
  if (config.isEmpty() == false) {
    throw new ElasticsearchParseException("pipeline [" + id + "] doesn't support one or more provided configuration parameters "+ Arrays.toString(config.keySet().toArray()));
  }
  if (onFailureProcessorConfigs != null && onFailureProcessors.isEmpty()) {
    throw new ElasticsearchParseException("pipeline [" + id + "] cannot have an empty on_failure option defined");
  }
  CompoundProcessor compoundProcessor=new CompoundProcessor(false,Collections.unmodifiableList(processors),Collections.unmodifiableList(onFailureProcessors));
  return new Pipeline(id,description,version,compoundProcessor);
}
