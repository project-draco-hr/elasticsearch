{
  final int p=randomIntBetween(MIN_PRECISION,MAX_PRECISION);
  final HyperLogLogPlusPlus single=new HyperLogLogPlusPlus(p,BigArrays.NON_RECYCLING_INSTANCE,0);
  final HyperLogLogPlusPlus[] multi=new HyperLogLogPlusPlus[randomIntBetween(2,100)];
  final long[] bucketOrds=new long[multi.length];
  for (int i=0; i < multi.length; ++i) {
    bucketOrds[i]=randomInt(20);
    multi[i]=new HyperLogLogPlusPlus(p,BigArrays.NON_RECYCLING_INSTANCE,5);
  }
  final int numValues=randomIntBetween(1,100000);
  final int maxValue=randomIntBetween(1,randomBoolean() ? 1000 : 1000000);
  for (int i=0; i < numValues; ++i) {
    final int n=randomInt(maxValue);
    final long hash=BitMixer.mix64(n);
    single.collect(0,hash);
    final int index=(int)(Math.pow(randomDouble(),2));
    multi[index].collect(bucketOrds[index],hash);
    if (randomInt(100) == 0) {
      HyperLogLogPlusPlus merged=new HyperLogLogPlusPlus(p,BigArrays.NON_RECYCLING_INSTANCE,0);
      for (int j=0; j < multi.length; ++j) {
        merged.merge(0,multi[j],bucketOrds[j]);
      }
      assertEquals(single.cardinality(0),merged.cardinality(0));
    }
  }
}
