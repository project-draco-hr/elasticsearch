{
  for (  String type : Arrays.asList("Byte","Int","Long","Float","Double","Object")) {
    final long maxSize=randomIntBetween(1 << 10,1 << 22);
    HierarchyCircuitBreakerService hcbs=new HierarchyCircuitBreakerService(Settings.builder().put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING,maxSize,ByteSizeUnit.BYTES).build(),new NodeSettingsService(Settings.EMPTY));
    BigArrays bigArrays=new BigArrays(null,hcbs).withCircuitBreaking();
    Method create=BigArrays.class.getMethod("new" + type + "Array",long.class);
    final int size=scaledRandomIntBetween(1,20);
    BigArray array=(BigArray)create.invoke(bigArrays,size);
    Method resize=BigArrays.class.getMethod("resize",array.getClass().getInterfaces()[0],long.class);
    while (true) {
      long newSize=array.size() * 2;
      try {
        array=(BigArray)resize.invoke(bigArrays,array,newSize);
      }
 catch (      InvocationTargetException e) {
        assertTrue(e.getCause() instanceof CircuitBreakingException);
        break;
      }
    }
    assertEquals(array.ramBytesUsed(),hcbs.getBreaker(CircuitBreaker.REQUEST).getUsed());
    array.close();
    assertEquals(0,hcbs.getBreaker(CircuitBreaker.REQUEST).getUsed());
  }
}
