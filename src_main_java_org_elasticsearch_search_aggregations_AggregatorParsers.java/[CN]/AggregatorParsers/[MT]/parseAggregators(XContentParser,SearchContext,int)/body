{
  Matcher validAggMatcher=VALID_AGG_NAME.matcher("");
  AggregatorFactories.Builder factories=new AggregatorFactories.Builder();
  XContentParser.Token token=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token != XContentParser.Token.FIELD_NAME) {
      throw new SearchParseException(context,"Unexpected token " + token + " in [aggs]: aggregations definitions must start with the name of the aggregation.");
    }
    final String aggregationName=parser.currentName();
    if (!validAggMatcher.reset(aggregationName).matches()) {
      throw new SearchParseException(context,"Invalid aggregation name [" + aggregationName + "]. Aggregation names must be alpha-numeric and can only contain '_' and '-'");
    }
    token=parser.nextToken();
    if (token != XContentParser.Token.START_OBJECT) {
      throw new SearchParseException(context,"Aggregation definition for [" + aggregationName + " starts with a ["+ token+ "], expected a ["+ XContentParser.Token.START_OBJECT+ "].");
    }
    AggregatorFactory aggFactory=null;
    ReducerFactory reducerFactory=null;
    AggregatorFactories subFactories=null;
    Map<String,Object> metaData=null;
    while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
      if (token != XContentParser.Token.FIELD_NAME) {
        throw new SearchParseException(context,"Expected [" + XContentParser.Token.FIELD_NAME + "] under a ["+ XContentParser.Token.START_OBJECT+ "], but got a ["+ token+ "] in ["+ aggregationName+ "]");
      }
      final String fieldName=parser.currentName();
      token=parser.nextToken();
      if (token != XContentParser.Token.START_OBJECT) {
        throw new SearchParseException(context,"Expected [" + XContentParser.Token.START_OBJECT + "] under ["+ fieldName+ "], but got a ["+ token+ "] in ["+ aggregationName+ "]");
      }
switch (fieldName) {
case "meta":
        metaData=parser.map();
      break;
case "aggregations":
case "aggs":
    if (subFactories != null) {
      throw new SearchParseException(context,"Found two sub aggregation definitions under [" + aggregationName + "]");
    }
  subFactories=parseAggregators(parser,context,level + 1);
break;
default :
if (aggFactory != null) {
throw new SearchParseException(context,"Found two aggregation type definitions in [" + aggregationName + "]: ["+ aggFactory.type+ "] and ["+ fieldName+ "]");
}
Aggregator.Parser aggregatorParser=parser(fieldName);
if (aggregatorParser == null) {
Reducer.Parser reducerParser=reducer(fieldName);
if (reducerParser == null) {
throw new SearchParseException(context,"Could not find aggregator type [" + fieldName + "] in ["+ aggregationName+ "]");
}
 else {
reducerFactory=reducerParser.parse(aggregationName,parser,context);
}
}
 else {
aggFactory=aggregatorParser.parse(aggregationName,parser,context);
}
}
}
if (aggFactory == null && reducerFactory == null) {
throw new SearchParseException(context,"Missing definition for aggregation [" + aggregationName + "]");
}
 else if (aggFactory != null) {
if (metaData != null) {
aggFactory.setMetaData(metaData);
}
if (subFactories != null) {
aggFactory.subFactories(subFactories);
}
if (level == 0) {
aggFactory.validate();
}
factories.addAggregator(aggFactory);
}
 else if (reducerFactory != null) {
if (subFactories != null) {
throw new SearchParseException(context,"Aggregation [" + aggregationName + "] cannot define sub-aggregations");
}
factories.addReducer(reducerFactory);
}
 else {
throw new SearchParseException(context,"Found two sub aggregation definitions under [" + aggregationName + "]");
}
}
return factories.build();
}
