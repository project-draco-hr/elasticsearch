{
  MockNode node=createMockNode("node");
  logger.info("--> testing acceptances of any master when having no master");
  ClusterState state=ClusterState.builder(node.clusterState).nodes(DiscoveryNodes.builder(node.nodes()).masterNodeId(randomAsciiOfLength(10))).build();
  node.action.validateIncomingState(state);
  node.clusterState=ClusterState.builder(node.clusterState).nodes(DiscoveryNodes.builder(node.nodes()).masterNodeId("master")).build();
  logger.info("--> testing rejection of another master");
  try {
    node.action.validateIncomingState(state);
    fail("node accepted state from another master");
  }
 catch (  IllegalStateException OK) {
  }
  logger.info("--> test state from the current master is accepted");
  node.action.validateIncomingState(ClusterState.builder(node.clusterState).nodes(DiscoveryNodes.builder(node.nodes()).masterNodeId("master")).build());
  logger.info("--> testing rejection of another cluster name");
  try {
    node.action.validateIncomingState(ClusterState.builder(new ClusterName(randomAsciiOfLength(10))).nodes(node.nodes()).build());
    fail("node accepted state with another cluster name");
  }
 catch (  IllegalStateException OK) {
  }
  logger.info("--> testing rejection of a cluster state with wrong local node");
  try {
    state=ClusterState.builder(node.clusterState).nodes(DiscoveryNodes.builder(node.nodes()).localNodeId("_non_existing_").build()).build();
    node.action.validateIncomingState(state);
    fail("node accepted state with non-existence local node");
  }
 catch (  IllegalStateException OK) {
  }
  try {
    MockNode otherNode=createMockNode("otherNode");
    state=ClusterState.builder(node.clusterState).nodes(DiscoveryNodes.builder(node.nodes()).put(otherNode.discoveryNode).localNodeId(otherNode.discoveryNode.id()).build()).build();
    node.action.validateIncomingState(state);
    fail("node accepted state with existent but wrong local node");
  }
 catch (  IllegalStateException OK) {
  }
}
