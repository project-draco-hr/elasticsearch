{
  super(settings);
  this.indexShards=indexServices;
  ByteSizeValue indexingBuffer;
  String indexingBufferSetting=INDEX_BUFFER_SIZE_SETTING.get(settings);
  if (indexingBufferSetting.endsWith("%")) {
    double percent=Double.parseDouble(indexingBufferSetting.substring(0,indexingBufferSetting.length() - 1));
    indexingBuffer=new ByteSizeValue((long)(((double)jvmMemoryInBytes) * (percent / 100)));
    ByteSizeValue minIndexingBuffer=MIN_INDEX_BUFFER_SIZE_SETTING.get(this.settings);
    ByteSizeValue maxIndexingBuffer=MAX_INDEX_BUFFER_SIZE_SETTING.get(this.settings);
    if (indexingBuffer.bytes() < minIndexingBuffer.bytes()) {
      indexingBuffer=minIndexingBuffer;
    }
    if (maxIndexingBuffer.bytes() != -1 && indexingBuffer.bytes() > maxIndexingBuffer.bytes()) {
      indexingBuffer=maxIndexingBuffer;
    }
  }
 else {
    indexingBuffer=ByteSizeValue.parseBytesSizeValue(indexingBufferSetting,INDEX_BUFFER_SIZE_SETTING.getKey());
  }
  this.indexingBuffer=indexingBuffer;
  this.inactiveTime=SHARD_INACTIVE_TIME_SETTING.get(this.settings);
  this.interval=SHARD_MEMORY_INTERVAL_TIME_SETTING.get(this.settings);
  this.statusChecker=new ShardsIndicesStatusChecker();
  logger.debug("using indexing buffer size [{}] with {} [{}], {} [{}]",this.indexingBuffer,SHARD_INACTIVE_TIME_SETTING.getKey(),this.inactiveTime,SHARD_MEMORY_INTERVAL_TIME_SETTING.getKey(),this.interval);
  this.scheduler=scheduleTask(threadPool);
  this.threadPool=threadPool;
}
