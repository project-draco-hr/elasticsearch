{
  super(settings);
  this.indicesService=indicesService;
  ByteSizeValue indexingBuffer;
  String indexingBufferSetting=this.settings.get(INDEX_BUFFER_SIZE_SETTING,"10%");
  if (indexingBufferSetting.endsWith("%")) {
    double percent=Double.parseDouble(indexingBufferSetting.substring(0,indexingBufferSetting.length() - 1));
    indexingBuffer=new ByteSizeValue((long)(((double)jvmMemoryInBytes) * (percent / 100)));
    ByteSizeValue minIndexingBuffer=this.settings.getAsBytesSize(MIN_INDEX_BUFFER_SIZE_SETTING,new ByteSizeValue(48,ByteSizeUnit.MB));
    ByteSizeValue maxIndexingBuffer=this.settings.getAsBytesSize(MAX_INDEX_BUFFER_SIZE_SETTING,null);
    if (indexingBuffer.bytes() < minIndexingBuffer.bytes()) {
      indexingBuffer=minIndexingBuffer;
    }
    if (maxIndexingBuffer != null && indexingBuffer.bytes() > maxIndexingBuffer.bytes()) {
      indexingBuffer=maxIndexingBuffer;
    }
  }
 else {
    indexingBuffer=ByteSizeValue.parseBytesSizeValue(indexingBufferSetting,INDEX_BUFFER_SIZE_SETTING);
  }
  this.indexingBuffer=indexingBuffer;
  this.minShardIndexBufferSize=this.settings.getAsBytesSize(MIN_SHARD_INDEX_BUFFER_SIZE_SETTING,new ByteSizeValue(4,ByteSizeUnit.MB));
  this.maxShardIndexBufferSize=this.settings.getAsBytesSize(MAX_SHARD_INDEX_BUFFER_SIZE_SETTING,new ByteSizeValue(512,ByteSizeUnit.MB));
  this.interval=this.settings.getAsTime(SHARD_INACTIVE_INTERVAL_TIME_SETTING,TimeValue.timeValueSeconds(30));
  this.statusChecker=new ShardsIndicesStatusChecker();
  logger.debug("using indexing buffer size [{}], with {} [{}], {} [{}], {} [{}]",this.indexingBuffer,MIN_SHARD_INDEX_BUFFER_SIZE_SETTING,this.minShardIndexBufferSize,MAX_SHARD_INDEX_BUFFER_SIZE_SETTING,this.maxShardIndexBufferSize,SHARD_INACTIVE_INTERVAL_TIME_SETTING,this.interval);
  this.scheduler=scheduleTask(threadPool);
}
