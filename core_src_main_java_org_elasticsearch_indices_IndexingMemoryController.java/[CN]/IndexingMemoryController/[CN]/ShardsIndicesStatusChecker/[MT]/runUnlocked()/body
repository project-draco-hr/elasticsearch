{
  long totalBytesUsed=0;
  long totalBytesWriting=0;
  for (  IndexShard shard : availableShards()) {
    checkIdle(shard,inactiveTime.nanos());
    long shardWritingBytes=getShardWritingBytes(shard);
    long shardBytesUsed=getIndexBufferRAMBytesUsed(shard);
    shardBytesUsed-=shardWritingBytes;
    totalBytesWriting+=shardWritingBytes;
    if (shardBytesUsed < 0) {
      continue;
    }
    totalBytesUsed+=shardBytesUsed;
  }
  if (logger.isTraceEnabled()) {
    logger.trace("total indexing heap bytes used [{}] vs {} [{}], currently writing bytes [{}]",new ByteSizeValue(totalBytesUsed),INDEX_BUFFER_SIZE_SETTING.getKey(),indexingBuffer,new ByteSizeValue(totalBytesWriting));
  }
  boolean doThrottle=(totalBytesWriting + totalBytesUsed) > 1.5 * indexingBuffer.bytes();
  if (totalBytesUsed > indexingBuffer.bytes()) {
    PriorityQueue<ShardAndBytesUsed> queue=new PriorityQueue<>();
    for (    IndexShard shard : availableShards()) {
      long shardWritingBytes=getShardWritingBytes(shard);
      long shardBytesUsed=getIndexBufferRAMBytesUsed(shard);
      shardBytesUsed-=shardWritingBytes;
      if (shardBytesUsed < 0) {
        continue;
      }
      if (shardBytesUsed > 0) {
        if (logger.isTraceEnabled()) {
          if (shardWritingBytes != 0) {
            logger.trace("shard [{}] is using [{}] heap, writing [{}] heap",shard.shardId(),shardBytesUsed,shardWritingBytes);
          }
 else {
            logger.trace("shard [{}] is using [{}] heap, not writing any bytes",shard.shardId(),shardBytesUsed);
          }
        }
        queue.add(new ShardAndBytesUsed(shardBytesUsed,shard));
      }
    }
    logger.debug("now write some indexing buffers: total indexing heap bytes used [{}] vs {} [{}], currently writing bytes [{}], [{}] shards with non-zero indexing buffer",new ByteSizeValue(totalBytesUsed),INDEX_BUFFER_SIZE_SETTING.getKey(),indexingBuffer,new ByteSizeValue(totalBytesWriting),queue.size());
    while (totalBytesUsed > indexingBuffer.bytes() && queue.isEmpty() == false) {
      ShardAndBytesUsed largest=queue.poll();
      logger.debug("write indexing buffer to disk for shard [{}] to free up its [{}] indexing buffer",largest.shard.shardId(),new ByteSizeValue(largest.bytesUsed));
      writeIndexingBufferAsync(largest.shard);
      totalBytesUsed-=largest.bytesUsed;
      if (doThrottle && throttled.contains(largest.shard) == false) {
        logger.info("now throttling indexing for shard [{}]: segment writing can't keep up",largest.shard.shardId());
        throttled.add(largest.shard);
        activateThrottling(largest.shard);
      }
    }
  }
  if (doThrottle == false) {
    for (    IndexShard shard : throttled) {
      logger.info("stop throttling indexing for shard [{}]",shard.shardId());
      deactivateThrottling(shard);
    }
    throttled.clear();
  }
}
