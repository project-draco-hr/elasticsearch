{
  RestController restController=new RestController(Settings.EMPTY);
  int numFilters=randomInt(10);
  Set<Integer> orders=new HashSet<>(numFilters);
  while (orders.size() < numFilters) {
    orders.add(randomInt(10));
  }
  List<RestFilter> filters=new ArrayList<>();
  for (  Integer order : orders) {
    TestFilter testFilter=new TestFilter(order,randomFrom(Operation.values()));
    filters.add(testFilter);
    restController.registerFilter(testFilter);
  }
  ArrayList<RestFilter> restFiltersByOrder=Lists.newArrayList(filters);
  Collections.sort(restFiltersByOrder,new Comparator<RestFilter>(){
    @Override public int compare(    RestFilter o1,    RestFilter o2){
      return Integer.compare(o1.order(),o2.order());
    }
  }
);
  List<RestFilter> expectedRestFilters=Lists.newArrayList();
  for (  RestFilter filter : restFiltersByOrder) {
    TestFilter testFilter=(TestFilter)filter;
    expectedRestFilters.add(testFilter);
    if (!(testFilter.callback == Operation.CONTINUE_PROCESSING)) {
      break;
    }
  }
  restController.registerHandler(RestRequest.Method.GET,"/",new RestHandler(){
    @Override public void handleRequest(    RestRequest request,    RestChannel channel) throws Exception {
      channel.sendResponse(new TestResponse());
    }
  }
);
  FakeRestRequest fakeRestRequest=new FakeRestRequest();
  FakeRestChannel fakeRestChannel=new FakeRestChannel(fakeRestRequest,1);
  restController.dispatchRequest(fakeRestRequest,fakeRestChannel);
  assertThat(fakeRestChannel.await(),equalTo(true));
  List<TestFilter> testFiltersByLastExecution=Lists.newArrayList();
  for (  RestFilter restFilter : filters) {
    testFiltersByLastExecution.add((TestFilter)restFilter);
  }
  Collections.sort(testFiltersByLastExecution,new Comparator<TestFilter>(){
    @Override public int compare(    TestFilter o1,    TestFilter o2){
      return Long.compare(o1.executionToken,o2.executionToken);
    }
  }
);
  ArrayList<TestFilter> finalTestFilters=Lists.newArrayList();
  for (  RestFilter filter : testFiltersByLastExecution) {
    TestFilter testFilter=(TestFilter)filter;
    finalTestFilters.add(testFilter);
    if (!(testFilter.callback == Operation.CONTINUE_PROCESSING)) {
      break;
    }
  }
  assertThat(finalTestFilters.size(),equalTo(expectedRestFilters.size()));
  for (int i=0; i < finalTestFilters.size(); i++) {
    TestFilter testFilter=finalTestFilters.get(i);
    assertThat(testFilter,equalTo(expectedRestFilters.get(i)));
    assertThat(testFilter.runs.get(),equalTo(1));
  }
}
