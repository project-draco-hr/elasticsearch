{
  internalCluster().startNode(settingsBuilder().put("node.stay",true));
  internalCluster().startNode(settingsBuilder().put("node.stay",false));
  internalCluster().startNode(settingsBuilder().put("node.stay",false));
  ensureGreen();
  client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards",2).put("index.number_of_replicas",2)).get();
  ensureGreen();
  final Client client=internalCluster().client(new Predicate<Settings>(){
    @Override public boolean apply(    Settings input){
      return input.getAsBoolean("node.stay",true);
    }
  }
);
  final int numQueries=randomIntBetween(50,100);
  logger.info("--> register a queries");
  for (int i=0; i < numQueries; i++) {
    client.prepareIndex("test",PercolatorService.TYPE_NAME,Integer.toString(i)).setSource(jsonBuilder().startObject().field("query",matchAllQuery()).endObject()).get();
  }
  final String document="{\"field\" : \"a\"}";
  client.prepareIndex("test","type","1").setSource(document).get();
  final AtomicBoolean run=new AtomicBoolean(true);
  final AtomicReference<Throwable> error=new AtomicReference<>();
  Runnable r=new Runnable(){
    @Override public void run(){
      try {
        while (run.get()) {
          if (multiPercolate) {
            MultiPercolateRequestBuilder builder=client.prepareMultiPercolate();
            int numPercolateRequest=randomIntBetween(50,100);
            for (int i=0; i < numPercolateRequest; i++) {
              PercolateRequestBuilder percolateBuilder=client.preparePercolate().setIndices("test").setDocumentType("type");
              if (randomBoolean()) {
                percolateBuilder.setGetRequest(Requests.getRequest("test").type("type").id("1"));
              }
 else {
                percolateBuilder.setPercolateDoc(docBuilder().setDoc(document));
              }
              builder.add(percolateBuilder);
            }
            MultiPercolateResponse response=builder.get();
            assertThat(response.items().length,equalTo(numPercolateRequest));
            for (            MultiPercolateResponse.Item item : response) {
              assertThat(item.isFailure(),equalTo(false));
              assertNoFailures(item.getResponse());
              assertThat(item.getResponse().getSuccessfulShards(),equalTo(item.getResponse().getTotalShards()));
              assertThat(item.getResponse().getCount(),equalTo((long)numQueries));
              assertThat(item.getResponse().getMatches().length,equalTo(numQueries));
            }
          }
 else {
            PercolateRequestBuilder percolateBuilder=client.preparePercolate().setIndices("test").setDocumentType("type");
            if (randomBoolean()) {
              percolateBuilder.setPercolateDoc(docBuilder().setDoc(document));
            }
 else {
              percolateBuilder.setGetRequest(Requests.getRequest("test").type("type").id("1"));
            }
            PercolateResponse response=percolateBuilder.get();
            assertNoFailures(response);
            assertThat(response.getSuccessfulShards(),equalTo(response.getTotalShards()));
            assertThat(response.getCount(),equalTo((long)numQueries));
            assertThat(response.getMatches().length,equalTo(numQueries));
          }
        }
      }
 catch (      Throwable t) {
        logger.info("Error in percolate thread...",t);
        run.set(false);
        error.set(t);
      }
    }
  }
;
  Thread t=new Thread(r);
  t.start();
  Predicate<Settings> nodePredicate=new Predicate<Settings>(){
    @Override public boolean apply(    Settings input){
      return !input.getAsBoolean("node.stay",false);
    }
  }
;
  try {
    for (int i=0; i < 4; i++) {
      internalCluster().stopRandomNode(nodePredicate);
      client.admin().cluster().prepareHealth("test").setWaitForEvents(Priority.LANGUID).setTimeout(TimeValue.timeValueMinutes(2)).setWaitForYellowStatus().setWaitForActiveShards(4).get();
      assertThat(error.get(),nullValue());
      internalCluster().stopRandomNode(nodePredicate);
      client.admin().cluster().prepareHealth("test").setWaitForEvents(Priority.LANGUID).setTimeout(TimeValue.timeValueMinutes(2)).setWaitForYellowStatus().setWaitForActiveShards(2).get();
      assertThat(error.get(),nullValue());
      internalCluster().startNode();
      client.admin().cluster().prepareHealth("test").setWaitForEvents(Priority.LANGUID).setTimeout(TimeValue.timeValueMinutes(2)).setWaitForYellowStatus().setWaitForActiveShards(4).get();
      assertThat(error.get(),nullValue());
      internalCluster().startNode();
      client.admin().cluster().prepareHealth("test").setWaitForEvents(Priority.LANGUID).setTimeout(TimeValue.timeValueMinutes(2)).setWaitForGreenStatus().setWaitForActiveShards(6).get();
      assertThat(error.get(),nullValue());
    }
  }
  finally {
    run.set(false);
  }
  t.join();
  assertThat(error.get(),nullValue());
}
