{
  if ("param".equals(catchParam)) {
    logger.info("found [catch: param], no request sent");
    return;
  }
  try {
    ClientYamlTestResponse response=executionContext.callApi(apiCallSection.getApi(),apiCallSection.getParams(),apiCallSection.getBodies(),apiCallSection.getHeaders());
    if (Strings.hasLength(catchParam)) {
      String catchStatusCode;
      if (catches.containsKey(catchParam)) {
        catchStatusCode=catches.get(catchParam).v1();
      }
 else       if (catchParam.startsWith("/") && catchParam.endsWith("/")) {
        catchStatusCode="4xx|5xx";
      }
 else {
        throw new UnsupportedOperationException("catch value [" + catchParam + "] not supported");
      }
      fail(formatStatusCodeMessage(response,catchStatusCode));
    }
    checkWarningHeaders(response.getWarningHeaders());
  }
 catch (  ClientYamlTestResponseException e) {
    ClientYamlTestResponse restTestResponse=e.getRestTestResponse();
    if (!Strings.hasLength(catchParam)) {
      fail(formatStatusCodeMessage(restTestResponse,"2xx"));
    }
 else     if (catches.containsKey(catchParam)) {
      assertStatusCode(restTestResponse);
    }
 else     if (catchParam.length() > 2 && catchParam.startsWith("/") && catchParam.endsWith("/")) {
      assertThat(formatStatusCodeMessage(restTestResponse,"4xx|5xx"),e.getResponseException().getResponse().getStatusLine().getStatusCode(),greaterThanOrEqualTo(400));
      Object error=executionContext.response("error");
      assertThat("error was expected in the response",error,notNullValue());
      String regex=catchParam.substring(1,catchParam.length() - 1);
      assertThat("the error message was expected to match the provided regex but didn't",error.toString(),matches(regex));
    }
 else {
      throw new UnsupportedOperationException("catch value [" + catchParam + "] not supported");
    }
  }
}
