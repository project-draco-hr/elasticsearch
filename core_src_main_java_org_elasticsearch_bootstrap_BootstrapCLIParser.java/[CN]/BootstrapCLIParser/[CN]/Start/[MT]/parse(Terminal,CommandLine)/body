{
  if (cli.hasOption("V")) {
    return Version.parse(terminal,cli);
  }
  if (cli.hasOption("d")) {
    System.setProperty("es.foreground","false");
  }
  String pidFile=cli.getOptionValue("pidfile");
  if (!Strings.isNullOrEmpty(pidFile)) {
    System.setProperty("es.pidfile",pidFile);
  }
  if (cli.hasOption("D")) {
    Properties properties=cli.getOptionProperties("D");
    for (    Map.Entry<Object,Object> entry : properties.entrySet()) {
      String key=(String)entry.getKey();
      String propertyName=key.startsWith("es.") ? key : "es." + key;
      System.setProperty(propertyName,entry.getValue().toString());
    }
  }
  Iterator<String> iterator=cli.getArgList().iterator();
  final Map<String,String> properties=new HashMap<>();
  while (iterator.hasNext()) {
    String arg=iterator.next();
    if (!arg.startsWith("--")) {
      if (arg.startsWith("-D") || arg.startsWith("-d") || arg.startsWith("-p")) {
        throw new UserError(ExitStatus.USAGE,"Parameter [" + arg + "] starting with \"-D\", \"-d\" or \"-p\" must be before any parameters starting with --");
      }
 else {
        throw new UserError(ExitStatus.USAGE,"Parameter [" + arg + "]does not start with --");
      }
    }
    arg=arg.replace("--","");
    if (arg.contains("=")) {
      String[] splitArg=arg.split("=",2);
      String key=splitArg[0];
      String value=splitArg[1];
      properties.put("es." + key,value);
    }
 else {
      if (iterator.hasNext()) {
        String value=iterator.next();
        if (value.startsWith("--")) {
          throw new UserError(ExitStatus.USAGE,"Parameter [" + arg + "] needs value");
        }
        properties.put("es." + arg,value);
      }
 else {
        throw new UserError(ExitStatus.USAGE,"Parameter [" + arg + "] needs value");
      }
    }
  }
  for (  Map.Entry<String,String> entry : properties.entrySet()) {
    System.setProperty(entry.getKey(),entry.getValue());
  }
  return new Start(terminal);
}
