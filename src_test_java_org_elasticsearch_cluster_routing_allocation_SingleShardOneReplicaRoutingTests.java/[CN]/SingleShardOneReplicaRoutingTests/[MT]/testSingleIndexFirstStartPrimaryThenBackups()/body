{
  AllocationService strategy=createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries",10).build());
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").numberOfShards(1).numberOfReplicas(1)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build();
  assertThat(routingTable.index("test").shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).size(),equalTo(2));
  assertThat(routingTable.index("test").shard(0).shards().size(),equalTo(2));
  assertThat(routingTable.index("test").shard(0).shards().get(0).state(),equalTo(UNASSIGNED));
  assertThat(routingTable.index("test").shard(0).shards().get(1).state(),equalTo(UNASSIGNED));
  assertThat(routingTable.index("test").shard(0).shards().get(0).currentNodeId(),nullValue());
  assertThat(routingTable.index("test").shard(0).shards().get(1).currentNodeId(),nullValue());
  logger.info("Adding one node and performing rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1"))).build();
  RoutingTable prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).size(),equalTo(2));
  assertThat(routingTable.index("test").shard(0).shards().size(),equalTo(2));
  assertThat(routingTable.index("test").shard(0).primaryShard().state(),equalTo(INITIALIZING));
  assertThat(routingTable.index("test").shard(0).primaryShard().currentNodeId(),equalTo("node1"));
  assertThat(routingTable.index("test").shard(0).replicaShards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).replicaShards().get(0).state(),equalTo(UNASSIGNED));
  assertThat(routingTable.index("test").shard(0).replicaShards().get(0).currentNodeId(),nullValue());
  logger.info("Add another node and perform rerouting, nothing will happen since primary shards not started");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).put(newNode("node2"))).build();
  prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable == routingTable,equalTo(true));
  logger.info("Start the primary shard (on node1)");
  RoutingNodes routingNodes=clusterState.routingNodes();
  prevRoutingTable=routingTable;
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.node("node1").shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).size(),equalTo(2));
  assertThat(routingTable.index("test").shard(0).shards().size(),equalTo(2));
  assertThat(routingTable.index("test").shard(0).primaryShard().state(),equalTo(STARTED));
  assertThat(routingTable.index("test").shard(0).primaryShard().currentNodeId(),equalTo("node1"));
  assertThat(routingTable.index("test").shard(0).replicaShards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).replicaShards().get(0).state(),equalTo(INITIALIZING));
  assertThat(routingTable.index("test").shard(0).replicaShards().get(0).currentNodeId(),equalTo("node2"));
  logger.info("Reroute, nothing should change");
  prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState).routingTable();
  assertThat(prevRoutingTable == routingTable,equalTo(true));
  logger.info("Start the backup shard");
  routingNodes=clusterState.routingNodes();
  prevRoutingTable=routingTable;
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.node("node2").shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).size(),equalTo(2));
  assertThat(routingTable.index("test").shard(0).shards().size(),equalTo(2));
  assertThat(routingTable.index("test").shard(0).primaryShard().state(),equalTo(STARTED));
  assertThat(routingTable.index("test").shard(0).primaryShard().currentNodeId(),equalTo("node1"));
  assertThat(routingTable.index("test").shard(0).replicaShards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).replicaShards().get(0).state(),equalTo(STARTED));
  assertThat(routingTable.index("test").shard(0).replicaShards().get(0).currentNodeId(),equalTo("node2"));
  logger.info("Kill node1, backup shard should become primary");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove("node1")).build();
  prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).size(),equalTo(2));
  assertThat(routingTable.index("test").shard(0).shards().size(),equalTo(2));
  assertThat(routingTable.index("test").shard(0).primaryShard().state(),equalTo(STARTED));
  assertThat(routingTable.index("test").shard(0).primaryShard().currentNodeId(),equalTo("node2"));
  assertThat(routingTable.index("test").shard(0).replicaShards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).replicaShards().get(0).state(),equalTo(UNASSIGNED));
  assertThat(routingTable.index("test").shard(0).replicaShards().get(0).currentNodeId(),nullValue());
  logger.info("Start another node, backup shard should start initializing");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).put(newNode("node3"))).build();
  prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).size(),equalTo(2));
  assertThat(routingTable.index("test").shard(0).shards().size(),equalTo(2));
  assertThat(routingTable.index("test").shard(0).primaryShard().state(),equalTo(STARTED));
  assertThat(routingTable.index("test").shard(0).primaryShard().currentNodeId(),equalTo("node2"));
  assertThat(routingTable.index("test").shard(0).replicaShards().size(),equalTo(1));
  assertThat(routingTable.index("test").shard(0).replicaShards().get(0).state(),equalTo(INITIALIZING));
  assertThat(routingTable.index("test").shard(0).replicaShards().get(0).currentNodeId(),equalTo("node3"));
}
