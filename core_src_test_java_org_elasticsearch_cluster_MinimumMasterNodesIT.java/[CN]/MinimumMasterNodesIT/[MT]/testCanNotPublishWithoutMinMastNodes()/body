{
  Settings settings=Settings.builder().put("discovery.type","zen").put(ZenDiscovery.PING_TIMEOUT_SETTING.getKey(),"200ms").put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(),2).put(DiscoverySettings.COMMIT_TIMEOUT_SETTING.getKey(),"100ms").build();
  internalCluster().startNodesAsync(3,settings).get();
  ensureGreen();
  final String master=internalCluster().getMasterName();
  Set<String> otherNodes=new HashSet<>(Arrays.asList(internalCluster().getNodeNames()));
  otherNodes.remove(master);
  NetworkDisruption partition=new NetworkDisruption(new TwoPartitions(Collections.singleton(master),otherNodes),new NetworkDelay(TimeValue.timeValueMinutes(1)));
  internalCluster().setDisruptionScheme(partition);
  final CountDownLatch latch=new CountDownLatch(1);
  final AtomicReference<Exception> failure=new AtomicReference<>();
  logger.debug("--> submitting for cluster state to be rejected");
  final ClusterService masterClusterService=internalCluster().clusterService(master);
  masterClusterService.submitStateUpdateTask("test",new ClusterStateUpdateTask(){
    @Override public void clusterStateProcessed(    String source,    ClusterState oldState,    ClusterState newState){
      latch.countDown();
    }
    @Override public ClusterState execute(    ClusterState currentState) throws Exception {
      logger.debug("--> starting the disruption, preventing cluster state publishing");
      partition.startDisrupting();
      MetaData.Builder metaData=MetaData.builder(currentState.metaData()).persistentSettings(Settings.builder().put(currentState.metaData().persistentSettings()).put("_SHOULD_NOT_BE_THERE_",true).build());
      return ClusterState.builder(currentState).metaData(metaData).build();
    }
    @Override public void onFailure(    String source,    Exception e){
      failure.set(e);
      latch.countDown();
    }
  }
);
  logger.debug("--> waiting for cluster state to be processed/rejected");
  latch.await();
  assertThat(failure.get(),instanceOf(Discovery.FailedToCommitClusterStateException.class));
  assertBusy(new Runnable(){
    @Override public void run(){
      assertThat(masterClusterService.state().nodes().getMasterNode(),nullValue());
    }
  }
);
  partition.stopDisrupting();
  logger.debug("--> waiting for cluster to heal");
  assertNoTimeout(client().admin().cluster().prepareHealth().setWaitForNodes("3").setWaitForEvents(Priority.LANGUID));
  for (  String node : internalCluster().getNodeNames()) {
    Settings nodeSetting=internalCluster().clusterService(node).state().metaData().settings();
    assertThat(node + " processed the cluster state despite of a min master node violation",nodeSetting.get("_SHOULD_NOT_BE_THERE_"),nullValue());
  }
}
