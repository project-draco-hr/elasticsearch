{
  logger.info("Removing [{}] nodes",numNodes);
  DiscoveryNodes.Builder nodes=DiscoveryNodes.builder(clusterState.nodes());
  for (  DiscoveryNode node : clusterState.nodes()) {
    nodes.remove(node.id());
    numNodes--;
    if (numNodes <= 0) {
      break;
    }
  }
  clusterState=ClusterState.builder(clusterState).nodes(nodes.build()).build();
  RoutingNodes routingNodes=clusterState.routingNodes();
  logger.info("start all the primary shards, replicas will start initializing");
  RoutingTable routingTable=service.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  routingNodes=clusterState.routingNodes();
  logger.info("start the replica shards");
  routingTable=service.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  routingNodes=clusterState.routingNodes();
  logger.info("rebalancing");
  routingTable=service.reroute(clusterState).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  routingNodes=clusterState.routingNodes();
  logger.info("complete rebalancing");
  RoutingTable prev=routingTable;
  while (true) {
    routingTable=service.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
    clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
    routingNodes=clusterState.routingNodes();
    if (routingTable == prev)     break;
    prev=routingTable;
  }
  return clusterState;
}
