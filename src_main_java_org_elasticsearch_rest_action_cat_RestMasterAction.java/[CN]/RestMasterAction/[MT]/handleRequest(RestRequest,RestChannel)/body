{
  final boolean verbose=request.paramAsBoolean("verbose",false);
  final StringBuilder out=new StringBuilder();
  final ClusterStateRequest clusterStateRequest=new ClusterStateRequest();
  clusterStateRequest.listenerThreaded(false);
  clusterStateRequest.filterMetaData(true);
  clusterStateRequest.local(false);
  client.admin().cluster().state(clusterStateRequest,new ActionListener<ClusterStateResponse>(){
    @Override public void onResponse(    final ClusterStateResponse clusterStateResponse){
      try {
        RestStatus status=RestStatus.OK;
        Table tab=new Table();
        tab.addRow(new Row().addCell("id").addCell("transport addr").addCell("name"),true);
        tab.addRow(new Row().addCell(clusterStateResponse.getState().nodes().masterNode().id()).addCell(((InetSocketTransportAddress)clusterStateResponse.getState().nodes().masterNode().address()).address().getAddress().getHostAddress()).addCell(clusterStateResponse.getState().nodes().masterNode().name()));
        channel.sendResponse(new StringRestResponse(status,tab.render(verbose)));
      }
 catch (      Throwable e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
