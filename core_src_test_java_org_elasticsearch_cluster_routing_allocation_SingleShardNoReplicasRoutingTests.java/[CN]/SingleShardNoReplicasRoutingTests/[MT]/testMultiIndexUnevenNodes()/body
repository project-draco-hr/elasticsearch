{
  AllocationService strategy=createAllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries",10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),"always").put("cluster.routing.allocation.cluster_concurrent_rebalance",-1).build());
  final int numberOfIndices=10;
  logger.info("Building initial routing table with " + numberOfIndices + " indices");
  MetaData.Builder metaDataBuilder=MetaData.builder();
  for (int i=0; i < numberOfIndices; i++) {
    metaDataBuilder.put(IndexMetaData.builder("test" + i).settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0));
  }
  MetaData metaData=metaDataBuilder.build();
  RoutingTable.Builder routingTableBuilder=RoutingTable.builder();
  for (int i=0; i < numberOfIndices; i++) {
    routingTableBuilder.addAsNew(metaData.index("test" + i));
  }
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTableBuilder.build()).build();
  assertThat(clusterState.routingTable().indicesRouting().size(),equalTo(numberOfIndices));
  logger.info("Starting 3 nodes and rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2")).add(newNode("node3"))).build();
  ClusterState newState=strategy.reroute(clusterState,"reroute");
  assertThat(newState,not(equalTo(clusterState)));
  clusterState=newState;
  for (int i=0; i < numberOfIndices; i++) {
    assertThat(clusterState.routingTable().index("test" + i).shards().size(),equalTo(1));
    assertThat(clusterState.routingTable().index("test" + i).shard(0).size(),equalTo(1));
    assertThat(clusterState.routingTable().index("test" + i).shard(0).shards().size(),equalTo(1));
    assertThat(clusterState.routingTable().index("test" + i).shard(0).shards().get(0).state(),equalTo(INITIALIZING));
  }
  RoutingNodes routingNodes=clusterState.getRoutingNodes();
  assertThat(numberOfShardsOfType(routingNodes,INITIALIZING),equalTo(numberOfIndices));
  assertThat(routingNodes.node("node1").numberOfShardsWithState(INITIALIZING),anyOf(equalTo(3),equalTo(4)));
  assertThat(routingNodes.node("node2").numberOfShardsWithState(INITIALIZING),anyOf(equalTo(3),equalTo(4)));
  assertThat(routingNodes.node("node2").numberOfShardsWithState(INITIALIZING),anyOf(equalTo(3),equalTo(4)));
  logger.info("Start two more nodes, things should remain the same");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode("node4")).add(newNode("node5"))).build();
  newState=strategy.reroute(clusterState,"reroute");
  assertThat(newState,equalTo(clusterState));
  clusterState=newState;
  routingNodes=clusterState.getRoutingNodes();
  newState=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  assertThat(newState,not(equalTo(clusterState)));
  clusterState=newState;
  for (int i=0; i < numberOfIndices; i++) {
    assertThat(clusterState.routingTable().index("test" + i).shards().size(),equalTo(1));
    assertThat(clusterState.routingTable().index("test" + i).shard(0).size(),equalTo(1));
    assertThat(clusterState.routingTable().index("test" + i).shard(0).shards().size(),equalTo(1));
    assertThat(clusterState.routingTable().index("test" + i).shard(0).shards().get(0).state(),anyOf(equalTo(RELOCATING),equalTo(STARTED)));
  }
  routingNodes=clusterState.getRoutingNodes();
  assertThat("4 source shard routing are relocating",numberOfShardsOfType(routingNodes,RELOCATING),equalTo(4));
  assertThat("4 target shard routing are initializing",numberOfShardsOfType(routingNodes,INITIALIZING),equalTo(4));
  logger.info("Now, mark the relocated as started");
  newState=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  assertThat(newState,not(equalTo(clusterState)));
  clusterState=newState;
  for (int i=0; i < numberOfIndices; i++) {
    assertThat(clusterState.routingTable().index("test" + i).shards().size(),equalTo(1));
    assertThat(clusterState.routingTable().index("test" + i).shard(0).size(),equalTo(1));
    assertThat(clusterState.routingTable().index("test" + i).shard(0).shards().size(),equalTo(1));
    assertThat(clusterState.routingTable().index("test" + i).shard(0).shards().get(0).state(),anyOf(equalTo(RELOCATING),equalTo(STARTED)));
  }
  routingNodes=clusterState.getRoutingNodes();
  assertThat(numberOfShardsOfType(routingNodes,STARTED),equalTo(numberOfIndices));
  for (  RoutingNode routingNode : routingNodes) {
    assertThat(routingNode.numberOfShardsWithState(STARTED),equalTo(2));
  }
}
