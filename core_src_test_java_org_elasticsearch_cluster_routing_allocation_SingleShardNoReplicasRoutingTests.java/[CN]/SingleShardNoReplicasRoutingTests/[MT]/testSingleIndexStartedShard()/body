{
  AllocationService strategy=createAllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries",10).build());
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0)).build();
  RoutingTable initialRoutingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();
  assertThat(clusterState.routingTable().index("test").shards().size(),equalTo(1));
  assertThat(clusterState.routingTable().index("test").shard(0).size(),equalTo(1));
  assertThat(clusterState.routingTable().index("test").shard(0).shards().size(),equalTo(1));
  assertThat(clusterState.routingTable().index("test").shard(0).shards().get(0).state(),equalTo(UNASSIGNED));
  assertThat(clusterState.routingTable().index("test").shard(0).shards().get(0).currentNodeId(),nullValue());
  logger.info("Adding one node and performing rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1"))).build();
  clusterState=strategy.reroute(clusterState,"reroute");
  assertThat(clusterState.routingTable().index("test").shards().size(),equalTo(1));
  assertThat(clusterState.routingTable().index("test").shard(0).size(),equalTo(1));
  assertThat(clusterState.routingTable().index("test").shard(0).shards().size(),equalTo(1));
  assertThat(clusterState.routingTable().index("test").shard(0).shards().get(0).state(),equalTo(INITIALIZING));
  assertThat(clusterState.routingTable().index("test").shard(0).shards().get(0).currentNodeId(),equalTo("node1"));
  logger.info("Rerouting again, nothing should change");
  clusterState=ClusterState.builder(clusterState).build();
  ClusterState newState=strategy.reroute(clusterState,"reroute");
  assertThat(newState,equalTo(clusterState));
  clusterState=newState;
  logger.info("Marking the shard as started");
  RoutingNodes routingNodes=clusterState.getRoutingNodes();
  newState=strategy.applyStartedShards(clusterState,routingNodes.node("node1").shardsWithState(INITIALIZING));
  assertThat(newState,not(equalTo(clusterState)));
  clusterState=newState;
  assertThat(clusterState.routingTable().index("test").shards().size(),equalTo(1));
  assertThat(clusterState.routingTable().index("test").shard(0).size(),equalTo(1));
  assertThat(clusterState.routingTable().index("test").shard(0).shards().size(),equalTo(1));
  assertThat(clusterState.routingTable().index("test").shard(0).shards().get(0).state(),equalTo(STARTED));
  assertThat(clusterState.routingTable().index("test").shard(0).shards().get(0).currentNodeId(),equalTo("node1"));
  logger.info("Starting another node and making sure nothing changed");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode("node2"))).build();
  newState=strategy.reroute(clusterState,"reroute");
  assertThat(newState,equalTo(clusterState));
  clusterState=newState;
  assertThat(clusterState.routingTable().index("test").shards().size(),equalTo(1));
  assertThat(clusterState.routingTable().index("test").shard(0).size(),equalTo(1));
  assertThat(clusterState.routingTable().index("test").shard(0).shards().size(),equalTo(1));
  assertThat(clusterState.routingTable().index("test").shard(0).shards().get(0).state(),equalTo(STARTED));
  assertThat(clusterState.routingTable().index("test").shard(0).shards().get(0).currentNodeId(),equalTo("node1"));
  logger.info("Killing node1 where the shard is, checking the shard is relocated");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove("node1")).build();
  newState=strategy.deassociateDeadNodes(clusterState,true,"reroute");
  assertThat(newState,not(equalTo(clusterState)));
  clusterState=newState;
  assertThat(clusterState.routingTable().index("test").shards().size(),equalTo(1));
  assertThat(clusterState.routingTable().index("test").shard(0).size(),equalTo(1));
  assertThat(clusterState.routingTable().index("test").shard(0).shards().size(),equalTo(1));
  assertThat(clusterState.routingTable().index("test").shard(0).shards().get(0).state(),equalTo(INITIALIZING));
  assertThat(clusterState.routingTable().index("test").shard(0).shards().get(0).currentNodeId(),equalTo("node2"));
  logger.info("Start another node, make sure that things remain the same (shard is in node2 and initializing)");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode("node3"))).build();
  newState=strategy.reroute(clusterState,"reroute");
  assertThat(newState,equalTo(clusterState));
  logger.info("Start the shard on node 2");
  routingNodes=clusterState.getRoutingNodes();
  newState=strategy.applyStartedShards(clusterState,routingNodes.node("node2").shardsWithState(INITIALIZING));
  assertThat(newState,not(equalTo(clusterState)));
  clusterState=newState;
  assertThat(clusterState.routingTable().index("test").shards().size(),equalTo(1));
  assertThat(clusterState.routingTable().index("test").shard(0).size(),equalTo(1));
  assertThat(clusterState.routingTable().index("test").shard(0).shards().size(),equalTo(1));
  assertThat(clusterState.routingTable().index("test").shard(0).shards().get(0).state(),equalTo(STARTED));
  assertThat(clusterState.routingTable().index("test").shard(0).shards().get(0).currentNodeId(),equalTo("node2"));
}
