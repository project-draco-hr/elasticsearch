{
  boolean success=false;
  try {
    clientBootstrap=createClientBootstrap();
    if (NETWORK_SERVER.get(settings)) {
      final OpenChannelsHandler openChannels=new OpenChannelsHandler(logger);
      this.serverOpenChannels=openChannels;
      Map<String,Settings> profiles=TransportSettings.TRANSPORT_PROFILES_SETTING.get(settings()).getAsGroups(true);
      if (!profiles.containsKey(TransportSettings.DEFAULT_PROFILE)) {
        profiles=new HashMap<>(profiles);
        profiles.put(TransportSettings.DEFAULT_PROFILE,Settings.EMPTY);
      }
      Settings fallbackSettings=createFallbackSettings();
      Settings defaultSettings=profiles.get(TransportSettings.DEFAULT_PROFILE);
      for (      Map.Entry<String,Settings> entry : profiles.entrySet()) {
        Settings profileSettings=entry.getValue();
        String name=entry.getKey();
        if (!Strings.hasLength(name)) {
          logger.info("transport profile configured without a name. skipping profile with settings [{}]",profileSettings.toDelimitedString(','));
          continue;
        }
 else         if (TransportSettings.DEFAULT_PROFILE.equals(name)) {
          profileSettings=settingsBuilder().put(profileSettings).put("port",profileSettings.get("port",TransportSettings.PORT.get(this.settings))).build();
        }
 else         if (profileSettings.get("port") == null) {
          logger.info("No port configured for profile [{}], not binding",name);
          continue;
        }
        Settings mergedSettings=settingsBuilder().put(fallbackSettings).put(defaultSettings).put(profileSettings).build();
        createServerBootstrap(name,mergedSettings);
        bindServerBootstrap(name,mergedSettings);
      }
    }
    success=true;
  }
  finally {
    if (success == false) {
      doStop();
    }
  }
}
