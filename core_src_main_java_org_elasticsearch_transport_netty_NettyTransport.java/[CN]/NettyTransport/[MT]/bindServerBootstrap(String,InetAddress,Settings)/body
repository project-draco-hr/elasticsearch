{
  String port=settings.get("port");
  PortsRange portsRange=new PortsRange(port);
  final AtomicReference<Exception> lastException=new AtomicReference<>();
  final AtomicReference<SocketAddress> boundSocket=new AtomicReference<>();
  boolean success=portsRange.iterate(new PortsRange.PortCallback(){
    @Override public boolean onPortNumber(    int portNumber){
      try {
        Channel channel=serverBootstraps.get(name).bind(new InetSocketAddress(hostAddress,portNumber));
synchronized (serverChannels) {
          List<Channel> list=serverChannels.get(name);
          if (list == null) {
            list=new ArrayList<>();
            serverChannels.put(name,list);
          }
          list.add(channel);
          boundSocket.set(channel.getLocalAddress());
        }
      }
 catch (      Exception e) {
        lastException.set(e);
        return false;
      }
      return true;
    }
  }
);
  if (!success) {
    throw new BindTransportException("Failed to bind to [" + port + "]",lastException.get());
  }
  if (!DEFAULT_PROFILE.equals(name)) {
    InetSocketAddress boundAddress=(InetSocketAddress)boundSocket.get();
    int publishPort=settings.getAsInt("publish_port",boundAddress.getPort());
    String publishHost=settings.get("publish_host",boundAddress.getHostString());
    InetSocketAddress publishAddress=createPublishAddress(publishHost,publishPort);
    profileBoundAddresses.putIfAbsent(name,new BoundTransportAddress(new InetSocketTransportAddress(boundAddress),new InetSocketTransportAddress(publishAddress)));
  }
  logger.info("Bound profile [{}] to address [{}]",name,boundSocket.get());
}
