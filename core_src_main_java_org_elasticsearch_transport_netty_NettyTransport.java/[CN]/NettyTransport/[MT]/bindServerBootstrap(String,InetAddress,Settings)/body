{
  String port=profileSettings.get("port");
  PortsRange portsRange=new PortsRange(port);
  final AtomicReference<Exception> lastException=new AtomicReference<>();
  final AtomicReference<InetSocketAddress> boundSocket=new AtomicReference<>();
  boolean success=portsRange.iterate(new PortsRange.PortCallback(){
    @Override public boolean onPortNumber(    int portNumber){
      try {
        Channel channel=serverBootstraps.get(name).bind(new InetSocketAddress(hostAddress,portNumber));
synchronized (serverChannels) {
          List<Channel> list=serverChannels.get(name);
          if (list == null) {
            list=new ArrayList<>();
            serverChannels.put(name,list);
          }
          list.add(channel);
          boundSocket.set((InetSocketAddress)channel.getLocalAddress());
        }
      }
 catch (      Exception e) {
        lastException.set(e);
        return false;
      }
      return true;
    }
  }
);
  if (!success) {
    throw new BindTransportException("Failed to bind to [" + port + "]",lastException.get());
  }
  InetSocketAddress boundAddress=boundSocket.get();
  if (!DEFAULT_PROFILE.equals(name)) {
    BoundTransportAddress boundTransportAddress=profileBoundAddresses().get(name);
    if (boundTransportAddress == null) {
      int publishPort=profileSettings.getAsInt("publish_port",boundAddress.getPort());
      String publishHost=profileSettings.get("publish_host",boundAddress.getHostString());
      InetSocketAddress publishAddress=createPublishAddress(publishHost,publishPort);
      profileBoundAddresses.put(name,new BoundTransportAddress(new TransportAddress[]{new InetSocketTransportAddress(boundAddress)},new InetSocketTransportAddress(publishAddress)));
    }
 else {
      TransportAddress[] existingBoundAddress=boundTransportAddress.boundAddresses();
      TransportAddress[] updatedBoundAddresses=Arrays.copyOf(existingBoundAddress,existingBoundAddress.length + 1);
      updatedBoundAddresses[updatedBoundAddresses.length - 1]=new InetSocketTransportAddress(boundAddress);
      profileBoundAddresses.put(name,new BoundTransportAddress(updatedBoundAddresses,boundTransportAddress.publishAddress()));
    }
  }
 else {
    if (this.boundAddress == null) {
      int publishPort=settings.getAsInt("transport.netty.publish_port",settings.getAsInt("transport.publish_port",boundAddress.getPort()));
      String publishHost=settings.get("transport.netty.publish_host",settings.get("transport.publish_host",settings.get("transport.host")));
      InetSocketAddress publishAddress=createPublishAddress(publishHost,publishPort);
      this.boundAddress=new BoundTransportAddress(new TransportAddress[]{new InetSocketTransportAddress(boundAddress)},new InetSocketTransportAddress(publishAddress));
    }
 else {
      TransportAddress[] existingBoundAddress=this.boundAddress.boundAddresses();
      TransportAddress[] updatedBoundAddresses=Arrays.copyOf(existingBoundAddress,existingBoundAddress.length + 1);
      updatedBoundAddresses[updatedBoundAddresses.length - 1]=new InetSocketTransportAddress(boundAddress);
      this.boundAddress=new BoundTransportAddress(updatedBoundAddresses,this.boundAddress.publishAddress());
    }
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Bound profile [{}] to address {{}}",name,NetworkAddress.format(boundSocket.get()));
  }
}
