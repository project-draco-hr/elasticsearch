{
  ChannelFuture[] connectRecovery=new ChannelFuture[nodeChannels.recovery.length];
  ChannelFuture[] connectBulk=new ChannelFuture[nodeChannels.bulk.length];
  ChannelFuture[] connectReg=new ChannelFuture[nodeChannels.reg.length];
  ChannelFuture[] connectState=new ChannelFuture[nodeChannels.state.length];
  ChannelFuture[] connectPing=new ChannelFuture[nodeChannels.ping.length];
  InetSocketAddress address=((InetSocketTransportAddress)node.address()).address();
  for (int i=0; i < connectRecovery.length; i++) {
    connectRecovery[i]=clientBootstrap.connect(address);
  }
  for (int i=0; i < connectBulk.length; i++) {
    connectBulk[i]=clientBootstrap.connect(address);
  }
  for (int i=0; i < connectReg.length; i++) {
    connectReg[i]=clientBootstrap.connect(address);
  }
  for (int i=0; i < connectState.length; i++) {
    connectState[i]=clientBootstrap.connect(address);
  }
  for (int i=0; i < connectPing.length; i++) {
    connectPing[i]=clientBootstrap.connect(address);
  }
  try {
    for (int i=0; i < connectRecovery.length; i++) {
      connectRecovery[i].awaitUninterruptibly((long)(connectTimeout.millis() * 1.5));
      if (!connectRecovery[i].isSuccess()) {
        throw new ConnectTransportException(node,"connect_timeout[" + connectTimeout + "]",connectRecovery[i].getCause());
      }
      nodeChannels.recovery[i]=connectRecovery[i].getChannel();
      nodeChannels.recovery[i].getCloseFuture().addListener(new ChannelCloseListener(node));
    }
    for (int i=0; i < connectBulk.length; i++) {
      connectBulk[i].awaitUninterruptibly((long)(connectTimeout.millis() * 1.5));
      if (!connectBulk[i].isSuccess()) {
        throw new ConnectTransportException(node,"connect_timeout[" + connectTimeout + "]",connectBulk[i].getCause());
      }
      nodeChannels.bulk[i]=connectBulk[i].getChannel();
      nodeChannels.bulk[i].getCloseFuture().addListener(new ChannelCloseListener(node));
    }
    for (int i=0; i < connectReg.length; i++) {
      connectReg[i].awaitUninterruptibly((long)(connectTimeout.millis() * 1.5));
      if (!connectReg[i].isSuccess()) {
        throw new ConnectTransportException(node,"connect_timeout[" + connectTimeout + "]",connectReg[i].getCause());
      }
      nodeChannels.reg[i]=connectReg[i].getChannel();
      nodeChannels.reg[i].getCloseFuture().addListener(new ChannelCloseListener(node));
    }
    for (int i=0; i < connectState.length; i++) {
      connectState[i].awaitUninterruptibly((long)(connectTimeout.millis() * 1.5));
      if (!connectState[i].isSuccess()) {
        throw new ConnectTransportException(node,"connect_timeout[" + connectTimeout + "]",connectState[i].getCause());
      }
      nodeChannels.state[i]=connectState[i].getChannel();
      nodeChannels.state[i].getCloseFuture().addListener(new ChannelCloseListener(node));
    }
    for (int i=0; i < connectPing.length; i++) {
      connectPing[i].awaitUninterruptibly((long)(connectTimeout.millis() * 1.5));
      if (!connectPing[i].isSuccess()) {
        throw new ConnectTransportException(node,"connect_timeout[" + connectTimeout + "]",connectPing[i].getCause());
      }
      nodeChannels.ping[i]=connectPing[i].getChannel();
      nodeChannels.ping[i].getCloseFuture().addListener(new ChannelCloseListener(node));
    }
    if (nodeChannels.recovery.length == 0) {
      if (nodeChannels.bulk.length > 0) {
        nodeChannels.recovery=nodeChannels.bulk;
      }
 else {
        nodeChannels.recovery=nodeChannels.reg;
      }
    }
    if (nodeChannels.bulk.length == 0) {
      nodeChannels.bulk=nodeChannels.reg;
    }
  }
 catch (  RuntimeException e) {
    for (    ChannelFuture[] futures : Arrays.asList(connectRecovery,connectBulk,connectReg,connectState,connectPing)) {
      for (      ChannelFuture future : futures) {
        future.cancel();
        if (future.getChannel() != null && future.getChannel().isOpen()) {
          try {
            future.getChannel().close();
          }
 catch (          Exception e1) {
          }
        }
      }
    }
    throw e;
  }
}
