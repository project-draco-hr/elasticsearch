{
  super(settings);
  this.threadPool=threadPool;
  this.networkService=networkService;
  this.bigArrays=bigArrays;
  this.version=version;
  this.workerCount=WORKER_COUNT.get(settings);
  this.blockingClient=TCP_BLOCKING_CLIENT.get(settings);
  this.connectTimeout=TCP_CONNECT_TIMEOUT.get(settings);
  this.maxCumulationBufferCapacity=NETTY_MAX_CUMULATION_BUFFER_CAPACITY.get(settings);
  this.maxCompositeBufferComponents=NETTY_MAX_COMPOSITE_BUFFER_COMPONENTS.get(settings);
  this.compress=Transport.TRANSPORT_TCP_COMPRESS.get(settings);
  this.connectionsPerNodeRecovery=CONNECTIONS_PER_NODE_RECOVERY.get(settings);
  this.connectionsPerNodeBulk=CONNECTIONS_PER_NODE_BULK.get(settings);
  this.connectionsPerNodeReg=CONNECTIONS_PER_NODE_REG.get(settings);
  this.connectionsPerNodeState=CONNECTIONS_PER_NODE_STATE.get(settings);
  this.connectionsPerNodePing=CONNECTIONS_PER_NODE_PING.get(settings);
  this.receivePredictorMin=NETTY_RECEIVE_PREDICTOR_MIN.get(settings);
  this.receivePredictorMax=NETTY_RECEIVE_PREDICTOR_MAX.get(settings);
  if (receivePredictorMax.bytes() == receivePredictorMin.bytes()) {
    receiveBufferSizePredictorFactory=new FixedReceiveBufferSizePredictorFactory((int)receivePredictorMax.bytes());
  }
 else {
    receiveBufferSizePredictorFactory=new AdaptiveReceiveBufferSizePredictorFactory((int)receivePredictorMin.bytes(),(int)receivePredictorMin.bytes(),(int)receivePredictorMax.bytes());
  }
  this.scheduledPing=new ScheduledPing();
  this.pingSchedule=PING_SCHEDULE.get(settings);
  if (pingSchedule.millis() > 0) {
    threadPool.schedule(pingSchedule,ThreadPool.Names.GENERIC,scheduledPing);
  }
  this.namedWriteableRegistry=namedWriteableRegistry;
}
