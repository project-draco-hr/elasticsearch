{
  super(settings);
  this.threadPool=threadPool;
  this.networkService=networkService;
  this.bigArrays=bigArrays;
  this.version=version;
  if (settings.getAsBoolean("netty.epollBugWorkaround",false)) {
    System.setProperty("org.jboss.netty.epollBugWorkaround","true");
  }
  this.workerCount=settings.getAsInt(WORKER_COUNT,EsExecutors.boundedNumberOfProcessors(settings) * 2);
  this.blockingClient=settings.getAsBoolean("transport.netty.transport.tcp.blocking_client",TCP_BLOCKING_CLIENT.get(settings));
  this.connectTimeout=this.settings.getAsTime("transport.netty.connect_timeout",settings.getAsTime("transport.tcp.connect_timeout",TCP_CONNECT_TIMEOUT.get(settings)));
  this.maxCumulationBufferCapacity=this.settings.getAsBytesSize("transport.netty.max_cumulation_buffer_capacity",null);
  this.maxCompositeBufferComponents=this.settings.getAsInt("transport.netty.max_composite_buffer_components",-1);
  this.compress=Transport.TRANSPORT_TCP_COMPRESS.get(settings);
  this.connectionsPerNodeRecovery=this.settings.getAsInt("transport.netty.connections_per_node.recovery",settings.getAsInt(CONNECTIONS_PER_NODE_RECOVERY,2));
  this.connectionsPerNodeBulk=this.settings.getAsInt("transport.netty.connections_per_node.bulk",settings.getAsInt(CONNECTIONS_PER_NODE_BULK,3));
  this.connectionsPerNodeReg=this.settings.getAsInt("transport.netty.connections_per_node.reg",settings.getAsInt(CONNECTIONS_PER_NODE_REG,6));
  this.connectionsPerNodeState=this.settings.getAsInt("transport.netty.connections_per_node.high",settings.getAsInt(CONNECTIONS_PER_NODE_STATE,1));
  this.connectionsPerNodePing=this.settings.getAsInt("transport.netty.connections_per_node.ping",settings.getAsInt(CONNECTIONS_PER_NODE_PING,1));
  if (this.connectionsPerNodeReg == 0) {
    throw new IllegalArgumentException("can't set [connection_per_node.reg] to 0");
  }
  if (this.connectionsPerNodePing == 0) {
    throw new IllegalArgumentException("can't set [connection_per_node.ping] to 0");
  }
  if (this.connectionsPerNodeState == 0) {
    throw new IllegalArgumentException("can't set [connection_per_node.state] to 0");
  }
  long defaultReceiverPredictor=512 * 1024;
  if (JvmInfo.jvmInfo().getMem().getDirectMemoryMax().bytes() > 0) {
    long l=(long)((0.3 * JvmInfo.jvmInfo().getMem().getDirectMemoryMax().bytes()) / workerCount);
    defaultReceiverPredictor=Math.min(defaultReceiverPredictor,Math.max(l,64 * 1024));
  }
  this.receivePredictorMin=this.settings.getAsBytesSize("transport.netty.receive_predictor_min",this.settings.getAsBytesSize("transport.netty.receive_predictor_size",new ByteSizeValue(defaultReceiverPredictor)));
  this.receivePredictorMax=this.settings.getAsBytesSize("transport.netty.receive_predictor_max",this.settings.getAsBytesSize("transport.netty.receive_predictor_size",new ByteSizeValue(defaultReceiverPredictor)));
  if (receivePredictorMax.bytes() == receivePredictorMin.bytes()) {
    receiveBufferSizePredictorFactory=new FixedReceiveBufferSizePredictorFactory((int)receivePredictorMax.bytes());
  }
 else {
    receiveBufferSizePredictorFactory=new AdaptiveReceiveBufferSizePredictorFactory((int)receivePredictorMin.bytes(),(int)receivePredictorMin.bytes(),(int)receivePredictorMax.bytes());
  }
  this.scheduledPing=new ScheduledPing();
  this.pingSchedule=settings.getAsTime(PING_SCHEDULE,DEFAULT_PING_SCHEDULE);
  if (pingSchedule.millis() > 0) {
    threadPool.schedule(pingSchedule,ThreadPool.Names.GENERIC,scheduledPing);
  }
  this.namedWriteableRegistry=namedWriteableRegistry;
}
