{
  left.analyze(settings,variables);
  right.analyze(settings,variables);
  final Type promote=AnalyzerCaster.promoteNumeric(left.actual,false,true);
  if (promote == null) {
    throw new ClassCastException(error("Cannot apply right shift [>>] to types " + "[" + left.actual.name + "] and ["+ right.actual.name+ "]."));
  }
  left.expected=promote;
  right.expected=Definition.INT_TYPE;
  right.explicit=true;
  left=left.cast(settings,variables);
  right=right.cast(settings,variables);
  if (left.constant != null && right.constant != null) {
    final Sort sort=promote.sort;
    if (sort == Sort.INT) {
      constant=(int)left.constant >> (int)right.constant;
    }
 else     if (sort == Sort.LONG) {
      constant=(long)left.constant >> (int)right.constant;
    }
 else {
      throw new IllegalStateException(error("Illegal tree structure."));
    }
  }
  actual=promote;
}
