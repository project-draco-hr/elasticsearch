{
  left.analyze(settings,definition,variables);
  right.analyze(settings,definition,variables);
  final Type promote=AnalyzerCaster.promoteNumeric(definition,left.actual,right.actual,true,true);
  if (promote == null) {
    throw new ClassCastException(error("Cannot apply remainder [%] to types " + "[" + left.actual.name + "] and ["+ right.actual.name+ "]."));
  }
  left.expected=promote;
  right.expected=promote;
  left=left.cast(settings,definition,variables);
  right=right.cast(settings,definition,variables);
  if (left.constant != null && right.constant != null) {
    final boolean overflow=settings.getNumericOverflow();
    final Sort sort=promote.sort;
    if (sort == Sort.INT) {
      constant=(int)left.constant % (int)right.constant;
    }
 else     if (sort == Sort.LONG) {
      constant=(long)left.constant % (long)right.constant;
    }
 else     if (sort == Sort.FLOAT) {
      constant=overflow ? (float)left.constant % (float)right.constant : org.elasticsearch.painless.Utility.remainderWithoutOverflow((float)left.constant,(float)right.constant);
    }
 else     if (sort == Sort.DOUBLE) {
      constant=overflow ? (double)left.constant % (double)right.constant : org.elasticsearch.painless.Utility.remainderWithoutOverflow((double)left.constant,(double)right.constant);
    }
 else {
      throw new IllegalStateException(error("Illegal tree structure."));
    }
  }
  actual=promote;
}
