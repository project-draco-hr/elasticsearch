{
  left.analyze(variables);
  right.analyze(variables);
  promote=AnalyzerCaster.promoteXor(left.actual,right.actual);
  if (promote == null) {
    throw createError(new ClassCastException("Cannot apply xor [^] to types " + "[" + left.actual.name + "] and ["+ right.actual.name+ "]."));
  }
  actual=promote;
  if (promote.sort == Sort.DEF) {
    left.expected=left.actual;
    right.expected=right.actual;
    if (expected != null) {
      actual=expected;
    }
  }
 else {
    left.expected=promote;
    right.expected=promote;
  }
  left=left.cast(variables);
  right=right.cast(variables);
  if (left.constant != null && right.constant != null) {
    Sort sort=promote.sort;
    if (sort == Sort.BOOL) {
      constant=(boolean)left.constant ^ (boolean)right.constant;
    }
 else     if (sort == Sort.INT) {
      constant=(int)left.constant ^ (int)right.constant;
    }
 else     if (sort == Sort.LONG) {
      constant=(long)left.constant ^ (long)right.constant;
    }
 else {
      throw createError(new IllegalStateException("Illegal tree structure."));
    }
  }
}
