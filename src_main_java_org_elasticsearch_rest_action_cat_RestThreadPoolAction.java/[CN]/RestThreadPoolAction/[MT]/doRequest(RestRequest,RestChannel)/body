{
  final ClusterStateRequest clusterStateRequest=new ClusterStateRequest();
  clusterStateRequest.clear().nodes(true);
  clusterStateRequest.local(request.paramAsBoolean("local",clusterStateRequest.local()));
  clusterStateRequest.masterNodeTimeout(request.paramAsTime("master_timeout",clusterStateRequest.masterNodeTimeout()));
  final String[] pools=fetchSortedPools(request,DEFAULT_THREAD_POOLS);
  client.admin().cluster().state(clusterStateRequest,new AbstractRestResponseActionListener<ClusterStateResponse>(request,channel,logger){
    @Override public void onResponse(    final ClusterStateResponse clusterStateResponse){
      NodesInfoRequest nodesInfoRequest=new NodesInfoRequest();
      nodesInfoRequest.clear().process(true);
      client.admin().cluster().nodesInfo(nodesInfoRequest,new AbstractRestResponseActionListener<NodesInfoResponse>(request,channel,logger){
        @Override public void onResponse(        final NodesInfoResponse nodesInfoResponse){
          NodesStatsRequest nodesStatsRequest=new NodesStatsRequest();
          nodesStatsRequest.clear().threadPool(true);
          client.admin().cluster().nodesStats(nodesStatsRequest,new AbstractRestResponseActionListener<NodesStatsResponse>(request,channel,logger){
            @Override public void onResponse(            NodesStatsResponse nodesStatsResponse){
              try {
                channel.sendResponse(RestTable.buildResponse(buildTable(request,clusterStateResponse,nodesInfoResponse,nodesStatsResponse,pools),request,channel));
              }
 catch (              Throwable e) {
                onFailure(e);
              }
            }
          }
);
        }
      }
);
    }
  }
);
}
