{
  final ClusterStateRequest clusterStateRequest=new ClusterStateRequest();
  clusterStateRequest.clear().nodes(true);
  clusterStateRequest.local(request.paramAsBoolean("local",clusterStateRequest.local()));
  clusterStateRequest.masterNodeTimeout(request.paramAsTime("master_timeout",clusterStateRequest.masterNodeTimeout()));
  final String[] pools=fetchSortedPools(request,DEFAULT_THREAD_POOLS);
  client.admin().cluster().state(clusterStateRequest,new RestActionListener<ClusterStateResponse>(channel){
    @Override public void processResponse(    final ClusterStateResponse clusterStateResponse){
      NodesInfoRequest nodesInfoRequest=new NodesInfoRequest();
      nodesInfoRequest.clear().process(true);
      client.admin().cluster().nodesInfo(nodesInfoRequest,new RestActionListener<NodesInfoResponse>(channel){
        @Override public void processResponse(        final NodesInfoResponse nodesInfoResponse){
          NodesStatsRequest nodesStatsRequest=new NodesStatsRequest();
          nodesStatsRequest.clear().threadPool(true);
          client.admin().cluster().nodesStats(nodesStatsRequest,new RestResponseListener<NodesStatsResponse>(channel){
            @Override public RestResponse buildResponse(            NodesStatsResponse nodesStatsResponse) throws Exception {
              return RestTable.buildResponse(buildTable(request,clusterStateResponse,nodesInfoResponse,nodesStatsResponse,pools),channel);
            }
          }
);
        }
      }
);
    }
  }
);
}
