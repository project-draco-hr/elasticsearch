{
  SearchResponse response=client().prepareSearch("idx").addAggregation(terms("terms").field("tag").subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME))).addAggregation(minBucket("min_bucket","terms>sum")).execute().actionGet();
  assertSearchResponse(response);
  Terms terms=response.getAggregations().get("terms");
  assertThat(terms,notNullValue());
  assertThat(terms.getName(),equalTo("terms"));
  List<Terms.Bucket> buckets=terms.getBuckets();
  assertThat(buckets.size(),equalTo(interval));
  List<String> minKeys=new ArrayList<>();
  double minValue=Double.POSITIVE_INFINITY;
  for (int i=0; i < interval; ++i) {
    Terms.Bucket bucket=buckets.get(i);
    assertThat(bucket,notNullValue());
    assertThat((String)bucket.getKey(),equalTo("tag" + (i % interval)));
    assertThat(bucket.getDocCount(),greaterThan(0l));
    Sum sum=bucket.getAggregations().get("sum");
    assertThat(sum,notNullValue());
    if (sum.value() < minValue) {
      minValue=sum.value();
      minKeys=new ArrayList<>();
      minKeys.add(bucket.getKeyAsString());
    }
 else     if (sum.value() == minValue) {
      minKeys.add(bucket.getKeyAsString());
    }
  }
  InternalBucketMetricValue minBucketValue=response.getAggregations().get("min_bucket");
  assertThat(minBucketValue,notNullValue());
  assertThat(minBucketValue.getName(),equalTo("min_bucket"));
  assertThat(minBucketValue.value(),equalTo(minValue));
  assertThat(minBucketValue.keys(),equalTo(minKeys.toArray(new String[minKeys.size()])));
}
