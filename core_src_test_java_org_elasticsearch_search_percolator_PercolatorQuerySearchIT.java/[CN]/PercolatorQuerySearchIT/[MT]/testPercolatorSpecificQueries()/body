{
  createIndex("test",client().admin().indices().prepareCreate("test").addMapping("type","field1","type=text","field2","type=text"));
  client().prepareIndex("test",PercolatorFieldMapper.TYPE_NAME,"1").setSource(jsonBuilder().startObject().field("query",commonTermsQuery("field1","quick brown fox")).endObject()).get();
  client().prepareIndex("test",PercolatorFieldMapper.TYPE_NAME,"2").setSource(jsonBuilder().startObject().field("query",multiMatchQuery("quick brown fox","field1","field2").type(MultiMatchQueryBuilder.Type.CROSS_FIELDS)).endObject()).get();
  client().prepareIndex("test",PercolatorFieldMapper.TYPE_NAME,"3").setSource(jsonBuilder().startObject().field("query",spanNearQuery(spanTermQuery("field1","quick"),0).clause(spanTermQuery("field1","brown")).clause(spanTermQuery("field1","fox")).inOrder(true)).endObject()).get();
  client().admin().indices().prepareRefresh().get();
  client().prepareIndex("test",PercolatorFieldMapper.TYPE_NAME,"4").setSource(jsonBuilder().startObject().field("query",spanNotQuery(spanNearQuery(spanTermQuery("field1","quick"),0).clause(spanTermQuery("field1","brown")).clause(spanTermQuery("field1","fox")).inOrder(true),spanNearQuery(spanTermQuery("field1","the"),0).clause(spanTermQuery("field1","lazy")).clause(spanTermQuery("field1","dog")).inOrder(true)).dist(2)).endObject()).get();
  client().prepareIndex("test",PercolatorFieldMapper.TYPE_NAME,"5").setSource(jsonBuilder().startObject().field("query",spanNotQuery(spanNearQuery(spanTermQuery("field1","quick"),0).clause(spanTermQuery("field1","brown")).clause(spanTermQuery("field1","fox")).inOrder(true),spanNearQuery(spanTermQuery("field1","the"),0).clause(spanTermQuery("field1","lazy")).clause(spanTermQuery("field1","dog")).inOrder(true)).dist(3)).endObject()).get();
  client().admin().indices().prepareRefresh().get();
  BytesReference source=jsonBuilder().startObject().field("field1","the quick brown fox jumps over the lazy dog").field("field2","the quick brown fox falls down into the well").endObject().bytes();
  SearchResponse response=client().prepareSearch().setQuery(percolatorQuery("type",source)).addSort("_uid",SortOrder.ASC).get();
  assertHitCount(response,4);
  assertThat(response.getHits().getAt(0).getId(),equalTo("1"));
  assertThat(response.getHits().getAt(0).score(),equalTo(Float.NaN));
  assertThat(response.getHits().getAt(1).getId(),equalTo("2"));
  assertThat(response.getHits().getAt(1).score(),equalTo(Float.NaN));
  assertThat(response.getHits().getAt(2).getId(),equalTo("3"));
  assertThat(response.getHits().getAt(2).score(),equalTo(Float.NaN));
  assertThat(response.getHits().getAt(3).getId(),equalTo("4"));
  assertThat(response.getHits().getAt(3).score(),equalTo(Float.NaN));
}
