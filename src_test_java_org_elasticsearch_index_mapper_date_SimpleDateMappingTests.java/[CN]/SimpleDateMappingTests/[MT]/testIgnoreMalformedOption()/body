{
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field1").field("type","date").field("ignore_malformed",true).endObject().startObject("field2").field("type","date").field("ignore_malformed",false).endObject().startObject("field3").field("type","date").endObject().endObject().endObject().endObject().string();
  DocumentMapper defaultMapper=mapper(mapping);
  ParsedDocument doc=defaultMapper.parse("type","1",XContentFactory.jsonBuilder().startObject().field("field1","a").field("field2","2010-01-01").endObject().bytes());
  assertThat(doc.rootDoc().getField("field1"),nullValue());
  assertThat(doc.rootDoc().getField("field2"),notNullValue());
  try {
    defaultMapper.parse("type","1",XContentFactory.jsonBuilder().startObject().field("field2","a").endObject().bytes());
  }
 catch (  MapperParsingException e) {
    assertThat(e.getCause(),instanceOf(MapperParsingException.class));
  }
  try {
    defaultMapper.parse("type","1",XContentFactory.jsonBuilder().startObject().field("field3","a").endObject().bytes());
  }
 catch (  MapperParsingException e) {
    assertThat(e.getCause(),instanceOf(MapperParsingException.class));
  }
  Settings indexSettings=settingsBuilder().put("index.mapping.ignore_malformed",true).build();
  defaultMapper=createIndex("test2",indexSettings).mapperService().documentMapperParser().parse(mapping);
  doc=defaultMapper.parse("type","1",XContentFactory.jsonBuilder().startObject().field("field3","a").endObject().bytes());
  assertThat(doc.rootDoc().getField("field3"),nullValue());
  try {
    defaultMapper.parse("type","1",XContentFactory.jsonBuilder().startObject().field("field2","a").endObject().bytes());
  }
 catch (  MapperParsingException e) {
    assertThat(e.getCause(),instanceOf(MapperParsingException.class));
  }
}
