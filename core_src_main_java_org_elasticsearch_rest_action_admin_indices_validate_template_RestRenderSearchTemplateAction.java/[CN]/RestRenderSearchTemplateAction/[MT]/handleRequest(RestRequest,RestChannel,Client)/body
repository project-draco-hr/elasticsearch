{
  RenderSearchTemplateRequest renderSearchTemplateRequest;
  BytesReference source=RestActions.getRestContent(request);
  XContentParser parser=XContentFactory.xContent(source).createParser(source);
  String templateId=request.param("id");
  final Template template;
  if (templateId == null) {
    template=Template.parse(parser,parseFieldMatcher);
  }
 else {
    Map<String,Object> params=null;
    String currentFieldName=null;
    XContentParser.Token token=parser.nextToken();
    if (token != XContentParser.Token.START_OBJECT) {
      throw new ElasticsearchParseException("failed to parse request. request body must be an object but found [{}] instead",token);
    }
    while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
      if (token == XContentParser.Token.FIELD_NAME) {
        currentFieldName=parser.currentName();
      }
 else       if (parseFieldMatcher.match(currentFieldName,ScriptField.PARAMS)) {
        if (token == XContentParser.Token.START_OBJECT) {
          params=parser.map();
        }
 else {
          throw new ElasticsearchParseException("failed to parse request. field [{}] is expected to be an object, but found [{}] instead",currentFieldName,token);
        }
      }
 else {
        throw new ElasticsearchParseException("failed to parse request. unknown field [{}] of type [{}]",currentFieldName,token);
      }
    }
    template=new Template(templateId,ScriptType.INDEXED,Template.DEFAULT_LANG,null,params);
  }
  renderSearchTemplateRequest=new RenderSearchTemplateRequest();
  renderSearchTemplateRequest.template(template);
  client.admin().cluster().renderSearchTemplate(renderSearchTemplateRequest,new RestBuilderListener<RenderSearchTemplateResponse>(channel){
    @Override public RestResponse buildResponse(    RenderSearchTemplateResponse response,    XContentBuilder builder) throws Exception {
      builder.prettyPrint();
      response.toXContent(builder,ToXContent.EMPTY_PARAMS);
      return new BytesRestResponse(OK,builder);
    }
  }
);
}
