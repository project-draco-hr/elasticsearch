{
  CodecUtil.checkHeader(input,CODEC_NAME,CODEC_VERSION,CODEC_VERSION);
  final Map<String,AnalyzingSuggestHolder> lookupMap=new HashMap<String,AnalyzingSuggestHolder>();
  input.seek(input.length() - 8);
  long metaPointer=input.readLong();
  input.seek(metaPointer);
  int numFields=input.readVInt();
  Map<Long,String> meta=new TreeMap<Long,String>();
  for (int i=0; i < numFields; i++) {
    String name=input.readString();
    long offset=input.readVLong();
    meta.put(offset,name);
  }
  for (  Map.Entry<Long,String> entry : meta.entrySet()) {
    input.seek(entry.getKey());
    FST<Pair<Long,BytesRef>> fst=new FST<Pair<Long,BytesRef>>(input,new PairOutputs<Long,BytesRef>(PositiveIntOutputs.getSingleton(),ByteSequenceOutputs.getSingleton()));
    int maxAnalyzedPathsForOneInput=input.readVInt();
    int maxSurfaceFormsPerAnalyzedForm=input.readVInt();
    int maxGraphExpansions=input.readInt();
    int options=input.readVInt();
    boolean preserveSep=(options & SERIALIZE_PRESERVE_SEPERATORS) != 0;
    boolean hasPayloads=(options & SERIALIZE_HAS_PAYLOADS) != 0;
    boolean preservePositionIncrements=(options & SERIALIZE_PRESERVE_POSITION_INCREMENTS) != 0;
    lookupMap.put(entry.getValue(),new AnalyzingSuggestHolder(preserveSep,preservePositionIncrements,maxSurfaceFormsPerAnalyzedForm,maxGraphExpansions,hasPayloads,maxAnalyzedPathsForOneInput,fst));
  }
  return new LookupFactory(){
    @Override public Lookup getLookup(    FieldMapper<?> mapper,    CompletionSuggestionContext suggestionContext){
      AnalyzingSuggestHolder analyzingSuggestHolder=lookupMap.get(mapper.names().fullName());
      if (analyzingSuggestHolder == null) {
        return null;
      }
      int flags=analyzingSuggestHolder.preserveSep ? XAnalyzingSuggester.PRESERVE_SEP : 0;
      XAnalyzingSuggester suggester;
      if (suggestionContext.isFuzzy()) {
        suggester=new XFuzzySuggester(mapper.indexAnalyzer(),mapper.searchAnalyzer(),flags,analyzingSuggestHolder.maxSurfaceFormsPerAnalyzedForm,analyzingSuggestHolder.maxGraphExpansions,suggestionContext.getFuzzyEditDistance(),suggestionContext.isFuzzyTranspositions(),suggestionContext.getFuzzyPrefixLength(),suggestionContext.getFuzzyMinLength(),analyzingSuggestHolder.fst,analyzingSuggestHolder.hasPayloads,analyzingSuggestHolder.maxAnalyzedPathsForOneInput);
      }
 else {
        suggester=new XAnalyzingSuggester(mapper.indexAnalyzer(),mapper.searchAnalyzer(),flags,analyzingSuggestHolder.maxSurfaceFormsPerAnalyzedForm,analyzingSuggestHolder.maxGraphExpansions,analyzingSuggestHolder.fst,analyzingSuggestHolder.hasPayloads,analyzingSuggestHolder.maxAnalyzedPathsForOneInput);
      }
      suggester.setPreservePositionIncrements(analyzingSuggestHolder.preservePositionIncrements);
      return suggester;
    }
    @Override public CompletionStats stats(    String... fields){
      long sizeInBytes=0;
      TObjectLongHashMap<String> completionFields=null;
      if (fields != null && fields.length > 0) {
        completionFields=new TObjectLongHashMap<String>(fields.length);
      }
      for (      Map.Entry<String,AnalyzingSuggestHolder> entry : lookupMap.entrySet()) {
        sizeInBytes+=entry.getValue().fst.sizeInBytes();
        if (fields == null || fields.length == 0)         continue;
        for (        String field : fields) {
          if (Regex.simpleMatch(field,entry.getKey())) {
            long fstSize=entry.getValue().fst.sizeInBytes();
            completionFields.adjustOrPutValue(field,fstSize,fstSize);
          }
        }
      }
      return new CompletionStats(sizeInBytes,completionFields);
    }
  }
;
}
