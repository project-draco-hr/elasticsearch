{
  long sizeInBytes=0;
  int version=CodecUtil.checkHeader(input,CODEC_NAME,CODEC_VERSION_START,CODEC_VERSION_LATEST);
  if (version >= CODEC_VERSION_CHECKSUMS) {
    CodecUtil.checksumEntireFile(input);
  }
  final long metaPointerPosition=input.length() - (version >= CODEC_VERSION_CHECKSUMS ? 8 + CodecUtil.footerLength() : 8);
  final Map<String,AnalyzingSuggestHolder> lookupMap=new HashMap<>();
  input.seek(metaPointerPosition);
  long metaPointer=input.readLong();
  input.seek(metaPointer);
  int numFields=input.readVInt();
  Map<Long,String> meta=new TreeMap<>();
  for (int i=0; i < numFields; i++) {
    String name=input.readString();
    long offset=input.readVLong();
    meta.put(offset,name);
  }
  for (  Map.Entry<Long,String> entry : meta.entrySet()) {
    input.seek(entry.getKey());
    FST<Pair<Long,BytesRef>> fst=new FST<>(input,new PairOutputs<>(PositiveIntOutputs.getSingleton(),ByteSequenceOutputs.getSingleton()));
    int maxAnalyzedPathsForOneInput=input.readVInt();
    int maxSurfaceFormsPerAnalyzedForm=input.readVInt();
    int maxGraphExpansions=input.readInt();
    int options=input.readVInt();
    boolean preserveSep=(options & SERIALIZE_PRESERVE_SEPARATORS) != 0;
    boolean hasPayloads=(options & SERIALIZE_HAS_PAYLOADS) != 0;
    boolean preservePositionIncrements=(options & SERIALIZE_PRESERVE_POSITION_INCREMENTS) != 0;
    int sepLabel, payloadSep, endByte, holeCharacter;
switch (version) {
case CODEC_VERSION_START:
      sepLabel=0xFF;
    payloadSep='\u001f';
  endByte=0x0;
holeCharacter='\u001E';
break;
default :
sepLabel=input.readVInt();
endByte=input.readVInt();
payloadSep=input.readVInt();
holeCharacter=input.readVInt();
}
AnalyzingSuggestHolder holder=new AnalyzingSuggestHolder(preserveSep,preservePositionIncrements,maxSurfaceFormsPerAnalyzedForm,maxGraphExpansions,hasPayloads,maxAnalyzedPathsForOneInput,fst,sepLabel,payloadSep,endByte,holeCharacter);
sizeInBytes+=fst.ramBytesUsed();
lookupMap.put(entry.getValue(),holder);
}
final long ramBytesUsed=sizeInBytes;
return new LookupFactory(){
@Override public Lookup getLookup(CompletionFieldMapper mapper,CompletionSuggestionContext suggestionContext){
AnalyzingSuggestHolder analyzingSuggestHolder=lookupMap.get(mapper.names().indexName());
if (analyzingSuggestHolder == null) {
return null;
}
int flags=analyzingSuggestHolder.getPreserveSeparator() ? XAnalyzingSuggester.PRESERVE_SEP : 0;
final XAnalyzingSuggester suggester;
final Automaton queryPrefix=mapper.requiresContext() ? ContextQuery.toAutomaton(analyzingSuggestHolder.getPreserveSeparator(),suggestionContext.getContextQueries()) : null;
if (suggestionContext.isFuzzy()) {
suggester=new XFuzzySuggester(mapper.indexAnalyzer(),queryPrefix,mapper.searchAnalyzer(),flags,analyzingSuggestHolder.maxSurfaceFormsPerAnalyzedForm,analyzingSuggestHolder.maxGraphExpansions,suggestionContext.getFuzzyEditDistance(),suggestionContext.isFuzzyTranspositions(),suggestionContext.getFuzzyPrefixLength(),suggestionContext.getFuzzyMinLength(),suggestionContext.isFuzzyUnicodeAware(),analyzingSuggestHolder.fst,analyzingSuggestHolder.hasPayloads,analyzingSuggestHolder.maxAnalyzedPathsForOneInput,analyzingSuggestHolder.sepLabel,analyzingSuggestHolder.payloadSep,analyzingSuggestHolder.endByte,analyzingSuggestHolder.holeCharacter);
}
 else {
suggester=new XAnalyzingSuggester(mapper.indexAnalyzer(),queryPrefix,mapper.searchAnalyzer(),flags,analyzingSuggestHolder.maxSurfaceFormsPerAnalyzedForm,analyzingSuggestHolder.maxGraphExpansions,analyzingSuggestHolder.preservePositionIncrements,analyzingSuggestHolder.fst,analyzingSuggestHolder.hasPayloads,analyzingSuggestHolder.maxAnalyzedPathsForOneInput,analyzingSuggestHolder.sepLabel,analyzingSuggestHolder.payloadSep,analyzingSuggestHolder.endByte,analyzingSuggestHolder.holeCharacter);
}
return suggester;
}
@Override public CompletionStats stats(String... fields){
long sizeInBytes=0;
ObjectLongHashMap<String> completionFields=null;
if (fields != null && fields.length > 0) {
completionFields=new ObjectLongHashMap<>(fields.length);
}
for (Map.Entry<String,AnalyzingSuggestHolder> entry : lookupMap.entrySet()) {
sizeInBytes+=entry.getValue().fst.ramBytesUsed();
if (fields == null || fields.length == 0) {
continue;
}
if (Regex.simpleMatch(fields,entry.getKey())) {
long fstSize=entry.getValue().fst.ramBytesUsed();
completionFields.addTo(entry.getKey(),fstSize);
}
}
return new CompletionStats(sizeInBytes,completionFields);
}
@Override AnalyzingSuggestHolder getAnalyzingSuggestHolder(CompletionFieldMapper mapper){
return lookupMap.get(mapper.names().indexName());
}
@Override public long ramBytesUsed(){
return ramBytesUsed;
}
@Override public Collection<Accountable> getChildResources(){
return Accountables.namedAccountables("field",lookupMap);
}
}
;
}
