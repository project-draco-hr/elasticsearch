{
  HttpDownloadHelper downloadHelper=new HttpDownloadHelper();
  File pluginFile=new File(url + "/" + name+ "/elasticsearch-"+ name+ "-"+ Version.number()+ ".zip");
  if (!pluginFile.exists()) {
    pluginFile=new File(url + "/elasticsearch-" + name+ "-"+ Version.number()+ ".zip");
    if (!pluginFile.exists()) {
      URL pluginUrl=new URL(url + "/" + name+ "/elasticsearch-"+ name+ "-"+ Version.number()+ ".zip");
      System.out.println("Downloading plugin from " + pluginUrl.toExternalForm());
      pluginFile=new File(environment.pluginsFile(),name + ".zip");
      downloadHelper.download(pluginUrl,pluginFile,new HttpDownloadHelper.VerboseProgress(System.out));
    }
 else {
      System.out.println("Using plugin from local fs: " + pluginFile.getAbsolutePath());
    }
  }
 else {
    System.out.println("Using plugin from local fs: " + pluginFile.getAbsolutePath());
  }
  File extractLocation=new File(environment.pluginsFile(),name);
  ZipFile zipFile=null;
  try {
    zipFile=new ZipFile(pluginFile);
    Enumeration<? extends ZipEntry> zipEntries=zipFile.entries();
    while (zipEntries.hasMoreElements()) {
      ZipEntry zipEntry=zipEntries.nextElement();
      if (!(zipEntry.getName().endsWith(".jar") || zipEntry.getName().endsWith(".zip"))) {
        continue;
      }
      String zipName=zipEntry.getName().replace('\\','/');
      File target=new File(extractLocation,zipName);
      target.getParentFile().mkdirs();
      Streams.copy(zipFile.getInputStream(zipEntry),new FileOutputStream(target));
    }
  }
 catch (  Exception e) {
    System.err.println("failed to extract plugin [" + pluginFile + "]");
  }
 finally {
    if (zipFile != null) {
      try {
        zipFile.close();
      }
 catch (      IOException e) {
      }
    }
    pluginFile.delete();
  }
}
