{
  IndexQueryParserService queryParser=queryParser();
  Query q=queryParser.parse(boolQuery().should(new DummyQueryParserPlugin.DummyQueryBuilder()).must(new DummyQueryParserPlugin.DummyQueryBuilder()).filter(new DummyQueryParserPlugin.DummyQueryBuilder()).mustNot(new DummyQueryParserPlugin.DummyQueryBuilder())).query();
  assertThat(q,instanceOf(BooleanQuery.class));
  BooleanQuery bq=(BooleanQuery)q;
  assertEquals(4,bq.clauses().size());
  for (  BooleanClause clause : bq.clauses()) {
    DummyQueryParserPlugin.DummyQuery dummy=(DummyQueryParserPlugin.DummyQuery)clause.getQuery();
switch (clause.getOccur()) {
case FILTER:
case MUST_NOT:
      assertEquals(true,dummy.isFilter);
    break;
case MUST:
case SHOULD:
  assertEquals(false,dummy.isFilter);
break;
default :
throw new AssertionError();
}
}
q=queryParser.parse(boolQuery().should(new DummyQueryParserPlugin.DummyQueryBuilder()).should(new DummyQueryParserPlugin.DummyQueryBuilder()).must(new DummyQueryParserPlugin.DummyQueryBuilder()).must(new DummyQueryParserPlugin.DummyQueryBuilder()).filter(new DummyQueryParserPlugin.DummyQueryBuilder()).filter(new DummyQueryParserPlugin.DummyQueryBuilder()).mustNot(new DummyQueryParserPlugin.DummyQueryBuilder()).mustNot(new DummyQueryParserPlugin.DummyQueryBuilder())).query();
assertThat(q,instanceOf(BooleanQuery.class));
bq=(BooleanQuery)q;
assertEquals(8,bq.clauses().size());
for (BooleanClause clause : bq.clauses()) {
DummyQueryParserPlugin.DummyQuery dummy=(DummyQueryParserPlugin.DummyQuery)clause.getQuery();
switch (clause.getOccur()) {
case FILTER:
case MUST_NOT:
assertEquals(true,dummy.isFilter);
break;
case MUST:
case SHOULD:
assertEquals(false,dummy.isFilter);
break;
default :
throw new AssertionError();
}
}
}
