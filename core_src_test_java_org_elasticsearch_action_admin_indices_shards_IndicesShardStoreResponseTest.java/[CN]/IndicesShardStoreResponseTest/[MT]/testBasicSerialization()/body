{
  ImmutableOpenMap.Builder<String,ImmutableOpenIntMap<List<IndicesShardStoresResponse.StoreStatus>>> indexStoreStatuses=ImmutableOpenMap.builder();
  ImmutableList.Builder<IndicesShardStoresResponse.Failure> failures=ImmutableList.builder();
  ImmutableOpenIntMap.Builder<List<IndicesShardStoresResponse.StoreStatus>> storeStatuses=ImmutableOpenIntMap.builder();
  DiscoveryNode node1=new DiscoveryNode("node1",DummyTransportAddress.INSTANCE,Version.CURRENT);
  DiscoveryNode node2=new DiscoveryNode("node2",DummyTransportAddress.INSTANCE,Version.CURRENT);
  List<IndicesShardStoresResponse.StoreStatus> storeStatusList=new ArrayList<>();
  storeStatusList.add(new IndicesShardStoresResponse.StoreStatus(node1,3,IndicesShardStoresResponse.StoreStatus.Allocation.PRIMARY,null));
  storeStatusList.add(new IndicesShardStoresResponse.StoreStatus(node2,2,IndicesShardStoresResponse.StoreStatus.Allocation.REPLICA,null));
  storeStatusList.add(new IndicesShardStoresResponse.StoreStatus(node1,1,IndicesShardStoresResponse.StoreStatus.Allocation.UNUSED,new IOException("corrupted")));
  storeStatuses.put(0,storeStatusList);
  storeStatuses.put(1,storeStatusList);
  ImmutableOpenIntMap<List<IndicesShardStoresResponse.StoreStatus>> storesMap=storeStatuses.build();
  indexStoreStatuses.put("test",storesMap);
  indexStoreStatuses.put("test2",storesMap);
  failures.add(new IndicesShardStoresResponse.Failure("node1","test",3,new NodeDisconnectedException(node1,"")));
  IndicesShardStoresResponse storesResponse=new IndicesShardStoresResponse(indexStoreStatuses.build(),failures.build());
  XContentBuilder contentBuilder=XContentFactory.jsonBuilder();
  contentBuilder.startObject();
  storesResponse.toXContent(contentBuilder,ToXContent.EMPTY_PARAMS);
  contentBuilder.endObject();
  BytesReference bytes=contentBuilder.bytes();
  try (XContentParser parser=XContentFactory.xContent(XContentType.JSON).createParser(bytes)){
    Map<String,Object> map=parser.map();
    List failureList=(List)map.get("failures");
    assertThat(failureList.size(),equalTo(1));
    HashMap failureMap=(HashMap)failureList.get(0);
    assertThat(failureMap.containsKey("index"),equalTo(true));
    assertThat(((String)failureMap.get("index")),equalTo("test"));
    assertThat(failureMap.containsKey("shard"),equalTo(true));
    assertThat(((int)failureMap.get("shard")),equalTo(3));
    assertThat(failureMap.containsKey("node"),equalTo(true));
    assertThat(((String)failureMap.get("node")),equalTo("node1"));
    Map<String,Object> indices=(Map<String,Object>)map.get("indices");
    for (    String index : new String[]{"test","test2"}) {
      assertThat(indices.containsKey(index),equalTo(true));
      Map<String,Object> shards=((Map<String,Object>)((Map<String,Object>)indices.get(index)).get("shards"));
      assertThat(shards.size(),equalTo(2));
      for (      String shardId : shards.keySet()) {
        HashMap shardStoresStatus=(HashMap)shards.get(shardId);
        assertThat(shardStoresStatus.containsKey("stores"),equalTo(true));
        List stores=(ArrayList)shardStoresStatus.get("stores");
        assertThat(stores.size(),equalTo(storeStatusList.size()));
        for (int i=0; i < stores.size(); i++) {
          HashMap storeInfo=((HashMap)stores.get(i));
          IndicesShardStoresResponse.StoreStatus storeStatus=storeStatusList.get(i);
          assertThat(storeInfo.containsKey("version"),equalTo(true));
          assertThat(((int)storeInfo.get("version")),equalTo(((int)storeStatus.getVersion())));
          assertThat(storeInfo.containsKey("allocation"),equalTo(true));
          assertThat(((String)storeInfo.get("allocation")),equalTo(storeStatus.getAllocation().value()));
          assertThat(storeInfo.containsKey(storeStatus.getNode().id()),equalTo(true));
          if (storeStatus.getStoreException() != null) {
            assertThat(storeInfo.containsKey("store_exception"),equalTo(true));
          }
        }
      }
    }
  }
 }
