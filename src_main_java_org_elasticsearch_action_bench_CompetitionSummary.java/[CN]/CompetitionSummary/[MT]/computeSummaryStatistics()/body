{
  if (computed) {
    return;
  }
  long totalWarmupTime=0;
  final SinglePassStatistics single=new SinglePassStatistics();
  for (  CompetitionNodeResult nodeResult : nodeResults) {
    totalWarmupTime+=nodeResult.warmUpTime();
    totalIterations+=nodeResult.totalIterations();
    completedIterations+=nodeResult.completedIterations();
    for (int i=0; i < nodeResult.completedIterations(); i++) {
      CompetitionIteration competitionIteration=nodeResult.iterations().get(i);
      CompetitionIterationData iterationData=competitionIteration.competitionIterationData();
      long[] data=iterationData.data();
      for (      long datum : data) {
        if (datum > -1) {
          single.push(datum);
        }
      }
      totalQueries+=competitionIteration.numQueries();
      totalTime+=competitionIteration.totalTime();
      sumTotalHits+=competitionIteration.sumTotalHits();
      if (competitionIteration.slowRequests() != null) {
        for (        CompetitionIteration.SlowRequest slow : competitionIteration.slowRequests()) {
          slowest.add(new Tuple<>(nodeResult.nodeName(),slow));
        }
      }
    }
  }
  min=single.min();
  max=single.max();
  mean=single.mean();
  stdDeviation=single.stddev();
  avgWarmupTime=(nodeResults.size() > 0) ? totalWarmupTime / nodeResults.size() : 0.0;
  queriesPerSecond=(single.sum() > 0) ? (totalQueries * (1000.0 / (double)single.sum())) : 0.0;
  millisPerHit=(sumTotalHits > 0) ? (totalTime / (double)sumTotalHits) : 0.0;
  for (  double percentile : percentiles) {
    percentileValues.put(percentile,single.percentile(percentile / 100.0d));
  }
  CollectionUtil.timSort(slowest,new Comparator<Tuple<String,CompetitionIteration.SlowRequest>>(){
    @Override public int compare(    Tuple<String,CompetitionIteration.SlowRequest> o1,    Tuple<String,CompetitionIteration.SlowRequest> o2){
      return Long.compare(o2.v2().maxTimeTaken(),o1.v2().maxTimeTaken());
    }
  }
);
  computed=true;
}
