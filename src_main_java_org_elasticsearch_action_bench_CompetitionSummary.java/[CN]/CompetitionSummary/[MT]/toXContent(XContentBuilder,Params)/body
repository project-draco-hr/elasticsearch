{
  computeSummaryStatistics();
  builder.startObject(Fields.SUMMARY);
  builder.startArray(Fields.NODES);
  for (  CompetitionNodeResult nodeResult : nodeResults) {
    builder.field(nodeResult.nodeName());
  }
  builder.endArray();
  builder.field(Fields.TOTAL_ITERATIONS,totalIterations);
  builder.field(Fields.COMPLETED_ITERATIONS,completedIterations);
  builder.field(Fields.TOTAL_QUERIES,totalQueries);
  builder.field(Fields.CONCURRENCY,concurrency);
  builder.field(Fields.MULTIPLIER,multiplier);
  builder.field(Fields.AVG_WARMUP_TIME,avgWarmupTime);
  builder.startObject(Fields.STATISTICS);
  builder.field(Fields.MIN,min == Long.MAX_VALUE ? 0 : min);
  builder.field(Fields.MAX,max == Long.MIN_VALUE ? 0 : max);
  builder.field(Fields.MEAN,mean);
  builder.field(Fields.QPS,queriesPerSecond);
  builder.field(Fields.STD_DEV,stdDeviation);
  builder.field(Fields.MILLIS_PER_HIT,millisPerHit);
  for (  Map.Entry<Double,Double> entry : percentileValues.entrySet()) {
    builder.field(new XContentBuilderString("percentile_" + entry.getKey().longValue()),(entry.getValue().isNaN()) ? 0.0 : entry.getValue());
  }
  builder.endObject();
  if (totalIterations > 0 && slowest.size() > 0) {
    builder.startArray(Fields.SLOWEST);
    int n=(int)(slowest.size() / totalIterations);
    for (int i=0; i < n; i++) {
      builder.startObject();
      builder.field(Fields.NODE,slowest.get(i).v1());
      slowest.get(i).v2().toXContent(builder,params);
      builder.endObject();
    }
    builder.endArray();
  }
  builder.endObject();
  return builder;
}
