{
  ParsedDocument doc1=new ParsedDocument("1","1","test",null,-1,doc().add(uidField("1")).add(field("value","test")).build(),Lucene.STANDARD_ANALYZER,B_1,false);
  engine.create(new Engine.Create(null,newUid("1"),doc1));
  final ExecutorService executorService=Executors.newCachedThreadPool();
  engine.snapshot(new Engine.SnapshotHandler<Void>(){
    @Override public Void snapshot(    final SnapshotIndexCommit snapshotIndexCommit1,    final Translog.Snapshot translogSnapshot1){
      assertThat(snapshotIndexCommit1,snapshotIndexCommitExists());
      assertThat(translogSnapshot1.hasNext(),equalTo(true));
      Translog.Create create1=(Translog.Create)translogSnapshot1.next();
      assertThat(create1.source(),equalTo(B_1));
      assertThat(translogSnapshot1.hasNext(),equalTo(false));
      Future<Object> future=executorService.submit(new Callable<Object>(){
        @Override public Object call() throws Exception {
          engine.flush(new Engine.Flush());
          ParsedDocument doc2=new ParsedDocument("2","2","test",null,-1,doc().add(uidField("2")).add(field("value","test")).build(),Lucene.STANDARD_ANALYZER,B_2,false);
          engine.create(new Engine.Create(null,newUid("2"),doc2));
          engine.flush(new Engine.Flush());
          ParsedDocument doc3=new ParsedDocument("3","3","test",null,-1,doc().add(uidField("3")).add(field("value","test")).build(),Lucene.STANDARD_ANALYZER,B_3,false);
          engine.create(new Engine.Create(null,newUid("3"),doc3));
          return null;
        }
      }
);
      try {
        future.get();
      }
 catch (      Exception e) {
        e.printStackTrace();
        assertThat(e.getMessage(),false,equalTo(true));
      }
      assertThat(snapshotIndexCommit1,snapshotIndexCommitExists());
      engine.snapshot(new Engine.SnapshotHandler<Void>(){
        @Override public Void snapshot(        SnapshotIndexCommit snapshotIndexCommit2,        Translog.Snapshot translogSnapshot2) throws EngineException {
          assertThat(snapshotIndexCommit1,snapshotIndexCommitExists());
          assertThat(snapshotIndexCommit2,snapshotIndexCommitExists());
          assertThat(snapshotIndexCommit2.getSegmentsFileName(),not(equalTo(snapshotIndexCommit1.getSegmentsFileName())));
          assertThat(translogSnapshot2.hasNext(),equalTo(true));
          Translog.Create create3=(Translog.Create)translogSnapshot2.next();
          assertThat(create3.source(),equalTo(B_3));
          assertThat(translogSnapshot2.hasNext(),equalTo(false));
          return null;
        }
      }
);
      return null;
    }
  }
);
  engine.close();
}
