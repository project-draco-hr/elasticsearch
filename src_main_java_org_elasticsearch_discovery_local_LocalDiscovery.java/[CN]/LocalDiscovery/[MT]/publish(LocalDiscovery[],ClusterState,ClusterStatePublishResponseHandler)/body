{
  try {
    final byte[] clusterStateBytes=Builder.toBytes(clusterState);
    for (    final LocalDiscovery discovery : members) {
      if (discovery.master) {
        continue;
      }
      final ClusterState nodeSpecificClusterState=ClusterState.Builder.fromBytes(clusterStateBytes,discovery.localNode);
      if (nodeSpecificClusterState.nodes().localNode() != null) {
        discovery.clusterService.submitStateUpdateTask("local-disco-receive(from master)",new ProcessedClusterStateUpdateTask(){
          @Override public ClusterState execute(          ClusterState currentState){
            ClusterState.Builder builder=ClusterState.builder(nodeSpecificClusterState);
            if (nodeSpecificClusterState.routingTable().version() == currentState.routingTable().version()) {
              builder.routingTable(currentState.routingTable());
            }
            if (nodeSpecificClusterState.metaData().version() == currentState.metaData().version()) {
              builder.metaData(currentState.metaData());
            }
            return builder.build();
          }
          @Override public void onFailure(          String source,          Throwable t){
            logger.error("unexpected failure during [{}]",t,source);
            publishResponseHandler.onFailure(discovery.localNode,t);
          }
          @Override public void clusterStateProcessed(          String source,          ClusterState oldState,          ClusterState newState){
            sendInitialStateEventIfNeeded();
            publishResponseHandler.onResponse(discovery.localNode);
          }
        }
);
      }
 else {
        publishResponseHandler.onResponse(discovery.localNode);
      }
    }
    if (publishTimeout.millis() > 0) {
      try {
        boolean awaited=publishResponseHandler.awaitAllNodes(publishTimeout);
        if (!awaited) {
          logger.debug("awaiting all nodes to process published state {} timed out, timeout {}",clusterState.version(),publishTimeout);
        }
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
  }
 catch (  Exception e) {
    throw new ElasticSearchIllegalStateException("Cluster state failed to serialize",e);
  }
}
