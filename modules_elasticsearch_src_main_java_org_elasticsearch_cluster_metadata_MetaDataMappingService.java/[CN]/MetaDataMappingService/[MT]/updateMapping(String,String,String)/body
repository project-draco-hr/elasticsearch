{
  clusterService.submitStateUpdateTask("update-mapping [" + index + "]["+ type+ "]",new ClusterStateUpdateTask(){
    @Override public ClusterState execute(    ClusterState currentState){
      try {
        IndexService indexService=indicesService.indexService(index);
        if (indexService == null) {
          final IndexMetaData indexMetaData=currentState.metaData().index(index);
          indexService=indicesService.createIndex(indexMetaData.index(),indexMetaData.settings(),currentState.nodes().localNode().id());
          if (indexMetaData.mappings().containsKey(type)) {
            indexService.mapperService().add(type,indexMetaData.mappings().get(type).string());
          }
        }
        MapperService mapperService=indexService.mapperService();
        DocumentMapper existingMapper=mapperService.documentMapper(type);
        DocumentMapper updatedMapper=mapperService.parse(type,mappingSource);
        if (existingMapper == null) {
          existingMapper=updatedMapper;
        }
 else {
          existingMapper.merge(updatedMapper,mergeFlags().simulate(false));
        }
        if (logger.isDebugEnabled()) {
          try {
            logger.debug("[{}] update_mapping [{}] (dynamic) with source [{}]",index,type,existingMapper.mappingSource().string());
          }
 catch (          IOException e) {
          }
        }
 else         if (logger.isInfoEnabled()) {
          logger.info("[{}] update_mapping [{}] (dynamic)",index,type);
        }
        MetaData.Builder builder=newMetaDataBuilder().metaData(currentState.metaData());
        IndexMetaData indexMetaData=currentState.metaData().index(index);
        builder.put(newIndexMetaDataBuilder(indexMetaData).putMapping(type,existingMapper.mappingSource()));
        return newClusterStateBuilder().state(currentState).metaData(builder).build();
      }
 catch (      Exception e) {
        logger.warn("failed to dynamically update the mapping in cluster_state from shard",e);
        return currentState;
      }
    }
  }
);
}
