{
  clusterService.submitStateUpdateTask("put-mapping [" + request.mappingType + "]",new ProcessedClusterStateUpdateTask(){
    @Override public ClusterState execute(    ClusterState currentState){
      try {
        if (request.indices.length == 0) {
          throw new IndexMissingException(new Index("_all"));
        }
        for (        String index : request.indices) {
          if (!currentState.metaData().hasIndex(index)) {
            listener.onFailure(new IndexMissingException(new Index(index)));
          }
        }
        Map<String,DocumentMapper> newMappers=newHashMap();
        Map<String,DocumentMapper> existingMappers=newHashMap();
        for (        String index : request.indices) {
          IndexService indexService=indicesService.indexService(index);
          if (indexService != null) {
            DocumentMapper newMapper=indexService.mapperService().parse(request.mappingType,request.mappingSource);
            newMappers.put(index,newMapper);
            DocumentMapper existingMapper=indexService.mapperService().documentMapper(request.mappingType);
            if (existingMapper != null) {
              DocumentMapper.MergeResult mergeResult=existingMapper.merge(newMapper,mergeFlags().simulate(true));
              if (!request.ignoreConflicts && mergeResult.hasConflicts()) {
                throw new MergeMappingException(mergeResult.conflicts());
              }
              existingMappers.put(index,existingMapper);
            }
          }
 else {
            throw new IndexMissingException(new Index(index));
          }
        }
        String mappingType=request.mappingType;
        if (mappingType == null) {
          mappingType=newMappers.values().iterator().next().type();
        }
 else         if (!mappingType.equals(newMappers.values().iterator().next().type())) {
          throw new InvalidTypeNameException("Type name provided does not match type name within mapping definition");
        }
        if (!MapperService.DEFAULT_MAPPING.equals(mappingType) && mappingType.charAt(0) == '_') {
          throw new InvalidTypeNameException("Document mapping type name can't start with '_'");
        }
        final Map<String,Tuple<String,CompressedString>> mappings=newHashMap();
        for (        Map.Entry<String,DocumentMapper> entry : newMappers.entrySet()) {
          String index=entry.getKey();
          DocumentMapper newMapper=entry.getValue();
          if (existingMappers.containsKey(entry.getKey())) {
            DocumentMapper existingMapper=existingMappers.get(entry.getKey());
            CompressedString existingSource=existingMapper.mappingSource();
            existingMapper.merge(newMapper,mergeFlags().simulate(false));
            CompressedString updatedSource=existingMapper.mappingSource();
            if (existingSource.equals(updatedSource)) {
            }
 else {
              mappings.put(index,new Tuple<String,CompressedString>(existingMapper.type(),updatedSource));
              if (logger.isDebugEnabled()) {
                logger.debug("[{}] update_mapping [{}] with source [{}]",index,existingMapper.type(),updatedSource);
              }
 else               if (logger.isInfoEnabled()) {
                logger.info("[{}] update_mapping [{}]",index,existingMapper.type());
              }
            }
          }
 else {
            CompressedString newSource=newMapper.mappingSource();
            mappings.put(index,new Tuple<String,CompressedString>(newMapper.type(),newSource));
            if (logger.isDebugEnabled()) {
              logger.debug("[{}] create_mapping [{}] with source [{}]",index,newMapper.type(),newSource);
            }
 else             if (logger.isInfoEnabled()) {
              logger.info("[{}] create_mapping [{}]",index,newMapper.type());
            }
          }
        }
        if (mappings.isEmpty()) {
          listener.onResponse(new Response(true));
          return currentState;
        }
        MetaData.Builder builder=newMetaDataBuilder().metaData(currentState.metaData());
        for (        String indexName : request.indices) {
          IndexMetaData indexMetaData=currentState.metaData().index(indexName);
          if (indexMetaData == null) {
            throw new IndexMissingException(new Index(indexName));
          }
          Tuple<String,CompressedString> mapping=mappings.get(indexName);
          if (mapping != null) {
            builder.put(newIndexMetaDataBuilder(indexMetaData).putMapping(mapping.v1(),mapping.v2()));
          }
        }
        return newClusterStateBuilder().state(currentState).metaData(builder).build();
      }
 catch (      Exception e) {
        listener.onFailure(e);
        return currentState;
      }
    }
    @Override public void clusterStateProcessed(    ClusterState clusterState){
      listener.onResponse(new Response(true));
    }
  }
);
}
