{
  Map<String,Map<Integer,Object>> allResults=new HashMap<>();
  for (  SyncedFlushService.SyncedFlushResult result : results) {
    String indexName=result.getShardId().index().name();
    int shardId=result.getShardId().getId();
    if (allResults.get(indexName) == null) {
      allResults.put(indexName,new TreeMap<Integer,Object>());
    }
    if (result.shardResponses().size() > 0) {
      Map<ShardRouting,SyncedFlushService.SyncedFlushResponse> shardResponses=new HashMap<>();
      for (      Map.Entry<ShardRouting,SyncedFlushService.SyncedFlushResponse> shardResponse : result.shardResponses().entrySet()) {
        shardResponses.put(shardResponse.getKey(),shardResponse.getValue());
      }
      allResults.get(indexName).put(shardId,shardResponses);
    }
 else {
      allResults.get(indexName).put(shardId,result.failureReason());
    }
  }
  for (  Map.Entry<String,Map<Integer,Object>> result : allResults.entrySet()) {
    builder.startArray(result.getKey());
    for (    Map.Entry<Integer,Object> shardResponse : result.getValue().entrySet()) {
      builder.startObject();
      builder.field("shard_id",shardResponse.getKey());
      if (shardResponse.getValue() instanceof Map) {
        builder.startObject("responses");
        Map<ShardRouting,SyncedFlushService.SyncedFlushResponse> results=(Map<ShardRouting,SyncedFlushService.SyncedFlushResponse>)shardResponse.getValue();
        boolean success=true;
        for (        Map.Entry<ShardRouting,SyncedFlushService.SyncedFlushResponse> shardCopy : results.entrySet()) {
          builder.field(shardCopy.getKey().currentNodeId(),shardCopy.getValue().success() ? "success" : shardCopy.getValue().failureReason());
          if (shardCopy.getValue().success() == false) {
            success=false;
          }
        }
        builder.endObject();
        builder.field("message",success ? "success" : "failed on some copies");
      }
 else {
        builder.field("message",shardResponse.getValue());
      }
      builder.endObject();
    }
    builder.endArray();
  }
  return builder;
}
