{
  super(settings);
  this.threadPool=threadPool;
  this.networkService=networkService;
  this.version=version;
  if (settings.getAsBoolean("netty.epollBugWorkaround",false)) {
    System.setProperty("org.jboss.netty.epollBugWorkaround","true");
  }
  this.connectMutex=new Object[500];
  for (int i=0; i < connectMutex.length; i++) {
    connectMutex[i]=new Object();
  }
  this.workerCount=componentSettings.getAsInt("worker_count",EsExecutors.boundedNumberOfProcessors() * 2);
  this.bossCount=componentSettings.getAsInt("boss_count",1);
  this.blockingServer=settings.getAsBoolean("transport.tcp.blocking_server",settings.getAsBoolean(TCP_BLOCKING_SERVER,settings.getAsBoolean(TCP_BLOCKING,false)));
  this.blockingClient=settings.getAsBoolean("transport.tcp.blocking_client",settings.getAsBoolean(TCP_BLOCKING_CLIENT,settings.getAsBoolean(TCP_BLOCKING,false)));
  this.port=componentSettings.get("port",settings.get("transport.tcp.port","9300-9400"));
  this.bindHost=componentSettings.get("bind_host",settings.get("transport.bind_host",settings.get("transport.host")));
  this.publishHost=componentSettings.get("publish_host",settings.get("transport.publish_host",settings.get("transport.host")));
  this.compress=settings.getAsBoolean("transport.tcp.compress",false);
  this.connectTimeout=componentSettings.getAsTime("connect_timeout",settings.getAsTime("transport.tcp.connect_timeout",settings.getAsTime(TCP_CONNECT_TIMEOUT,TCP_DEFAULT_CONNECT_TIMEOUT)));
  this.tcpNoDelay=componentSettings.getAsBoolean("tcp_no_delay",settings.getAsBoolean(TCP_NO_DELAY,true));
  this.tcpKeepAlive=componentSettings.getAsBoolean("tcp_keep_alive",settings.getAsBoolean(TCP_KEEP_ALIVE,true));
  this.reuseAddress=componentSettings.getAsBoolean("reuse_address",settings.getAsBoolean(TCP_REUSE_ADDRESS,NetworkUtils.defaultReuseAddress()));
  this.tcpSendBufferSize=componentSettings.getAsBytesSize("tcp_send_buffer_size",settings.getAsBytesSize(TCP_SEND_BUFFER_SIZE,TCP_DEFAULT_SEND_BUFFER_SIZE));
  this.tcpReceiveBufferSize=componentSettings.getAsBytesSize("tcp_receive_buffer_size",settings.getAsBytesSize(TCP_RECEIVE_BUFFER_SIZE,TCP_DEFAULT_RECEIVE_BUFFER_SIZE));
  this.connectionsPerNodeLow=componentSettings.getAsInt("connections_per_node.low",settings.getAsInt("transport.connections_per_node.low",2));
  this.connectionsPerNodeMed=componentSettings.getAsInt("connections_per_node.med",settings.getAsInt("transport.connections_per_node.med",6));
  this.connectionsPerNodeHigh=componentSettings.getAsInt("connections_per_node.high",settings.getAsInt("transport.connections_per_node.high",1));
  this.connectionsPerNodePing=componentSettings.getAsInt("connections_per_node.ping",settings.getAsInt("transport.connections_per_node.ping",1));
  this.maxCumulationBufferCapacity=componentSettings.getAsBytesSize("max_cumulation_buffer_capacity",null);
  this.maxCompositeBufferComponents=componentSettings.getAsInt("max_composite_buffer_components",-1);
  long defaultReceiverPredictor=512 * 1024;
  if (JvmInfo.jvmInfo().mem().directMemoryMax().bytes() > 0) {
    long l=(long)((0.3 * JvmInfo.jvmInfo().mem().directMemoryMax().bytes()) / workerCount);
    defaultReceiverPredictor=Math.min(defaultReceiverPredictor,Math.max(l,64 * 1024));
  }
  ByteSizeValue receivePredictorMin=componentSettings.getAsBytesSize("receive_predictor_min",componentSettings.getAsBytesSize("receive_predictor_size",new ByteSizeValue(defaultReceiverPredictor)));
  ByteSizeValue receivePredictorMax=componentSettings.getAsBytesSize("receive_predictor_max",componentSettings.getAsBytesSize("receive_predictor_size",new ByteSizeValue(defaultReceiverPredictor)));
  if (receivePredictorMax.bytes() == receivePredictorMin.bytes()) {
    receiveBufferSizePredictorFactory=new FixedReceiveBufferSizePredictorFactory((int)receivePredictorMax.bytes());
  }
 else {
    receiveBufferSizePredictorFactory=new AdaptiveReceiveBufferSizePredictorFactory((int)receivePredictorMin.bytes(),(int)receivePredictorMin.bytes(),(int)receivePredictorMax.bytes());
  }
  logger.debug("using worker_count[{}], port[{}], bind_host[{}], publish_host[{}], compress[{}], connect_timeout[{}], connections_per_node[{}/{}/{}/{}], receive_predictor[{}->{}]",workerCount,port,bindHost,publishHost,compress,connectTimeout,connectionsPerNodeLow,connectionsPerNodeMed,connectionsPerNodeHigh,connectionsPerNodePing,receivePredictorMin,receivePredictorMax);
}
