{
  ChannelFuture[] connectLow=new ChannelFuture[nodeChannels.low.length];
  ChannelFuture[] connectMed=new ChannelFuture[nodeChannels.med.length];
  ChannelFuture[] connectHigh=new ChannelFuture[nodeChannels.high.length];
  ChannelFuture[] connectPing=new ChannelFuture[nodeChannels.ping.length];
  InetSocketAddress address=((InetSocketTransportAddress)node.address()).address();
  for (int i=0; i < connectLow.length; i++) {
    connectLow[i]=clientBootstrap.connect(address);
  }
  for (int i=0; i < connectMed.length; i++) {
    connectMed[i]=clientBootstrap.connect(address);
  }
  for (int i=0; i < connectHigh.length; i++) {
    connectHigh[i]=clientBootstrap.connect(address);
  }
  for (int i=0; i < connectPing.length; i++) {
    connectPing[i]=clientBootstrap.connect(address);
  }
  try {
    for (int i=0; i < connectLow.length; i++) {
      connectLow[i].awaitUninterruptibly((long)(connectTimeout.millis() * 1.5));
      if (!connectLow[i].isSuccess()) {
        throw new ConnectTransportException(node,"connect_timeout[" + connectTimeout + "]",connectLow[i].getCause());
      }
      nodeChannels.low[i]=connectLow[i].getChannel();
      nodeChannels.low[i].getCloseFuture().addListener(new ChannelCloseListener(node));
    }
    for (int i=0; i < connectMed.length; i++) {
      connectMed[i].awaitUninterruptibly((long)(connectTimeout.millis() * 1.5));
      if (!connectMed[i].isSuccess()) {
        throw new ConnectTransportException(node,"connect_timeout[" + connectTimeout + "]",connectMed[i].getCause());
      }
      nodeChannels.med[i]=connectMed[i].getChannel();
      nodeChannels.med[i].getCloseFuture().addListener(new ChannelCloseListener(node));
    }
    for (int i=0; i < connectHigh.length; i++) {
      connectHigh[i].awaitUninterruptibly((long)(connectTimeout.millis() * 1.5));
      if (!connectHigh[i].isSuccess()) {
        throw new ConnectTransportException(node,"connect_timeout[" + connectTimeout + "]",connectHigh[i].getCause());
      }
      nodeChannels.high[i]=connectHigh[i].getChannel();
      nodeChannels.high[i].getCloseFuture().addListener(new ChannelCloseListener(node));
    }
    for (int i=0; i < connectPing.length; i++) {
      connectPing[i].awaitUninterruptibly((long)(connectTimeout.millis() * 1.5));
      if (!connectPing[i].isSuccess()) {
        throw new ConnectTransportException(node,"connect_timeout[" + connectTimeout + "]",connectPing[i].getCause());
      }
      nodeChannels.ping[i]=connectPing[i].getChannel();
      nodeChannels.ping[i].getCloseFuture().addListener(new ChannelCloseListener(node));
    }
    if (nodeChannels.low.length == 0) {
      if (nodeChannels.med.length > 0) {
        nodeChannels.low=nodeChannels.med;
      }
 else {
        nodeChannels.low=nodeChannels.high;
      }
    }
    if (nodeChannels.med.length == 0) {
      if (nodeChannels.high.length > 0) {
        nodeChannels.med=nodeChannels.high;
      }
 else {
        nodeChannels.med=nodeChannels.low;
      }
    }
    if (nodeChannels.high.length == 0) {
      if (nodeChannels.med.length > 0) {
        nodeChannels.high=nodeChannels.med;
      }
 else {
        nodeChannels.high=nodeChannels.low;
      }
    }
    if (nodeChannels.ping.length == 0) {
      if (nodeChannels.high.length > 0) {
        nodeChannels.ping=nodeChannels.high;
      }
 else {
        nodeChannels.ping=nodeChannels.med;
      }
    }
  }
 catch (  RuntimeException e) {
    for (    ChannelFuture future : ImmutableList.<ChannelFuture>builder().add(connectLow).add(connectMed).add(connectHigh).build()) {
      future.cancel();
      if (future.getChannel() != null && future.getChannel().isOpen()) {
        try {
          future.getChannel().close();
        }
 catch (        Exception e1) {
        }
      }
    }
    throw e;
  }
}
