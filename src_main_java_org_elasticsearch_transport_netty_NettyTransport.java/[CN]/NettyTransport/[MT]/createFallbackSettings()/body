{
  ImmutableSettings.Builder fallbackSettingsBuilder=settingsBuilder();
  String fallbackBindHost=componentSettings.get("bind_host",settings.get("transport.bind_host",settings.get("transport.host")));
  if (fallbackBindHost != null) {
    fallbackSettingsBuilder.put("bind_host",fallbackBindHost);
  }
  String fallbackPublishHost=componentSettings.get("publish_host",settings.get("transport.publish_host",settings.get("transport.host")));
  if (fallbackPublishHost != null) {
    fallbackSettingsBuilder.put("publish_host",fallbackPublishHost);
  }
  String fallbackTcpNoDelay=componentSettings.get("tcp_no_delay",settings.get(TCP_NO_DELAY,"true"));
  if (fallbackTcpNoDelay != null) {
    fallbackSettingsBuilder.put("tcp_no_delay",fallbackTcpNoDelay);
  }
  String fallbackTcpKeepAlive=componentSettings.get("tcp_keep_alive",settings.get(TCP_KEEP_ALIVE,"true"));
  if (fallbackTcpKeepAlive != null) {
    fallbackSettingsBuilder.put("tcp_keep_alive",fallbackTcpKeepAlive);
  }
  Boolean fallbackReuseAddress=componentSettings.getAsBoolean("reuse_address",settings.getAsBoolean(TCP_REUSE_ADDRESS,NetworkUtils.defaultReuseAddress()));
  if (fallbackReuseAddress != null) {
    fallbackSettingsBuilder.put("reuse_address",fallbackReuseAddress);
  }
  ByteSizeValue fallbackTcpSendBufferSize=componentSettings.getAsBytesSize("tcp_send_buffer_size",settings.getAsBytesSize(TCP_SEND_BUFFER_SIZE,TCP_DEFAULT_SEND_BUFFER_SIZE));
  if (fallbackTcpSendBufferSize != null) {
    fallbackSettingsBuilder.put("tcp_send_buffer_size",fallbackTcpSendBufferSize);
  }
  ByteSizeValue fallbackTcpBufferSize=componentSettings.getAsBytesSize("tcp_receive_buffer_size",settings.getAsBytesSize(TCP_RECEIVE_BUFFER_SIZE,TCP_DEFAULT_RECEIVE_BUFFER_SIZE));
  if (fallbackTcpBufferSize != null) {
    fallbackSettingsBuilder.put("tcp_receive_buffer_size",fallbackTcpBufferSize);
  }
  return fallbackSettingsBuilder.build();
}
