{
  final CountDownLatch latch=new CountDownLatch(1);
  threadPool.generic().execute(new Runnable(){
    @Override public void run(){
      globalLock.writeLock().lock();
      try {
        for (Iterator<NodeChannels> it=connectedNodes.values().iterator(); it.hasNext(); ) {
          NodeChannels nodeChannels=it.next();
          it.remove();
          nodeChannels.close();
        }
        Iterator<Map.Entry<String,Channel>> serverChannelIterator=serverChannels.entrySet().iterator();
        while (serverChannelIterator.hasNext()) {
          Map.Entry<String,Channel> serverChannelEntry=serverChannelIterator.next();
          String name=serverChannelEntry.getKey();
          Channel serverChannel=serverChannelEntry.getValue();
          try {
            serverChannel.close().awaitUninterruptibly();
          }
 catch (          Throwable t) {
            logger.debug("Error closing serverChannel for profile [{}]",t,name);
          }
          serverChannelIterator.remove();
        }
        if (serverOpenChannels != null) {
          serverOpenChannels.close();
          serverOpenChannels=null;
        }
        Iterator<Map.Entry<String,ServerBootstrap>> serverBootstrapIterator=serverBootstraps.entrySet().iterator();
        while (serverBootstrapIterator.hasNext()) {
          Map.Entry<String,ServerBootstrap> serverBootstrapEntry=serverBootstrapIterator.next();
          String name=serverBootstrapEntry.getKey();
          ServerBootstrap serverBootstrap=serverBootstrapEntry.getValue();
          try {
            serverBootstrap.releaseExternalResources();
          }
 catch (          Throwable t) {
            logger.debug("Error closing serverBootstrap for profile [{}]",t,name);
          }
          serverBootstrapIterator.remove();
        }
        for (Iterator<NodeChannels> it=connectedNodes.values().iterator(); it.hasNext(); ) {
          NodeChannels nodeChannels=it.next();
          it.remove();
          nodeChannels.close();
        }
        if (clientBootstrap != null) {
          clientBootstrap.releaseExternalResources();
          clientBootstrap=null;
        }
      }
  finally {
        globalLock.writeLock().unlock();
        latch.countDown();
      }
    }
  }
);
  try {
    latch.await(30,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
  }
}
