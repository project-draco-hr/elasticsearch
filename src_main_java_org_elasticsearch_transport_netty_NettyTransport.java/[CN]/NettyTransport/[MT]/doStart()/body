{
  clientBootstrap=createClientBootstrap();
  if (!settings.getAsBoolean("network.server",true)) {
    return;
  }
  final OpenChannelsHandler openChannels=new OpenChannelsHandler(logger);
  this.serverOpenChannels=openChannels;
  Map<String,Settings> profiles=settings.getGroups("transport.profiles",true);
  if (!profiles.containsKey("default")) {
    profiles=Maps.newHashMap(profiles);
    profiles.put("default",ImmutableSettings.EMPTY);
  }
  Settings fallbackSettings=createFallbackSettings();
  Settings defaultSettings=profiles.get("default");
  for (  Map.Entry<String,Settings> entry : profiles.entrySet()) {
    Settings profileSettings=entry.getValue();
    String name=entry.getKey();
    if ("default".equals(name)) {
      profileSettings=settingsBuilder().put(profileSettings).put("port",profileSettings.get("port",componentSettings.get("port",this.settings.get("transport.tcp.port",DEFAULT_PORT_RANGE)))).build();
    }
 else {
      if (profileSettings.get("port") == null) {
        logger.info("No port configured for profile [{}], not binding",name);
        continue;
      }
    }
    Settings mergedSettings=settingsBuilder().put(fallbackSettings).put(defaultSettings).put(profileSettings).build();
    createServerBootstrap(name,mergedSettings);
    bindServerBootstrap(name,mergedSettings);
  }
  InetSocketAddress boundAddress=(InetSocketAddress)serverChannels.get("default").getLocalAddress();
  InetSocketAddress publishAddress;
  int publishPort=componentSettings.getAsInt("publish_port",settings.getAsInt("transport.publish_port",0));
  if (0 == publishPort) {
    publishPort=boundAddress.getPort();
  }
  try {
    String publishHost=componentSettings.get("publish_host",settings.get("transport.publish_host",settings.get("transport.host")));
    publishAddress=new InetSocketAddress(networkService.resolvePublishHostAddress(publishHost),publishPort);
  }
 catch (  Exception e) {
    throw new BindTransportException("Failed to resolve publish address",e);
  }
  this.boundAddress=new BoundTransportAddress(new InetSocketTransportAddress(boundAddress),new InetSocketTransportAddress(publishAddress));
}
