{
  assertAcked(prepareCreate("test").addMapping("parent").addMapping("child","_parent","type=parent"));
  ensureGreen();
  List<IndexRequestBuilder> builders=new ArrayList<>();
  for (int i=0; i < 10; i++) {
    builders.add(client().prepareIndex("test","parent",Integer.toString(i)).setSource("p_field",i));
  }
  indexRandom(randomBoolean(),builders);
  builders.clear();
  for (int j=0; j < 2; j++) {
    for (int i=0; i < 10; i++) {
      builders.add(client().prepareIndex("test","child",Integer.toString(i)).setSource("c_field",i).setParent("" + 0));
    }
    for (int i=0; i < 10; i++) {
      builders.add(client().prepareIndex("test","child",Integer.toString(i + 10)).setSource("c_field",i + 10).setParent(Integer.toString(i)));
    }
    if (randomBoolean()) {
      break;
    }
  }
  indexRandom(true,builders);
  for (int i=1; i <= 10; i++) {
    logger.info("Round {}",i);
    SearchResponse searchResponse=client().prepareSearch("test").setQuery(constantScoreQuery(hasChildQuery("child",matchAllQuery()).scoreType(ScoreType.MAX))).get();
    assertNoFailures(searchResponse);
    searchResponse=client().prepareSearch("test").setQuery(constantScoreQuery(hasParentQuery("parent",matchAllQuery()).scoreType("score"))).get();
    assertNoFailures(searchResponse);
  }
}
