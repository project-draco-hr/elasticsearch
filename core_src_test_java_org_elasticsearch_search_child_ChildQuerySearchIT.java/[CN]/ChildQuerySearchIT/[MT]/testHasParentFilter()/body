{
  assertAcked(prepareCreate("test").addMapping("parent").addMapping("child","_parent","type=parent"));
  ensureGreen();
  Map<String,Set<String>> parentToChildren=new HashMap<>();
  client().prepareIndex("test","parent","p0").setSource("p_field","p0").get();
  parentToChildren.put("p0",new HashSet<>());
  String previousParentId=null;
  int numChildDocs=32;
  int numChildDocsPerParent=0;
  List<IndexRequestBuilder> builders=new ArrayList<>();
  for (int i=1; i <= numChildDocs; i++) {
    if (previousParentId == null || i % numChildDocsPerParent == 0) {
      previousParentId="p" + i;
      builders.add(client().prepareIndex("test","parent",previousParentId).setSource("p_field",previousParentId));
      numChildDocsPerParent++;
    }
    String childId="c" + i;
    builders.add(client().prepareIndex("test","child",childId).setSource("c_field",childId).setParent(previousParentId));
    if (!parentToChildren.containsKey(previousParentId)) {
      parentToChildren.put(previousParentId,new HashSet<>());
    }
    assertThat(parentToChildren.get(previousParentId).add(childId),is(true));
  }
  indexRandom(true,builders.toArray(new IndexRequestBuilder[builders.size()]));
  assertThat(parentToChildren.isEmpty(),equalTo(false));
  for (  Map.Entry<String,Set<String>> parentToChildrenEntry : parentToChildren.entrySet()) {
    SearchResponse searchResponse=client().prepareSearch("test").setQuery(constantScoreQuery(hasParentQuery("parent",termQuery("p_field",parentToChildrenEntry.getKey()),false))).setSize(numChildDocsPerParent).get();
    assertNoFailures(searchResponse);
    Set<String> childIds=parentToChildrenEntry.getValue();
    assertThat(searchResponse.getHits().totalHits(),equalTo((long)childIds.size()));
    for (int i=0; i < searchResponse.getHits().totalHits(); i++) {
      assertThat(childIds.remove(searchResponse.getHits().getAt(i).id()),is(true));
      assertThat(searchResponse.getHits().getAt(i).score(),is(1.0f));
    }
    assertThat(childIds.size(),is(0));
  }
}
