{
  if (client != null) {
    return client;
  }
  ClientConfiguration clientConfiguration=new ClientConfiguration();
  String protocol=componentSettings.get("protocol","http").toLowerCase();
  if ("http".equals(protocol)) {
    clientConfiguration.setProtocol(Protocol.HTTP);
  }
 else   if ("https".equals(protocol)) {
    clientConfiguration.setProtocol(Protocol.HTTPS);
  }
 else {
    throw new ElasticSearchIllegalArgumentException("No protocol supported [" + protocol + "], can either be [http] or [https]");
  }
  String account=componentSettings.get("access_key",settings.get("cloud.account"));
  String key=componentSettings.get("secret_key",settings.get("cloud.key"));
  if (account == null) {
    throw new ElasticSearchIllegalArgumentException("No aws access_key defined for ec2 discovery");
  }
  if (key == null) {
    throw new ElasticSearchIllegalArgumentException("No aws secret_key defined for ec2 discovery");
  }
  String proxyHost=componentSettings.get("proxy_host");
  if (proxyHost != null) {
    String portString=componentSettings.get("proxy_port","80");
    Integer proxyPort;
    try {
      proxyPort=Integer.parseInt(portString,10);
    }
 catch (    NumberFormatException ex) {
      throw new ElasticSearchIllegalArgumentException("The configured proxy port value [" + portString + "] is invalid",ex);
    }
    clientConfiguration.withProxyHost(proxyHost).setProxyPort(proxyPort);
  }
  this.client=new AmazonEC2Client(new BasicAWSCredentials(account,key),clientConfiguration);
  if (componentSettings.get("ec2.endpoint") != null) {
    client.setEndpoint(componentSettings.get("ec2.endpoint"));
  }
 else   if (componentSettings.get("region") != null) {
    String endpoint;
    String region=componentSettings.get("region");
    if ("us-east".equals(region.toLowerCase())) {
      endpoint="ec2.us-east-1.amazonaws.com";
    }
 else     if ("us-east-1".equals(region.toLowerCase())) {
      endpoint="ec2.us-east-1.amazonaws.com";
    }
 else     if ("us-west".equals(region.toLowerCase())) {
      endpoint="ec2.us-west-1.amazonaws.com";
    }
 else     if ("us-west-1".equals(region.toLowerCase())) {
      endpoint="ec2.us-west-1.amazonaws.com";
    }
 else     if ("us-west-2".equals(region.toLowerCase())) {
      endpoint="ec2.us-west-2.amazonaws.com";
    }
 else     if ("ap-southeast".equals(region.toLowerCase())) {
      endpoint="ec2.ap-southeast-1.amazonaws.com";
    }
 else     if ("ap-southeast-1".equals(region.toLowerCase())) {
      endpoint="ec2.ap-southeast-1.amazonaws.com";
    }
 else     if ("ap-northeast".equals(region.toLowerCase())) {
      endpoint="ec2.ap-northeast.amazonaws.com\t";
    }
 else     if ("ap-northeast-1".equals(region.toLowerCase())) {
      endpoint="ec2.ap-northeast-1.amazonaws.com\t";
    }
 else     if ("eu-west".equals(region.toLowerCase())) {
      endpoint="ec2.eu-west-1.amazonaws.com";
    }
 else     if ("eu-west-1".equals(region.toLowerCase())) {
      endpoint="ec2.eu-west-1.amazonaws.com";
    }
 else {
      throw new ElasticSearchIllegalArgumentException("No automatic endpoint could be derived from region [" + region + "]");
    }
    if (endpoint != null) {
      client.setEndpoint(endpoint);
    }
  }
  return this.client;
}
