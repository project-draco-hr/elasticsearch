{
  return new Joiner(this){
    @Override public <A extends Appendable>A appendTo(    A appendable,    Iterable<?> parts) throws IOException {
      checkNotNull(appendable,"appendable");
      checkNotNull(parts,"parts");
      Iterator<?> iterator=parts.iterator();
      while (iterator.hasNext()) {
        Object part=iterator.next();
        if (part != null) {
          appendable.append(Joiner.this.toString(part));
          break;
        }
      }
      while (iterator.hasNext()) {
        Object part=iterator.next();
        if (part != null) {
          appendable.append(separator);
          appendable.append(Joiner.this.toString(part));
        }
      }
      return appendable;
    }
    @Override public Joiner useForNull(    String nullText){
      checkNotNull(nullText);
      throw new UnsupportedOperationException("already specified skipNulls");
    }
    @Override public MapJoiner withKeyValueSeparator(    String kvs){
      checkNotNull(kvs);
      throw new UnsupportedOperationException("can't use .skipNulls() with maps");
    }
  }
;
}
