{
  this.name=in.readString();
  this.requiredSize=readSize(in);
  this.minDocCount=in.readVLong();
  this.subsetSize=in.readVLong();
  this.supersetSize=in.readVLong();
  significanceHeuristic=SignificanceHeuristicStreams.read(in);
  int size=in.readVInt();
  List<InternalSignificantTerms.Bucket> buckets=new ArrayList<>(size);
  for (int i=0; i < size; i++) {
    BytesRef term=in.readBytesRef();
    long subsetDf=in.readVLong();
    long supersetDf=in.readVLong();
    Bucket readBucket=new Bucket(term,subsetDf,subsetSize,supersetDf,supersetSize,InternalAggregations.readAggregations(in));
    readBucket.updateScore(significanceHeuristic);
    buckets.add(readBucket);
  }
  this.buckets=buckets;
  this.bucketMap=null;
}
