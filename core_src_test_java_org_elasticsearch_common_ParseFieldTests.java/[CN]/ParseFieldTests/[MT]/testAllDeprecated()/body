{
  String[] values=new String[]{"like_text","likeText"};
  boolean withDeprecatedNames=randomBoolean();
  String[] deprecated=new String[]{"text","same_as_text"};
  String[] allValues=values;
  if (withDeprecatedNames) {
    String[] newArray=new String[allValues.length + deprecated.length];
    System.arraycopy(allValues,0,newArray,0,allValues.length);
    System.arraycopy(deprecated,0,newArray,allValues.length,deprecated.length);
    allValues=newArray;
  }
  ParseField field=new ParseField(randomFrom(values));
  if (withDeprecatedNames) {
    field=field.withDeprecation(deprecated);
  }
  field=field.withAllDeprecated("like");
  assertThat(field.match(randomFrom(allValues),ParseField.EMPTY_FLAGS),is(true));
  assertThat(field.match("not a field name",ParseField.EMPTY_FLAGS),is(false));
  EnumSet<ParseField.Flag> flags=EnumSet.of(ParseField.Flag.STRICT);
  try {
    field.match(randomFrom(allValues),flags);
    fail();
  }
 catch (  IllegalArgumentException ex) {
  }
}
