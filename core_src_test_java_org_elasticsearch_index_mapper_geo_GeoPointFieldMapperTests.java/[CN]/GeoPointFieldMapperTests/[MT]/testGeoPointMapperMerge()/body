{
  Version version=VersionUtils.randomVersionBetween(random(),Version.V_2_0_0,Version.CURRENT);
  Settings settings=Settings.settingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED,version).build();
  String stage1Mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("point").field("type","geo_point").field("lat_lon",true).field("geohash",true).endObject().endObject().endObject().endObject().string();
  DocumentMapperParser parser=createIndex("test",settings).mapperService().documentMapperParser();
  DocumentMapper stage1=parser.parse(stage1Mapping);
  String stage2Mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("point").field("type","geo_point").field("lat_lon",false).field("geohash",false).endObject().endObject().endObject().endObject().string();
  DocumentMapper stage2=parser.parse(stage2Mapping);
  MergeResult mergeResult=stage1.merge(stage2.mapping(),false,false);
  assertThat(mergeResult.hasConflicts(),equalTo(true));
  assertThat(mergeResult.buildConflicts().length,equalTo(3));
  assertThat("mapper [point] has different [lat_lon]",isIn(new ArrayList<>(Arrays.asList(mergeResult.buildConflicts()))));
  assertThat("mapper [point] has different [geohash]",isIn(new ArrayList<>(Arrays.asList(mergeResult.buildConflicts()))));
  assertThat("mapper [point] has different [geohash_precision]",isIn(new ArrayList<>(Arrays.asList(mergeResult.buildConflicts()))));
  stage2Mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("point").field("type","geo_point").field("lat_lon",true).field("geohash",true).endObject().endObject().endObject().endObject().string();
  stage2=parser.parse(stage2Mapping);
  mergeResult=stage1.merge(stage2.mapping(),false,false);
  assertThat(Arrays.toString(mergeResult.buildConflicts()),mergeResult.hasConflicts(),equalTo(false));
}
