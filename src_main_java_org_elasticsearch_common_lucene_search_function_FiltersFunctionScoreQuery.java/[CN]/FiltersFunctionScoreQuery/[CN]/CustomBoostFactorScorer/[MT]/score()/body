{
  int docId=scorer.docID();
  float score=scorer.score();
  if (scoreMode == ScoreMode.First) {
    for (int i=0; i < filterFunctions.length; i++) {
      if (docSets[i].get(docId)) {
        return subQueryWeight * filterFunctions[i].function.score(docId,score);
      }
    }
  }
 else   if (scoreMode == ScoreMode.Max) {
    float maxScore=Float.NEGATIVE_INFINITY;
    for (int i=0; i < filterFunctions.length; i++) {
      if (docSets[i].get(docId)) {
        maxScore=Math.max(filterFunctions[i].function.score(docId,score),maxScore);
      }
    }
    if (maxScore != Float.NEGATIVE_INFINITY) {
      score=maxScore;
    }
  }
 else   if (scoreMode == ScoreMode.Min) {
    float minScore=Float.POSITIVE_INFINITY;
    for (int i=0; i < filterFunctions.length; i++) {
      if (docSets[i].get(docId)) {
        minScore=Math.min(filterFunctions[i].function.score(docId,score),minScore);
      }
    }
    if (minScore != Float.POSITIVE_INFINITY) {
      score=minScore;
    }
  }
 else {
    float totalScore=0.0f;
    float multiplicativeScore=1.0f;
    int count=0;
    for (int i=0; i < filterFunctions.length; i++) {
      if (docSets[i].get(docId)) {
        float tempScore=filterFunctions[i].function.score(docId,score);
        totalScore+=tempScore;
        multiplicativeScore*=tempScore;
        count++;
      }
    }
    if (count != 0) {
      score=totalScore;
      if (scoreMode == ScoreMode.Avg) {
        score/=count;
      }
 else       if (scoreMode == ScoreMode.Multiply) {
        score=multiplicativeScore;
      }
    }
  }
  return subQueryWeight * score;
}
