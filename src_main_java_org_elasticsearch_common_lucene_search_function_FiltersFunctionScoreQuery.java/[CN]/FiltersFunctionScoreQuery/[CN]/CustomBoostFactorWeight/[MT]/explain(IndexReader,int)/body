{
  Explanation subQueryExpl=subQueryWeight.explain(reader,doc);
  if (!subQueryExpl.isMatch()) {
    return subQueryExpl;
  }
  if (scoreMode == ScoreMode.First) {
    for (    FilterFunction filterFunction : filterFunctions) {
      DocSet docSet=DocSets.convert(reader,filterFunction.filter.getDocIdSet(reader));
      if (docSet.get(doc)) {
        filterFunction.function.setNextReader(reader);
        Explanation functionExplanation=filterFunction.function.explain(doc,subQueryExpl);
        float sc=getValue() * functionExplanation.getValue();
        Explanation res=new ComplexExplanation(true,sc,"custom score, product of:");
        res.addDetail(new Explanation(1.0f,"match filter: " + filterFunction.filter.toString()));
        res.addDetail(functionExplanation);
        res.addDetail(new Explanation(getValue(),"queryBoost"));
        return res;
      }
    }
  }
 else {
    int count=0;
    float total=0;
    float multiply=1;
    float max=Float.NEGATIVE_INFINITY;
    float min=Float.POSITIVE_INFINITY;
    ArrayList<Explanation> filtersExplanations=new ArrayList<Explanation>();
    for (    FilterFunction filterFunction : filterFunctions) {
      DocSet docSet=DocSets.convert(reader,filterFunction.filter.getDocIdSet(reader));
      if (docSet.get(doc)) {
        filterFunction.function.setNextReader(reader);
        Explanation functionExplanation=filterFunction.function.explain(doc,subQueryExpl);
        float sc=functionExplanation.getValue();
        count++;
        total+=sc;
        multiply*=sc;
        max=Math.max(sc,max);
        min=Math.min(sc,min);
        Explanation res=new ComplexExplanation(true,sc,"custom score, product of:");
        res.addDetail(new Explanation(1.0f,"match filter: " + filterFunction.filter.toString()));
        res.addDetail(functionExplanation);
        res.addDetail(new Explanation(getValue(),"queryBoost"));
        filtersExplanations.add(res);
      }
    }
    if (count > 0) {
      float sc=0;
switch (scoreMode) {
case Avg:
        sc=total / count;
      break;
case Max:
    sc=max;
  break;
case Min:
sc=min;
break;
case Total:
sc=total;
break;
case Multiply:
sc=multiply;
break;
}
sc*=getValue();
Explanation res=new ComplexExplanation(true,sc,"custom score, score mode [" + scoreMode.toString().toLowerCase() + "]");
for (Explanation explanation : filtersExplanations) {
res.addDetail(explanation);
}
return res;
}
}
float sc=getValue() * subQueryExpl.getValue();
Explanation res=new ComplexExplanation(true,sc,"custom score, no filter match, product of:");
res.addDetail(subQueryExpl);
res.addDetail(new Explanation(getValue(),"queryBoost"));
return res;
}
