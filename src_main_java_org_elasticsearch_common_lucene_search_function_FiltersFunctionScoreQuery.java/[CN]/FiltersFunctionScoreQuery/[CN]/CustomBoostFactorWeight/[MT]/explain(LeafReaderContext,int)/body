{
  Explanation subQueryExpl=subQueryWeight.explain(context,doc);
  if (!subQueryExpl.isMatch()) {
    return subQueryExpl;
  }
  List<ComplexExplanation> filterExplanations=new ArrayList<>();
  float weightSum=0;
  for (  FilterFunction filterFunction : filterFunctions) {
    if (filterFunction.function instanceof WeightFactorFunction) {
      weightSum+=((WeightFactorFunction)filterFunction.function).getWeight();
    }
 else {
      weightSum++;
    }
    Bits docSet=DocIdSets.asSequentialAccessBits(context.reader().maxDoc(),filterFunction.filter.getDocIdSet(context,context.reader().getLiveDocs()));
    if (docSet.get(doc)) {
      filterFunction.function.setNextReader(context);
      Explanation functionExplanation=filterFunction.function.explainScore(doc,subQueryExpl.getValue());
      double factor=functionExplanation.getValue();
      float sc=CombineFunction.toFloat(factor);
      ComplexExplanation filterExplanation=new ComplexExplanation(true,sc,"function score, product of:");
      filterExplanation.addDetail(new Explanation(1.0f,"match filter: " + filterFunction.filter.toString()));
      filterExplanation.addDetail(functionExplanation);
      filterExplanations.add(filterExplanation);
    }
  }
  if (filterExplanations.size() == 0) {
    float sc=getBoost() * subQueryExpl.getValue();
    Explanation res=new ComplexExplanation(true,sc,"function score, no filter match, product of:");
    res.addDetail(subQueryExpl);
    res.addDetail(new Explanation(getBoost(),"queryBoost"));
    return res;
  }
  double factor=1.0;
switch (scoreMode) {
case First:
    factor=filterExplanations.get(0).getValue();
  break;
case Max:
factor=Double.NEGATIVE_INFINITY;
for (int i=0; i < filterExplanations.size(); i++) {
factor=Math.max(filterExplanations.get(i).getValue(),factor);
}
break;
case Min:
factor=Double.POSITIVE_INFINITY;
for (int i=0; i < filterExplanations.size(); i++) {
factor=Math.min(filterExplanations.get(i).getValue(),factor);
}
break;
case Multiply:
for (int i=0; i < filterExplanations.size(); i++) {
factor*=filterExplanations.get(i).getValue();
}
break;
default :
double totalFactor=0.0f;
for (int i=0; i < filterExplanations.size(); i++) {
totalFactor+=filterExplanations.get(i).getValue();
}
if (weightSum != 0) {
factor=totalFactor;
if (scoreMode == ScoreMode.Avg) {
factor/=weightSum;
}
}
}
ComplexExplanation factorExplanaition=new ComplexExplanation(true,CombineFunction.toFloat(factor),"function score, score mode [" + scoreMode.toString().toLowerCase(Locale.ROOT) + "]");
for (int i=0; i < filterExplanations.size(); i++) {
factorExplanaition.addDetail(filterExplanations.get(i));
}
return combineFunction.explain(getBoost(),subQueryExpl,factorExplanaition,maxBoost);
}
