{
  Scorer subQueryScorer=subQueryWeight.scorer(context,acceptDocs);
  if (subQueryScorer == null) {
    return null;
  }
  for (int i=0; i < filterFunctions.length; i++) {
    FilterFunction filterFunction=filterFunctions[i];
    filterFunction.function.setNextReader(context);
    docSets[i]=DocIdSets.asSequentialAccessBits(context.reader().maxDoc(),filterFunction.filter.getDocIdSet(context,acceptDocs));
  }
  return new FiltersFunctionFactorScorer(this,subQueryScorer,scoreMode,filterFunctions,maxBoost,docSets,combineFunction,minScore);
}
