{
  XContentBuilder xContentBuilder=randomXContentBuilder();
  xContentBuilder.startObject();
  xContentBuilder.startObject("field1");
  xContentBuilder.startObject("elements");
  xContentBuilder.field("element1","value1");
  xContentBuilder.endObject();
  xContentBuilder.endObject();
  xContentBuilder.endObject();
  ObjectPath objectPath=ObjectPath.createFromXContent(xContentBuilder.contentType().xContent(),xContentBuilder.string());
  try {
    objectPath.evaluate("field1.$placeholder.element1");
    fail("evaluate should have failed due to unresolved placeholder");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage(),containsString("stashed value not found for key [$placeholder]"));
  }
  Stash stash=new Stash();
  stash.stashValue("placeholder","elements");
  Object object=objectPath.evaluate("field1.$placeholder.element1",stash);
  assertThat(object,notNullValue());
  assertThat(object.toString(),equalTo("value1"));
  Map<String,Object> stashedObject=new HashMap<>();
  stashedObject.put("subobject","elements");
  stash.stashValue("object",stashedObject);
  object=objectPath.evaluate("field1.$object\\.subobject.element1",stash);
  assertThat(object,notNullValue());
  assertThat(object.toString(),equalTo("value1"));
}
