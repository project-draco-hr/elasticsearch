{
  Preconditions.checkArgument(p == other.p);
  ensureCapacity(thisBucket + 1);
  if (other.algorithm.get(otherBucket) == LINEAR_COUNTING) {
    final IntArray values=other.hashSet.values(otherBucket);
    try {
      for (long i=0; i < values.size(); ++i) {
        final int encoded=values.get(i);
        if (algorithm.get(thisBucket) == LINEAR_COUNTING) {
          collectLcEncoded(thisBucket,encoded);
        }
 else {
          collectHllEncoded(thisBucket,encoded);
        }
      }
    }
  finally {
      Releasables.close(values);
    }
  }
 else {
    if (algorithm.get(thisBucket) != HYPERLOGLOG) {
      upgradeToHll(thisBucket);
    }
    final long thisStart=thisBucket << p;
    final long otherStart=otherBucket << p;
    for (int i=0; i < m; ++i) {
      runLens.set(thisStart + i,(byte)Math.max(runLens.get(thisStart + i),other.runLens.get(otherStart + i)));
    }
  }
}
