{
  final boolean idDocValues=maybeDocValues();
  final boolean timestampDocValues=maybeDocValues();
  prepareCreate("test").addMapping("typ",XContentFactory.jsonBuilder().startObject().startObject("typ").startObject("_uid").startObject("fielddata").field("format",maybeDocValues() ? "doc_values" : null).endObject().endObject().startObject("_id").field("index",!idDocValues || randomBoolean() ? "not_analyzed" : "no").startObject("fielddata").field("format",idDocValues ? "doc_values" : null).endObject().endObject().startObject("_timestamp").field("enabled",true).field("store",true).field("index",!timestampDocValues || randomBoolean() ? "not_analyzed" : "no").startObject("fielddata").field("format",timestampDocValues ? "doc_values" : null).endObject().endObject().endObject().endObject()).execute().actionGet();
  ensureGreen();
  final int numDocs=atLeast(10);
  IndexRequestBuilder[] indexReqs=new IndexRequestBuilder[numDocs];
  for (int i=0; i < numDocs; ++i) {
    indexReqs[i]=client().prepareIndex("test","typ",Integer.toString(i)).setTimestamp(Integer.toString(randomInt(1000))).setSource();
  }
  indexRandom(true,indexReqs);
  SortOrder order=randomFrom(SortOrder.values());
  SearchResponse searchResponse=client().prepareSearch().setQuery(matchAllQuery()).setSize(randomIntBetween(1,numDocs + 5)).addSort("_uid",order).execute().actionGet();
  assertNoFailures(searchResponse);
  SearchHit[] hits=searchResponse.getHits().hits();
  BytesRef previous=order == SortOrder.ASC ? new BytesRef() : UnicodeUtil.BIG_TERM;
  for (int i=0; i < hits.length; ++i) {
    final BytesRef uid=new BytesRef(Uid.createUid(hits[i].type(),hits[i].id()));
    assertThat(previous,order == SortOrder.ASC ? lessThan(uid) : greaterThan(uid));
    previous=uid;
  }
  searchResponse=client().prepareSearch().setQuery(matchAllQuery()).setSize(randomIntBetween(1,numDocs + 5)).addSort("_timestamp",order).addField("_timestamp").execute().actionGet();
  assertNoFailures(searchResponse);
  hits=searchResponse.getHits().hits();
  Long previousTs=order == SortOrder.ASC ? 0 : Long.MAX_VALUE;
  for (int i=0; i < hits.length; ++i) {
    SearchHitField timestampField=hits[i].getFields().get("_timestamp");
    Long timestamp=timestampField.<Long>getValue();
    assertThat(previousTs,order == SortOrder.ASC ? lessThanOrEqualTo(timestamp) : greaterThanOrEqualTo(timestamp));
    previousTs=timestamp;
  }
}
