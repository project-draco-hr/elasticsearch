{
  Set<HttpHost> filteredHosts=new HashSet<>(hosts);
  for (  Map.Entry<HttpHost,DeadHostState> entry : blacklist.entrySet()) {
    if (System.nanoTime() - entry.getValue().getDeadUntil() < 0) {
      filteredHosts.remove(entry.getKey());
    }
  }
  if (filteredHosts.isEmpty()) {
    List<Map.Entry<HttpHost,DeadHostState>> sortedHosts=new ArrayList<>(blacklist.entrySet());
    Collections.sort(sortedHosts,new Comparator<Map.Entry<HttpHost,DeadHostState>>(){
      @Override public int compare(      Map.Entry<HttpHost,DeadHostState> o1,      Map.Entry<HttpHost,DeadHostState> o2){
        return Long.compare(o1.getValue().getDeadUntil(),o2.getValue().getDeadUntil());
      }
    }
);
    HttpHost deadHost=sortedHosts.get(0).getKey();
    logger.trace("resurrecting host [" + deadHost + "]");
    return Collections.singleton(deadHost).iterator();
  }
  List<HttpHost> rotatedHosts=new ArrayList<>(filteredHosts);
  Collections.rotate(rotatedHosts,rotatedHosts.size() - lastHostIndex.getAndIncrement());
  return rotatedHosts.iterator();
}
