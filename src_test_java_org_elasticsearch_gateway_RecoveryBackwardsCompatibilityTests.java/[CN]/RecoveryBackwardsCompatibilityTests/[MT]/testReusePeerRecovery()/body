{
  assertAcked(prepareCreate("test").setSettings(ImmutableSettings.builder().put(indexSettings()).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,0).put(EnableAllocationDecider.INDEX_ROUTING_REBALANCE_ENABLE,EnableAllocationDecider.Rebalance.NONE)));
  logger.info("--> indexing docs");
  int numDocs=scaledRandomIntBetween(100,1000);
  IndexRequestBuilder[] builders=new IndexRequestBuilder[numDocs];
  for (int i=0; i < builders.length; i++) {
    builders[i]=client().prepareIndex("test","type").setSource("field","value");
  }
  indexRandom(true,builders);
  ensureGreen();
  logger.info("--> bump number of replicas from 0 to 1");
  client().admin().indices().prepareFlush().execute().actionGet();
  client().admin().indices().prepareUpdateSettings("test").setSettings(ImmutableSettings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,"1").build()).get();
  ensureGreen();
  assertAllShardsOnNodes("test",backwardsCluster().backwardsNodePattern());
  logger.info("--> upgrade cluster");
  logClusterState();
  CountResponse countResponse=client().prepareCount().get();
  assertHitCount(countResponse,numDocs);
  client().admin().cluster().prepareUpdateSettings().setTransientSettings(ImmutableSettings.settingsBuilder().put(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE,"none")).execute().actionGet();
  backwardsCluster().upgradeAllNodes();
  client().admin().cluster().prepareUpdateSettings().setTransientSettings(ImmutableSettings.settingsBuilder().put(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE,"all")).execute().actionGet();
  ensureGreen();
  countResponse=client().prepareCount().get();
  assertHitCount(countResponse,numDocs);
  RecoveryResponse recoveryResponse=client().admin().indices().prepareRecoveries("test").setDetailed(true).get();
  for (  ShardRecoveryResponse response : recoveryResponse.shardResponses().get("test")) {
    RecoveryState recoveryState=response.recoveryState();
    if (!recoveryState.getPrimary()) {
      RecoveryState.Index index=recoveryState.getIndex();
      assertThat(index.toString(),index.recoveredByteCount(),equalTo(0l));
      assertThat(index.toString(),index.reusedByteCount(),greaterThan(0l));
      assertThat(index.toString(),index.reusedByteCount(),equalTo(index.totalByteCount()));
      assertThat(index.toString(),index.recoveredFileCount(),equalTo(0));
      assertThat(index.toString(),index.reusedFileCount(),equalTo(index.totalFileCount()));
      assertThat(index.toString(),index.reusedFileCount(),greaterThan(0));
      assertThat(index.toString(),index.percentBytesRecovered(),equalTo(0.f));
      assertThat(index.toString(),index.percentFilesRecovered(),equalTo(0.f));
      assertThat(index.toString(),index.reusedByteCount(),greaterThan(index.numberOfRecoveredBytes()));
    }
  }
}
