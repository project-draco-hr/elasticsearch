{
  String[] nodesIds=RestActions.splitNodes(request.param("nodeId"));
  final boolean includeSettings=request.paramAsBoolean("settings",false);
  NodesInfoRequest nodesInfoRequest=new NodesInfoRequest(nodesIds);
  nodesInfoRequest.listenerThreaded(false);
  client.admin().cluster().nodesInfo(nodesInfoRequest,new ActionListener<NodesInfoResponse>(){
    @Override public void onResponse(    NodesInfoResponse result){
      try {
        XContentBuilder builder=RestXContentBuilder.restContentBuilder(request);
        builder.startObject();
        builder.field("cluster_name",result.clusterName().value());
        builder.startObject("nodes");
        for (        NodeInfo nodeInfo : result) {
          builder.startObject(nodeInfo.node().id(),XContentBuilder.FieldCaseConversion.NONE);
          builder.field("name",nodeInfo.node().name());
          builder.field("transport_address",nodeInfo.node().address().toString());
          builder.startObject("attributes");
          for (          Map.Entry<String,String> attr : nodeInfo.node().attributes().entrySet()) {
            builder.field(attr.getKey(),attr.getValue());
          }
          builder.endObject();
          for (          Map.Entry<String,String> nodeAttribute : nodeInfo.attributes().entrySet()) {
            builder.field(nodeAttribute.getKey(),nodeAttribute.getValue());
          }
          if (includeSettings) {
            builder.startObject("settings");
            Settings settings=settingsFilter.filterSettings(nodeInfo.settings());
            for (            Map.Entry<String,String> entry : settings.getAsMap().entrySet()) {
              builder.field(entry.getKey(),entry.getValue());
            }
            builder.endObject();
          }
          if (nodeInfo.os() != null) {
            nodeInfo.os().toXContent(builder,request);
          }
          if (nodeInfo.process() != null) {
            nodeInfo.process().toXContent(builder,request);
          }
          if (nodeInfo.jvm() != null) {
            nodeInfo.jvm().toXContent(builder,request);
          }
          if (nodeInfo.network() != null) {
            nodeInfo.network().toXContent(builder,request);
          }
          if (nodeInfo.transport() != null) {
            nodeInfo.transport().toXContent(builder,request);
          }
          if (nodeInfo.http() != null) {
            nodeInfo.http().toXContent(builder,request);
          }
          builder.endObject();
        }
        builder.endObject();
        builder.endObject();
        channel.sendResponse(new XContentRestResponse(request,RestStatus.OK,builder));
      }
 catch (      Exception e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
