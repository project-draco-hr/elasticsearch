{
  if (awarenessAttributes.length == 0) {
    return true;
  }
  IndexMetaData indexMetaData=allocation.metaData().index(shardRouting.index());
  int shardCount=indexMetaData.numberOfReplicas() + 1;
  for (  String awarenessAttribute : awarenessAttributes) {
    if (!node.node().attributes().containsKey(awarenessAttribute)) {
      return false;
    }
    ObjectIntOpenHashMap<String> nodesPerAttribute=allocation.routingNodes().nodesPerAttributesCounts(awarenessAttribute);
    ObjectIntOpenHashMap<String> shardPerAttribute=new ObjectIntOpenHashMap<String>();
    for (    MutableShardRouting assignedShard : allocation.routingNodes().assignedShards(shardRouting)) {
      if (assignedShard.relocating()) {
        RoutingNode relocationNode=allocation.routingNodes().node(assignedShard.relocatingNodeId());
        shardPerAttribute.addTo(relocationNode.node().attributes().get(awarenessAttribute),1);
      }
 else       if (assignedShard.started()) {
        RoutingNode routingNode=allocation.routingNodes().node(assignedShard.currentNodeId());
        shardPerAttribute.addTo(routingNode.node().attributes().get(awarenessAttribute),1);
      }
    }
    if (moveToNode) {
      if (shardRouting.assignedToNode()) {
        String nodeId=shardRouting.relocating() ? shardRouting.relocatingNodeId() : shardRouting.currentNodeId();
        if (!node.nodeId().equals(nodeId)) {
          shardPerAttribute.putOrAdd(allocation.routingNodes().node(nodeId).node().attributes().get(awarenessAttribute),0,-1);
          shardPerAttribute.addTo(node.node().attributes().get(awarenessAttribute),1);
        }
      }
 else {
        shardPerAttribute.addTo(node.node().attributes().get(awarenessAttribute),1);
      }
    }
    int numberOfAttributes=nodesPerAttribute.size();
    String[] fullValues=forcedAwarenessAttributes.get(awarenessAttribute);
    if (fullValues != null) {
      for (      String fullValue : fullValues) {
        if (!shardPerAttribute.containsKey(fullValue)) {
          numberOfAttributes++;
        }
      }
    }
    int averagePerAttribute=shardCount / numberOfAttributes;
    int totalLeftover=shardCount % numberOfAttributes;
    int requiredCountPerAttribute;
    if (averagePerAttribute == 0) {
      totalLeftover=0;
      requiredCountPerAttribute=1;
    }
 else {
      requiredCountPerAttribute=averagePerAttribute;
    }
    int leftoverPerAttribute=totalLeftover == 0 ? 0 : 1;
    int currentNodeCount=shardPerAttribute.get(node.node().attributes().get(awarenessAttribute));
    if (currentNodeCount > (requiredCountPerAttribute + leftoverPerAttribute)) {
      return false;
    }
    if (currentNodeCount <= requiredCountPerAttribute) {
      continue;
    }
  }
  return true;
}
