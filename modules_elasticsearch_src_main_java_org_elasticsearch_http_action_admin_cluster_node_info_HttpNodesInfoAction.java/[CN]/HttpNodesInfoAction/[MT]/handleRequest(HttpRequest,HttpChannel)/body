{
  String[] nodesIds=HttpActions.splitNodes(request.param("nodeId"));
  NodesInfoRequest nodesInfoRequest=new NodesInfoRequest(nodesIds);
  nodesInfoRequest.listenerThreaded(false);
  client.admin().cluster().execNodesInfo(nodesInfoRequest,new ActionListener<NodesInfoResponse>(){
    @Override public void onResponse(    NodesInfoResponse result){
      try {
        JsonBuilder builder=HttpJsonBuilder.cached(request);
        builder.startObject();
        builder.field("clusterName",result.clusterName().value());
        for (        NodeInfo nodeInfo : result) {
          builder.startObject(nodeInfo.node().id());
          builder.field("name",nodeInfo.node().name());
          builder.field("transportAddress",nodeInfo.node().address().toString());
          builder.field("dataNode",nodeInfo.node().dataNode());
          builder.endObject();
        }
        builder.endObject();
        channel.sendResponse(new JsonHttpResponse(request,HttpResponse.Status.OK,builder));
      }
 catch (      Exception e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new JsonThrowableHttpResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
