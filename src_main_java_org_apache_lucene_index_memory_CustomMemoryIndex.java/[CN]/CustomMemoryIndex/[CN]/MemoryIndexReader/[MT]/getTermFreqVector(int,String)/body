{
  if (DEBUG)   System.err.println("MemoryIndexReader.getTermFreqVector");
  final Info info=getInfo(fieldName);
  if (info == null)   return null;
  info.sortTerms();
  return new TermPositionVector(){
    private final Map.Entry<String,ArrayIntList>[] sortedTerms=info.sortedTerms;
    public String getField(){
      return fieldName;
    }
    public int size(){
      return sortedTerms.length;
    }
    public String[] getTerms(){
      String[] terms=new String[sortedTerms.length];
      for (int i=sortedTerms.length; --i >= 0; ) {
        terms[i]=sortedTerms[i].getKey();
      }
      return terms;
    }
    public int[] getTermFrequencies(){
      int[] freqs=new int[sortedTerms.length];
      for (int i=sortedTerms.length; --i >= 0; ) {
        freqs[i]=numPositions(sortedTerms[i].getValue());
      }
      return freqs;
    }
    public int indexOf(    String term){
      int i=Arrays.binarySearch(sortedTerms,term,termComparator);
      return i >= 0 ? i : -1;
    }
    public int[] indexesOf(    String[] terms,    int start,    int len){
      int[] indexes=new int[len];
      for (int i=0; i < len; i++) {
        indexes[i]=indexOf(terms[start++]);
      }
      return indexes;
    }
    public int[] getTermPositions(    int index){
      return sortedTerms[index].getValue().toArray(stride);
    }
    public org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(    int index){
      if (stride == 1)       return null;
      ArrayIntList positions=sortedTerms[index].getValue();
      int size=positions.size();
      org.apache.lucene.index.TermVectorOffsetInfo[] offsets=new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];
      for (int i=0, j=1; j < size; i++, j+=stride) {
        int start=positions.get(j);
        int end=positions.get(j + 1);
        offsets[i]=new org.apache.lucene.index.TermVectorOffsetInfo(start,end);
      }
      return offsets;
    }
  }
;
}
