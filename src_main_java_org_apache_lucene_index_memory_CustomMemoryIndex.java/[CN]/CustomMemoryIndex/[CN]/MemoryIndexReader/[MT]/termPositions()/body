{
  if (DEBUG)   System.err.println("MemoryIndexReader.termPositions");
  return new TermPositions(){
    private boolean hasNext;
    private int cursor=0;
    private ArrayIntList current;
    private Term term;
    public void seek(    Term term){
      this.term=term;
      if (DEBUG)       System.err.println(".seek: " + term);
      if (term == null) {
        hasNext=true;
      }
 else {
        Info info=getInfo(term.field());
        current=info == null ? null : info.getPositions(term.text());
        hasNext=(current != null);
        cursor=0;
      }
    }
    public void seek(    TermEnum termEnum){
      if (DEBUG)       System.err.println(".seekEnum");
      seek(termEnum.term());
    }
    public int doc(){
      if (DEBUG)       System.err.println(".doc");
      return 0;
    }
    public int freq(){
      int freq=current != null ? numPositions(current) : (term == null ? 1 : 0);
      if (DEBUG)       System.err.println(".freq: " + freq);
      return freq;
    }
    public boolean next(){
      if (DEBUG)       System.err.println(".next: " + current + ", oldHasNext="+ hasNext);
      boolean next=hasNext;
      hasNext=false;
      return next;
    }
    public int read(    int[] docs,    int[] freqs){
      if (DEBUG)       System.err.println(".read: " + docs.length);
      if (!hasNext)       return 0;
      hasNext=false;
      docs[0]=0;
      freqs[0]=freq();
      return 1;
    }
    public boolean skipTo(    int target){
      if (DEBUG)       System.err.println(".skipTo: " + target);
      return next();
    }
    public void close(){
      if (DEBUG)       System.err.println(".close");
    }
    public int nextPosition(){
      int pos=current.get(cursor);
      cursor+=stride;
      if (DEBUG)       System.err.println(".nextPosition: " + pos);
      return pos;
    }
    /** 
 * Not implemented.
 * @throws UnsupportedOperationException
 */
    public int getPayloadLength(){
      throw new UnsupportedOperationException();
    }
    /** 
 * Not implemented.
 * @throws UnsupportedOperationException
 */
    public byte[] getPayload(    byte[] data,    int offset) throws IOException {
      throw new UnsupportedOperationException();
    }
    public boolean isPayloadAvailable(){
      return false;
    }
  }
;
}
