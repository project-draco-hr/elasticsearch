{
  super(name.getName(),repositorySettings,indexShardRepository);
  this.repositorySettings=repositorySettings;
  String path=repositorySettings.settings().get("path",settings.get("path"));
  if (path == null) {
    throw new IllegalArgumentException("no 'path' defined for hdfs snapshot/restore");
  }
  fs=getFileSystem();
  Path hdfsPath=SecurityUtils.execute(fs,new FsCallback<Path>(){
    @Override public Path doInHdfs(    FileSystem fs) throws IOException {
      return fs.makeQualified(new Path(path));
    }
  }
);
  this.basePath=BlobPath.cleanPath();
  logger.debug("Using file-system [{}] for URI [{}], path [{}]",fs,fs.getUri(),hdfsPath);
  blobStore=new HdfsBlobStore(settings,this,hdfsPath,threadPool);
  this.chunkSize=repositorySettings.settings().getAsBytesSize("chunk_size",settings.getAsBytesSize("chunk_size",null));
  this.compress=repositorySettings.settings().getAsBoolean("compress",settings.getAsBoolean("compress",false));
}
