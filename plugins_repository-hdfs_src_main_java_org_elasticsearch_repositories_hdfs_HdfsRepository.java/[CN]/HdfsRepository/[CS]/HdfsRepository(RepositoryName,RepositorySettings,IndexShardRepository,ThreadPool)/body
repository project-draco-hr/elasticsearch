{
  super(name.getName(),repositorySettings,indexShardRepository);
  this.repositorySettings=repositorySettings;
  String path=repositorySettings.settings().get("path",settings.get("path"));
  if (path == null) {
    throw new IllegalArgumentException("no 'path' defined for hdfs snapshot/restore");
  }
  fc=getFileContext();
  Path hdfsPath=SecurityUtils.execute(fc,new FcCallback<Path>(){
    @Override public Path doInHdfs(    FileContext fc) throws IOException {
      return fc.makeQualified(new Path(path));
    }
  }
);
  this.basePath=BlobPath.cleanPath();
  logger.debug("Using file-system [{}] for URI [{}], path [{}]",fc.getDefaultFileSystem(),fc.getDefaultFileSystem().getUri(),hdfsPath);
  blobStore=new HdfsBlobStore(settings,this,hdfsPath,threadPool);
  this.chunkSize=repositorySettings.settings().getAsBytesSize("chunk_size",settings.getAsBytesSize("chunk_size",null));
  this.compress=repositorySettings.settings().getAsBoolean("compress",settings.getAsBoolean("compress",false));
}
