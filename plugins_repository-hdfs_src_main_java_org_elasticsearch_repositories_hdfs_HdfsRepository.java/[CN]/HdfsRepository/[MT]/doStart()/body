{
  if (Strings.hasText(uri) == false) {
    throw new IllegalArgumentException("No 'uri' defined for hdfs snapshot/restore");
  }
  URI actualUri=URI.create(uri);
  String scheme=actualUri.getScheme();
  if (Strings.hasText(scheme) == false || scheme.toLowerCase(Locale.ROOT).equals("hdfs") == false) {
    throw new IllegalArgumentException(String.format(Locale.ROOT,"Invalid scheme [%s] specified in uri [%s]; only 'hdfs' uri allowed for hdfs snapshot/restore",scheme,uri));
  }
  String p=actualUri.getPath();
  if (Strings.hasText(p) && p.equals("/") == false) {
    throw new IllegalArgumentException(String.format(Locale.ROOT,"Use 'path' option to specify a path [%s], not the uri [%s] for hdfs snapshot/restore",p,uri));
  }
  if (path == null) {
    throw new IllegalArgumentException("No 'path' defined for hdfs snapshot/restore");
  }
  try {
    fc=getFileContext();
    Path hdfsPath=SecurityUtils.execute(fc,new FcCallback<Path>(){
      @Override public Path doInHdfs(      FileContext fc) throws IOException {
        return fc.makeQualified(new Path(path));
      }
    }
);
    logger.debug("Using file-system [{}] for URI [{}], path [{}]",fc.getDefaultFileSystem(),fc.getDefaultFileSystem().getUri(),hdfsPath);
    blobStore=new HdfsBlobStore(this,hdfsPath);
  }
 catch (  IOException e) {
    throw new ElasticsearchGenerationException(String.format(Locale.ROOT,"Cannot create HDFS repository for uri [%s]",actualUri),e);
  }
  super.doStart();
}
