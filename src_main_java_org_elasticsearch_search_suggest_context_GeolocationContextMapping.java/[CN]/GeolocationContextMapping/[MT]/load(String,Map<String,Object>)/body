{
  final GeolocationContextMapping.Builder builder=new GeolocationContextMapping.Builder(name);
  if (config != null) {
    final Object configPrecision=config.get(FIELD_PRECISION);
    if (configPrecision == null) {
    }
 else     if (configPrecision instanceof Integer) {
      builder.precision((Integer)configPrecision);
    }
 else     if (configPrecision instanceof Long) {
      builder.precision((Long)configPrecision);
    }
 else     if (configPrecision instanceof Double) {
      builder.precision((Double)configPrecision);
    }
 else     if (configPrecision instanceof Float) {
      builder.precision((Float)configPrecision);
    }
 else     if (configPrecision instanceof Iterable) {
      for (      Object precision : (Iterable)configPrecision) {
        if (precision instanceof Integer) {
          builder.precision((Integer)precision);
        }
 else         if (precision instanceof Long) {
          builder.precision((Long)precision);
        }
 else         if (precision instanceof Double) {
          builder.precision((Double)precision);
        }
 else         if (precision instanceof Float) {
          builder.precision((Float)precision);
        }
 else {
          builder.precision(precision.toString());
        }
      }
    }
 else {
      builder.precision(configPrecision.toString());
    }
    final Object configNeighbors=config.get(FIELD_NEIGHBORS);
    if (configNeighbors != null) {
      builder.neighbors((Boolean)configNeighbors);
    }
    final Object def=config.get(FIELD_MISSING);
    if (def != null) {
      if (def instanceof Iterable) {
        for (        Object location : (Iterable)def) {
          builder.addDefaultLocation(location.toString());
        }
      }
 else       if (def instanceof String) {
        builder.addDefaultLocation(def.toString());
      }
 else       if (def instanceof Map) {
        Map<String,Object> latlonMap=(Map<String,Object>)def;
        if (!latlonMap.containsKey("lat") || !(latlonMap.get("lat") instanceof Double)) {
          throw new ElasticsearchParseException("field [" + FIELD_MISSING + "] map must have field lat and a valid latitude");
        }
        if (!latlonMap.containsKey("lon") || !(latlonMap.get("lon") instanceof Double)) {
          throw new ElasticsearchParseException("field [" + FIELD_MISSING + "] map must have field lon and a valid longitude");
        }
        builder.addDefaultLocation(Double.valueOf(latlonMap.get("lat").toString()),Double.valueOf(latlonMap.get("lon").toString()));
      }
 else {
        throw new ElasticsearchParseException("field [" + FIELD_MISSING + "] must be of type string or list");
      }
    }
    final Object fieldName=config.get(FIELD_FIELDNAME);
    if (fieldName != null) {
      builder.field(fieldName.toString());
    }
  }
  return builder.build();
}
