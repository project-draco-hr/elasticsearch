{
  Settings settings=Settings.builder().put(DestructiveOperations.REQUIRES_NAME_SETTING.getKey(),true).build();
  assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings));
  assertAcked(client().admin().indices().prepareCreate("index1").get());
  assertAcked(client().admin().indices().prepareCreate("1index").get());
  assertAcked(client().admin().indices().prepareDelete("1index").get());
  try {
    client().admin().indices().prepareDelete("i*").get();
    fail();
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    client().admin().indices().prepareDelete("_all").get();
    fail();
  }
 catch (  IllegalArgumentException e) {
  }
  settings=Settings.builder().put(DestructiveOperations.REQUIRES_NAME_SETTING.getKey(),false).build();
  assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings));
  assertAcked(client().admin().indices().prepareDelete("_all").get());
  assertThat(client().admin().indices().prepareExists("_all").get().isExists(),equalTo(false));
  settings=Settings.builder().put(DestructiveOperations.REQUIRES_NAME_SETTING.getKey(),true).build();
  assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings));
  assertAcked(client().admin().indices().prepareCreate("index1").get());
  assertAcked(client().admin().indices().prepareCreate("1index").get());
  ensureYellow();
  assertAcked(client().admin().indices().prepareClose("1index").get());
  try {
    client().admin().indices().prepareClose("_all").get();
    fail();
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    assertAcked(client().admin().indices().prepareOpen("_all").get());
    fail();
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    client().admin().indices().prepareClose("*").get();
    fail();
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    assertAcked(client().admin().indices().prepareOpen("*").get());
    fail();
  }
 catch (  IllegalArgumentException e) {
  }
  settings=Settings.builder().put(DestructiveOperations.REQUIRES_NAME_SETTING.getKey(),false).build();
  assertAcked(client().admin().cluster().prepareUpdateSettings().setTransientSettings(settings));
  assertAcked(client().admin().indices().prepareClose("_all").get());
  assertAcked(client().admin().indices().prepareOpen("_all").get());
  client().admin().indices().prepareDelete("_all").get();
}
