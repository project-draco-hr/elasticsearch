{
  final Path structure=createTempDir().resolve("fake-plugin");
  writeProperties(structure,"description","fake desc","version","1.0","elasticsearch.version",Version.CURRENT.toString(),"jvm","true","java.version","1.7","name",pluginName,"classname",pluginName);
  if (withBinDir) {
    Path binDir=structure.resolve("bin");
    Files.createDirectory(binDir);
    Files.setPosixFilePermissions(binDir,PosixFilePermissions.fromString("rwxr-xr-x"));
    Path executable=binDir.resolve("my-binary");
    Files.createFile(executable);
    Files.setPosixFilePermissions(executable,PosixFilePermissions.fromString("rw-r--r--"));
  }
  if (withConfigDir) {
    Path configDir=structure.resolve("config");
    Files.createDirectory(configDir);
    Files.setPosixFilePermissions(configDir,PosixFilePermissions.fromString("rwxr-xr-x"));
    Path configFile=configDir.resolve("my-custom-config.yaml");
    Files.createFile(configFile);
    Files.write(configFile,"my custom config content".getBytes(Charset.forName("UTF-8")));
    Files.setPosixFilePermissions(configFile,PosixFilePermissions.fromString("rw-r--r--"));
  }
  Path zip=createTempDir().resolve(structure.getFileName() + ".zip");
  try (ZipOutputStream stream=new ZipOutputStream(Files.newOutputStream(zip))){
    Files.walkFileTree(structure,new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        stream.putNextEntry(new ZipEntry(structure.relativize(file).toString()));
        Files.copy(file,stream);
        return FileVisitResult.CONTINUE;
      }
    }
);
  }
   return zip.toUri().toURL();
}
