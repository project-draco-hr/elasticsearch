{
  final int iters=atLeast(10);
  for (int i=0; i < iters; i++) {
{
      XContent xcontent=XContentType.JSON.xContent();
      float floatValue=randomFloat();
      String json=jsonBuilder().startObject().field(Fuzziness.X_FIELD_NAME,floatValue).endObject().string();
      XContentParser parser=xcontent.createParser(json);
      assertThat(parser.nextToken(),equalTo(XContentParser.Token.START_OBJECT));
      assertThat(parser.nextToken(),equalTo(XContentParser.Token.FIELD_NAME));
      assertThat(parser.nextToken(),equalTo(XContentParser.Token.VALUE_NUMBER));
      Fuzziness parse=Fuzziness.parse(parser);
      assertThat(parse.asFloat(),equalTo(floatValue));
      assertThat(parse.asDouble(),closeTo((double)floatValue,0.000001));
      assertThat(parser.nextToken(),equalTo(XContentParser.Token.END_OBJECT));
    }
{
      XContent xcontent=XContentType.JSON.xContent();
      Integer intValue=frequently() ? randomIntBetween(0,2) : randomIntBetween(0,100);
      Float floatRep=randomFloat();
      Number value=intValue;
      if (randomBoolean()) {
        value=new Float(floatRep+=intValue);
      }
      String json=jsonBuilder().startObject().field(Fuzziness.X_FIELD_NAME,randomBoolean() ? value.toString() : value).endObject().string();
      XContentParser parser=xcontent.createParser(json);
      assertThat(parser.nextToken(),equalTo(XContentParser.Token.START_OBJECT));
      assertThat(parser.nextToken(),equalTo(XContentParser.Token.FIELD_NAME));
      assertThat(parser.nextToken(),anyOf(equalTo(XContentParser.Token.VALUE_NUMBER),equalTo(XContentParser.Token.VALUE_STRING)));
      Fuzziness parse=Fuzziness.parse(parser);
      assertThat(parse.asInt(),equalTo(intValue));
      assertThat((int)parse.asShort(),equalTo(intValue));
      assertThat((int)parse.asByte(),equalTo(intValue));
      assertThat(parse.asLong(),equalTo((long)intValue));
      if (value.intValue() >= 1) {
        assertThat(parse.asDistance(),equalTo(Math.min(2,intValue)));
      }
      assertThat(parser.nextToken(),equalTo(XContentParser.Token.END_OBJECT));
      if (intValue.equals(value)) {
switch (intValue) {
case 1:
          assertThat(parse,sameInstance(Fuzziness.ONE));
        break;
case 2:
      assertThat(parse,sameInstance(Fuzziness.TWO));
    break;
case 0:
  assertThat(parse,sameInstance(Fuzziness.ZERO));
break;
default :
break;
}
}
}
{
XContent xcontent=XContentType.JSON.xContent();
String json=jsonBuilder().startObject().field(Fuzziness.X_FIELD_NAME,randomBoolean() ? "AUTO" : "auto").endObject().string();
if (randomBoolean()) {
json=Fuzziness.AUTO.toXContent(jsonBuilder().startObject(),null).endObject().string();
}
XContentParser parser=xcontent.createParser(json);
assertThat(parser.nextToken(),equalTo(XContentParser.Token.START_OBJECT));
assertThat(parser.nextToken(),equalTo(XContentParser.Token.FIELD_NAME));
assertThat(parser.nextToken(),equalTo(XContentParser.Token.VALUE_STRING));
Fuzziness parse=Fuzziness.parse(parser);
assertThat(parse,sameInstance(Fuzziness.AUTO));
assertThat(parser.nextToken(),equalTo(XContentParser.Token.END_OBJECT));
}
{
String[] values=new String[]{"d","H","ms","s","S","w"};
String actual=randomIntBetween(1,3) + randomFrom(values);
XContent xcontent=XContentType.JSON.xContent();
String json=jsonBuilder().startObject().field(Fuzziness.X_FIELD_NAME,actual).endObject().string();
XContentParser parser=xcontent.createParser(json);
assertThat(parser.nextToken(),equalTo(XContentParser.Token.START_OBJECT));
assertThat(parser.nextToken(),equalTo(XContentParser.Token.FIELD_NAME));
assertThat(parser.nextToken(),equalTo(XContentParser.Token.VALUE_STRING));
Fuzziness parse=Fuzziness.parse(parser);
assertThat(parse.asTimeValue(),equalTo(TimeValue.parseTimeValue(actual,null)));
assertThat(parser.nextToken(),equalTo(XContentParser.Token.END_OBJECT));
}
}
}
