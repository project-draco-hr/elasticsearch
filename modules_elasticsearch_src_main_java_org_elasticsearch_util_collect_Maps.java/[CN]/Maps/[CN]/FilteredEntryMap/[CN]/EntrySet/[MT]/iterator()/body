{
  final Iterator<Entry<K,V>> iterator=filteredEntrySet.iterator();
  return new UnmodifiableIterator<Entry<K,V>>(){
    public boolean hasNext(){
      return iterator.hasNext();
    }
    public Entry<K,V> next(){
      final Entry<K,V> entry=iterator.next();
      return new ForwardingMapEntry<K,V>(){
        @Override protected Entry<K,V> delegate(){
          return entry;
        }
        @Override public V setValue(        V value){
          checkArgument(apply(entry.getKey(),value));
          return super.setValue(value);
        }
      }
;
    }
  }
;
}
