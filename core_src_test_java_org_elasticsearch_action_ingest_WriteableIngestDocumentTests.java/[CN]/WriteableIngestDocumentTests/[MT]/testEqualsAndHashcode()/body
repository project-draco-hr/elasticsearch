{
  Map<String,Object> sourceAndMetadata=RandomDocumentPicks.randomSource(random());
  int numFields=randomIntBetween(1,IngestDocument.MetaData.values().length);
  for (int i=0; i < numFields; i++) {
    sourceAndMetadata.put(randomFrom(IngestDocument.MetaData.values()).getFieldName(),randomAsciiOfLengthBetween(5,10));
  }
  Map<String,Object> ingestMetadata=new HashMap<>();
  numFields=randomIntBetween(1,5);
  for (int i=0; i < numFields; i++) {
    ingestMetadata.put(randomAsciiOfLengthBetween(5,10),randomAsciiOfLengthBetween(5,10));
  }
  WriteableIngestDocument ingestDocument=new WriteableIngestDocument(new IngestDocument(sourceAndMetadata,ingestMetadata));
  boolean changed=false;
  Map<String,Object> otherSourceAndMetadata;
  if (randomBoolean()) {
    otherSourceAndMetadata=RandomDocumentPicks.randomSource(random());
    changed=true;
  }
 else {
    otherSourceAndMetadata=new HashMap<>(sourceAndMetadata);
  }
  if (randomBoolean()) {
    numFields=randomIntBetween(1,IngestDocument.MetaData.values().length);
    for (int i=0; i < numFields; i++) {
      otherSourceAndMetadata.put(randomFrom(IngestDocument.MetaData.values()).getFieldName(),randomAsciiOfLengthBetween(5,10));
    }
    changed=true;
  }
  Map<String,Object> otherIngestMetadata;
  if (randomBoolean()) {
    otherIngestMetadata=new HashMap<>();
    numFields=randomIntBetween(1,5);
    for (int i=0; i < numFields; i++) {
      otherIngestMetadata.put(randomAsciiOfLengthBetween(5,10),randomAsciiOfLengthBetween(5,10));
    }
    changed=true;
  }
 else {
    otherIngestMetadata=Collections.unmodifiableMap(ingestMetadata);
  }
  WriteableIngestDocument otherIngestDocument=new WriteableIngestDocument(new IngestDocument(otherSourceAndMetadata,otherIngestMetadata));
  if (changed) {
    assertThat(ingestDocument,not(equalTo(otherIngestDocument)));
    assertThat(otherIngestDocument,not(equalTo(ingestDocument)));
  }
 else {
    assertThat(ingestDocument,equalTo(otherIngestDocument));
    assertThat(otherIngestDocument,equalTo(ingestDocument));
    assertThat(ingestDocument.hashCode(),equalTo(otherIngestDocument.hashCode()));
    WriteableIngestDocument thirdIngestDocument=new WriteableIngestDocument(new IngestDocument(Collections.unmodifiableMap(sourceAndMetadata),Collections.unmodifiableMap(ingestMetadata)));
    assertThat(thirdIngestDocument,equalTo(ingestDocument));
    assertThat(ingestDocument,equalTo(thirdIngestDocument));
    assertThat(ingestDocument.hashCode(),equalTo(thirdIngestDocument.hashCode()));
  }
}
