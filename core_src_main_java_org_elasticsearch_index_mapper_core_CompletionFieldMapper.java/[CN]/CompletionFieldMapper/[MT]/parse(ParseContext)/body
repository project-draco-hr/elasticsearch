{
  XContentParser parser=context.parser();
  XContentParser.Token token=parser.currentToken();
  if (token == XContentParser.Token.VALUE_NULL) {
    throw new MapperParsingException("completion field [" + fieldType().names().fullName() + "] does not support null values");
  }
  String surfaceForm=null;
  BytesRef payload=null;
  long weight=-1;
  List<String> inputs=Lists.newArrayListWithExpectedSize(4);
  SortedMap<String,ContextConfig> contextConfig=null;
  if (token == XContentParser.Token.VALUE_STRING) {
    inputs.add(parser.text());
    multiFields.parse(this,context);
  }
 else {
    String currentFieldName=null;
    while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
      if (token == XContentParser.Token.FIELD_NAME) {
        currentFieldName=parser.currentName();
        if (!ALLOWED_CONTENT_FIELD_NAMES.contains(currentFieldName)) {
          throw new IllegalArgumentException("Unknown field name[" + currentFieldName + "], must be one of "+ ALLOWED_CONTENT_FIELD_NAMES);
        }
      }
 else       if (Fields.CONTEXT.equals(currentFieldName)) {
        SortedMap<String,ContextConfig> configs=Maps.newTreeMap();
        if (token == Token.START_OBJECT) {
          while ((token=parser.nextToken()) != Token.END_OBJECT) {
            String name=parser.text();
            ContextMapping mapping=fieldType().getContextMapping().get(name);
            if (mapping == null) {
              throw new ElasticsearchParseException("context [" + name + "] is not defined");
            }
 else {
              token=parser.nextToken();
              configs.put(name,mapping.parseContext(context,parser));
            }
          }
          contextConfig=Maps.newTreeMap();
          for (          ContextMapping mapping : fieldType().getContextMapping().values()) {
            ContextConfig config=configs.get(mapping.name());
            contextConfig.put(mapping.name(),config == null ? mapping.defaultConfig() : config);
          }
        }
 else {
          throw new ElasticsearchParseException("context must be an object");
        }
      }
 else       if (Fields.CONTENT_FIELD_NAME_PAYLOAD.equals(currentFieldName)) {
        if (!isStoringPayloads()) {
          throw new MapperException("Payloads disabled in mapping");
        }
        if (token == XContentParser.Token.START_OBJECT) {
          XContentBuilder payloadBuilder=XContentFactory.contentBuilder(parser.contentType()).copyCurrentStructure(parser);
          payload=payloadBuilder.bytes().toBytesRef();
          payloadBuilder.close();
        }
 else         if (token.isValue()) {
          payload=parser.utf8BytesOrNull();
        }
 else {
          throw new MapperException("payload doesn't support type " + token);
        }
      }
 else       if (token == XContentParser.Token.VALUE_STRING) {
        if (Fields.CONTENT_FIELD_NAME_OUTPUT.equals(currentFieldName)) {
          surfaceForm=parser.text();
        }
        if (Fields.CONTENT_FIELD_NAME_INPUT.equals(currentFieldName)) {
          inputs.add(parser.text());
        }
        if (Fields.CONTENT_FIELD_NAME_WEIGHT.equals(currentFieldName)) {
          Number weightValue;
          try {
            weightValue=Long.parseLong(parser.text());
          }
 catch (          NumberFormatException e) {
            throw new IllegalArgumentException("Weight must be a string representing a numeric value, but was [" + parser.text() + "]");
          }
          weight=weightValue.longValue();
          checkWeight(weight);
        }
      }
 else       if (token == XContentParser.Token.VALUE_NUMBER) {
        if (Fields.CONTENT_FIELD_NAME_WEIGHT.equals(currentFieldName)) {
          NumberType numberType=parser.numberType();
          if (NumberType.LONG != numberType && NumberType.INT != numberType) {
            throw new IllegalArgumentException("Weight must be an integer, but was [" + parser.numberValue() + "]");
          }
          weight=parser.longValue();
          checkWeight(weight);
        }
      }
 else       if (token == XContentParser.Token.START_ARRAY) {
        if (Fields.CONTENT_FIELD_NAME_INPUT.equals(currentFieldName)) {
          while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
            inputs.add(parser.text());
          }
        }
      }
    }
  }
  if (contextConfig == null) {
    contextConfig=Maps.newTreeMap();
    for (    ContextMapping mapping : fieldType().getContextMapping().values()) {
      contextConfig.put(mapping.name(),mapping.defaultConfig());
    }
  }
  final ContextMapping.Context ctx=new ContextMapping.Context(contextConfig,context.doc());
  payload=payload == null ? EMPTY : payload;
  if (surfaceForm == null) {
    for (    String input : inputs) {
      if (input.length() == 0) {
        continue;
      }
      BytesRef suggestPayload=fieldType().analyzingSuggestLookupProvider.buildPayload(new BytesRef(input),weight,payload);
      context.doc().add(getCompletionField(ctx,input,suggestPayload));
    }
  }
 else {
    BytesRef suggestPayload=fieldType().analyzingSuggestLookupProvider.buildPayload(new BytesRef(surfaceForm),weight,payload);
    for (    String input : inputs) {
      if (input.length() == 0) {
        continue;
      }
      context.doc().add(getCompletionField(ctx,input,suggestPayload));
    }
  }
  return null;
}
