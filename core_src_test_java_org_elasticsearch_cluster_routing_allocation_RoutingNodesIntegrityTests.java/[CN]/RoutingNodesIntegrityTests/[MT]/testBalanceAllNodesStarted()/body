{
  AllocationService strategy=createAllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries",10).put("cluster.routing.allocation.node_initial_primaries_recoveries",10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),"always").put("cluster.routing.allocation.cluster_concurrent_rebalance",-1).build());
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(3).numberOfReplicas(1)).put(IndexMetaData.builder("test1").settings(settings(Version.CURRENT)).numberOfShards(3).numberOfReplicas(1)).build();
  RoutingTable initialRoutingTable=RoutingTable.builder().addAsNew(metaData.index("test")).addAsNew(metaData.index("test1")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();
  logger.info("Adding three node and performing rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2")).add(newNode("node3"))).build();
  RoutingNodes routingNodes=clusterState.getRoutingNodes();
  assertThat(assertShardStats(routingNodes),equalTo(true));
  assertThat(routingNodes.hasInactiveShards(),equalTo(false));
  assertThat(routingNodes.hasInactivePrimaries(),equalTo(false));
  assertThat(routingNodes.hasUnassignedPrimaries(),equalTo(true));
  RoutingAllocation.Result routingResult=strategy.reroute(clusterState,"reroute");
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  routingNodes=clusterState.getRoutingNodes();
  assertThat(assertShardStats(routingNodes),equalTo(true));
  assertThat(routingNodes.hasInactiveShards(),equalTo(true));
  assertThat(routingNodes.hasInactivePrimaries(),equalTo(true));
  assertThat(routingNodes.hasUnassignedPrimaries(),equalTo(false));
  logger.info("Another round of rebalancing");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())).build();
  routingResult=strategy.reroute(clusterState,"reroute");
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  routingNodes=clusterState.getRoutingNodes();
  routingResult=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  logger.info("Reroute, nothing should change");
  routingResult=strategy.reroute(clusterState,"reroute");
  assertFalse(routingResult.changed());
  logger.info("Start the more shards");
  routingNodes=clusterState.getRoutingNodes();
  routingResult=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  routingNodes=clusterState.getRoutingNodes();
  assertThat(assertShardStats(routingNodes),equalTo(true));
  assertThat(routingNodes.hasInactiveShards(),equalTo(false));
  assertThat(routingNodes.hasInactivePrimaries(),equalTo(false));
  assertThat(routingNodes.hasUnassignedPrimaries(),equalTo(false));
  routingResult=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
}
