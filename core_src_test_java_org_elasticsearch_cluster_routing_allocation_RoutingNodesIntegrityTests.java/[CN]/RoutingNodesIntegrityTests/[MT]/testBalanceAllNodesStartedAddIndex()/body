{
  AllocationService strategy=createAllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries",1).put("cluster.routing.allocation.node_initial_primaries_recoveries",3).put(ThrottlingAllocationDecider.CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_OUTGOING_RECOVERIES_SETTING.getKey(),10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(),"always").put("cluster.routing.allocation.cluster_concurrent_rebalance",-1).build());
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(3).numberOfReplicas(1)).build();
  RoutingTable initialRoutingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();
  logger.info("Adding three node and performing rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2")).add(newNode("node3"))).build();
  RoutingNodes routingNodes=clusterState.getRoutingNodes();
  assertThat(assertShardStats(routingNodes),equalTo(true));
  assertThat(routingNodes.hasInactiveShards(),equalTo(false));
  assertThat(routingNodes.hasInactivePrimaries(),equalTo(false));
  assertThat(routingNodes.hasUnassignedPrimaries(),equalTo(true));
  clusterState=strategy.reroute(clusterState,"reroute");
  routingNodes=clusterState.getRoutingNodes();
  assertThat(assertShardStats(routingNodes),equalTo(true));
  assertThat(routingNodes.hasInactiveShards(),equalTo(true));
  assertThat(routingNodes.hasInactivePrimaries(),equalTo(true));
  assertThat(routingNodes.hasUnassignedPrimaries(),equalTo(false));
  logger.info("Another round of rebalancing");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())).build();
  ClusterState newState=strategy.reroute(clusterState,"reroute");
  assertThat(newState,equalTo(clusterState));
  routingNodes=clusterState.getRoutingNodes();
  assertThat(routingNodes.node("node1").numberOfShardsWithState(INITIALIZING),equalTo(1));
  assertThat(routingNodes.node("node2").numberOfShardsWithState(INITIALIZING),equalTo(1));
  assertThat(routingNodes.node("node3").numberOfShardsWithState(INITIALIZING),equalTo(1));
  clusterState=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  routingNodes=clusterState.getRoutingNodes();
  assertThat(assertShardStats(routingNodes),equalTo(true));
  assertThat(routingNodes.hasInactiveShards(),equalTo(true));
  assertThat(routingNodes.hasInactivePrimaries(),equalTo(false));
  assertThat(routingNodes.hasUnassignedPrimaries(),equalTo(false));
  assertThat(routingNodes.node("node1").numberOfShardsWithState(STARTED),equalTo(1));
  assertThat(routingNodes.node("node2").numberOfShardsWithState(STARTED),equalTo(1));
  assertThat(routingNodes.node("node3").numberOfShardsWithState(STARTED),equalTo(1));
  logger.info("Reroute, nothing should change");
  newState=strategy.reroute(clusterState,"reroute");
  assertThat(newState,equalTo(clusterState));
  logger.info("Start the more shards");
  routingNodes=clusterState.getRoutingNodes();
  clusterState=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  routingNodes=clusterState.getRoutingNodes();
  assertThat(assertShardStats(routingNodes),equalTo(true));
  assertThat(routingNodes.hasInactiveShards(),equalTo(false));
  assertThat(routingNodes.hasInactivePrimaries(),equalTo(false));
  assertThat(routingNodes.hasUnassignedPrimaries(),equalTo(false));
  assertThat(routingNodes.node("node1").numberOfShardsWithState(STARTED),equalTo(2));
  assertThat(routingNodes.node("node2").numberOfShardsWithState(STARTED),equalTo(2));
  assertThat(routingNodes.node("node3").numberOfShardsWithState(STARTED),equalTo(2));
  assertThat(routingNodes.node("node1").shardsWithState("test",STARTED).size(),equalTo(2));
  assertThat(routingNodes.node("node2").shardsWithState("test",STARTED).size(),equalTo(2));
  assertThat(routingNodes.node("node3").shardsWithState("test",STARTED).size(),equalTo(2));
  logger.info("Add new index 3 shards 1 replica");
  metaData=MetaData.builder(clusterState.metaData()).put(IndexMetaData.builder("test1").settings(settings(Version.CURRENT).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,3).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,1))).build();
  RoutingTable updatedRoutingTable=RoutingTable.builder(clusterState.routingTable()).addAsNew(metaData.index("test1")).build();
  clusterState=ClusterState.builder(clusterState).metaData(metaData).routingTable(updatedRoutingTable).build();
  routingNodes=clusterState.getRoutingNodes();
  assertThat(assertShardStats(routingNodes),equalTo(true));
  assertThat(routingNodes.hasInactiveShards(),equalTo(false));
  assertThat(routingNodes.hasInactivePrimaries(),equalTo(false));
  assertThat(routingNodes.hasUnassignedPrimaries(),equalTo(true));
  assertThat(clusterState.routingTable().index("test1").shards().size(),equalTo(3));
  clusterState=strategy.reroute(clusterState,"reroute");
  logger.info("Reroute, assign");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes())).build();
  newState=strategy.reroute(clusterState,"reroute");
  assertThat(newState,equalTo(clusterState));
  routingNodes=clusterState.getRoutingNodes();
  assertThat(assertShardStats(routingNodes),equalTo(true));
  assertThat(routingNodes.hasInactiveShards(),equalTo(true));
  assertThat(routingNodes.hasInactivePrimaries(),equalTo(true));
  assertThat(routingNodes.hasUnassignedPrimaries(),equalTo(false));
  logger.info("Reroute, start the primaries");
  routingNodes=clusterState.getRoutingNodes();
  clusterState=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  routingNodes=clusterState.getRoutingNodes();
  assertThat(assertShardStats(routingNodes),equalTo(true));
  assertThat(routingNodes.hasInactiveShards(),equalTo(true));
  assertThat(routingNodes.hasInactivePrimaries(),equalTo(false));
  assertThat(routingNodes.hasUnassignedPrimaries(),equalTo(false));
  logger.info("Reroute, start the replicas");
  routingNodes=clusterState.getRoutingNodes();
  clusterState=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  routingNodes=clusterState.getRoutingNodes();
  assertThat(assertShardStats(routingNodes),equalTo(true));
  assertThat(routingNodes.hasInactiveShards(),equalTo(false));
  assertThat(routingNodes.hasInactivePrimaries(),equalTo(false));
  assertThat(routingNodes.hasUnassignedPrimaries(),equalTo(false));
  assertThat(routingNodes.node("node1").numberOfShardsWithState(STARTED),equalTo(4));
  assertThat(routingNodes.node("node2").numberOfShardsWithState(STARTED),equalTo(4));
  assertThat(routingNodes.node("node3").numberOfShardsWithState(STARTED),equalTo(4));
  assertThat(routingNodes.node("node1").shardsWithState("test1",STARTED).size(),equalTo(2));
  assertThat(routingNodes.node("node2").shardsWithState("test1",STARTED).size(),equalTo(2));
  assertThat(routingNodes.node("node3").shardsWithState("test1",STARTED).size(),equalTo(2));
  logger.info("kill one node");
  IndexShardRoutingTable indexShardRoutingTable=clusterState.routingTable().index("test").shard(0);
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove(indexShardRoutingTable.primaryShard().currentNodeId())).build();
  clusterState=strategy.deassociateDeadNodes(clusterState,true,"reroute");
  routingNodes=clusterState.getRoutingNodes();
  assertThat(assertShardStats(routingNodes),equalTo(true));
  assertThat(routingNodes.hasInactiveShards(),equalTo(true));
  assertThat(routingNodes.hasInactivePrimaries(),equalTo(false));
  assertThat(routingNodes.hasUnassignedPrimaries(),equalTo(false));
  logger.info("Start Recovering shards round 1");
  routingNodes=clusterState.getRoutingNodes();
  clusterState=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  routingNodes=clusterState.getRoutingNodes();
  assertThat(assertShardStats(routingNodes),equalTo(true));
  assertThat(routingNodes.hasInactiveShards(),equalTo(true));
  assertThat(routingNodes.hasInactivePrimaries(),equalTo(false));
  assertThat(routingNodes.hasUnassignedPrimaries(),equalTo(false));
  logger.info("Start Recovering shards round 2");
  routingNodes=clusterState.getRoutingNodes();
  clusterState=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  routingNodes=clusterState.getRoutingNodes();
  assertThat(assertShardStats(routingNodes),equalTo(true));
  assertThat(routingNodes.hasInactiveShards(),equalTo(false));
  assertThat(routingNodes.hasInactivePrimaries(),equalTo(false));
  assertThat(routingNodes.hasUnassignedPrimaries(),equalTo(false));
}
