{
  File repositoryLocation=newTempDir(LifecycleScope.TEST);
  Client client=client();
  logger.info("-->  creating repository");
  PutRepositoryResponse putRepositoryResponse=run(client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location",repositoryLocation)));
  assertThat(putRepositoryResponse.isAcknowledged(),equalTo(true));
  createIndex("test-idx");
  ensureGreen();
  logger.info("--> indexing some data");
  for (int i=0; i < 100; i++) {
    index("test-idx","doc",Integer.toString(i),"foo","bar" + i);
  }
  refresh();
  assertThat(run(client.prepareCount("test-idx")).getCount(),equalTo(100L));
  logger.info("--> snapshot");
  CreateSnapshotResponse createSnapshotResponse=run(client.admin().cluster().prepareCreateSnapshot("test-repo","test-snap").setWaitForCompletion(true).setIndices("test-idx"));
  assertThat(createSnapshotResponse.getSnapshotInfo().state(),equalTo(SnapshotState.SUCCESS));
  assertThat(createSnapshotResponse.getSnapshotInfo().totalShards(),equalTo(createSnapshotResponse.getSnapshotInfo().successfulShards()));
  logger.info("-->  update repository with mock version");
  putRepositoryResponse=run(client.admin().cluster().preparePutRepository("test-repo").setType(MockRepositoryModule.class.getCanonicalName()).setSettings(ImmutableSettings.settingsBuilder().put("location",repositoryLocation).put("random",randomAsciiOfLength(10)).put("random_data_file_io_exception_rate",0.3)));
  assertThat(putRepositoryResponse.isAcknowledged(),equalTo(true));
  logger.info("--> delete index");
  wipeIndex("test-idx");
  logger.info("--> restore index after deletion");
  RestoreSnapshotResponse restoreSnapshotResponse=client.admin().cluster().prepareRestoreSnapshot("test-repo","test-snap").setWaitForCompletion(true).execute().actionGet();
  assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(),greaterThan(0));
  ensureGreen();
  CountResponse countResponse=run(client.prepareCount("test-idx"));
  assertThat(countResponse.getCount(),equalTo(100L));
}
