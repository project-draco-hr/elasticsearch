{
  Client client=client();
  logger.info("-->  creating repository");
  PutRepositoryResponse putRepositoryResponse=client.admin().cluster().preparePutRepository("test-repo").setType(MockRepositoryModule.class.getCanonicalName()).setSettings(ImmutableSettings.settingsBuilder().put("location",newTempDir(LifecycleScope.TEST)).put("random",randomAsciiOfLength(10)).put("random_data_file_io_exception_rate",0.1)).get();
  assertThat(putRepositoryResponse.isAcknowledged(),equalTo(true));
  createIndex("test-idx");
  ensureGreen();
  logger.info("--> indexing some data");
  for (int i=0; i < 100; i++) {
    index("test-idx","doc",Integer.toString(i),"foo","bar" + i);
  }
  refresh();
  assertThat(client.prepareCount("test-idx").get().getCount(),equalTo(100L));
  logger.info("--> snapshot");
  CreateSnapshotResponse createSnapshotResponse=client.admin().cluster().prepareCreateSnapshot("test-repo","test-snap").setWaitForCompletion(true).setIndices("test-idx").get();
  if (createSnapshotResponse.getSnapshotInfo().totalShards() == createSnapshotResponse.getSnapshotInfo().successfulShards()) {
    assertThat(getFailureCount("test-repo"),equalTo(0L));
  }
 else {
    assertThat(getFailureCount("test-repo"),greaterThan(0L));
    assertThat(createSnapshotResponse.getSnapshotInfo().shardFailures().size(),greaterThan(0));
    for (    SnapshotShardFailure shardFailure : createSnapshotResponse.getSnapshotInfo().shardFailures()) {
      assertThat(shardFailure.nodeId(),notNullValue());
      assertThat(shardFailure.index(),equalTo("test-idx"));
    }
    GetSnapshotsResponse getSnapshotsResponse=client.admin().cluster().prepareGetSnapshots("test-repo").addSnapshots("test-snap").get();
    assertThat(getSnapshotsResponse.getSnapshots().size(),equalTo(1));
    SnapshotInfo snapshotInfo=getSnapshotsResponse.getSnapshots().get(0);
    assertThat(snapshotInfo.shardFailures().size(),greaterThan(0));
    assertThat(snapshotInfo.totalShards(),greaterThan(snapshotInfo.successfulShards()));
  }
}
