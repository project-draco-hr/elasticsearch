{
  Client client=client();
  logger.info("-->  creating repository");
  PutRepositoryResponse putRepositoryResponse=run(client.admin().cluster().preparePutRepository("test-repo").setType(MockRepositoryModule.class.getCanonicalName()).setSettings(ImmutableSettings.settingsBuilder().put("location",newTempDir(LifecycleScope.TEST)).put("random",randomAsciiOfLength(10)).put("random_control_io_exception_rate",0.2)));
  assertThat(putRepositoryResponse.isAcknowledged(),equalTo(true));
  createIndex("test-idx");
  ensureGreen();
  logger.info("--> indexing some data");
  for (int i=0; i < 100; i++) {
    index("test-idx","doc",Integer.toString(i),"foo","bar" + i);
  }
  refresh();
  assertThat(run(client.prepareCount("test-idx")).getCount(),equalTo(100L));
  logger.info("--> snapshot");
  try {
    CreateSnapshotResponse createSnapshotResponse=run(client.admin().cluster().prepareCreateSnapshot("test-repo","test-snap").setWaitForCompletion(true).setIndices("test-idx"));
    if (createSnapshotResponse.getSnapshotInfo().totalShards() == createSnapshotResponse.getSnapshotInfo().successfulShards()) {
      assertThat(getFailureCount("test-repo"),equalTo(0L));
    }
 else {
      assertThat(getFailureCount("test-repo"),greaterThan(0L));
      assertThat(createSnapshotResponse.getSnapshotInfo().shardFailures().size(),greaterThan(0));
      for (      SnapshotShardFailure shardFailure : createSnapshotResponse.getSnapshotInfo().shardFailures()) {
        assertThat(shardFailure.reason(),containsString("Random IOException"));
        assertThat(shardFailure.nodeId(),notNullValue());
        assertThat(shardFailure.index(),equalTo("test-idx"));
      }
      GetSnapshotsResponse getSnapshotsResponse=run(client.admin().cluster().prepareGetSnapshots("test-repo").addSnapshots("test-snap"));
      assertThat(getSnapshotsResponse.getSnapshots().size(),equalTo(1));
      SnapshotInfo snapshotInfo=getSnapshotsResponse.getSnapshots().get(0);
      if (snapshotInfo.state() == SnapshotState.SUCCESS) {
        assertThat(snapshotInfo.shardFailures().size(),greaterThan(0));
        assertThat(snapshotInfo.totalShards(),greaterThan(snapshotInfo.successfulShards()));
      }
    }
  }
 catch (  Exception ex) {
    assertThat(getFailureCount("test-repo"),greaterThan(0L));
    assertThat(ExceptionsHelper.detailedMessage(ex),containsString("IOException"));
  }
}
