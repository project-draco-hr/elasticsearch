{
  Client client=client();
  logger.info("-->  creating repository");
  PutRepositoryResponse putRepositoryResponse=run(client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location",newTempDir(LifecycleScope.SUITE)).put("compress",randomBoolean()).put("chunk_size",randomIntBetween(5,100))));
  assertThat(putRepositoryResponse.isAcknowledged(),equalTo(true));
  createIndex("test-idx-1","test-idx-2","test-idx-3");
  ensureGreen();
  logger.info("--> indexing some data");
  for (int i=0; i < 100; i++) {
    index("test-idx-1","doc",Integer.toString(i),"foo","bar" + i);
    index("test-idx-2","doc",Integer.toString(i),"foo","baz" + i);
    index("test-idx-3","doc",Integer.toString(i),"foo","baz" + i);
  }
  refresh();
  assertThat(run(client.prepareCount("test-idx-1")).getCount(),equalTo(100L));
  assertThat(run(client.prepareCount("test-idx-2")).getCount(),equalTo(100L));
  assertThat(run(client.prepareCount("test-idx-3")).getCount(),equalTo(100L));
  logger.info("--> snapshot");
  CreateSnapshotResponse createSnapshotResponse=run(client.admin().cluster().prepareCreateSnapshot("test-repo","test-snap").setWaitForCompletion(true).setIndices("test-idx-*","-test-idx-3"));
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),greaterThan(0));
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));
  assertThat(run(client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap")).getSnapshots().get(0).state(),equalTo(SnapshotState.SUCCESS));
  logger.info("--> delete some data");
  for (int i=0; i < 50; i++) {
    run(client.prepareDelete("test-idx-1","doc",Integer.toString(i)));
  }
  for (int i=50; i < 100; i++) {
    run(client.prepareDelete("test-idx-2","doc",Integer.toString(i)));
  }
  for (int i=0; i < 100; i+=2) {
    run(client.prepareDelete("test-idx-3","doc",Integer.toString(i)));
  }
  refresh();
  assertThat(run(client.prepareCount("test-idx-1")).getCount(),equalTo(50L));
  assertThat(run(client.prepareCount("test-idx-2")).getCount(),equalTo(50L));
  assertThat(run(client.prepareCount("test-idx-3")).getCount(),equalTo(50L));
  logger.info("--> close indices");
  run(client.admin().indices().prepareClose("test-idx-1","test-idx-2"));
  logger.info("--> restore all indices from the snapshot");
  RestoreSnapshotResponse restoreSnapshotResponse=client.admin().cluster().prepareRestoreSnapshot("test-repo","test-snap").setWaitForCompletion(true).execute().actionGet();
  assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(),greaterThan(0));
  ensureGreen();
  assertThat(run(client.prepareCount("test-idx-1")).getCount(),equalTo(100L));
  assertThat(run(client.prepareCount("test-idx-2")).getCount(),equalTo(100L));
  assertThat(run(client.prepareCount("test-idx-3")).getCount(),equalTo(50L));
  logger.info("--> delete indices");
  wipeIndices("test-idx-1","test-idx-2");
  logger.info("--> restore one index after deletion");
  restoreSnapshotResponse=client.admin().cluster().prepareRestoreSnapshot("test-repo","test-snap").setWaitForCompletion(true).setIndices("test-idx-*","-test-idx-2").execute().actionGet();
  assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(),greaterThan(0));
  ensureGreen();
  assertThat(run(client.prepareCount("test-idx-1")).getCount(),equalTo(100L));
  ClusterState clusterState=run(client.admin().cluster().prepareState()).getState();
  assertThat(clusterState.getMetaData().hasIndex("test-idx-1"),equalTo(true));
  assertThat(clusterState.getMetaData().hasIndex("test-idx-2"),equalTo(false));
}
