{
  Client client=client();
  logger.info("-->  creating repository");
  File repositoryLocation=newTempDir(LifecycleScope.SUITE);
  PutRepositoryResponse putRepositoryResponse=client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location",repositoryLocation).put("compress",randomBoolean()).put("chunk_size",randomIntBetween(100,1000))).get();
  assertThat(putRepositoryResponse.isAcknowledged(),equalTo(true));
  createIndex("test-idx");
  ensureGreen();
  logger.info("--> indexing some data");
  for (int i=0; i < 100; i++) {
    index("test-idx","doc",Integer.toString(i),"foo","bar" + i);
  }
  refresh();
  assertThat(client.prepareCount("test-idx").get().getCount(),equalTo(100L));
  logger.info("--> snapshot");
  CreateSnapshotResponse createSnapshotResponse=client.admin().cluster().prepareCreateSnapshot("test-repo","test-snap").setWaitForCompletion(true).setIndices("test-idx").get();
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),greaterThan(0));
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));
  assertThat(client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-snap").get().getSnapshots().get(0).state(),equalTo(SnapshotState.SUCCESS));
  logger.info("--> delete index");
  wipeIndices("test-idx");
  logger.info("--> create read-only URL repository");
  putRepositoryResponse=client.admin().cluster().preparePutRepository("url-repo").setType("url").setSettings(ImmutableSettings.settingsBuilder().put("url",repositoryLocation.toURI().toURL()).put("list_directories",randomBoolean())).get();
  assertThat(putRepositoryResponse.isAcknowledged(),equalTo(true));
  logger.info("--> restore index after deletion");
  RestoreSnapshotResponse restoreSnapshotResponse=client.admin().cluster().prepareRestoreSnapshot("url-repo","test-snap").setWaitForCompletion(true).setIndices("test-idx").execute().actionGet();
  assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(),greaterThan(0));
  ensureGreen();
  assertThat(client.prepareCount("test-idx").get().getCount(),equalTo(100L));
  logger.info("--> list available shapshots");
  GetSnapshotsResponse getSnapshotsResponse=client.admin().cluster().prepareGetSnapshots("url-repo").get();
  assertThat(getSnapshotsResponse.getSnapshots(),notNullValue());
  assertThat(getSnapshotsResponse.getSnapshots().size(),equalTo(1));
  logger.info("--> delete snapshot");
  DeleteSnapshotResponse deleteSnapshotResponse=client.admin().cluster().prepareDeleteSnapshot("test-repo","test-snap").get();
  assertAcked(deleteSnapshotResponse);
  logger.info("--> list available shapshot again, no snapshots should be returned");
  getSnapshotsResponse=client.admin().cluster().prepareGetSnapshots("url-repo").get();
  assertThat(getSnapshotsResponse.getSnapshots(),notNullValue());
  assertThat(getSnapshotsResponse.getSnapshots().size(),equalTo(0));
}
