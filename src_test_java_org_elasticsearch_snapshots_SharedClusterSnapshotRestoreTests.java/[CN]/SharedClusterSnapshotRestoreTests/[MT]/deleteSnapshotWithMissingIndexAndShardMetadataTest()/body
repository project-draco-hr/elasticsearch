{
  Client client=client();
  File repo=newTempDir(LifecycleScope.SUITE);
  logger.info("-->  creating repository at " + repo.getAbsolutePath());
  assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(ImmutableSettings.settingsBuilder().put("location",repo).put("compress",false).put("chunk_size",randomIntBetween(100,1000))));
  createIndex("test-idx-1","test-idx-2");
  ensureYellow();
  logger.info("--> indexing some data");
  indexRandom(true,client().prepareIndex("test-idx-1","doc").setSource("foo","bar"),client().prepareIndex("test-idx-2","doc").setSource("foo","bar"));
  logger.info("--> creating snapshot");
  CreateSnapshotResponse createSnapshotResponse=client.admin().cluster().prepareCreateSnapshot("test-repo","test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get();
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),greaterThan(0));
  assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(),equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));
  logger.info("--> delete index metadata and shard metadata");
  File indices=new File(repo,"indices");
  File testIndex1=new File(indices,"test-idx-1");
  File testIndex2=new File(indices,"test-idx-2");
  File testIndex2Shard0=new File(testIndex2,"0");
  IOUtils.deleteFilesIgnoringExceptions(new File(testIndex1,"snapshot-test-snap-1").toPath());
  IOUtils.deleteFilesIgnoringExceptions(new File(testIndex2Shard0,"snapshot-test-snap-1").toPath());
  logger.info("--> delete snapshot");
  client.admin().cluster().prepareDeleteSnapshot("test-repo","test-snap-1").get();
  logger.info("--> make sure snapshot doesn't exist");
  assertThrows(client.admin().cluster().prepareGetSnapshots("test-repo").addSnapshots("test-snap-1"),SnapshotMissingException.class);
}
