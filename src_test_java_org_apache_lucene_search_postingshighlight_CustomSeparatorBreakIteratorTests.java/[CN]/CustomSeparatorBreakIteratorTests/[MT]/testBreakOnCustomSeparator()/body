{
  Character separator=randomSeparator();
  BreakIterator bi=new CustomSeparatorBreakIterator(separator);
  String source="this" + separator + "is"+ separator+ "the"+ separator+ "first"+ separator+ "sentence";
  bi.setText(source);
  assertThat(bi.current(),equalTo(0));
  assertThat(bi.first(),equalTo(0));
  assertThat(source.substring(bi.current(),bi.next()),equalTo("this" + separator));
  assertThat(source.substring(bi.current(),bi.next()),equalTo("is" + separator));
  assertThat(source.substring(bi.current(),bi.next()),equalTo("the" + separator));
  assertThat(source.substring(bi.current(),bi.next()),equalTo("first" + separator));
  assertThat(source.substring(bi.current(),bi.next()),equalTo("sentence"));
  assertThat(bi.next(),equalTo(BreakIterator.DONE));
  assertThat(bi.last(),equalTo(source.length()));
  int current=bi.current();
  assertThat(source.substring(bi.previous(),current),equalTo("sentence"));
  current=bi.current();
  assertThat(source.substring(bi.previous(),current),equalTo("first" + separator));
  current=bi.current();
  assertThat(source.substring(bi.previous(),current),equalTo("the" + separator));
  current=bi.current();
  assertThat(source.substring(bi.previous(),current),equalTo("is" + separator));
  current=bi.current();
  assertThat(source.substring(bi.previous(),current),equalTo("this" + separator));
  assertThat(bi.previous(),equalTo(BreakIterator.DONE));
  assertThat(bi.current(),equalTo(0));
  assertThat(source.substring(0,bi.following(9)),equalTo("this" + separator + "is"+ separator+ "the"+ separator));
  assertThat(source.substring(0,bi.preceding(9)),equalTo("this" + separator + "is"+ separator));
  assertThat(bi.first(),equalTo(0));
  assertThat(source.substring(0,bi.next(3)),equalTo("this" + separator + "is"+ separator+ "the"+ separator));
}
