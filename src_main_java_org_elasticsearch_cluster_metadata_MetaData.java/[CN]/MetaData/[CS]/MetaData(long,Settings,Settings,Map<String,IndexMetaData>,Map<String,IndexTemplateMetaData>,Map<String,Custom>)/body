{
  this.version=version;
  this.transientSettings=transientSettings;
  this.persistentSettings=persistentSettings;
  this.settings=ImmutableSettings.settingsBuilder().put(persistentSettings).put(transientSettings).build();
  this.indices=indices;
  this.customs=customs;
  this.templates=templates;
  int totalNumberOfShards=0;
  int numberOfShards=0;
  int numAliases=0;
  for (  IndexMetaData indexMetaData : indices.values()) {
    totalNumberOfShards+=indexMetaData.totalNumberOfShards();
    numberOfShards+=indexMetaData.numberOfShards();
    numAliases+=indexMetaData.aliases().size();
  }
  this.totalNumberOfShards=totalNumberOfShards;
  this.numberOfShards=numberOfShards;
  List<String> allIndicesLst=Lists.newArrayList();
  for (  IndexMetaData indexMetaData : indices.values()) {
    allIndicesLst.add(indexMetaData.index());
  }
  allIndices=allIndicesLst.toArray(new String[allIndicesLst.size()]);
  allIndicesSet=ImmutableSet.copyOf(allIndices);
  int numIndices=allIndicesSet.size();
  List<String> allOpenIndices=Lists.newArrayList();
  for (  IndexMetaData indexMetaData : indices.values()) {
    if (indexMetaData.state() == IndexMetaData.State.OPEN) {
      allOpenIndices.add(indexMetaData.index());
    }
  }
  this.allOpenIndices=allOpenIndices.toArray(new String[allOpenIndices.size()]);
  ExtTHashMap<String,Map<String,AliasMetaData>> aliases=new ExtTHashMap<String,Map<String,AliasMetaData>>(numAliases);
  for (  IndexMetaData indexMetaData : indices.values()) {
    String index=indexMetaData.index();
    for (    AliasMetaData aliasMd : indexMetaData.aliases().values()) {
      Map<String,AliasMetaData> indexAliasMap=aliases.get(aliasMd.alias());
      if (indexAliasMap == null) {
        indexAliasMap=new ExtTHashMap<String,AliasMetaData>(indices.size());
        aliases.put(aliasMd.alias(),indexAliasMap);
      }
      indexAliasMap.put(index,aliasMd);
    }
  }
  for (int i=0; i < aliases.internalValues().length; i++) {
    if (aliases.internalValues()[i] != null) {
      aliases.internalValues()[i]=XMaps.makeReadOnly((Map)aliases.internalValues()[i]);
    }
  }
  this.aliases=XMaps.makeReadOnly(aliases);
  ExtTHashMap<String,StringArray> aliasAndIndexToIndexMap=new ExtTHashMap<String,StringArray>(numAliases + numIndices);
  for (  IndexMetaData indexMetaData : indices.values()) {
    StringArray indicesLst=aliasAndIndexToIndexMap.get(indexMetaData.index());
    if (indicesLst == null) {
      indicesLst=new StringArray();
      aliasAndIndexToIndexMap.put(indexMetaData.index(),indicesLst);
    }
    indicesLst.add(indexMetaData.index());
    for (    String alias : indexMetaData.aliases().keySet()) {
      indicesLst=aliasAndIndexToIndexMap.get(alias);
      if (indicesLst == null) {
        indicesLst=new StringArray();
        aliasAndIndexToIndexMap.put(alias,indicesLst);
      }
      indicesLst.add(indexMetaData.index());
    }
  }
  for (  StringArray stringArray : aliasAndIndexToIndexMap.values()) {
    stringArray.trim();
  }
  this.aliasAndIndexToIndexMap=XMaps.makeReadOnly(aliasAndIndexToIndexMap);
}
