{
  this.uuid=uuid;
  this.version=version;
  this.transientSettings=transientSettings;
  this.persistentSettings=persistentSettings;
  this.settings=ImmutableSettings.settingsBuilder().put(persistentSettings).put(transientSettings).build();
  this.indices=indices;
  this.customs=customs;
  this.templates=templates;
  int totalNumberOfShards=0;
  int numberOfShards=0;
  int numAliases=0;
  for (  ObjectCursor<IndexMetaData> cursor : indices.values()) {
    totalNumberOfShards+=cursor.value.totalNumberOfShards();
    numberOfShards+=cursor.value.numberOfShards();
    numAliases+=cursor.value.aliases().size();
  }
  this.totalNumberOfShards=totalNumberOfShards;
  this.numberOfShards=numberOfShards;
  List<String> allIndicesLst=Lists.newArrayList();
  for (  ObjectCursor<IndexMetaData> cursor : indices.values()) {
    allIndicesLst.add(cursor.value.index());
  }
  allIndices=allIndicesLst.toArray(new String[allIndicesLst.size()]);
  int numIndices=allIndicesLst.size();
  List<String> allOpenIndices=Lists.newArrayList();
  List<String> allClosedIndices=Lists.newArrayList();
  for (  ObjectCursor<IndexMetaData> cursor : indices.values()) {
    IndexMetaData indexMetaData=cursor.value;
    if (indexMetaData.state() == IndexMetaData.State.OPEN) {
      allOpenIndices.add(indexMetaData.index());
    }
 else     if (indexMetaData.state() == IndexMetaData.State.CLOSE) {
      allClosedIndices.add(indexMetaData.index());
    }
  }
  this.allOpenIndices=allOpenIndices.toArray(new String[allOpenIndices.size()]);
  this.allClosedIndices=allClosedIndices.toArray(new String[allClosedIndices.size()]);
  ImmutableOpenMap.Builder<String,Object> tmpAliases=ImmutableOpenMap.builder(numAliases);
  for (  ObjectCursor<IndexMetaData> cursor : indices.values()) {
    IndexMetaData indexMetaData=cursor.value;
    String index=indexMetaData.index();
    for (    ObjectCursor<AliasMetaData> aliasCursor : indexMetaData.aliases().values()) {
      AliasMetaData aliasMd=aliasCursor.value;
      ImmutableOpenMap.Builder<String,AliasMetaData> indexAliasMap=(ImmutableOpenMap.Builder<String,AliasMetaData>)tmpAliases.get(aliasMd.alias());
      if (indexAliasMap == null) {
        indexAliasMap=ImmutableOpenMap.builder(1);
        tmpAliases.put(aliasMd.alias(),indexAliasMap);
      }
      indexAliasMap.put(index,aliasMd);
    }
  }
  for (  ObjectCursor<String> cursor : tmpAliases.keys()) {
    String alias=cursor.value;
    ImmutableOpenMap<String,AliasMetaData> map=((ImmutableOpenMap.Builder)tmpAliases.get(alias)).cast().build();
    tmpAliases.put(alias,map);
  }
  this.aliases=tmpAliases.<String,ImmutableOpenMap<String,AliasMetaData>>cast().build();
  ImmutableOpenMap.Builder<String,Object> aliasAndIndexToIndexMap=ImmutableOpenMap.builder(numAliases + numIndices);
  for (  ObjectCursor<IndexMetaData> cursor : indices.values()) {
    IndexMetaData indexMetaData=cursor.value;
    ObjectArrayList<String> indicesLst=(ObjectArrayList<String>)aliasAndIndexToIndexMap.get(indexMetaData.index());
    if (indicesLst == null) {
      indicesLst=new ObjectArrayList<>();
      aliasAndIndexToIndexMap.put(indexMetaData.index(),indicesLst);
    }
    indicesLst.add(indexMetaData.index());
    for (    ObjectCursor<String> cursor1 : indexMetaData.aliases().keys()) {
      String alias=cursor1.value;
      indicesLst=(ObjectArrayList<String>)aliasAndIndexToIndexMap.get(alias);
      if (indicesLst == null) {
        indicesLst=new ObjectArrayList<>();
        aliasAndIndexToIndexMap.put(alias,indicesLst);
      }
      indicesLst.add(indexMetaData.index());
    }
  }
  for (  ObjectObjectCursor<String,Object> cursor : aliasAndIndexToIndexMap) {
    String[] indicesLst=((ObjectArrayList<String>)cursor.value).toArray(String.class);
    aliasAndIndexToIndexMap.put(cursor.key,indicesLst);
  }
  this.aliasAndIndexToIndexMap=aliasAndIndexToIndexMap.<String,String[]>cast().build();
}
