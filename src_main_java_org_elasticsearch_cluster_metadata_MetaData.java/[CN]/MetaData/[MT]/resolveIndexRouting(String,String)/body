{
  ImmutableOpenMap<String,AliasMetaData> indexAliases=aliases.get(aliasOrIndex);
  if (indexAliases == null || indexAliases.isEmpty()) {
    return routing;
  }
  if (indexAliases.size() > 1) {
    throw new ElasticSearchIllegalArgumentException("Alias [" + aliasOrIndex + "] has more than one index associated with it ["+ Arrays.toString(indexAliases.keys().toArray(String.class))+ "], can't execute a single index op");
  }
  AliasMetaData aliasMd=indexAliases.values().iterator().next().value;
  if (aliasMd.indexRouting() != null) {
    if (routing != null) {
      if (!routing.equals(aliasMd.indexRouting())) {
        throw new ElasticSearchIllegalArgumentException("Alias [" + aliasOrIndex + "] has index routing associated with it ["+ aliasMd.indexRouting()+ "], and was provided with routing value ["+ routing+ "], rejecting operation");
      }
    }
    routing=aliasMd.indexRouting();
  }
  if (routing != null) {
    if (routing.indexOf(',') != -1) {
      throw new ElasticSearchIllegalArgumentException("index/alias [" + aliasOrIndex + "] provided with routing value ["+ routing+ "] that resolved to several routing values, rejecting operation");
    }
  }
  return routing;
}
