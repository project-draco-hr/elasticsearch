{
  if (aliasesOrIndices == null) {
    return null;
  }
  Set<String> result=null;
  for (int i=0; i < aliasesOrIndices.length; i++) {
    String aliasOrIndex=aliasesOrIndices[i];
    if (aliasAndIndexToIndexMap.containsKey(aliasOrIndex)) {
      if (result != null) {
        result.add(aliasOrIndex);
      }
      continue;
    }
    boolean add=true;
    if (aliasOrIndex.charAt(0) == '+') {
      if (i == 0) {
        result=new HashSet<String>();
      }
      add=true;
      aliasOrIndex=aliasOrIndex.substring(1);
    }
 else     if (aliasOrIndex.charAt(0) == '-') {
      if (i == 0) {
        result=new HashSet<String>(Arrays.asList(wildcardOnlyOpen ? concreteAllOpenIndices() : concreteAllIndices()));
      }
      add=false;
      aliasOrIndex=aliasOrIndex.substring(1);
    }
    if (!Regex.isSimpleMatchPattern(aliasOrIndex)) {
      if (ignoreIndices != IgnoreIndices.MISSING && !aliasAndIndexToIndexMap.containsKey(aliasOrIndex)) {
        throw new IndexMissingException(new Index(aliasOrIndex));
      }
      if (result != null) {
        if (add) {
          result.add(aliasOrIndex);
        }
 else {
          result.remove(aliasOrIndex);
        }
      }
      continue;
    }
    if (result == null) {
      result=new HashSet<String>();
      result.addAll(Arrays.asList(aliasesOrIndices).subList(0,i));
    }
    String[] indices=wildcardOnlyOpen ? concreteAllOpenIndices() : concreteAllIndices();
    boolean found=false;
    for (    String index : indices) {
      if (Regex.simpleMatch(aliasOrIndex,index)) {
        found=true;
        if (add) {
          result.add(index);
        }
 else {
          result.remove(index);
        }
      }
    }
    for (    ObjectCursor<String> cursor : aliases.keys()) {
      String alias=cursor.value;
      if (Regex.simpleMatch(aliasOrIndex,alias)) {
        found=true;
        if (add) {
          result.add(alias);
        }
 else {
          result.remove(alias);
        }
      }
    }
    if (!found && ignoreIndices != IgnoreIndices.MISSING) {
      throw new IndexMissingException(new Index(aliasOrIndex));
    }
  }
  if (result == null) {
    return aliasesOrIndices;
  }
  return result.toArray(new String[result.size()]);
}
