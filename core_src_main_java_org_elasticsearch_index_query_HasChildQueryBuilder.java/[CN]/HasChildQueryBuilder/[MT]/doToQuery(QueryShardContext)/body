{
  Query innerQuery=query.toQuery(context);
  if (innerQuery == null) {
    return null;
  }
  innerQuery.setBoost(boost);
  DocumentMapper childDocMapper=context.mapperService().documentMapper(type);
  if (childDocMapper == null) {
    throw new QueryShardException(context,"[" + NAME + "] no mapping for for type ["+ type+ "]");
  }
  ParentFieldMapper parentFieldMapper=childDocMapper.parentFieldMapper();
  if (parentFieldMapper.active() == false) {
    throw new QueryShardException(context,"[" + NAME + "] _parent field has no parent type configured");
  }
  if (queryInnerHits != null) {
    try (XContentParser parser=queryInnerHits.getXcontentParser()){
      XContentParser.Token token=parser.nextToken();
      if (token != XContentParser.Token.START_OBJECT) {
        throw new IllegalStateException("start object expected but was: [" + token + "]");
      }
      InnerHitsSubSearchContext innerHits=context.indexQueryParserService().getInnerHitsQueryParserHelper().parse(parser);
      if (innerHits != null) {
        ParsedQuery parsedQuery=new ParsedQuery(innerQuery,context.copyNamedQueries());
        InnerHitsContext.ParentChildInnerHits parentChildInnerHits=new InnerHitsContext.ParentChildInnerHits(innerHits.getSubSearchContext(),parsedQuery,null,context.mapperService(),childDocMapper);
        String name=innerHits.getName() != null ? innerHits.getName() : type;
        context.addInnerHits(name,parentChildInnerHits);
      }
    }
   }
  String parentType=parentFieldMapper.type();
  DocumentMapper parentDocMapper=context.mapperService().documentMapper(parentType);
  if (parentDocMapper == null) {
    throw new QueryShardException(context,"[" + NAME + "] Type ["+ type+ "] points to a non existent parent type ["+ parentType+ "]");
  }
  if (maxChildren > 0 && maxChildren < minChildren) {
    throw new QueryShardException(context,"[" + NAME + "] 'max_children' is less than 'min_children'");
  }
  BitSetProducer nonNestedDocsFilter=null;
  if (parentDocMapper.hasNestedObjects()) {
    nonNestedDocsFilter=context.bitsetFilter(Queries.newNonNestedFilter());
  }
  innerQuery=Queries.filtered(innerQuery,childDocMapper.typeFilter());
  final Query query;
  final ParentChildIndexFieldData parentChildIndexFieldData=context.getForField(parentFieldMapper.fieldType());
  if (context.indexVersionCreated().onOrAfter(Version.V_2_0_0_beta1)) {
    int maxChildren=maxChildren();
    if (maxChildren == 0) {
      maxChildren=Integer.MAX_VALUE;
    }
    query=new LateParsingQuery(parentDocMapper.typeFilter(),innerQuery,minChildren(),maxChildren,parentType,scoreTypeToScoreMode(scoreType),parentChildIndexFieldData);
  }
 else {
    Filter parentFilter=new QueryWrapperFilter(parentDocMapper.typeFilter());
    if (minChildren > 1 || maxChildren > 0 || scoreType != ScoreType.NONE) {
      query=new ChildrenQuery(parentChildIndexFieldData,parentType,type,parentFilter,innerQuery,scoreType,minChildren,maxChildren,shortCircuitCutoff,nonNestedDocsFilter);
    }
 else {
      query=new ChildrenConstantScoreQuery(parentChildIndexFieldData,innerQuery,parentType,type,parentFilter,shortCircuitCutoff,nonNestedDocsFilter);
    }
  }
  return query;
}
