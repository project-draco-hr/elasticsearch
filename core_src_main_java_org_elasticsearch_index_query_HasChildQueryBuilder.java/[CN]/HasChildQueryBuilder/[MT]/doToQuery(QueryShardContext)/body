{
  Query innerQuery;
  final String[] previousTypes=context.getTypes();
  context.setTypes(type);
  try {
    innerQuery=query.toQuery(context);
  }
  finally {
    context.setTypes(previousTypes);
  }
  if (innerQuery == null) {
    return null;
  }
  DocumentMapper childDocMapper=context.getMapperService().documentMapper(type);
  if (childDocMapper == null) {
    if (ignoreUnmapped) {
      return new MatchNoDocsQuery();
    }
 else {
      throw new QueryShardException(context,"[" + NAME + "] no mapping found for type ["+ type+ "]");
    }
  }
  ParentFieldMapper parentFieldMapper=childDocMapper.parentFieldMapper();
  if (parentFieldMapper.active() == false) {
    throw new QueryShardException(context,"[" + NAME + "] _parent field has no parent type configured");
  }
  if (innerHitBuilder != null) {
    context.addInnerHit(innerHitBuilder);
  }
  String parentType=parentFieldMapper.type();
  DocumentMapper parentDocMapper=context.getMapperService().documentMapper(parentType);
  if (parentDocMapper == null) {
    throw new QueryShardException(context,"[" + NAME + "] Type ["+ type+ "] points to a non existent parent type ["+ parentType+ "]");
  }
  if (maxChildren > 0 && maxChildren < minChildren) {
    throw new QueryShardException(context,"[" + NAME + "] 'max_children' is less than 'min_children'");
  }
  innerQuery=Queries.filtered(innerQuery,childDocMapper.typeFilter());
  final ParentChildIndexFieldData parentChildIndexFieldData=context.getForField(parentFieldMapper.fieldType());
  return new LateParsingQuery(parentDocMapper.typeFilter(),innerQuery,minChildren(),maxChildren(),parentType,scoreMode,parentChildIndexFieldData,context.getSearchSimilarity());
}
