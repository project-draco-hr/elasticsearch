{
  logger.trace("[{}] sending to {}",id,nodeToSend);
  transportService.sendRequest(nodeToSend,ACTION_NAME,pingRequest,TransportRequestOptions.builder().withTimeout((long)(timeout.millis() * 1.25)).build(),new BaseTransportResponseHandler<UnicastPingResponse>(){
    @Override public UnicastPingResponse newInstance(){
      return new UnicastPingResponse();
    }
    @Override public String executor(){
      return ThreadPool.Names.SAME;
    }
    @Override public void handleResponse(    UnicastPingResponse response){
      logger.trace("[{}] received response from {}: {}",id,nodeToSend,Arrays.toString(response.pingResponses));
      try {
        DiscoveryNodes discoveryNodes=contextProvider.nodes();
        for (        PingResponse pingResponse : response.pingResponses) {
          if (pingResponse.node().getId().equals(discoveryNodes.getLocalNodeId())) {
            continue;
          }
          SendPingsHandler sendPingsHandler=receivedResponses.get(response.id);
          if (sendPingsHandler == null) {
            if (!closed) {
              logger.warn("received ping response {} with no matching handler id [{}]",pingResponse,response.id);
            }
          }
 else {
            sendPingsHandler.pingCollection().addPing(pingResponse);
          }
        }
      }
  finally {
        latch.countDown();
      }
    }
    @Override public void handleException(    TransportException exp){
      latch.countDown();
      if (exp instanceof ConnectTransportException) {
        logger.trace("failed to connect to {}",exp,nodeToSend);
      }
 else {
        logger.warn("failed to send ping to [{}]",exp,node);
      }
    }
  }
);
}
