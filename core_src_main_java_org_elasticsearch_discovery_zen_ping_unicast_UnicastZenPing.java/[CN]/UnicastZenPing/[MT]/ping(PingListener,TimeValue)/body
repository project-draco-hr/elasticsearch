{
  final SendPingsHandler sendPingsHandler=new SendPingsHandler(pingHandlerIdGenerator.incrementAndGet());
  try {
    receivedResponses.put(sendPingsHandler.id(),sendPingsHandler);
    try {
      sendPings(timeout,null,sendPingsHandler);
    }
 catch (    RejectedExecutionException e) {
      logger.debug("Ping execution rejected",e);
    }
    threadPool.schedule(TimeValue.timeValueMillis(timeout.millis() / 2),ThreadPool.Names.GENERIC,new AbstractRunnable(){
      @Override protected void doRun(){
        sendPings(timeout,null,sendPingsHandler);
        threadPool.schedule(TimeValue.timeValueMillis(timeout.millis() / 2),ThreadPool.Names.GENERIC,new AbstractRunnable(){
          @Override protected void doRun() throws Exception {
            sendPings(timeout,TimeValue.timeValueMillis(timeout.millis() / 2),sendPingsHandler);
            sendPingsHandler.close();
            listener.onPing(sendPingsHandler.pingCollection().toArray());
            for (            DiscoveryNode node : sendPingsHandler.nodeToDisconnect) {
              logger.trace("[{}] disconnecting from {}",sendPingsHandler.id(),node);
              transportService.disconnectFromNode(node);
            }
          }
          @Override public void onFailure(          Throwable t){
            logger.debug("Ping execution failed",t);
            sendPingsHandler.close();
          }
        }
);
      }
      @Override public void onFailure(      Throwable t){
        logger.debug("Ping execution failed",t);
        sendPingsHandler.close();
      }
    }
);
  }
 catch (  EsRejectedExecutionException ex) {
    sendPingsHandler.close();
  }
catch (  Exception e) {
    sendPingsHandler.close();
    throw new ElasticsearchException("Ping execution failed",e);
  }
}
