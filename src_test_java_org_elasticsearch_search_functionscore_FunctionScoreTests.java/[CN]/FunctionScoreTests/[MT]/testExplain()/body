{
  assertAcked(prepareCreate(INDEX).addMapping(TYPE,MAPPING_WITH_DOUBLE_AND_GEO_POINT_AND_TEXT_FIELD));
  ensureYellow();
  index(INDEX,TYPE,"1",SIMPLE_DOC);
  refresh();
  SearchResponse responseWithWeights=client().search(searchRequest().source(searchSource().query(functionScoreQuery(termFilter(TEXT_FIELD,"value").cache(false)).add(gaussDecayFunction(GEO_POINT_FIELD,new GeoPoint(10,20),"1000km")).add(fieldValueFactorFunction(DOUBLE_FIELD).modifier(FieldValueFactorFunction.Modifier.LN).setWeight(2)).add(scriptFunction("_index['" + TEXT_FIELD + "']['value'].tf()").setWeight(3))).explain(true))).actionGet();
  assertThat(responseWithWeights.getHits().getAt(0).getExplanation().toString(),equalTo("6.0 = (MATCH) function score, product of:\n  1.0 = (MATCH) ConstantScore(text_field:value), product of:\n    1.0 = boost\n    1.0 = queryNorm\n  6.0 = (MATCH) Math.min of\n    6.0 = (MATCH) function score, score mode [multiply]\n      1.0 = (MATCH) function score, product of:\n        1.0 = match filter: *:*\n        1.0 = (MATCH) Function for field geo_point_field:\n          1.0 = exp(-0.5*pow(MIN of: [Math.max(arcDistance([10.0, 20.0](=doc value),[10.0, 20.0](=origin)) - 0.0(=offset), 0)],2.0)/7.213475204444817E11)\n      2.0 = (MATCH) function score, product of:\n        1.0 = match filter: *:*\n        2.0 = (MATCH) product of:\n          1.0 = field value function: ln(doc['double_field'].value * factor=1.0)\n          2.0 = weight\n      3.0 = (MATCH) function score, product of:\n        1.0 = match filter: *:*\n        3.0 = (MATCH) product of:\n          1.0 = script score function, computed with script:\"_index['text_field']['value'].tf()\n          3.0 = weight\n    3.4028235E38 = maxBoost\n  1.0 = queryBoost\n"));
  responseWithWeights=client().search(searchRequest().source(searchSource().query(functionScoreQuery(termFilter(TEXT_FIELD,"value").cache(false)).add(weightFactorFunction(4.0f))).explain(true))).actionGet();
  assertThat(responseWithWeights.getHits().getAt(0).getExplanation().toString(),equalTo("4.0 = (MATCH) function score, product of:\n  1.0 = (MATCH) ConstantScore(text_field:value), product of:\n    1.0 = boost\n    1.0 = queryNorm\n  4.0 = (MATCH) Math.min of\n    4.0 = (MATCH) product of:\n      1.0 = constant score 1.0 - no function provided\n      4.0 = weight\n    3.4028235E38 = maxBoost\n  1.0 = queryBoost\n"));
}
