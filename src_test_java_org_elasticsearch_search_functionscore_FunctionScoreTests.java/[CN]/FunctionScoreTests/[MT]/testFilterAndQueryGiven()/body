{
  assertAcked(prepareCreate("test").addMapping("type",jsonBuilder().startObject().startObject("type").startObject("properties").startObject("filter_field").field("type","string").endObject().startObject("query_field").field("type","string").endObject().startObject("num").field("type","float").endObject().endObject().endObject().endObject()));
  ensureYellow();
  List<IndexRequestBuilder> indexRequests=new ArrayList<>();
  for (int i=0; i < 20; i++) {
    indexRequests.add(client().prepareIndex().setType("type").setId(Integer.toString(i)).setIndex("test").setSource(jsonBuilder().startObject().field("query_field",Integer.toString(i % 3)).field("filter_field",Integer.toString(i % 2)).field("num",i).endObject()));
  }
  indexRandom(true,true,indexRequests);
  SearchResponse response=client().search(searchRequest().source(searchSource().query(functionScoreQuery(termQuery("query_field","0"),termFilter("filter_field","0"),scriptFunction("doc['num'].value")).boostMode("replace")))).get();
  assertSearchResponse(response);
  assertThat(response.getHits().totalHits(),equalTo(4l));
  for (  SearchHit hit : response.getHits().getHits()) {
    assertThat(Float.parseFloat(hit.getId()),equalTo(hit.getScore()));
  }
}
