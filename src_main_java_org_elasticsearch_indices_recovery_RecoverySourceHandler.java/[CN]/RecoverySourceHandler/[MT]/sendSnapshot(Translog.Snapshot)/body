{
  int ops=0;
  long size=0;
  int totalOperations=0;
  final List<Translog.Operation> operations=Lists.newArrayList();
  Translog.Operation operation=snapshot.next();
  final TransportRequestOptions recoveryOptions=TransportRequestOptions.options().withCompress(recoverySettings.compress()).withType(TransportRequestOptions.Type.RECOVERY).withTimeout(recoverySettings.internalActionLongTimeout());
  while (operation != null) {
    if (shard.state() == IndexShardState.CLOSED) {
      throw new IndexShardClosedException(request.shardId());
    }
    cancellableThreads.checkForCancel();
    operations.add(operation);
    ops+=1;
    size+=operation.estimateSize();
    totalOperations++;
    if (ops >= recoverySettings.translogOps() || size >= recoverySettings.translogSize().bytes()) {
      cancellableThreads.execute(new Interruptable(){
        @Override public void run() throws InterruptedException {
          final RecoveryTranslogOperationsRequest translogOperationsRequest=new RecoveryTranslogOperationsRequest(request.recoveryId(),request.shardId(),operations);
          transportService.submitRequest(request.targetNode(),RecoveryTarget.Actions.TRANSLOG_OPS,translogOperationsRequest,recoveryOptions,EmptyTransportResponseHandler.INSTANCE_SAME).txGet();
        }
      }
);
      ops=0;
      size=0;
      operations.clear();
    }
    operation=snapshot.next();
  }
  if (!operations.isEmpty()) {
    cancellableThreads.execute(new Interruptable(){
      @Override public void run() throws InterruptedException {
        RecoveryTranslogOperationsRequest translogOperationsRequest=new RecoveryTranslogOperationsRequest(request.recoveryId(),request.shardId(),operations);
        transportService.submitRequest(request.targetNode(),RecoveryTarget.Actions.TRANSLOG_OPS,translogOperationsRequest,recoveryOptions,EmptyTransportResponseHandler.INSTANCE_SAME).txGet();
      }
    }
);
  }
  return totalOperations;
}
