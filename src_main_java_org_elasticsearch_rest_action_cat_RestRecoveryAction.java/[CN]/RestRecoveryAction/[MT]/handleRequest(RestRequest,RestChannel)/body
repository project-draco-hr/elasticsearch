{
  String[] indices=Strings.splitStringByCommaToArray(request.param("index"));
  IndicesStatusRequest indicesStatusRequest=new IndicesStatusRequest(indices);
  indicesStatusRequest.recovery(true);
  indicesStatusRequest.operationThreading(BroadcastOperationThreading.SINGLE_THREAD);
  client.admin().indices().status(indicesStatusRequest,new ActionListener<IndicesStatusResponse>(){
    @Override public void onResponse(    IndicesStatusResponse indicesStatusResponse){
      Map<String,Long> primarySizes=new HashMap<String,Long>();
      Set<ShardStatus> replicas=new HashSet<ShardStatus>();
      for (      ShardStatus shardStatus : indicesStatusResponse.getShards()) {
        if (shardStatus.getShardRouting().primary()) {
          primarySizes.put(shardStatus.getShardRouting().getIndex() + shardStatus.getShardRouting().getId(),shardStatus.getStoreSize().bytes());
        }
 else         if (shardStatus.getState() == IndexShardState.RECOVERING) {
          replicas.add(shardStatus);
        }
      }
      try {
        channel.sendResponse(RestTable.buildResponse(buildRecoveryTable(primarySizes,replicas),request,channel));
      }
 catch (      Throwable e) {
        try {
          channel.sendResponse(new XContentThrowableRestResponse(request,e));
        }
 catch (        IOException e2) {
          logger.error("Unable to send recovery status response",e2);
        }
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
