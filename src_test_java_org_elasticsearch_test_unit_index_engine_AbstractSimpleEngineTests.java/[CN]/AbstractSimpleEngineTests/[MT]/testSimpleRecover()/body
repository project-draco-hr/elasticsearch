{
  ParsedDocument doc=new ParsedDocument("1","1","test",null,-1,-1,doc().add(uidField("1")).add(field("value","test")).build(),Lucene.STANDARD_ANALYZER,B_1,false);
  engine.create(new Engine.Create(null,newUid("1"),doc));
  engine.flush(new Engine.Flush());
  engine.recover(new Engine.RecoveryHandler(){
    @Override public void phase1(    SnapshotIndexCommit snapshot) throws EngineException {
      try {
        engine.flush(new Engine.Flush());
        assertThat("flush is not allowed in phase 3",false,equalTo(true));
      }
 catch (      FlushNotAllowedEngineException e) {
      }
    }
    @Override public void phase2(    Translog.Snapshot snapshot) throws EngineException {
      MatcherAssert.assertThat(snapshot,TranslogSizeMatcher.translogSize(0));
      try {
        engine.flush(new Engine.Flush());
        assertThat("flush is not allowed in phase 3",false,equalTo(true));
      }
 catch (      FlushNotAllowedEngineException e) {
      }
    }
    @Override public void phase3(    Translog.Snapshot snapshot) throws EngineException {
      MatcherAssert.assertThat(snapshot,TranslogSizeMatcher.translogSize(0));
      try {
        engine.flush(new Engine.Flush());
        assertThat("flush is not allowed in phase 3",false,equalTo(true));
      }
 catch (      FlushNotAllowedEngineException e) {
      }
    }
  }
);
  engine.flush(new Engine.Flush());
  engine.close();
}
