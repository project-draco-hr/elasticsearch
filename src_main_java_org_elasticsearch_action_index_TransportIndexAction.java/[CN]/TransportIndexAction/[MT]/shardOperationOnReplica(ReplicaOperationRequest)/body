{
  IndexService indexService=indicesService.indexServiceSafe(shardRequest.shardId.getIndex());
  IndexShard indexShard=indexService.shardSafe(shardRequest.shardId.id());
  IndexRequest request=shardRequest.request;
  SourceToParse sourceToParse=SourceToParse.source(SourceToParse.Origin.REPLICA,request.source()).type(request.type()).id(request.id()).routing(request.routing()).parent(request.parent()).timestamp(request.timestamp()).ttl(request.ttl());
  if (request.opType() == IndexRequest.OpType.INDEX) {
    Engine.Index index=indexShard.prepareIndex(sourceToParse,request.version(),request.versionType(),Engine.Operation.Origin.REPLICA,request.canHaveDuplicates());
    if (index.parsedDoc().dynamicMappingsUpdate() != null) {
      if (indexService.index().name().equals(RiverIndexName.Conf.indexName(settings))) {
        indexService.mapperService().merge(request.type(),new CompressedString(index.parsedDoc().dynamicMappingsUpdate().toBytes()),true);
      }
 else {
        throw new ElasticsearchIllegalStateException("Index operations on replicas should not trigger dynamic mappings updates: [" + index.parsedDoc().dynamicMappingsUpdate() + "]");
      }
    }
    indexShard.index(index);
  }
 else {
    Engine.Create create=indexShard.prepareCreate(sourceToParse,request.version(),request.versionType(),Engine.Operation.Origin.REPLICA,request.canHaveDuplicates(),request.autoGeneratedId());
    if (create.parsedDoc().dynamicMappingsUpdate() != null) {
      if (indexService.index().name().equals(RiverIndexName.Conf.indexName(settings))) {
        indexService.mapperService().merge(request.type(),new CompressedString(create.parsedDoc().dynamicMappingsUpdate().toBytes()),true);
      }
 else {
        throw new ElasticsearchIllegalStateException("Index operations on replicas should not trigger dynamic mappings updates: [" + create.parsedDoc().dynamicMappingsUpdate() + "]");
      }
    }
    indexShard.create(create);
  }
  if (request.refresh()) {
    try {
      indexShard.refresh("refresh_flag_index");
    }
 catch (    Exception e) {
    }
  }
}
