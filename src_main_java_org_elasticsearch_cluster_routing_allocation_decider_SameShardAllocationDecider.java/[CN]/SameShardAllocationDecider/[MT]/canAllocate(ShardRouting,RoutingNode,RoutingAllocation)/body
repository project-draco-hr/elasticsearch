{
  Iterable<MutableShardRouting> assignedShards=allocation.routingNodes().assignedShards(shardRouting);
  for (  MutableShardRouting assignedShard : assignedShards) {
    if (node.nodeId().equals(assignedShard.currentNodeId())) {
      return allocation.decision(Decision.NO,"shard cannot be allocated on same node [%s] it already exists on",node.nodeId());
    }
  }
  if (sameHost) {
    if (node.node() != null) {
      for (      RoutingNode checkNode : allocation.routingNodes()) {
        if (checkNode.node() == null) {
          continue;
        }
        boolean checkNodeOnSameHost=false;
        if (Strings.hasLength(checkNode.node().getHostAddress()) && Strings.hasLength(node.node().getHostAddress())) {
          if (checkNode.node().getHostAddress().equals(node.node().getHostAddress())) {
            checkNodeOnSameHost=true;
          }
        }
 else         if (Strings.hasLength(checkNode.node().getHostName()) && Strings.hasLength(node.node().getHostName())) {
          if (checkNode.node().getHostName().equals(node.node().getHostName())) {
            checkNodeOnSameHost=true;
          }
        }
        if (checkNodeOnSameHost) {
          for (          MutableShardRouting assignedShard : assignedShards) {
            if (checkNode.nodeId().equals(assignedShard.currentNodeId())) {
              return allocation.decision(Decision.NO,"shard cannot be allocated on same host [%s] it already exists on",node.nodeId());
            }
          }
        }
      }
    }
  }
  return allocation.decision(Decision.YES,"shard is not allocated to same node or host");
}
