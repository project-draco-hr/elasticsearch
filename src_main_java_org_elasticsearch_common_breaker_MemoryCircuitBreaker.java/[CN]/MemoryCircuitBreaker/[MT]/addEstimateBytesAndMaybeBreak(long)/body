{
  if (memoryBytesLimit == 0) {
    circuitBreak();
  }
  long newUsed;
  if (this.memoryBytesLimit == -1) {
    newUsed=this.used.addAndGet(bytes);
    if (logger.isTraceEnabled()) {
      logger.trace("Adding [{}] to used bytes [new used: [{}], limit: [-1b]]",new ByteSizeValue(bytes),new ByteSizeValue(newUsed));
    }
    return newUsed;
  }
  long currentUsed;
  do {
    currentUsed=this.used.get();
    newUsed=currentUsed + bytes;
    long newUsedWithOverhead=(long)(newUsed * overheadConstant);
    if (logger.isTraceEnabled()) {
      logger.trace("Adding [{}] to used bytes [new used: [{}], limit: {} [{}], estimate: {} [{}]]",new ByteSizeValue(bytes),new ByteSizeValue(newUsed),memoryBytesLimit,new ByteSizeValue(memoryBytesLimit),newUsedWithOverhead,new ByteSizeValue(newUsedWithOverhead));
    }
    if (memoryBytesLimit > 0 && newUsedWithOverhead > memoryBytesLimit) {
      logger.error("New used memory {} [{}] would be larger than configured breaker: {} [{}], breaking",newUsedWithOverhead,new ByteSizeValue(newUsedWithOverhead),memoryBytesLimit,new ByteSizeValue(memoryBytesLimit));
      circuitBreak();
    }
  }
 while (!this.used.compareAndSet(currentUsed,newUsed));
  return newUsed;
}
