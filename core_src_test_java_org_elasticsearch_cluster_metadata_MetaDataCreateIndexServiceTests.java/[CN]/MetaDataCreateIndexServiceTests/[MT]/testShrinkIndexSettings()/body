{
  String indexName=randomAsciiOfLength(10);
  ClusterState clusterState=ClusterState.builder(createClusterState(indexName,randomIntBetween(2,10),0,Settings.builder().put("index.blocks.write",true).put("index.similarity.default.type","BM25").put("index.analysis.analyzer.my_analyzer.tokenizer","keyword").build())).nodes(DiscoveryNodes.builder().put(newNode("node1"))).build();
  AllocationService service=new AllocationService(Settings.builder().build(),new AllocationDeciders(Settings.EMPTY,Collections.singleton(new MaxRetryAllocationDecider(Settings.EMPTY))),NoopGatewayAllocator.INSTANCE,new BalancedShardsAllocator(Settings.EMPTY),EmptyClusterInfoService.INSTANCE);
  RoutingTable routingTable=service.reroute(clusterState,"reroute").routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  routingTable=service.applyStartedShards(clusterState,routingTable.index(indexName).shardsWithState(ShardRoutingState.INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  Settings.Builder builder=Settings.builder();
  MetaDataCreateIndexService.prepareShrinkIndexSettings(clusterState,Collections.emptySet(),builder,clusterState.metaData().index(indexName).getIndex(),"target");
  assertEquals("1",builder.build().get("index.number_of_shards"));
  assertEquals("similarity settings must be copied","BM25",builder.build().get("index.similarity.default.type"));
  assertEquals("analysis settings must be copied","keyword",builder.build().get("index.analysis.analyzer.my_analyzer.tokenizer"));
  assertEquals("node1",builder.build().get("index.routing.allocation.initial_recovery._id"));
  assertEquals("1",builder.build().get("index.allocation.max_retries"));
}
