{
  FieldMapper fieldMapper=highlighterContext.mapper;
  SearchContextHighlight.Field field=highlighterContext.field;
  if (canHighlight(fieldMapper) == false) {
    throw new IllegalArgumentException("the field [" + highlighterContext.fieldName + "] should be indexed with positions and offsets in the postings list to be used with postings highlighter");
  }
  SearchContext context=highlighterContext.context;
  FetchSubPhase.HitContext hitContext=highlighterContext.hitContext;
  if (!hitContext.cache().containsKey(CACHE_KEY)) {
    hitContext.cache().put(CACHE_KEY,new HighlighterEntry());
  }
  HighlighterEntry highlighterEntry=(HighlighterEntry)hitContext.cache().get(CACHE_KEY);
  MapperHighlighterEntry mapperHighlighterEntry=highlighterEntry.mappers.get(fieldMapper);
  if (mapperHighlighterEntry == null) {
    Encoder encoder=field.fieldOptions().encoder().equals("html") ? HighlightUtils.Encoders.HTML : HighlightUtils.Encoders.DEFAULT;
    CustomPassageFormatter passageFormatter=new CustomPassageFormatter(field.fieldOptions().preTags()[0],field.fieldOptions().postTags()[0],encoder);
    mapperHighlighterEntry=new MapperHighlighterEntry(passageFormatter);
  }
  List<Snippet> snippets=new ArrayList<>();
  int numberOfFragments;
  try {
    Analyzer analyzer=context.mapperService().documentMapper(hitContext.hit().type()).mappers().indexAnalyzer();
    List<Object> fieldValues=HighlightUtils.loadFieldValues(field,fieldMapper,context,hitContext);
    CustomPostingsHighlighter highlighter;
    if (field.fieldOptions().numberOfFragments() == 0) {
      String fieldValue=mergeFieldValues(fieldValues,HighlightUtils.NULL_SEPARATOR);
      CustomSeparatorBreakIterator breakIterator=new CustomSeparatorBreakIterator(HighlightUtils.NULL_SEPARATOR);
      highlighter=new CustomPostingsHighlighter(analyzer,mapperHighlighterEntry.passageFormatter,breakIterator,fieldValue,field.fieldOptions().noMatchSize() > 0);
      numberOfFragments=fieldValues.size();
    }
 else {
      String fieldValue=mergeFieldValues(fieldValues,HighlightUtils.PARAGRAPH_SEPARATOR);
      highlighter=new CustomPostingsHighlighter(analyzer,mapperHighlighterEntry.passageFormatter,fieldValue,field.fieldOptions().noMatchSize() > 0);
      numberOfFragments=field.fieldOptions().numberOfFragments();
    }
    IndexSearcher searcher=new IndexSearcher(hitContext.reader());
    Snippet[] fieldSnippets=highlighter.highlightField(fieldMapper.names().indexName(),highlighterContext.query,searcher,hitContext.docId(),numberOfFragments);
    for (    Snippet fieldSnippet : fieldSnippets) {
      if (Strings.hasText(fieldSnippet.getText())) {
        snippets.add(fieldSnippet);
      }
    }
  }
 catch (  IOException e) {
    throw new FetchPhaseExecutionException(context,"Failed to highlight field [" + highlighterContext.fieldName + "]",e);
  }
  snippets=filterSnippets(snippets,field.fieldOptions().numberOfFragments());
  if (field.fieldOptions().scoreOrdered()) {
    CollectionUtil.introSort(snippets,new Comparator<Snippet>(){
      @Override public int compare(      Snippet o1,      Snippet o2){
        return (int)Math.signum(o2.getScore() - o1.getScore());
      }
    }
);
  }
  String[] fragments=new String[snippets.size()];
  for (int i=0; i < fragments.length; i++) {
    fragments[i]=snippets.get(i).getText();
  }
  if (fragments.length > 0) {
    return new HighlightField(highlighterContext.fieldName,StringText.convertFromStringArray(fragments));
  }
  return null;
}
