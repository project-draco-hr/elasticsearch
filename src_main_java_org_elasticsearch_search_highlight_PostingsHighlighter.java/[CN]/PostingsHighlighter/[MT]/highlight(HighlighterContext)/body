{
  FieldMapper<?> fieldMapper=highlighterContext.mapper;
  SearchContextHighlight.Field field=highlighterContext.field;
  if (fieldMapper.fieldType().indexOptions() != FieldInfo.IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {
    throw new ElasticSearchIllegalArgumentException("the field [" + field.field() + "] should be indexed with positions and offsets in the postings list to be used with postings highlighter");
  }
  SearchContext context=highlighterContext.context;
  FetchSubPhase.HitContext hitContext=highlighterContext.hitContext;
  if (!hitContext.cache().containsKey(CACHE_KEY)) {
    Query query;
    try {
      query=rewrite(highlighterContext,hitContext.topLevelReader());
    }
 catch (    IOException e) {
      throw new FetchPhaseExecutionException(context,"Failed to highlight field [" + highlighterContext.fieldName + "]",e);
    }
    SortedSet<Term> queryTerms=extractTerms(query);
    hitContext.cache().put(CACHE_KEY,new HighlighterEntry(queryTerms));
  }
  HighlighterEntry highlighterEntry=(HighlighterEntry)hitContext.cache().get(CACHE_KEY);
  MapperHighlighterEntry mapperHighlighterEntry=highlighterEntry.mappers.get(fieldMapper);
  if (mapperHighlighterEntry == null) {
    Encoder encoder=field.encoder().equals("html") ? HighlightUtils.Encoders.HTML : HighlightUtils.Encoders.DEFAULT;
    CustomPassageFormatter passageFormatter=new CustomPassageFormatter(field.preTags()[0],field.postTags()[0],encoder);
    BytesRef[] filteredQueryTerms=filterTerms(highlighterEntry.queryTerms,fieldMapper.names().indexName(),field.requireFieldMatch());
    mapperHighlighterEntry=new MapperHighlighterEntry(passageFormatter,filteredQueryTerms);
  }
  boolean mergeValues=field.numberOfFragments() != 0;
  List<Snippet> snippets=new ArrayList<Snippet>();
  int numberOfFragments;
  try {
    List<Object> textsToHighlight=HighlightUtils.loadFieldValues(fieldMapper,context,hitContext);
    CustomPostingsHighlighter highlighter=new CustomPostingsHighlighter(mapperHighlighterEntry.passageFormatter,textsToHighlight,mergeValues,Integer.MAX_VALUE - 1,field.noMatchSize());
    if (field.numberOfFragments() == 0) {
      highlighter.setBreakIterator(new WholeBreakIterator());
      numberOfFragments=1;
    }
 else {
      numberOfFragments=field.numberOfFragments();
    }
    int values=mergeValues ? 1 : textsToHighlight.size();
    for (int i=0; i < values; i++) {
      Snippet[] fieldSnippets=highlighter.highlightDoc(fieldMapper.names().indexName(),mapperHighlighterEntry.filteredQueryTerms,hitContext.searcher(),hitContext.docId(),numberOfFragments);
      if (fieldSnippets != null) {
        for (        Snippet fieldSnippet : fieldSnippets) {
          if (Strings.hasText(fieldSnippet.getText())) {
            snippets.add(fieldSnippet);
          }
        }
      }
    }
  }
 catch (  IOException e) {
    throw new FetchPhaseExecutionException(context,"Failed to highlight field [" + highlighterContext.fieldName + "]",e);
  }
  snippets=filterSnippets(snippets,field.numberOfFragments());
  if (field.scoreOrdered()) {
    CollectionUtil.introSort(snippets,new Comparator<Snippet>(){
      public int compare(      Snippet o1,      Snippet o2){
        return (int)Math.signum(o2.getScore() - o1.getScore());
      }
    }
);
  }
  String[] fragments=new String[snippets.size()];
  for (int i=0; i < fragments.length; i++) {
    fragments[i]=snippets.get(i).getText();
  }
  if (fragments.length > 0) {
    return new HighlightField(highlighterContext.fieldName,StringText.convertFromStringArray(fragments));
  }
  return null;
}
