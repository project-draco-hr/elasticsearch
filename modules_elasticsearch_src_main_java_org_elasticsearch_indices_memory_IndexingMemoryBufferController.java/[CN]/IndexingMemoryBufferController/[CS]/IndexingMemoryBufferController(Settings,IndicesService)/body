{
  super(settings);
  this.indicesService=indicesService;
  ByteSizeValue indexingBuffer;
  String indexingBufferSetting=componentSettings.get("index_buffer_size","10%");
  if (indexingBufferSetting.endsWith("%")) {
    double percent=Double.parseDouble(indexingBufferSetting.substring(0,indexingBufferSetting.length() - 1));
    indexingBuffer=new ByteSizeValue((long)(((double)JvmInfo.jvmInfo().mem().heapMax().bytes()) * (percent / 100)));
    ByteSizeValue minIndexingBuffer=componentSettings.getAsBytesSize("min_index_buffer_size",new ByteSizeValue(48,ByteSizeUnit.MB));
    ByteSizeValue maxIndexingBuffer=componentSettings.getAsBytesSize("max_index_buffer_size",null);
    if (indexingBuffer.bytes() < minIndexingBuffer.bytes()) {
      indexingBuffer=minIndexingBuffer;
    }
    if (maxIndexingBuffer != null && indexingBuffer.bytes() > maxIndexingBuffer.bytes()) {
      indexingBuffer=maxIndexingBuffer;
    }
  }
 else {
    indexingBuffer=ByteSizeValue.parseBytesSizeValue(indexingBufferSetting,null);
  }
  this.indexingBuffer=indexingBuffer;
  this.minShardIndexBufferSize=componentSettings.getAsBytesSize("min_shard_index_buffer_size",new ByteSizeValue(4,ByteSizeUnit.MB));
  this.maxShardIndexBufferSize=componentSettings.getAsBytesSize("max_shard_index_buffer_size",new ByteSizeValue(512,ByteSizeUnit.MB));
  logger.debug("using index_buffer_size [{}], with min_shard_index_buffer_size [{}], max_shard_index_buffer_size [{}]",this.indexingBuffer,this.minShardIndexBufferSize,this.maxShardIndexBufferSize);
  indicesService.indicesLifecycle().addListener(listener);
}
