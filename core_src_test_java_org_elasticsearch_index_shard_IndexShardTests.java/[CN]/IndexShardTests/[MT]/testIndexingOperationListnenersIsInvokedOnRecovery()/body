{
  createIndex("test");
  ensureGreen();
  IndicesService indicesService=getInstanceFromNode(IndicesService.class);
  IndexService indexService=indicesService.indexService(resolveIndex("test"));
  IndexShard shard=indexService.getShardOrNull(0);
  client().prepareIndex("test","test","0").setSource("{\"foo\" : \"bar\"}").get();
  client().prepareDelete("test","test","0").get();
  client().prepareIndex("test","test","1").setSource("{\"foo\" : \"bar\"}").setRefresh(true).get();
  IndexSearcherWrapper wrapper=new IndexSearcherWrapper(){
  }
;
  shard.close("simon says",false);
  final AtomicInteger preIndex=new AtomicInteger();
  final AtomicInteger postIndex=new AtomicInteger();
  final AtomicInteger preDelete=new AtomicInteger();
  final AtomicInteger postDelete=new AtomicInteger();
  IndexingOperationListener listener=new IndexingOperationListener(){
    @Override public Engine.Index preIndex(    Engine.Index operation){
      preIndex.incrementAndGet();
      return operation;
    }
    @Override public void postIndex(    Engine.Index index,    boolean created){
      postIndex.incrementAndGet();
    }
    @Override public Engine.Delete preDelete(    Engine.Delete delete){
      preDelete.incrementAndGet();
      return delete;
    }
    @Override public void postDelete(    Engine.Delete delete){
      postDelete.incrementAndGet();
    }
  }
;
  final IndexShard newShard=reinitWithWrapper(indexService,shard,wrapper,listener);
  try {
    IndexingStats indexingStats=newShard.indexingStats();
    assertEquals(0,indexingStats.getTotal().getDeleteCount());
    assertEquals(0,indexingStats.getTotal().getDeleteCurrent());
    assertEquals(0,indexingStats.getTotal().getIndexCount());
    assertEquals(0,indexingStats.getTotal().getIndexCurrent());
    assertEquals(0,indexingStats.getTotal().getIndexFailedCount());
    assertEquals(2,preIndex.get());
    assertEquals(2,postIndex.get());
    assertEquals(1,preDelete.get());
    assertEquals(1,postDelete.get());
  }
  finally {
    newShard.close("just do it",randomBoolean());
  }
}
