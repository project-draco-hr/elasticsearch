{
  final IndexShard shard=newStartedShard(true);
  indexDoc(shard,"test","0");
  if (randomBoolean()) {
    flushShard(shard);
  }
  Store store=shard.store();
  store.incRef();
  closeShards(shard);
  cleanLuceneIndex(store.directory());
  store.decRef();
  IndexShard newShard=reinitShard(shard);
  DiscoveryNode localNode=new DiscoveryNode("foo",LocalTransportAddress.buildUnique(),emptyMap(),emptySet(),Version.CURRENT);
  ShardRouting routing=newShard.routingEntry();
  newShard.markAsRecovering("store",new RecoveryState(routing,localNode,null));
  try {
    newShard.recoverFromStore();
    fail("index not there!");
  }
 catch (  IndexShardRecoveryException ex) {
    assertTrue(ex.getMessage().contains("failed to fetch index version after copying it over"));
  }
  routing=ShardRoutingHelper.moveToUnassigned(routing,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,"because I say so"));
  routing=ShardRoutingHelper.initialize(routing,newShard.routingEntry().currentNodeId());
  assertTrue("it's already recovering, we should ignore new ones",newShard.ignoreRecoveryAttempt());
  try {
    newShard.markAsRecovering("store",new RecoveryState(routing,localNode,null));
    fail("we are already recovering, can't mark again");
  }
 catch (  IllegalIndexShardStateException e) {
  }
  newShard=reinitShard(newShard,ShardRoutingHelper.initWithSameId(routing,RecoverySource.StoreRecoverySource.EMPTY_STORE_INSTANCE));
  newShard.markAsRecovering("store",new RecoveryState(newShard.routingEntry(),localNode,null));
  assertTrue("recover even if there is nothing to recover",newShard.recoverFromStore());
  newShard.updateRoutingEntry(newShard.routingEntry().moveToStarted());
  assertDocCount(newShard,0);
  indexDoc(newShard,"test","0");
  newShard.refresh("test");
  assertDocCount(newShard,1);
  closeShards(newShard);
}
