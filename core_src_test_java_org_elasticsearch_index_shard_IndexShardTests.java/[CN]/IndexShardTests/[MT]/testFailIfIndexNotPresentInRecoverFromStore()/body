{
  createIndex("test");
  ensureGreen();
  IndicesService indicesService=getInstanceFromNode(IndicesService.class);
  IndexService test=indicesService.indexService("test");
  final IndexShard shard=test.shard(0);
  client().prepareIndex("test","test","0").setSource("{}").setRefresh(randomBoolean()).get();
  if (randomBoolean()) {
    client().admin().indices().prepareFlush().get();
  }
  final ShardRouting origRouting=shard.routingEntry();
  ShardRouting routing=new ShardRouting(origRouting);
  Store store=shard.store();
  store.incRef();
  test.removeShard(0,"b/c simon says so");
  Lucene.cleanLuceneIndex(store.directory());
  store.decRef();
  ShardRoutingHelper.reinit(routing);
  IndexShard newShard=test.createShard(0,routing);
  newShard.updateRoutingEntry(routing,false);
  try {
    newShard.recoverFromStore(routing);
    fail("index not there!");
  }
 catch (  IndexShardRecoveryException ex) {
    assertTrue(ex.getMessage().contains("failed to fetch index version after copying it over"));
  }
  ShardRoutingHelper.moveToUnassigned(routing,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,"because I say so"));
  ShardRoutingHelper.initialize(routing,origRouting.currentNodeId());
  assertFalse("it's already recovering",newShard.recoverFromStore(routing));
  test.removeShard(0,"I broken it");
  newShard=test.createShard(0,routing);
  newShard.updateRoutingEntry(routing,false);
  assertTrue("recover even if there is nothing to recover",newShard.recoverFromStore(routing));
  routing=new ShardRouting(routing);
  ShardRoutingHelper.moveToStarted(routing);
  newShard.updateRoutingEntry(routing,true);
  SearchResponse response=client().prepareSearch().get();
  assertHitCount(response,0);
  client().prepareIndex("test","test","0").setSource("{}").setRefresh(true).get();
  assertHitCount(client().prepareSearch().get(),1);
}
