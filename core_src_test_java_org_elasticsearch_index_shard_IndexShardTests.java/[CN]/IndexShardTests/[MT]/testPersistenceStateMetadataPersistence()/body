{
  createIndex("test");
  ensureGreen();
  IndicesService indicesService=getInstanceFromNode(IndicesService.class);
  NodeEnvironment env=getInstanceFromNode(NodeEnvironment.class);
  IndexService test=indicesService.indexService(resolveIndex("test"));
  IndexShard shard=test.getShardOrNull(0);
  ShardStateMetaData shardStateMetaData=load(logger,env.availableShardPaths(shard.shardId));
  assertEquals(getShardStateMetadata(shard),shardStateMetaData);
  ShardRouting routing=shard.shardRouting;
  shard.updateRoutingEntry(routing,true);
  shardStateMetaData=load(logger,env.availableShardPaths(shard.shardId));
  assertEquals(shardStateMetaData,getShardStateMetadata(shard));
  assertEquals(shardStateMetaData,new ShardStateMetaData(routing.primary(),shard.indexSettings().getUUID(),routing.allocationId()));
  ShardRouting updatedRouting=shard.shardRouting;
  updatedRouting=TestShardRouting.relocate(shard.shardRouting,"some node",42L);
  shard.updateRoutingEntry(updatedRouting,false);
  shardStateMetaData=load(logger,env.availableShardPaths(shard.shardId));
  assertFalse("shard state persisted despite of persist=false",shardStateMetaData.equals(getShardStateMetadata(shard)));
  assertEquals("shard state persisted despite of persist=false",shardStateMetaData,new ShardStateMetaData(routing.primary(),shard.indexSettings().getUUID(),routing.allocationId()));
  shard.updateRoutingEntry(routing,false);
  routing=updatedRouting;
  shard.updateRoutingEntry(routing,true);
  shardStateMetaData=load(logger,env.availableShardPaths(shard.shardId));
  assertEquals(shardStateMetaData,getShardStateMetadata(shard));
  assertEquals(shardStateMetaData,new ShardStateMetaData(routing.primary(),shard.indexSettings().getUUID(),routing.allocationId()));
}
