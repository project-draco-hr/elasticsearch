{
  final ShardId shardId=new ShardId("test","_na_",0);
  final IndexShard indexShard;
  if (randomBoolean()) {
    indexShard=newShard(TestShardRouting.newShardRouting(shardId,"local_node","other node",true,ShardRoutingState.INITIALIZING,AllocationId.newRelocation(AllocationId.newInitializing())));
  }
 else   if (randomBoolean()) {
    indexShard=newShard(shardId,false);
    ShardRouting replicaRouting=indexShard.routingEntry();
    indexShard.updatePrimaryTerm(indexShard.getPrimaryTerm() + 1);
    ShardRouting primaryRouting=TestShardRouting.newShardRouting(replicaRouting.shardId(),replicaRouting.currentNodeId(),null,true,ShardRoutingState.STARTED,replicaRouting.allocationId());
    indexShard.updateRoutingEntry(primaryRouting);
  }
 else {
    indexShard=newStartedShard(true);
  }
  final long primaryTerm=indexShard.getPrimaryTerm();
  assertEquals(0,indexShard.getActiveOperationsCount());
  if (indexShard.routingEntry().isRelocationTarget() == false) {
    try {
      indexShard.acquireReplicaOperationLock(primaryTerm,null,ThreadPool.Names.INDEX);
      fail("shard shouldn't accept operations as replica");
    }
 catch (    IllegalStateException ignored) {
    }
  }
  Releasable operation1=acquirePrimaryOperationLockBlockingly(indexShard);
  assertEquals(1,indexShard.getActiveOperationsCount());
  Releasable operation2=acquirePrimaryOperationLockBlockingly(indexShard);
  assertEquals(2,indexShard.getActiveOperationsCount());
  Releasables.close(operation1,operation2);
  assertEquals(0,indexShard.getActiveOperationsCount());
  closeShards(indexShard);
}
