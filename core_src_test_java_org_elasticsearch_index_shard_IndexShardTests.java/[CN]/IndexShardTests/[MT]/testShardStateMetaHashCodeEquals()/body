{
  ShardStateMetaData meta=new ShardStateMetaData(randomLong(),randomBoolean(),randomRealisticUnicodeOfCodepointLengthBetween(1,10));
  assertEquals(meta,new ShardStateMetaData(meta.version,meta.primary,meta.indexUUID));
  assertEquals(meta.hashCode(),new ShardStateMetaData(meta.version,meta.primary,meta.indexUUID).hashCode());
  assertFalse(meta.equals(new ShardStateMetaData(meta.version,!meta.primary,meta.indexUUID)));
  assertFalse(meta.equals(new ShardStateMetaData(meta.version + 1,meta.primary,meta.indexUUID)));
  assertFalse(meta.equals(new ShardStateMetaData(meta.version,!meta.primary,meta.indexUUID + "foo")));
  Set<Integer> hashCodes=new HashSet<>();
  for (int i=0; i < 30; i++) {
    meta=new ShardStateMetaData(randomLong(),randomBoolean(),randomRealisticUnicodeOfCodepointLengthBetween(1,10));
    hashCodes.add(meta.hashCode());
  }
  assertTrue("more than one unique hashcode expected but got: " + hashCodes.size(),hashCodes.size() > 1);
}
