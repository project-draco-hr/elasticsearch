{
  AllocationId allocationId=randomBoolean() ? null : randomAllocationId();
  ShardStateMetaData meta=new ShardStateMetaData(randomLong(),randomBoolean(),randomRealisticUnicodeOfCodepointLengthBetween(1,10),allocationId);
  assertEquals(meta,new ShardStateMetaData(meta.version,meta.primary,meta.indexUUID,meta.allocationId));
  assertEquals(meta.hashCode(),new ShardStateMetaData(meta.version,meta.primary,meta.indexUUID,meta.allocationId).hashCode());
  assertFalse(meta.equals(new ShardStateMetaData(meta.version,!meta.primary,meta.indexUUID,meta.allocationId)));
  assertFalse(meta.equals(new ShardStateMetaData(meta.version + 1,meta.primary,meta.indexUUID,meta.allocationId)));
  assertFalse(meta.equals(new ShardStateMetaData(meta.version,!meta.primary,meta.indexUUID + "foo",meta.allocationId)));
  assertFalse(meta.equals(new ShardStateMetaData(meta.version,!meta.primary,meta.indexUUID + "foo",randomAllocationId())));
  Set<Integer> hashCodes=new HashSet<>();
  for (int i=0; i < 30; i++) {
    allocationId=randomBoolean() ? null : randomAllocationId();
    meta=new ShardStateMetaData(randomLong(),randomBoolean(),randomRealisticUnicodeOfCodepointLengthBetween(1,10),allocationId);
    hashCodes.add(meta.hashCode());
  }
  assertTrue("more than one unique hashcode expected but got: " + hashCodes.size(),hashCodes.size() > 1);
}
