{
  createIndex("test");
  createIndex("test_target");
  ensureGreen();
  IndicesService indicesService=getInstanceFromNode(IndicesService.class);
  IndexService test=indicesService.indexService(resolveIndex("test"));
  IndexService test_target=indicesService.indexService(resolveIndex("test_target"));
  final IndexShard test_shard=test.getShardOrNull(0);
  client().prepareIndex("test","test","0").setSource("{}").setRefreshPolicy(randomBoolean() ? IMMEDIATE : NONE).get();
  client().prepareIndex("test_target","test","1").setSource("{}").setRefreshPolicy(IMMEDIATE).get();
  assertHitCount(client().prepareSearch("test_target").get(),1);
  assertSearchHits(client().prepareSearch("test_target").get(),"1");
  client().admin().indices().prepareFlush("test").get();
  final ShardRouting origRouting=test_target.getShardOrNull(0).routingEntry();
  ShardRouting routing=ShardRoutingHelper.reinit(origRouting);
  final Snapshot snapshot=new Snapshot("foo",new SnapshotId("bar",UUIDs.randomBase64UUID()));
  routing=ShardRoutingHelper.newWithRestoreSource(routing,new RestoreSource(snapshot,Version.CURRENT,"test"));
  test_target.removeShard(0,"just do it man!");
  final IndexShard test_target_shard=test_target.createShard(routing);
  Store sourceStore=test_shard.store();
  Store targetStore=test_target_shard.store();
  test_target_shard.updateRoutingEntry(routing);
  DiscoveryNode localNode=new DiscoveryNode("foo",LocalTransportAddress.buildUnique(),emptyMap(),emptySet(),Version.CURRENT);
  test_target_shard.markAsRecovering("store",new RecoveryState(routing.shardId(),routing.primary(),RecoveryState.Type.SNAPSHOT,routing.restoreSource(),localNode));
  assertTrue(test_target_shard.restoreFromRepository(new IndexShardRepository(){
    @Override public void snapshot(    SnapshotId snapshotId,    ShardId shardId,    IndexCommit snapshotIndexCommit,    IndexShardSnapshotStatus snapshotStatus){
    }
    @Override public void restore(    SnapshotId snapshotId,    Version version,    ShardId shardId,    ShardId snapshotShardId,    RecoveryState recoveryState){
      try {
        cleanLuceneIndex(targetStore.directory());
        for (        String file : sourceStore.directory().listAll()) {
          if (file.equals("write.lock") || file.startsWith("extra")) {
            continue;
          }
          targetStore.directory().copyFrom(sourceStore.directory(),file,file,IOContext.DEFAULT);
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
    @Override public IndexShardSnapshotStatus snapshotStatus(    SnapshotId snapshotId,    Version version,    ShardId shardId){
      return null;
    }
    @Override public void verify(    String verificationToken){
    }
  }
));
  test_target_shard.updateRoutingEntry(routing.moveToStarted());
  assertHitCount(client().prepareSearch("test_target").get(),1);
  assertSearchHits(client().prepareSearch("test_target").get(),"0");
}
