{
  final IndexShard source=newStartedShard(true);
  IndexShard target=newStartedShard(true);
  indexDoc(source,"test","0");
  if (randomBoolean()) {
    source.refresh("test");
  }
  indexDoc(target,"test","1");
  target.refresh("test");
  assertDocs(target,new Uid("test","1"));
  flushShard(source);
  final ShardRouting origRouting=target.routingEntry();
  ShardRouting routing=ShardRoutingHelper.reinitPrimary(origRouting);
  final Snapshot snapshot=new Snapshot("foo",new SnapshotId("bar",UUIDs.randomBase64UUID()));
  routing=ShardRoutingHelper.newWithRestoreSource(routing,new RecoverySource.SnapshotRecoverySource(snapshot,Version.CURRENT,"test"));
  target=reinitShard(target,routing);
  Store sourceStore=source.store();
  Store targetStore=target.store();
  DiscoveryNode localNode=new DiscoveryNode("foo",LocalTransportAddress.buildUnique(),emptyMap(),emptySet(),Version.CURRENT);
  target.markAsRecovering("store",new RecoveryState(routing,localNode,null));
  assertTrue(target.restoreFromRepository(new RestoreOnlyRepository("test"){
    @Override public void restoreShard(    IndexShard shard,    SnapshotId snapshotId,    Version version,    IndexId indexId,    ShardId snapshotShardId,    RecoveryState recoveryState){
      try {
        cleanLuceneIndex(targetStore.directory());
        for (        String file : sourceStore.directory().listAll()) {
          if (file.equals("write.lock") || file.startsWith("extra")) {
            continue;
          }
          targetStore.directory().copyFrom(sourceStore.directory(),file,file,IOContext.DEFAULT);
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
));
  target.updateRoutingEntry(routing.moveToStarted());
  assertDocs(target,new Uid("test","0"));
  closeShards(source,target);
}
