{
  final ShardId shardId=new ShardId("test","_na_",0);
  final IndexShard indexShard;
switch (randomInt(2)) {
case 0:
    indexShard=newStartedShard(false);
  break;
case 1:
{
  final boolean relocating=randomBoolean();
  ShardRouting routing=TestShardRouting.newShardRouting(shardId,"local_node",relocating ? "sourceNode" : null,relocating ? randomBoolean() : false,ShardRoutingState.INITIALIZING,relocating ? AllocationId.newRelocation(AllocationId.newInitializing()) : AllocationId.newInitializing());
  indexShard=newShard(routing);
  break;
}
case 2:
{
indexShard=newStartedShard(false);
ShardRouting routing=indexShard.routingEntry();
routing=TestShardRouting.newShardRouting(routing.shardId(),routing.currentNodeId(),"otherNode",false,ShardRoutingState.RELOCATING,AllocationId.newRelocation(routing.allocationId()));
indexShard.updateRoutingEntry(routing);
indexShard.relocated("test");
break;
}
default :
throw new UnsupportedOperationException("get your numbers straight");
}
final ShardRouting shardRouting=indexShard.routingEntry();
logger.info("shard routing to {}",shardRouting);
assertEquals(0,indexShard.getActiveOperationsCount());
if (shardRouting.primary() == false) {
try {
indexShard.acquirePrimaryOperationLock(null,ThreadPool.Names.INDEX);
fail("shard shouldn't accept primary ops");
}
 catch (IllegalStateException ignored) {
}
}
final long primaryTerm=indexShard.getPrimaryTerm();
Releasable operation1=acquireReplicaOperationLockBlockingly(indexShard,primaryTerm);
assertEquals(1,indexShard.getActiveOperationsCount());
Releasable operation2=acquireReplicaOperationLockBlockingly(indexShard,primaryTerm);
assertEquals(2,indexShard.getActiveOperationsCount());
try {
indexShard.acquireReplicaOperationLock(primaryTerm - 1,null,ThreadPool.Names.INDEX);
fail("you can not increment the operation counter with an older primary term");
}
 catch (IllegalArgumentException e) {
assertThat(e.getMessage(),containsString("operation term"));
assertThat(e.getMessage(),containsString("too old"));
}
acquireReplicaOperationLockBlockingly(indexShard,primaryTerm + 1 + randomInt(20)).close();
Releasables.close(operation1,operation2);
assertEquals(0,indexShard.getActiveOperationsCount());
closeShards(indexShard);
}
