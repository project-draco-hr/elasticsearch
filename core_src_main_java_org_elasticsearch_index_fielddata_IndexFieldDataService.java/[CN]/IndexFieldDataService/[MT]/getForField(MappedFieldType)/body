{
  final String fieldName=fieldType.name();
  final FieldDataType type=fieldType.fieldDataType();
  if (type == null) {
    throw new IllegalArgumentException("found no fielddata type for field [" + fieldName + "]");
  }
  final boolean docValues=fieldType.hasDocValues();
  IndexFieldData.Builder builder=null;
  String format=type.getFormat(indexSettings.getSettings());
  if (format != null && FieldDataType.DOC_VALUES_FORMAT_VALUE.equals(format) && !docValues) {
    logger.warn("field [" + fieldName + "] has no doc values, will use default field data format");
    format=null;
  }
  if (format != null) {
    builder=buildersByTypeAndFormat.get(Tuple.tuple(type.getType(),format));
    if (builder == null) {
      logger.warn("failed to find format [" + format + "] for field ["+ fieldName+ "], will use default");
    }
  }
  if (builder == null && docValues) {
    builder=docValuesBuildersByType.get(type.getType());
  }
  if (builder == null) {
    builder=buildersByType.get(type.getType());
  }
  if (builder == null) {
    throw new IllegalArgumentException("failed to find field data builder for field " + fieldName + ", and type "+ type.getType());
  }
  IndexFieldDataCache cache;
synchronized (this) {
    cache=fieldDataCaches.get(fieldName);
    if (cache == null) {
      String cacheType=type.getSettings().get("cache",indexSettings.getSettings().get(FIELDDATA_CACHE_KEY,FIELDDATA_CACHE_VALUE_NODE));
      if (FIELDDATA_CACHE_VALUE_NODE.equals(cacheType)) {
        cache=indicesFieldDataCache.buildIndexFieldDataCache(listener,index(),fieldName,type);
      }
 else       if ("none".equals(cacheType)) {
        cache=new IndexFieldDataCache.None();
      }
 else {
        throw new IllegalArgumentException("cache type not supported [" + cacheType + "] for field ["+ fieldName+ "]");
      }
      fieldDataCaches.put(fieldName,cache);
    }
  }
  return (IFD)builder.build(indexSettings,fieldType,cache,circuitBreakerService,mapperService);
}
