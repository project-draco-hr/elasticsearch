{
  final SequenceLock lock=this.lock;
  boolean locked=false;
  boolean equal;
  try {
    for (; ; ) {
      long seq=lock.awaitAvailability();
      Object[] items=array;
      int n=count;
      if (n > items.length || origin < 0)       equal=false;
 else {
        equal=true;
        int fence=bound < 0 || bound > n ? n : bound;
        Iterator<?> it=list.iterator();
        for (int i=origin; i < fence; ++i) {
          Object x=items[i];
          Object y;
          if ((!locked && lock.getSequence() != seq) || !it.hasNext() || (y=it.next()) == null ? x != null : !y.equals(x)) {
            equal=false;
            break;
          }
        }
        if (equal && it.hasNext())         equal=false;
      }
      if (lock.getSequence() == seq)       break;
      lock.lock();
      locked=true;
    }
  }
  finally {
    if (locked)     lock.unlock();
  }
  return equal;
}
