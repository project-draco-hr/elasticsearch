{
  List<? extends AtomicArray.Entry<? extends QuerySearchResultProvider>> results=resultsArr.asList();
  if (results.isEmpty()) {
    return EMPTY_DOCS;
  }
  if (optimizeSingleShard) {
    boolean canOptimize=false;
    QuerySearchResult result=null;
    int shardIndex=-1;
    if (results.size() == 1) {
      canOptimize=true;
      result=results.get(0).value.queryResult();
      shardIndex=results.get(0).index;
    }
 else {
      for (      AtomicArray.Entry<? extends QuerySearchResultProvider> entry : results) {
        if (entry.value.queryResult().topDocs().scoreDocs.length > 0) {
          if (result != null) {
            canOptimize=false;
            break;
          }
          canOptimize=true;
          result=entry.value.queryResult();
          shardIndex=entry.index;
        }
      }
    }
    if (canOptimize) {
      ScoreDoc[] scoreDocs=result.topDocs().scoreDocs;
      if (scoreDocs.length < result.from()) {
        return EMPTY_DOCS;
      }
      int resultDocsSize=result.size();
      if ((scoreDocs.length - result.from()) < resultDocsSize) {
        resultDocsSize=scoreDocs.length - result.from();
      }
      int offset=result.from();
      if (result.topDocs() instanceof TopFieldDocs) {
        ScoreDoc[] docs=new ScoreDoc[resultDocsSize];
        for (int i=0; i < resultDocsSize; i++) {
          ScoreDoc scoreDoc=scoreDocs[offset + i];
          scoreDoc.shardIndex=shardIndex;
          docs[i]=scoreDoc;
        }
        return docs;
      }
 else {
        ScoreDoc[] docs=new ScoreDoc[resultDocsSize];
        for (int i=0; i < resultDocsSize; i++) {
          ScoreDoc scoreDoc=scoreDocs[offset + i];
          scoreDoc.shardIndex=shardIndex;
          docs[i]=scoreDoc;
        }
        return docs;
      }
    }
  }
  @SuppressWarnings("unchecked") AtomicArray.Entry<? extends QuerySearchResultProvider>[] sortedResults=results.toArray(new AtomicArray.Entry[results.size()]);
  Arrays.sort(sortedResults,QUERY_RESULT_ORDERING);
  QuerySearchResultProvider firstResult=sortedResults[0].value;
  int totalNumDocs=0;
  int queueSize=firstResult.queryResult().from() + firstResult.queryResult().size();
  if (firstResult.includeFetch()) {
    queueSize*=sortedResults.length;
  }
  PriorityQueue queue;
  if (firstResult.queryResult().topDocs() instanceof TopFieldDocs) {
    TopFieldDocs fieldDocs=(TopFieldDocs)firstResult.queryResult().topDocs();
    for (int i=0; i < fieldDocs.fields.length; i++) {
      boolean allValuesAreNull=true;
      boolean resolvedField=false;
      for (      AtomicArray.Entry<? extends QuerySearchResultProvider> entry : sortedResults) {
        for (        ScoreDoc doc : entry.value.queryResult().topDocs().scoreDocs) {
          FieldDoc fDoc=(FieldDoc)doc;
          if (fDoc.fields[i] != null) {
            allValuesAreNull=false;
            if (fDoc.fields[i] instanceof String) {
              fieldDocs.fields[i]=new SortField(fieldDocs.fields[i].getField(),SortField.Type.STRING,fieldDocs.fields[i].getReverse());
            }
            resolvedField=true;
            break;
          }
        }
        if (resolvedField) {
          break;
        }
      }
      if (!resolvedField && allValuesAreNull && fieldDocs.fields[i].getField() != null) {
        fieldDocs.fields[i]=new SortField(fieldDocs.fields[i].getField(),SortField.Type.STRING,fieldDocs.fields[i].getReverse());
      }
    }
    queue=new ShardFieldDocSortedHitQueue(fieldDocs.fields,queueSize);
    for (    AtomicArray.Entry<? extends QuerySearchResultProvider> entry : sortedResults) {
      QuerySearchResult result=entry.value.queryResult();
      ScoreDoc[] scoreDocs=result.topDocs().scoreDocs;
      totalNumDocs+=scoreDocs.length;
      for (      ScoreDoc doc : scoreDocs) {
        doc.shardIndex=entry.index;
        if (queue.insertWithOverflow(doc) == doc) {
          break;
        }
      }
    }
  }
 else {
    queue=new ScoreDocQueue(queueSize);
    for (    AtomicArray.Entry<? extends QuerySearchResultProvider> entry : sortedResults) {
      QuerySearchResult result=entry.value.queryResult();
      ScoreDoc[] scoreDocs=result.topDocs().scoreDocs;
      totalNumDocs+=scoreDocs.length;
      for (      ScoreDoc doc : scoreDocs) {
        doc.shardIndex=entry.index;
        if (queue.insertWithOverflow(doc) == doc) {
          break;
        }
      }
    }
  }
  int resultDocsSize=firstResult.queryResult().size();
  if (firstResult.includeFetch()) {
    resultDocsSize*=sortedResults.length;
  }
  if (totalNumDocs < queueSize) {
    resultDocsSize=totalNumDocs - firstResult.queryResult().from();
  }
  if (resultDocsSize <= 0) {
    return EMPTY_DOCS;
  }
  ScoreDoc[] shardDocs=new ScoreDoc[resultDocsSize];
  for (int i=resultDocsSize - 1; i >= 0; i--) {
    shardDocs[i]=(ScoreDoc)queue.pop();
  }
  return shardDocs;
}
