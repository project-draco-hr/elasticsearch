{
  List<? extends AtomicArray.Entry<? extends QuerySearchResultProvider>> results=resultsArr.asList();
  if (results.isEmpty()) {
    return EMPTY_DOCS;
  }
  if (optimizeSingleShard) {
    boolean canOptimize=false;
    QuerySearchResult result=null;
    int shardIndex=-1;
    if (results.size() == 1) {
      canOptimize=true;
      result=results.get(0).value.queryResult();
      shardIndex=results.get(0).index;
    }
 else {
      for (      AtomicArray.Entry<? extends QuerySearchResultProvider> entry : results) {
        if (entry.value.queryResult().topDocs().scoreDocs.length > 0) {
          if (result != null) {
            canOptimize=false;
            break;
          }
          canOptimize=true;
          result=entry.value.queryResult();
          shardIndex=entry.index;
        }
      }
    }
    if (canOptimize) {
      int offset=result.from();
      if (ignoreFrom) {
        offset=0;
      }
      ScoreDoc[] scoreDocs=result.topDocs().scoreDocs;
      if (scoreDocs.length == 0 || scoreDocs.length < offset) {
        return EMPTY_DOCS;
      }
      int resultDocsSize=result.size();
      if ((scoreDocs.length - offset) < resultDocsSize) {
        resultDocsSize=scoreDocs.length - offset;
      }
      ScoreDoc[] docs=new ScoreDoc[resultDocsSize];
      for (int i=0; i < resultDocsSize; i++) {
        ScoreDoc scoreDoc=scoreDocs[offset + i];
        scoreDoc.shardIndex=shardIndex;
        docs[i]=scoreDoc;
      }
      return docs;
    }
  }
  @SuppressWarnings("unchecked") AtomicArray.Entry<? extends QuerySearchResultProvider>[] sortedResults=results.toArray(new AtomicArray.Entry[results.size()]);
  Arrays.sort(sortedResults,QUERY_RESULT_ORDERING);
  QuerySearchResultProvider firstResult=sortedResults[0].value;
  final Sort sort;
  if (firstResult.queryResult().topDocs() instanceof TopFieldDocs) {
    TopFieldDocs firstTopDocs=(TopFieldDocs)firstResult.queryResult().topDocs();
    sort=new Sort(firstTopDocs.fields);
  }
 else {
    sort=null;
  }
  int topN=firstResult.queryResult().size();
  TopDocs[] shardTopDocs=new TopDocs[resultsArr.length()];
  if (firstResult.includeFetch()) {
    topN*=sortedResults.length;
  }
  for (  AtomicArray.Entry<? extends QuerySearchResultProvider> sortedResult : sortedResults) {
    TopDocs topDocs=sortedResult.value.queryResult().topDocs();
    shardTopDocs[sortedResult.index]=topDocs;
  }
  int from=firstResult.queryResult().from();
  if (ignoreFrom) {
    from=0;
  }
  for (int i=0; i < shardTopDocs.length; i++) {
    if (shardTopDocs[i] == null) {
      shardTopDocs[i]=Lucene.EMPTY_TOP_DOCS;
    }
  }
  TopDocs mergedTopDocs=TopDocs.merge(sort,from,topN,shardTopDocs);
  return mergedTopDocs.scoreDocs;
}
