{
  createIndexMapped("test","type","test","string","date","date","num","double","geo","geo_point");
  ensureYellow();
  int numDocs=200;
  List<IndexRequestBuilder> indexBuilders=new ArrayList<IndexRequestBuilder>();
  for (int i=0; i < numDocs; i++) {
    double lat=100 + (int)(10.0 * (float)(i) / (float)(numDocs));
    double lon=100;
    int day=(int)(29.0 * (float)(i) / (float)(numDocs)) + 1;
    String dayString=day < 10 ? "0" + Integer.toString(day) : Integer.toString(day);
    String date="2013-05-" + dayString;
    indexBuilders.add(new IndexRequestBuilder(client()).setType("type").setId(Integer.toString(i)).setIndex("test").setSource(jsonBuilder().startObject().field("test","value").field("date",date).field("num",i).startObject("geo").field("lat",lat).field("lon",lon).endObject().endObject()));
  }
  IndexRequestBuilder[] builders=indexBuilders.toArray(new IndexRequestBuilder[indexBuilders.size()]);
  indexRandom("test",false,builders);
  refresh();
  DecayFunctionBuilder gfb1=new LinearDecayFunctionBuilder();
  DecayFunctionBuilder gfb2=new LinearDecayFunctionBuilder();
  DecayFunctionBuilder gfb3=new LinearDecayFunctionBuilder();
  gfb1.setParameters("date","2013-05-30","+15d");
  gfb2.addGeoParams("geo",110,100,"1000km");
  gfb3.setParameters("num",Integer.toString(numDocs),Integer.toString(numDocs / 2));
  ActionFuture<SearchResponse> response=client().search(searchRequest().searchType(SearchType.QUERY_THEN_FETCH).source(searchSource().explain(true).size(numDocs).query(functionScoreQuery(termQuery("test","value")).add(new MatchAllFilterBuilder(),gfb1).add(new MatchAllFilterBuilder(),gfb2).add(new MatchAllFilterBuilder(),gfb3).scoreMode("multiply"))));
  SearchResponse sr=response.actionGet();
  ElasticsearchAssertions.assertNoFailures(sr);
  SearchHits sh=sr.getHits();
  assertThat(sh.hits().length,equalTo(numDocs));
  double[] scores=new double[numDocs];
  for (int i=0; i < numDocs; i++) {
    scores[Integer.parseInt(sh.getAt(i).getId())]=sh.getAt(i).getScore();
  }
  System.out.println(scores);
  for (int i=0; i < numDocs - 1; i++) {
    System.out.println("Doc " + i + " has score "+ scores[i + 1]);
    assertThat(scores[i],lessThan(scores[i + 1]));
  }
}
