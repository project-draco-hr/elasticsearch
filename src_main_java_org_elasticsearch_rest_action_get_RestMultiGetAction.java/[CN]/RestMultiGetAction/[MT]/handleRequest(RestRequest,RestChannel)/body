{
  MultiGetRequest multiGetRequest=new MultiGetRequest();
  multiGetRequest.listenerThreaded(false);
  multiGetRequest.refresh(request.paramAsBoolean("refresh",multiGetRequest.refresh()));
  multiGetRequest.preference(request.param("preference"));
  multiGetRequest.realtime(request.paramAsBooleanOptional("realtime",null));
  String[] sFields=null;
  String sField=request.param("fields");
  if (sField != null) {
    sFields=Strings.splitStringByCommaToArray(sField);
  }
  FetchSourceContext defaultFetchSource=FetchSourceContext.parseFromRestRequest(request);
  try {
    multiGetRequest.add(request.param("index"),request.param("type"),sFields,defaultFetchSource,request.content());
  }
 catch (  Exception e) {
    try {
      XContentBuilder builder=restContentBuilder(request);
      channel.sendResponse(new XContentRestResponse(request,BAD_REQUEST,builder.startObject().field("error",e.getMessage()).endObject()));
    }
 catch (    IOException e1) {
      logger.error("Failed to send failure response",e1);
    }
    return;
  }
  client.multiGet(multiGetRequest,new ActionListener<MultiGetResponse>(){
    @Override public void onResponse(    MultiGetResponse response){
      try {
        XContentBuilder builder=restContentBuilder(request);
        response.toXContent(builder,request);
        channel.sendResponse(new XContentRestResponse(request,OK,builder));
      }
 catch (      Throwable e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
