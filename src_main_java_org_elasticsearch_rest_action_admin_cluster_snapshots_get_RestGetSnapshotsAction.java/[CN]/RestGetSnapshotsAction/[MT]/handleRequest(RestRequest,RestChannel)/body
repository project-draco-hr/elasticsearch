{
  String repository=request.param("repository");
  String[] snapshots=request.paramAsStringArray("snapshot",Strings.EMPTY_ARRAY);
  if (snapshots.length == 1 && "_all".equalsIgnoreCase(snapshots[0])) {
    snapshots=Strings.EMPTY_ARRAY;
  }
  GetSnapshotsRequest getSnapshotsRequest=getSnapshotsRequest(repository).snapshots(snapshots);
  getSnapshotsRequest.masterNodeTimeout(request.paramAsTime("master_timeout",getSnapshotsRequest.masterNodeTimeout()));
  client.admin().cluster().getSnapshots(getSnapshotsRequest,new ActionListener<GetSnapshotsResponse>(){
    @Override public void onResponse(    GetSnapshotsResponse response){
      try {
        XContentBuilder builder=RestXContentBuilder.restContentBuilder(request);
        builder.startObject();
        response.toXContent(builder,request);
        builder.endObject();
        channel.sendResponse(new XContentRestResponse(request,OK,builder));
      }
 catch (      IOException e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
