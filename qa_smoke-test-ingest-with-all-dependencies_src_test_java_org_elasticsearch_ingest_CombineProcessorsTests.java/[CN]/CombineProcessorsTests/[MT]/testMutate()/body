{
  Map<String,Object> config=new HashMap<>();
  config.put("field","friends.0.id");
  RemoveProcessor processor1=new RemoveProcessor.Factory(TestTemplateService.instance()).create(config);
  config=new HashMap<>();
  config.put("field","tags");
  config.put("value","new_value");
  AppendProcessor processor2=new AppendProcessor.Factory(TestTemplateService.instance()).create(config);
  config=new HashMap<>();
  config.put("field","address");
  config.put("separator",",");
  SplitProcessor processor3=new SplitProcessor.Factory().create(config);
  config=new HashMap<>();
  config.put("field","address.1");
  TrimProcessor processor4=new TrimProcessor.Factory().create(config);
  config=new HashMap<>();
  config.put("field","company");
  LowercaseProcessor processor5=new LowercaseProcessor.Factory().create(config);
  config=new HashMap<>();
  config.put("field","gender");
  UppercaseProcessor processor6=new UppercaseProcessor.Factory().create(config);
  config=new HashMap<>();
  config.put("field","eyeColor");
  config.put("to","eye_color");
  RenameProcessor processor7=new RenameProcessor.Factory().create(config);
  Pipeline pipeline=new Pipeline("_id","_description",new CompoundProcessor(processor1,processor2,processor3,processor4,processor5,processor6,processor7));
  Map<String,Object> source=XContentHelper.createParser(new BytesArray(PERSON)).map();
  IngestDocument document=new IngestDocument("_index","_type","_id",null,null,null,null,source);
  pipeline.execute(document);
  assertThat(((List<Map<String,Object>>)document.getSourceAndMetadata().get("friends")).get(0).get("id"),nullValue());
  assertThat(((List<Map<String,Object>>)document.getSourceAndMetadata().get("friends")).get(1).get("id"),equalTo(1));
  assertThat(((List<Map<String,Object>>)document.getSourceAndMetadata().get("friends")).get(2).get("id"),equalTo(2));
  assertThat(document.getFieldValue("tags.7",String.class),equalTo("new_value"));
  List<String> addressDetails=document.getFieldValue("address",List.class);
  assertThat(addressDetails.size(),equalTo(4));
  assertThat(addressDetails.get(0),equalTo("713 Bartlett Place"));
  assertThat(addressDetails.get(1),equalTo("Accoville"));
  assertThat(addressDetails.get(2),equalTo(" Puerto Rico"));
  assertThat(addressDetails.get(3),equalTo(" 9221"));
  assertThat(document.getSourceAndMetadata().get("company"),equalTo("atgen"));
  assertThat(document.getSourceAndMetadata().get("gender"),equalTo("MALE"));
  assertThat(document.getSourceAndMetadata().get("eye_color"),equalTo("brown"));
}
