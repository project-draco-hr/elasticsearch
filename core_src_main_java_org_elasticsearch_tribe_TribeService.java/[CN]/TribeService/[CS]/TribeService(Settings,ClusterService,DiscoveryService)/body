{
  super(settings);
  this.clusterService=clusterService;
  Map<String,Settings> nodesSettings=new HashMap<>(settings.getGroups("tribe",true));
  nodesSettings.remove("blocks");
  nodesSettings.remove("on_conflict");
  for (  Map.Entry<String,Settings> entry : nodesSettings.entrySet()) {
    Settings.Builder sb=Settings.builder().put(entry.getValue());
    sb.put("node.name",settings.get("node.name") + "/" + entry.getKey());
    sb.put(Environment.PATH_HOME_SETTING.getKey(),Environment.PATH_HOME_SETTING.get(settings));
    if (Environment.PATH_CONF_SETTING.exists(settings)) {
      sb.put(Environment.PATH_CONF_SETTING.getKey(),Environment.PATH_CONF_SETTING.get(settings));
    }
    sb.put(TRIBE_NAME_SETTING.getKey(),entry.getKey());
    if (sb.get("http.enabled") == null) {
      sb.put("http.enabled",false);
    }
    sb.put(Node.NODE_CLIENT_SETTING.getKey(),true);
    nodes.add(new TribeClientNode(sb.build()));
  }
  String[] blockIndicesWrite=Strings.EMPTY_ARRAY;
  String[] blockIndicesRead=Strings.EMPTY_ARRAY;
  String[] blockIndicesMetadata=Strings.EMPTY_ARRAY;
  if (!nodes.isEmpty()) {
    clusterService.removeInitialStateBlock(discoveryService.getNoMasterBlock());
    clusterService.removeInitialStateBlock(GatewayService.STATE_NOT_RECOVERED_BLOCK);
    if (BLOCKS_WRITE_SETTING.get(settings)) {
      clusterService.addInitialStateBlock(TRIBE_WRITE_BLOCK);
    }
    blockIndicesWrite=BLOCKS_WRITE_INDICES_SETTING.get(settings).toArray(Strings.EMPTY_ARRAY);
    if (BLOCKS_METADATA_SETTING.get(settings)) {
      clusterService.addInitialStateBlock(TRIBE_METADATA_BLOCK);
    }
    blockIndicesMetadata=BLOCKS_METADATA_INDICES_SETTING.get(settings).toArray(Strings.EMPTY_ARRAY);
    blockIndicesRead=BLOCKS_READ_INDICES_SETTING.get(settings).toArray(Strings.EMPTY_ARRAY);
    for (    Node node : nodes) {
      node.injector().getInstance(ClusterService.class).add(new TribeClusterStateListener(node));
    }
  }
  this.blockIndicesMetadata=blockIndicesMetadata;
  this.blockIndicesRead=blockIndicesRead;
  this.blockIndicesWrite=blockIndicesWrite;
  this.onConflict=ON_CONFLICT_SETTING.get(settings);
}
