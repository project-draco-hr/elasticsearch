{
  boolean clusterStateChanged=false;
  ClusterState tribeState=task.state();
  DiscoveryNodes.Builder nodes=DiscoveryNodes.builder(currentState.nodes());
  for (  DiscoveryNode discoNode : currentState.nodes()) {
    String markedTribeName=discoNode.getAttributes().get(TRIBE_NAME_SETTING.getKey());
    if (markedTribeName != null && markedTribeName.equals(tribeName)) {
      if (tribeState.nodes().get(discoNode.getId()) == null) {
        clusterStateChanged=true;
        logger.info("[{}] removing node [{}]",tribeName,discoNode);
        nodes.remove(discoNode.getId());
      }
    }
  }
  for (  DiscoveryNode tribe : tribeState.nodes()) {
    if (currentState.nodes().get(tribe.getId()) == null) {
      Map<String,String> tribeAttr=new HashMap<>(tribe.getAttributes());
      tribeAttr.put(TRIBE_NAME_SETTING.getKey(),tribeName);
      DiscoveryNode discoNode=new DiscoveryNode(tribe.getName(),tribe.getId(),tribe.getHostName(),tribe.getHostAddress(),tribe.getAddress(),unmodifiableMap(tribeAttr),tribe.getRoles(),tribe.version());
      clusterStateChanged=true;
      logger.info("[{}] adding node [{}]",tribeName,discoNode);
      nodes.put(discoNode);
    }
  }
  ClusterBlocks.Builder blocks=ClusterBlocks.builder().blocks(currentState.blocks());
  MetaData.Builder metaData=MetaData.builder(currentState.metaData());
  RoutingTable.Builder routingTable=RoutingTable.builder(currentState.routingTable());
  for (  IndexMetaData index : currentState.metaData()) {
    String markedTribeName=TRIBE_NAME_SETTING.get(index.getSettings());
    if (markedTribeName != null && markedTribeName.equals(tribeName)) {
      IndexMetaData tribeIndex=tribeState.metaData().index(index.getIndex());
      clusterStateChanged=true;
      if (tribeIndex == null || tribeIndex.getState() == IndexMetaData.State.CLOSE) {
        logger.info("[{}] removing index {}",tribeName,index.getIndex());
        removeIndex(blocks,metaData,routingTable,index);
      }
 else {
        routingTable.add(tribeState.routingTable().index(index.getIndex()));
        Settings tribeSettings=Settings.builder().put(tribeIndex.getSettings()).put(TRIBE_NAME_SETTING.getKey(),tribeName).build();
        metaData.put(IndexMetaData.builder(tribeIndex).settings(tribeSettings));
      }
    }
  }
  for (  IndexMetaData tribeIndex : tribeState.metaData()) {
    IndexRoutingTable table=tribeState.routingTable().index(tribeIndex.getIndex());
    if (table == null) {
      continue;
    }
    final String indexName=tribeIndex.getIndex().getName();
    final IndexMetaData indexMetaData=currentState.metaData().index(indexName);
    if (indexMetaData == null) {
      if (!droppedIndices.contains(indexName)) {
        clusterStateChanged=true;
        logger.info("[{}] adding index {}",tribeName,tribeIndex.getIndex());
        addNewIndex(tribeState,blocks,metaData,routingTable,tribeIndex);
      }
    }
 else {
      String existingFromTribe=TRIBE_NAME_SETTING.get(indexMetaData.getSettings());
      if (!tribeName.equals(existingFromTribe)) {
        if (ON_CONFLICT_ANY.equals(onConflict)) {
        }
 else         if (ON_CONFLICT_DROP.equals(onConflict)) {
          clusterStateChanged=true;
          logger.info("[{}] dropping index {} due to conflict with [{}]",tribeName,tribeIndex.getIndex(),existingFromTribe);
          removeIndex(blocks,metaData,routingTable,tribeIndex);
          droppedIndices.add(indexName);
        }
 else         if (onConflict.startsWith(ON_CONFLICT_PREFER)) {
          String preferredTribeName=onConflict.substring(ON_CONFLICT_PREFER.length());
          if (tribeName.equals(preferredTribeName)) {
            clusterStateChanged=true;
            logger.info("[{}] adding index {}, preferred over [{}]",tribeName,tribeIndex.getIndex(),existingFromTribe);
            removeIndex(blocks,metaData,routingTable,tribeIndex);
            addNewIndex(tribeState,blocks,metaData,routingTable,tribeIndex);
          }
        }
      }
    }
  }
  if (!clusterStateChanged) {
    return currentState;
  }
 else {
    return ClusterState.builder(currentState).incrementVersion().blocks(blocks).nodes(nodes).metaData(metaData).routingTable(routingTable.build()).build();
  }
}
