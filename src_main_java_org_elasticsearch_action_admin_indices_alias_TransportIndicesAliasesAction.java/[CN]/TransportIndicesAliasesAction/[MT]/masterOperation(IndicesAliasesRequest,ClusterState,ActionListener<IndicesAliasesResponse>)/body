{
  List<AliasActions> actions=request.aliasActions();
  List<AliasAction> finalActions=new ArrayList<>();
  boolean hasOnlyDeletesButNoneCanBeDone=true;
  Set<String> aliases=new HashSet<>();
  for (  AliasActions action : actions) {
    String[] concreteIndices=state.metaData().concreteIndices(request.indicesOptions(),action.indices());
    for (    String alias : action.aliases()) {
      aliases.add(alias);
    }
    for (    String index : concreteIndices) {
      for (      String alias : action.concreteAliases(state.metaData(),index)) {
        AliasAction finalAction=new AliasAction(action.aliasAction());
        finalAction.index(index);
        finalAction.alias(alias);
        finalActions.add(finalAction);
        hasOnlyDeletesButNoneCanBeDone=false;
      }
    }
  }
  if (hasOnlyDeletesButNoneCanBeDone && actions.size() != 0) {
    throw new AliasesMissingException(aliases.toArray(new String[aliases.size()]));
  }
  request.aliasActions().clear();
  IndicesAliasesClusterStateUpdateRequest updateRequest=new IndicesAliasesClusterStateUpdateRequest().ackTimeout(request.timeout()).masterNodeTimeout(request.masterNodeTimeout()).actions(finalActions.toArray(new AliasAction[finalActions.size()]));
  indexAliasesService.indicesAliases(updateRequest,new ClusterStateUpdateListener(){
    @Override public void onResponse(    ClusterStateUpdateResponse response){
      listener.onResponse(new IndicesAliasesResponse(response.isAcknowledged()));
    }
    @Override public void onFailure(    Throwable t){
      logger.debug("failed to perform aliases",t);
      listener.onFailure(t);
    }
  }
);
}
