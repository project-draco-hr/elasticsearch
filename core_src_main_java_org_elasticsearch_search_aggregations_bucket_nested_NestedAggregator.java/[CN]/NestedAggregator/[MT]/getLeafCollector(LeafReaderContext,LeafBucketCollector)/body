{
  IndexReaderContext topLevelContext=ReaderUtil.getTopLevelContext(ctx);
  IndexSearcher searcher=new IndexSearcher(topLevelContext);
  searcher.setQueryCache(null);
  Weight weight=searcher.createNormalizedWeight(childFilter,false);
  Scorer childDocsScorer=weight.scorer(ctx);
  final BitSet parentDocs=parentFilter.getBitSet(ctx);
  final DocIdSetIterator childDocs=childDocsScorer != null ? childDocsScorer.iterator() : null;
  return new LeafBucketCollectorBase(sub,null){
    @Override public void collect(    int parentDoc,    long bucket) throws IOException {
      if (parentDoc == 0 || parentDocs == null || childDocs == null) {
        return;
      }
      final int prevParentDoc=parentDocs.prevSetBit(parentDoc - 1);
      int childDocId=childDocs.docID();
      if (childDocId <= prevParentDoc) {
        childDocId=childDocs.advance(prevParentDoc + 1);
      }
      for (; childDocId < parentDoc; childDocId=childDocs.nextDoc()) {
        collectBucket(sub,childDocId,bucket);
      }
    }
  }
;
}
