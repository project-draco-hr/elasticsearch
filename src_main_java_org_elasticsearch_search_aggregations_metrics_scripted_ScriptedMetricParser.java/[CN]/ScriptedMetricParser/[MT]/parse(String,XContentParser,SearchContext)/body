{
  String initScript=null;
  String mapScript=null;
  String combineScript=null;
  String reduceScript=null;
  String scriptLang=null;
  ScriptType scriptType=ScriptType.INLINE;
  Map<String,Object> params=null;
  Map<String,Object> reduceParams=null;
  XContentParser.Token token;
  String currentFieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if (PARAMS_FIELD.match(currentFieldName)) {
        params=parser.map();
      }
 else       if (REDUCE_PARAMS_FIELD.match(currentFieldName)) {
        reduceParams=parser.map();
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else     if (token.isValue()) {
      if (INIT_SCRIPT_FIELD.match(currentFieldName)) {
        initScript=parser.text();
      }
 else       if (MAP_SCRIPT_FIELD.match(currentFieldName)) {
        mapScript=parser.text();
      }
 else       if (COMBINE_SCRIPT_FIELD.match(currentFieldName)) {
        combineScript=parser.text();
      }
 else       if (REDUCE_SCRIPT_FIELD.match(currentFieldName)) {
        reduceScript=parser.text();
      }
 else       if (LANG_FIELD.match(currentFieldName)) {
        scriptLang=parser.text();
      }
 else       if (SCRIPT_TYPE_FIELD.match(currentFieldName)) {
        scriptType=ScriptType.valueOf(parser.text().toUpperCase(Locale.getDefault()));
      }
 else {
        throw new SearchParseException(context,"Unknown key for a " + token + " in ["+ aggregationName+ "]: ["+ currentFieldName+ "].");
      }
    }
 else {
      throw new SearchParseException(context,"Unexpected token " + token + " in ["+ aggregationName+ "].");
    }
  }
  if (mapScript == null) {
    throw new SearchParseException(context,"map_script field is required in [" + aggregationName + "].");
  }
  return new ScriptedMetricAggregator.Factory(aggregationName,scriptLang,scriptType,initScript,mapScript,combineScript,reduceScript,params,reduceParams);
}
