{
  Map<String,String> esMetadata=new HashMap<>();
  int numFields=randomIntBetween(1,IngestDocument.MetaData.values().length);
  for (int i=0; i < numFields; i++) {
    esMetadata.put(randomFrom(IngestDocument.MetaData.values()).getFieldName(),randomAsciiOfLengthBetween(5,10));
  }
  Map<String,String> ingestMetadata=new HashMap<>();
  numFields=randomIntBetween(1,5);
  for (int i=0; i < numFields; i++) {
    ingestMetadata.put(randomAsciiOfLengthBetween(5,10),randomAsciiOfLengthBetween(5,10));
  }
  Map<String,Object> document=RandomDocumentPicks.randomDocument(random());
  IngestDocument ingestDocument=new IngestDocument(esMetadata,document,ingestMetadata);
  boolean changed=false;
  Map<String,String> otherEsMetadata;
  if (randomBoolean()) {
    otherEsMetadata=new HashMap<>();
    numFields=randomIntBetween(1,IngestDocument.MetaData.values().length);
    for (int i=0; i < numFields; i++) {
      otherEsMetadata.put(randomFrom(IngestDocument.MetaData.values()).getFieldName(),randomAsciiOfLengthBetween(5,10));
    }
    changed=true;
  }
 else {
    otherEsMetadata=Collections.unmodifiableMap(esMetadata);
  }
  Map<String,String> otherIngestMetadata;
  if (randomBoolean()) {
    otherIngestMetadata=new HashMap<>();
    numFields=randomIntBetween(1,5);
    for (int i=0; i < numFields; i++) {
      otherIngestMetadata.put(randomAsciiOfLengthBetween(5,10),randomAsciiOfLengthBetween(5,10));
    }
    changed=true;
  }
 else {
    otherIngestMetadata=Collections.unmodifiableMap(ingestMetadata);
  }
  Map<String,Object> otherDocument;
  if (randomBoolean()) {
    otherDocument=RandomDocumentPicks.randomDocument(random());
    changed=true;
  }
 else {
    otherDocument=Collections.unmodifiableMap(document);
  }
  IngestDocument otherIngestDocument=new IngestDocument(otherEsMetadata,otherDocument,otherIngestMetadata);
  if (changed) {
    assertThat(ingestDocument,not(equalTo(otherIngestDocument)));
    assertThat(otherIngestDocument,not(equalTo(ingestDocument)));
  }
 else {
    assertThat(ingestDocument,equalTo(otherIngestDocument));
    assertThat(otherIngestDocument,equalTo(ingestDocument));
    assertThat(ingestDocument.hashCode(),equalTo(otherIngestDocument.hashCode()));
    IngestDocument thirdIngestDocument=new IngestDocument(Collections.unmodifiableMap(esMetadata),Collections.unmodifiableMap(document),Collections.unmodifiableMap(ingestMetadata));
    assertThat(thirdIngestDocument,equalTo(ingestDocument));
    assertThat(ingestDocument,equalTo(thirdIngestDocument));
    assertThat(ingestDocument.hashCode(),equalTo(thirdIngestDocument.hashCode()));
  }
}
