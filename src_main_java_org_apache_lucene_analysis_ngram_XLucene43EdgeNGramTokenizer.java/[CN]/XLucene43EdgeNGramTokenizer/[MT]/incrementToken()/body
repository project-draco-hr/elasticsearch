{
  clearAttributes();
  if (!started) {
    started=true;
    gramSize=minGram;
    final int limit=side == Side.FRONT ? maxGram : 1024;
    char[] chars=new char[Math.min(1024,limit)];
    charsRead=0;
    boolean exhausted=false;
    while (charsRead < limit) {
      final int inc=input.read(chars,charsRead,chars.length - charsRead);
      if (inc == -1) {
        exhausted=true;
        break;
      }
      charsRead+=inc;
      if (charsRead == chars.length && charsRead < limit) {
        chars=ArrayUtil.grow(chars);
      }
    }
    inStr=new String(chars,0,charsRead);
    inStr=inStr.trim();
    if (!exhausted) {
      char[] throwaway=new char[1024];
      while (true) {
        final int inc=input.read(throwaway,0,throwaway.length);
        if (inc == -1) {
          break;
        }
        charsRead+=inc;
      }
    }
    inLen=inStr.length();
    if (inLen == 0) {
      return false;
    }
    posIncrAtt.setPositionIncrement(1);
  }
 else {
    posIncrAtt.setPositionIncrement(0);
  }
  if (gramSize > inLen) {
    return false;
  }
  if (gramSize > maxGram || gramSize > inLen) {
    return false;
  }
  int start=side == Side.FRONT ? 0 : inLen - gramSize;
  int end=start + gramSize;
  termAtt.setEmpty().append(inStr,start,end);
  offsetAtt.setOffset(correctOffset(start),correctOffset(end));
  gramSize++;
  return true;
}
