{
  double realWordErrorLikelihood=suggestion.realworldErrorLikelyhood();
  List<PhraseSuggestionContext.DirectCandidateGenerator> generators=suggestion.generators();
  CandidateGenerator[] gens=new CandidateGenerator[generators.size()];
  for (int i=0; i < gens.length; i++) {
    PhraseSuggestionContext.DirectCandidateGenerator generator=generators.get(i);
    DirectSpellChecker directSpellChecker=SuggestUtils.getDirectSpellChecker(generator);
    gens[i]=new DirectCandidateGenerator(directSpellChecker,generator.field(),generator.suggestMode(),indexReader,realWordErrorLikelihood,generator.size(),generator.preFilter(),generator.postFilter());
  }
  final NoisyChannelSpellChecker checker=new NoisyChannelSpellChecker(realWordErrorLikelihood,suggestion.getRequireUnigram(),suggestion.getTokenLimit());
  final BytesRef separator=suggestion.separator();
  TokenStream stream=checker.tokenStream(suggestion.getAnalyzer(),suggestion.getText(),spare,suggestion.getField());
  WordScorer wordScorer=suggestion.model().newScorer(indexReader,suggestion.getField(),realWordErrorLikelihood,separator);
  Correction[] corrections=checker.getCorrections(stream,new MultiCandidateGeneratorWrapper(suggestion.getShardSize(),gens),suggestion.maxErrors(),suggestion.getShardSize(),indexReader,wordScorer,separator,suggestion.confidence(),suggestion.gramSize());
  UnicodeUtil.UTF8toUTF16(suggestion.getText(),spare);
  Suggestion.Entry<Option> resultEntry=new Suggestion.Entry<Option>(new StringText(spare.toString()),0,spare.length);
  BytesRef byteSpare=new BytesRef();
  for (  Correction correction : corrections) {
    UnicodeUtil.UTF8toUTF16(correction.join(SEPARATOR,byteSpare),spare);
    Text phrase=new StringText(spare.toString());
    resultEntry.addOption(new Suggestion.Entry.Option(phrase,(float)(correction.score)));
  }
  final Suggestion<Entry<Option>> response=new Suggestion<Entry<Option>>(name,suggestion.getSize());
  response.addTerm(resultEntry);
  return response;
}
