{
  final int iters=scaledRandomIntBetween(100,300);
  for (int i=0; i < iters; i++) {
    final String id=randomUnicodeOfLengthBetween(3,20);
    final String nodeName=randomUnicodeOfLengthBetween(3,20);
    final String hostName=randomUnicodeOfLengthBetween(3,20);
    final String hostAddress=randomUnicodeOfLengthBetween(3,20);
    final TransportAddress transportAddress=new LocalTransportAddress(randomUnicodeOfLengthBetween(3,20));
    final Map<String,String> attributes=new HashMap<>();
    for (int a=randomInt(10); a > 0; a--) {
      attributes.put(randomUnicodeOfLengthBetween(3,20),randomUnicodeOfLengthBetween(3,20));
    }
    final Version version=randomVersion(random());
    DiscoveryNode discoveryNode=new DiscoveryNode(nodeName,id,hostName,hostAddress,transportAddress,attributes,version);
    BytesStreamOutput bytesOutput=new BytesStreamOutput();
    ThrowableObjectOutputStream too=new ThrowableObjectOutputStream(bytesOutput);
    too.writeObject(discoveryNode);
    too.close();
    ThrowableObjectInputStream from=new ThrowableObjectInputStream(StreamInput.wrap(bytesOutput.bytes()));
    DiscoveryNode readDiscoveryNode=(DiscoveryNode)from.readObject();
    from.close();
    assertThat(readDiscoveryNode,Matchers.equalTo(discoveryNode));
    assertThat(readDiscoveryNode.id(),Matchers.equalTo(id));
    assertThat(readDiscoveryNode.name(),Matchers.equalTo(nodeName));
    assertThat(readDiscoveryNode.getHostName(),Matchers.equalTo(hostName));
    assertThat(readDiscoveryNode.getHostAddress(),Matchers.equalTo(hostAddress));
    assertThat(readDiscoveryNode.address(),Matchers.equalTo(transportAddress));
    assertThat(readDiscoveryNode.attributes(),Matchers.equalTo(attributes));
    assertThat(readDiscoveryNode.version(),Matchers.equalTo(version));
  }
}
