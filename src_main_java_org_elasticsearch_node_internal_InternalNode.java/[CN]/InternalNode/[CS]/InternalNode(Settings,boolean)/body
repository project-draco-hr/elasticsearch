{
  Tuple<Settings,Environment> tuple=InternalSettingsPerparer.prepareSettings(pSettings,loadConfigSettings);
  ESLogger logger=Loggers.getLogger(Node.class,tuple.v1().get("name"));
  logger.info("{{}}[{}]: initializing ...",Version.CURRENT,JvmInfo.jvmInfo().pid());
  this.pluginsService=new PluginsService(tuple.v1(),tuple.v2());
  this.settings=pluginsService.updatedSettings();
  this.environment=tuple.v2();
  CompressorFactory.configure(settings);
  NodeEnvironment nodeEnvironment=new NodeEnvironment(this.settings,this.environment);
  ModulesBuilder modules=new ModulesBuilder();
  modules.add(new PluginsModule(settings,pluginsService));
  modules.add(new SettingsModule(settings));
  modules.add(new NodeModule(this));
  modules.add(new NetworkModule());
  modules.add(new NodeCacheModule(settings));
  modules.add(new ScriptModule(settings));
  modules.add(new JmxModule(settings));
  modules.add(new EnvironmentModule(environment));
  modules.add(new NodeEnvironmentModule(nodeEnvironment));
  modules.add(new ClusterNameModule(settings));
  modules.add(new ThreadPoolModule(settings));
  modules.add(new DiscoveryModule(settings));
  modules.add(new ClusterModule(settings));
  modules.add(new RestModule(settings));
  modules.add(new TransportModule(settings));
  if (settings.getAsBoolean("http.enabled",true)) {
    modules.add(new HttpServerModule(settings));
  }
  modules.add(new RiversModule(settings));
  modules.add(new IndicesModule(settings));
  modules.add(new SearchModule());
  modules.add(new ActionModule(false));
  modules.add(new MonitorModule(settings));
  modules.add(new GatewayModule(settings));
  modules.add(new NodeClientModule());
  modules.add(new BulkUdpModule());
  injector=modules.createInjector();
  client=injector.getInstance(Client.class);
  logger.info("{{}}[{}]: initialized",Version.CURRENT,JvmInfo.jvmInfo().pid());
}
