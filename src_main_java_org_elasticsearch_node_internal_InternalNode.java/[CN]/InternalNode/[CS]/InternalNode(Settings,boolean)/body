{
  Tuple<Settings,Environment> tuple=InternalSettingsPreparer.prepareSettings(pSettings,loadConfigSettings);
  tuple=new Tuple<>(TribeService.processSettings(tuple.v1()),tuple.v2());
  Version version=pSettings.getAsVersion("tests.mock.version",Version.CURRENT);
  ESLogger logger=Loggers.getLogger(Node.class,tuple.v1().get("name"));
  logger.info("version[{}], pid[{}], build[{}/{}]",version,JvmInfo.jvmInfo().pid(),Build.CURRENT.hashShort(),Build.CURRENT.timestamp());
  logger.info("initializing ...");
  if (logger.isDebugEnabled()) {
    Environment env=tuple.v2();
    logger.debug("using home [{}], config [{}], data [{}], logs [{}], work [{}], plugins [{}]",env.homeFile(),env.configFile(),Arrays.toString(env.dataFiles()),env.logsFile(),env.workFile(),env.pluginsFile());
  }
  this.pluginsService=new PluginsService(tuple.v1(),tuple.v2());
  this.settings=pluginsService.updatedSettings();
  this.environment=new Environment(this.settings());
  CompressorFactory.configure(settings);
  NodeEnvironment nodeEnvironment=new NodeEnvironment(this.settings,this.environment);
  ModulesBuilder modules=new ModulesBuilder();
  modules.add(new Version.Module(version));
  modules.add(new CacheRecyclerModule(settings));
  modules.add(new PageCacheRecyclerModule(settings));
  modules.add(new BigArraysModule(settings));
  modules.add(new PluginsModule(settings,pluginsService));
  modules.add(new SettingsModule(settings));
  modules.add(new NodeModule(this));
  modules.add(new NetworkModule());
  modules.add(new ScriptModule(settings));
  modules.add(new EnvironmentModule(environment));
  modules.add(new NodeEnvironmentModule(nodeEnvironment));
  modules.add(new ClusterNameModule(settings));
  modules.add(new ThreadPoolModule(settings));
  modules.add(new DiscoveryModule(settings));
  modules.add(new ClusterModule(settings));
  modules.add(new RestModule(settings));
  modules.add(new TransportModule(settings));
  if (settings.getAsBoolean("http.enabled",true)) {
    modules.add(new HttpServerModule(settings));
  }
  modules.add(new RiversModule(settings));
  modules.add(new IndicesModule(settings));
  modules.add(new SearchModule());
  modules.add(new ActionModule(false));
  modules.add(new MonitorModule(settings));
  modules.add(new GatewayModule(settings));
  modules.add(new NodeClientModule());
  modules.add(new BulkUdpModule());
  modules.add(new ShapeModule());
  modules.add(new PercolatorModule());
  modules.add(new ResourceWatcherModule());
  modules.add(new RepositoriesModule());
  modules.add(new TribeModule());
  modules.add(new BenchmarkModule(settings));
  injector=modules.createInjector();
  client=injector.getInstance(Client.class);
  logger.info("initialized");
}
