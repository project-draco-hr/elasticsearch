{
  if (lifecycle.started()) {
    stop();
  }
  if (!lifecycle.moveToClosed()) {
    return;
  }
  ESLogger logger=Loggers.getLogger(Node.class,settings.get("name"));
  logger.info("closing ...");
  StopWatch stopWatch=new StopWatch("node_close");
  stopWatch.start("tribe");
  injector.getInstance(TribeService.class).close();
  stopWatch.stop().start("http");
  if (settings.getAsBoolean("http.enabled",true)) {
    injector.getInstance(HttpServer.class).close();
  }
  stopWatch.stop().start("rivers");
  injector.getInstance(RiversManager.class).close();
  stopWatch.stop().start("snapshot_service");
  injector.getInstance(SnapshotsService.class).close();
  stopWatch.stop().start("client");
  Releasables.close(injector.getInstance(Client.class));
  stopWatch.stop().start("indices_cluster");
  injector.getInstance(IndicesClusterStateService.class).close();
  stopWatch.stop().start("indices");
  injector.getInstance(IndicesFilterCache.class).close();
  injector.getInstance(IndicesFieldDataCache.class).close();
  injector.getInstance(IndexingMemoryController.class).close();
  injector.getInstance(IndicesTTLService.class).close();
  injector.getInstance(IndicesService.class).close();
  injector.getInstance(IndicesStore.class).close();
  stopWatch.stop().start("routing");
  injector.getInstance(RoutingService.class).close();
  stopWatch.stop().start("cluster");
  injector.getInstance(ClusterService.class).close();
  stopWatch.stop().start("discovery");
  injector.getInstance(DiscoveryService.class).close();
  stopWatch.stop().start("monitor");
  injector.getInstance(MonitorService.class).close();
  stopWatch.stop().start("gateway");
  injector.getInstance(GatewayService.class).close();
  stopWatch.stop().start("search");
  injector.getInstance(SearchService.class).close();
  stopWatch.stop().start("rest");
  injector.getInstance(RestController.class).close();
  stopWatch.stop().start("transport");
  injector.getInstance(TransportService.class).close();
  stopWatch.stop().start("percolator_service");
  injector.getInstance(PercolatorService.class).close();
  for (  Class<? extends LifecycleComponent> plugin : pluginsService.services()) {
    stopWatch.stop().start("plugin(" + plugin.getName() + ")");
    injector.getInstance(plugin).close();
  }
  stopWatch.stop().start("script");
  injector.getInstance(ScriptService.class).close();
  stopWatch.stop().start("thread_pool");
  injector.getInstance(ThreadPool.class).shutdown();
  try {
    injector.getInstance(ThreadPool.class).awaitTermination(10,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
  }
  stopWatch.stop().start("thread_pool_force_shutdown");
  try {
    injector.getInstance(ThreadPool.class).shutdownNow();
  }
 catch (  Exception e) {
  }
  stopWatch.stop();
  if (logger.isTraceEnabled()) {
    logger.trace("Close times for each service:\n{}",stopWatch.prettyPrint());
  }
  injector.getInstance(NodeEnvironment.class).close();
  injector.getInstance(PageCacheRecycler.class).close();
  CachedStreams.clear();
  logger.info("closed");
}
