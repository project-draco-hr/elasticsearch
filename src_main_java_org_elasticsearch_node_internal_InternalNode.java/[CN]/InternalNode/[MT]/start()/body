{
  if (!lifecycle.moveToStarted()) {
    return this;
  }
  ESLogger logger=Loggers.getLogger(Node.class,settings.get("name"));
  logger.info("starting ...");
  injector.getInstance(Discovery.class).setAllocationService(injector.getInstance(AllocationService.class));
  for (  Class<? extends LifecycleComponent> plugin : pluginsService.services()) {
    injector.getInstance(plugin).start();
  }
  injector.getInstance(MappingUpdatedAction.class).start();
  injector.getInstance(IndicesService.class).start();
  injector.getInstance(IndexingMemoryController.class).start();
  injector.getInstance(IndicesClusterStateService.class).start();
  injector.getInstance(IndicesTTLService.class).start();
  injector.getInstance(RiversManager.class).start();
  injector.getInstance(SnapshotsService.class).start();
  injector.getInstance(TransportService.class).start();
  injector.getInstance(ClusterService.class).start();
  injector.getInstance(RoutingService.class).start();
  injector.getInstance(SearchService.class).start();
  injector.getInstance(MonitorService.class).start();
  injector.getInstance(RestController.class).start();
  DiscoveryService discoService=injector.getInstance(DiscoveryService.class).start();
  discoService.waitForInitialState();
  injector.getInstance(GatewayService.class).start();
  if (settings.getAsBoolean("http.enabled",true)) {
    injector.getInstance(HttpServer.class).start();
  }
  injector.getInstance(ResourceWatcherService.class).start();
  injector.getInstance(TribeService.class).start();
  logger.info("started");
  return this;
}
