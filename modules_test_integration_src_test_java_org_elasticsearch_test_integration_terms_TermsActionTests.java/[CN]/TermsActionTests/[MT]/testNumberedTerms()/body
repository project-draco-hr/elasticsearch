{
  IndexStatus indexStatus=client.admin().indices().status(indicesStatus("test")).actionGet().index("test");
  logger.info("Index ...");
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",1).put("fl",2.0f).map())).actionGet();
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",1).put("fl",2.0f).map())).actionGet();
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",1).put("fl",2.0f).map())).actionGet();
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",1).put("fl",2.0f).map())).actionGet();
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",2).put("fl",3.0f).map())).actionGet();
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",2).put("fl",3.0f).map())).actionGet();
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",2).put("fl",3.0f).map())).actionGet();
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",3).put("fl",4.0f).map())).actionGet();
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",11).put("fl",12.0f).map())).actionGet();
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",11).put("fl",12.0f).map())).actionGet();
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",12).put("fl",13.0f).map())).actionGet();
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",12).put("fl",13.0f).map())).actionGet();
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",12).put("fl",13.0f).map())).actionGet();
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",13).put("fl",14.0f).map())).actionGet();
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",13).put("fl",14.0f).map())).actionGet();
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",21).put("fl",20.0f).map())).actionGet();
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",22).put("fl",21.0f).map())).actionGet();
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",22).put("fl",21.0f).map())).actionGet();
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",22).put("fl",21.0f).map())).actionGet();
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",22).put("fl",21.0f).map())).actionGet();
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",22).put("fl",21.0f).map())).actionGet();
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",22).put("fl",21.0f).map())).actionGet();
  client.index(indexRequest("test").type("type1").source(newMapBuilder().put("int",23).put("fl",22.0f).map())).actionGet();
  logger.info("Refresh");
  client.admin().indices().refresh(refreshRequest()).actionGet();
  logger.info("Verify int with sort on term");
  TermsResponse termsResponse=client.terms(termsRequest("test").fields("int").sortType(TermsRequest.SortType.TERM)).actionGet();
  assertThat(termsResponse.successfulShards(),equalTo(indexStatus.shards().size()));
  assertThat(termsResponse.failedShards(),equalTo(0));
  assertThat(termsResponse.numDocs(),equalTo(23l));
  assertThat(termsResponse.maxDoc(),equalTo(23l));
  assertThat(termsResponse.deletedDocs(),equalTo(0l));
  assertThat(termsResponse.fieldsAsMap().isEmpty(),equalTo(false));
  assertThat(termsResponse.field("int").docFreq(1),equalTo(4));
  assertThat(termsResponse.field("int").docFreq(2),equalTo(3));
  assertThat(termsResponse.field("int").termsFreqs().length,equalTo(9));
  assertThat(termsResponse.field("int").termsFreqs()[0].termAsString(),equalTo("1"));
  assertThat(termsResponse.field("int").termsFreqs()[0].docFreq(),equalTo(4));
  assertThat(termsResponse.field("int").termsFreqs()[1].termAsString(),equalTo("2"));
  assertThat(termsResponse.field("int").termsFreqs()[1].docFreq(),equalTo(3));
  assertThat(termsResponse.field("int").termsFreqs()[2].termAsString(),equalTo("3"));
  assertThat(termsResponse.field("int").termsFreqs()[2].docFreq(),equalTo(1));
  assertThat(termsResponse.field("int").termsFreqs()[3].termAsString(),equalTo("11"));
  assertThat(termsResponse.field("int").termsFreqs()[3].docFreq(),equalTo(2));
  assertThat(termsResponse.field("int").termsFreqs()[4].termAsString(),equalTo("12"));
  assertThat(termsResponse.field("int").termsFreqs()[4].docFreq(),equalTo(3));
  assertThat(termsResponse.field("int").termsFreqs()[5].termAsString(),equalTo("13"));
  assertThat(termsResponse.field("int").termsFreqs()[5].docFreq(),equalTo(2));
  assertThat(termsResponse.field("int").termsFreqs()[6].termAsString(),equalTo("21"));
  assertThat(termsResponse.field("int").termsFreqs()[6].docFreq(),equalTo(1));
  logger.info("Verify int with sort on freq");
  termsResponse=client.terms(termsRequest("test").fields("int").sortType(TermsRequest.SortType.FREQ)).actionGet();
  assertThat(termsResponse.successfulShards(),equalTo(indexStatus.shards().size()));
  assertThat(termsResponse.failedShards(),equalTo(0));
  assertThat(termsResponse.numDocs(),equalTo(23l));
  assertThat(termsResponse.maxDoc(),equalTo(23l));
  assertThat(termsResponse.deletedDocs(),equalTo(0l));
  assertThat(termsResponse.fieldsAsMap().isEmpty(),equalTo(false));
  assertThat(termsResponse.field("int").docFreq(1),equalTo(4));
  assertThat(termsResponse.field("int").docFreq(2),equalTo(3));
  assertThat(termsResponse.field("int").termsFreqs().length,equalTo(9));
  assertThat(termsResponse.field("int").termsFreqs()[0].termAsString(),equalTo("22"));
  assertThat(termsResponse.field("int").termsFreqs()[0].docFreq(),equalTo(6));
  assertThat(termsResponse.field("int").termsFreqs()[1].termAsString(),equalTo("1"));
  assertThat(termsResponse.field("int").termsFreqs()[1].docFreq(),equalTo(4));
  logger.info("Verify int with sort on freq and from 2 to 11");
  termsResponse=client.terms(termsRequest("test").fields("int").sortType(TermsRequest.SortType.FREQ).from(2).to(11)).actionGet();
  assertThat(termsResponse.successfulShards(),equalTo(indexStatus.shards().size()));
  assertThat(termsResponse.failedShards(),equalTo(0));
  assertThat(termsResponse.numDocs(),equalTo(23l));
  assertThat(termsResponse.maxDoc(),equalTo(23l));
  assertThat(termsResponse.deletedDocs(),equalTo(0l));
  assertThat(termsResponse.fieldsAsMap().isEmpty(),equalTo(false));
  assertThat(termsResponse.field("int").docFreq(1),equalTo(-1));
  assertThat(termsResponse.field("int").docFreq(2),equalTo(3));
  assertThat(termsResponse.field("int").termsFreqs().length,equalTo(3));
  assertThat(termsResponse.field("int").termsFreqs()[0].termAsString(),equalTo("2"));
  assertThat(termsResponse.field("int").termsFreqs()[0].docFreq(),equalTo(3));
  assertThat(termsResponse.field("int").termsFreqs()[1].termAsString(),equalTo("11"));
  assertThat(termsResponse.field("int").termsFreqs()[1].docFreq(),equalTo(2));
  assertThat(termsResponse.field("int").termsFreqs()[2].termAsString(),equalTo("3"));
  assertThat(termsResponse.field("int").termsFreqs()[2].docFreq(),equalTo(1));
  logger.info("Verify int with sort on term and from 2 to 11");
  termsResponse=client.terms(termsRequest("test").fields("int").sortType(TermsRequest.SortType.TERM).from(2).to(11)).actionGet();
  assertThat(termsResponse.successfulShards(),equalTo(indexStatus.shards().size()));
  assertThat(termsResponse.failedShards(),equalTo(0));
  assertThat(termsResponse.numDocs(),equalTo(23l));
  assertThat(termsResponse.maxDoc(),equalTo(23l));
  assertThat(termsResponse.deletedDocs(),equalTo(0l));
  assertThat(termsResponse.fieldsAsMap().isEmpty(),equalTo(false));
  assertThat(termsResponse.field("int").docFreq(1),equalTo(-1));
  assertThat(termsResponse.field("int").docFreq(2),equalTo(3));
  assertThat(termsResponse.field("int").termsFreqs().length,equalTo(3));
  assertThat(termsResponse.field("int").termsFreqs()[0].termAsString(),equalTo("2"));
  assertThat(termsResponse.field("int").termsFreqs()[0].docFreq(),equalTo(3));
  assertThat(termsResponse.field("int").termsFreqs()[1].termAsString(),equalTo("3"));
  assertThat(termsResponse.field("int").termsFreqs()[1].docFreq(),equalTo(1));
  assertThat(termsResponse.field("int").termsFreqs()[2].termAsString(),equalTo("11"));
  assertThat(termsResponse.field("int").termsFreqs()[2].docFreq(),equalTo(2));
  logger.info("Verify int with sort on term and from 2 to 11, fromInclusive=false");
  termsResponse=client.terms(termsRequest("test").fields("int").sortType(TermsRequest.SortType.TERM).from(2).to(11).fromInclusive(false)).actionGet();
  assertThat(termsResponse.successfulShards(),equalTo(indexStatus.shards().size()));
  assertThat(termsResponse.failedShards(),equalTo(0));
  assertThat(termsResponse.numDocs(),equalTo(23l));
  assertThat(termsResponse.maxDoc(),equalTo(23l));
  assertThat(termsResponse.deletedDocs(),equalTo(0l));
  assertThat(termsResponse.fieldsAsMap().isEmpty(),equalTo(false));
  assertThat(termsResponse.field("int").docFreq(1),equalTo(-1));
  assertThat(termsResponse.field("int").docFreq(3),equalTo(1));
  assertThat(termsResponse.field("int").termsFreqs().length,equalTo(2));
  assertThat(termsResponse.field("int").termsFreqs()[0].termAsString(),equalTo("3"));
  assertThat(termsResponse.field("int").termsFreqs()[0].docFreq(),equalTo(1));
  assertThat(termsResponse.field("int").termsFreqs()[1].termAsString(),equalTo("11"));
  assertThat(termsResponse.field("int").termsFreqs()[1].docFreq(),equalTo(2));
  logger.info("Verify int with sort on term and from 2 to 11, toInclusive=false");
  termsResponse=client.terms(termsRequest("test").fields("int").sortType(TermsRequest.SortType.TERM).from(2).to(11).toInclusive(false)).actionGet();
  assertThat(termsResponse.successfulShards(),equalTo(indexStatus.shards().size()));
  assertThat(termsResponse.failedShards(),equalTo(0));
  assertThat(termsResponse.numDocs(),equalTo(23l));
  assertThat(termsResponse.maxDoc(),equalTo(23l));
  assertThat(termsResponse.deletedDocs(),equalTo(0l));
  assertThat(termsResponse.fieldsAsMap().isEmpty(),equalTo(false));
  assertThat(termsResponse.field("int").docFreq(1),equalTo(-1));
  assertThat(termsResponse.field("int").docFreq(2),equalTo(3));
  assertThat(termsResponse.field("int").termsFreqs().length,equalTo(2));
  assertThat(termsResponse.field("int").termsFreqs()[0].termAsString(),equalTo("2"));
  assertThat(termsResponse.field("int").termsFreqs()[0].docFreq(),equalTo(3));
  assertThat(termsResponse.field("int").termsFreqs()[1].termAsString(),equalTo("3"));
  assertThat(termsResponse.field("int").termsFreqs()[1].docFreq(),equalTo(1));
}
