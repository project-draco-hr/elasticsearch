{
  final double nM1=results.docCount - 1D;
  for (  String fieldName : results.means.keySet()) {
    final double var=results.variances.get(fieldName);
    results.skewness.put(fieldName,Math.sqrt(results.docCount) * results.skewness.get(fieldName) / Math.pow(var,1.5D));
    results.kurtosis.put(fieldName,(double)results.docCount * results.kurtosis.get(fieldName) / (var * var));
    results.variances.put(fieldName,results.variances.get(fieldName) / nM1);
  }
  double cor;
  for (  Map.Entry<String,HashMap<String,Double>> row : results.covariances.entrySet()) {
    final String rowName=row.getKey();
    final HashMap<String,Double> covRow=row.getValue();
    final HashMap<String,Double> corRow=new HashMap<>();
    for (    Map.Entry<String,Double> col : covRow.entrySet()) {
      final String colName=col.getKey();
      covRow.put(colName,covRow.get(colName) / nM1);
      if (results.variances.get(rowName) == 0d || results.variances.get(colName) == 0d) {
        cor=Double.NaN;
      }
 else {
        final double corDen=Math.sqrt(results.variances.get(rowName)) * Math.sqrt(results.variances.get(colName));
        cor=covRow.get(colName) / corDen;
      }
      corRow.put(colName,cor);
    }
    results.covariances.put(rowName,covRow);
    correlation.put(rowName,corRow);
  }
}
