{
  logger.info("Start Testing failed search with wrong query");
  prepareCreate("test",1,settingsBuilder().put("index.number_of_shards",3).put("index.number_of_replicas",2).put("routing.hash.type","simple")).execute().actionGet();
  client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForYellowStatus().execute().actionGet();
  for (int i=0; i < 100; i++) {
    index(client(),Integer.toString(i),"test",i);
  }
  RefreshResponse refreshResponse=client().admin().indices().refresh(refreshRequest("test")).actionGet();
  assertThat(refreshResponse.getTotalShards(),equalTo(9));
  assertThat(refreshResponse.getSuccessfulShards(),equalTo(3));
  assertThat(refreshResponse.getFailedShards(),equalTo(0));
  for (int i=0; i < 5; i++) {
    try {
      SearchResponse searchResponse=client().search(searchRequest("test").source("{ xxx }".getBytes(Charsets.UTF_8))).actionGet();
      assertThat(searchResponse.getTotalShards(),equalTo(3));
      assertThat(searchResponse.getSuccessfulShards(),equalTo(0));
      assertThat(searchResponse.getFailedShards(),equalTo(3));
      fail("search should fail");
    }
 catch (    ElasticsearchException e) {
      assertThat(e.unwrapCause(),instanceOf(SearchPhaseExecutionException.class));
    }
  }
  allowNodes("test",2);
  assertThat(client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForNodes(">=2").execute().actionGet().isTimedOut(),equalTo(false));
  logger.info("Running Cluster Health");
  ClusterHealthResponse clusterHealth=client().admin().cluster().health(clusterHealthRequest("test").waitForYellowStatus().waitForRelocatingShards(0).waitForActiveShards(6)).actionGet();
  logger.info("Done Cluster Health, status " + clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.YELLOW));
  assertThat(clusterHealth.getActiveShards(),equalTo(6));
  refreshResponse=client().admin().indices().refresh(refreshRequest("test")).actionGet();
  assertThat(refreshResponse.getTotalShards(),equalTo(9));
  assertThat(refreshResponse.getSuccessfulShards(),equalTo(6));
  assertThat(refreshResponse.getFailedShards(),equalTo(0));
  for (int i=0; i < 5; i++) {
    try {
      SearchResponse searchResponse=client().search(searchRequest("test").source("{ xxx }".getBytes(Charsets.UTF_8))).actionGet();
      assertThat(searchResponse.getTotalShards(),equalTo(3));
      assertThat(searchResponse.getSuccessfulShards(),equalTo(0));
      assertThat(searchResponse.getFailedShards(),equalTo(3));
      fail("search should fail");
    }
 catch (    ElasticsearchException e) {
      assertThat(e.unwrapCause(),instanceOf(SearchPhaseExecutionException.class));
    }
  }
  logger.info("Done Testing failed search");
}
