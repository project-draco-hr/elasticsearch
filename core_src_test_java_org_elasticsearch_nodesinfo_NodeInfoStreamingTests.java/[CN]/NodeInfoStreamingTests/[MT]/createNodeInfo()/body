{
  Build build=Build.CURRENT;
  DiscoveryNode node=new DiscoveryNode("test_node",LocalTransportAddress.buildUnique(),emptyMap(),emptySet(),VersionUtils.randomVersion(random()));
  Map<String,String> serviceAttributes=new HashMap<>();
  serviceAttributes.put("test","attribute");
  Settings settings=Settings.builder().put("test","setting").build();
  OsInfo osInfo=DummyOsInfo.INSTANCE;
  ProcessInfo process=new ProcessInfo(randomInt(),randomBoolean(),randomPositiveLong());
  JvmInfo jvm=JvmInfo.jvmInfo();
  List<ThreadPool.Info> threadPoolInfos=new ArrayList<>();
  threadPoolInfos.add(new ThreadPool.Info("test_threadpool",ThreadPool.ThreadPoolType.FIXED,5));
  ThreadPoolInfo threadPoolInfo=new ThreadPoolInfo(threadPoolInfos);
  Map<String,BoundTransportAddress> profileAddresses=new HashMap<>();
  BoundTransportAddress dummyBoundTransportAddress=new BoundTransportAddress(new TransportAddress[]{LocalTransportAddress.buildUnique()},LocalTransportAddress.buildUnique());
  profileAddresses.put("test_address",dummyBoundTransportAddress);
  TransportInfo transport=new TransportInfo(dummyBoundTransportAddress,profileAddresses);
  HttpInfo htttpInfo=new HttpInfo(dummyBoundTransportAddress,randomLong());
  PluginsAndModules plugins=new PluginsAndModules(Collections.singletonList(DummyPluginInfo.INSTANCE),Collections.singletonList(DummyPluginInfo.INSTANCE));
  IngestInfo ingestInfo=new IngestInfo(Collections.emptyList());
  ByteSizeValue indexingBuffer;
  if (random().nextBoolean()) {
    indexingBuffer=null;
  }
 else {
    indexingBuffer=new ByteSizeValue(random().nextLong() & ((1L << 40) - 1));
  }
  return new NodeInfo(VersionUtils.randomVersion(random()),build,node,settings,osInfo,process,jvm,threadPoolInfo,transport,htttpInfo,plugins,ingestInfo,indexingBuffer);
}
