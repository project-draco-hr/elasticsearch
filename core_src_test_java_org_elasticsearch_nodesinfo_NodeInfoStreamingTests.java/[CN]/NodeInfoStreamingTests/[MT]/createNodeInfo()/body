{
  Build build=Build.CURRENT;
  DiscoveryNode node=new DiscoveryNode("test_node",LocalTransportAddress.buildUnique(),emptyMap(),emptySet(),VersionUtils.randomVersion(random()));
  Settings settings=randomBoolean() ? null : Settings.builder().put("test","setting").build();
  OsInfo osInfo=null;
  if (randomBoolean()) {
    int availableProcessors=randomIntBetween(1,64);
    int allocatedProcessors=randomIntBetween(1,availableProcessors);
    long refreshInterval=randomBoolean() ? -1 : randomPositiveLong();
    String name=randomAsciiOfLengthBetween(3,10);
    String arch=randomAsciiOfLengthBetween(3,10);
    String version=randomAsciiOfLengthBetween(3,10);
    osInfo=new OsInfo(refreshInterval,availableProcessors,allocatedProcessors,name,arch,version);
  }
  ProcessInfo process=randomBoolean() ? null : new ProcessInfo(randomInt(),randomBoolean(),randomPositiveLong());
  JvmInfo jvm=randomBoolean() ? null : JvmInfo.jvmInfo();
  ThreadPoolInfo threadPoolInfo=null;
  if (randomBoolean()) {
    int numThreadPools=randomIntBetween(1,10);
    List<ThreadPool.Info> threadPoolInfos=new ArrayList<>(numThreadPools);
    for (int i=0; i < numThreadPools; i++) {
      threadPoolInfos.add(new ThreadPool.Info(randomAsciiOfLengthBetween(3,10),randomFrom(ThreadPool.ThreadPoolType.values()),randomInt()));
    }
    threadPoolInfo=new ThreadPoolInfo(threadPoolInfos);
  }
  Map<String,BoundTransportAddress> profileAddresses=new HashMap<>();
  BoundTransportAddress dummyBoundTransportAddress=new BoundTransportAddress(new TransportAddress[]{LocalTransportAddress.buildUnique()},LocalTransportAddress.buildUnique());
  profileAddresses.put("test_address",dummyBoundTransportAddress);
  TransportInfo transport=randomBoolean() ? null : new TransportInfo(dummyBoundTransportAddress,profileAddresses);
  HttpInfo httpInfo=randomBoolean() ? null : new HttpInfo(dummyBoundTransportAddress,randomLong());
  PluginsAndModules pluginsAndModules=null;
  if (randomBoolean()) {
    int numPlugins=randomIntBetween(0,5);
    List<PluginInfo> plugins=new ArrayList<>();
    for (int i=0; i < numPlugins; i++) {
      plugins.add(new PluginInfo(randomAsciiOfLengthBetween(3,10),randomAsciiOfLengthBetween(3,10),randomAsciiOfLengthBetween(3,10),randomAsciiOfLengthBetween(3,10)));
    }
    int numModules=randomIntBetween(0,5);
    List<PluginInfo> modules=new ArrayList<>();
    for (int i=0; i < numModules; i++) {
      modules.add(new PluginInfo(randomAsciiOfLengthBetween(3,10),randomAsciiOfLengthBetween(3,10),randomAsciiOfLengthBetween(3,10),randomAsciiOfLengthBetween(3,10)));
    }
    pluginsAndModules=new PluginsAndModules(plugins,modules);
  }
  IngestInfo ingestInfo=null;
  if (randomBoolean()) {
    int numProcessors=randomIntBetween(0,5);
    List<ProcessorInfo> processors=new ArrayList<>(numProcessors);
    for (int i=0; i < numProcessors; i++) {
      processors.add(new ProcessorInfo(randomAsciiOfLengthBetween(3,10)));
    }
    ingestInfo=new IngestInfo(processors);
  }
  ByteSizeValue indexingBuffer=null;
  if (randomBoolean()) {
    indexingBuffer=new ByteSizeValue(random().nextLong() & ((1L << 40) - 1));
  }
  return new NodeInfo(VersionUtils.randomVersion(random()),build,node,settings,osInfo,process,jvm,threadPoolInfo,transport,httpInfo,pluginsAndModules,ingestInfo,indexingBuffer);
}
