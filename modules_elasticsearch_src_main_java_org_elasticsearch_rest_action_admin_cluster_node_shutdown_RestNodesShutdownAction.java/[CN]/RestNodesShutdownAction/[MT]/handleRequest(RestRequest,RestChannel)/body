{
  String[] nodesIds=RestActions.splitNodes(request.param("nodeId"));
  NodesShutdownRequest nodesShutdownRequest=new NodesShutdownRequest(nodesIds);
  nodesShutdownRequest.listenerThreaded(false);
  nodesShutdownRequest.delay(request.paramAsTime("delay",nodesShutdownRequest.delay()));
  client.admin().cluster().nodesShutdown(nodesShutdownRequest,new ActionListener<NodesShutdownResponse>(){
    @Override public void onResponse(    NodesShutdownResponse result){
      try {
        XContentBuilder builder=restContentBuilder(request);
        builder.startObject();
        builder.field("cluster_name",result.clusterName().value());
        builder.startObject("nodes");
        for (        NodesShutdownResponse.NodeShutdownResponse nodeInfo : result) {
          builder.startObject(nodeInfo.node().id());
          builder.field("name",nodeInfo.node().name());
          builder.endObject();
        }
        builder.endObject();
        builder.endObject();
        channel.sendResponse(new XContentRestResponse(request,RestResponse.Status.OK,builder));
      }
 catch (      Exception e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
