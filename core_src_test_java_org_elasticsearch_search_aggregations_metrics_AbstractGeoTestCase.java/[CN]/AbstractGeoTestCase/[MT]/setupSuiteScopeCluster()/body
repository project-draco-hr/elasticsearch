{
  createIndex(UNMAPPED_IDX_NAME);
  assertAcked(prepareCreate(IDX_NAME).addMapping("type",SINGLE_VALUED_FIELD_NAME,"type=geo_point,geohash_prefix=true,geohash_precision=12",MULTI_VALUED_FIELD_NAME,"type=geo_point",NUMBER_FIELD_NAME,"type=long","tag","type=string,index=not_analyzed"));
  singleTopLeft=new GeoPoint(Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY);
  singleBottomRight=new GeoPoint(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY);
  multiTopLeft=new GeoPoint(Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY);
  multiBottomRight=new GeoPoint(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY);
  singleCentroid=new GeoPoint(0,0);
  multiCentroid=new GeoPoint(0,0);
  unmappedCentroid=new GeoPoint(0,0);
  numDocs=randomIntBetween(6,20);
  numUniqueGeoPoints=randomIntBetween(1,numDocs);
  expectedDocCountsForGeoHash=new ObjectIntHashMap<>(numDocs * 2);
  expectedCentroidsForGeoHash=new ObjectObjectHashMap<>(numDocs * 2);
  singleValues=new GeoPoint[numUniqueGeoPoints];
  for (int i=0; i < singleValues.length; i++) {
    singleValues[i]=RandomGeoGenerator.randomPoint(random());
    updateBoundsTopLeft(singleValues[i],singleTopLeft);
    updateBoundsBottomRight(singleValues[i],singleBottomRight);
  }
  multiValues=new GeoPoint[numUniqueGeoPoints];
  for (int i=0; i < multiValues.length; i++) {
    multiValues[i]=RandomGeoGenerator.randomPoint(random());
    updateBoundsTopLeft(multiValues[i],multiTopLeft);
    updateBoundsBottomRight(multiValues[i],multiBottomRight);
  }
  List<IndexRequestBuilder> builders=new ArrayList<>();
  GeoPoint singleVal;
  final GeoPoint[] multiVal=new GeoPoint[2];
  double newMVLat, newMVLon;
  for (int i=0; i < numDocs; i++) {
    singleVal=singleValues[i % numUniqueGeoPoints];
    multiVal[0]=multiValues[i % numUniqueGeoPoints];
    multiVal[1]=multiValues[(i + 1) % numUniqueGeoPoints];
    builders.add(client().prepareIndex(IDX_NAME,"type").setSource(jsonBuilder().startObject().array(SINGLE_VALUED_FIELD_NAME,singleVal.lon(),singleVal.lat()).startArray(MULTI_VALUED_FIELD_NAME).startArray().value(multiVal[0].lon()).value(multiVal[0].lat()).endArray().startArray().value(multiVal[1].lon()).value(multiVal[1].lat()).endArray().endArray().field(NUMBER_FIELD_NAME,i).field("tag","tag" + i).endObject()));
    singleCentroid=singleCentroid.reset(singleCentroid.lat() + (singleVal.lat() - singleCentroid.lat()) / (i + 1),singleCentroid.lon() + (singleVal.lon() - singleCentroid.lon()) / (i + 1));
    newMVLat=(multiVal[0].lat() + multiVal[1].lat()) / 2d;
    newMVLon=(multiVal[0].lon() + multiVal[1].lon()) / 2d;
    multiCentroid=multiCentroid.reset(multiCentroid.lat() + (newMVLat - multiCentroid.lat()) / (i + 1),multiCentroid.lon() + (newMVLon - multiCentroid.lon()) / (i + 1));
  }
  assertAcked(prepareCreate(EMPTY_IDX_NAME).addMapping("type",SINGLE_VALUED_FIELD_NAME,"type=geo_point"));
  assertAcked(prepareCreate(DATELINE_IDX_NAME).addMapping("type",SINGLE_VALUED_FIELD_NAME,"type=geo_point",MULTI_VALUED_FIELD_NAME,"type=geo_point",NUMBER_FIELD_NAME,"type=long","tag","type=string,index=not_analyzed"));
  GeoPoint[] geoValues=new GeoPoint[5];
  geoValues[0]=new GeoPoint(38,178);
  geoValues[1]=new GeoPoint(12,-179);
  geoValues[2]=new GeoPoint(-24,170);
  geoValues[3]=new GeoPoint(32,-175);
  geoValues[4]=new GeoPoint(-11,178);
  for (int i=0; i < 5; i++) {
    builders.add(client().prepareIndex(DATELINE_IDX_NAME,"type").setSource(jsonBuilder().startObject().array(SINGLE_VALUED_FIELD_NAME,geoValues[i].lon(),geoValues[i].lat()).field(NUMBER_FIELD_NAME,i).field("tag","tag" + i).endObject()));
  }
  assertAcked(prepareCreate(HIGH_CARD_IDX_NAME).setSettings(Settings.builder().put("number_of_shards",2)).addMapping("type",SINGLE_VALUED_FIELD_NAME,"type=geo_point",MULTI_VALUED_FIELD_NAME,"type=geo_point",NUMBER_FIELD_NAME,"type=long,store=true","tag","type=string,index=not_analyzed"));
  for (int i=0; i < 2000; i++) {
    singleVal=singleValues[i % numUniqueGeoPoints];
    builders.add(client().prepareIndex(HIGH_CARD_IDX_NAME,"type").setSource(jsonBuilder().startObject().array(SINGLE_VALUED_FIELD_NAME,singleVal.lon(),singleVal.lat()).startArray(MULTI_VALUED_FIELD_NAME).startArray().value(multiValues[i % numUniqueGeoPoints].lon()).value(multiValues[i % numUniqueGeoPoints].lat()).endArray().startArray().value(multiValues[(i + 1) % numUniqueGeoPoints].lon()).value(multiValues[(i + 1) % numUniqueGeoPoints].lat()).endArray().endArray().field(NUMBER_FIELD_NAME,i).field("tag","tag" + i).endObject()));
    updateGeohashBucketsCentroid(singleVal);
  }
  builders.add(client().prepareIndex(IDX_ZERO_NAME,"type").setSource(jsonBuilder().startObject().array(SINGLE_VALUED_FIELD_NAME,0.0,1.0).endObject()));
  assertAcked(prepareCreate(IDX_ZERO_NAME).addMapping("type",SINGLE_VALUED_FIELD_NAME,"type=geo_point"));
  indexRandom(true,builders);
  ensureSearchable();
  SearchResponse response=client().prepareSearch(HIGH_CARD_IDX_NAME).addField(NUMBER_FIELD_NAME).addSort(SortBuilders.fieldSort(NUMBER_FIELD_NAME).order(SortOrder.ASC)).setSize(5000).get();
  assertSearchResponse(response);
  long totalHits=response.getHits().totalHits();
  XContentBuilder builder=XContentFactory.jsonBuilder().startObject();
  response.toXContent(builder,ToXContent.EMPTY_PARAMS);
  builder.endObject();
  logger.info("Full high_card_idx Response Content:\n{ {} }",builder.string());
  for (int i=0; i < totalHits; i++) {
    SearchHit searchHit=response.getHits().getAt(i);
    assertThat("Hit " + i + " with id: "+ searchHit.getId(),searchHit.getIndex(),equalTo("high_card_idx"));
    assertThat("Hit " + i + " with id: "+ searchHit.getId(),searchHit.getType(),equalTo("type"));
    SearchHitField hitField=searchHit.field(NUMBER_FIELD_NAME);
    assertThat("Hit " + i + " has wrong number of values",hitField.getValues().size(),equalTo(1));
    Long value=hitField.getValue();
    assertThat("Hit " + i + " has wrong value",value.intValue(),equalTo(i));
  }
  assertThat(totalHits,equalTo(2000L));
}
