{
  try {
    values=valuesSource.bytesValues(context);
  }
 catch (  IOException e) {
    throw new ElasticsearchException("Error reading values",e);
  }
  return new NumericDocValues(){
    @Override public long get(    int doc){
      values.setDocument(doc);
      final int valuesCount=values.count();
      if (valuesCount > 1) {
        throw new ElasticsearchIllegalArgumentException("Sample diversifying key must be a single valued-field");
      }
      if (valuesCount == 1) {
        final BytesRef bytes=values.valueAt(0);
        long bucketOrdinal=bucketOrds.add(bytes);
        if (bucketOrdinal < 0) {
          bucketOrdinal=-1 - bucketOrdinal;
        }
        return bucketOrdinal;
      }
      return 0;
    }
  }
;
}
