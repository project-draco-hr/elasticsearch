{
  final long inc;
  if (vars == null || vars.containsKey("inc") == false) {
    inc=0;
  }
 else {
    inc=((Number)vars.get("inc")).longValue();
  }
  return new SearchScript(){
    private Map<String,Object> vars=new HashMap<>(2);
    @Override public LeafSearchScript getLeafSearchScript(    LeafReaderContext context) throws IOException {
      final LeafSearchLookup leafLookup=lookup.getLeafSearchLookup(context);
      return new LeafSearchScript(){
        @Override public void setNextVar(        String name,        Object value){
          vars.put(name,value);
        }
        @Override public Object run(){
          throw new UnsupportedOperationException();
        }
        @Override public void setScorer(        Scorer scorer){
        }
        @Override public void setSource(        Map<String,Object> source){
        }
        @Override public void setDocument(        int doc){
          if (leafLookup != null) {
            leafLookup.setDocument(doc);
          }
        }
        @Override public long runAsLong(){
          return ((Number)vars.get("_value")).longValue() + inc;
        }
        @Override public double runAsDouble(){
          return ((Number)vars.get("_value")).doubleValue() + inc;
        }
      }
;
    }
    @Override public boolean needsScores(){
      return false;
    }
  }
;
}
