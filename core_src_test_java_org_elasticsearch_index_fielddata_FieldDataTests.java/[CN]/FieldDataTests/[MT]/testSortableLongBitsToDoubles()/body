{
  final double value=randomDouble();
  final long valueBits=NumericUtils.doubleToSortableLong(value);
  NumericDocValues values=new NumericDocValues(){
    @Override public long get(    int docID){
      return valueBits;
    }
  }
;
  SortedNumericDoubleValues asMultiDoubles=FieldData.sortableLongBitsToDoubles(DocValues.singleton(values,null));
  NumericDoubleValues asDoubles=FieldData.unwrapSingleton(asMultiDoubles);
  assertNotNull(asDoubles);
  assertEquals(value,asDoubles.get(0),0);
  NumericDocValues backToLongs=DocValues.unwrapSingleton(FieldData.toSortableLongBits(asMultiDoubles));
  assertSame(values,backToLongs);
  SortedNumericDocValues multiValues=new SortedNumericDocValues(){
    @Override public long valueAt(    int index){
      return valueBits;
    }
    @Override public void setDocument(    int doc){
    }
    @Override public int count(){
      return 1;
    }
  }
;
  asMultiDoubles=FieldData.sortableLongBitsToDoubles(multiValues);
  assertEquals(value,asMultiDoubles.valueAt(0),0);
  assertSame(multiValues,FieldData.toSortableLongBits(asMultiDoubles));
}
