{
  assertAcked(prepareCreate("test").setSettings(Settings.settingsBuilder().put("index.refresh_interval",-1)).addMapping("type1",jsonBuilder().startObject().startObject("type1").endObject().endObject()).addMapping("type2",jsonBuilder().startObject().startObject("type2").startObject("properties").startObject("str").field("type","string").field("store","yes").endObject().startObject("strs").field("type","string").field("store","yes").endObject().startObject("int").field("type","integer").field("store","yes").endObject().startObject("ints").field("type","integer").field("store","yes").endObject().startObject("date").field("type","date").field("store","yes").endObject().startObject("binary").field("type","binary").field("store","yes").endObject().endObject().endObject().endObject()));
  ensureGreen();
  client().prepareIndex("test","type1","1").setSource(jsonBuilder().startObject().field("str","test").field("strs",new String[]{"A","B","C"}).field("int",42).field("ints",new int[]{1,2,3,4}).field("date","2012-11-13T15:26:14.000Z").field("binary",Base64.encodeBytes(new byte[]{1,2,3})).endObject()).get();
  client().prepareIndex("test","type2","1").setSource(jsonBuilder().startObject().field("str","test").field("strs",new String[]{"A","B","C"}).field("int",42).field("ints",new int[]{1,2,3,4}).field("date","2012-11-13T15:26:14.000Z").field("binary",Base64.encodeBytes(new byte[]{1,2,3})).endObject()).get();
  logger.info("--> realtime get (from source)");
  GetResponse getResponse=client().prepareGet("test","type1","1").setFields("str","strs","int","ints","date","binary").get();
  assertThat(getResponse.isExists(),equalTo(true));
  assertThat((String)getResponse.getField("str").getValue(),equalTo("test"));
  assertThat(getResponse.getField("strs").getValues(),contains((Object)"A","B","C"));
  assertThat((Long)getResponse.getField("int").getValue(),equalTo(42l));
  assertThat(getResponse.getField("ints").getValues(),contains((Object)1L,2L,3L,4L));
  assertThat((String)getResponse.getField("date").getValue(),equalTo("2012-11-13T15:26:14.000Z"));
  assertThat(getResponse.getField("binary").getValue(),instanceOf(String.class));
  logger.info("--> realtime get (from stored fields)");
  getResponse=client().prepareGet("test","type2","1").setFields("str","strs","int","ints","date","binary").get();
  assertThat(getResponse.isExists(),equalTo(true));
  assertThat((String)getResponse.getField("str").getValue(),equalTo("test"));
  assertThat(getResponse.getField("strs").getValues(),contains((Object)"A","B","C"));
  assertThat((Integer)getResponse.getField("int").getValue(),equalTo(42));
  assertThat(getResponse.getField("ints").getValues(),contains((Object)1,2,3,4));
  assertThat((String)getResponse.getField("date").getValue(),equalTo("2012-11-13T15:26:14.000Z"));
  assertThat((BytesReference)getResponse.getField("binary").getValue(),equalTo((BytesReference)new BytesArray(new byte[]{1,2,3})));
  logger.info("--> flush the index, so we load it from it");
  flush();
  logger.info("--> non realtime get (from source)");
  getResponse=client().prepareGet("test","type1","1").setFields("str","strs","int","ints","date","binary").get();
  assertThat(getResponse.isExists(),equalTo(true));
  assertThat((String)getResponse.getField("str").getValue(),equalTo("test"));
  assertThat(getResponse.getField("strs").getValues(),contains((Object)"A","B","C"));
  assertThat((Long)getResponse.getField("int").getValue(),equalTo(42l));
  assertThat(getResponse.getField("ints").getValues(),contains((Object)1L,2L,3L,4L));
  assertThat((String)getResponse.getField("date").getValue(),equalTo("2012-11-13T15:26:14.000Z"));
  assertThat(getResponse.getField("binary").getValue(),instanceOf(String.class));
  logger.info("--> non realtime get (from stored fields)");
  getResponse=client().prepareGet("test","type2","1").setFields("str","strs","int","ints","date","binary").get();
  assertThat(getResponse.isExists(),equalTo(true));
  assertThat((String)getResponse.getField("str").getValue(),equalTo("test"));
  assertThat(getResponse.getField("strs").getValues(),contains((Object)"A","B","C"));
  assertThat((Integer)getResponse.getField("int").getValue(),equalTo(42));
  assertThat(getResponse.getField("ints").getValues(),contains((Object)1,2,3,4));
  assertThat((String)getResponse.getField("date").getValue(),equalTo("2012-11-13T15:26:14.000Z"));
  assertThat((BytesReference)getResponse.getField("binary").getValue(),equalTo((BytesReference)new BytesArray(new byte[]{1,2,3})));
}
