{
  final int numDocs=TestUtil.nextInt(random(),1,100);
  final int[][] values=new int[numDocs][];
  for (int i=0; i < numDocs; ++i) {
    values[i]=new int[random().nextInt(4)];
    for (int j=0; j < values[i].length; ++j) {
      values[i][j]=randomInt();
    }
    Arrays.sort(values[i]);
  }
  SortedNumericDocValues asNumericValues=new SortedNumericDocValues(){
    int i=-1;
    @Override public long valueAt(    int index){
      return values[i][index];
    }
    @Override public void setDocument(    int docId){
      i=docId;
    }
    @Override public int count(){
      return values[i].length;
    }
  }
;
  final long missing=randomInt();
  SortedNumericDocValues withMissingReplaced=MissingValues.replaceMissing(asNumericValues,missing);
  for (int i=0; i < numDocs; ++i) {
    withMissingReplaced.setDocument(i);
    if (values[i].length > 0) {
      assertEquals(values[i].length,withMissingReplaced.count());
      for (int j=0; j < values[i].length; ++j) {
        assertEquals(values[i][j],withMissingReplaced.valueAt(j));
      }
    }
 else {
      assertEquals(1,withMissingReplaced.count());
      assertEquals(missing,withMissingReplaced.valueAt(0));
    }
  }
}
