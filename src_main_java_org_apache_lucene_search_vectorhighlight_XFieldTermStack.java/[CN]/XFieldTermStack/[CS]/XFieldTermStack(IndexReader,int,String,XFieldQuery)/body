{
  this.fieldName=fieldName;
  Set<String> termSet=fieldQuery.getTermSet(fieldName);
  if (termSet == null)   return;
  final Fields vectors=reader.getTermVectors(docId);
  if (vectors == null) {
    return;
  }
  final Terms vector=vectors.terms(fieldName);
  if (vector == null) {
    return;
  }
  final CharsRef spare=new CharsRef();
  final TermsEnum termsEnum=vector.iterator(null);
  DocsAndPositionsEnum dpEnum=null;
  BytesRef text;
  int numDocs=reader.maxDoc();
  final List<TermInfo> termList=new ArrayList<TermInfo>();
  while ((text=termsEnum.next()) != null) {
    UnicodeUtil.UTF8toUTF16(text,spare);
    final String term=spare.toString();
    if (!termSet.contains(term)) {
      continue;
    }
    dpEnum=termsEnum.docsAndPositions(null,dpEnum);
    if (dpEnum == null) {
      return;
    }
    dpEnum.nextDoc();
    final float weight=(float)(Math.log(numDocs / (double)(reader.docFreq(new Term(fieldName,text)) + 1)) + 1.0);
    final int freq=dpEnum.freq();
    for (int i=0; i < freq; i++) {
      int pos=dpEnum.nextPosition();
      if (dpEnum.startOffset() < 0) {
        return;
      }
      termList.add(new TermInfo(term,dpEnum.startOffset(),dpEnum.endOffset(),pos,weight));
    }
  }
  CollectionUtil.timSort(termList);
  this.termList.addAll(termList);
}
