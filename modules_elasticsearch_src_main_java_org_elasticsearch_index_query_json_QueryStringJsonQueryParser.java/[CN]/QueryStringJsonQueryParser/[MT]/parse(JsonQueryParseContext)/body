{
  JsonParser jp=parseContext.jp();
  String queryString=null;
  String defaultField=null;
  MapperQueryParser.Operator defaultOperator=QueryParser.Operator.OR;
  boolean allowLeadingWildcard=true;
  boolean lowercaseExpandedTerms=true;
  boolean enablePositionIncrements=true;
  float fuzzyMinSim=FuzzyQuery.defaultMinSimilarity;
  int fuzzyPrefixLength=FuzzyQuery.defaultPrefixLength;
  int phraseSlop=0;
  float boost=1.0f;
  boolean escape=false;
  Analyzer analyzer=null;
  List<String> fields=null;
  ExtTObjectFloatHashMap<String> boosts=null;
  float tieBreaker=0.0f;
  boolean useDisMax=true;
  String currentFieldName=null;
  JsonToken token;
  while ((token=jp.nextToken()) != JsonToken.END_OBJECT) {
    if (token == JsonToken.FIELD_NAME) {
      currentFieldName=jp.getCurrentName();
    }
 else     if (token == JsonToken.START_ARRAY) {
      if ("fields".equals(currentFieldName)) {
        while ((token=jp.nextToken()) != JsonToken.END_ARRAY) {
          String fField=null;
          float fBoost=-1;
          char[] text=jp.getTextCharacters();
          int end=jp.getTextOffset() + jp.getTextLength();
          for (int i=jp.getTextOffset(); i < end; i++) {
            if (text[i] == '^') {
              int relativeLocation=i - jp.getTextOffset();
              fField=new String(text,jp.getTextOffset(),relativeLocation);
              fBoost=Float.parseFloat(new String(text,i + 1,jp.getTextLength() - relativeLocation - 1));
              break;
            }
          }
          if (fField == null) {
            fField=jp.getText();
          }
          if (fields == null) {
            fields=Lists.newArrayList();
          }
          fields.add(fField);
          if (fBoost != -1) {
            if (boosts == null) {
              boosts=new ExtTObjectFloatHashMap<String>();
            }
            boosts.put(fField,fBoost);
          }
        }
      }
    }
 else     if (token == JsonToken.VALUE_STRING) {
      if ("query".equals(currentFieldName)) {
        queryString=jp.getText();
      }
 else       if ("defaultField".equals(currentFieldName)) {
        defaultField=parseContext.indexName(jp.getText());
      }
 else       if ("defaultOperator".equals(currentFieldName)) {
        String op=jp.getText();
        if ("or".equalsIgnoreCase(op)) {
          defaultOperator=QueryParser.Operator.OR;
        }
 else         if ("and".equalsIgnoreCase(op)) {
          defaultOperator=QueryParser.Operator.AND;
        }
 else {
          throw new QueryParsingException(index,"Query default operator [" + op + "] is not allowed");
        }
      }
 else       if ("analyzer".equals(currentFieldName)) {
        analyzer=analysisService.analyzer(jp.getText());
      }
 else       if ("allowLeadingWildcard".equals(currentFieldName)) {
        allowLeadingWildcard=Booleans.parseBoolean(jp.getText(),false);
      }
 else       if ("lowercaseExpandedTerms".equals(currentFieldName)) {
        lowercaseExpandedTerms=Booleans.parseBoolean(jp.getText(),false);
      }
 else       if ("enablePositionIncrements".equals(currentFieldName)) {
        enablePositionIncrements=Booleans.parseBoolean(jp.getText(),false);
      }
 else       if ("escape".equals(currentFieldName)) {
        escape=Booleans.parseBoolean(jp.getText(),false);
      }
 else       if ("useDisMax".equals(currentFieldName)) {
        useDisMax=Booleans.parseBoolean(jp.getText(),false);
      }
 else       if ("fuzzyPrefixLength".equals(currentFieldName)) {
        fuzzyPrefixLength=Integer.parseInt(jp.getText());
      }
 else       if ("phraseSlop".equals(currentFieldName)) {
        phraseSlop=Integer.parseInt(jp.getText());
      }
 else       if ("fuzzyMinSim".equals(currentFieldName)) {
        fuzzyMinSim=Float.parseFloat(jp.getText());
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=Float.parseFloat(jp.getText());
      }
 else       if ("tieBreaker".equals(currentFieldName)) {
        tieBreaker=Float.parseFloat(jp.getText());
      }
    }
 else     if (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE) {
      if ("allowLeadingWildcard".equals(currentFieldName)) {
        allowLeadingWildcard=token == JsonToken.VALUE_TRUE;
      }
 else       if ("lowercaseExpandedTerms".equals(currentFieldName)) {
        lowercaseExpandedTerms=token == JsonToken.VALUE_TRUE;
      }
 else       if ("enablePositionIncrements".equals(currentFieldName)) {
        enablePositionIncrements=token == JsonToken.VALUE_TRUE;
      }
 else       if ("escape".equals(currentFieldName)) {
        escape=token == JsonToken.VALUE_TRUE;
      }
 else       if ("useDisMax".equals(currentFieldName)) {
        useDisMax=token == JsonToken.VALUE_TRUE;
      }
    }
 else     if (token == JsonToken.VALUE_NUMBER_FLOAT) {
      if ("fuzzyMinSim".equals(currentFieldName)) {
        fuzzyMinSim=jp.getFloatValue();
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=jp.getFloatValue();
      }
 else       if ("tieBreaker".equals(currentFieldName)) {
        tieBreaker=jp.getFloatValue();
      }
    }
 else     if (token == JsonToken.VALUE_NUMBER_INT) {
      if ("fuzzyPrefixLength".equals(currentFieldName)) {
        fuzzyPrefixLength=jp.getIntValue();
      }
 else       if ("phraseSlop".equals(currentFieldName)) {
        phraseSlop=jp.getIntValue();
      }
 else       if ("fuzzyMinSim".equals(currentFieldName)) {
        fuzzyMinSim=jp.getFloatValue();
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=jp.getFloatValue();
      }
 else       if ("allowLeadingWildcard".equals(currentFieldName)) {
        allowLeadingWildcard=jp.getIntValue() != 0;
      }
 else       if ("lowercaseExpandedTerms".equals(currentFieldName)) {
        lowercaseExpandedTerms=jp.getIntValue() != 0;
      }
 else       if ("enablePositionIncrements".equals(currentFieldName)) {
        enablePositionIncrements=jp.getIntValue() != 0;
      }
 else       if ("escape".equals(currentFieldName)) {
        escape=jp.getIntValue() != 0;
      }
 else       if ("useDisMax".equals(currentFieldName)) {
        escape=jp.getIntValue() != 0;
      }
 else       if ("tieBreaker".equals(currentFieldName)) {
        tieBreaker=jp.getFloatValue();
      }
    }
  }
  if (queryString == null) {
    throw new QueryParsingException(index,"QueryString must be provided with a [query]");
  }
  if (analyzer == null) {
    analyzer=parseContext.mapperService().searchAnalyzer();
  }
  MapperQueryParser queryParser;
  if (fields != null) {
    if (fields.size() == 1) {
      queryParser=new MapperQueryParser(fields.get(0),analyzer,parseContext.mapperService(),parseContext.filterCache());
    }
 else {
      MultiFieldMapperQueryParser mQueryParser=new MultiFieldMapperQueryParser(fields,boosts,analyzer,parseContext.mapperService(),parseContext.filterCache());
      mQueryParser.setTieBreaker(tieBreaker);
      mQueryParser.setUseDisMax(useDisMax);
      queryParser=mQueryParser;
    }
  }
 else {
    queryParser=new MapperQueryParser(defaultField,analyzer,parseContext.mapperService(),parseContext.filterCache());
  }
  queryParser.setEnablePositionIncrements(enablePositionIncrements);
  queryParser.setLowercaseExpandedTerms(lowercaseExpandedTerms);
  queryParser.setAllowLeadingWildcard(allowLeadingWildcard);
  queryParser.setDefaultOperator(defaultOperator);
  queryParser.setFuzzyMinSim(fuzzyMinSim);
  queryParser.setFuzzyPrefixLength(fuzzyPrefixLength);
  queryParser.setPhraseSlop(phraseSlop);
  if (escape) {
    queryString=QueryParser.escape(queryString);
  }
  try {
    Query query=queryParser.parse(queryString);
    query.setBoost(boost);
    return optimizeQuery(fixNegativeQueryIfNeeded(query));
  }
 catch (  ParseException e) {
    throw new QueryParsingException(index,"Failed to parse query [" + queryString + "]",e);
  }
}
