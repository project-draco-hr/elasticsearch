{
  if (nodesIds.length == 0) {
    threadPool.generic().execute(new Runnable(){
      @Override public void run(){
        listener.onResponse(newResponse(request,responses));
      }
    }
);
    return;
  }
  TransportRequestOptions transportRequestOptions=TransportRequestOptions.options();
  if (request.getTimeout() != null) {
    transportRequestOptions.withTimeout(request.getTimeout());
  }
  transportRequestOptions.withCompress(transportCompress());
  for (  final String nodeId : nodesIds) {
    final DiscoveryNode node=clusterState.nodes().nodes().get(nodeId);
    if (nodeId.equals("_local") || nodeId.equals(clusterState.nodes().localNodeId())) {
      threadPool.executor(executor()).execute(new Runnable(){
        @Override public void run(){
          try {
            onOperation(nodeOperation(newNodeRequest(clusterState.nodes().localNodeId(),request)));
          }
 catch (          Exception e) {
            onFailure(clusterState.nodes().localNodeId(),e);
          }
        }
      }
);
    }
 else     if (nodeId.equals("_master")) {
      threadPool.executor(executor()).execute(new Runnable(){
        @Override public void run(){
          try {
            onOperation(nodeOperation(newNodeRequest(clusterState.nodes().masterNodeId(),request)));
          }
 catch (          Exception e) {
            onFailure(clusterState.nodes().masterNodeId(),e);
          }
        }
      }
);
    }
 else {
      if (node == null) {
        onFailure(nodeId,new NoSuchNodeException(nodeId));
      }
 else {
        NodeRequest nodeRequest=newNodeRequest(nodeId,request);
        transportService.sendRequest(node,transportNodeAction,nodeRequest,transportRequestOptions,new BaseTransportResponseHandler<NodeResponse>(){
          @Override public NodeResponse newInstance(){
            return newNodeResponse();
          }
          @Override public void handleResponse(          NodeResponse response){
            onOperation(response);
          }
          @Override public void handleException(          TransportException exp){
            onFailure(node.id(),exp);
          }
          @Override public String executor(){
            return ThreadPool.Names.SAME;
          }
        }
);
      }
    }
  }
}
