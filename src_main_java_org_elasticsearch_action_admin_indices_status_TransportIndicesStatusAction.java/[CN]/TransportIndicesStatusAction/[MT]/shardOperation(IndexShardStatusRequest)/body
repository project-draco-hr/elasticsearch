{
  InternalIndexService indexService=(InternalIndexService)indicesService.indexServiceSafe(request.index());
  InternalIndexShard indexShard=(InternalIndexShard)indexService.shardSafe(request.shardId());
  ShardStatus shardStatus=new ShardStatus(indexShard.routingEntry());
  shardStatus.state=indexShard.state();
  try {
    shardStatus.storeSize=indexShard.store().estimateSize();
  }
 catch (  IOException e) {
  }
  if (indexShard.state() == IndexShardState.STARTED) {
    shardStatus.translogId=indexShard.translog().currentId();
    shardStatus.translogOperations=indexShard.translog().estimatedNumberOfOperations();
    Engine.Searcher searcher=indexShard.acquireSearcher("indices_status");
    try {
      shardStatus.docs=new DocsStatus();
      shardStatus.docs.numDocs=searcher.reader().numDocs();
      shardStatus.docs.maxDoc=searcher.reader().maxDoc();
      shardStatus.docs.deletedDocs=searcher.reader().numDeletedDocs();
    }
  finally {
      searcher.release();
    }
    shardStatus.mergeStats=indexShard.mergeScheduler().stats();
    shardStatus.refreshStats=indexShard.refreshStats();
    shardStatus.flushStats=indexShard.flushStats();
  }
  if (request.recovery) {
    RecoveryStatus peerRecoveryStatus=indexShard.recoveryStatus();
    if (peerRecoveryStatus == null) {
      peerRecoveryStatus=peerRecoveryTarget.recoveryStatus(indexShard.shardId());
    }
    if (peerRecoveryStatus != null) {
      PeerRecoveryStatus.Stage stage;
switch (peerRecoveryStatus.stage()) {
case INIT:
        stage=PeerRecoveryStatus.Stage.INIT;
      break;
case INDEX:
    stage=PeerRecoveryStatus.Stage.INDEX;
  break;
case TRANSLOG:
stage=PeerRecoveryStatus.Stage.TRANSLOG;
break;
case FINALIZE:
stage=PeerRecoveryStatus.Stage.FINALIZE;
break;
case DONE:
stage=PeerRecoveryStatus.Stage.DONE;
break;
default :
stage=PeerRecoveryStatus.Stage.INIT;
}
shardStatus.peerRecoveryStatus=new PeerRecoveryStatus(stage,peerRecoveryStatus.recoveryState().getTimer().startTime(),peerRecoveryStatus.recoveryState().getTimer().time(),peerRecoveryStatus.recoveryState().getIndex().totalByteCount(),peerRecoveryStatus.recoveryState().getIndex().reusedByteCount(),peerRecoveryStatus.recoveryState().getIndex().recoveredByteCount(),peerRecoveryStatus.recoveryState().getTranslog().currentTranslogOperations());
}
IndexShardGatewayService gatewayService=indexService.shardInjector(request.shardId()).getInstance(IndexShardGatewayService.class);
RecoveryState gatewayRecoveryState=gatewayService.recoveryState();
if (gatewayRecoveryState != null) {
GatewayRecoveryStatus.Stage stage;
switch (gatewayRecoveryState.getStage()) {
case INIT:
stage=GatewayRecoveryStatus.Stage.INIT;
break;
case INDEX:
stage=GatewayRecoveryStatus.Stage.INDEX;
break;
case TRANSLOG:
stage=GatewayRecoveryStatus.Stage.TRANSLOG;
break;
case DONE:
stage=GatewayRecoveryStatus.Stage.DONE;
break;
default :
stage=GatewayRecoveryStatus.Stage.INIT;
}
shardStatus.gatewayRecoveryStatus=new GatewayRecoveryStatus(stage,gatewayRecoveryState.getTimer().startTime(),gatewayRecoveryState.getTimer().time(),gatewayRecoveryState.getIndex().totalByteCount(),gatewayRecoveryState.getIndex().reusedByteCount(),gatewayRecoveryState.getIndex().recoveredByteCount(),gatewayRecoveryState.getTranslog().currentTranslogOperations());
}
}
if (request.snapshot) {
IndexShardGatewayService gatewayService=indexService.shardInjector(request.shardId()).getInstance(IndexShardGatewayService.class);
SnapshotStatus snapshotStatus=gatewayService.snapshotStatus();
if (snapshotStatus != null) {
GatewaySnapshotStatus.Stage stage;
switch (snapshotStatus.stage()) {
case DONE:
stage=GatewaySnapshotStatus.Stage.DONE;
break;
case FAILURE:
stage=GatewaySnapshotStatus.Stage.FAILURE;
break;
case TRANSLOG:
stage=GatewaySnapshotStatus.Stage.TRANSLOG;
break;
case FINALIZE:
stage=GatewaySnapshotStatus.Stage.FINALIZE;
break;
case INDEX:
stage=GatewaySnapshotStatus.Stage.INDEX;
break;
default :
stage=GatewaySnapshotStatus.Stage.NONE;
break;
}
shardStatus.gatewaySnapshotStatus=new GatewaySnapshotStatus(stage,snapshotStatus.startTime(),snapshotStatus.time(),snapshotStatus.index().totalSize(),snapshotStatus.translog().expectedNumberOfOperations());
}
}
return shardStatus;
}
