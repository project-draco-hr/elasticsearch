{
  AllEntries allEntries=new AllEntries();
  allEntries.addText("field1","all",2.0f);
  allEntries.addText("field2","your",1.0f);
  allEntries.addText("field1","boosts",0.5f);
  allEntries.reset();
  final TokenStream ts=AllTokenStream.allTokenStream("any",allEntries,new WhitespaceAnalyzer(Lucene.VERSION));
  final CharTermAttribute termAtt=ts.addAttribute(CharTermAttribute.class);
  final PayloadAttribute payloadAtt=ts.addAttribute(PayloadAttribute.class);
  ts.reset();
  for (int i=0; i < 3; ++i) {
    assertTrue(ts.incrementToken());
    final String term;
    final float boost;
switch (i) {
case 0:
      term="all";
    boost=2;
  break;
case 1:
term="your";
boost=1;
break;
case 2:
term="boosts";
boost=0.5f;
break;
default :
throw new AssertionError();
}
assertEquals(term,termAtt.toString());
final BytesRef payload=payloadAtt.getPayload();
if (payload == null || payload.length == 0) {
assertEquals(boost,1f,0.001f);
}
 else {
assertEquals(4,payload.length);
final float b=PayloadHelper.decodeFloat(payload.bytes,payload.offset);
assertEquals(boost,b,0.001f);
}
}
assertFalse(ts.incrementToken());
}
