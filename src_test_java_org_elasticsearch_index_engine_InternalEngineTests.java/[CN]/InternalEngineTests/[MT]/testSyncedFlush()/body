{
  final String syncId=randomUnicodeOfCodepointLengthBetween(10,20);
  ParsedDocument doc=testParsedDocument("1","1","test",null,-1,-1,testDocumentWithTextField(),B_1,null);
  engine.create(new Engine.Create(null,newUid("1"),doc));
  Engine.CommitId commitID=engine.flush();
  assertThat(commitID,equalTo(new Engine.CommitId(store.readLastCommittedSegmentsInfo().getId())));
  byte[] wrongBytes=Base64.decode(commitID.toString());
  wrongBytes[0]=(byte)~wrongBytes[0];
  Engine.CommitId wrongId=new Engine.CommitId(wrongBytes);
  assertThat("should fail to sync flush with wrong id (but no docs)",engine.syncFlushIfNoPendingChanges(syncId + "1",wrongId),equalTo(Engine.SyncedFlushResult.FAILED_COMMIT_MISMATCH));
  engine.create(new Engine.Create(null,newUid("2"),doc));
  assertThat("should fail to sync flush with right id but pending doc",engine.syncFlushIfNoPendingChanges(syncId + "2",commitID),equalTo(Engine.SyncedFlushResult.FAILED_PENDING_OPERATIONS));
  commitID=engine.flush();
  assertThat("should succeed to flush commit with right id and no pending doc",engine.syncFlushIfNoPendingChanges(syncId,commitID),equalTo(Engine.SyncedFlushResult.SUCCESS));
  assertThat(store.readLastCommittedSegmentsInfo().getUserData().get(Engine.SYNC_COMMIT_ID),equalTo(syncId));
  assertThat(engine.getLastCommittedSegmentInfos().getUserData().get(Engine.SYNC_COMMIT_ID),equalTo(syncId));
}
