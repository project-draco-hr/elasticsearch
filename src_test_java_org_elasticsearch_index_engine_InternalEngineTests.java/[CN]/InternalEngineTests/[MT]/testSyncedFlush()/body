{
  final String syncId=randomUnicodeOfCodepointLengthBetween(10,20);
  ParsedDocument doc=testParsedDocument("1","1","test",null,-1,-1,testDocumentWithTextField(),B_1,null);
  engine.create(new Engine.Create(null,newUid("1"),doc));
  byte[] commitID=engine.flush();
  assertThat(commitID,equalTo(store.readLastCommittedSegmentsInfo().getId()));
  byte[] fakeId=commitID.clone();
  fakeId[0]=(byte)~fakeId[0];
  assertFalse("should fail to sync flush with wrong id (but no docs)",engine.syncFlushIfNoPendingChanges(syncId + "1",fakeId));
  engine.create(new Engine.Create(null,newUid("2"),doc));
  assertFalse("should fail to sync flush with right id but pending doc",engine.syncFlushIfNoPendingChanges(syncId + "2",commitID));
  commitID=engine.flush();
  assertTrue("should succeed to flush commit with right id and no pending doc",engine.syncFlushIfNoPendingChanges(syncId,commitID));
  assertThat(store.readLastCommittedSegmentsInfo().getUserData().get(Engine.SYNC_COMMIT_ID),equalTo(syncId));
  assertThat(engine.getLastCommittedSegmentInfos().getUserData().get(Engine.SYNC_COMMIT_ID),equalTo(syncId));
}
