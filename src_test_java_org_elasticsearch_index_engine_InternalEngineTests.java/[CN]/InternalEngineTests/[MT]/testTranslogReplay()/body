{
  boolean canHaveDuplicates=true;
  boolean autoGeneratedId=true;
  final int numDocs=randomIntBetween(1,10);
  for (int i=0; i < numDocs; i++) {
    ParsedDocument doc=testParsedDocument(Integer.toString(i),Integer.toString(i),"test",null,-1,-1,testDocument(),new BytesArray("{}"),false);
    Engine.Create firstIndexRequest=new Engine.Create(null,newUid(Integer.toString(i)),doc,Versions.MATCH_ANY,VersionType.INTERNAL,PRIMARY,System.nanoTime(),canHaveDuplicates,autoGeneratedId);
    engine.create(firstIndexRequest);
    assertThat(firstIndexRequest.version(),equalTo(1l));
  }
  engine.refresh("test");
  try (Engine.Searcher searcher=engine.acquireSearcher("test")){
    TopDocs topDocs=searcher.searcher().search(new MatchAllDocsQuery(),randomIntBetween(numDocs,numDocs + 10));
    assertThat(topDocs.totalHits,equalTo(numDocs));
  }
   final MockDirectoryWrapper directory=DirectoryUtils.getLeaf(store.directory(),MockDirectoryWrapper.class);
  if (directory != null) {
    directory.setPreventDoubleWrite(false);
  }
  TranslogHandler parser=(TranslogHandler)engine.config().getTranslogRecoveryPerformer();
  parser.mappingModified=randomBoolean();
  long currentTranslogId=translog.currentId();
  engine.close();
  engine=new InternalEngine(engine.config(),false);
  assertTrue(currentTranslogId + "<" + translog.currentId(),currentTranslogId < translog.currentId());
  assertEquals("translog ID must be incremented by 2 after initial recovery",currentTranslogId + 2,translog.currentId());
  try (Engine.Searcher searcher=engine.acquireSearcher("test")){
    TopDocs topDocs=searcher.searcher().search(new MatchAllDocsQuery(),randomIntBetween(numDocs,numDocs + 10));
    assertThat(topDocs.totalHits,equalTo(numDocs));
  }
   parser=(TranslogHandler)engine.config().getTranslogRecoveryPerformer();
  assertEquals(numDocs,parser.recoveredOps.get());
  if (parser.mappingModified) {
    assertEquals(1,parser.getRecoveredTypes().size());
    assertTrue(parser.getRecoveredTypes().contains("test"));
  }
 else {
    assertEquals(0,parser.getRecoveredTypes().size());
  }
  engine.close();
  engine=createEngine(store,translog);
  try (Engine.Searcher searcher=engine.acquireSearcher("test")){
    TopDocs topDocs=searcher.searcher().search(new MatchAllDocsQuery(),randomIntBetween(numDocs,numDocs + 10));
    assertThat(topDocs.totalHits,equalTo(numDocs));
  }
   parser=(TranslogHandler)engine.config().getTranslogRecoveryPerformer();
  assertEquals(0,parser.recoveredOps.get());
  final boolean flush=randomBoolean();
  int randomId=randomIntBetween(numDocs + 1,numDocs + 10);
  String uuidValue="test#" + Integer.toString(randomId);
  ParsedDocument doc=testParsedDocument(uuidValue,Integer.toString(randomId),"test",null,-1,-1,testDocument(),new BytesArray("{}"),false);
  Engine.Create firstIndexRequest=new Engine.Create(null,newUid(uuidValue),doc,1,VersionType.EXTERNAL,PRIMARY,System.nanoTime(),canHaveDuplicates,autoGeneratedId);
  engine.create(firstIndexRequest);
  assertThat(firstIndexRequest.version(),equalTo(1l));
  if (flush) {
    engine.flush();
  }
  doc=testParsedDocument(uuidValue,Integer.toString(randomId),"test",null,-1,-1,testDocument(),new BytesArray("{}"),false);
  Engine.Index idxRequest=new Engine.Index(null,newUid(uuidValue),doc,2,VersionType.EXTERNAL,PRIMARY,System.nanoTime());
  engine.index(idxRequest);
  engine.refresh("test");
  assertThat(idxRequest.version(),equalTo(2l));
  try (Engine.Searcher searcher=engine.acquireSearcher("test")){
    TopDocs topDocs=searcher.searcher().search(new MatchAllDocsQuery(),numDocs + 1);
    assertThat(topDocs.totalHits,equalTo(numDocs + 1));
  }
   engine.close();
  engine=createEngine(store,translog);
  try (Engine.Searcher searcher=engine.acquireSearcher("test")){
    TopDocs topDocs=searcher.searcher().search(new MatchAllDocsQuery(),numDocs + 1);
    assertThat(topDocs.totalHits,equalTo(numDocs + 1));
  }
   parser=(TranslogHandler)engine.config().getTranslogRecoveryPerformer();
  assertEquals(flush ? 1 : 2,parser.recoveredOps.get());
  engine.delete(new Engine.Delete("test",Integer.toString(randomId),newUid(uuidValue)));
  if (randomBoolean()) {
    engine.refresh("test");
  }
 else {
    engine.close();
    engine=createEngine(store,translog);
  }
  try (Engine.Searcher searcher=engine.acquireSearcher("test")){
    TopDocs topDocs=searcher.searcher().search(new MatchAllDocsQuery(),numDocs);
    assertThat(topDocs.totalHits,equalTo(numDocs));
  }
 }
