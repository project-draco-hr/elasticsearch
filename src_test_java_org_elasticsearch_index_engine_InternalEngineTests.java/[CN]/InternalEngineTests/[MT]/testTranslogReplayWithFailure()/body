{
  boolean canHaveDuplicates=true;
  boolean autoGeneratedId=true;
  final int numDocs=randomIntBetween(1,10);
  for (int i=0; i < numDocs; i++) {
    ParsedDocument doc=testParsedDocument(Integer.toString(i),Integer.toString(i),"test",null,-1,-1,testDocument(),new BytesArray("{}"),false);
    Engine.Create firstIndexRequest=new Engine.Create(null,newUid(Integer.toString(i)),doc,Versions.MATCH_ANY,VersionType.INTERNAL,PRIMARY,System.nanoTime(),canHaveDuplicates,autoGeneratedId);
    engine.create(firstIndexRequest);
    assertThat(firstIndexRequest.version(),equalTo(1l));
  }
  engine.refresh("test");
  try (Engine.Searcher searcher=engine.acquireSearcher("test")){
    TopDocs topDocs=searcher.searcher().search(new MatchAllDocsQuery(),randomIntBetween(numDocs,numDocs + 10));
    assertThat(topDocs.totalHits,equalTo(numDocs));
  }
   engine.close();
  final MockDirectoryWrapper directory=DirectoryUtils.getLeaf(store.directory(),MockDirectoryWrapper.class);
  if (directory != null) {
    directory.setPreventDoubleWrite(false);
  }
  boolean started=false;
  final int numIters=randomIntBetween(10,20);
  for (int i=0; i < numIters; i++) {
    directory.setRandomIOExceptionRateOnOpen(randomDouble());
    directory.setRandomIOExceptionRate(randomDouble());
    directory.setFailOnOpenInput(randomBoolean());
    directory.setAllowRandomFileNotFoundException(randomBoolean());
    try {
      engine=createEngine(store,translog);
      started=true;
      break;
    }
 catch (    EngineCreationFailureException ex) {
    }
  }
  directory.setRandomIOExceptionRateOnOpen(0.0);
  directory.setRandomIOExceptionRate(0.0);
  directory.setFailOnOpenInput(false);
  directory.setAllowRandomFileNotFoundException(false);
  if (started == false) {
    engine=createEngine(store,translog);
  }
  try (Engine.Searcher searcher=engine.acquireSearcher("test")){
    TopDocs topDocs=searcher.searcher().search(new MatchAllDocsQuery(),randomIntBetween(numDocs,numDocs + 10));
    assertThat(topDocs.totalHits,equalTo(numDocs));
  }
   TranslogHandler parser=(TranslogHandler)engine.config().getTranslogRecoveryPerformer();
  assertEquals(numDocs,parser.recoveredOps.get());
}
