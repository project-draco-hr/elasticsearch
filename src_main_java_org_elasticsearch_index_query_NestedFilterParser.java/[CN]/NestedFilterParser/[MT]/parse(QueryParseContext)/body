{
  XContentParser parser=parseContext.parser();
  Query query=null;
  boolean queryFound=false;
  Filter filter=null;
  boolean filterFound=false;
  float boost=1.0f;
  String path=null;
  boolean cache=false;
  HashedBytesRef cacheKey=null;
  String filterName=null;
  NestedQueryParser.LateBindingParentFilter currentParentFilterContext=NestedQueryParser.parentFilterContext.get();
  NestedQueryParser.LateBindingParentFilter usAsParentFilter=new NestedQueryParser.LateBindingParentFilter();
  NestedQueryParser.parentFilterContext.set(usAsParentFilter);
  try {
    String currentFieldName=null;
    XContentParser.Token token;
    while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
      if (token == XContentParser.Token.FIELD_NAME) {
        currentFieldName=parser.currentName();
      }
 else       if (token == XContentParser.Token.START_OBJECT) {
        if ("query".equals(currentFieldName)) {
          queryFound=true;
          query=parseContext.parseInnerQuery();
        }
 else         if ("filter".equals(currentFieldName)) {
          filterFound=true;
          filter=parseContext.parseInnerFilter();
        }
 else {
          throw new QueryParsingException(parseContext.index(),"[nested] filter does not support [" + currentFieldName + "]");
        }
      }
 else       if (token.isValue()) {
        if ("path".equals(currentFieldName)) {
          path=parser.text();
        }
 else         if ("boost".equals(currentFieldName)) {
          boost=parser.floatValue();
        }
 else         if ("_name".equals(currentFieldName)) {
          filterName=parser.text();
        }
 else         if ("_cache".equals(currentFieldName)) {
          cache=parser.booleanValue();
        }
 else         if ("_cache_key".equals(currentFieldName) || "_cacheKey".equals(currentFieldName)) {
          cacheKey=new HashedBytesRef(parser.text());
        }
 else {
          throw new QueryParsingException(parseContext.index(),"[nested] filter does not support [" + currentFieldName + "]");
        }
      }
    }
    if (!queryFound && !filterFound) {
      throw new QueryParsingException(parseContext.index(),"[nested] requires either 'query' or 'filter' field");
    }
    if (path == null) {
      throw new QueryParsingException(parseContext.index(),"[nested] requires 'path' field");
    }
    if (query == null && filter == null) {
      return null;
    }
    if (filter != null) {
      query=new ConstantScoreQuery(filter);
    }
    query.setBoost(boost);
    MapperService.SmartNameObjectMapper mapper=parseContext.smartObjectMapper(path);
    if (mapper == null) {
      throw new QueryParsingException(parseContext.index(),"[nested] failed to find nested object under path [" + path + "]");
    }
    ObjectMapper objectMapper=mapper.mapper();
    if (objectMapper == null) {
      throw new QueryParsingException(parseContext.index(),"[nested] failed to find nested object under path [" + path + "]");
    }
    if (!objectMapper.nested().isNested()) {
      throw new QueryParsingException(parseContext.index(),"[nested] nested object under path [" + path + "] is not of nested type");
    }
    BitDocIdSetFilter childFilter=parseContext.bitsetFilter(objectMapper.nestedTypeFilter());
    usAsParentFilter.filter=childFilter;
    query=new FilteredQuery(query,childFilter);
    BitDocIdSetFilter parentFilter=currentParentFilterContext;
    if (parentFilter == null) {
      parentFilter=parseContext.bitsetFilter(NonNestedDocsFilter.INSTANCE);
    }
 else {
      parentFilter=parseContext.bitsetFilter(parentFilter);
    }
    Filter nestedFilter=Queries.wrap(new ToParentBlockJoinQuery(query,parentFilter,ScoreMode.None),parseContext);
    if (cache) {
      nestedFilter=parseContext.cacheFilter(nestedFilter,cacheKey,parseContext.autoFilterCachePolicy());
    }
    if (filterName != null) {
      parseContext.addNamedFilter(filterName,nestedFilter);
    }
    return nestedFilter;
  }
  finally {
    NestedQueryParser.parentFilterContext.set(currentParentFilterContext);
  }
}
