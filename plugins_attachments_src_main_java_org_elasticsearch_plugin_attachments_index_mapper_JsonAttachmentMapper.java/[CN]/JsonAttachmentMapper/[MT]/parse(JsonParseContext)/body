{
  byte[] content=null;
  String contentType=null;
  String name=null;
  JsonParser jp=jsonContext.jp();
  JsonToken token=jp.getCurrentToken();
  if (token == JsonToken.VALUE_STRING) {
    content=jp.getBinaryValue();
  }
 else {
    String currentFieldName=null;
    while ((token=jp.nextToken()) != JsonToken.END_OBJECT) {
      if (token == JsonToken.FIELD_NAME) {
        currentFieldName=jp.getCurrentName();
      }
 else       if (token == JsonToken.VALUE_STRING) {
        if ("content".equals(currentFieldName)) {
          content=jp.getBinaryValue();
        }
 else         if ("_content_type".equals(currentFieldName)) {
          contentType=jp.getText();
        }
 else         if ("_name".equals(currentFieldName)) {
          name=jp.getText();
        }
      }
    }
  }
  Metadata metadata=new Metadata();
  if (contentType != null) {
    metadata.add(Metadata.CONTENT_TYPE,contentType);
  }
  if (name != null) {
    metadata.add(Metadata.RESOURCE_NAME_KEY,name);
  }
  String parsedContent;
  try {
    parsedContent=tika().parseToString(new FastByteArrayInputStream(content),metadata);
  }
 catch (  TikaException e) {
    throw new MapperParsingException("Failed to extract text for [" + name + "]",e);
  }
  jsonContext.externalValue(parsedContent);
  contentMapper.parse(jsonContext);
  jsonContext.externalValue(metadata.get(Metadata.DATE));
  dateMapper.parse(jsonContext);
  jsonContext.externalValue(metadata.get(Metadata.TITLE));
  titleMapper.parse(jsonContext);
  jsonContext.externalValue(metadata.get(Metadata.AUTHOR));
  authorMapper.parse(jsonContext);
  jsonContext.externalValue(metadata.get(Metadata.KEYWORDS));
  keywordsMapper.parse(jsonContext);
}
