{
  HttpHost host=new HttpHost("localhost",9200,getRandom().nextBoolean() ? "http" : "https");
  URI uri=new URI("/index/type/_api");
  HttpRequestBase request;
  int requestType=RandomInts.randomIntBetween(getRandom(),0,7);
switch (requestType) {
case 0:
    request=new HttpGetWithEntity(uri);
  break;
case 1:
request=new HttpPost(uri);
break;
case 2:
request=new HttpPut(uri);
break;
case 3:
request=new HttpDeleteWithEntity(uri);
break;
case 4:
request=new HttpHead(uri);
break;
case 5:
request=new HttpTrace(uri);
break;
case 6:
request=new HttpOptions(uri);
break;
case 7:
request=new HttpPatch(uri);
break;
default :
throw new UnsupportedOperationException();
}
String expected="curl -iX " + request.getMethod() + " '"+ host+ uri+ "'";
boolean hasBody=request instanceof HttpEntityEnclosingRequest && getRandom().nextBoolean();
String requestBody="{ \"field\": \"value\" }";
if (hasBody) {
expected+=" -d '" + requestBody + "'";
HttpEntityEnclosingRequest enclosingRequest=(HttpEntityEnclosingRequest)request;
HttpEntity entity;
if (getRandom().nextBoolean()) {
entity=new StringEntity(requestBody,StandardCharsets.UTF_8);
}
 else {
entity=new InputStreamEntity(new ByteArrayInputStream(requestBody.getBytes(StandardCharsets.UTF_8)));
}
enclosingRequest.setEntity(entity);
}
String traceRequest=RequestLogger.buildTraceRequest(request,host);
assertThat(traceRequest,equalTo(expected));
if (hasBody) {
String body=EntityUtils.toString(((HttpEntityEnclosingRequest)request).getEntity(),StandardCharsets.UTF_8);
assertThat(body,equalTo(requestBody));
}
}
