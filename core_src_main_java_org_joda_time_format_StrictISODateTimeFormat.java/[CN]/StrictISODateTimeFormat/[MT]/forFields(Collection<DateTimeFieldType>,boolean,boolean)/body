{
  if (fields == null || fields.size() == 0) {
    throw new IllegalArgumentException("The fields must not be null or empty");
  }
  Set<DateTimeFieldType> workingFields=new HashSet<DateTimeFieldType>(fields);
  int inputSize=workingFields.size();
  boolean reducedPrec=false;
  DateTimeFormatterBuilder bld=new DateTimeFormatterBuilder();
  if (workingFields.contains(DateTimeFieldType.monthOfYear())) {
    reducedPrec=dateByMonth(bld,workingFields,extended,strictISO);
  }
 else   if (workingFields.contains(DateTimeFieldType.dayOfYear())) {
    reducedPrec=dateByOrdinal(bld,workingFields,extended);
  }
 else   if (workingFields.contains(DateTimeFieldType.weekOfWeekyear())) {
    reducedPrec=dateByWeek(bld,workingFields,extended,strictISO);
  }
 else   if (workingFields.contains(DateTimeFieldType.dayOfMonth())) {
    reducedPrec=dateByMonth(bld,workingFields,extended,strictISO);
  }
 else   if (workingFields.contains(DateTimeFieldType.dayOfWeek())) {
    reducedPrec=dateByWeek(bld,workingFields,extended,strictISO);
  }
 else   if (workingFields.remove(DateTimeFieldType.year())) {
    bld.append(Constants.ye);
    reducedPrec=true;
  }
 else   if (workingFields.remove(DateTimeFieldType.weekyear())) {
    bld.append(Constants.we);
    reducedPrec=true;
  }
  boolean datePresent=(workingFields.size() < inputSize);
  time(bld,workingFields,extended,strictISO,reducedPrec,datePresent);
  if (bld.canBuildFormatter() == false) {
    throw new IllegalArgumentException("No valid format for fields: " + fields);
  }
  try {
    fields.retainAll(workingFields);
  }
 catch (  UnsupportedOperationException ex) {
  }
  return bld.toFormatter();
}
