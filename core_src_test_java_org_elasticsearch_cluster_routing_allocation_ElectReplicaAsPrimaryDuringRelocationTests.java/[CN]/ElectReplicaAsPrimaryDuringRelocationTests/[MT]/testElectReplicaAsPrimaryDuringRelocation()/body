{
  AllocationService strategy=createAllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries",10).build());
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(2).numberOfReplicas(1)).build();
  RoutingTable initialRoutingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();
  logger.info("Adding two nodes and performing rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1")).add(newNode("node2"))).build();
  clusterState=strategy.reroute(clusterState,"reroute");
  logger.info("Start the primary shards");
  RoutingNodes routingNodes=clusterState.getRoutingNodes();
  clusterState=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  logger.info("Start the replica shards");
  routingNodes=clusterState.getRoutingNodes();
  ClusterState resultingState=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  assertThat(resultingState,not(equalTo(clusterState)));
  clusterState=resultingState;
  routingNodes=clusterState.getRoutingNodes();
  assertThat(clusterState.routingTable().index("test").shards().size(),equalTo(2));
  assertThat(routingNodes.node("node1").numberOfShardsWithState(STARTED),equalTo(2));
  assertThat(routingNodes.node("node2").numberOfShardsWithState(STARTED),equalTo(2));
  logger.info("Start another node and perform rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode("node3"))).build();
  clusterState=strategy.reroute(clusterState,"reroute");
  logger.info("find the replica shard that gets relocated");
  IndexShardRoutingTable indexShardRoutingTable=null;
  if (clusterState.routingTable().index("test").shard(0).replicaShards().get(0).relocating()) {
    indexShardRoutingTable=clusterState.routingTable().index("test").shard(0);
  }
 else   if (clusterState.routingTable().index("test").shard(1).replicaShards().get(0).relocating()) {
    indexShardRoutingTable=clusterState.routingTable().index("test").shard(1);
  }
  if (indexShardRoutingTable != null) {
    logger.info("kill the node [{}] of the primary shard for the relocating replica",indexShardRoutingTable.primaryShard().currentNodeId());
    clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove(indexShardRoutingTable.primaryShard().currentNodeId())).build();
    clusterState=strategy.deassociateDeadNodes(clusterState,true,"reroute");
    logger.info("make sure all the primary shards are active");
    assertThat(clusterState.routingTable().index("test").shard(0).primaryShard().active(),equalTo(true));
    assertThat(clusterState.routingTable().index("test").shard(1).primaryShard().active(),equalTo(true));
  }
}
