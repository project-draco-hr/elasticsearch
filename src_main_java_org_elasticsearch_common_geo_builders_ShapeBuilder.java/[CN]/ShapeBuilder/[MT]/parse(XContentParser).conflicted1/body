{
  if (parser.currentToken() == XContentParser.Token.VALUE_NULL) {
    return null;
  }
 else   if (parser.currentToken() != XContentParser.Token.START_OBJECT) {
    throw new ElasticsearchParseException("Shape must be an object consisting of type and coordinates");
  }
  GeoShapeType shapeType=null;
  Distance radius=null;
  CoordinateNode node=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      String fieldName=parser.currentName();
      if (FIELD_TYPE.equals(fieldName)) {
        parser.nextToken();
        shapeType=GeoShapeType.forName(parser.text());
      }
 else       if (FIELD_COORDINATES.equals(fieldName)) {
        parser.nextToken();
        node=parseCoordinates(parser);
      }
 else       if (CircleBuilder.FIELD_RADIUS.equals(fieldName)) {
        parser.nextToken();
        radius=Distance.parseDistance(parser.text());
      }
 else {
        parser.nextToken();
        parser.skipChildren();
      }
    }
  }
  if (shapeType == null) {
    throw new ElasticsearchParseException("Shape type not included");
  }
 else   if (node == null) {
    throw new ElasticsearchParseException("Coordinates not included");
  }
 else   if (radius != null && GeoShapeType.CIRCLE != shapeType) {
    throw new ElasticsearchParseException("Field [" + CircleBuilder.FIELD_RADIUS + "] is supported for ["+ CircleBuilder.TYPE+ "] only");
  }
switch (shapeType) {
case POINT:
    return parsePoint(node);
case MULTIPOINT:
  return parseMultiPoint(node);
case LINESTRING:
return parseLineString(node);
case MULTILINESTRING:
return parseMultiLine(node);
case POLYGON:
return parsePolygon(node);
case MULTIPOLYGON:
return parseMultiPolygon(node);
case CIRCLE:
return parseCircle(node,radius);
case ENVELOPE:
return parseEnvelope(node);
default :
throw new ElasticsearchParseException("Shape type [" + shapeType + "] not included");
}
}
