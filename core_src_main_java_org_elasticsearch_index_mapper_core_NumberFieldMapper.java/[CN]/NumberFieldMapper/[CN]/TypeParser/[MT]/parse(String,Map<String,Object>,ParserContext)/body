{
  if (parserContext.indexVersionCreated().before(Version.V_5_0_0)) {
switch (type) {
case BYTE:
      return new LegacyByteFieldMapper.TypeParser().parse(name,node,parserContext);
case SHORT:
    return new LegacyShortFieldMapper.TypeParser().parse(name,node,parserContext);
case INTEGER:
  return new LegacyIntegerFieldMapper.TypeParser().parse(name,node,parserContext);
case LONG:
return new LegacyLongFieldMapper.TypeParser().parse(name,node,parserContext);
case FLOAT:
return new LegacyFloatFieldMapper.TypeParser().parse(name,node,parserContext);
case DOUBLE:
return new LegacyDoubleFieldMapper.TypeParser().parse(name,node,parserContext);
default :
throw new AssertionError();
}
}
Builder builder=new Builder(name,type);
TypeParsers.parseField(builder,name,node,parserContext);
for (Iterator<Map.Entry<String,Object>> iterator=node.entrySet().iterator(); iterator.hasNext(); ) {
Map.Entry<String,Object> entry=iterator.next();
String propName=entry.getKey();
Object propNode=entry.getValue();
if (propName.equals("null_value")) {
if (propNode == null) {
throw new MapperParsingException("Property [null_value] cannot be null.");
}
builder.nullValue(type.parse(propNode));
iterator.remove();
}
 else if (propName.equals("ignore_malformed")) {
builder.ignoreMalformed(TypeParsers.nodeBooleanValue("ignore_malformed",propNode,parserContext));
iterator.remove();
}
 else if (propName.equals("coerce")) {
builder.coerce(TypeParsers.nodeBooleanValue("coerce",propNode,parserContext));
iterator.remove();
}
}
return builder;
}
