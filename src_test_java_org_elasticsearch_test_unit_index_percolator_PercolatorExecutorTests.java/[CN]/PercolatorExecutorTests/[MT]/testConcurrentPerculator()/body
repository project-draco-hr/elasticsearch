{
  XContentBuilder bothQueriesB=XContentFactory.jsonBuilder().startObject().startObject("doc").field("field1",1).field("field2","value").endObject().endObject();
  final BytesReference bothQueries=bothQueriesB.bytes();
  XContentBuilder onlyTest1B=XContentFactory.jsonBuilder().startObject().startObject("doc").field("field2","value").endObject().endObject();
  XContentBuilder onlyTest2B=XContentFactory.jsonBuilder().startObject().startObject("doc").field("field1",1).endObject().endObject();
  final BytesReference onlyTest1=onlyTest1B.bytes();
  final BytesReference onlyTest2=onlyTest2B.bytes();
  final PercolatorExecutor executor=this.percolatorExecutor;
  percolatorExecutor.clearQueries();
  PercolatorExecutor.Response percolate=percolatorExecutor.percolate(new PercolatorExecutor.SourceRequest("type1",bothQueries));
  assertThat(percolate.matches(),hasSize(0));
  executor.addQuery("test1",termQuery("field2","value"));
  executor.addQuery("test2",termQuery("field1",1));
  final IndexSettingsService settingsService=injector.getInstance(IndexSettingsService.class);
  final CountDownLatch start=new CountDownLatch(1);
  final AtomicBoolean stop=new AtomicBoolean(false);
  final AtomicInteger counts=new AtomicInteger(0);
  Thread[] threads=new Thread[5];
  for (int i=0; i < threads.length; i++) {
    threads[i]=new Thread(){
      public void run(){
        try {
          start.await();
          PercolatorExecutor.Response percolate;
          while (!stop.get()) {
            int count=counts.incrementAndGet();
            if ((count % 100) == 0) {
              ImmutableSettings.Builder builder=ImmutableSettings.settingsBuilder();
              builder.put(PercolatorExecutor.PERCOLATE_POOL_MAX_MEMORY,1 + (counts.get() % 10),ByteSizeUnit.MB);
              builder.put(PercolatorExecutor.PERCOLATE_POOL_SIZE,1 + (counts.get() % 10));
              builder.put(PercolatorExecutor.PERCOLATE_TIMEOUT,1 + (counts.get() % 1000),TimeUnit.MILLISECONDS);
              settingsService.refreshSettings(builder.build());
            }
            if ((count > 10000)) {
              stop.set(true);
            }
            if (count % 3 == 0) {
              percolate=executor.percolate(new PercolatorExecutor.SourceRequest("type1",bothQueries));
              assertThat(percolate.matches(),hasSize(2));
              assertThat(percolate.matches(),hasItems("test1","test2"));
            }
 else             if (count % 3 == 1) {
              percolate=executor.percolate(new PercolatorExecutor.SourceRequest("type1",onlyTest1));
              assertThat(percolate.matches(),hasSize(1));
              assertThat(percolate.matches(),hasItems("test1"));
            }
 else {
              percolate=executor.percolate(new PercolatorExecutor.SourceRequest("type1",onlyTest2));
              assertThat(percolate.matches(),hasSize(1));
              assertThat(percolate.matches(),hasItems("test2"));
            }
          }
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
          return;
        }
      }
    }
;
    threads[i].start();
  }
  start.countDown();
  for (  Thread thread : threads) {
    thread.join();
  }
}
