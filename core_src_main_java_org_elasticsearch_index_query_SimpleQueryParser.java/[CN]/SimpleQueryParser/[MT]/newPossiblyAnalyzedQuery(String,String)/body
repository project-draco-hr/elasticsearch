{
  List<List<String>> tlist=new ArrayList<>();
  try (TokenStream source=getAnalyzer().tokenStream(field,termStr)){
    source.reset();
    List<String> currentPos=new ArrayList<>();
    CharTermAttribute termAtt=source.addAttribute(CharTermAttribute.class);
    PositionIncrementAttribute posAtt=source.addAttribute(PositionIncrementAttribute.class);
    try {
      boolean hasMoreTokens=source.incrementToken();
      while (hasMoreTokens) {
        if (currentPos.isEmpty() == false && posAtt.getPositionIncrement() > 0) {
          tlist.add(currentPos);
          currentPos=new ArrayList<>();
        }
        currentPos.add(termAtt.toString());
        hasMoreTokens=source.incrementToken();
      }
      if (currentPos.isEmpty() == false) {
        tlist.add(currentPos);
      }
    }
 catch (    IOException e) {
    }
  }
 catch (  IOException e) {
    return new PrefixQuery(new Term(field,termStr));
  }
  if (tlist.size() == 0) {
    return null;
  }
  if (tlist.size() == 1 && tlist.get(0).size() == 1) {
    return new PrefixQuery(new Term(field,tlist.get(0).get(0)));
  }
  BooleanQuery.Builder builder=new BooleanQuery.Builder();
  for (int pos=0; pos < tlist.size(); pos++) {
    List<String> plist=tlist.get(pos);
    boolean isLastPos=(pos == tlist.size() - 1);
    Query posQuery;
    if (plist.size() == 1) {
      if (isLastPos) {
        posQuery=new PrefixQuery(new Term(field,plist.get(0)));
      }
 else {
        posQuery=newTermQuery(new Term(field,plist.get(0)));
      }
    }
 else     if (isLastPos == false) {
      Term[] terms=new Term[plist.size()];
      for (int i=0; i < plist.size(); i++) {
        terms[i]=new Term(field,plist.get(i));
      }
      posQuery=new SynonymQuery(terms);
    }
 else {
      BooleanQuery.Builder innerBuilder=new BooleanQuery.Builder();
      for (      String token : plist) {
        innerBuilder.add(new BooleanClause(new PrefixQuery(new Term(field,token)),BooleanClause.Occur.SHOULD));
      }
      posQuery=innerBuilder.setDisableCoord(true).build();
    }
    builder.add(new BooleanClause(posQuery,getDefaultOperator()));
  }
  return builder.build();
}
