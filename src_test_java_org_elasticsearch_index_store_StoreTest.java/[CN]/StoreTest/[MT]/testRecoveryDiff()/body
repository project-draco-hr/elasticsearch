{
  int numDocs=2 + random().nextInt(100);
  List<Document> docs=new ArrayList<>();
  for (int i=0; i < numDocs; i++) {
    Document doc=new Document();
    doc.add(new StringField("id","" + i,random().nextBoolean() ? Field.Store.YES : Field.Store.NO));
    doc.add(new TextField("body",TestUtil.randomRealisticUnicodeString(random()),random().nextBoolean() ? Field.Store.YES : Field.Store.NO));
    doc.add(new SortedDocValuesField("dv",new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));
    docs.add(doc);
  }
  long seed=random().nextLong();
  Store.MetadataSnapshot first;
{
    Random random=new Random(seed);
    IndexWriterConfig iwc=new IndexWriterConfig(new MockAnalyzer(random)).setCodec(TestUtil.getDefaultCodec());
    iwc.setMergePolicy(NoMergePolicy.INSTANCE);
    iwc.setUseCompoundFile(random.nextBoolean());
    iwc.setMaxThreadStates(1);
    final ShardId shardId=new ShardId(new Index("index"),1);
    DirectoryService directoryService=new LuceneManagedDirectoryService(random);
    Store store=new Store(shardId,ImmutableSettings.EMPTY,directoryService,randomDistributor(random,directoryService),new DummyShardLock(shardId));
    IndexWriter writer=new IndexWriter(store.directory(),iwc);
    final boolean lotsOfSegments=rarely(random);
    for (    Document d : docs) {
      writer.addDocument(d);
      if (lotsOfSegments && random.nextBoolean()) {
        writer.commit();
      }
 else       if (rarely(random)) {
        writer.commit();
      }
    }
    writer.commit();
    writer.close();
    first=store.getMetadata();
    assertDeleteContent(store,directoryService);
    store.close();
  }
  long time=new Date().getTime();
  while (time == new Date().getTime()) {
    Thread.sleep(10);
  }
  Store.MetadataSnapshot second;
  Store store;
{
    Random random=new Random(seed);
    IndexWriterConfig iwc=new IndexWriterConfig(new MockAnalyzer(random)).setCodec(TestUtil.getDefaultCodec());
    iwc.setMergePolicy(NoMergePolicy.INSTANCE);
    iwc.setUseCompoundFile(random.nextBoolean());
    iwc.setMaxThreadStates(1);
    final ShardId shardId=new ShardId(new Index("index"),1);
    DirectoryService directoryService=new LuceneManagedDirectoryService(random);
    store=new Store(shardId,ImmutableSettings.EMPTY,directoryService,randomDistributor(random,directoryService),new DummyShardLock(shardId));
    IndexWriter writer=new IndexWriter(store.directory(),iwc);
    final boolean lotsOfSegments=rarely(random);
    for (    Document d : docs) {
      writer.addDocument(d);
      if (lotsOfSegments && random.nextBoolean()) {
        writer.commit();
      }
 else       if (rarely(random)) {
        writer.commit();
      }
    }
    writer.commit();
    writer.close();
    second=store.getMetadata();
  }
  Store.RecoveryDiff diff=first.recoveryDiff(second);
  assertThat(first.size(),equalTo(second.size()));
  for (  StoreFileMetaData md : first) {
    assertThat(second.get(md.name()),notNullValue());
    assertThat(second.get(md.name()).isSame(md),equalTo(false));
  }
  assertThat(diff.different.size(),equalTo(first.size()));
  assertThat(diff.identical.size(),equalTo(0));
  assertThat(diff.missing,empty());
  Store.RecoveryDiff selfDiff=first.recoveryDiff(first);
  assertThat(selfDiff.identical.size(),equalTo(first.size()));
  assertThat(selfDiff.different,empty());
  assertThat(selfDiff.missing,empty());
  Random random=new Random(seed);
  IndexWriterConfig iwc=new IndexWriterConfig(new MockAnalyzer(random)).setCodec(TestUtil.getDefaultCodec());
  iwc.setMergePolicy(NoMergePolicy.INSTANCE);
  iwc.setUseCompoundFile(random.nextBoolean());
  iwc.setMaxThreadStates(1);
  iwc.setOpenMode(IndexWriterConfig.OpenMode.APPEND);
  IndexWriter writer=new IndexWriter(store.directory(),iwc);
  writer.deleteDocuments(new Term("id",Integer.toString(random().nextInt(numDocs))));
  writer.commit();
  writer.close();
  Store.MetadataSnapshot metadata=store.getMetadata();
  StoreFileMetaData delFile=null;
  for (  StoreFileMetaData md : metadata) {
    if (md.name().endsWith(".liv")) {
      delFile=md;
      break;
    }
  }
  Store.RecoveryDiff afterDeleteDiff=metadata.recoveryDiff(second);
  if (delFile != null) {
    assertThat(afterDeleteDiff.identical.size(),equalTo(metadata.size() - 2));
    assertThat(afterDeleteDiff.different.size(),equalTo(0));
    assertThat(afterDeleteDiff.missing.size(),equalTo(2));
  }
 else {
    assertThat(afterDeleteDiff.identical.size(),greaterThan(0));
    assertThat(afterDeleteDiff.different.size(),equalTo(0));
    assertThat(afterDeleteDiff.missing.size(),equalTo(1));
  }
  selfDiff=metadata.recoveryDiff(metadata);
  assertThat(selfDiff.identical.size(),equalTo(metadata.size()));
  assertThat(selfDiff.different,empty());
  assertThat(selfDiff.missing,empty());
  iwc=new IndexWriterConfig(new MockAnalyzer(random)).setCodec(TestUtil.getDefaultCodec());
  iwc.setMergePolicy(NoMergePolicy.INSTANCE);
  iwc.setUseCompoundFile(true);
  iwc.setMaxThreadStates(1);
  iwc.setOpenMode(IndexWriterConfig.OpenMode.APPEND);
  writer=new IndexWriter(store.directory(),iwc);
  writer.addDocument(docs.get(0));
  writer.close();
  Store.MetadataSnapshot newCommitMetaData=store.getMetadata();
  Store.RecoveryDiff newCommitDiff=newCommitMetaData.recoveryDiff(metadata);
  if (delFile != null) {
    assertThat(newCommitDiff.identical.size(),equalTo(newCommitMetaData.size() - 5));
    assertThat(newCommitDiff.different.size(),equalTo(1));
    assertThat(newCommitDiff.different.get(0).name(),endsWith(".liv"));
    assertThat(newCommitDiff.missing.size(),equalTo(4));
  }
 else {
    assertThat(newCommitDiff.identical.size(),equalTo(newCommitMetaData.size() - 4));
    assertThat(newCommitDiff.different.size(),equalTo(0));
    assertThat(newCommitDiff.missing.size(),equalTo(4));
  }
  deleteContent(store.directory());
  IOUtils.close(store);
}
