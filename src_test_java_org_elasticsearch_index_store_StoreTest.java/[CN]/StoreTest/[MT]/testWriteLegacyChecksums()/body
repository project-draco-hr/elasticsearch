{
  final ShardId shardId=new ShardId(new Index("index"),1);
  DirectoryService directoryService=new LuceneManagedDirectoryService();
  Store store=new Store(shardId,ImmutableSettings.EMPTY,null,null,directoryService,randomDistributor(directoryService));
  IndexWriter writer=new IndexWriter(store.directory(),newIndexWriterConfig(random(),TEST_VERSION_CURRENT,new MockAnalyzer(random())).setCodec(actualDefaultCodec()));
  int docs=1 + random().nextInt(100);
  for (int i=0; i < docs; i++) {
    Document doc=new Document();
    doc.add(new TextField("id","" + i,random().nextBoolean() ? Field.Store.YES : Field.Store.NO));
    doc.add(new TextField("body",TestUtil.randomRealisticUnicodeString(random()),random().nextBoolean() ? Field.Store.YES : Field.Store.NO));
    doc.add(new SortedDocValuesField("dv",new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));
    writer.addDocument(doc);
  }
  if (random().nextBoolean()) {
    for (int i=0; i < docs; i++) {
      if (random().nextBoolean()) {
        Document doc=new Document();
        doc.add(new TextField("id","" + i,random().nextBoolean() ? Field.Store.YES : Field.Store.NO));
        doc.add(new TextField("body",TestUtil.randomRealisticUnicodeString(random()),random().nextBoolean() ? Field.Store.YES : Field.Store.NO));
        writer.updateDocument(new Term("id","" + i),doc);
      }
    }
  }
  if (random().nextBoolean()) {
    DirectoryReader.open(writer,random().nextBoolean()).close();
  }
  Store.MetadataSnapshot metadata=store.getMetadata();
  assertThat(metadata.asMap().isEmpty(),is(true));
  writer.commit();
  Store.LegacyChecksums checksums=new Store.LegacyChecksums();
  Map<String,StoreFileMetaData> legacyMeta=new HashMap<>();
  for (  String file : store.directory().listAll()) {
    if (file.equals("write.lock")) {
      continue;
    }
    try (IndexInput input=store.directory().openInput(file,IOContext.READONCE)){
      String checksum=Store.digestToString(CodecUtil.retrieveChecksum(input));
      StoreFileMetaData storeFileMetaData=new StoreFileMetaData(file,store.directory().fileLength(file),checksum,null);
      legacyMeta.put(file,storeFileMetaData);
      checksums.add(storeFileMetaData);
    }
   }
  checksums.write(store);
  metadata=store.getMetadata();
  Map<String,StoreFileMetaData> stringStoreFileMetaDataMap=metadata.asMap();
  assertThat(legacyMeta.size(),equalTo(stringStoreFileMetaDataMap.size()));
  for (  StoreFileMetaData meta : legacyMeta.values()) {
    assertTrue(stringStoreFileMetaDataMap.containsKey(meta.name()));
    assertTrue(stringStoreFileMetaDataMap.get(meta.name()).isSame(meta));
  }
  writer.close();
  assertDeleteContent(store,directoryService);
  IOUtils.close(store);
}
