{
  final ShardId shardId=new ShardId(new Index("index"),1);
  DirectoryService directoryService=new LuceneManagedDirectoryService(false);
  Store store=new Store(shardId,ImmutableSettings.EMPTY,null,null,directoryService,randomDistributor(directoryService));
{
    IndexOutput output=store.directory().createOutput("foo.bar",IOContext.DEFAULT);
    int iters=scaledRandomIntBetween(10,100);
    for (int i=0; i < iters; i++) {
      BytesRef bytesRef=new BytesRef(TestUtil.randomRealisticUnicodeString(random(),10,1024));
      output.writeBytes(bytesRef.bytes,bytesRef.offset,bytesRef.length);
    }
    CodecUtil.writeFooter(output);
    output.close();
  }
  store.renameFile("foo.bar","bar.foo");
  assertThat(store.directory().listAll().length,is(1));
  final long lastChecksum;
  try (IndexInput input=store.directory().openInput("bar.foo",IOContext.DEFAULT)){
    lastChecksum=CodecUtil.checksumEntireFile(input);
  }
   try {
    store.directory().openInput("foo.bar",IOContext.DEFAULT);
    fail("file was renamed");
  }
 catch (  FileNotFoundException|NoSuchFileException ex) {
  }
{
    IndexOutput output=store.directory().createOutput("foo.bar",IOContext.DEFAULT);
    int iters=scaledRandomIntBetween(10,100);
    for (int i=0; i < iters; i++) {
      BytesRef bytesRef=new BytesRef(TestUtil.randomRealisticUnicodeString(random(),10,1024));
      output.writeBytes(bytesRef.bytes,bytesRef.offset,bytesRef.length);
    }
    CodecUtil.writeFooter(output);
    output.close();
  }
  try {
    store.renameFile("foo.bar","bar.foo");
    fail("targe file already exists");
  }
 catch (  IOException ex) {
  }
  try (IndexInput input=store.directory().openInput("bar.foo",IOContext.DEFAULT)){
    assertThat(lastChecksum,equalTo(CodecUtil.checksumEntireFile(input)));
  }
   assertThat(store.directory().listAll().length,is(2));
  assertDeleteContent(store,directoryService);
  IOUtils.close(store);
}
