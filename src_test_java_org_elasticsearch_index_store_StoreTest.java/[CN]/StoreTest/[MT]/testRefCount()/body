{
  final ShardId shardId=new ShardId(new Index("index"),1);
  DirectoryService directoryService=new LuceneManagedDirectoryService(random());
  Store store=new Store(shardId,ImmutableSettings.EMPTY,directoryService,randomDistributor(directoryService),new DummyShardLock(shardId));
  int incs=randomIntBetween(1,100);
  for (int i=0; i < incs; i++) {
    if (randomBoolean()) {
      store.incRef();
    }
 else {
      assertTrue(store.tryIncRef());
    }
    store.ensureOpen();
  }
  for (int i=0; i < incs; i++) {
    store.decRef();
    store.ensureOpen();
  }
  store.incRef();
  final AtomicBoolean called=new AtomicBoolean(false);
  Store.OnCloseListener listener=new Store.OnCloseListener(){
    @Override public void onClose(    ShardId shardId){
      assertTrue(called.compareAndSet(false,true));
    }
  }
;
  store.close(listener);
  for (int i=0; i < incs; i++) {
    if (randomBoolean()) {
      store.incRef();
    }
 else {
      assertTrue(store.tryIncRef());
    }
    store.ensureOpen();
  }
  for (int i=0; i < incs; i++) {
    store.decRef();
    store.ensureOpen();
  }
  assertFalse(called.get());
  store.decRef();
  assertTrue(called.get());
  assertFalse(store.tryIncRef());
  try {
    store.incRef();
    fail(" expected exception");
  }
 catch (  AlreadyClosedException ex) {
  }
  try {
    store.ensureOpen();
    fail(" expected exception");
  }
 catch (  AlreadyClosedException ex) {
  }
}
