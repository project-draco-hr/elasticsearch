{
  final ShardId shardId=new ShardId(new Index("index"),1);
  DirectoryService directoryService=new LuceneManagedDirectoryService(random());
  Store store=new Store(shardId,ImmutableSettings.EMPTY,null,directoryService,randomDistributor(directoryService),new DummyShardLock(shardId));
  IndexWriter writer=new IndexWriter(store.directory(),newIndexWriterConfig(random(),new MockAnalyzer(random())).setCodec(actualDefaultCodec()));
  int docs=1 + random().nextInt(100);
  for (int i=0; i < docs; i++) {
    Document doc=new Document();
    doc.add(new TextField("id","" + i,random().nextBoolean() ? Field.Store.YES : Field.Store.NO));
    doc.add(new TextField("body",TestUtil.randomRealisticUnicodeString(random()),random().nextBoolean() ? Field.Store.YES : Field.Store.NO));
    doc.add(new SortedDocValuesField("dv",new BytesRef(TestUtil.randomRealisticUnicodeString(random()))));
    writer.addDocument(doc);
  }
  if (random().nextBoolean()) {
    for (int i=0; i < docs; i++) {
      if (random().nextBoolean()) {
        Document doc=new Document();
        doc.add(new TextField("id","" + i,random().nextBoolean() ? Field.Store.YES : Field.Store.NO));
        doc.add(new TextField("body",TestUtil.randomRealisticUnicodeString(random()),random().nextBoolean() ? Field.Store.YES : Field.Store.NO));
        writer.updateDocument(new Term("id","" + i),doc);
      }
    }
  }
  if (random().nextBoolean()) {
    DirectoryReader.open(writer,random().nextBoolean()).close();
  }
  Store.MetadataSnapshot metadata;
  try {
    store.getMetadata();
    fail("no index present - expected exception");
  }
 catch (  IndexNotFoundException ex) {
  }
  assertThat(store.getMetadataOrEmpty(),is(Store.MetadataSnapshot.EMPTY));
  writer.commit();
  writer.close();
  Store.LegacyChecksums checksums=new Store.LegacyChecksums();
  metadata=store.getMetadata();
  assertThat(metadata.asMap().isEmpty(),is(false));
  for (  StoreFileMetaData meta : metadata) {
    try (IndexInput input=store.directory().openInput(meta.name(),IOContext.DEFAULT)){
      if (meta.checksum() == null) {
        String checksum=null;
        try {
          CodecUtil.retrieveChecksum(input);
          fail("expected a corrupt index - posting format has not checksums");
        }
 catch (        CorruptIndexException|IndexFormatTooOldException|IndexFormatTooNewException ex) {
          try (ChecksumIndexInput checksumIndexInput=store.directory().openChecksumInput(meta.name(),IOContext.DEFAULT)){
            checksumIndexInput.seek(meta.length());
            checksum=Store.digestToString(checksumIndexInput.getChecksum());
          }
           checksums.add(new StoreFileMetaData(meta.name(),meta.length(),checksum,null));
        }
      }
 else {
        String checksum=Store.digestToString(CodecUtil.retrieveChecksum(input));
        assertThat("File: " + meta.name() + " has a different checksum",meta.checksum(),equalTo(checksum));
        assertThat(meta.hasLegacyChecksum(),equalTo(false));
        assertThat(meta.writtenBy(),equalTo(Version.LATEST));
      }
    }
   }
  assertConsistent(store,metadata);
  checksums.write(store);
  metadata=store.getMetadata();
  assertThat(metadata.asMap().isEmpty(),is(false));
  for (  StoreFileMetaData meta : metadata) {
    assertThat("file: " + meta.name() + " has a null checksum",meta.checksum(),not(nullValue()));
    if (meta.hasLegacyChecksum()) {
      try (ChecksumIndexInput checksumIndexInput=store.directory().openChecksumInput(meta.name(),IOContext.DEFAULT)){
        checksumIndexInput.seek(meta.length());
        assertThat(meta.checksum(),equalTo(Store.digestToString(checksumIndexInput.getChecksum())));
      }
     }
 else {
      try (IndexInput input=store.directory().openInput(meta.name(),IOContext.DEFAULT)){
        String checksum=Store.digestToString(CodecUtil.retrieveChecksum(input));
        assertThat("File: " + meta.name() + " has a different checksum",meta.checksum(),equalTo(checksum));
        assertThat(meta.hasLegacyChecksum(),equalTo(false));
        assertThat(meta.writtenBy(),equalTo(Version.LATEST));
      }
     }
  }
  assertConsistent(store,metadata);
  TestUtil.checkIndex(store.directory());
  assertDeleteContent(store,directoryService);
  IOUtils.close(store);
}
