{
  final IndexMetaData indexMetaData=clusterService.state().metaData().index(context.shardId().index().name());
  if (indexMetaData == null) {
    return;
  }
  if (!indexMetaData.settings().getAsBoolean(INDEX_WARMER_ENABLED,settings.getAsBoolean(INDEX_WARMER_ENABLED,true))) {
    return;
  }
  IndexService indexService=indicesService.indexService(context.shardId().index().name());
  if (indexService == null) {
    return;
  }
  final IndexShard indexShard=indexService.shard(context.shardId().id());
  if (indexShard == null) {
    return;
  }
  if (logger.isTraceEnabled()) {
    if (topReader) {
      logger.trace("[{}][{}] top warming [{}]",context.shardId().index().name(),context.shardId().id(),context);
    }
 else {
      logger.trace("[{}][{}] warming [{}]",context.shardId().index().name(),context.shardId().id(),context);
    }
  }
  indexShard.warmerService().onPreWarm();
  long time=System.nanoTime();
  final List<TerminationHandle> terminationHandles=Lists.newArrayList();
  for (  final Listener listener : listeners) {
    if (topReader) {
      terminationHandles.add(listener.warmTopReader(indexShard,indexMetaData,context,threadPool));
    }
 else {
      terminationHandles.add(listener.warmNewReaders(indexShard,indexMetaData,context,threadPool));
    }
  }
  for (  TerminationHandle terminationHandle : terminationHandles) {
    try {
      terminationHandle.awaitTermination();
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      if (topReader) {
        logger.warn("top warming has been interrupted",e);
      }
 else {
        logger.warn("warming has been interrupted",e);
      }
      break;
    }
  }
  long took=System.nanoTime() - time;
  indexShard.warmerService().onPostWarm(took);
  if (indexShard.warmerService().logger().isTraceEnabled()) {
    if (topReader) {
      indexShard.warmerService().logger().trace("top warming took [{}]",new TimeValue(took,TimeUnit.NANOSECONDS));
    }
 else {
      indexShard.warmerService().logger().trace("warming took [{}]",new TimeValue(took,TimeUnit.NANOSECONDS));
    }
  }
}
