{
  final String index="test";
  final ShardId shardId=new ShardId(index,"_na_",0);
  setState(clusterService,state(index,true,ShardRoutingState.STARTED));
  logger.debug("--> using initial state:\n{}",clusterService.state().prettyPrint());
  Request request=new Request(shardId);
  PlainActionFuture<Response> listener=new PlainActionFuture<>();
  ReplicationTask task=maybeTask();
  int i=randomInt(3);
  final boolean throwExceptionOnCreation=i == 1;
  final boolean throwExceptionOnRun=i == 2;
  final boolean respondWithError=i == 3;
  action.new AsyncPrimaryAction(request,createTransportChannel(listener),task){
    @Override protected ReplicationOperation<Request,Request,Action.PrimaryResult> createReplicatedOperation(    Request request,    ActionListener<Action.PrimaryResult> actionListener,    Action.PrimaryShardReference primaryShardReference,    boolean executeOnReplicas){
      assertIndexShardCounter(1);
      if (throwExceptionOnCreation) {
        throw new ElasticsearchException("simulated exception, during createReplicatedOperation");
      }
      return new NoopReplicationOperation(request,actionListener){
        @Override public void execute() throws Exception {
          assertIndexShardCounter(1);
          assertPhase(task,"primary");
          if (throwExceptionOnRun) {
            throw new ElasticsearchException("simulated exception, during performOnPrimary");
          }
 else           if (respondWithError) {
            this.resultListener.onFailure(new ElasticsearchException("simulated exception, as a response"));
          }
 else {
            super.execute();
          }
        }
      }
;
    }
  }
.run();
  assertIndexShardCounter(0);
  assertTrue(listener.isDone());
  assertPhase(task,"finished");
  try {
    listener.get();
  }
 catch (  ExecutionException e) {
    if (throwExceptionOnCreation || throwExceptionOnRun || respondWithError) {
      Throwable cause=e.getCause();
      assertThat(cause,instanceOf(ElasticsearchException.class));
      assertThat(cause.getMessage(),containsString("simulated"));
    }
 else {
      throw e;
    }
  }
}
