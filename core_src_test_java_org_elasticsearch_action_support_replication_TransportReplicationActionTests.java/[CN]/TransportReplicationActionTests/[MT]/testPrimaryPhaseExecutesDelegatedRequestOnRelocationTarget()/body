{
  final String index="test";
  final ShardId shardId=new ShardId(index,"_na_",0);
  ClusterState state=state(index,true,ShardRoutingState.RELOCATING);
  String primaryTargetNodeId=state.getRoutingTable().shardRoutingTable(shardId).primaryShard().relocatingNodeId();
  state=ClusterState.builder(state).nodes(DiscoveryNodes.builder(state.nodes()).localNodeId(primaryTargetNodeId)).build();
  clusterService.setState(state);
  Request request=new Request(shardId).timeout("1ms");
  PlainActionFuture<Response> listener=new PlainActionFuture<>();
  ReplicationTask task=maybeTask();
  AtomicBoolean movedToReplication=new AtomicBoolean();
  TransportReplicationAction.PrimaryPhase primaryPhase=action.new PrimaryPhase(task,request,createTransportChannel(listener)){
    @Override void finishAndMoveToReplication(    TransportReplicationAction.ReplicationPhase replicationPhase){
      super.finishAndMoveToReplication(replicationPhase);
      movedToReplication.set(true);
    }
  }
;
  primaryPhase.run();
  assertThat("request was not processed on primary relocation target",request.processedOnPrimary.get(),equalTo(true));
  assertThat(movedToReplication.get(),equalTo(true));
  assertPhase(task,"replicating");
}
