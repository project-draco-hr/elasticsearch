{
  final String index="test";
  final ShardId shardId=new ShardId(index,"_na_",0);
  ClusterState state=state(index,true,ShardRoutingState.RELOCATING);
  String relocationTargetNode=state.getRoutingTable().shardRoutingTable(shardId).primaryShard().relocatingNodeId();
  state=ClusterState.builder(state).nodes(DiscoveryNodes.builder(state.nodes()).localNodeId(relocationTargetNode)).build();
  setState(clusterService,state);
  logger.debug("--> relocation ongoing state:\n{}",clusterService.state().prettyPrint());
  Request request=new Request(shardId).timeout("1ms").routedBasedOnClusterVersion(clusterService.state().version() + 1);
  PlainActionFuture<Response> listener=new PlainActionFuture<>();
  TransportReplicationAction.ReroutePhase reroutePhase=action.new ReroutePhase(null,request,listener);
  reroutePhase.run();
  assertListenerThrows("cluster state too old didn't cause a timeout",listener,UnavailableShardsException.class);
  request=new Request(shardId).routedBasedOnClusterVersion(clusterService.state().version() + 1);
  listener=new PlainActionFuture<>();
  reroutePhase=action.new ReroutePhase(null,request,listener);
  reroutePhase.run();
  assertFalse("cluster state too old didn't cause a retry",listener.isDone());
  ShardRouting relocationTarget=clusterService.state().getRoutingTable().shardRoutingTable(shardId).shardsWithState(ShardRoutingState.INITIALIZING).get(0);
  AllocationService allocationService=ESAllocationTestCase.createAllocationService();
  RoutingAllocation.Result result=allocationService.applyStartedShards(state,Arrays.asList(relocationTarget));
  ClusterState updatedState=ClusterState.builder(clusterService.state()).routingResult(result).build();
  setState(clusterService,updatedState);
  logger.debug("--> relocation complete state:\n{}",clusterService.state().prettyPrint());
  IndexShardRoutingTable shardRoutingTable=clusterService.state().routingTable().index(index).shard(shardId.id());
  final String primaryNodeId=shardRoutingTable.primaryShard().currentNodeId();
  final List<CapturingTransport.CapturedRequest> capturedRequests=transport.getCapturedRequestsByTargetNodeAndClear().get(primaryNodeId);
  assertThat(capturedRequests,notNullValue());
  assertThat(capturedRequests.size(),equalTo(1));
  assertThat(capturedRequests.get(0).action,equalTo("testAction[p]"));
  assertIndexShardCounter(0);
}
