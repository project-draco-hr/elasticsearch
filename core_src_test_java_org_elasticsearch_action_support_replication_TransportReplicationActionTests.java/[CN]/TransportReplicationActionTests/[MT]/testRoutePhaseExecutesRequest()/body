{
  final String index="test";
  final ShardId shardId=new ShardId(index,"_na_",0);
  ReplicationTask task=maybeTask();
  setState(clusterService,stateWithActivePrimary(index,randomBoolean(),3));
  logger.debug("using state: \n{}",clusterService.state().prettyPrint());
  final IndexShardRoutingTable shardRoutingTable=clusterService.state().routingTable().index(index).shard(shardId.id());
  final String primaryNodeId=shardRoutingTable.primaryShard().currentNodeId();
  Request request=new Request(shardId);
  PlainActionFuture<Response> listener=new PlainActionFuture<>();
  Action.ReroutePhase reroutePhase=action.new ReroutePhase(task,request,listener);
  reroutePhase.run();
  assertThat(request.shardId(),equalTo(shardId));
  logger.info("--> primary is assigned to [{}], checking request forwarded",primaryNodeId);
  final List<CapturingTransport.CapturedRequest> capturedRequests=transport.getCapturedRequestsByTargetNodeAndClear().get(primaryNodeId);
  assertThat(capturedRequests,notNullValue());
  assertThat(capturedRequests.size(),equalTo(1));
  if (clusterService.state().nodes().getLocalNodeId().equals(primaryNodeId)) {
    assertThat(capturedRequests.get(0).action,equalTo("testAction[p]"));
    assertPhase(task,"waiting_on_primary");
  }
 else {
    assertThat(capturedRequests.get(0).action,equalTo("testAction"));
    assertPhase(task,"rerouted");
  }
  assertFalse(request.isRetrySet.get());
  assertIndexShardUninitialized();
}
