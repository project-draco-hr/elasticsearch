{
  final String index="test";
  final ShardId shardId=new ShardId(index,0);
  clusterService.setState(state(index,true,ShardRoutingState.STARTED,ShardRoutingState.STARTED));
  logger.debug("--> using initial state:\n{}",clusterService.state().prettyPrint());
  final ClusterState stateWithDeletedIndex=state(index + "_new",true,ShardRoutingState.STARTED,ShardRoutingState.RELOCATING);
  final Action actionWithDeletedIndexAfterPrimaryOp=new Action(Settings.EMPTY,"testAction",transportService,clusterService,threadPool){
    @Override protected Tuple<Response,Request> shardOperationOnPrimary(    MetaData metaData,    Request shardRequest) throws Throwable {
      final Tuple<Response,Request> operationOnPrimary=super.shardOperationOnPrimary(metaData,shardRequest);
      ((TestClusterService)clusterService).setState(stateWithDeletedIndex);
      logger.debug("--> state after primary operation:\n{}",clusterService.state().prettyPrint());
      return operationOnPrimary;
    }
  }
;
  Request request=new Request(shardId);
  PlainActionFuture<Response> listener=new PlainActionFuture<>();
  TransportReplicationAction<Request,Request,Response>.PrimaryPhase primaryPhase=actionWithDeletedIndexAfterPrimaryOp.new PrimaryPhase(request,createTransportChannel(listener));
  primaryPhase.run();
  assertThat("request was not processed on primary",request.processedOnPrimary.get(),equalTo(true));
  assertThat("replication phase should be skipped if index gets deleted after primary operation",transport.capturedRequestsByTargetNode().size(),equalTo(0));
}
