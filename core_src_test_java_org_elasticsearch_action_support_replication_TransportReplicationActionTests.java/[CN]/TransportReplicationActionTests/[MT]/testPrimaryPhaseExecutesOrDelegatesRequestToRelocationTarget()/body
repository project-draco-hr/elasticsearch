{
  final String index="test";
  final ShardId shardId=new ShardId(index,"_na_",0);
  ClusterState state=stateWithActivePrimary(index,true,randomInt(5));
  setState(clusterService,state);
  Request request=new Request(shardId).timeout("1ms");
  PlainActionFuture<Response> listener=new PlainActionFuture<>();
  ReplicationTask task=maybeTask();
  AtomicBoolean executed=new AtomicBoolean();
  Action.PrimaryOperationTransportHandler primaryPhase=action.new PrimaryOperationTransportHandler(){
    @Override protected ReplicationOperation<Request,Request,Action.PrimaryResult> createReplicatedOperation(    Request request,    ActionListener<Action.PrimaryResult> actionListener,    Action.PrimaryShardReference primaryShardReference,    boolean executeOnReplicas){
      return new NoopReplicationOperation(request,actionListener){
        public void execute() throws Exception {
          assertPhase(task,"primary");
          assertFalse(executed.getAndSet(true));
          super.execute();
        }
      }
;
    }
  }
;
  ShardRouting primaryShard=state.getRoutingTable().shardRoutingTable(shardId).primaryShard();
  boolean executeOnPrimary=true;
  if (primaryShard.relocating() && randomBoolean()) {
    isRelocated.set(true);
    executeOnPrimary=false;
  }
  primaryPhase.messageReceived(request,createTransportChannel(listener),task);
  if (executeOnPrimary) {
    assertTrue(executed.get());
    assertTrue(listener.isDone());
    listener.get();
    assertPhase(task,"finished");
  }
 else {
    assertFalse(executed.get());
    assertIndexShardCounter(0);
    final List<CapturingTransport.CapturedRequest> requests=transport.capturedRequestsByTargetNode().get(primaryShard.relocatingNodeId());
    assertThat(requests,notNullValue());
    assertThat(requests.size(),equalTo(1));
    assertThat("primary request was not delegated to relocation target",requests.get(0).action,equalTo("testAction[p]"));
    assertPhase(task,"primary_delegation");
    transport.handleResponse(requests.get(0).requestId,new Response());
    assertTrue(listener.isDone());
    listener.get();
    assertPhase(task,"finished");
  }
}
