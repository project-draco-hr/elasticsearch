{
  final String indexName="test";
  final ShardId shardId=new ShardId(indexName,"_na_",0);
  int numReplicas=randomIntBetween(0,5);
  int idxSettingWaitForActiveShards=randomIntBetween(0,numReplicas + 1);
  ClusterState state=stateWithActivePrimary(indexName,randomBoolean(),numReplicas);
  IndexMetaData indexMetaData=state.metaData().index(indexName);
  Settings indexSettings=Settings.builder().put(indexMetaData.getSettings()).put(SETTING_WAIT_FOR_ACTIVE_SHARDS.getKey(),Integer.toString(idxSettingWaitForActiveShards)).build();
  MetaData.Builder metaDataBuilder=MetaData.builder(state.metaData()).put(IndexMetaData.builder(indexMetaData).settings(indexSettings).build(),true);
  state=ClusterState.builder(state).metaData(metaDataBuilder).build();
  setState(clusterService,state);
  Request request=new Request(shardId).waitForActiveShards(ActiveShardCount.DEFAULT);
  action.resolveRequest(state.metaData(),state.metaData().index(indexName),request);
  assertEquals(ActiveShardCount.from(idxSettingWaitForActiveShards),request.waitForActiveShards());
  int requestWaitForActiveShards=randomIntBetween(0,numReplicas + 1);
  request=new Request(shardId).waitForActiveShards(ActiveShardCount.from(requestWaitForActiveShards));
  action.resolveRequest(state.metaData(),state.metaData().index(indexName),request);
  assertEquals(ActiveShardCount.from(requestWaitForActiveShards),request.waitForActiveShards());
}
