{
  action=new ActionWithConsistency(Settings.EMPTY,"testActionWithConsistency",transportService,clusterService,threadPool);
  final String index="test";
  final ShardId shardId=new ShardId(index,"_na_",0);
  final int assignedReplicas=randomInt(2);
  final int unassignedReplicas=randomInt(2);
  final int totalShards=1 + assignedReplicas + unassignedReplicas;
  final boolean passesWriteConsistency;
  Request request=new Request(shardId).consistencyLevel(randomFrom(WriteConsistencyLevel.values()));
switch (request.consistencyLevel()) {
case ONE:
    passesWriteConsistency=true;
  break;
case DEFAULT:
case QUORUM:
if (totalShards <= 2) {
  passesWriteConsistency=true;
}
 else {
  passesWriteConsistency=assignedReplicas + 1 >= (totalShards / 2) + 1;
}
break;
case ALL:
passesWriteConsistency=unassignedReplicas == 0;
break;
default :
throw new RuntimeException("unknown consistency level [" + request.consistencyLevel() + "]");
}
ShardRoutingState[] replicaStates=new ShardRoutingState[assignedReplicas + unassignedReplicas];
for (int i=0; i < assignedReplicas; i++) {
replicaStates[i]=randomFrom(ShardRoutingState.STARTED,ShardRoutingState.RELOCATING);
}
for (int i=assignedReplicas; i < replicaStates.length; i++) {
replicaStates[i]=ShardRoutingState.UNASSIGNED;
}
clusterService.setState(state(index,true,ShardRoutingState.STARTED,replicaStates));
logger.debug("using consistency level of [{}], assigned shards [{}], total shards [{}]. expecting op to [{}]. using state: \n{}",request.consistencyLevel(),1 + assignedReplicas,1 + assignedReplicas + unassignedReplicas,passesWriteConsistency ? "succeed" : "retry",clusterService.state().prettyPrint());
final IndexShardRoutingTable shardRoutingTable=clusterService.state().routingTable().index(index).shard(shardId.id());
PlainActionFuture<Response> listener=new PlainActionFuture<>();
TransportReplicationAction.PrimaryPhase primaryPhase=action.new PrimaryPhase(request,createTransportChannel(listener));
if (passesWriteConsistency) {
assertThat(primaryPhase.checkWriteConsistency(shardRoutingTable.primaryShard().shardId()),nullValue());
primaryPhase.run();
assertTrue("operations should have been perform, consistency level is met",request.processedOnPrimary.get());
if (assignedReplicas > 0) {
assertIndexShardCounter(2);
}
 else {
assertIndexShardCounter(1);
}
}
 else {
assertThat(primaryPhase.checkWriteConsistency(shardRoutingTable.primaryShard().shardId()),notNullValue());
primaryPhase.run();
assertFalse("operations should not have been perform, consistency level is *NOT* met",request.processedOnPrimary.get());
assertListenerThrows("should throw exception to trigger retry",listener,UnavailableShardsException.class);
assertIndexShardUninitialized();
for (int i=0; i < replicaStates.length; i++) {
replicaStates[i]=ShardRoutingState.STARTED;
}
clusterService.setState(state(index,true,ShardRoutingState.STARTED,replicaStates));
listener=new PlainActionFuture<>();
primaryPhase=action.new PrimaryPhase(request,createTransportChannel(listener));
primaryPhase.run();
assertTrue("once the consistency level met, operation should continue",request.processedOnPrimary.get());
assertIndexShardCounter(2);
}
}
