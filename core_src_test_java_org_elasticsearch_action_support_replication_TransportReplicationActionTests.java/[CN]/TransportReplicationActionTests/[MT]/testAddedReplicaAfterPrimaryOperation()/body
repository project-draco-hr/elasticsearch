{
  final String index="test";
  final ShardId shardId=new ShardId(index,"_na_",0);
  setState(clusterService,stateWithActivePrimary(index,true,0));
  logger.debug("--> using initial state:\n{}",clusterService.state().prettyPrint());
  final ClusterState stateWithAddedReplicas=state(index,true,ShardRoutingState.STARTED,randomBoolean() ? ShardRoutingState.INITIALIZING : ShardRoutingState.STARTED);
  ReplicationTask task=maybeTask();
  final Action actionWithAddedReplicaAfterPrimaryOp=new Action(Settings.EMPTY,"testAction",transportService,clusterService,threadPool){
    @Override protected Tuple<Response,Request> shardOperationOnPrimary(    MetaData metaData,    Request shardRequest) throws Exception {
      final Tuple<Response,Request> operationOnPrimary=super.shardOperationOnPrimary(metaData,shardRequest);
      setState(clusterService,stateWithAddedReplicas);
      logger.debug("--> state after primary operation:\n{}",clusterService.state().prettyPrint());
      return operationOnPrimary;
    }
  }
;
  Request request=new Request(shardId);
  PlainActionFuture<Response> listener=new PlainActionFuture<>();
  TransportReplicationAction<Request,Request,Response>.PrimaryPhase primaryPhase=actionWithAddedReplicaAfterPrimaryOp.new PrimaryPhase(task,request,createTransportChannel(listener));
  primaryPhase.run();
  assertThat("request was not processed on primary",request.processedOnPrimary.get(),equalTo(true));
  assertPhase(task,"replicating");
  Map<String,List<CapturingTransport.CapturedRequest>> capturedRequestsByTargetNode=transport.getCapturedRequestsByTargetNodeAndClear();
  for (  ShardRouting replica : stateWithAddedReplicas.getRoutingTable().shardRoutingTable(index,shardId.id()).replicaShards()) {
    List<CapturingTransport.CapturedRequest> requests=capturedRequestsByTargetNode.get(replica.currentNodeId());
    assertThat(requests,notNullValue());
    assertThat(requests.size(),equalTo(1));
    assertThat("replica request was not sent",requests.get(0).action,equalTo("testAction[r]"));
  }
}
