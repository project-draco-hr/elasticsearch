{
  Request request=new Request();
  PlainActionFuture<Response> listener=new PlainActionFuture<>();
  ClusterBlocks.Builder block=ClusterBlocks.builder().addGlobalBlock(new ClusterBlock(1,"non retryable",false,true,RestStatus.SERVICE_UNAVAILABLE,ClusterBlockLevel.ALL));
  clusterService.setState(ClusterState.builder(clusterService.state()).blocks(block));
  TransportReplicationAction.ReroutePhase reroutePhase=action.new ReroutePhase(request,listener);
  reroutePhase.run();
  assertListenerThrows("primary phase should fail operation",listener,ClusterBlockException.class);
  block=ClusterBlocks.builder().addGlobalBlock(new ClusterBlock(1,"retryable",true,true,RestStatus.SERVICE_UNAVAILABLE,ClusterBlockLevel.ALL));
  clusterService.setState(ClusterState.builder(clusterService.state()).blocks(block));
  listener=new PlainActionFuture<>();
  reroutePhase=action.new ReroutePhase(new Request().timeout("5ms"),listener);
  reroutePhase.run();
  assertListenerThrows("failed to timeout on retryable block",listener,ClusterBlockException.class);
  listener=new PlainActionFuture<>();
  reroutePhase=action.new ReroutePhase(new Request(),listener);
  reroutePhase.run();
  assertFalse("primary phase should wait on retryable block",listener.isDone());
  block=ClusterBlocks.builder().addGlobalBlock(new ClusterBlock(1,"non retryable",false,true,RestStatus.SERVICE_UNAVAILABLE,ClusterBlockLevel.ALL));
  clusterService.setState(ClusterState.builder(clusterService.state()).blocks(block));
  assertListenerThrows("primary phase should fail operation when moving from a retryable block to a non-retryable one",listener,ClusterBlockException.class);
  assertIndexShardUninitialized();
}
