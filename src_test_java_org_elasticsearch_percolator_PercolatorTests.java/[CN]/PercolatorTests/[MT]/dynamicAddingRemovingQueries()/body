{
  client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards",1)).execute().actionGet();
  ensureGreen();
  logger.info("--> register a query 1");
  client().prepareIndex("test","_percolator","kuku").setSource(jsonBuilder().startObject().field("color","blue").field("query",termQuery("field1","value1")).endObject()).setRefresh(true).execute().actionGet();
  PercolateResponse percolate=client().preparePercolate().setIndices("test").setDocumentType("type1").setSource(jsonBuilder().startObject().startObject("doc").field("field1","value1").endObject().endObject()).execute().actionGet();
  assertThat(percolate.getMatches(),arrayWithSize(1));
  assertThat(convertFromTextArray(percolate.getMatches(),"test"),arrayContaining("kuku"));
  logger.info("--> register a query 2");
  client().prepareIndex("test","_percolator","bubu").setSource(jsonBuilder().startObject().field("color","green").field("query",termQuery("field1","value2")).endObject()).setRefresh(true).execute().actionGet();
  percolate=client().preparePercolate().setIndices("test").setDocumentType("type1").setSource(jsonBuilder().startObject().startObject("doc").startObject("type1").field("field1","value2").endObject().endObject().endObject()).execute().actionGet();
  assertThat(percolate.getMatches(),arrayWithSize(1));
  assertThat(convertFromTextArray(percolate.getMatches(),"test"),arrayContaining("bubu"));
  logger.info("--> register a query 3");
  client().prepareIndex("test","_percolator","susu").setSource(jsonBuilder().startObject().field("color","red").field("query",termQuery("field1","value2")).endObject()).setRefresh(true).execute().actionGet();
  PercolateSourceBuilder sourceBuilder=new PercolateSourceBuilder().setDoc(docBuilder().setDoc(jsonBuilder().startObject().startObject("type1").field("field1","value2").endObject().endObject())).setQueryBuilder(termQuery("color","red"));
  percolate=client().preparePercolate().setIndices("test").setDocumentType("type1").setSource(sourceBuilder).execute().actionGet();
  assertThat(percolate.getMatches(),arrayWithSize(1));
  assertThat(convertFromTextArray(percolate.getMatches(),"test"),arrayContaining("susu"));
  logger.info("--> deleting query 1");
  client().prepareDelete("test","_percolator","kuku").setRefresh(true).execute().actionGet();
  percolate=client().preparePercolate().setIndices("test").setDocumentType("type1").setSource(jsonBuilder().startObject().startObject("doc").startObject("type1").field("field1","value1").endObject().endObject().endObject()).execute().actionGet();
  assertThat(percolate.getMatches(),emptyArray());
}
