{
  createIndex("test");
  ensureSearchable();
  XContentBuilder percolateDocumentSource=XContentFactory.jsonBuilder().startObject().startObject("doc").field("field1",1).field("field2","value").endObject().endObject();
  PercolateResponse response=client().preparePercolate().setIndices("test").setDocumentType("type1").setSource(percolateDocumentSource).execute().actionGet();
  assertAllSuccessful(response);
  assertMatchCount(response,0l);
  assertThat(response.getMatches(),arrayWithSize(0));
  client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).get();
  boolean applied=awaitBusy(new Predicate<Object>(){
    @Override public boolean apply(    Object input){
      for (      Client client : clients()) {
        PendingClusterTasksResponse pendingTasks=client.admin().cluster().preparePendingClusterTasks().get();
        if (!pendingTasks.pendingTasks().isEmpty()) {
          return false;
        }
      }
      return true;
    }
  }
);
  assertThat(applied,is(true));
  client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).get();
  GetMappingsResponse mappingsResponse=client().admin().indices().prepareGetMappings("test").get();
  assertThat(mappingsResponse.getMappings().get("test"),notNullValue());
  assertThat(mappingsResponse.getMappings().get("test").get("type1"),notNullValue());
  assertThat(mappingsResponse.getMappings().get("test").get("type1").getSourceAsMap().isEmpty(),is(false));
  Map<String,Object> properties=(Map<String,Object>)mappingsResponse.getMappings().get("test").get("type1").getSourceAsMap().get("properties");
  assertThat(((Map<String,String>)properties.get("field1")).get("type"),equalTo("long"));
  assertThat(((Map<String,String>)properties.get("field2")).get("type"),equalTo("string"));
}
