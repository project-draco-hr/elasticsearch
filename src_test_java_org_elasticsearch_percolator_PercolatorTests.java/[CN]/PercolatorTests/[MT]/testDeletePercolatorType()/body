{
  assertAcked(client().admin().indices().prepareCreate("test1"));
  assertAcked(client().admin().indices().prepareCreate("test2"));
  client().prepareIndex("test1",PercolatorService.TYPE_NAME,"1").setSource(jsonBuilder().startObject().field("query",matchAllQuery()).endObject()).execute().actionGet();
  client().prepareIndex("test2",PercolatorService.TYPE_NAME,"1").setSource(jsonBuilder().startObject().field("query",matchAllQuery()).endObject()).execute().actionGet();
  PercolateResponse response=client().preparePercolate().setIndices("test1","test2").setDocumentType("type").setOnlyCount(true).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1","b").endObject())).execute().actionGet();
  assertMatchCount(response,2l);
  awaitBusy(new Predicate<Object>(){
    @Override public boolean apply(    Object o){
      for (      Client client : internalCluster()) {
        GetMappingsResponse getMappingsResponse=client.admin().indices().prepareGetMappings("test1","test2").get();
        boolean hasPercolatorType=getMappingsResponse.getMappings().get("test1").containsKey(PercolatorService.TYPE_NAME);
        if (!hasPercolatorType) {
          return false;
        }
        if (!getMappingsResponse.getMappings().get("test2").containsKey(PercolatorService.TYPE_NAME)) {
          return false;
        }
      }
      return true;
    }
  }
);
  ensureGreen("test1","test2");
  assertAcked(client().admin().indices().prepareDeleteMapping("test1").setType(PercolatorService.TYPE_NAME));
  response=client().preparePercolate().setIndices("test1","test2").setDocumentType("type").setOnlyCount(true).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1","b").endObject())).execute().actionGet();
  assertMatchCount(response,1l);
  assertAcked(client().admin().indices().prepareDeleteMapping("test2").setType(PercolatorService.TYPE_NAME));
  response=client().preparePercolate().setIndices("test1","test2").setDocumentType("type").setOnlyCount(true).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1","b").endObject())).execute().actionGet();
  assertMatchCount(response,0l);
  SearchResponse searchResponse=client().prepareSearch("test1","test2").get();
  assertHitCount(searchResponse,0);
}
