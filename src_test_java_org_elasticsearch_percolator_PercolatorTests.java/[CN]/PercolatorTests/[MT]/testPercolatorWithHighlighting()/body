{
  Client client=client();
  client.admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards",2)).execute().actionGet();
  ensureGreen();
  if (randomBoolean()) {
    client.admin().indices().preparePutMapping("test").setType("type").setSource(jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field1").field("type","string").field("term_vector","with_positions_offsets").endObject().endObject().endObject().endObject()).execute().actionGet();
  }
 else   if (randomBoolean()) {
    client.admin().indices().preparePutMapping("test").setType("type").setSource(jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field1").field("type","string").field("index_options","offsets").endObject().endObject().endObject().endObject()).execute().actionGet();
  }
  logger.info("--> register a queries");
  client.prepareIndex("test",PercolatorService.TYPE_NAME,"1").setSource(jsonBuilder().startObject().field("query",matchQuery("field1","brown fox")).endObject()).execute().actionGet();
  client.prepareIndex("test",PercolatorService.TYPE_NAME,"2").setSource(jsonBuilder().startObject().field("query",matchQuery("field1","lazy dog")).endObject()).execute().actionGet();
  client.prepareIndex("test",PercolatorService.TYPE_NAME,"3").setSource(jsonBuilder().startObject().field("query",termQuery("field1","jumps")).endObject()).execute().actionGet();
  client.prepareIndex("test",PercolatorService.TYPE_NAME,"4").setSource(jsonBuilder().startObject().field("query",termQuery("field1","dog")).endObject()).execute().actionGet();
  client.prepareIndex("test",PercolatorService.TYPE_NAME,"5").setSource(jsonBuilder().startObject().field("query",termQuery("field1","fox")).endObject()).execute().actionGet();
  logger.info("--> Percolate doc with field1=The quick brown fox jumps over the lazy dog");
  PercolateResponse response=client.preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1","The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).execute().actionGet();
  assertMatchCount(response,5l);
  assertThat(response.getMatches(),arrayWithSize(5));
  assertThat(convertFromTextArray(response.getMatches(),"test"),arrayContainingInAnyOrder("1","2","3","4","5"));
  PercolateResponse.Match[] matches=response.getMatches();
  Arrays.sort(matches,new Comparator<PercolateResponse.Match>(){
    @Override public int compare(    PercolateResponse.Match a,    PercolateResponse.Match b){
      return a.getId().compareTo(b.getId());
    }
  }
);
  assertThat(matches[0].getHighlightFields().get("field1").fragments()[0].string(),equalTo("The quick <em>brown</em> <em>fox</em> jumps over the lazy dog"));
  assertThat(matches[1].getHighlightFields().get("field1").fragments()[0].string(),equalTo("The quick brown fox jumps over the <em>lazy</em> <em>dog</em>"));
  assertThat(matches[2].getHighlightFields().get("field1").fragments()[0].string(),equalTo("The quick brown fox <em>jumps</em> over the lazy dog"));
  assertThat(matches[3].getHighlightFields().get("field1").fragments()[0].string(),equalTo("The quick brown fox jumps over the lazy <em>dog</em>"));
  assertThat(matches[4].getHighlightFields().get("field1").fragments()[0].string(),equalTo("The quick brown <em>fox</em> jumps over the lazy dog"));
  client.admin().indices().prepareRefresh("test").execute().actionGet();
  logger.info("--> Query percolate doc with field1=The quick brown fox jumps over the lazy dog");
  response=client.preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1","The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).setPercolateQuery(matchAllQuery()).execute().actionGet();
  assertMatchCount(response,5l);
  assertThat(response.getMatches(),arrayWithSize(5));
  assertThat(convertFromTextArray(response.getMatches(),"test"),arrayContainingInAnyOrder("1","2","3","4","5"));
  matches=response.getMatches();
  Arrays.sort(matches,new Comparator<PercolateResponse.Match>(){
    @Override public int compare(    PercolateResponse.Match a,    PercolateResponse.Match b){
      return a.getId().compareTo(b.getId());
    }
  }
);
  assertThat(matches[0].getHighlightFields().get("field1").fragments()[0].string(),equalTo("The quick <em>brown</em> <em>fox</em> jumps over the lazy dog"));
  assertThat(matches[1].getHighlightFields().get("field1").fragments()[0].string(),equalTo("The quick brown fox jumps over the <em>lazy</em> <em>dog</em>"));
  assertThat(matches[2].getHighlightFields().get("field1").fragments()[0].string(),equalTo("The quick brown fox <em>jumps</em> over the lazy dog"));
  assertThat(matches[3].getHighlightFields().get("field1").fragments()[0].string(),equalTo("The quick brown fox jumps over the lazy <em>dog</em>"));
  assertThat(matches[4].getHighlightFields().get("field1").fragments()[0].string(),equalTo("The quick brown <em>fox</em> jumps over the lazy dog"));
  logger.info("--> Query percolate with score for doc with field1=The quick brown fox jumps over the lazy dog");
  response=client.preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1","The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).setPercolateQuery(functionScoreQuery(matchAllQuery()).add(new FactorBuilder().boostFactor(5.5f))).setScore(true).execute().actionGet();
  assertNoFailures(response);
  assertThat(response.getMatches(),arrayWithSize(5));
  assertThat(convertFromTextArray(response.getMatches(),"test"),arrayContainingInAnyOrder("1","2","3","4","5"));
  matches=response.getMatches();
  Arrays.sort(matches,new Comparator<PercolateResponse.Match>(){
    @Override public int compare(    PercolateResponse.Match a,    PercolateResponse.Match b){
      return a.getId().compareTo(b.getId());
    }
  }
);
  assertThat(matches[0].getScore(),equalTo(5.5f));
  assertThat(matches[0].getHighlightFields().get("field1").fragments()[0].string(),equalTo("The quick <em>brown</em> <em>fox</em> jumps over the lazy dog"));
  assertThat(matches[1].getScore(),equalTo(5.5f));
  assertThat(matches[1].getHighlightFields().get("field1").fragments()[0].string(),equalTo("The quick brown fox jumps over the <em>lazy</em> <em>dog</em>"));
  assertThat(matches[2].getScore(),equalTo(5.5f));
  assertThat(matches[2].getHighlightFields().get("field1").fragments()[0].string(),equalTo("The quick brown fox <em>jumps</em> over the lazy dog"));
  assertThat(matches[3].getScore(),equalTo(5.5f));
  assertThat(matches[3].getHighlightFields().get("field1").fragments()[0].string(),equalTo("The quick brown fox jumps over the lazy <em>dog</em>"));
  assertThat(matches[4].getScore(),equalTo(5.5f));
  assertThat(matches[4].getHighlightFields().get("field1").fragments()[0].string(),equalTo("The quick brown <em>fox</em> jumps over the lazy dog"));
  logger.info("--> Top percolate for doc with field1=The quick brown fox jumps over the lazy dog");
  response=client.preparePercolate().setIndices("test").setDocumentType("type").setSize(5).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1","The quick brown fox jumps over the lazy dog").endObject())).setHighlightBuilder(new HighlightBuilder().field("field1")).setPercolateQuery(functionScoreQuery(matchAllQuery()).add(new FactorBuilder().boostFactor(5.5f))).setSort(true).execute().actionGet();
  assertMatchCount(response,5l);
  assertThat(response.getMatches(),arrayWithSize(5));
  assertThat(convertFromTextArray(response.getMatches(),"test"),arrayContainingInAnyOrder("1","2","3","4","5"));
  matches=response.getMatches();
  Arrays.sort(matches,new Comparator<PercolateResponse.Match>(){
    @Override public int compare(    PercolateResponse.Match a,    PercolateResponse.Match b){
      return a.getId().compareTo(b.getId());
    }
  }
);
  assertThat(matches[0].getScore(),equalTo(5.5f));
  assertThat(matches[0].getHighlightFields().get("field1").fragments()[0].string(),equalTo("The quick <em>brown</em> <em>fox</em> jumps over the lazy dog"));
  assertThat(matches[1].getScore(),equalTo(5.5f));
  assertThat(matches[1].getHighlightFields().get("field1").fragments()[0].string(),equalTo("The quick brown fox jumps over the <em>lazy</em> <em>dog</em>"));
  assertThat(matches[2].getScore(),equalTo(5.5f));
  assertThat(matches[2].getHighlightFields().get("field1").fragments()[0].string(),equalTo("The quick brown fox <em>jumps</em> over the lazy dog"));
  assertThat(matches[3].getScore(),equalTo(5.5f));
  assertThat(matches[3].getHighlightFields().get("field1").fragments()[0].string(),equalTo("The quick brown fox jumps over the lazy <em>dog</em>"));
  assertThat(matches[4].getScore(),equalTo(5.5f));
  assertThat(matches[4].getHighlightFields().get("field1").fragments()[0].string(),equalTo("The quick brown <em>fox</em> jumps over the lazy dog"));
}
