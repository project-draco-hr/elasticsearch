{
  client().admin().indices().prepareCreate("index").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards",1).put("index.number_of_replicas",0).build()).execute().actionGet();
  client().admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards",1).put("index.number_of_replicas",0).build()).execute().actionGet();
  ensureGreen();
  XContentBuilder doc=XContentFactory.jsonBuilder().startObject().startObject("doc").field("field1",1).field("field2","value").endObject().endObject();
  XContentBuilder docWithType=XContentFactory.jsonBuilder().startObject().startObject("doc").startObject("type1").field("field1",1).field("field2","value").endObject().endObject().endObject();
  PercolateResponse response=client().preparePercolate().setSource(doc).setIndices("test").setDocumentType("type1").execute().actionGet();
  assertMatchCount(response,0l);
  assertThat(response.getMatches(),emptyArray());
  client().prepareIndex("test",PercolatorService.TYPE_NAME,"test1").setSource(XContentFactory.jsonBuilder().startObject().field("query",termQuery("field2","value")).endObject()).execute().actionGet();
  response=client().preparePercolate().setIndices("test").setDocumentType("type1").setSource(doc).execute().actionGet();
  assertMatchCount(response,1l);
  assertThat(response.getMatches(),arrayWithSize(1));
  assertThat(convertFromTextArray(response.getMatches(),"test"),arrayContaining("test1"));
  response=client().preparePercolate().setIndices("test").setDocumentType("type1").setSource(docWithType).execute().actionGet();
  assertMatchCount(response,1l);
  assertThat(response.getMatches(),arrayWithSize(1));
  assertThat(convertFromTextArray(response.getMatches(),"test"),arrayContaining("test1"));
  client().prepareIndex("test",PercolatorService.TYPE_NAME,"test2").setSource(XContentFactory.jsonBuilder().startObject().field("query",termQuery("field1",1)).endObject()).execute().actionGet();
  response=client().preparePercolate().setIndices("test").setDocumentType("type1").setSource(doc).execute().actionGet();
  assertMatchCount(response,2l);
  assertThat(response.getMatches(),arrayWithSize(2));
  assertThat(convertFromTextArray(response.getMatches(),"test"),arrayContainingInAnyOrder("test1","test2"));
  client().prepareDelete("test",PercolatorService.TYPE_NAME,"test2").execute().actionGet();
  response=client().preparePercolate().setIndices("test").setDocumentType("type1").setSource(doc).execute().actionGet();
  assertMatchCount(response,1l);
  assertThat(response.getMatches(),arrayWithSize(1));
  assertThat(convertFromTextArray(response.getMatches(),"test"),arrayContaining("test1"));
  client().prepareIndex("test1",PercolatorService.TYPE_NAME).setSource(XContentFactory.jsonBuilder().startObject().field("query",constantScoreQuery(FilterBuilders.rangeFilter("field2").from("value").includeLower(true))).endObject()).execute().actionGet();
  response=client().preparePercolate().setIndices("test").setDocumentType("type1").setSource(doc).execute().actionGet();
  assertMatchCount(response,1l);
  assertThat(response.getMatches(),arrayWithSize(1));
  assertThat(convertFromTextArray(response.getMatches(),"test"),arrayContaining("test1"));
}
