{
  client().admin().indices().prepareCreate("my-index").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards",3).put("index.number_of_replicas",1).build()).execute().actionGet();
  ensureGreen();
  client().prepareIndex("my-index","my-type","1").setSource("field","value").execute().actionGet();
  Map<Integer,NavigableSet<Integer>> controlMap=new HashMap<Integer,NavigableSet<Integer>>();
  long numQueries=randomIntBetween(100,250);
  logger.info("--> register " + numQueries + " queries");
  for (int i=0; i < numQueries; i++) {
    int value=randomInt(10);
    client().prepareIndex("my-index",PercolatorService.TYPE_NAME,Integer.toString(i)).setSource(jsonBuilder().startObject().field("query",matchAllQuery()).field("level",i).field("field1",value).endObject()).execute().actionGet();
    if (!controlMap.containsKey(value)) {
      controlMap.put(value,new TreeSet<Integer>());
    }
    controlMap.get(value).add(i);
  }
  refresh();
  int runs=randomInt(27);
  for (int i=0; i < runs; i++) {
    int size=randomIntBetween(1,50);
    PercolateResponse response=client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field","value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(),scriptFunction("doc['level'].value"))).execute().actionGet();
    assertMatchCount(response,numQueries);
    assertThat(response.getMatches().length,equalTo(size));
    for (int j=0; j < response.getMatches().length; j++) {
      String id=response.getMatches()[j].getId().string();
      assertThat(Integer.valueOf(id),equalTo((int)response.getMatches()[j].getScore()));
    }
  }
  runs=randomInt(27);
  for (int i=0; i < runs; i++) {
    int size=randomIntBetween(1,10);
    PercolateResponse response=client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field","value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchAllQuery(),scriptFunction("doc['level'].value"))).execute().actionGet();
    assertMatchCount(response,numQueries);
    assertThat(response.getMatches().length,equalTo(size));
    int expectedId=(int)(numQueries - 1);
    for (    PercolateResponse.Match match : response) {
      assertThat(match.getId().string(),equalTo(Integer.toString(expectedId)));
      assertThat(match.getScore(),equalTo((float)expectedId));
      assertThat(match.getIndex().string(),equalTo("my-index"));
      expectedId--;
    }
  }
  runs=randomInt(27);
  for (int i=0; i < runs; i++) {
    int value=randomInt(10);
    NavigableSet<Integer> levels=controlMap.get(value);
    int size=randomIntBetween(1,levels.size());
    PercolateResponse response=client().preparePercolate().setIndices("my-index").setDocumentType("my-type").setSortByScore(true).setSize(size).setPercolateDoc(docBuilder().setDoc("field","value")).setPercolateQuery(QueryBuilders.functionScoreQuery(matchQuery("field1",value),scriptFunction("doc['level'].value"))).execute().actionGet();
    assertMatchCount(response,levels.size());
    assertThat(response.getMatches().length,equalTo(Math.min(levels.size(),size)));
    Iterator<Integer> levelIterator=levels.descendingIterator();
    for (    PercolateResponse.Match match : response) {
      int controlLevel=levelIterator.next();
      assertThat(match.getId().string(),equalTo(Integer.toString(controlLevel)));
      assertThat(match.getScore(),equalTo((float)controlLevel));
      assertThat(match.getIndex().string(),equalTo("my-index"));
    }
  }
}
