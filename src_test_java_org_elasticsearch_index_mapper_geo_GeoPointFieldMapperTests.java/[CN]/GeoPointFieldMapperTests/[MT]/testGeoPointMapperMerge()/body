{
  String stage1Mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("point").field("type","geo_point").field("lat_lon",true).field("geohash",true).field("validate",true).endObject().endObject().endObject().endObject().string();
  DocumentMapperParser parser=createIndex("test").mapperService().documentMapperParser();
  DocumentMapper stage1=parser.parse(stage1Mapping);
  String stage2Mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("point").field("type","geo_point").field("lat_lon",true).field("geohash",true).field("validate",false).endObject().endObject().endObject().endObject().string();
  DocumentMapper stage2=parser.parse(stage2Mapping);
  DocumentMapper.MergeResult mergeResult=stage1.merge(stage2,mergeFlags().simulate(false));
  assertThat(mergeResult.hasConflicts(),equalTo(true));
  assertThat(mergeResult.conflicts().length,equalTo(2));
  assertThat("mapper [point] has different validate_lat",isIn(new ArrayList<>(Arrays.asList(mergeResult.conflicts()))));
  stage2Mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("point").field("type","geo_point").field("lat_lon",true).field("geohash",true).field("validate",true).field("normalize",true).endObject().endObject().endObject().endObject().string();
  stage2=parser.parse(stage2Mapping);
  mergeResult=stage1.merge(stage2,mergeFlags().simulate(false));
  assertThat(mergeResult.hasConflicts(),equalTo(false));
}
