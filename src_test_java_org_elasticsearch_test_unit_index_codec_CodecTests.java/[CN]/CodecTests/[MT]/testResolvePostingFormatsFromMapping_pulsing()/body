{
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field1").field("type","string").field("postings_format","pulsing").endObject().startObject("field2").field("type","string").field("postings_format","my_format1").endObject().endObject().endObject().endObject().string();
  Settings indexSettings=ImmutableSettings.settingsBuilder().put("index.codec.postings_format.my_format1.type","pulsing40").put("index.codec.postings_format.my_format1.freq_cut_off",2).put("index.codec.postings_format.my_format1.min_block_size",32).put("index.codec.postings_format.my_format1.max_block_size",64).build();
  CodecService codecService=createCodecService(indexSettings);
  DocumentMapper documentMapper=codecService.mapperService().documentMapperParser().parse(mapping);
  assertThat(documentMapper.mappers().name("field1").mapper().postingFormatProvider(),instanceOf(PreBuiltPostingsFormatProvider.class));
  assertThat(documentMapper.mappers().name("field1").mapper().postingFormatProvider().get(),instanceOf(Pulsing40PostingsFormat.class));
  assertThat(documentMapper.mappers().name("field2").mapper().postingFormatProvider(),instanceOf(Pulsing40PostingsFormatProvider.class));
  Pulsing40PostingsFormatProvider provider=(Pulsing40PostingsFormatProvider)documentMapper.mappers().name("field2").mapper().postingFormatProvider();
  assertThat(provider.freqCutOff(),equalTo(2));
  assertThat(provider.minBlockSize(),equalTo(32));
  assertThat(provider.maxBlockSize(),equalTo(64));
}
