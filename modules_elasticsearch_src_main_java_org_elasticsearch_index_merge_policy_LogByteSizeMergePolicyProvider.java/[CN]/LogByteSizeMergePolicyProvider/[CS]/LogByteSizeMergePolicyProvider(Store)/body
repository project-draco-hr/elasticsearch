{
  super(store.shardId(),store.indexSettings());
  Preconditions.checkNotNull(store,"Store must be provided to merge policy");
  this.minMergeSize=componentSettings.getAsBytesSize("min_merge_size",new ByteSizeValue((long)(LogByteSizeMergePolicy.DEFAULT_MIN_MERGE_MB * 1024 * 1024),ByteSizeUnit.BYTES));
  this.maxMergeSize=componentSettings.getAsBytesSize("max_merge_size",new ByteSizeValue((long)LogByteSizeMergePolicy.DEFAULT_MAX_MERGE_MB,ByteSizeUnit.MB));
  this.mergeFactor=componentSettings.getAsInt("merge_factor",LogByteSizeMergePolicy.DEFAULT_MERGE_FACTOR);
  this.maxMergeDocs=componentSettings.getAsInt("max_merge_docs",LogByteSizeMergePolicy.DEFAULT_MAX_MERGE_DOCS);
  this.calibrateSizeByDeletes=componentSettings.getAsBoolean("calibrate_size_by_deletes",true);
  this.asyncMerge=indexSettings.getAsBoolean("index.merge.async",true);
  logger.debug("using [log_bytes_size] merge policy with merge_factor[{}], min_merge_size[{}], max_merge_size[{}], max_merge_docs[{}], calibrate_size_by_deletes[{}], async_merge[{}]",mergeFactor,minMergeSize,maxMergeSize,maxMergeDocs,calibrateSizeByDeletes,asyncMerge);
}
