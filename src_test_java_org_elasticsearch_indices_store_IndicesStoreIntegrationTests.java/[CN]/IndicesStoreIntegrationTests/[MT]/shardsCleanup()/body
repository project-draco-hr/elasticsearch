{
  final String node_1=internalCluster().startNode();
  final String node_2=internalCluster().startNode();
  logger.info("--> creating index [test] with one shard and on replica");
  assertAcked(prepareCreate("test").setSettings(Settings.builder().put(indexSettings()).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,1)));
  ensureGreen("test");
  logger.info("--> making sure that shard and its replica are allocated on node_1 and node_2");
  assertThat(Files.exists(shardDirectory(node_1,"test",0)),equalTo(true));
  assertThat(Files.exists(shardDirectory(node_2,"test",0)),equalTo(true));
  logger.info("--> starting node server3");
  String node_3=internalCluster().startNode();
  logger.info("--> running cluster_health");
  ClusterHealthResponse clusterHealth=client().admin().cluster().prepareHealth().setWaitForNodes("3").setWaitForRelocatingShards(0).get();
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  logger.info("--> making sure that shard is not allocated on server3");
  assertThat(waitForShardDeletion(node_3,"test",0),equalTo(false));
  Path server2Shard=shardDirectory(node_2,"test",0);
  logger.info("--> stopping node " + node_2);
  internalCluster().stopRandomNode(InternalTestCluster.nameFilter(node_2));
  logger.info("--> running cluster_health");
  clusterHealth=client().admin().cluster().prepareHealth().setWaitForGreenStatus().setWaitForNodes("2").setWaitForRelocatingShards(0).get();
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  logger.info("--> done cluster_health, status " + clusterHealth.getStatus());
  assertThat(Files.exists(server2Shard),equalTo(true));
  logger.info("--> making sure that shard and its replica exist on server1, server2 and server3");
  assertThat(Files.exists(shardDirectory(node_1,"test",0)),equalTo(true));
  assertThat(Files.exists(server2Shard),equalTo(true));
  assertThat(Files.exists(shardDirectory(node_3,"test",0)),equalTo(true));
  logger.info("--> starting node node_4");
  final String node_4=internalCluster().startNode();
  logger.info("--> running cluster_health");
  ensureGreen();
  logger.info("--> making sure that shard and its replica are allocated on server1 and server3 but not on server2");
  assertThat(Files.exists(shardDirectory(node_1,"test",0)),equalTo(true));
  assertThat(Files.exists(shardDirectory(node_3,"test",0)),equalTo(true));
  assertThat(waitForShardDeletion(node_4,"test",0),equalTo(false));
}
