{
  Map<String,Object> additionalFields=new HashMap<>();
  try {
    Metadata metadata=new Metadata();
    byte[] input=ingestDocument.getFieldValueAsBytes(field);
    String parsedContent=TikaImpl.parse(input,metadata,indexedChars);
    if (properties.contains(Property.CONTENT) && Strings.hasLength(parsedContent)) {
      additionalFields.put(Property.CONTENT.toLowerCase(),parsedContent.trim());
    }
    if (properties.contains(Property.LANGUAGE) && Strings.hasLength(parsedContent)) {
      LanguageIdentifier identifier=new LanguageIdentifier(parsedContent);
      String language=identifier.getLanguage();
      additionalFields.put(Property.LANGUAGE.toLowerCase(),language);
    }
    if (properties.contains(Property.DATE)) {
      String createdDate=metadata.get(TikaCoreProperties.CREATED);
      if (createdDate != null) {
        additionalFields.put(Property.DATE.toLowerCase(),createdDate);
      }
    }
    if (properties.contains(Property.TITLE)) {
      String title=metadata.get(TikaCoreProperties.TITLE);
      if (Strings.hasLength(title)) {
        additionalFields.put(Property.TITLE.toLowerCase(),title);
      }
    }
    if (properties.contains(Property.AUTHOR)) {
      String author=metadata.get("Author");
      if (Strings.hasLength(author)) {
        additionalFields.put(Property.AUTHOR.toLowerCase(),author);
      }
    }
    if (properties.contains(Property.KEYWORDS)) {
      String keywords=metadata.get("Keywords");
      if (Strings.hasLength(keywords)) {
        additionalFields.put(Property.KEYWORDS.toLowerCase(),keywords);
      }
    }
    if (properties.contains(Property.CONTENT_TYPE)) {
      String contentType=metadata.get(Metadata.CONTENT_TYPE);
      if (Strings.hasLength(contentType)) {
        additionalFields.put(Property.CONTENT_TYPE.toLowerCase(),contentType);
      }
    }
    if (properties.contains(Property.CONTENT_LENGTH)) {
      String contentLength=metadata.get(Metadata.CONTENT_LENGTH);
      String length=Strings.hasLength(contentLength) ? contentLength : String.valueOf(parsedContent.length());
      additionalFields.put(Property.CONTENT_LENGTH.toLowerCase(),length);
    }
  }
 catch (  Throwable e) {
    throw new ElasticsearchParseException("Error parsing document in field [{}]",e,field);
  }
  ingestDocument.setFieldValue(targetField,additionalFields);
}
