{
  assertAcked(prepareCreate("test").setSettings(Settings.builder().put("index.routing.allocation.exclude._name",backwardsCluster().newNodePattern()).put(indexSettings())));
  ensureYellow();
  int numDocs=randomIntBetween(100,150);
  IndexRequestBuilder[] docs=new IndexRequestBuilder[numDocs];
  for (int i=0; i < numDocs; i++) {
    docs[i]=client().prepareIndex("test","type1",String.valueOf(i)).setSource("field1",English.intToEnglish(i),"num_int",randomInt(),"num_double",randomDouble());
  }
  indexRandom(true,docs);
  assertAllShardsOnNodes("test",backwardsCluster().backwardsNodePattern());
  disableAllocation("test");
  backwardsCluster().allowOnAllNodes("test");
  CountResponse countResponse=client().prepareCount().get();
  assertHitCount(countResponse,numDocs);
  backwardsCluster().upgradeOneNode();
  ensureYellow();
  if (randomBoolean()) {
    for (int i=0; i < numDocs; i++) {
      docs[i]=client().prepareIndex("test","type1",String.valueOf(i)).setSource("field1",English.intToEnglish(i),"num_int",randomInt(),"num_double",randomDouble());
    }
    indexRandom(true,docs);
  }
  enableAllocation("test");
  ensureYellow();
  final int numIters=randomIntBetween(1,20);
  for (int i=0; i < numIters; i++) {
    assertHitCount(client().prepareCount().get(),numDocs);
    assertSimpleSort("num_double","num_int");
  }
  assertVersionCreated(compatibilityVersion(),"test");
}
