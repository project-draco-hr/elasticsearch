{
  long totalQueryTime;
  client.admin().indices().prepareClearCache().setFieldDataCache(true).execute().actionGet();
  System.gc();
  System.out.println("--> Warmup (" + name + ")...");
  for (int j=0; j < QUERY_WARMUP; j++) {
    SearchResponse searchResponse=method.addTermsAgg(client.prepareSearch("test").setSize(0).setQuery(matchAllQuery()),name,field,executionHint).execute().actionGet();
    if (j == 0) {
      System.out.println("--> Loading (" + field + "): took: "+ searchResponse.getTook());
    }
    if (searchResponse.getHits().totalHits() != COUNT) {
      System.err.println("--> mismatch on hits");
    }
  }
  System.out.println("--> Warmup (" + name + ") DONE");
  System.out.println("--> Running (" + name + ")...");
  totalQueryTime=0;
  for (int j=0; j < QUERY_COUNT; j++) {
    SearchResponse searchResponse=method.addTermsAgg(client.prepareSearch().setSize(0).setQuery(matchAllQuery()),name,field,executionHint).execute().actionGet();
    if (searchResponse.getHits().totalHits() != COUNT) {
      System.err.println("--> mismatch on hits");
    }
    totalQueryTime+=searchResponse.getTookInMillis();
  }
  System.out.println("--> Terms Agg (" + name + "): "+ (totalQueryTime / QUERY_COUNT)+ "ms");
  String[] nodeIds=new String[nodes.length];
  for (int i=0; i < nodeIds.length; i++) {
    nodeIds[i]=nodes[i].injector().getInstance(Discovery.class).localNode().getId();
  }
  ClusterStatsResponse clusterStateResponse=client.admin().cluster().prepareClusterStats().setNodesIds(nodeIds).get();
  System.out.println("--> Heap used: " + clusterStateResponse.getNodesStats().getJvm().getHeapUsed());
  ByteSizeValue fieldDataMemoryUsed=clusterStateResponse.getIndicesStats().getFieldData().getMemorySize();
  System.out.println("--> Fielddata memory size: " + fieldDataMemoryUsed);
  return new StatsResult(name,totalQueryTime,fieldDataMemoryUsed);
}
