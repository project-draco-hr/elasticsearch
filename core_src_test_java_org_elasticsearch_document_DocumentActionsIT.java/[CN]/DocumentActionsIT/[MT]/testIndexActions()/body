{
  createIndex();
  NumShards numShards=getNumShards(getConcreteIndexName());
  logger.info("Running Cluster Health");
  ensureGreen();
  logger.info("Indexing [type1/1]");
  IndexResponse indexResponse=client().prepareIndex().setIndex("test").setType("type1").setId("1").setSource(source("1","test")).setRefreshPolicy(RefreshPolicy.IMMEDIATE).get();
  assertThat(indexResponse.getIndex(),equalTo(getConcreteIndexName()));
  assertThat(indexResponse.getId(),equalTo("1"));
  assertThat(indexResponse.getType(),equalTo("type1"));
  logger.info("Refreshing");
  RefreshResponse refreshResponse=refresh();
  assertThat(refreshResponse.getSuccessfulShards(),equalTo(numShards.totalNumShards));
  logger.info("--> index exists?");
  assertThat(indexExists(getConcreteIndexName()),equalTo(true));
  logger.info("--> index exists?, fake index");
  assertThat(indexExists("test1234565"),equalTo(false));
  logger.info("Clearing cache");
  ClearIndicesCacheResponse clearIndicesCacheResponse=client().admin().indices().clearCache(clearIndicesCacheRequest("test").recycler(true).fieldDataCache(true).queryCache(true)).actionGet();
  assertNoFailures(clearIndicesCacheResponse);
  assertThat(clearIndicesCacheResponse.getSuccessfulShards(),equalTo(numShards.totalNumShards));
  logger.info("Force Merging");
  waitForRelocation(ClusterHealthStatus.GREEN);
  ForceMergeResponse mergeResponse=forceMerge();
  assertThat(mergeResponse.getSuccessfulShards(),equalTo(numShards.totalNumShards));
  GetResponse getResult;
  logger.info("Get [type1/1]");
  for (int i=0; i < 5; i++) {
    getResult=client().prepareGet("test","type1","1").setOperationThreaded(false).execute().actionGet();
    assertThat(getResult.getIndex(),equalTo(getConcreteIndexName()));
    assertThat("cycle #" + i,getResult.getSourceAsString(),equalTo(source("1","test").string()));
    assertThat("cycle(map) #" + i,(String)getResult.getSourceAsMap().get("name"),equalTo("test"));
    getResult=client().get(getRequest("test").type("type1").id("1").operationThreaded(true)).actionGet();
    assertThat("cycle #" + i,getResult.getSourceAsString(),equalTo(source("1","test").string()));
    assertThat(getResult.getIndex(),equalTo(getConcreteIndexName()));
  }
  logger.info("Get [type1/1] with script");
  for (int i=0; i < 5; i++) {
    getResult=client().prepareGet("test","type1","1").setStoredFields("name").execute().actionGet();
    assertThat(getResult.getIndex(),equalTo(getConcreteIndexName()));
    assertThat(getResult.isExists(),equalTo(true));
    assertThat(getResult.getSourceAsBytes(),nullValue());
    assertThat(getResult.getField("name").getValues().get(0).toString(),equalTo("test"));
  }
  logger.info("Get [type1/2] (should be empty)");
  for (int i=0; i < 5; i++) {
    getResult=client().get(getRequest("test").type("type1").id("2")).actionGet();
    assertThat(getResult.isExists(),equalTo(false));
  }
  logger.info("Delete [type1/1]");
  DeleteResponse deleteResponse=client().prepareDelete("test","type1","1").execute().actionGet();
  assertThat(deleteResponse.getIndex(),equalTo(getConcreteIndexName()));
  assertThat(deleteResponse.getId(),equalTo("1"));
  assertThat(deleteResponse.getType(),equalTo("type1"));
  logger.info("Refreshing");
  client().admin().indices().refresh(refreshRequest("test")).actionGet();
  logger.info("Get [type1/1] (should be empty)");
  for (int i=0; i < 5; i++) {
    getResult=client().get(getRequest("test").type("type1").id("1")).actionGet();
    assertThat(getResult.isExists(),equalTo(false));
  }
  logger.info("Index [type1/1]");
  client().index(indexRequest("test").type("type1").id("1").source(source("1","test"))).actionGet();
  logger.info("Index [type1/2]");
  client().index(indexRequest("test").type("type1").id("2").source(source("2","test2"))).actionGet();
  logger.info("Flushing");
  FlushResponse flushResult=client().admin().indices().prepareFlush("test").execute().actionGet();
  assertThat(flushResult.getSuccessfulShards(),equalTo(numShards.totalNumShards));
  assertThat(flushResult.getFailedShards(),equalTo(0));
  logger.info("Refreshing");
  client().admin().indices().refresh(refreshRequest("test")).actionGet();
  logger.info("Get [type1/1] and [type1/2]");
  for (int i=0; i < 5; i++) {
    getResult=client().get(getRequest("test").type("type1").id("1")).actionGet();
    assertThat(getResult.getIndex(),equalTo(getConcreteIndexName()));
    assertThat("cycle #" + i,getResult.getSourceAsString(),equalTo(source("1","test").string()));
    getResult=client().get(getRequest("test").type("type1").id("2")).actionGet();
    String ste1=getResult.getSourceAsString();
    String ste2=source("2","test2").string();
    assertThat("cycle #" + i,ste1,equalTo(ste2));
    assertThat(getResult.getIndex(),equalTo(getConcreteIndexName()));
  }
  logger.info("Count");
  for (int i=0; i < 5; i++) {
    SearchResponse countResponse=client().prepareSearch("test").setSize(0).setQuery(termQuery("_type","type1")).execute().actionGet();
    assertNoFailures(countResponse);
    assertThat(countResponse.getHits().totalHits(),equalTo(2L));
    assertThat(countResponse.getSuccessfulShards(),equalTo(numShards.numPrimaries));
    assertThat(countResponse.getFailedShards(),equalTo(0));
    countResponse=client().prepareSearch("test").setSize(0).execute().actionGet();
    assertThat("Failures " + countResponse.getShardFailures(),countResponse.getShardFailures() == null ? 0 : countResponse.getShardFailures().length,equalTo(0));
    assertThat(countResponse.getHits().totalHits(),equalTo(2L));
    assertThat(countResponse.getSuccessfulShards(),equalTo(numShards.numPrimaries));
    assertThat(countResponse.getFailedShards(),equalTo(0));
  }
}
