{
  this.shardId=shardId;
  int computeActiveShards=0;
  int computeRelocatingShards=0;
  int computeInitializingShards=0;
  int computeUnassignedShards=0;
  for (  ShardRouting shardRouting : shardRoutingTable) {
    if (shardRouting.active()) {
      computeActiveShards++;
      if (shardRouting.relocating()) {
        computeRelocatingShards++;
      }
    }
 else     if (shardRouting.initializing()) {
      computeInitializingShards++;
    }
 else     if (shardRouting.unassigned()) {
      computeUnassignedShards++;
    }
  }
  ClusterHealthStatus computeStatus;
  final ShardRouting primaryRouting=shardRoutingTable.primaryShard();
  if (primaryRouting.active()) {
    if (computeActiveShards == shardRoutingTable.size()) {
      computeStatus=ClusterHealthStatus.GREEN;
    }
 else {
      computeStatus=ClusterHealthStatus.YELLOW;
    }
  }
 else {
    computeStatus=getInactivePrimaryHealth(primaryRouting,indexMetaData);
  }
  this.status=computeStatus;
  this.activeShards=computeActiveShards;
  this.relocatingShards=computeRelocatingShards;
  this.initializingShards=computeInitializingShards;
  this.unassignedShards=computeUnassignedShards;
  this.primaryActive=primaryRouting.active();
}
