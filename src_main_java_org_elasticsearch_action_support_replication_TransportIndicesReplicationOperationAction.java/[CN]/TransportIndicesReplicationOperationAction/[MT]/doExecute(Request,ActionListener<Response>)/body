{
  ClusterState clusterState=clusterService.state();
  ClusterBlockException blockException=checkGlobalBlock(clusterState,request);
  if (blockException != null) {
    throw blockException;
  }
  String[] concreteIndices=clusterState.metaData().concreteIndices(request.indices(),request.indicesOptions());
  blockException=checkRequestBlock(clusterState,request,concreteIndices);
  if (blockException != null) {
    throw blockException;
  }
  final AtomicInteger indexCounter=new AtomicInteger();
  final AtomicInteger completionCounter=new AtomicInteger(concreteIndices.length);
  final AtomicReferenceArray<Object> indexResponses=new AtomicReferenceArray<>(concreteIndices.length);
  final long startTimeInMillis=System.currentTimeMillis();
  Map<String,Set<String>> routingMap=resolveRouting(clusterState,request);
  if (concreteIndices == null || concreteIndices.length == 0) {
    listener.onResponse(newResponseInstance(request,indexResponses));
  }
 else {
    for (    final String index : concreteIndices) {
      Set<String> routing=null;
      if (routingMap != null) {
        routing=routingMap.get(index);
      }
      IndexRequest indexRequest=newIndexRequestInstance(request,index,routing,startTimeInMillis);
      indexRequest.listenerThreaded(false);
      indexAction.execute(indexRequest,new ActionListener<IndexResponse>(){
        @Override public void onResponse(        IndexResponse result){
          indexResponses.set(indexCounter.getAndIncrement(),result);
          if (completionCounter.decrementAndGet() == 0) {
            listener.onResponse(newResponseInstance(request,indexResponses));
          }
        }
        @Override public void onFailure(        Throwable e){
          int index=indexCounter.getAndIncrement();
          if (accumulateExceptions()) {
            indexResponses.set(index,e);
          }
          if (completionCounter.decrementAndGet() == 0) {
            listener.onResponse(newResponseInstance(request,indexResponses));
          }
        }
      }
);
    }
  }
}
