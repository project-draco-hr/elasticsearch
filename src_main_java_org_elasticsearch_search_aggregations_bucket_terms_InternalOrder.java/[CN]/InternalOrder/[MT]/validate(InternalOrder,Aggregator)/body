{
  if (!(order instanceof Aggregation)) {
    return order;
  }
  String aggName=((Aggregation)order).aggName();
  Aggregator[] subAggregators=termsAggregator.subAggregators();
  for (int i=0; i < subAggregators.length; i++) {
    Aggregator aggregator=subAggregators[i];
    if (aggregator.name().equals(aggName)) {
      if (!(aggregator instanceof MetricsAggregator)) {
        throw new AggregationExecutionException("terms aggregation [" + termsAggregator.name() + "] is configured to order by sub-aggregation ["+ aggName+ "] which is is not a metrics aggregation. Terms aggregation order can only refer to metrics aggregations");
      }
      if (aggregator instanceof MetricsAggregator.MultiValue) {
        String valueName=((Aggregation)order).metricName();
        if (valueName == null) {
          throw new AggregationExecutionException("terms aggregation [" + termsAggregator.name() + "] is configured with a sub-aggregation order ["+ aggName+ "] which is a multi-valued aggregation, yet no metric name was specified");
        }
        if (!((MetricsAggregator.MultiValue)aggregator).hasMetric(valueName)) {
          throw new AggregationExecutionException("terms aggregation [" + termsAggregator.name() + "] is configured with a sub-aggregation order ["+ aggName+ "] and value ["+ valueName+ "] yet the referred sub aggregator holds no metric that goes by this name");
        }
        return order;
      }
      return order;
    }
  }
  throw new AggregationExecutionException("terms aggregation [" + termsAggregator.name() + "] is configured with a sub-aggregation order ["+ aggName+ "] but no sub aggregation with this name is configured");
}
