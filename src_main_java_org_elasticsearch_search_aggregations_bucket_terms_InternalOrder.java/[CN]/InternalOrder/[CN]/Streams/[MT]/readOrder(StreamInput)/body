{
  byte id=in.readByte();
switch (id) {
case COUNT_DESC_ID:
    return InternalOrder.COUNT_DESC;
case COUNT_ASC_ID:
  return InternalOrder.COUNT_ASC;
case TERM_DESC_ID:
return InternalOrder.TERM_DESC;
case TERM_ASC_ID:
return InternalOrder.TERM_ASC;
case Aggregation.ID:
boolean asc=in.readBoolean();
String key=in.readString();
if (in.getVersion().onOrAfter(Version.V_1_1_0)) {
return new InternalOrder.Aggregation(key,asc);
}
boolean hasValueNmae=in.readBoolean();
if (hasValueNmae) {
return new InternalOrder.Aggregation(key + "." + in.readString(),asc);
}
return new InternalOrder.Aggregation(key,asc);
case CompoundOrder.ID:
int size=in.readVInt();
List<Terms.Order> compoundOrder=new ArrayList<>(size);
for (int i=0; i < size; i++) {
compoundOrder.add(Streams.readOrder(in));
}
return new CompoundOrder(compoundOrder);
default :
throw new RuntimeException("unknown terms order");
}
}
