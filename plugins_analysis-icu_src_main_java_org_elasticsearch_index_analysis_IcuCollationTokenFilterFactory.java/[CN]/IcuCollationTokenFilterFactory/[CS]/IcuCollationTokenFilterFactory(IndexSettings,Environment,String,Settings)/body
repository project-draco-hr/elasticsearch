{
  super(indexSettings,name,settings);
  Collator collator;
  String rules=settings.get("rules");
  if (rules != null) {
    Exception failureToResolve=null;
    try {
      rules=Streams.copyToString(Files.newBufferedReader(environment.configFile().resolve(rules),Charset.forName("UTF-8")));
    }
 catch (    IOException|SecurityException e) {
      failureToResolve=e;
    }
    try {
      collator=new RuleBasedCollator(rules);
    }
 catch (    Exception e) {
      if (failureToResolve != null) {
        throw new IllegalArgumentException("Failed to resolve collation rules location",failureToResolve);
      }
 else {
        throw new IllegalArgumentException("Failed to parse collation rules",e);
      }
    }
  }
 else {
    String language=settings.get("language");
    if (language != null) {
      ULocale locale;
      String country=settings.get("country");
      if (country != null) {
        String variant=settings.get("variant");
        if (variant != null) {
          locale=new ULocale(language,country,variant);
        }
 else {
          locale=new ULocale(language,country);
        }
      }
 else {
        locale=new ULocale(language);
      }
      collator=Collator.getInstance(locale);
    }
 else {
      collator=Collator.getInstance();
    }
  }
  String strength=settings.get("strength");
  if (strength != null) {
    if (strength.equalsIgnoreCase("primary")) {
      collator.setStrength(Collator.PRIMARY);
    }
 else     if (strength.equalsIgnoreCase("secondary")) {
      collator.setStrength(Collator.SECONDARY);
    }
 else     if (strength.equalsIgnoreCase("tertiary")) {
      collator.setStrength(Collator.TERTIARY);
    }
 else     if (strength.equalsIgnoreCase("quaternary")) {
      collator.setStrength(Collator.QUATERNARY);
    }
 else     if (strength.equalsIgnoreCase("identical")) {
      collator.setStrength(Collator.IDENTICAL);
    }
 else {
      throw new IllegalArgumentException("Invalid strength: " + strength);
    }
  }
  String decomposition=settings.get("decomposition");
  if (decomposition != null) {
    if (decomposition.equalsIgnoreCase("no")) {
      collator.setDecomposition(Collator.NO_DECOMPOSITION);
    }
 else     if (decomposition.equalsIgnoreCase("canonical")) {
      collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);
    }
 else {
      throw new IllegalArgumentException("Invalid decomposition: " + decomposition);
    }
  }
  RuleBasedCollator rbc=(RuleBasedCollator)collator;
  String alternate=settings.get("alternate");
  if (alternate != null) {
    if (alternate.equalsIgnoreCase("shifted")) {
      rbc.setAlternateHandlingShifted(true);
    }
 else     if (alternate.equalsIgnoreCase("non-ignorable")) {
      rbc.setAlternateHandlingShifted(false);
    }
 else {
      throw new IllegalArgumentException("Invalid alternate: " + alternate);
    }
  }
  Boolean caseLevel=settings.getAsBoolean("caseLevel",null);
  if (caseLevel != null) {
    rbc.setCaseLevel(caseLevel);
  }
  String caseFirst=settings.get("caseFirst");
  if (caseFirst != null) {
    if (caseFirst.equalsIgnoreCase("lower")) {
      rbc.setLowerCaseFirst(true);
    }
 else     if (caseFirst.equalsIgnoreCase("upper")) {
      rbc.setUpperCaseFirst(true);
    }
 else {
      throw new IllegalArgumentException("Invalid caseFirst: " + caseFirst);
    }
  }
  Boolean numeric=settings.getAsBoolean("numeric",null);
  if (numeric != null) {
    rbc.setNumericCollation(numeric);
  }
  String variableTop=settings.get("variableTop");
  if (variableTop != null) {
    rbc.setVariableTop(variableTop);
  }
  Boolean hiraganaQuaternaryMode=settings.getAsBoolean("hiraganaQuaternaryMode",null);
  if (hiraganaQuaternaryMode != null) {
    rbc.setHiraganaQuaternary(hiraganaQuaternaryMode);
  }
  this.collator=collator;
}
