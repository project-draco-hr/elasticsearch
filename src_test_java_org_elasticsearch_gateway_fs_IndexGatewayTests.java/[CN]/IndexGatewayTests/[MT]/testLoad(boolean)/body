{
  logger.info("Running with fullRecover [{}]",fullRecovery);
  cluster().startNode(nodeSettings(0));
  logger.info("Running Cluster Health (waiting for node to startup properly)");
  ClusterHealthResponse clusterHealth=client().admin().cluster().health(clusterHealthRequest().waitForGreenStatus()).actionGet();
  logger.info("Done Cluster Health, status " + clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.GREEN));
  Environment environment=cluster().getInstance(Environment.class);
  logger.info("--> creating test index ...");
  client().admin().indices().prepareCreate("test").execute().actionGet();
  logger.info("Running Cluster Health (wait for the shards to startup)");
  clusterHealth=client().admin().cluster().health(clusterHealthRequest().waitForYellowStatus().waitForActiveShards(1)).actionGet();
  logger.info("Done Cluster Health, status " + clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.YELLOW));
  logger.info("--> refreshing and checking count");
  client().admin().indices().prepareRefresh().execute().actionGet();
  assertThat(client().prepareCount().setQuery(matchAllQuery()).execute().actionGet().getCount(),equalTo(0l));
  long numDocs=between(100,rarely() ? 2000 : 1000);
  logger.info("--> indexing " + numDocs + "  docs");
  boolean hasSnapshoted=false;
  boolean hasFlushed=false;
  for (long i=0; i < numDocs; i++) {
    client().prepareIndex("test","type1",Long.toString(i)).setCreate(true).setSource(MapBuilder.<String,Object>newMapBuilder().put("test","value" + i).map()).execute().actionGet();
    if (rarely()) {
      hasSnapshoted=true;
      client().admin().indices().prepareGatewaySnapshot().execute().actionGet();
    }
    if (rarely()) {
      hasFlushed=true;
      client().admin().indices().prepareFlush().execute().actionGet();
    }
  }
  if (!hasSnapshoted) {
    client().admin().indices().prepareGatewaySnapshot().execute().actionGet();
  }
  if (!hasFlushed) {
    client().admin().indices().prepareFlush().execute().actionGet();
  }
  logger.info("--> refreshing and checking count");
  client().admin().indices().prepareRefresh().execute().actionGet();
  assertThat(client().prepareCount().setQuery(matchAllQuery()).execute().actionGet().getCount(),equalTo(numDocs));
  logger.info("--> closing the server");
  cluster().stopRandomNode();
  if (fullRecovery) {
    logger.info("Clearing cluster data dir, so there will be a full recovery from the gateway");
    FileSystemUtils.deleteRecursively(environment.dataWithClusterFiles());
    logger.info("Starting the server, should recover from the gateway (both index and translog) without reusing work dir");
  }
  cluster().startNode(nodeSettings(0));
  logger.info("--> running Cluster Health (wait for the shards to startup)");
  clusterHealth=client().admin().cluster().health(clusterHealthRequest().waitForYellowStatus().waitForActiveShards(1)).actionGet();
  logger.info("--> done Cluster Health, status " + clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.YELLOW));
  logger.info("--> checking count");
  assertThat(client().prepareCount().setQuery(matchAllQuery()).execute().actionGet().getCount(),equalTo(numDocs));
  logger.info("--> checking reuse / recovery status");
  IndicesStatusResponse statusResponse=client().admin().indices().prepareStatus().setRecovery(true).execute().actionGet();
  for (  IndexShardStatus indexShardStatus : statusResponse.getIndex("test")) {
    for (    ShardStatus shardStatus : indexShardStatus) {
      if (shardStatus.getShardRouting().primary()) {
        if (fullRecovery || !isPersistentStorage()) {
          assertThat(shardStatus.getGatewayRecoveryStatus().getReusedIndexSize().bytes(),equalTo(0l));
        }
 else {
          assertThat(shardStatus.getGatewayRecoveryStatus().getReusedIndexSize().bytes(),greaterThan(shardStatus.getGatewayRecoveryStatus().getIndexSize().bytes() - 8196));
        }
      }
    }
  }
}
