{
  if (globalOrdinals == null) {
    return buildEmptyAggregation();
  }
  final int size;
  if (bucketCountThresholds.getMinDocCount() == 0) {
    size=(int)Math.min(globalOrdinals.getMaxOrd(),bucketCountThresholds.getShardSize());
  }
 else {
    size=(int)Math.min(maxBucketOrd(),bucketCountThresholds.getShardSize());
  }
  BucketPriorityQueue ordered=new BucketPriorityQueue(size,order.comparator(this));
  OrdBucket spare=new OrdBucket(-1,0,null);
  for (long globalTermOrd=Ordinals.MIN_ORDINAL; globalTermOrd < globalOrdinals.getMaxOrd(); ++globalTermOrd) {
    if (includeExclude != null && !acceptedGlobalOrdinals.get(globalTermOrd)) {
      continue;
    }
    final long bucketOrd=getBucketOrd(globalTermOrd);
    final int bucketDocCount=bucketOrd < 0 ? 0 : bucketDocCount(bucketOrd);
    if (bucketCountThresholds.getMinDocCount() > 0 && bucketDocCount == 0) {
      continue;
    }
    spare.globalOrd=globalTermOrd;
    spare.bucketOrd=bucketOrd;
    spare.docCount=bucketDocCount;
    if (bucketCountThresholds.getShardMinDocCount() <= spare.docCount) {
      spare=(OrdBucket)ordered.insertWithOverflow(spare);
      if (spare == null) {
        spare=new OrdBucket(-1,0,null);
      }
    }
  }
  final InternalTerms.Bucket[] list=new InternalTerms.Bucket[ordered.size()];
  long survivingBucketOrds[]=new long[ordered.size()];
  for (int i=ordered.size() - 1; i >= 0; --i) {
    final OrdBucket bucket=(OrdBucket)ordered.pop();
    survivingBucketOrds[i]=bucket.bucketOrd;
    BytesRef scratch=new BytesRef();
    copy(globalValues.getValueByOrd(bucket.globalOrd),scratch);
    list[i]=new StringTerms.Bucket(scratch,bucket.docCount,null);
    list[i].bucketOrd=bucket.bucketOrd;
  }
  runDeferredCollections(survivingBucketOrds);
  for (int i=0; i < list.length; i++) {
    Bucket bucket=list[i];
    bucket.aggregations=bucket.docCount == 0 ? bucketEmptyAggregations() : bucketAggregations(bucket.bucketOrd);
  }
  return new StringTerms(name,order,bucketCountThresholds.getRequiredSize(),bucketCountThresholds.getMinDocCount(),Arrays.asList(list));
}
