{
  count=fieldA.size();
  double meanA=0d;
  double meanB=0d;
  for (int n=0; n < count; ++n) {
    meanA+=fieldA.get(n);
    meanB+=fieldB.get(n);
  }
  means.put(fieldAKey,meanA / count);
  means.put(fieldBKey,meanB / count);
  double dA;
  double dB;
  double skewA=0d;
  double skewB=0d;
  double kurtA=0d;
  double kurtB=0d;
  double varA=0d;
  double varB=0d;
  double cVar=0d;
  for (int n=0; n < count; ++n) {
    dA=fieldA.get(n) - means.get(fieldAKey);
    varA+=dA * dA;
    skewA+=dA * dA * dA;
    kurtA+=dA * dA * dA* dA;
    dB=fieldB.get(n) - means.get(fieldBKey);
    varB+=dB * dB;
    skewB+=dB * dB * dB;
    kurtB+=dB * dB * dB* dB;
    cVar+=dA * dB;
  }
  variances.put(fieldAKey,varA / (count - 1));
  final double stdA=Math.sqrt(variances.get(fieldAKey));
  variances.put(fieldBKey,varB / (count - 1));
  final double stdB=Math.sqrt(variances.get(fieldBKey));
  skewness.put(fieldAKey,skewA / ((count - 1) * variances.get(fieldAKey) * stdA));
  skewness.put(fieldBKey,skewB / ((count - 1) * variances.get(fieldBKey) * stdB));
  kurtosis.put(fieldAKey,kurtA / ((count - 1) * variances.get(fieldAKey) * variances.get(fieldAKey)));
  kurtosis.put(fieldBKey,kurtB / ((count - 1) * variances.get(fieldBKey) * variances.get(fieldBKey)));
  final HashMap<String,Double> fieldACovar=new HashMap<>(2);
  fieldACovar.put(fieldAKey,1d);
  cVar/=count - 1;
  fieldACovar.put(fieldBKey,cVar);
  covariances.put(fieldAKey,fieldACovar);
  final HashMap<String,Double> fieldBCovar=new HashMap<>(2);
  fieldBCovar.put(fieldAKey,cVar);
  fieldBCovar.put(fieldBKey,1d);
  covariances.put(fieldBKey,fieldBCovar);
  final HashMap<String,Double> fieldACorr=new HashMap<>();
  fieldACorr.put(fieldAKey,1d);
  double corr=covariances.get(fieldAKey).get(fieldBKey);
  corr/=stdA * stdB;
  fieldACorr.put(fieldBKey,corr);
  correlations.put(fieldAKey,fieldACorr);
  final HashMap<String,Double> fieldBCorr=new HashMap<>();
  fieldBCorr.put(fieldAKey,corr);
  fieldBCorr.put(fieldBKey,1d);
  correlations.put(fieldBKey,fieldBCorr);
}
