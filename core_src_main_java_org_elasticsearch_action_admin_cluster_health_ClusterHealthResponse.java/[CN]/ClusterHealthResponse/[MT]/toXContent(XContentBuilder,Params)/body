{
  builder.field(CLUSTER_NAME,getClusterName());
  builder.field(STATUS,getStatus().name().toLowerCase(Locale.ROOT));
  builder.field(TIMED_OUT,isTimedOut());
  builder.field(NUMBER_OF_NODES,getNumberOfNodes());
  builder.field(NUMBER_OF_DATA_NODES,getNumberOfDataNodes());
  builder.field(ACTIVE_PRIMARY_SHARDS,getActivePrimaryShards());
  builder.field(ACTIVE_SHARDS,getActiveShards());
  builder.field(RELOCATING_SHARDS,getRelocatingShards());
  builder.field(INITIALIZING_SHARDS,getInitializingShards());
  builder.field(UNASSIGNED_SHARDS,getUnassignedShards());
  builder.field(DELAYED_UNASSIGNED_SHARDS,getDelayedUnassignedShards());
  builder.field(NUMBER_OF_PENDING_TASKS,getNumberOfPendingTasks());
  builder.field(NUMBER_OF_IN_FLIGHT_FETCH,getNumberOfInFlightFetch());
  builder.timeValueField(TASK_MAX_WAIT_TIME_IN_QUEUE_IN_MILLIS,TASK_MAX_WAIT_TIME_IN_QUEUE,getTaskMaxWaitingTime());
  builder.percentageField(ACTIVE_SHARDS_PERCENT_AS_NUMBER,ACTIVE_SHARDS_PERCENT,getActiveShardsPercent());
  String level=params.param("level","cluster");
  boolean outputIndices="indices".equals(level) || "shards".equals(level);
  if (outputIndices) {
    builder.startObject(INDICES);
    for (    ClusterIndexHealth indexHealth : clusterStateHealth.getIndices().values()) {
      builder.startObject(indexHealth.getIndex());
      indexHealth.toXContent(builder,params);
      builder.endObject();
    }
    builder.endObject();
  }
  return builder;
}
