{
  int waitFor=5;
  if (request.getWaitForStatus() == null) {
    waitFor--;
  }
  if (request.getWaitForRelocatingShards() == -1) {
    waitFor--;
  }
  if (request.getWaitForActiveShards() == -1) {
    waitFor--;
  }
  if (request.getWaitForNodes().isEmpty()) {
    waitFor--;
  }
  if (request.getIndices().length == 0) {
    waitFor--;
  }
  if (waitFor == 0) {
    ClusterState clusterState=clusterService.state();
    return clusterHealth(request,clusterState);
  }
  long endTime=System.currentTimeMillis() + request.getTimeout().millis();
  while (true) {
    int waitForCounter=0;
    ClusterState clusterState=clusterService.state();
    ClusterHealthResponse response=clusterHealth(request,clusterState);
    if (request.getWaitForStatus() != null && response.getStatus().value() <= request.getWaitForStatus().value()) {
      waitForCounter++;
    }
    if (request.getWaitForRelocatingShards() != -1 && response.getRelocatingShards() <= request.getWaitForRelocatingShards()) {
      waitForCounter++;
    }
    if (request.getWaitForActiveShards() != -1 && response.getActiveShards() >= request.getWaitForActiveShards()) {
      waitForCounter++;
    }
    if (request.getIndices().length > 0) {
      try {
        clusterState.metaData().concreteIndices(request.getIndices());
        waitForCounter++;
      }
 catch (      IndexMissingException e) {
        response.status=ClusterHealthStatus.RED;
      }
    }
    if (!request.getWaitForNodes().isEmpty()) {
      if (request.getWaitForNodes().startsWith(">=")) {
        int expected=Integer.parseInt(request.getWaitForNodes().substring(2));
        if (response.getNumberOfNodes() >= expected) {
          waitForCounter++;
        }
      }
 else       if (request.getWaitForNodes().startsWith("ge(")) {
        int expected=Integer.parseInt(request.getWaitForNodes().substring(3,request.getWaitForNodes().length() - 1));
        if (response.getNumberOfNodes() >= expected) {
          waitForCounter++;
        }
      }
 else       if (request.getWaitForNodes().startsWith("<=")) {
        int expected=Integer.parseInt(request.getWaitForNodes().substring(2));
        if (response.getNumberOfNodes() <= expected) {
          waitForCounter++;
        }
      }
 else       if (request.getWaitForNodes().startsWith("le(")) {
        int expected=Integer.parseInt(request.getWaitForNodes().substring(3,request.getWaitForNodes().length() - 1));
        if (response.getNumberOfNodes() <= expected) {
          waitForCounter++;
        }
      }
 else       if (request.getWaitForNodes().startsWith(">")) {
        int expected=Integer.parseInt(request.getWaitForNodes().substring(1));
        if (response.getNumberOfNodes() > expected) {
          waitForCounter++;
        }
      }
 else       if (request.getWaitForNodes().startsWith("gt(")) {
        int expected=Integer.parseInt(request.getWaitForNodes().substring(3,request.getWaitForNodes().length() - 1));
        if (response.getNumberOfNodes() > expected) {
          waitForCounter++;
        }
      }
 else       if (request.getWaitForNodes().startsWith("<")) {
        int expected=Integer.parseInt(request.getWaitForNodes().substring(1));
        if (response.getNumberOfNodes() < expected) {
          waitForCounter++;
        }
      }
 else       if (request.getWaitForNodes().startsWith("lt(")) {
        int expected=Integer.parseInt(request.getWaitForNodes().substring(3,request.getWaitForNodes().length() - 1));
        if (response.getNumberOfNodes() < expected) {
          waitForCounter++;
        }
      }
 else {
        int expected=Integer.parseInt(request.getWaitForNodes());
        if (response.getNumberOfNodes() == expected) {
          waitForCounter++;
        }
      }
    }
    if (waitForCounter == waitFor) {
      return response;
    }
    if (System.currentTimeMillis() > endTime) {
      response.timedOut=true;
      return response;
    }
    try {
      Thread.sleep(200);
    }
 catch (    InterruptedException e) {
      response.timedOut=true;
      return response;
    }
  }
}
