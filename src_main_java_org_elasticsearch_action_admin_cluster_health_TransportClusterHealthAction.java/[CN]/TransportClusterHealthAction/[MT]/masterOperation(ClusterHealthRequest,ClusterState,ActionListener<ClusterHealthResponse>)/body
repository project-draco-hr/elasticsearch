{
  if (request.waitForEvents() != null) {
    final long endTime=System.currentTimeMillis() + request.timeout().millis();
    clusterService.submitStateUpdateTask("cluster_health (wait_for_events [" + request.waitForEvents() + "])",request.waitForEvents(),new ProcessedClusterStateUpdateTask(){
      @Override public ClusterState execute(      ClusterState currentState){
        return currentState;
      }
      @Override public void clusterStateProcessed(      String source,      ClusterState oldState,      ClusterState newState){
        final long timeoutInMillis=Math.max(0,endTime - System.currentTimeMillis());
        final TimeValue newTimeout=TimeValue.timeValueMillis(timeoutInMillis);
        request.timeout(newTimeout);
        executeHealth(request,listener);
      }
      @Override public void onFailure(      String source,      Throwable t){
        logger.error("unexpected failure during [{}]",t,source);
        listener.onFailure(t);
      }
      @Override public boolean runOnlyOnMaster(){
        return !request.local();
      }
    }
);
  }
 else {
    executeHealth(request,listener);
  }
}
