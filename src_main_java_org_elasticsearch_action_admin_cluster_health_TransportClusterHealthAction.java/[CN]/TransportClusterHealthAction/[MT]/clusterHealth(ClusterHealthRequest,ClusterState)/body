{
  if (logger.isTraceEnabled()) {
    logger.trace("Calculating health based on state version [{}]",clusterState.version());
  }
  RoutingTableValidation validation=clusterState.routingTable().validate(clusterState.metaData());
  ClusterHealthResponse response=new ClusterHealthResponse(clusterName.value(),validation.failures());
  response.numberOfNodes=clusterState.nodes().size();
  response.numberOfDataNodes=clusterState.nodes().dataNodes().size();
  for (  String index : clusterState.metaData().concreteIndicesIgnoreMissing(request.getIndices())) {
    IndexRoutingTable indexRoutingTable=clusterState.routingTable().index(index);
    IndexMetaData indexMetaData=clusterState.metaData().index(index);
    if (indexRoutingTable == null) {
      continue;
    }
    ClusterIndexHealth indexHealth=new ClusterIndexHealth(index,indexMetaData.numberOfShards(),indexMetaData.numberOfReplicas(),validation.indexFailures(indexMetaData.index()));
    for (    IndexShardRoutingTable shardRoutingTable : indexRoutingTable) {
      ClusterShardHealth shardHealth=new ClusterShardHealth(shardRoutingTable.shardId().id());
      for (      ShardRouting shardRouting : shardRoutingTable) {
        if (shardRouting.active()) {
          shardHealth.activeShards++;
          if (shardRouting.relocating()) {
            shardHealth.relocatingShards++;
          }
          if (shardRouting.primary()) {
            shardHealth.primaryActive=true;
          }
        }
 else         if (shardRouting.initializing()) {
          shardHealth.initializingShards++;
        }
 else         if (shardRouting.unassigned()) {
          shardHealth.unassignedShards++;
        }
      }
      if (shardHealth.primaryActive) {
        if (shardHealth.activeShards == shardRoutingTable.size()) {
          shardHealth.status=ClusterHealthStatus.GREEN;
        }
 else {
          shardHealth.status=ClusterHealthStatus.YELLOW;
        }
      }
 else {
        shardHealth.status=ClusterHealthStatus.RED;
      }
      indexHealth.shards.put(shardHealth.getId(),shardHealth);
    }
    for (    ClusterShardHealth shardHealth : indexHealth) {
      if (shardHealth.isPrimaryActive()) {
        indexHealth.activePrimaryShards++;
      }
      indexHealth.activeShards+=shardHealth.activeShards;
      indexHealth.relocatingShards+=shardHealth.relocatingShards;
      indexHealth.initializingShards+=shardHealth.initializingShards;
      indexHealth.unassignedShards+=shardHealth.unassignedShards;
    }
    indexHealth.status=ClusterHealthStatus.GREEN;
    if (!indexHealth.getValidationFailures().isEmpty()) {
      indexHealth.status=ClusterHealthStatus.RED;
    }
 else     if (indexHealth.getShards().isEmpty()) {
      indexHealth.status=ClusterHealthStatus.RED;
    }
 else {
      for (      ClusterShardHealth shardHealth : indexHealth) {
        if (shardHealth.getStatus() == ClusterHealthStatus.RED) {
          indexHealth.status=ClusterHealthStatus.RED;
          break;
        }
        if (shardHealth.getStatus() == ClusterHealthStatus.YELLOW) {
          indexHealth.status=ClusterHealthStatus.YELLOW;
        }
      }
    }
    response.indices.put(indexHealth.getIndex(),indexHealth);
  }
  for (  ClusterIndexHealth indexHealth : response) {
    response.activePrimaryShards+=indexHealth.activePrimaryShards;
    response.activeShards+=indexHealth.activeShards;
    response.relocatingShards+=indexHealth.relocatingShards;
    response.initializingShards+=indexHealth.initializingShards;
    response.unassignedShards+=indexHealth.unassignedShards;
  }
  response.status=ClusterHealthStatus.GREEN;
  if (!response.getValidationFailures().isEmpty()) {
    response.status=ClusterHealthStatus.RED;
  }
 else   if (clusterState.blocks().hasGlobalBlock(RestStatus.SERVICE_UNAVAILABLE)) {
    response.status=ClusterHealthStatus.RED;
  }
 else {
    for (    ClusterIndexHealth indexHealth : response) {
      if (indexHealth.getStatus() == ClusterHealthStatus.RED) {
        response.status=ClusterHealthStatus.RED;
        break;
      }
      if (indexHealth.getStatus() == ClusterHealthStatus.YELLOW) {
        response.status=ClusterHealthStatus.YELLOW;
      }
    }
  }
  return response;
}
