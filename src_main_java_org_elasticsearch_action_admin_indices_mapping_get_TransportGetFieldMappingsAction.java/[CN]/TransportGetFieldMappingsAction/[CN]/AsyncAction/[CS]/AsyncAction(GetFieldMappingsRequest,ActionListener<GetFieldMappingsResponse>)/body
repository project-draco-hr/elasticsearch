{
  this.origRequest=origRequest;
  this.listener=listener;
  this.state=clusterService.state();
  String[] concreteIndices=state.metaData().concreteIndices(origRequest.indices(),origRequest.indicesOptions());
  origRequest.indices(concreteIndices);
  mappingsIdPerIndex=new ObjectIntOpenHashMap<String>(concreteIndices.length);
  pendingRequests=new AtomicInteger();
  indexErrors=new AtomicArray<Throwable>(concreteIndices.length);
  indexMappings=new AtomicArray<ImmutableMap<String,ImmutableMap<String,FieldMappingMetaData>>>(concreteIndices.length);
  shardsPerIndex=new ShardIterator[concreteIndices.length];
  int shardSeed=shardPicker.getAndIncrement();
  for (int id=0; id < concreteIndices.length; id++) {
    String index=concreteIndices[id];
    mappingsIdPerIndex.put(index,id);
    int shardNo=state.metaData().getIndices().get(index).getNumberOfShards();
    for (int shard=shardNo - 1; shard >= 0; shard--) {
      try {
        shardsPerIndex[id]=clusterService.operationRouting().getShards(state,index,(shard + shardSeed) % shardNo,"_local");
        break;
      }
 catch (      IndexShardMissingException e) {
        if (shard == 0) {
          throw e;
        }
      }
    }
  }
}
