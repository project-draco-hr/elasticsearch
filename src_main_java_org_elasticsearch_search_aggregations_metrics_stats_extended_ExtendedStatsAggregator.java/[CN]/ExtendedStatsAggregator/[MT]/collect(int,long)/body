{
  if (owningBucketOrdinal >= counts.size()) {
    final long from=counts.size();
    final long overSize=BigArrays.overSize(owningBucketOrdinal + 1);
    counts=BigArrays.resize(counts,overSize);
    sums=BigArrays.resize(sums,overSize);
    mins=BigArrays.resize(mins,overSize);
    maxes=BigArrays.resize(maxes,overSize);
    sumOfSqrs=BigArrays.resize(sumOfSqrs,overSize);
    mins.fill(from,overSize,Double.POSITIVE_INFINITY);
    maxes.fill(from,overSize,Double.NEGATIVE_INFINITY);
  }
  final int valuesCount=values.setDocument(doc);
  counts.increment(owningBucketOrdinal,valuesCount);
  double sum=0;
  double sumOfSqr=0;
  double min=mins.get(owningBucketOrdinal);
  double max=maxes.get(owningBucketOrdinal);
  for (int i=0; i < valuesCount; i++) {
    double value=values.nextValue();
    sum+=value;
    sumOfSqr+=value * value;
    min=Math.min(min,value);
    max=Math.max(max,value);
  }
  sums.increment(owningBucketOrdinal,sum);
  sumOfSqrs.increment(owningBucketOrdinal,sumOfSqr);
  mins.set(owningBucketOrdinal,min);
  maxes.set(owningBucketOrdinal,max);
}
