{
  assertAcked(prepareCreate("cb-test",1,settingsBuilder().put(SETTING_NUMBER_OF_REPLICAS,between(0,1))));
  Client client=client();
  Settings resetSettings=settingsBuilder().put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING,"10b").build();
  client.admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings).execute().actionGet();
  int docCount=scaledRandomIntBetween(300,1000);
  List<IndexRequestBuilder> reqs=newArrayList();
  for (long id=0; id < docCount; id++) {
    reqs.add(client.prepareIndex("cb-test","type",Long.toString(id)).setSource("test",id));
  }
  indexRandom(true,reqs);
  try {
    client.prepareSearch("cb-test").setQuery(matchAllQuery()).addAggregation(cardinality("card").field("test")).get();
    fail("aggregation should have tripped the breaker");
  }
 catch (  Exception e) {
    String errMsg="CircuitBreakingException[[REQUEST] Data too large, data for [<reused_arrays>] would be larger than limit of [10/10b]]";
    assertThat("Exception: " + ExceptionsHelper.unwrapCause(e) + " should contain a CircuitBreakingException",ExceptionsHelper.unwrapCause(e).getMessage().contains(errMsg),equalTo(true));
  }
  resetSettings=settingsBuilder().put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_TYPE_SETTING,"noop").build();
  client.admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings).execute().actionGet();
  client.prepareSearch("cb-test").setQuery(matchAllQuery()).addAggregation(cardinality("card").field("test")).get();
}
