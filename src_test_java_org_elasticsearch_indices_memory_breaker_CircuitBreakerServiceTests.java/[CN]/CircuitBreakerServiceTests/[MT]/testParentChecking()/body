{
  assertAcked(prepareCreate("cb-test",1,settingsBuilder().put(SETTING_NUMBER_OF_REPLICAS,between(0,1))));
  Client client=client();
  try {
    int docCount=scaledRandomIntBetween(300,1000);
    for (long id=0; id < docCount; id++) {
      client.prepareIndex("cb-test","type",Long.toString(id)).setSource(MapBuilder.<String,Object>newMapBuilder().put("test","value" + id).map()).execute().actionGet();
    }
    refresh();
    long beforeReqLimit=client.admin().cluster().prepareNodesStats().setBreaker(true).get().getNodes()[0].getBreaker().getStats(CircuitBreaker.Name.REQUEST).getLimit();
    Settings resetSettings=settingsBuilder().put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING,"10b").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING,1.0).build();
    client.admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings).execute().actionGet();
    try {
      client.prepareSearch("cb-test").setQuery(matchAllQuery()).addSort("test",SortOrder.DESC).get();
    }
 catch (    Exception e) {
      String errMsg="[FIELDDATA] Data too large, data for [test] would be larger than limit of [10/10b]";
      assertThat("Exception: " + ExceptionsHelper.unwrapCause(e) + " should contain a CircuitBreakingException",ExceptionsHelper.unwrapCause(e).getMessage().contains(errMsg),equalTo(true));
    }
    assertFailures(client.prepareSearch("cb-test").setSource("{\"sort\": \"test\",\"query\":{\"match_all\":{}}}"),RestStatus.INTERNAL_SERVER_ERROR,containsString("Data too large, data for [test] would be larger than limit of [10/10b]"));
    resetSettings=settingsBuilder().put(HierarchyCircuitBreakerService.TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING,"15b").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING,"90%").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING,1.0).build();
    client.admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings).execute().actionGet();
    try {
      client.prepareSearch("cb-test").setQuery(matchAllQuery()).addSort("test",SortOrder.DESC).get();
    }
 catch (    Exception e) {
      String errMsg="[PARENT] Data too large, data for [test] would be larger than limit of [15/15b]";
      assertThat("Exception: " + ExceptionsHelper.unwrapCause(e) + " should contain a CircuitBreakingException",ExceptionsHelper.unwrapCause(e).getMessage().contains(errMsg),equalTo(true));
    }
  }
  finally {
    Settings resetSettings=settingsBuilder().put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING,"-1").put(HierarchyCircuitBreakerService.REQUEST_CIRCUIT_BREAKER_LIMIT_SETTING,HierarchyCircuitBreakerService.DEFAULT_REQUEST_BREAKER_LIMIT).put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING,HierarchyCircuitBreakerService.DEFAULT_FIELDDATA_OVERHEAD_CONSTANT).build();
    client.admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings).execute().actionGet();
  }
}
