{
  if (noopBreakerUsed()) {
    logger.info("--> noop breakers used, skipping test");
    return;
  }
  assertAcked(prepareCreate("cb-test",1,settingsBuilder().put(SETTING_NUMBER_OF_REPLICAS,between(0,1))));
  Client client=client();
  int docCount=scaledRandomIntBetween(300,1000);
  List<IndexRequestBuilder> reqs=newArrayList();
  for (long id=0; id < docCount; id++) {
    reqs.add(client.prepareIndex("cb-test","type",Long.toString(id)).setSource("test","value" + id));
  }
  indexRandom(true,reqs);
  long beforeReqLimit=client.admin().cluster().prepareNodesStats().setBreaker(true).get().getNodes()[0].getBreaker().getStats(CircuitBreaker.Name.REQUEST).getLimit();
  Settings resetSettings=settingsBuilder().put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING,"10b").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING,1.0).build();
  client.admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings).execute().actionGet();
  try {
    client.prepareSearch("cb-test").setQuery(matchAllQuery()).addSort("test",SortOrder.DESC).get();
    fail("should have thrown an exception");
  }
 catch (  Exception e) {
    String errMsg="[FIELDDATA] Data too large, data for [test] would be larger than limit of [10/10b]";
    assertThat("Exception: " + ExceptionsHelper.unwrapCause(e) + " should contain a CircuitBreakingException",ExceptionsHelper.unwrapCause(e).getMessage().contains(errMsg),equalTo(true));
  }
  assertFailures(client.prepareSearch("cb-test").setQuery(matchAllQuery()).addSort("test",SortOrder.DESC),RestStatus.INTERNAL_SERVER_ERROR,containsString("Data too large, data for [test] would be larger than limit of [10/10b]"));
  resetSettings=settingsBuilder().put(HierarchyCircuitBreakerService.TOTAL_CIRCUIT_BREAKER_LIMIT_SETTING,"15b").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING,"90%").put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING,1.0).build();
  client.admin().cluster().prepareUpdateSettings().setTransientSettings(resetSettings).execute().actionGet();
  try {
    client.prepareSearch("cb-test").setQuery(matchAllQuery()).addSort("test",SortOrder.DESC).get();
    fail("should have thrown an exception");
  }
 catch (  Exception e) {
    String errMsg="[PARENT] Data too large, data for [test] would be larger than limit of [15/15b]";
    assertThat("Exception: " + ExceptionsHelper.unwrapCause(e) + " should contain a CircuitBreakingException",ExceptionsHelper.unwrapCause(e).getMessage().contains(errMsg),equalTo(true));
  }
}
