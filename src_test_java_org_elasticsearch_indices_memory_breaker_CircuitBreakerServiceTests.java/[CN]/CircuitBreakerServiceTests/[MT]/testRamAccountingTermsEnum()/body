{
  if (noopBreakerUsed()) {
    logger.info("--> noop breakers used, skipping test");
    return;
  }
  final Client client=client();
  assertAcked(prepareCreate("ramtest").setSource("{\"mappings\": {\"type\": {\"properties\": {\"test\": " + "{\"type\": \"string\",\"fielddata\": {\"filter\": {\"regex\": {\"pattern\": \"^value.*\"}}}}}}}}"));
  ensureGreen(TimeValue.timeValueSeconds(10),"ramtest");
  int docCount=scaledRandomIntBetween(300,1000);
  List<IndexRequestBuilder> reqs=newArrayList();
  for (long id=0; id < docCount; id++) {
    reqs.add(client.prepareIndex("ramtest","type",Long.toString(id)).setSource("test","value" + id));
  }
  indexRandom(true,reqs);
  client.prepareSearch("ramtest").setQuery(matchAllQuery()).addSort("test",SortOrder.DESC).get();
  clearFieldData();
  Settings settings=settingsBuilder().put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_LIMIT_SETTING,randomRidiculouslySmallLimit()).put(HierarchyCircuitBreakerService.FIELDDATA_CIRCUIT_BREAKER_OVERHEAD_SETTING,1.05).build();
  assertAcked(client.admin().cluster().prepareUpdateSettings().setTransientSettings(settings));
  assertFailures(client.prepareSearch("ramtest").setQuery(matchAllQuery()).addSort("test",SortOrder.DESC),RestStatus.INTERNAL_SERVER_ERROR,containsString("Data too large, data for [test] would be larger than limit of [100/100b]"));
  NodesStatsResponse stats=client.admin().cluster().prepareNodesStats().setBreaker(true).get();
  int breaks=0;
  for (  NodeStats stat : stats.getNodes()) {
    CircuitBreakerStats breakerStats=stat.getBreaker().getStats(CircuitBreaker.FIELDDATA);
    breaks+=breakerStats.getTrippedCount();
  }
  assertThat(breaks,greaterThanOrEqualTo(1));
}
