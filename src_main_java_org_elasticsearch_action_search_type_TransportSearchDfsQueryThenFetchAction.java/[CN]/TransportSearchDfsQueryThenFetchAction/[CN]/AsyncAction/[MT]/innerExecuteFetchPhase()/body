{
  sortedShardList=searchPhaseController.sortDocs(queryResults);
  searchPhaseController.fillDocIdsToLoad(docIdsToLoad,sortedShardList);
  if (docIdsToLoad.asList().isEmpty()) {
    finishHim();
    return;
  }
  final AtomicInteger counter=new AtomicInteger(docIdsToLoad.asList().size());
  int localOperations=0;
  for (  final AtomicArray.Entry<ExtTIntArrayList> entry : docIdsToLoad.asList()) {
    QuerySearchResult queryResult=queryResults.get(entry.index);
    DiscoveryNode node=nodes.get(queryResult.shardTarget().nodeId());
    if (node.id().equals(nodes.localNodeId())) {
      localOperations++;
    }
 else {
      FetchSearchRequest fetchSearchRequest=new FetchSearchRequest(request,queryResult.id(),entry.value);
      executeFetch(entry.index,queryResult.shardTarget(),counter,fetchSearchRequest,node);
    }
  }
  if (localOperations > 0) {
    if (request.operationThreading() == SearchOperationThreading.SINGLE_THREAD) {
      threadPool.executor(ThreadPool.Names.SEARCH).execute(new Runnable(){
        @Override public void run(){
          for (          final AtomicArray.Entry<ExtTIntArrayList> entry : docIdsToLoad.asList()) {
            QuerySearchResult queryResult=queryResults.get(entry.index);
            DiscoveryNode node=nodes.get(queryResult.shardTarget().nodeId());
            if (node.id().equals(nodes.localNodeId())) {
              FetchSearchRequest fetchSearchRequest=new FetchSearchRequest(request,queryResult.id(),entry.value);
              executeFetch(entry.index,queryResult.shardTarget(),counter,fetchSearchRequest,node);
            }
          }
        }
      }
);
    }
 else {
      boolean localAsync=request.operationThreading() == SearchOperationThreading.THREAD_PER_SHARD;
      for (      final AtomicArray.Entry<ExtTIntArrayList> entry : docIdsToLoad.asList()) {
        final QuerySearchResult queryResult=queryResults.get(entry.index);
        final DiscoveryNode node=nodes.get(queryResult.shardTarget().nodeId());
        if (node.id().equals(nodes.localNodeId())) {
          final FetchSearchRequest fetchSearchRequest=new FetchSearchRequest(request,queryResult.id(),entry.value);
          if (localAsync) {
            threadPool.executor(ThreadPool.Names.SEARCH).execute(new Runnable(){
              @Override public void run(){
                executeFetch(entry.index,queryResult.shardTarget(),counter,fetchSearchRequest,node);
              }
            }
);
          }
 else {
            executeFetch(entry.index,queryResult.shardTarget(),counter,fetchSearchRequest,node);
          }
        }
      }
    }
  }
}
