{
  String[] values={"brown","dog","fox","jumps","lazy","over","quick","the"};
  int[] freq={1,1,1,1,1,1,1,2};
  int[][] pos={{2},{8},{3},{4},{7},{5},{1},{0,6}};
  int[][] startOffset={{10},{40},{16},{20},{35},{26},{4},{0,31}};
  int[][] endOffset={{15},{43},{19},{25},{39},{30},{9},{3,34}};
  Terms terms=fields.terms(fieldName);
  assertThat(terms.size(),equalTo(8l));
  TermsEnum iterator=terms.iterator();
  for (int j=0; j < values.length; j++) {
    String string=values[j];
    BytesRef next=iterator.next();
    assertThat(next,notNullValue());
    assertThat("expected " + string,string,equalTo(next.utf8ToString()));
    assertThat(next,notNullValue());
    PostingsEnum docsAndPositions=iterator.postings(null,null,PostingsEnum.ALL);
    assertThat(docsAndPositions.nextDoc(),equalTo(0));
    assertThat(freq[j],equalTo(docsAndPositions.freq()));
    int[] termPos=pos[j];
    int[] termStartOffset=startOffset[j];
    int[] termEndOffset=endOffset[j];
    assertThat(termPos.length,equalTo(freq[j]));
    assertThat(termStartOffset.length,equalTo(freq[j]));
    assertThat(termEndOffset.length,equalTo(freq[j]));
    for (int k=0; k < freq[j]; k++) {
      int nextPosition=docsAndPositions.nextPosition();
      assertThat("term: " + string,nextPosition,equalTo(termPos[k]));
      assertThat("term: " + string,docsAndPositions.startOffset(),equalTo(termStartOffset[k]));
      assertThat("term: " + string,docsAndPositions.endOffset(),equalTo(termEndOffset[k]));
      if (withPayloads) {
        assertThat("term: " + string,docsAndPositions.getPayload(),equalTo(new BytesRef("word")));
      }
    }
  }
  assertThat(iterator.next(),nullValue());
}
