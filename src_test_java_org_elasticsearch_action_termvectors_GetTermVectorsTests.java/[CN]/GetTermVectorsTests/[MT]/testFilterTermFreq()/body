{
  logger.info("Setting up the index ...");
  Settings.Builder settings=settingsBuilder().put(indexSettings()).put("index.analysis.analyzer","keyword");
  assertAcked(prepareCreate("test").setSettings(settings).addMapping("type1","tags","type=string"));
  ensureYellow();
  logger.info("Indexing one document with tags of increasing frequencies ...");
  int numTerms=scaledRandomIntBetween(10,50);
  List<String> tags=new ArrayList<>();
  List<String> uniqueTags=new ArrayList<>();
  String tag;
  for (int i=0; i < numTerms; i++) {
    tag="tag_" + i;
    tags.add(tag);
    for (int j=0; j < i; j++) {
      tags.add(tag);
    }
    uniqueTags.add(tag);
  }
  indexRandom(true,client().prepareIndex("test","type1","1").setSource("tags",tags));
  logger.info("Checking best tags by highest to lowest term freq ...");
  TermVectorsRequest.FilterSettings filterSettings=new TermVectorsRequest.FilterSettings();
  TermVectorsResponse response;
  for (int i=0; i < numTerms; i++) {
    filterSettings.maxNumTerms=i + 1;
    response=client().prepareTermVectors("test","type1","1").setSelectedFields("tags").setFieldStatistics(true).setTermStatistics(true).setFilterSettings(filterSettings).get();
    checkBestTerms(response.getFields().terms("tags"),uniqueTags.subList((numTerms - i - 1),numTerms));
  }
}
