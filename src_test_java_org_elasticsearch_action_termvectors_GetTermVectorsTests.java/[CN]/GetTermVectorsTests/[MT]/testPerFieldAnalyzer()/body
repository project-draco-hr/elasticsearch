{
  int numFields=25;
  Set<String> withTermVectors=new HashSet<>();
  XContentBuilder mapping=jsonBuilder().startObject().startObject("type1").startObject("properties");
  XContentBuilder source=jsonBuilder().startObject();
  for (int i=0; i < numFields; i++) {
    String fieldName="field" + i;
    if (randomBoolean()) {
      withTermVectors.add(fieldName);
    }
    mapping.startObject(fieldName).field("type","string").field("term_vector",withTermVectors.contains(fieldName) ? "yes" : "no").endObject();
    source.field(fieldName,"some text here");
  }
  source.endObject();
  mapping.endObject().endObject().endObject();
  ImmutableSettings.Builder settings=settingsBuilder().put(indexSettings()).put("index.analysis.analyzer","standard");
  assertAcked(prepareCreate("test").addAlias(new Alias("alias")).setSettings(settings).addMapping("type1",mapping));
  ensureGreen();
  client().prepareIndex("test","type1","0").setSource(source).get();
  refresh();
  Map<String,String> perFieldAnalyzer=new HashMap<>();
  Set<String> selectedFields=new HashSet<>();
  for (int i=0; i < numFields; i++) {
    if (randomBoolean()) {
      perFieldAnalyzer.put("field" + i,"keyword");
    }
    if (randomBoolean()) {
      perFieldAnalyzer.put("non_existing" + i,"keyword");
    }
    if (randomBoolean()) {
      selectedFields.add("field" + i);
    }
    if (randomBoolean()) {
      selectedFields.add("non_existing" + i);
    }
  }
  TermVectorsResponse response=client().prepareTermVectors(indexOrAlias(),"type1","0").setPerFieldAnalyzer(perFieldAnalyzer).get();
  checkAnalyzedFields(response.getFields(),withTermVectors,perFieldAnalyzer);
  response=client().prepareTermVectors(indexOrAlias(),"type1","0").setSelectedFields(selectedFields.toArray(Strings.EMPTY_ARRAY)).setPerFieldAnalyzer(perFieldAnalyzer).get();
  checkAnalyzedFields(response.getFields(),selectedFields,perFieldAnalyzer);
}
