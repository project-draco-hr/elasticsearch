{
  Map<String,Object> stats=JsonXContent.jsonXContent.createParser(xContentBuilder.bytes()).map();
  assertThat("number of fields expected:",fields.size(),equalTo(stats.size()));
  for (  String fieldName : fields) {
    logger.info("Checking field statistics for field: {}",fieldName);
    Terms terms=fields.terms(fieldName);
    Map<String,Integer> fieldStatistics=getFieldStatistics(stats,fieldName);
    String msg="field: " + fieldName + " ";
    assertThat(msg + "sum_doc_freq:",(int)terms.getSumDocFreq(),equalOrLessThanTo(fieldStatistics.get("sum_doc_freq"),isEqual));
    assertThat(msg + "doc_count:",terms.getDocCount(),equalOrLessThanTo(fieldStatistics.get("doc_count"),isEqual));
    assertThat(msg + "sum_ttf:",(int)terms.getSumTotalTermFreq(),equalOrLessThanTo(fieldStatistics.get("sum_ttf"),isEqual));
    final TermsEnum termsEnum=terms.iterator();
    BytesRef text;
    while ((text=termsEnum.next()) != null) {
      String term=text.utf8ToString();
      logger.info("Checking term statistics for term: ({}, {})",fieldName,term);
      Map<String,Integer> termStatistics=getTermStatistics(stats,fieldName,term);
      msg="term: (" + fieldName + ","+ term+ ") ";
      assertThat(msg + "doc_freq:",termsEnum.docFreq(),equalOrLessThanTo(termStatistics.get("doc_freq"),isEqual));
      assertThat(msg + "ttf:",(int)termsEnum.totalTermFreq(),equalOrLessThanTo(termStatistics.get("ttf"),isEqual));
    }
  }
}
