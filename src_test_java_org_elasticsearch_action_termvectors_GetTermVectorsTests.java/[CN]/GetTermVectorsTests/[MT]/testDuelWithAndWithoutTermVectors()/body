{
  String[] indexNames=new String[]{"with_tv","without_tv"};
  ImmutableSettings.Builder settings=settingsBuilder().put(indexSettings()).put("index.analysis.analyzer","standard");
  assertAcked(prepareCreate(indexNames[0]).setSettings(settings).addMapping("type1","field1","type=string,term_vector=with_positions_offsets"));
  assertAcked(prepareCreate(indexNames[1]).setSettings(settings).addMapping("type1","field1","type=string,term_vector=no"));
  ensureGreen();
  String[] content=new String[]{"Generating a random permutation of a sequence (such as when shuffling cards).","Selecting a random sample of a population (important in statistical sampling).","Allocating experimental units via random assignment to a treatment or control condition.","Generating random numbers: see Random number generation.","Selecting a random sample of a population (important in statistical sampling).","Allocating experimental units via random assignment to a treatment or control condition.","Transforming a data stream (such as when using a scrambler in telecommunications)."};
  List<IndexRequestBuilder> indexBuilders=new ArrayList<>();
  for (int i=0; i < content.length; i++) {
    for (    String indexName : indexNames) {
      indexBuilders.add(client().prepareIndex().setIndex(indexName).setType("type1").setId(String.valueOf(i)).setSource("field1",content[i]));
    }
  }
  indexRandom(true,indexBuilders);
  for (int i=0; i < content.length; i++) {
    Fields[] fields=new Fields[2];
    int idx=0;
    for (    String indexName : indexNames) {
      TermVectorsResponse resp=client().prepareTermVectors(indexName,"type1",String.valueOf(i)).setOffsets(true).setPositions(true).setSelectedFields("field1").get();
      assertThat("doc with index: test_with_tv, type1 and id: " + i,resp.isExists(),equalTo(true));
      fields[idx++]=resp.getFields();
    }
    compareTermVectors("field1",fields[0],fields[1]);
  }
}
