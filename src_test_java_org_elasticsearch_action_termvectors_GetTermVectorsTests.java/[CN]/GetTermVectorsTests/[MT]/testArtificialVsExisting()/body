{
  ImmutableSettings.Builder settings=settingsBuilder().put(indexSettings()).put("index.analysis.analyzer","standard");
  assertAcked(prepareCreate("test").setSettings(settings).addMapping("type1","field1","type=string,term_vector=with_positions_offsets"));
  ensureGreen();
  String[] content=new String[]{"Generating a random permutation of a sequence (such as when shuffling cards).","Selecting a random sample of a population (important in statistical sampling).","Allocating experimental units via random assignment to a treatment or control condition.","Generating random numbers: see Random number generation."};
  List<IndexRequestBuilder> indexBuilders=new ArrayList<>();
  for (int i=0; i < content.length; i++) {
    indexBuilders.add(client().prepareIndex().setIndex("test").setType("type1").setId(String.valueOf(i)).setSource("field1",content[i]));
  }
  indexRandom(true,indexBuilders);
  for (int i=0; i < content.length; i++) {
    TermVectorsResponse respExisting=client().prepareTermVectors("test","type1",String.valueOf(i)).setOffsets(true).setPositions(true).setFieldStatistics(true).setTermStatistics(true).get();
    assertThat("doc with index: test, type1 and id: existing",respExisting.isExists(),equalTo(true));
    TermVectorsResponse respArtificial=client().prepareTermVectors().setIndex("test").setType("type1").setRouting(String.valueOf(i)).setDoc(jsonBuilder().startObject().field("field1",content[i]).endObject()).setOffsets(true).setPositions(true).setFieldStatistics(true).setTermStatistics(true).get();
    assertThat("doc with index: test, type1 and id: " + String.valueOf(i),respArtificial.isExists(),equalTo(true));
    compareTermVectors("field1",respExisting.getFields(),respArtificial.getFields());
  }
}
