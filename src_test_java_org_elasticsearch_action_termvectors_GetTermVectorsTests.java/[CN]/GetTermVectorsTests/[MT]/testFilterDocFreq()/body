{
  logger.info("Setting up the index ...");
  ImmutableSettings.Builder settings=settingsBuilder().put(indexSettings()).put("index.analysis.analyzer","keyword").put("index.number_of_shards",1);
  assertAcked(prepareCreate("test").setSettings(settings).addMapping("type1","tags","type=string"));
  ensureYellow();
  int numDocs=scaledRandomIntBetween(10,50);
  logger.info("Indexing {} documents with tags of increasing dfs ...",numDocs);
  List<IndexRequestBuilder> builders=new ArrayList<>();
  List<String> tags=new ArrayList<>();
  for (int i=0; i < numDocs; i++) {
    tags.add("tag_" + i);
    builders.add(client().prepareIndex("test","type1",i + "").setSource("tags",tags));
  }
  indexRandom(true,builders);
  logger.info("Checking best terms by highest to lowest idf ...");
  TermVectorsRequest.FilterSettings filterSettings=new TermVectorsRequest.FilterSettings();
  TermVectorsResponse response;
  for (int i=0; i < numDocs; i++) {
    filterSettings.maxNumTerms=i + 1;
    response=client().prepareTermVectors("test","type1",(numDocs - 1) + "").setSelectedFields("tags").setFieldStatistics(true).setTermStatistics(true).setFilterSettings(filterSettings).get();
    checkBestTerms(response.getFields().terms("tags"),tags.subList((numDocs - i - 1),numDocs));
  }
}
