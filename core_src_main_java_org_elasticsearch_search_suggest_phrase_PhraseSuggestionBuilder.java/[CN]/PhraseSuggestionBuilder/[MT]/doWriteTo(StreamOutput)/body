{
  out.writeFloat(maxErrors);
  out.writeFloat(realWordErrorLikelihood);
  out.writeFloat(confidence);
  out.writeOptionalVInt(gramSize);
  boolean hasModel=model != null;
  out.writeBoolean(hasModel);
  if (hasModel) {
    out.writePhraseSuggestionSmoothingModel(model);
  }
  out.writeBoolean(forceUnigrams);
  out.writeVInt(tokenLimit);
  out.writeOptionalString(preTag);
  out.writeOptionalString(postTag);
  out.writeString(separator);
  if (collateQuery != null) {
    out.writeBoolean(true);
    collateQuery.writeTo(out);
  }
 else {
    out.writeBoolean(false);
  }
  out.writeMap(collateParams);
  out.writeOptionalBoolean(collatePrune);
  out.writeVInt(this.generators.size());
  for (  Entry<String,List<CandidateGenerator>> entry : this.generators.entrySet()) {
    out.writeString(entry.getKey());
    List<CandidateGenerator> generatorsList=entry.getValue();
    out.writeVInt(generatorsList.size());
    for (    CandidateGenerator generator : generatorsList) {
      generator.writeTo(out);
    }
  }
}
