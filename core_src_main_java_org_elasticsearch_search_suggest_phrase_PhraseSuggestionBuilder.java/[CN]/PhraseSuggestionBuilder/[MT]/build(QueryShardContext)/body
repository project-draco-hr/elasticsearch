{
  PhraseSuggestionContext suggestionContext=new PhraseSuggestionContext(context);
  MapperService mapperService=context.getMapperService();
  populateCommonFields(mapperService,suggestionContext);
  suggestionContext.setSeparator(BytesRefs.toBytesRef(this.separator));
  suggestionContext.setRealWordErrorLikelihood(this.realWordErrorLikelihood);
  suggestionContext.setConfidence(this.confidence);
  suggestionContext.setMaxErrors(this.maxErrors);
  suggestionContext.setSeparator(BytesRefs.toBytesRef(this.separator));
  suggestionContext.setRequireUnigram(this.forceUnigrams);
  suggestionContext.setTokenLimit(this.tokenLimit);
  suggestionContext.setPreTag(BytesRefs.toBytesRef(this.preTag));
  suggestionContext.setPostTag(BytesRefs.toBytesRef(this.postTag));
  if (this.gramSize != null) {
    suggestionContext.setGramSize(this.gramSize);
  }
  for (  List<CandidateGenerator> candidateGenerators : this.generators.values()) {
    for (    CandidateGenerator candidateGenerator : candidateGenerators) {
      suggestionContext.addGenerator(candidateGenerator.build(mapperService));
    }
  }
  if (this.model != null) {
    suggestionContext.setModel(this.model.buildWordScorerFactory());
  }
  if (this.collateQuery != null) {
    CompiledScript compiledScript=context.getScriptService().compile(this.collateQuery,ScriptContext.Standard.SEARCH,Collections.emptyMap());
    suggestionContext.setCollateQueryScript(compiledScript);
    if (this.collateParams != null) {
      suggestionContext.setCollateScriptParams(this.collateParams);
    }
    suggestionContext.setCollatePrune(this.collatePrune);
  }
  if (suggestionContext.getField() == null) {
    throw new IllegalArgumentException("The required field option is missing");
  }
  MappedFieldType fieldType=mapperService.fullName(suggestionContext.getField());
  if (fieldType == null) {
    throw new IllegalArgumentException("No mapping found for field [" + suggestionContext.getField() + "]");
  }
 else   if (suggestionContext.getAnalyzer() == null) {
    if (fieldType.searchAnalyzer() == null) {
      suggestionContext.setAnalyzer(mapperService.searchAnalyzer());
    }
 else {
      suggestionContext.setAnalyzer(fieldType.searchAnalyzer());
    }
  }
  if (suggestionContext.model() == null) {
    suggestionContext.setModel(StupidBackoffScorer.FACTORY);
  }
  if (this.gramSize == null || suggestionContext.generators().isEmpty()) {
    final ShingleTokenFilterFactory.Factory shingleFilterFactory=SuggestUtils.getShingleFilterFactory(suggestionContext.getAnalyzer());
    if (this.gramSize == null) {
      if (shingleFilterFactory != null) {
        suggestionContext.setGramSize(shingleFilterFactory.getMaxShingleSize());
        if (suggestionContext.getAnalyzer() == null && shingleFilterFactory.getMinShingleSize() > 1 && !shingleFilterFactory.getOutputUnigrams()) {
          throw new IllegalArgumentException("The default analyzer for field: [" + suggestionContext.getField() + "] doesn't emit unigrams. If this is intentional try to set the analyzer explicitly");
        }
      }
    }
    if (suggestionContext.generators().isEmpty()) {
      if (shingleFilterFactory != null && shingleFilterFactory.getMinShingleSize() > 1 && !shingleFilterFactory.getOutputUnigrams() && suggestionContext.getRequireUnigram()) {
        throw new IllegalArgumentException("The default candidate generator for phrase suggest can't operate on field: [" + suggestionContext.getField() + "] since it doesn't emit unigrams. "+ "If this is intentional try to set the candidate generator field explicitly");
      }
      DirectCandidateGenerator generator=new DirectCandidateGenerator();
      generator.setField(suggestionContext.getField());
      suggestionContext.addGenerator(generator);
    }
  }
  return suggestionContext;
}
