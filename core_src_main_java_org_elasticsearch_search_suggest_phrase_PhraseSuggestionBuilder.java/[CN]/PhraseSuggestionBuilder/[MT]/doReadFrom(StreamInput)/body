{
  PhraseSuggestionBuilder builder=new PhraseSuggestionBuilder();
  builder.maxErrors=in.readFloat();
  builder.realWordErrorLikelihood=in.readFloat();
  builder.confidence=in.readFloat();
  builder.gramSize=in.readOptionalVInt();
  if (in.readBoolean()) {
    builder.model=in.readPhraseSuggestionSmoothingModel();
  }
  builder.forceUnigrams=in.readBoolean();
  builder.tokenLimit=in.readVInt();
  builder.preTag=in.readOptionalString();
  builder.postTag=in.readOptionalString();
  builder.separator=in.readString();
  if (in.readBoolean()) {
    builder.collateQuery=Template.readTemplate(in);
  }
  builder.collateParams=in.readMap();
  builder.collatePrune=in.readOptionalBoolean();
  int generatorsEntries=in.readVInt();
  for (int i=0; i < generatorsEntries; i++) {
    String type=in.readString();
    int numberOfGenerators=in.readVInt();
    List<CandidateGenerator> generatorsList=new ArrayList<>(numberOfGenerators);
    for (int g=0; g < numberOfGenerators; g++) {
      DirectCandidateGeneratorBuilder generator=DirectCandidateGeneratorBuilder.PROTOTYPE.readFrom(in);
      generatorsList.add(generator);
    }
    builder.generators.put(type,generatorsList);
  }
  return builder;
}
