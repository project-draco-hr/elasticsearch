{
  PhraseSuggestionContext suggestion=new PhraseSuggestionContext(suggester);
  XContentParser.Token token;
  String fieldName=null;
  boolean gramSizeSet=false;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      fieldName=parser.currentName();
    }
 else     if (token.isValue()) {
      if (!SuggestUtils.parseSuggestContext(parser,context,fieldName,suggestion)) {
        if ("real_word_error_likelihood".equals(fieldName)) {
          suggestion.setRealWordErrorLikelihood(parser.floatValue());
          if (suggestion.realworldErrorLikelyhood() <= 0.0) {
            throw new ElasticSearchIllegalArgumentException("real_word_error_likelihood must be > 0.0");
          }
        }
 else         if ("confidence".equals(fieldName)) {
          suggestion.setConfidence(parser.floatValue());
          if (suggestion.confidence() < 0.0) {
            throw new ElasticSearchIllegalArgumentException("confidence must be >= 0.0");
          }
        }
 else         if ("separator".equals(fieldName)) {
          suggestion.setSeparator(new BytesRef(parser.text()));
        }
 else         if ("max_errors".equals(fieldName)) {
          suggestion.setMaxErrors(parser.floatValue());
          if (suggestion.maxErrors() <= 0.0) {
            throw new ElasticSearchIllegalArgumentException("max_error must be > 0.0");
          }
        }
 else         if ("gram_size".equals(fieldName)) {
          suggestion.setGramSize(parser.intValue());
          if (suggestion.gramSize() < 1) {
            throw new ElasticSearchIllegalArgumentException("gram_size must be >= 1");
          }
          gramSizeSet=true;
        }
 else         if ("force_unigrams".equals(fieldName)) {
          suggestion.setRequireUnigram(parser.booleanValue());
        }
 else {
          throw new ElasticSearchIllegalArgumentException("suggester[phrase] doesn't support field [" + fieldName + "]");
        }
      }
    }
 else     if (token == Token.START_ARRAY) {
      if ("direct_generator".equals(fieldName)) {
        while ((token=parser.nextToken()) == Token.START_OBJECT) {
          PhraseSuggestionContext.DirectCandidateGenerator generator=new PhraseSuggestionContext.DirectCandidateGenerator();
          while ((token=parser.nextToken()) != Token.END_OBJECT) {
            if (token == XContentParser.Token.FIELD_NAME) {
              fieldName=parser.currentName();
            }
            if (token.isValue()) {
              parseCandidateGenerator(parser,context,fieldName,generator);
            }
          }
          verifyGenerator(context,generator);
          suggestion.addGenerator(generator);
        }
      }
 else {
        throw new ElasticSearchIllegalArgumentException("suggester[phrase]  doesn't support array field [" + fieldName + "]");
      }
    }
 else     if (token == Token.START_OBJECT && "smoothing".equals(fieldName)) {
      parseSmoothingModel(parser,suggestion,fieldName);
    }
 else {
      throw new ElasticSearchIllegalArgumentException("suggester[phrase] doesn't support field [" + fieldName + "]");
    }
  }
  if (suggestion.getField() == null) {
    throw new ElasticSearchIllegalArgumentException("The required field option is missing");
  }
  if (suggestion.model() == null) {
    suggestion.setModel(LaplaceScorer.FACTORY);
  }
  if (!gramSizeSet || suggestion.generators().isEmpty()) {
    final ShingleTokenFilterFactory.Factory shingleFilterFactory=SuggestUtils.getShingleFilterFactory(suggestion.getAnalyzer() == null ? context.mapperService().fieldSearchAnalyzer(suggestion.getField()) : suggestion.getAnalyzer());
    ;
    if (!gramSizeSet) {
      if (shingleFilterFactory != null) {
        suggestion.setGramSize(shingleFilterFactory.getMaxShingleSize());
        if (suggestion.getAnalyzer() == null && shingleFilterFactory.getMinShingleSize() > 1 && !shingleFilterFactory.getOutputUnigrams()) {
          throw new ElasticSearchIllegalArgumentException("The default analyzer for field: [" + suggestion.getField() + "] doesn't emit unigrams. If this is intentional try to set the analyzer explicitly");
        }
      }
    }
    if (suggestion.generators().isEmpty()) {
      if (shingleFilterFactory != null && shingleFilterFactory.getMinShingleSize() > 1 && !shingleFilterFactory.getOutputUnigrams() && suggestion.getRequireUnigram()) {
        throw new ElasticSearchIllegalArgumentException("The default candidate generator for phrase suggest can't operate on field: [" + suggestion.getField() + "] since it doesn't emit unigrams. If this is intentional try to set the candidate generator field explicitly");
      }
      DirectCandidateGenerator generator=new DirectCandidateGenerator();
      generator.setField(suggestion.getField());
      suggestion.addGenerator(generator);
    }
  }
  return suggestion;
}
