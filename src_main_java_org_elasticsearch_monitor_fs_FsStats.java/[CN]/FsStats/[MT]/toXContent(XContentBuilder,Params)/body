{
  builder.startObject(Fields.FS);
  builder.field(Fields.TIMESTAMP,timestamp);
  builder.startArray(Fields.DATA);
  for (  Info info : infos) {
    builder.startObject();
    builder.field(Fields.PATH,info.path);
    if (info.mount != null) {
      builder.field(Fields.MOUNT,info.mount);
    }
    if (info.dev != null) {
      builder.field(Fields.DEV,info.dev);
    }
    if (info.total != -1) {
      builder.byteSizeField(Fields.TOTAL_IN_BYTES,Fields.TOTAL,info.total);
    }
    if (info.free != -1) {
      builder.byteSizeField(Fields.FREE_IN_BYTES,Fields.FREE,info.free);
    }
    if (info.available != -1) {
      builder.byteSizeField(Fields.AVAILABLE_IN_BYTES,Fields.AVAILABLE,info.available);
    }
    if (info.diskReads != -1) {
      builder.field(Fields.DISK_READS,info.diskReads);
    }
    if (info.diskWrites != -1) {
      builder.field(Fields.DISK_WRITES,info.diskWrites);
    }
    if (info.diskReadBytes != -1) {
      builder.byteSizeField(Fields.DISK_READ_SIZE_IN_BYTES,Fields.DISK_READ_SIZE,info.getDiskReadSizeInBytes());
    }
    if (info.diskWriteBytes != -1) {
      builder.byteSizeField(Fields.DISK_WRITE_SIZE_IN_BYTES,Fields.DISK_WRITE_SIZE,info.getDiskWriteSizeInBytes());
    }
    if (info.diskQueue != -1) {
      builder.field(Fields.DISK_QUEUE,Strings.format1Decimals(info.diskQueue,""));
    }
    if (info.diskServiceTime != -1) {
      builder.field(Fields.DISK_SERVICE_TIME,Strings.format1Decimals(info.diskServiceTime,""));
    }
    builder.endObject();
  }
  builder.endArray();
  builder.endObject();
  return builder;
}
