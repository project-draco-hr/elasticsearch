{
  builder.startObject();
  if (path != null) {
    builder.field(Fields.PATH,path,XContentBuilder.FieldCaseConversion.NONE);
  }
  if (mount != null) {
    builder.field(Fields.MOUNT,mount,XContentBuilder.FieldCaseConversion.NONE);
  }
  if (dev != null) {
    builder.field(Fields.DEV,dev,XContentBuilder.FieldCaseConversion.NONE);
  }
  if (type != null) {
    builder.field(Fields.TYPE,type,XContentBuilder.FieldCaseConversion.NONE);
  }
  if (total != -1) {
    builder.byteSizeField(Fields.TOTAL_IN_BYTES,Fields.TOTAL,total);
  }
  if (free != -1) {
    builder.byteSizeField(Fields.FREE_IN_BYTES,Fields.FREE,free);
  }
  if (available != -1) {
    builder.byteSizeField(Fields.AVAILABLE_IN_BYTES,Fields.AVAILABLE,available);
  }
  long iop=-1;
  if (diskReads != -1) {
    iop=diskReads;
    builder.field(Fields.DISK_READS,diskReads);
  }
  if (diskWrites != -1) {
    if (iop != -1) {
      iop+=diskWrites;
    }
 else {
      iop=diskWrites;
    }
    builder.field(Fields.DISK_WRITES,diskWrites);
  }
  if (iop != -1) {
    builder.field(Fields.DISK_IO_OP,iop);
  }
  long ioBytes=-1;
  if (diskReadBytes != -1) {
    ioBytes=diskReadBytes;
    builder.byteSizeField(Fields.DISK_READ_SIZE_IN_BYTES,Fields.DISK_READ_SIZE,diskReadBytes);
  }
  if (diskWriteBytes != -1) {
    if (ioBytes != -1) {
      ioBytes+=diskWriteBytes;
    }
 else {
      ioBytes=diskWriteBytes;
    }
    builder.byteSizeField(Fields.DISK_WRITE_SIZE_IN_BYTES,Fields.DISK_WRITE_SIZE,diskWriteBytes);
  }
  if (ioBytes != -1) {
    builder.byteSizeField(Fields.DISK_IO_IN_BYTES,Fields.DISK_IO_SIZE,ioBytes);
  }
  if (diskQueue != -1) {
    builder.field(Fields.DISK_QUEUE,Strings.format1Decimals(diskQueue,""));
  }
  if (diskServiceTime != -1) {
    builder.field(Fields.DISK_SERVICE_TIME,Strings.format1Decimals(diskServiceTime,""));
  }
  if (spins != null) {
    builder.field(Fields.SPINS,spins.toString());
  }
  builder.endObject();
  return builder;
}
