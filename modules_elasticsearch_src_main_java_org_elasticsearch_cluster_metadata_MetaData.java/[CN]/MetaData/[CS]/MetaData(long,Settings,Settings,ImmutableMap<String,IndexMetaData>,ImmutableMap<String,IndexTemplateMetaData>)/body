{
  this.version=version;
  this.transientSettings=transientSettings;
  this.persistentSettings=persistentSettings;
  this.settings=ImmutableSettings.settingsBuilder().put(persistentSettings).put(transientSettings).build();
  this.indices=ImmutableMap.copyOf(indices);
  this.templates=templates;
  int totalNumberOfShards=0;
  for (  IndexMetaData indexMetaData : indices.values()) {
    totalNumberOfShards+=indexMetaData.totalNumberOfShards();
  }
  this.totalNumberOfShards=totalNumberOfShards;
  List<String> allIndicesLst=Lists.newArrayList();
  for (  IndexMetaData indexMetaData : indices.values()) {
    allIndicesLst.add(indexMetaData.index());
  }
  allIndices=allIndicesLst.toArray(new String[allIndicesLst.size()]);
  List<String> allOpenIndices=Lists.newArrayList();
  for (  IndexMetaData indexMetaData : indices.values()) {
    if (indexMetaData.state() == IndexMetaData.State.OPEN) {
      allOpenIndices.add(indexMetaData.index());
    }
  }
  this.allOpenIndices=allOpenIndices.toArray(new String[allOpenIndices.size()]);
  MapBuilder<String,MapBuilder<String,AliasMetaData>> tmpAliasesMap=newMapBuilder();
  for (  IndexMetaData indexMetaData : indices.values()) {
    String index=indexMetaData.index();
    for (    AliasMetaData aliasMd : indexMetaData.aliases().values()) {
      MapBuilder<String,AliasMetaData> indexAliasMap=tmpAliasesMap.get(aliasMd.alias());
      if (indexAliasMap == null) {
        indexAliasMap=newMapBuilder();
        tmpAliasesMap.put(aliasMd.alias(),indexAliasMap);
      }
      indexAliasMap.put(index,aliasMd);
    }
  }
  MapBuilder<String,ImmutableMap<String,AliasMetaData>> aliases=newMapBuilder();
  for (  Map.Entry<String,MapBuilder<String,AliasMetaData>> alias : tmpAliasesMap.map().entrySet()) {
    aliases.put(alias.getKey(),alias.getValue().immutableMap());
  }
  this.aliases=aliases.immutableMap();
  MapBuilder<String,MapBuilder<String,ImmutableSet<String>>> tmpAliasToIndexToSearchRoutingMap=newMapBuilder();
  for (  IndexMetaData indexMetaData : indices.values()) {
    for (    AliasMetaData aliasMd : indexMetaData.aliases().values()) {
      MapBuilder<String,ImmutableSet<String>> indexToSearchRoutingMap=tmpAliasToIndexToSearchRoutingMap.get(aliasMd.alias());
      if (indexToSearchRoutingMap == null) {
        indexToSearchRoutingMap=newMapBuilder();
        tmpAliasToIndexToSearchRoutingMap.put(aliasMd.alias(),indexToSearchRoutingMap);
      }
      if (aliasMd.searchRouting() != null) {
        indexToSearchRoutingMap.put(indexMetaData.index(),ImmutableSet.copyOf(Strings.splitStringByCommaToSet(aliasMd.searchRouting())));
      }
 else {
        indexToSearchRoutingMap.put(indexMetaData.index(),ImmutableSet.<String>of());
      }
    }
  }
  MapBuilder<String,ImmutableMap<String,ImmutableSet<String>>> aliasToIndexToSearchRoutingMap=newMapBuilder();
  for (  Map.Entry<String,MapBuilder<String,ImmutableSet<String>>> alias : tmpAliasToIndexToSearchRoutingMap.map().entrySet()) {
    aliasToIndexToSearchRoutingMap.put(alias.getKey(),alias.getValue().immutableMap());
  }
  this.aliasToIndexToSearchRoutingMap=aliasToIndexToSearchRoutingMap.immutableMap();
  MapBuilder<String,ImmutableMap<String,Boolean>> filteringRequiredMap=newMapBuilder();
  for (  IndexMetaData indexMetaData : indices.values()) {
    MapBuilder<String,Boolean> indexFilteringRequiredMap=newMapBuilder();
    indexFilteringRequiredMap.put(indexMetaData.index(),false);
    for (    AliasMetaData aliasMetaData : indexMetaData.aliases().values()) {
      if (aliasMetaData.filter() != null) {
        indexFilteringRequiredMap.put(aliasMetaData.alias(),true);
      }
 else {
        indexFilteringRequiredMap.put(aliasMetaData.alias(),false);
      }
    }
    filteringRequiredMap.put(indexMetaData.index(),indexFilteringRequiredMap.immutableMap());
  }
  indexToAliasFilteringRequiredMap=filteringRequiredMap.immutableMap();
  MapBuilder<String,Set<String>> tmpAliasAndIndexToIndexBuilder=newMapBuilder();
  for (  IndexMetaData indexMetaData : indices.values()) {
    Set<String> lst=tmpAliasAndIndexToIndexBuilder.get(indexMetaData.index());
    if (lst == null) {
      lst=newHashSet();
      tmpAliasAndIndexToIndexBuilder.put(indexMetaData.index(),lst);
    }
    lst.add(indexMetaData.index());
    for (    String alias : indexMetaData.aliases().keySet()) {
      lst=tmpAliasAndIndexToIndexBuilder.get(alias);
      if (lst == null) {
        lst=newHashSet();
        tmpAliasAndIndexToIndexBuilder.put(alias,lst);
      }
      lst.add(indexMetaData.index());
    }
  }
  MapBuilder<String,String[]> aliasAndIndexToIndexBuilder=newMapBuilder();
  for (  Map.Entry<String,Set<String>> entry : tmpAliasAndIndexToIndexBuilder.map().entrySet()) {
    aliasAndIndexToIndexBuilder.put(entry.getKey(),entry.getValue().toArray(new String[entry.getValue().size()]));
  }
  this.aliasAndIndexToIndexMap=aliasAndIndexToIndexBuilder.immutableMap();
}
