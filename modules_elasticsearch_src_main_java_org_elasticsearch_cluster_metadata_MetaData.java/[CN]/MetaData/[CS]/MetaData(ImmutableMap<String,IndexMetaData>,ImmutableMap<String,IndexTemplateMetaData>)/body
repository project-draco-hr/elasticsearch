{
  this.indices=ImmutableMap.copyOf(indices);
  this.templates=templates;
  int totalNumberOfShards=0;
  for (  IndexMetaData indexMetaData : indices.values()) {
    totalNumberOfShards+=indexMetaData.totalNumberOfShards();
  }
  this.totalNumberOfShards=totalNumberOfShards;
  List<String> allIndicesLst=Lists.newArrayList();
  for (  IndexMetaData indexMetaData : indices.values()) {
    allIndicesLst.add(indexMetaData.index());
  }
  allIndices=allIndicesLst.toArray(new String[allIndicesLst.size()]);
  Set<String> aliases=newHashSet();
  for (  IndexMetaData indexMetaData : indices.values()) {
    aliases.addAll(indexMetaData.aliases().keySet());
  }
  this.aliases=ImmutableSet.copyOf(aliases);
  MapBuilder<String,Set<String>> tmpAliasAndIndexToIndexBuilder=newMapBuilder();
  for (  IndexMetaData indexMetaData : indices.values()) {
    Set<String> lst=tmpAliasAndIndexToIndexBuilder.get(indexMetaData.index());
    if (lst == null) {
      lst=newHashSet();
      tmpAliasAndIndexToIndexBuilder.put(indexMetaData.index(),lst);
    }
    lst.add(indexMetaData.index());
    for (    String alias : indexMetaData.aliases().keySet()) {
      lst=tmpAliasAndIndexToIndexBuilder.get(alias);
      if (lst == null) {
        lst=newHashSet();
        tmpAliasAndIndexToIndexBuilder.put(alias,lst);
      }
      lst.add(indexMetaData.index());
    }
  }
  MapBuilder<String,String[]> aliasAndIndexToIndexBuilder=newMapBuilder();
  for (  Map.Entry<String,Set<String>> entry : tmpAliasAndIndexToIndexBuilder.map().entrySet()) {
    aliasAndIndexToIndexBuilder.put(entry.getKey(),entry.getValue().toArray(new String[entry.getValue().size()]));
  }
  this.aliasAndIndexToIndexMap=aliasAndIndexToIndexBuilder.immutableMap();
}
