{
  super(store.shardId(),store.indexSettings());
  Preconditions.checkNotNull(store,"Store must be provided to merge policy");
  this.minMergeDocs=componentSettings.getAsInt("minMergeDocs",LogDocMergePolicy.DEFAULT_MIN_MERGE_DOCS);
  this.maxMergeDocs=componentSettings.getAsInt("maxMergeDocs",LogDocMergePolicy.DEFAULT_MAX_MERGE_DOCS);
  this.mergeFactor=componentSettings.getAsInt("mergeFactor",LogDocMergePolicy.DEFAULT_MERGE_FACTOR);
  this.calibrateSizeByDeletes=componentSettings.getAsBoolean("calibrateSizeByDeletes",false);
  this.useCompoundFile=componentSettings.getAsBoolean("useCompoundFile",store == null || store.suggestUseCompoundFile());
  logger.debug("Using [LogDoc] merge policy with mergeFactor[{}] minMergeDocs[{}], maxMergeDocs[{}], useCompoundFile[{}], calibrateSizeByDeletes[{}]",new Object[]{mergeFactor,minMergeDocs,maxMergeDocs,useCompoundFile,calibrateSizeByDeletes});
}
