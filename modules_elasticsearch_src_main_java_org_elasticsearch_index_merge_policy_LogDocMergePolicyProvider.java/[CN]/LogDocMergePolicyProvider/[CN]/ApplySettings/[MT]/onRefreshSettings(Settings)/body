{
  int minMergeDocs=settings.getAsInt("index.merge.policy.min_merge_docs",LogDocMergePolicyProvider.this.minMergeDocs);
  if (minMergeDocs != LogDocMergePolicyProvider.this.minMergeDocs) {
    logger.info("updating min_merge_docs from [{}] to [{}]",LogDocMergePolicyProvider.this.minMergeDocs,minMergeDocs);
    LogDocMergePolicyProvider.this.minMergeDocs=minMergeDocs;
    for (    CustomLogDocMergePolicy policy : policies) {
      policy.setMinMergeDocs(minMergeDocs);
    }
  }
  int maxMergeDocs=settings.getAsInt("index.merge.policy.max_merge_docs",LogDocMergePolicyProvider.this.maxMergeDocs);
  if (maxMergeDocs != LogDocMergePolicyProvider.this.maxMergeDocs) {
    logger.info("updating max_merge_docs from [{}] to [{}]",LogDocMergePolicyProvider.this.maxMergeDocs,maxMergeDocs);
    LogDocMergePolicyProvider.this.maxMergeDocs=maxMergeDocs;
    for (    CustomLogDocMergePolicy policy : policies) {
      policy.setMaxMergeDocs(maxMergeDocs);
    }
  }
  int mergeFactor=settings.getAsInt("index.merge.policy.merge_factor",LogDocMergePolicyProvider.this.mergeFactor);
  if (mergeFactor != LogDocMergePolicyProvider.this.mergeFactor) {
    logger.info("updating merge_factor from [{}] to [{}]",LogDocMergePolicyProvider.this.mergeFactor,mergeFactor);
    LogDocMergePolicyProvider.this.mergeFactor=mergeFactor;
    for (    CustomLogDocMergePolicy policy : policies) {
      policy.setMergeFactor(mergeFactor);
    }
  }
  boolean compoundFormat=settings.getAsBoolean("index.compound_format",LogDocMergePolicyProvider.this.compoundFormat);
  if (compoundFormat != LogDocMergePolicyProvider.this.compoundFormat) {
    logger.info("updating index.compound_format from [{}] to [{}]",LogDocMergePolicyProvider.this.compoundFormat,compoundFormat);
    LogDocMergePolicyProvider.this.compoundFormat=compoundFormat;
    for (    CustomLogDocMergePolicy policy : policies) {
      policy.setUseCompoundFile(compoundFormat);
    }
  }
}
