{
  final String indexName="test";
  final Settings nodeSettings=Settings.builder().put(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_NETWORK_SETTING.getKey(),"100ms").put(RecoverySettings.INDICES_RECOVERY_INTERNAL_ACTION_TIMEOUT_SETTING.getKey(),"1s").put(MockFSDirectoryService.RANDOM_PREVENT_DOUBLE_WRITE_SETTING.getKey(),false).build();
  internalCluster().startNode(nodeSettings);
  InternalTestCluster.Async<String> blueFuture=internalCluster().startNodeAsync(Settings.builder().put("node.color","blue").put(nodeSettings).build());
  InternalTestCluster.Async<String> redFuture=internalCluster().startNodeAsync(Settings.builder().put("node.color","red").put(nodeSettings).build());
  final String blueNodeName=blueFuture.get();
  final String redNodeName=redFuture.get();
  ClusterHealthResponse response=client().admin().cluster().prepareHealth().setWaitForNodes(">=3").get();
  assertThat(response.isTimedOut(),is(false));
  client().admin().indices().prepareCreate(indexName).setSettings(Settings.builder().put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color","blue").put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,0)).get();
  List<IndexRequestBuilder> requests=new ArrayList<>();
  int numDocs=scaledRandomIntBetween(25,250);
  for (int i=0; i < numDocs; i++) {
    requests.add(client().prepareIndex(indexName,"type").setCreate(true).setSource("{}"));
  }
  indexRandom(true,requests);
  ensureSearchable(indexName);
  ClusterStateResponse stateResponse=client().admin().cluster().prepareState().get();
  final String blueNodeId=internalCluster().getInstance(ClusterService.class,blueNodeName).localNode().id();
  assertFalse(stateResponse.getState().getRoutingNodes().node(blueNodeId).isEmpty());
  SearchResponse searchResponse=client().prepareSearch(indexName).get();
  assertHitCount(searchResponse,numDocs);
  String[] recoveryActions=new String[]{RecoverySource.Actions.START_RECOVERY,RecoveryTargetService.Actions.FILES_INFO,RecoveryTargetService.Actions.FILE_CHUNK,RecoveryTargetService.Actions.CLEAN_FILES,RecoveryTargetService.Actions.PREPARE_TRANSLOG,RecoveryTargetService.Actions.FINALIZE};
  final String recoveryActionToBlock=randomFrom(recoveryActions);
  final boolean dropRequests=randomBoolean();
  logger.info("--> will {} between blue & red on [{}]",dropRequests ? "drop requests" : "break connection",recoveryActionToBlock);
  MockTransportService blueMockTransportService=(MockTransportService)internalCluster().getInstance(TransportService.class,blueNodeName);
  MockTransportService redMockTransportService=(MockTransportService)internalCluster().getInstance(TransportService.class,redNodeName);
  TransportService redTransportService=internalCluster().getInstance(TransportService.class,redNodeName);
  TransportService blueTransportService=internalCluster().getInstance(TransportService.class,blueNodeName);
  final CountDownLatch requestBlocked=new CountDownLatch(1);
  blueMockTransportService.addDelegate(redTransportService,new RecoveryActionBlocker(dropRequests,recoveryActionToBlock,blueMockTransportService.original(),requestBlocked));
  redMockTransportService.addDelegate(blueTransportService,new RecoveryActionBlocker(dropRequests,recoveryActionToBlock,redMockTransportService.original(),requestBlocked));
  logger.info("--> starting recovery from blue to red");
  client().admin().indices().prepareUpdateSettings(indexName).setSettings(Settings.builder().put(IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING.getKey() + "color","red,blue").put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,1)).get();
  requestBlocked.await();
  logger.info("--> stopping to block recovery");
  blueMockTransportService.clearAllRules();
  redMockTransportService.clearAllRules();
  ensureGreen();
  searchResponse=client(redNodeName).prepareSearch(indexName).setPreference("_local").get();
  assertHitCount(searchResponse,numDocs);
}
