{
  SearchResponse response=client().prepareSearch("idx").addAggregation(range("range").field(SINGLE_VALUED_FIELD_NAME).addUnboundedTo(3).addRange(3,6).addUnboundedFrom(6).subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME))).execute().actionGet();
  assertSearchResponse(response);
  Range range=response.getAggregations().get("range");
  assertThat(range,notNullValue());
  assertThat(range.getName(),equalTo("range"));
  List<? extends Bucket> buckets=range.getBuckets();
  assertThat(range.getBuckets().size(),equalTo(3));
  Object[] propertiesKeys=(Object[])range.getProperty("_key");
  Object[] propertiesDocCounts=(Object[])range.getProperty("_count");
  Object[] propertiesCounts=(Object[])range.getProperty("sum.value");
  Range.Bucket bucket=buckets.get(0);
  assertThat(bucket,notNullValue());
  assertThat((String)bucket.getKey(),equalTo("*-3.0"));
  assertThat(((Number)bucket.getFrom()).doubleValue(),equalTo(Double.NEGATIVE_INFINITY));
  assertThat(((Number)bucket.getTo()).doubleValue(),equalTo(3.0));
  assertThat(bucket.getFromAsString(),nullValue());
  assertThat(bucket.getToAsString(),equalTo("3.0"));
  assertThat(bucket.getDocCount(),equalTo(2L));
  Sum sum=bucket.getAggregations().get("sum");
  assertThat(sum,notNullValue());
  assertThat(sum.getValue(),equalTo(3.0));
  assertThat((String)propertiesKeys[0],equalTo("*-3.0"));
  assertThat((long)propertiesDocCounts[0],equalTo(2L));
  assertThat((double)propertiesCounts[0],equalTo(3.0));
  bucket=buckets.get(1);
  assertThat(bucket,notNullValue());
  assertThat((String)bucket.getKey(),equalTo("3.0-6.0"));
  assertThat(((Number)bucket.getFrom()).doubleValue(),equalTo(3.0));
  assertThat(((Number)bucket.getTo()).doubleValue(),equalTo(6.0));
  assertThat(bucket.getFromAsString(),equalTo("3.0"));
  assertThat(bucket.getToAsString(),equalTo("6.0"));
  assertThat(bucket.getDocCount(),equalTo(3L));
  sum=bucket.getAggregations().get("sum");
  assertThat(sum,notNullValue());
  assertThat(sum.getValue(),equalTo(12.0));
  assertThat((String)propertiesKeys[1],equalTo("3.0-6.0"));
  assertThat((long)propertiesDocCounts[1],equalTo(3L));
  assertThat((double)propertiesCounts[1],equalTo(12.0));
  bucket=buckets.get(2);
  assertThat(bucket,notNullValue());
  assertThat((String)bucket.getKey(),equalTo("6.0-*"));
  assertThat(((Number)bucket.getFrom()).doubleValue(),equalTo(6.0));
  assertThat(((Number)bucket.getTo()).doubleValue(),equalTo(Double.POSITIVE_INFINITY));
  assertThat(bucket.getFromAsString(),equalTo("6.0"));
  assertThat(bucket.getToAsString(),nullValue());
  assertThat(bucket.getDocCount(),equalTo(numDocs - 5L));
  sum=bucket.getAggregations().get("sum");
  assertThat(sum,notNullValue());
  long total=0;
  for (int i=5; i < numDocs; ++i) {
    total+=i + 1;
  }
  assertThat(sum.getValue(),equalTo((double)total));
  assertThat((String)propertiesKeys[2],equalTo("6.0-*"));
  assertThat((long)propertiesDocCounts[2],equalTo(numDocs - 5L));
  assertThat((double)propertiesCounts[2],equalTo((double)total));
}
