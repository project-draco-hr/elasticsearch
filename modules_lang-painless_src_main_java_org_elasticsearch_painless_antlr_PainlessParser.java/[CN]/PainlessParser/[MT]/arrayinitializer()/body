{
  ArrayinitializerContext _localctx=new ArrayinitializerContext(_ctx,getState());
  enterRule(_localctx,46,RULE_arrayinitializer);
  int _la;
  try {
    int _alt;
    setState(409);
switch (getInterpreter().adaptivePredict(_input,34,_ctx)) {
case 1:
      _localctx=new NewstandardarrayContext(_localctx);
    enterOuterAlt(_localctx,1);
{
    setState(365);
    match(NEW);
    setState(366);
    match(TYPE);
    setState(371);
    _errHandler.sync(this);
    _alt=1;
    do {
switch (_alt) {
case 1:
{
{
            setState(367);
            match(LBRACE);
            setState(368);
            expression(0);
            setState(369);
            match(RBRACE);
          }
        }
      break;
default :
    throw new NoViableAltException(this);
}
setState(373);
_errHandler.sync(this);
_alt=getInterpreter().adaptivePredict(_input,27,_ctx);
}
 while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
setState(382);
switch (getInterpreter().adaptivePredict(_input,29,_ctx)) {
case 1:
{
  setState(375);
  postdot();
  setState(379);
  _errHandler.sync(this);
  _alt=getInterpreter().adaptivePredict(_input,28,_ctx);
  while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
    if (_alt == 1) {
{
{
          setState(376);
          postfix();
        }
      }
    }
    setState(381);
    _errHandler.sync(this);
    _alt=getInterpreter().adaptivePredict(_input,28,_ctx);
  }
}
break;
}
}
break;
case 2:
_localctx=new NewinitializedarrayContext(_localctx);
enterOuterAlt(_localctx,2);
{
setState(384);
match(NEW);
setState(385);
match(TYPE);
setState(386);
match(LBRACE);
setState(387);
match(RBRACE);
setState(388);
match(LBRACK);
setState(397);
_la=_input.LA(1);
if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW)| (1L << BOOLNOT)| (1L << BWNOT)| (1L << ADD)| (1L << SUB)| (1L << INCR)| (1L << DECR))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OCTAL - 70)) | (1L << (HEX - 70)) | (1L << (INTEGER - 70))| (1L << (DECIMAL - 70))| (1L << (STRING - 70))| (1L << (REGEX - 70))| (1L << (TRUE - 70))| (1L << (FALSE - 70))| (1L << (NULL - 70))| (1L << (TYPE - 70))| (1L << (ID - 70)))) != 0)) {
{
setState(389);
expression(0);
setState(394);
_errHandler.sync(this);
_la=_input.LA(1);
while (_la == COMMA) {
{
{
setState(390);
match(COMMA);
setState(391);
expression(0);
}
}
setState(396);
_errHandler.sync(this);
_la=_input.LA(1);
}
}
}
setState(400);
_la=_input.LA(1);
if (_la == SEMICOLON) {
{
setState(399);
match(SEMICOLON);
}
}
setState(402);
match(RBRACK);
setState(406);
_errHandler.sync(this);
_alt=getInterpreter().adaptivePredict(_input,33,_ctx);
while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
if (_alt == 1) {
{
{
setState(403);
postfix();
}
}
}
setState(408);
_errHandler.sync(this);
_alt=getInterpreter().adaptivePredict(_input,33,_ctx);
}
}
break;
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}
