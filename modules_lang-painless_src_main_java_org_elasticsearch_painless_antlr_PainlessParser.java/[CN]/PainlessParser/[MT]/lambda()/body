{
  LambdaContext _localctx=new LambdaContext(_ctx,getState());
  enterRule(_localctx,58,RULE_lambda);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(477);
switch (_input.LA(1)) {
case TYPE:
case ID:
{
          setState(464);
          lamtype();
        }
      break;
case LP:
{
      setState(465);
      match(LP);
      setState(474);
      _la=_input.LA(1);
      if (_la == TYPE || _la == ID) {
{
          setState(466);
          lamtype();
          setState(471);
          _errHandler.sync(this);
          _la=_input.LA(1);
          while (_la == COMMA) {
{
{
                setState(467);
                match(COMMA);
                setState(468);
                lamtype();
              }
            }
            setState(473);
            _errHandler.sync(this);
            _la=_input.LA(1);
          }
        }
      }
      setState(476);
      match(RP);
    }
  break;
default :
throw new NoViableAltException(this);
}
setState(479);
match(ARROW);
setState(482);
switch (_input.LA(1)) {
case LBRACK:
{
setState(480);
block();
}
break;
case LBRACE:
case LP:
case NEW:
case BOOLNOT:
case BWNOT:
case ADD:
case SUB:
case INCR:
case DECR:
case OCTAL:
case HEX:
case INTEGER:
case DECIMAL:
case STRING:
case REGEX:
case TRUE:
case FALSE:
case NULL:
case TYPE:
case ID:
{
setState(481);
expression(0);
}
break;
default :
throw new NoViableAltException(this);
}
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}
