{
  LambdaContext _localctx=new LambdaContext(_ctx,getState());
  enterRule(_localctx,46,RULE_lambda);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(452);
switch (_input.LA(1)) {
case TYPE:
case ID:
{
          setState(439);
          lamtype();
        }
      break;
case LP:
{
      setState(440);
      match(LP);
      setState(449);
      _la=_input.LA(1);
      if (_la == TYPE || _la == ID) {
{
          setState(441);
          lamtype();
          setState(446);
          _errHandler.sync(this);
          _la=_input.LA(1);
          while (_la == COMMA) {
{
{
                setState(442);
                match(COMMA);
                setState(443);
                lamtype();
              }
            }
            setState(448);
            _errHandler.sync(this);
            _la=_input.LA(1);
          }
        }
      }
      setState(451);
      match(RP);
    }
  break;
default :
throw new NoViableAltException(this);
}
setState(454);
match(ARROW);
setState(457);
switch (getInterpreter().adaptivePredict(_input,34,_ctx)) {
case 1:
{
setState(455);
block();
}
break;
case 2:
{
setState(456);
expression(0);
}
break;
}
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}
