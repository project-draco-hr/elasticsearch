{
  ParserRuleContext _parentctx=_ctx;
  int _parentState=getState();
  ExpressionContext _localctx=new ExpressionContext(_ctx,_parentState);
  ExpressionContext _prevctx=_localctx;
  int _startState=28;
  enterRecursionRule(_localctx,28,RULE_expression,_p);
  int _la;
  try {
    int _alt;
    enterOuterAlt(_localctx,1);
{
{
        _localctx=new SingleContext(_localctx);
        _ctx=_localctx;
        _prevctx=_localctx;
        setState(240);
        unary();
      }
      _ctx.stop=_input.LT(-1);
      setState(289);
      _errHandler.sync(this);
      _alt=getInterpreter().adaptivePredict(_input,19,_ctx);
      while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt == 1) {
          if (_parseListeners != null)           triggerExitRuleEvent();
          _prevctx=_localctx;
{
            setState(287);
switch (getInterpreter().adaptivePredict(_input,18,_ctx)) {
case 1:
{
                _localctx=new BinaryContext(new ExpressionContext(_parentctx,_parentState));
                pushNewRecursionContext(_localctx,_startState,RULE_expression);
                setState(242);
                if (!(precpred(_ctx,14)))                 throw new FailedPredicateException(this,"precpred(_ctx, 14)");
                setState(243);
                _la=_input.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << REM))) != 0))) {
                  _errHandler.recoverInline(this);
                }
 else {
                  consume();
                }
                setState(244);
                expression(15);
              }
            break;
case 2:
{
            _localctx=new BinaryContext(new ExpressionContext(_parentctx,_parentState));
            pushNewRecursionContext(_localctx,_startState,RULE_expression);
            setState(245);
            if (!(precpred(_ctx,13)))             throw new FailedPredicateException(this,"precpred(_ctx, 13)");
            setState(246);
            _la=_input.LA(1);
            if (!(_la == ADD || _la == SUB)) {
              _errHandler.recoverInline(this);
            }
 else {
              consume();
            }
            setState(247);
            expression(14);
          }
        break;
case 3:
{
        _localctx=new BinaryContext(new ExpressionContext(_parentctx,_parentState));
        pushNewRecursionContext(_localctx,_startState,RULE_expression);
        setState(248);
        if (!(precpred(_ctx,12)))         throw new FailedPredicateException(this,"precpred(_ctx, 12)");
        setState(249);
        _la=_input.LA(1);
        if (!(_la == FIND || _la == MATCH)) {
          _errHandler.recoverInline(this);
        }
 else {
          consume();
        }
        setState(250);
        expression(13);
      }
    break;
case 4:
{
    _localctx=new BinaryContext(new ExpressionContext(_parentctx,_parentState));
    pushNewRecursionContext(_localctx,_startState,RULE_expression);
    setState(251);
    if (!(precpred(_ctx,11)))     throw new FailedPredicateException(this,"precpred(_ctx, 11)");
    setState(252);
    _la=_input.LA(1);
    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LSH) | (1L << RSH) | (1L << USH))) != 0))) {
      _errHandler.recoverInline(this);
    }
 else {
      consume();
    }
    setState(253);
    expression(12);
  }
break;
case 5:
{
_localctx=new CompContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(254);
if (!(precpred(_ctx,10))) throw new FailedPredicateException(this,"precpred(_ctx, 10)");
setState(255);
_la=_input.LA(1);
if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LTE) | (1L << GT)| (1L << GTE))) != 0))) {
  _errHandler.recoverInline(this);
}
 else {
  consume();
}
setState(256);
expression(11);
}
break;
case 6:
{
_localctx=new CompContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(257);
if (!(precpred(_ctx,8))) throw new FailedPredicateException(this,"precpred(_ctx, 8)");
setState(258);
_la=_input.LA(1);
if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << EQR) | (1L << NE)| (1L << NER))) != 0))) {
_errHandler.recoverInline(this);
}
 else {
consume();
}
setState(259);
expression(9);
}
break;
case 7:
{
_localctx=new BinaryContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(260);
if (!(precpred(_ctx,7))) throw new FailedPredicateException(this,"precpred(_ctx, 7)");
setState(261);
match(BWAND);
setState(262);
expression(8);
}
break;
case 8:
{
_localctx=new BinaryContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(263);
if (!(precpred(_ctx,6))) throw new FailedPredicateException(this,"precpred(_ctx, 6)");
setState(264);
match(XOR);
setState(265);
expression(7);
}
break;
case 9:
{
_localctx=new BinaryContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(266);
if (!(precpred(_ctx,5))) throw new FailedPredicateException(this,"precpred(_ctx, 5)");
setState(267);
match(BWOR);
setState(268);
expression(6);
}
break;
case 10:
{
_localctx=new BoolContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(269);
if (!(precpred(_ctx,4))) throw new FailedPredicateException(this,"precpred(_ctx, 4)");
setState(270);
match(BOOLAND);
setState(271);
expression(5);
}
break;
case 11:
{
_localctx=new BoolContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(272);
if (!(precpred(_ctx,3))) throw new FailedPredicateException(this,"precpred(_ctx, 3)");
setState(273);
match(BOOLOR);
setState(274);
expression(4);
}
break;
case 12:
{
_localctx=new ConditionalContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(275);
if (!(precpred(_ctx,2))) throw new FailedPredicateException(this,"precpred(_ctx, 2)");
setState(276);
match(COND);
setState(277);
expression(0);
setState(278);
match(COLON);
setState(279);
expression(2);
}
break;
case 13:
{
_localctx=new AssignmentContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(281);
if (!(precpred(_ctx,1))) throw new FailedPredicateException(this,"precpred(_ctx, 1)");
setState(282);
_la=_input.LA(1);
if (!(((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (ASSIGN - 58)) | (1L << (AADD - 58)) | (1L << (ASUB - 58))| (1L << (AMUL - 58))| (1L << (ADIV - 58))| (1L << (AREM - 58))| (1L << (AAND - 58))| (1L << (AXOR - 58))| (1L << (AOR - 58))| (1L << (ALSH - 58))| (1L << (ARSH - 58))| (1L << (AUSH - 58)))) != 0))) {
_errHandler.recoverInline(this);
}
 else {
consume();
}
setState(283);
expression(1);
}
break;
case 14:
{
_localctx=new InstanceofContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(284);
if (!(precpred(_ctx,9))) throw new FailedPredicateException(this,"precpred(_ctx, 9)");
setState(285);
match(INSTANCEOF);
setState(286);
decltype();
}
break;
}
}
}
setState(291);
_errHandler.sync(this);
_alt=getInterpreter().adaptivePredict(_input,19,_ctx);
}
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
unrollRecursionContexts(_parentctx);
}
return _localctx;
}
