{
  ParserRuleContext _parentctx=_ctx;
  int _parentState=getState();
  ExpressionContext _localctx=new ExpressionContext(_ctx,_parentState);
  ExpressionContext _prevctx=_localctx;
  int _startState=24;
  enterRecursionRule(_localctx,24,RULE_expression,_p);
  int _la;
  try {
    int _alt;
    enterOuterAlt(_localctx,1);
{
      setState(180);
switch (getInterpreter().adaptivePredict(_input,15,_ctx)) {
case 1:
{
          _localctx=new AssignmentContext(_localctx);
          _ctx=_localctx;
          _prevctx=_localctx;
          setState(172);
          chain(true);
          setState(173);
          _la=_input.LA(1);
          if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << AADD) | (1L << ASUB)| (1L << AMUL)| (1L << ADIV)| (1L << AREM)| (1L << AAND)| (1L << AXOR)| (1L << AOR)| (1L << ALSH)| (1L << ARSH)| (1L << AUSH))) != 0))) {
            _errHandler.recoverInline(this);
          }
 else {
            consume();
          }
          setState(174);
          expression(1);
          ((AssignmentContext)_localctx).s=false;
        }
      break;
case 2:
{
      _localctx=new SingleContext(_localctx);
      _ctx=_localctx;
      _prevctx=_localctx;
      setState(177);
      ((SingleContext)_localctx).u=unary(false);
      ((SingleContext)_localctx).s=((SingleContext)_localctx).u.s;
    }
  break;
}
_ctx.stop=_input.LT(-1);
setState(241);
_errHandler.sync(this);
_alt=getInterpreter().adaptivePredict(_input,17,_ctx);
while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
if (_alt == 1) {
  if (_parseListeners != null)   triggerExitRuleEvent();
  _prevctx=_localctx;
{
    setState(239);
switch (getInterpreter().adaptivePredict(_input,16,_ctx)) {
case 1:
{
        _localctx=new BinaryContext(new ExpressionContext(_parentctx,_parentState));
        pushNewRecursionContext(_localctx,_startState,RULE_expression);
        setState(182);
        if (!(precpred(_ctx,12)))         throw new FailedPredicateException(this,"precpred(_ctx, 12)");
        setState(183);
        _la=_input.LA(1);
        if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << REM))) != 0))) {
          _errHandler.recoverInline(this);
        }
 else {
          consume();
        }
        setState(184);
        expression(13);
        ((BinaryContext)_localctx).s=false;
      }
    break;
case 2:
{
    _localctx=new BinaryContext(new ExpressionContext(_parentctx,_parentState));
    pushNewRecursionContext(_localctx,_startState,RULE_expression);
    setState(187);
    if (!(precpred(_ctx,11)))     throw new FailedPredicateException(this,"precpred(_ctx, 11)");
    setState(188);
    _la=_input.LA(1);
    if (!(_la == ADD || _la == SUB)) {
      _errHandler.recoverInline(this);
    }
 else {
      consume();
    }
    setState(189);
    expression(12);
    ((BinaryContext)_localctx).s=false;
  }
break;
case 3:
{
_localctx=new BinaryContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(192);
if (!(precpred(_ctx,10))) throw new FailedPredicateException(this,"precpred(_ctx, 10)");
setState(193);
_la=_input.LA(1);
if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LSH) | (1L << RSH) | (1L << USH))) != 0))) {
  _errHandler.recoverInline(this);
}
 else {
  consume();
}
setState(194);
expression(11);
((BinaryContext)_localctx).s=false;
}
break;
case 4:
{
_localctx=new CompContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(197);
if (!(precpred(_ctx,9))) throw new FailedPredicateException(this,"precpred(_ctx, 9)");
setState(198);
_la=_input.LA(1);
if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LTE) | (1L << GT)| (1L << GTE))) != 0))) {
_errHandler.recoverInline(this);
}
 else {
consume();
}
setState(199);
expression(10);
((CompContext)_localctx).s=false;
}
break;
case 5:
{
_localctx=new CompContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(202);
if (!(precpred(_ctx,8))) throw new FailedPredicateException(this,"precpred(_ctx, 8)");
setState(203);
_la=_input.LA(1);
if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << EQR) | (1L << NE)| (1L << NER))) != 0))) {
_errHandler.recoverInline(this);
}
 else {
consume();
}
setState(204);
expression(9);
((CompContext)_localctx).s=false;
}
break;
case 6:
{
_localctx=new BinaryContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(207);
if (!(precpred(_ctx,7))) throw new FailedPredicateException(this,"precpred(_ctx, 7)");
setState(208);
match(BWAND);
setState(209);
expression(8);
((BinaryContext)_localctx).s=false;
}
break;
case 7:
{
_localctx=new BinaryContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(212);
if (!(precpred(_ctx,6))) throw new FailedPredicateException(this,"precpred(_ctx, 6)");
setState(213);
match(XOR);
setState(214);
expression(7);
((BinaryContext)_localctx).s=false;
}
break;
case 8:
{
_localctx=new BinaryContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(217);
if (!(precpred(_ctx,5))) throw new FailedPredicateException(this,"precpred(_ctx, 5)");
setState(218);
match(BWOR);
setState(219);
expression(6);
((BinaryContext)_localctx).s=false;
}
break;
case 9:
{
_localctx=new BoolContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(222);
if (!(precpred(_ctx,4))) throw new FailedPredicateException(this,"precpred(_ctx, 4)");
setState(223);
match(BOOLAND);
setState(224);
expression(5);
((BoolContext)_localctx).s=false;
}
break;
case 10:
{
_localctx=new BoolContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(227);
if (!(precpred(_ctx,3))) throw new FailedPredicateException(this,"precpred(_ctx, 3)");
setState(228);
match(BOOLOR);
setState(229);
expression(4);
((BoolContext)_localctx).s=false;
}
break;
case 11:
{
_localctx=new ConditionalContext(new ExpressionContext(_parentctx,_parentState));
pushNewRecursionContext(_localctx,_startState,RULE_expression);
setState(232);
if (!(precpred(_ctx,2))) throw new FailedPredicateException(this,"precpred(_ctx, 2)");
setState(233);
match(COND);
setState(234);
((ConditionalContext)_localctx).e0=expression(0);
setState(235);
match(COLON);
setState(236);
((ConditionalContext)_localctx).e1=expression(2);
((ConditionalContext)_localctx).s=((ConditionalContext)_localctx).e0.s && ((ConditionalContext)_localctx).e1.s;
}
break;
}
}
}
setState(243);
_errHandler.sync(this);
_alt=getInterpreter().adaptivePredict(_input,17,_ctx);
}
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
unrollRecursionContexts(_parentctx);
}
return _localctx;
}
