{
  PrimaryContext _localctx=new PrimaryContext(_ctx,getState());
  enterRule(_localctx,34,RULE_primary);
  int _la;
  try {
    setState(343);
switch (getInterpreter().adaptivePredict(_input,24,_ctx)) {
case 1:
      _localctx=new PrecedenceContext(_localctx);
    enterOuterAlt(_localctx,1);
{
    setState(325);
    match(LP);
    setState(326);
    expression(0);
    setState(327);
    match(RP);
  }
break;
case 2:
_localctx=new NumericContext(_localctx);
enterOuterAlt(_localctx,2);
{
setState(329);
_la=_input.LA(1);
if (!(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OCTAL - 70)) | (1L << (HEX - 70)) | (1L << (INTEGER - 70))| (1L << (DECIMAL - 70)))) != 0))) {
_errHandler.recoverInline(this);
}
 else {
consume();
}
}
break;
case 3:
_localctx=new TrueContext(_localctx);
enterOuterAlt(_localctx,3);
{
setState(330);
match(TRUE);
}
break;
case 4:
_localctx=new FalseContext(_localctx);
enterOuterAlt(_localctx,4);
{
setState(331);
match(FALSE);
}
break;
case 5:
_localctx=new NullContext(_localctx);
enterOuterAlt(_localctx,5);
{
setState(332);
match(NULL);
}
break;
case 6:
_localctx=new StringContext(_localctx);
enterOuterAlt(_localctx,6);
{
setState(333);
match(STRING);
}
break;
case 7:
_localctx=new RegexContext(_localctx);
enterOuterAlt(_localctx,7);
{
setState(334);
match(REGEX);
}
break;
case 8:
_localctx=new ListinitContext(_localctx);
enterOuterAlt(_localctx,8);
{
setState(335);
listinitializer();
}
break;
case 9:
_localctx=new MapinitContext(_localctx);
enterOuterAlt(_localctx,9);
{
setState(336);
mapinitializer();
}
break;
case 10:
_localctx=new VariableContext(_localctx);
enterOuterAlt(_localctx,10);
{
setState(337);
match(ID);
}
break;
case 11:
_localctx=new CalllocalContext(_localctx);
enterOuterAlt(_localctx,11);
{
setState(338);
match(ID);
setState(339);
arguments();
}
break;
case 12:
_localctx=new NewobjectContext(_localctx);
enterOuterAlt(_localctx,12);
{
setState(340);
match(NEW);
setState(341);
match(TYPE);
setState(342);
arguments();
}
break;
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}
