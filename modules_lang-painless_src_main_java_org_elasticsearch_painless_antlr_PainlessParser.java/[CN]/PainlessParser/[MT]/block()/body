{
  BlockContext _localctx=new BlockContext(_ctx,getState());
  enterRule(_localctx,10,RULE_block);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(191);
      match(LBRACK);
      setState(195);
      _errHandler.sync(this);
      _la=_input.LA(1);
      while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << IF)| (1L << WHILE)| (1L << DO)| (1L << FOR)| (1L << CONTINUE)| (1L << BREAK)| (1L << RETURN)| (1L << NEW)| (1L << TRY)| (1L << THROW)| (1L << BOOLNOT)| (1L << BWNOT)| (1L << ADD)| (1L << SUB)| (1L << INCR)| (1L << DECR))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OCTAL - 70)) | (1L << (HEX - 70)) | (1L << (INTEGER - 70))| (1L << (DECIMAL - 70))| (1L << (STRING - 70))| (1L << (REGEX - 70))| (1L << (TRUE - 70))| (1L << (FALSE - 70))| (1L << (NULL - 70))| (1L << (TYPE - 70))| (1L << (ID - 70)))) != 0)) {
{
{
            setState(192);
            statement();
          }
        }
        setState(197);
        _errHandler.sync(this);
        _la=_input.LA(1);
      }
      setState(198);
      match(RBRACK);
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}
