{
  StatementContext _localctx=new StatementContext(_ctx,getState());
  enterRule(_localctx,2,RULE_statement);
  try {
    int _alt;
    setState(117);
switch (getInterpreter().adaptivePredict(_input,8,_ctx)) {
case 1:
      _localctx=new IfContext(_localctx);
    enterOuterAlt(_localctx,1);
{
    setState(48);
    match(IF);
    setState(49);
    match(LP);
    setState(50);
    expression(0);
    setState(51);
    match(RP);
    setState(52);
    trailer();
    setState(56);
switch (getInterpreter().adaptivePredict(_input,1,_ctx)) {
case 1:
{
        setState(53);
        match(ELSE);
        setState(54);
        trailer();
      }
    break;
case 2:
{
    setState(55);
    if (!(_input.LA(1) != ELSE))     throw new FailedPredicateException(this," _input.LA(1) != ELSE ");
  }
break;
}
}
break;
case 2:
_localctx=new WhileContext(_localctx);
enterOuterAlt(_localctx,2);
{
setState(58);
match(WHILE);
setState(59);
match(LP);
setState(60);
expression(0);
setState(61);
match(RP);
setState(64);
switch (getInterpreter().adaptivePredict(_input,2,_ctx)) {
case 1:
{
setState(62);
trailer();
}
break;
case 2:
{
setState(63);
empty();
}
break;
}
}
break;
case 3:
_localctx=new DoContext(_localctx);
enterOuterAlt(_localctx,3);
{
setState(66);
match(DO);
setState(67);
block();
setState(68);
match(WHILE);
setState(69);
match(LP);
setState(70);
expression(0);
setState(71);
match(RP);
setState(72);
delimiter();
}
break;
case 4:
_localctx=new ForContext(_localctx);
enterOuterAlt(_localctx,4);
{
setState(74);
match(FOR);
setState(75);
match(LP);
setState(77);
switch (getInterpreter().adaptivePredict(_input,3,_ctx)) {
case 1:
{
setState(76);
initializer();
}
break;
}
setState(79);
match(SEMICOLON);
setState(81);
switch (getInterpreter().adaptivePredict(_input,4,_ctx)) {
case 1:
{
setState(80);
expression(0);
}
break;
}
setState(83);
match(SEMICOLON);
setState(85);
switch (getInterpreter().adaptivePredict(_input,5,_ctx)) {
case 1:
{
setState(84);
afterthought();
}
break;
}
setState(87);
match(RP);
setState(90);
switch (getInterpreter().adaptivePredict(_input,6,_ctx)) {
case 1:
{
setState(88);
trailer();
}
break;
case 2:
{
setState(89);
empty();
}
break;
}
}
break;
case 5:
_localctx=new DeclContext(_localctx);
enterOuterAlt(_localctx,5);
{
setState(92);
declaration();
setState(93);
delimiter();
}
break;
case 6:
_localctx=new ContinueContext(_localctx);
enterOuterAlt(_localctx,6);
{
setState(95);
match(CONTINUE);
setState(96);
delimiter();
}
break;
case 7:
_localctx=new BreakContext(_localctx);
enterOuterAlt(_localctx,7);
{
setState(97);
match(BREAK);
setState(98);
delimiter();
}
break;
case 8:
_localctx=new ReturnContext(_localctx);
enterOuterAlt(_localctx,8);
{
setState(99);
match(RETURN);
setState(100);
expression(0);
setState(101);
delimiter();
}
break;
case 9:
_localctx=new TryContext(_localctx);
enterOuterAlt(_localctx,9);
{
setState(103);
match(TRY);
setState(104);
block();
setState(106);
_errHandler.sync(this);
_alt=1;
do {
switch (_alt) {
case 1:
{
{
setState(105);
trap();
}
}
break;
default :
throw new NoViableAltException(this);
}
setState(108);
_errHandler.sync(this);
_alt=getInterpreter().adaptivePredict(_input,7,_ctx);
}
 while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
}
break;
case 10:
_localctx=new ThrowContext(_localctx);
enterOuterAlt(_localctx,10);
{
setState(110);
match(THROW);
setState(111);
expression(0);
setState(112);
delimiter();
}
break;
case 11:
_localctx=new ExprContext(_localctx);
enterOuterAlt(_localctx,11);
{
setState(114);
expression(0);
setState(115);
delimiter();
}
break;
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}
