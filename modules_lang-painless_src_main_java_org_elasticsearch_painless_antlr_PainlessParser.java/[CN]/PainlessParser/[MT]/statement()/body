{
  StatementContext _localctx=new StatementContext(_ctx,getState());
  enterRule(_localctx,6,RULE_statement);
  try {
    int _alt;
    setState(189);
switch (getInterpreter().adaptivePredict(_input,11,_ctx)) {
case 1:
      _localctx=new IfContext(_localctx);
    enterOuterAlt(_localctx,1);
{
    setState(103);
    match(IF);
    setState(104);
    match(LP);
    setState(105);
    expression(0);
    setState(106);
    match(RP);
    setState(107);
    trailer();
    setState(111);
switch (getInterpreter().adaptivePredict(_input,4,_ctx)) {
case 1:
{
        setState(108);
        match(ELSE);
        setState(109);
        trailer();
      }
    break;
case 2:
{
    setState(110);
    if (!(_input.LA(1) != ELSE))     throw new FailedPredicateException(this," _input.LA(1) != ELSE ");
  }
break;
}
}
break;
case 2:
_localctx=new WhileContext(_localctx);
enterOuterAlt(_localctx,2);
{
setState(113);
match(WHILE);
setState(114);
match(LP);
setState(115);
expression(0);
setState(116);
match(RP);
setState(119);
switch (getInterpreter().adaptivePredict(_input,5,_ctx)) {
case 1:
{
setState(117);
trailer();
}
break;
case 2:
{
setState(118);
empty();
}
break;
}
}
break;
case 3:
_localctx=new DoContext(_localctx);
enterOuterAlt(_localctx,3);
{
setState(121);
match(DO);
setState(122);
block();
setState(123);
match(WHILE);
setState(124);
match(LP);
setState(125);
expression(0);
setState(126);
match(RP);
setState(127);
delimiter();
}
break;
case 4:
_localctx=new ForContext(_localctx);
enterOuterAlt(_localctx,4);
{
setState(129);
match(FOR);
setState(130);
match(LP);
setState(132);
switch (getInterpreter().adaptivePredict(_input,6,_ctx)) {
case 1:
{
setState(131);
initializer();
}
break;
}
setState(134);
match(SEMICOLON);
setState(136);
switch (getInterpreter().adaptivePredict(_input,7,_ctx)) {
case 1:
{
setState(135);
expression(0);
}
break;
}
setState(138);
match(SEMICOLON);
setState(140);
switch (getInterpreter().adaptivePredict(_input,8,_ctx)) {
case 1:
{
setState(139);
afterthought();
}
break;
}
setState(142);
match(RP);
setState(145);
switch (getInterpreter().adaptivePredict(_input,9,_ctx)) {
case 1:
{
setState(143);
trailer();
}
break;
case 2:
{
setState(144);
empty();
}
break;
}
}
break;
case 5:
_localctx=new EachContext(_localctx);
enterOuterAlt(_localctx,5);
{
setState(147);
match(FOR);
setState(148);
match(LP);
setState(149);
decltype();
setState(150);
match(ID);
setState(151);
match(COLON);
setState(152);
expression(0);
setState(153);
match(RP);
setState(154);
trailer();
}
break;
case 6:
_localctx=new IneachContext(_localctx);
enterOuterAlt(_localctx,6);
{
setState(156);
match(FOR);
setState(157);
match(LP);
setState(158);
match(ID);
setState(159);
match(IN);
setState(160);
expression(0);
setState(161);
match(RP);
setState(162);
trailer();
}
break;
case 7:
_localctx=new DeclContext(_localctx);
enterOuterAlt(_localctx,7);
{
setState(164);
declaration();
setState(165);
delimiter();
}
break;
case 8:
_localctx=new ContinueContext(_localctx);
enterOuterAlt(_localctx,8);
{
setState(167);
match(CONTINUE);
setState(168);
delimiter();
}
break;
case 9:
_localctx=new BreakContext(_localctx);
enterOuterAlt(_localctx,9);
{
setState(169);
match(BREAK);
setState(170);
delimiter();
}
break;
case 10:
_localctx=new ReturnContext(_localctx);
enterOuterAlt(_localctx,10);
{
setState(171);
match(RETURN);
setState(172);
expression(0);
setState(173);
delimiter();
}
break;
case 11:
_localctx=new TryContext(_localctx);
enterOuterAlt(_localctx,11);
{
setState(175);
match(TRY);
setState(176);
block();
setState(178);
_errHandler.sync(this);
_alt=1;
do {
switch (_alt) {
case 1:
{
{
setState(177);
trap();
}
}
break;
default :
throw new NoViableAltException(this);
}
setState(180);
_errHandler.sync(this);
_alt=getInterpreter().adaptivePredict(_input,10,_ctx);
}
 while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
}
break;
case 12:
_localctx=new ThrowContext(_localctx);
enterOuterAlt(_localctx,12);
{
setState(182);
match(THROW);
setState(183);
expression(0);
setState(184);
delimiter();
}
break;
case 13:
_localctx=new ExprContext(_localctx);
enterOuterAlt(_localctx,13);
{
setState(186);
expression(0);
setState(187);
delimiter();
}
break;
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}
