{
  StatementContext _localctx=new StatementContext(_ctx,getState());
  enterRule(_localctx,6,RULE_statement);
  try {
    int _alt;
    setState(165);
switch (getInterpreter().adaptivePredict(_input,11,_ctx)) {
case 1:
      _localctx=new IfContext(_localctx);
    enterOuterAlt(_localctx,1);
{
    setState(87);
    match(IF);
    setState(88);
    match(LP);
    setState(89);
    expression(0);
    setState(90);
    match(RP);
    setState(91);
    trailer();
    setState(95);
switch (getInterpreter().adaptivePredict(_input,4,_ctx)) {
case 1:
{
        setState(92);
        match(ELSE);
        setState(93);
        trailer();
      }
    break;
case 2:
{
    setState(94);
    if (!(_input.LA(1) != ELSE))     throw new FailedPredicateException(this," _input.LA(1) != ELSE ");
  }
break;
}
}
break;
case 2:
_localctx=new WhileContext(_localctx);
enterOuterAlt(_localctx,2);
{
setState(97);
match(WHILE);
setState(98);
match(LP);
setState(99);
expression(0);
setState(100);
match(RP);
setState(103);
switch (getInterpreter().adaptivePredict(_input,5,_ctx)) {
case 1:
{
setState(101);
trailer();
}
break;
case 2:
{
setState(102);
empty();
}
break;
}
}
break;
case 3:
_localctx=new DoContext(_localctx);
enterOuterAlt(_localctx,3);
{
setState(105);
match(DO);
setState(106);
block();
setState(107);
match(WHILE);
setState(108);
match(LP);
setState(109);
expression(0);
setState(110);
match(RP);
setState(111);
delimiter();
}
break;
case 4:
_localctx=new ForContext(_localctx);
enterOuterAlt(_localctx,4);
{
setState(113);
match(FOR);
setState(114);
match(LP);
setState(116);
switch (getInterpreter().adaptivePredict(_input,6,_ctx)) {
case 1:
{
setState(115);
initializer();
}
break;
}
setState(118);
match(SEMICOLON);
setState(120);
switch (getInterpreter().adaptivePredict(_input,7,_ctx)) {
case 1:
{
setState(119);
expression(0);
}
break;
}
setState(122);
match(SEMICOLON);
setState(124);
switch (getInterpreter().adaptivePredict(_input,8,_ctx)) {
case 1:
{
setState(123);
afterthought();
}
break;
}
setState(126);
match(RP);
setState(129);
switch (getInterpreter().adaptivePredict(_input,9,_ctx)) {
case 1:
{
setState(127);
trailer();
}
break;
case 2:
{
setState(128);
empty();
}
break;
}
}
break;
case 5:
_localctx=new EachContext(_localctx);
enterOuterAlt(_localctx,5);
{
setState(131);
match(FOR);
setState(132);
match(LP);
setState(133);
decltype();
setState(134);
match(ID);
setState(135);
match(COLON);
setState(136);
expression(0);
setState(137);
match(RP);
setState(138);
trailer();
}
break;
case 6:
_localctx=new DeclContext(_localctx);
enterOuterAlt(_localctx,6);
{
setState(140);
declaration();
setState(141);
delimiter();
}
break;
case 7:
_localctx=new ContinueContext(_localctx);
enterOuterAlt(_localctx,7);
{
setState(143);
match(CONTINUE);
setState(144);
delimiter();
}
break;
case 8:
_localctx=new BreakContext(_localctx);
enterOuterAlt(_localctx,8);
{
setState(145);
match(BREAK);
setState(146);
delimiter();
}
break;
case 9:
_localctx=new ReturnContext(_localctx);
enterOuterAlt(_localctx,9);
{
setState(147);
match(RETURN);
setState(148);
expression(0);
setState(149);
delimiter();
}
break;
case 10:
_localctx=new TryContext(_localctx);
enterOuterAlt(_localctx,10);
{
setState(151);
match(TRY);
setState(152);
block();
setState(154);
_errHandler.sync(this);
_alt=1;
do {
switch (_alt) {
case 1:
{
{
setState(153);
trap();
}
}
break;
default :
throw new NoViableAltException(this);
}
setState(156);
_errHandler.sync(this);
_alt=getInterpreter().adaptivePredict(_input,10,_ctx);
}
 while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
}
break;
case 11:
_localctx=new ThrowContext(_localctx);
enterOuterAlt(_localctx,11);
{
setState(158);
match(THROW);
setState(159);
expression(0);
setState(160);
delimiter();
}
break;
case 12:
_localctx=new ExprContext(_localctx);
enterOuterAlt(_localctx,12);
{
setState(162);
expression(0);
setState(163);
delimiter();
}
break;
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}
