{
  StatementContext _localctx=new StatementContext(_ctx,getState());
  enterRule(_localctx,2,RULE_statement);
  try {
    int _alt;
    setState(130);
switch (getInterpreter().adaptivePredict(_input,8,_ctx)) {
case 1:
      _localctx=new IfContext(_localctx);
    enterOuterAlt(_localctx,1);
{
    setState(52);
    match(IF);
    setState(53);
    match(LP);
    setState(54);
    expression(0);
    setState(55);
    match(RP);
    setState(56);
    trailer();
    setState(60);
switch (getInterpreter().adaptivePredict(_input,1,_ctx)) {
case 1:
{
        setState(57);
        match(ELSE);
        setState(58);
        trailer();
      }
    break;
case 2:
{
    setState(59);
    if (!(_input.LA(1) != ELSE))     throw new FailedPredicateException(this," _input.LA(1) != ELSE ");
  }
break;
}
}
break;
case 2:
_localctx=new WhileContext(_localctx);
enterOuterAlt(_localctx,2);
{
setState(62);
match(WHILE);
setState(63);
match(LP);
setState(64);
expression(0);
setState(65);
match(RP);
setState(68);
switch (getInterpreter().adaptivePredict(_input,2,_ctx)) {
case 1:
{
setState(66);
trailer();
}
break;
case 2:
{
setState(67);
empty();
}
break;
}
}
break;
case 3:
_localctx=new DoContext(_localctx);
enterOuterAlt(_localctx,3);
{
setState(70);
match(DO);
setState(71);
block();
setState(72);
match(WHILE);
setState(73);
match(LP);
setState(74);
expression(0);
setState(75);
match(RP);
setState(76);
delimiter();
}
break;
case 4:
_localctx=new ForContext(_localctx);
enterOuterAlt(_localctx,4);
{
setState(78);
match(FOR);
setState(79);
match(LP);
setState(81);
switch (getInterpreter().adaptivePredict(_input,3,_ctx)) {
case 1:
{
setState(80);
initializer();
}
break;
}
setState(83);
match(SEMICOLON);
setState(85);
switch (getInterpreter().adaptivePredict(_input,4,_ctx)) {
case 1:
{
setState(84);
expression(0);
}
break;
}
setState(87);
match(SEMICOLON);
setState(89);
switch (getInterpreter().adaptivePredict(_input,5,_ctx)) {
case 1:
{
setState(88);
afterthought();
}
break;
}
setState(91);
match(RP);
setState(94);
switch (getInterpreter().adaptivePredict(_input,6,_ctx)) {
case 1:
{
setState(92);
trailer();
}
break;
case 2:
{
setState(93);
empty();
}
break;
}
}
break;
case 5:
_localctx=new EachContext(_localctx);
enterOuterAlt(_localctx,5);
{
setState(96);
match(FOR);
setState(97);
match(LP);
setState(98);
decltype();
setState(99);
match(ID);
setState(100);
match(COLON);
setState(101);
expression(0);
setState(102);
match(RP);
setState(103);
trailer();
}
break;
case 6:
_localctx=new DeclContext(_localctx);
enterOuterAlt(_localctx,6);
{
setState(105);
declaration();
setState(106);
delimiter();
}
break;
case 7:
_localctx=new ContinueContext(_localctx);
enterOuterAlt(_localctx,7);
{
setState(108);
match(CONTINUE);
setState(109);
delimiter();
}
break;
case 8:
_localctx=new BreakContext(_localctx);
enterOuterAlt(_localctx,8);
{
setState(110);
match(BREAK);
setState(111);
delimiter();
}
break;
case 9:
_localctx=new ReturnContext(_localctx);
enterOuterAlt(_localctx,9);
{
setState(112);
match(RETURN);
setState(113);
expression(0);
setState(114);
delimiter();
}
break;
case 10:
_localctx=new TryContext(_localctx);
enterOuterAlt(_localctx,10);
{
setState(116);
match(TRY);
setState(117);
block();
setState(119);
_errHandler.sync(this);
_alt=1;
do {
switch (_alt) {
case 1:
{
{
setState(118);
trap();
}
}
break;
default :
throw new NoViableAltException(this);
}
setState(121);
_errHandler.sync(this);
_alt=getInterpreter().adaptivePredict(_input,7,_ctx);
}
 while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
}
break;
case 11:
_localctx=new ThrowContext(_localctx);
enterOuterAlt(_localctx,11);
{
setState(123);
match(THROW);
setState(124);
expression(0);
setState(125);
delimiter();
}
break;
case 12:
_localctx=new ExprContext(_localctx);
enterOuterAlt(_localctx,12);
{
setState(127);
expression(0);
setState(128);
delimiter();
}
break;
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}
