{
  StatementContext _localctx=new StatementContext(_ctx,getState());
  enterRule(_localctx,6,RULE_statement);
  int _la;
  try {
    int _alt;
    setState(185);
switch (getInterpreter().adaptivePredict(_input,11,_ctx)) {
case 1:
      _localctx=new IfContext(_localctx);
    enterOuterAlt(_localctx,1);
{
    setState(99);
    match(IF);
    setState(100);
    match(LP);
    setState(101);
    expression(0);
    setState(102);
    match(RP);
    setState(103);
    trailer();
    setState(107);
switch (getInterpreter().adaptivePredict(_input,4,_ctx)) {
case 1:
{
        setState(104);
        match(ELSE);
        setState(105);
        trailer();
      }
    break;
case 2:
{
    setState(106);
    if (!(_input.LA(1) != ELSE))     throw new FailedPredicateException(this," _input.LA(1) != ELSE ");
  }
break;
}
}
break;
case 2:
_localctx=new WhileContext(_localctx);
enterOuterAlt(_localctx,2);
{
setState(109);
match(WHILE);
setState(110);
match(LP);
setState(111);
expression(0);
setState(112);
match(RP);
setState(115);
switch (_input.LA(1)) {
case LBRACK:
case LBRACE:
case LP:
case IF:
case WHILE:
case DO:
case FOR:
case CONTINUE:
case BREAK:
case RETURN:
case NEW:
case TRY:
case THROW:
case BOOLNOT:
case BWNOT:
case ADD:
case SUB:
case INCR:
case DECR:
case OCTAL:
case HEX:
case INTEGER:
case DECIMAL:
case STRING:
case REGEX:
case TRUE:
case FALSE:
case NULL:
case TYPE:
case ID:
{
setState(113);
trailer();
}
break;
case SEMICOLON:
{
setState(114);
empty();
}
break;
default :
throw new NoViableAltException(this);
}
}
break;
case 3:
_localctx=new DoContext(_localctx);
enterOuterAlt(_localctx,3);
{
setState(117);
match(DO);
setState(118);
block();
setState(119);
match(WHILE);
setState(120);
match(LP);
setState(121);
expression(0);
setState(122);
match(RP);
setState(123);
delimiter();
}
break;
case 4:
_localctx=new ForContext(_localctx);
enterOuterAlt(_localctx,4);
{
setState(125);
match(FOR);
setState(126);
match(LP);
setState(128);
_la=_input.LA(1);
if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW)| (1L << BOOLNOT)| (1L << BWNOT)| (1L << ADD)| (1L << SUB)| (1L << INCR)| (1L << DECR))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OCTAL - 70)) | (1L << (HEX - 70)) | (1L << (INTEGER - 70))| (1L << (DECIMAL - 70))| (1L << (STRING - 70))| (1L << (REGEX - 70))| (1L << (TRUE - 70))| (1L << (FALSE - 70))| (1L << (NULL - 70))| (1L << (TYPE - 70))| (1L << (ID - 70)))) != 0)) {
{
setState(127);
initializer();
}
}
setState(130);
match(SEMICOLON);
setState(132);
_la=_input.LA(1);
if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW)| (1L << BOOLNOT)| (1L << BWNOT)| (1L << ADD)| (1L << SUB)| (1L << INCR)| (1L << DECR))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OCTAL - 70)) | (1L << (HEX - 70)) | (1L << (INTEGER - 70))| (1L << (DECIMAL - 70))| (1L << (STRING - 70))| (1L << (REGEX - 70))| (1L << (TRUE - 70))| (1L << (FALSE - 70))| (1L << (NULL - 70))| (1L << (TYPE - 70))| (1L << (ID - 70)))) != 0)) {
{
setState(131);
expression(0);
}
}
setState(134);
match(SEMICOLON);
setState(136);
_la=_input.LA(1);
if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBRACE) | (1L << LP) | (1L << NEW)| (1L << BOOLNOT)| (1L << BWNOT)| (1L << ADD)| (1L << SUB)| (1L << INCR)| (1L << DECR))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OCTAL - 70)) | (1L << (HEX - 70)) | (1L << (INTEGER - 70))| (1L << (DECIMAL - 70))| (1L << (STRING - 70))| (1L << (REGEX - 70))| (1L << (TRUE - 70))| (1L << (FALSE - 70))| (1L << (NULL - 70))| (1L << (TYPE - 70))| (1L << (ID - 70)))) != 0)) {
{
setState(135);
afterthought();
}
}
setState(138);
match(RP);
setState(141);
switch (_input.LA(1)) {
case LBRACK:
case LBRACE:
case LP:
case IF:
case WHILE:
case DO:
case FOR:
case CONTINUE:
case BREAK:
case RETURN:
case NEW:
case TRY:
case THROW:
case BOOLNOT:
case BWNOT:
case ADD:
case SUB:
case INCR:
case DECR:
case OCTAL:
case HEX:
case INTEGER:
case DECIMAL:
case STRING:
case REGEX:
case TRUE:
case FALSE:
case NULL:
case TYPE:
case ID:
{
setState(139);
trailer();
}
break;
case SEMICOLON:
{
setState(140);
empty();
}
break;
default :
throw new NoViableAltException(this);
}
}
break;
case 5:
_localctx=new EachContext(_localctx);
enterOuterAlt(_localctx,5);
{
setState(143);
match(FOR);
setState(144);
match(LP);
setState(145);
decltype();
setState(146);
match(ID);
setState(147);
match(COLON);
setState(148);
expression(0);
setState(149);
match(RP);
setState(150);
trailer();
}
break;
case 6:
_localctx=new IneachContext(_localctx);
enterOuterAlt(_localctx,6);
{
setState(152);
match(FOR);
setState(153);
match(LP);
setState(154);
match(ID);
setState(155);
match(IN);
setState(156);
expression(0);
setState(157);
match(RP);
setState(158);
trailer();
}
break;
case 7:
_localctx=new DeclContext(_localctx);
enterOuterAlt(_localctx,7);
{
setState(160);
declaration();
setState(161);
delimiter();
}
break;
case 8:
_localctx=new ContinueContext(_localctx);
enterOuterAlt(_localctx,8);
{
setState(163);
match(CONTINUE);
setState(164);
delimiter();
}
break;
case 9:
_localctx=new BreakContext(_localctx);
enterOuterAlt(_localctx,9);
{
setState(165);
match(BREAK);
setState(166);
delimiter();
}
break;
case 10:
_localctx=new ReturnContext(_localctx);
enterOuterAlt(_localctx,10);
{
setState(167);
match(RETURN);
setState(168);
expression(0);
setState(169);
delimiter();
}
break;
case 11:
_localctx=new TryContext(_localctx);
enterOuterAlt(_localctx,11);
{
setState(171);
match(TRY);
setState(172);
block();
setState(174);
_errHandler.sync(this);
_alt=1;
do {
switch (_alt) {
case 1:
{
{
setState(173);
trap();
}
}
break;
default :
throw new NoViableAltException(this);
}
setState(176);
_errHandler.sync(this);
_alt=getInterpreter().adaptivePredict(_input,10,_ctx);
}
 while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
}
break;
case 12:
_localctx=new ThrowContext(_localctx);
enterOuterAlt(_localctx,12);
{
setState(178);
match(THROW);
setState(179);
expression(0);
setState(180);
delimiter();
}
break;
case 13:
_localctx=new ExprContext(_localctx);
enterOuterAlt(_localctx,13);
{
setState(182);
expression(0);
setState(183);
delimiter();
}
break;
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}
