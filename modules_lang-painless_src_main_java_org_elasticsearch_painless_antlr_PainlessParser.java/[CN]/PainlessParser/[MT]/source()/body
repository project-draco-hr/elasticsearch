{
  SourceContext _localctx=new SourceContext(_ctx,getState());
  enterRule(_localctx,0,RULE_source);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(51);
      _errHandler.sync(this);
      _la=_input.LA(1);
      do {
{
{
            setState(50);
            statement();
          }
        }
        setState(53);
        _errHandler.sync(this);
        _la=_input.LA(1);
      }
 while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LP) | (1L << IF) | (1L << WHILE)| (1L << DO)| (1L << FOR)| (1L << CONTINUE)| (1L << BREAK)| (1L << RETURN)| (1L << NEW)| (1L << TRY)| (1L << THROW)| (1L << BOOLNOT)| (1L << BWNOT)| (1L << ADD)| (1L << SUB)| (1L << INCR)| (1L << DECR)| (1L << OCTAL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (HEX - 64)) | (1L << (INTEGER - 64)) | (1L << (DECIMAL - 64))| (1L << (STRING - 64))| (1L << (TRUE - 64))| (1L << (FALSE - 64))| (1L << (NULL - 64))| (1L << (ID - 64)))) != 0));
      setState(55);
      match(EOF);
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}
