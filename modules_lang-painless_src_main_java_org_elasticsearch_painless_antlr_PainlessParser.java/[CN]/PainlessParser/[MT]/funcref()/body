{
  FuncrefContext _localctx=new FuncrefContext(_ctx,getState());
  enterRule(_localctx,62,RULE_funcref);
  try {
    setState(502);
switch (getInterpreter().adaptivePredict(_input,47,_ctx)) {
case 1:
      _localctx=new ClassfuncrefContext(_localctx);
    enterOuterAlt(_localctx,1);
{
    setState(489);
    match(TYPE);
    setState(490);
    match(REF);
    setState(491);
    match(ID);
  }
break;
case 2:
_localctx=new ConstructorfuncrefContext(_localctx);
enterOuterAlt(_localctx,2);
{
setState(492);
decltype();
setState(493);
match(REF);
setState(494);
match(NEW);
}
break;
case 3:
_localctx=new CapturingfuncrefContext(_localctx);
enterOuterAlt(_localctx,3);
{
setState(496);
match(ID);
setState(497);
match(REF);
setState(498);
match(ID);
}
break;
case 4:
_localctx=new LocalfuncrefContext(_localctx);
enterOuterAlt(_localctx,4);
{
setState(499);
match(THIS);
setState(500);
match(REF);
setState(501);
match(ID);
}
break;
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}
