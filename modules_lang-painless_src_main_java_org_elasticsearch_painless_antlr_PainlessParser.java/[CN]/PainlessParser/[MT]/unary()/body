{
  UnaryContext _localctx=new UnaryContext(_ctx,getState());
  enterRule(_localctx,30,RULE_unary);
  int _la;
  try {
    setState(305);
switch (getInterpreter().adaptivePredict(_input,20,_ctx)) {
case 1:
      _localctx=new PreContext(_localctx);
    enterOuterAlt(_localctx,1);
{
    setState(292);
    _la=_input.LA(1);
    if (!(_la == INCR || _la == DECR)) {
      _errHandler.recoverInline(this);
    }
 else {
      consume();
    }
    setState(293);
    chain();
  }
break;
case 2:
_localctx=new PostContext(_localctx);
enterOuterAlt(_localctx,2);
{
setState(294);
chain();
setState(295);
_la=_input.LA(1);
if (!(_la == INCR || _la == DECR)) {
_errHandler.recoverInline(this);
}
 else {
consume();
}
}
break;
case 3:
_localctx=new ReadContext(_localctx);
enterOuterAlt(_localctx,3);
{
setState(297);
chain();
}
break;
case 4:
_localctx=new OperatorContext(_localctx);
enterOuterAlt(_localctx,4);
{
setState(298);
_la=_input.LA(1);
if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLNOT) | (1L << BWNOT) | (1L << ADD)| (1L << SUB))) != 0))) {
_errHandler.recoverInline(this);
}
 else {
consume();
}
setState(299);
unary();
}
break;
case 5:
_localctx=new CastContext(_localctx);
enterOuterAlt(_localctx,5);
{
setState(300);
match(LP);
setState(301);
decltype();
setState(302);
match(RP);
setState(303);
unary();
}
break;
}
}
 catch (RecognitionException re) {
_localctx.exception=re;
_errHandler.reportError(this,re);
_errHandler.recover(this,re);
}
 finally {
exitRule();
}
return _localctx;
}
