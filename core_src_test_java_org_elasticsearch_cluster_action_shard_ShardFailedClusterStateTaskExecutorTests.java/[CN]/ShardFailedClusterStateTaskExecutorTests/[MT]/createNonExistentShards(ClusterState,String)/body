{
  MetaData nonExistentMetaData=MetaData.builder().put(IndexMetaData.builder("non-existent").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(numberOfReplicas)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(nonExistentMetaData.index("non-existent")).build();
  String nonExistentIndexUUID=nonExistentMetaData.index("non-existent").getIndexUUID();
  List<ShardStateAction.ShardRoutingEntry> existingShards=createExistingShards(currentState,reason);
  List<ShardStateAction.ShardRoutingEntry> shardsWithMismatchedAllocationIds=new ArrayList<>();
  for (  ShardStateAction.ShardRoutingEntry existingShard : existingShards) {
    ShardRouting sr=existingShard.getShardRouting();
    ShardRouting nonExistentShardRouting=TestShardRouting.newShardRouting(sr.index(),sr.id(),sr.currentNodeId(),sr.relocatingNodeId(),sr.restoreSource(),sr.primary(),sr.state(),sr.version());
    shardsWithMismatchedAllocationIds.add(new ShardStateAction.ShardRoutingEntry(nonExistentShardRouting,existingShard.indexUUID,existingShard.message,existingShard.failure));
  }
  List<ShardStateAction.ShardRoutingEntry> tasks=new ArrayList<>();
  tasks.addAll(toTasks(routingTable.allShards(),nonExistentIndexUUID,reason));
  tasks.addAll(shardsWithMismatchedAllocationIds);
  return tasks;
}
