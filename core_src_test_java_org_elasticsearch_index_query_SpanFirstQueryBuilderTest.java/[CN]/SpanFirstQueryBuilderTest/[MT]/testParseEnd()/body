{
  XContentBuilder builder=XContentFactory.jsonBuilder();
  builder.startObject();
  builder.startObject(SpanFirstQueryBuilder.NAME);
  builder.field("match");
  spanTermQuery("description","jumped").toXContent(builder,null);
  builder.endObject();
  builder.endObject();
  QueryParseContext context=createParseContext();
  XContentParser parser=XContentFactory.xContent(builder.string()).createParser(builder.string());
  context.reset(parser);
  assertQueryHeader(parser,SpanFirstQueryBuilder.NAME);
  try {
    new SpanFirstQueryParser().fromXContent(context);
    fail("missing [end] parameter should raise exception");
  }
 catch (  QueryParsingException e) {
    assertTrue(e.getMessage().contains("spanFirst must have [end] set"));
  }
  builder=XContentFactory.jsonBuilder();
  builder.startObject();
  builder.startObject(SpanFirstQueryBuilder.NAME);
  builder.field("end",10);
  builder.endObject();
  builder.endObject();
  context=createParseContext();
  parser=XContentFactory.xContent(builder.string()).createParser(builder.string());
  context.reset(parser);
  assertQueryHeader(parser,SpanFirstQueryBuilder.NAME);
  try {
    new SpanFirstQueryParser().fromXContent(context);
    fail("missing [match] parameter should raise exception");
  }
 catch (  QueryParsingException e) {
    assertTrue(e.getMessage().contains("spanFirst must have [match] span query clause"));
  }
}
