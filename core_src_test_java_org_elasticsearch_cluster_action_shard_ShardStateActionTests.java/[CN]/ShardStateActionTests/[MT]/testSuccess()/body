{
  final String index="test";
  clusterService.setState(stateWithStartedPrimary(index,true,randomInt(5)));
  String indexUUID=clusterService.state().metaData().index(index).getIndexUUID();
  AtomicBoolean success=new AtomicBoolean();
  CountDownLatch latch=new CountDownLatch(1);
  ShardRouting shardRouting=getRandomShardRouting(index);
  shardStateAction.shardFailed(shardRouting,indexUUID,"test",getSimulatedFailure(),new ShardStateAction.Listener(){
    @Override public void onSuccess(){
      success.set(true);
      latch.countDown();
    }
  }
);
  CapturingTransport.CapturedRequest[] capturedRequests=transport.getCapturedRequestsAndClear();
  assertEquals(1,capturedRequests.length);
  assertThat(capturedRequests[0].request,is(instanceOf(ShardStateAction.ShardRoutingEntry.class)));
  ShardStateAction.ShardRoutingEntry shardRoutingEntry=(ShardStateAction.ShardRoutingEntry)capturedRequests[0].request;
  assertEquals(shardRouting,shardRoutingEntry.getShardRouting());
  assertEquals(clusterService.state().nodes().masterNode().getId(),capturedRequests[0].node.getId());
  transport.handleResponse(capturedRequests[0].requestId,TransportResponse.Empty.INSTANCE);
  latch.await();
  assertTrue(success.get());
}
