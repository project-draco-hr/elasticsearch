{
  final String index="test";
  setState(clusterService,ClusterStateCreationUtils.stateWithActivePrimary(index,true,randomInt(5)));
  ShardRouting failedShard=getRandomShardRouting(index);
  AtomicReference<Throwable> failure=new AtomicReference<>();
  CountDownLatch latch=new CountDownLatch(1);
  long primaryTerm=clusterService.state().metaData().index(index).primaryTerm(failedShard.id());
  assertThat(primaryTerm,greaterThanOrEqualTo(1L));
  shardStateAction.remoteShardFailed(failedShard,primaryTerm + 1,"test",getSimulatedFailure(),new ShardStateAction.Listener(){
    @Override public void onSuccess(){
      failure.set(null);
      latch.countDown();
    }
    @Override public void onFailure(    Exception e){
      failure.set(e);
      latch.countDown();
    }
  }
);
  ShardStateAction.NoLongerPrimaryShardException catastrophicError=new ShardStateAction.NoLongerPrimaryShardException(failedShard.shardId(),"dummy failure");
  CapturingTransport.CapturedRequest[] capturedRequests=transport.getCapturedRequestsAndClear();
  transport.handleRemoteError(capturedRequests[0].requestId,catastrophicError);
  latch.await();
  assertNotNull(failure.get());
  assertThat(failure.get(),instanceOf(ShardStateAction.NoLongerPrimaryShardException.class));
  assertThat(failure.get().getMessage(),equalTo(catastrophicError.getMessage()));
}
