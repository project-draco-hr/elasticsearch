{
  ClusterState clusterState=clusterService.state();
  clusterState.blocks().globalBlockedRaiseException(ClusterBlockLevel.READ);
  final AtomicArray<MultiTermVectorsItemResponse> responses=new AtomicArray<>(request.requests.size());
  Map<ShardId,MultiTermVectorsShardRequest> shardRequests=new HashMap<>();
  for (int i=0; i < request.requests.size(); i++) {
    TermVectorsRequest termVectorsRequest=request.requests.get(i);
    termVectorsRequest.startTime=System.currentTimeMillis();
    termVectorsRequest.routing(clusterState.metaData().resolveIndexRouting(termVectorsRequest.routing(),termVectorsRequest.index()));
    if (!clusterState.metaData().hasConcreteIndex(termVectorsRequest.index())) {
      responses.set(i,new MultiTermVectorsItemResponse(null,new MultiTermVectorsResponse.Failure(termVectorsRequest.index(),termVectorsRequest.type(),termVectorsRequest.id(),new IndexNotFoundException(termVectorsRequest.index()))));
      continue;
    }
    String concreteSingleIndex=indexNameExpressionResolver.concreteSingleIndex(clusterState,(DocumentRequest)termVectorsRequest);
    if (termVectorsRequest.routing() == null && clusterState.getMetaData().routingRequired(concreteSingleIndex,termVectorsRequest.type())) {
      responses.set(i,new MultiTermVectorsItemResponse(null,new MultiTermVectorsResponse.Failure(concreteSingleIndex,termVectorsRequest.type(),termVectorsRequest.id(),new IllegalArgumentException("routing is required for [" + concreteSingleIndex + "]/["+ termVectorsRequest.type()+ "]/["+ termVectorsRequest.id()+ "]"))));
      continue;
    }
    ShardId shardId=clusterService.operationRouting().getShards(clusterState,concreteSingleIndex,termVectorsRequest.type(),termVectorsRequest.id(),termVectorsRequest.routing(),null).shardId();
    MultiTermVectorsShardRequest shardRequest=shardRequests.get(shardId);
    if (shardRequest == null) {
      shardRequest=new MultiTermVectorsShardRequest(request,shardId.index().name(),shardId.id());
      shardRequest.preference(request.preference);
      shardRequests.put(shardId,shardRequest);
    }
    shardRequest.add(i,termVectorsRequest);
  }
  if (shardRequests.size() == 0) {
    listener.onResponse(new MultiTermVectorsResponse(responses.toArray(new MultiTermVectorsItemResponse[responses.length()])));
  }
  final AtomicInteger counter=new AtomicInteger(shardRequests.size());
  for (  final MultiTermVectorsShardRequest shardRequest : shardRequests.values()) {
    shardAction.execute(shardRequest,new ActionListener<MultiTermVectorsShardResponse>(){
      @Override public void onResponse(      MultiTermVectorsShardResponse response){
        for (int i=0; i < response.locations.size(); i++) {
          responses.set(response.locations.get(i),new MultiTermVectorsItemResponse(response.responses.get(i),response.failures.get(i)));
        }
        if (counter.decrementAndGet() == 0) {
          finishHim();
        }
      }
      @Override public void onFailure(      Throwable e){
        for (int i=0; i < shardRequest.locations.size(); i++) {
          TermVectorsRequest termVectorsRequest=shardRequest.requests.get(i);
          responses.set(shardRequest.locations.get(i),new MultiTermVectorsItemResponse(null,new MultiTermVectorsResponse.Failure(shardRequest.index(),termVectorsRequest.type(),termVectorsRequest.id(),e)));
        }
        if (counter.decrementAndGet() == 0) {
          finishHim();
        }
      }
      private void finishHim(){
        listener.onResponse(new MultiTermVectorsResponse(responses.toArray(new MultiTermVectorsItemResponse[responses.length()])));
      }
    }
);
  }
}
