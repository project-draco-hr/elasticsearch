{
  final int[] stack_ll=dataShadow.stack_ll;
  final int[] stack_hh=dataShadow.stack_hh;
  final int[] stack_dd=dataShadow.stack_dd;
  final int[] fmap=dataShadow.fmap;
  final byte[] block=dataShadow.block;
  stack_ll[0]=loSt;
  stack_hh[0]=hiSt;
  stack_dd[0]=dSt;
  for (int sp=1; --sp >= 0; ) {
    final int lo=stack_ll[sp];
    final int hi=stack_hh[sp];
    final int d=stack_dd[sp];
    if ((hi - lo < SMALL_THRESH) || (d > DEPTH_THRESH)) {
      if (mainSimpleSort(dataShadow,lo,hi,d)) {
        return;
      }
    }
 else {
      final int d1=d + 1;
      final int med=med3(block[fmap[lo] + d1],block[fmap[hi] + d1],block[fmap[(lo + hi) >>> 1] + d1]) & 0xff;
      int unLo=lo;
      int unHi=hi;
      int ltLo=lo;
      int gtHi=hi;
      while (true) {
        while (unLo <= unHi) {
          final int n=((int)block[fmap[unLo] + d1] & 0xff) - med;
          if (n == 0) {
            final int temp=fmap[unLo];
            fmap[unLo++]=fmap[ltLo];
            fmap[ltLo++]=temp;
          }
 else           if (n < 0) {
            unLo++;
          }
 else {
            break;
          }
        }
        while (unLo <= unHi) {
          final int n=((int)block[fmap[unHi] + d1] & 0xff) - med;
          if (n == 0) {
            final int temp=fmap[unHi];
            fmap[unHi--]=fmap[gtHi];
            fmap[gtHi--]=temp;
          }
 else           if (n > 0) {
            unHi--;
          }
 else {
            break;
          }
        }
        if (unLo <= unHi) {
          final int temp=fmap[unLo];
          fmap[unLo++]=fmap[unHi];
          fmap[unHi--]=temp;
        }
 else {
          break;
        }
      }
      if (gtHi < ltLo) {
        stack_ll[sp]=lo;
        stack_hh[sp]=hi;
        stack_dd[sp]=d1;
        sp++;
      }
 else {
        int n=((ltLo - lo) < (unLo - ltLo)) ? (ltLo - lo) : (unLo - ltLo);
        vswap(fmap,lo,unLo - n,n);
        int m=((hi - gtHi) < (gtHi - unHi)) ? (hi - gtHi) : (gtHi - unHi);
        vswap(fmap,unLo,hi - m + 1,m);
        n=lo + unLo - ltLo - 1;
        m=hi - (gtHi - unHi) + 1;
        stack_ll[sp]=lo;
        stack_hh[sp]=n;
        stack_dd[sp]=d;
        sp++;
        stack_ll[sp]=n + 1;
        stack_hh[sp]=m - 1;
        stack_dd[sp]=d1;
        sp++;
        stack_ll[sp]=m;
        stack_hh[sp]=hi;
        stack_dd[sp]=d;
        sp++;
      }
    }
  }
}
