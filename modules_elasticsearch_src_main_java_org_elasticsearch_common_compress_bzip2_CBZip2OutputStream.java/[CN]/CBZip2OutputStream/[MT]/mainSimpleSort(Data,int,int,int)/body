{
  final int bigN=hi - lo + 1;
  if (bigN < 2) {
    return this.firstAttempt && (this.workDone > this.workLimit);
  }
  int hp=0;
  while (INCS[hp] < bigN) {
    hp++;
  }
  final int[] fmap=dataShadow.fmap;
  final char[] quadrant=dataShadow.quadrant;
  final byte[] block=dataShadow.block;
  final int lastShadow=this.last;
  final int lastPlus1=lastShadow + 1;
  final boolean firstAttemptShadow=this.firstAttempt;
  final int workLimitShadow=this.workLimit;
  int workDoneShadow=this.workDone;
  HP:   while (--hp >= 0) {
    final int h=INCS[hp];
    final int mj=lo + h - 1;
    for (int i=lo + h; i <= hi; ) {
      for (int k=3; (i <= hi) && (--k >= 0); i++) {
        final int v=fmap[i];
        final int vd=v + d;
        int j=i;
        boolean onceRunned=false;
        int a=0;
        HAMMER:         while (true) {
          if (onceRunned) {
            fmap[j]=a;
            if ((j-=h) <= mj) {
              break HAMMER;
            }
          }
 else {
            onceRunned=true;
          }
          a=fmap[j - h];
          int i1=a + d;
          int i2=vd;
          if (block[i1 + 1] == block[i2 + 1]) {
            if (block[i1 + 2] == block[i2 + 2]) {
              if (block[i1 + 3] == block[i2 + 3]) {
                if (block[i1 + 4] == block[i2 + 4]) {
                  if (block[i1 + 5] == block[i2 + 5]) {
                    if (block[(i1+=6)] == block[(i2+=6)]) {
                      int x=lastShadow;
                      X:                       while (x > 0) {
                        x-=4;
                        if (block[i1 + 1] == block[i2 + 1]) {
                          if (quadrant[i1] == quadrant[i2]) {
                            if (block[i1 + 2] == block[i2 + 2]) {
                              if (quadrant[i1 + 1] == quadrant[i2 + 1]) {
                                if (block[i1 + 3] == block[i2 + 3]) {
                                  if (quadrant[i1 + 2] == quadrant[i2 + 2]) {
                                    if (block[i1 + 4] == block[i2 + 4]) {
                                      if (quadrant[i1 + 3] == quadrant[i2 + 3]) {
                                        if ((i1+=4) >= lastPlus1) {
                                          i1-=lastPlus1;
                                        }
                                        if ((i2+=4) >= lastPlus1) {
                                          i2-=lastPlus1;
                                        }
                                        workDoneShadow++;
                                        continue X;
                                      }
 else                                       if ((quadrant[i1 + 3] > quadrant[i2 + 3])) {
                                        continue HAMMER;
                                      }
 else {
                                        break HAMMER;
                                      }
                                    }
 else                                     if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff)) {
                                      continue HAMMER;
                                    }
 else {
                                      break HAMMER;
                                    }
                                  }
 else                                   if ((quadrant[i1 + 2] > quadrant[i2 + 2])) {
                                    continue HAMMER;
                                  }
 else {
                                    break HAMMER;
                                  }
                                }
 else                                 if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff)) {
                                  continue HAMMER;
                                }
 else {
                                  break HAMMER;
                                }
                              }
 else                               if ((quadrant[i1 + 1] > quadrant[i2 + 1])) {
                                continue HAMMER;
                              }
 else {
                                break HAMMER;
                              }
                            }
 else                             if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff)) {
                              continue HAMMER;
                            }
 else {
                              break HAMMER;
                            }
                          }
 else                           if ((quadrant[i1] > quadrant[i2])) {
                            continue HAMMER;
                          }
 else {
                            break HAMMER;
                          }
                        }
 else                         if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff)) {
                          continue HAMMER;
                        }
 else {
                          break HAMMER;
                        }
                      }
                      break HAMMER;
                    }
 else {
                      if ((block[i1] & 0xff) > (block[i2] & 0xff)) {
                        continue HAMMER;
                      }
 else {
                        break HAMMER;
                      }
                    }
                  }
 else                   if ((block[i1 + 5] & 0xff) > (block[i2 + 5] & 0xff)) {
                    continue HAMMER;
                  }
 else {
                    break HAMMER;
                  }
                }
 else                 if ((block[i1 + 4] & 0xff) > (block[i2 + 4] & 0xff)) {
                  continue HAMMER;
                }
 else {
                  break HAMMER;
                }
              }
 else               if ((block[i1 + 3] & 0xff) > (block[i2 + 3] & 0xff)) {
                continue HAMMER;
              }
 else {
                break HAMMER;
              }
            }
 else             if ((block[i1 + 2] & 0xff) > (block[i2 + 2] & 0xff)) {
              continue HAMMER;
            }
 else {
              break HAMMER;
            }
          }
 else           if ((block[i1 + 1] & 0xff) > (block[i2 + 1] & 0xff)) {
            continue HAMMER;
          }
 else {
            break HAMMER;
          }
        }
        fmap[j]=v;
      }
      if (firstAttemptShadow && (i <= hi) && (workDoneShadow > workLimitShadow)) {
        break HP;
      }
    }
  }
  this.workDone=workDoneShadow;
  return firstAttemptShadow && (workDoneShadow > workLimitShadow);
}
