{
  client.admin().indices().prepareDelete().execute().actionGet();
  client.admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards",numberOfShards)).addMapping("type1",jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("nested1").field("type","nested").startObject("properties").startObject("nested2").field("type","nested").endObject().endObject().endObject().endObject().endObject().endObject()).execute().actionGet();
  client.admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();
  client.prepareIndex("test","type1","1").setSource(jsonBuilder().startObject().field("field","value").startArray("nested1").startObject().field("field1_1","1").startArray("nested2").startObject().field("field2_1","blue").field("field2_2",5).endObject().startObject().field("field2_1","yellow").field("field2_2",3).endObject().endArray().endObject().startObject().field("field1_1","4").startArray("nested2").startObject().field("field2_1","green").field("field2_2",6).endObject().startObject().field("field2_1","blue").field("field2_2",1).endObject().endArray().endObject().endArray().endObject()).execute().actionGet();
  client.prepareIndex("test","type1","2").setSource(jsonBuilder().startObject().field("field","value").startArray("nested1").startObject().field("field1_1","2").startArray("nested2").startObject().field("field2_1","yellow").field("field2_2",10).endObject().startObject().field("field2_1","green").field("field2_2",8).endObject().endArray().endObject().startObject().field("field1_1","1").startArray("nested2").startObject().field("field2_1","blue").field("field2_2",2).endObject().startObject().field("field2_1","red").field("field2_2",12).endObject().endArray().endObject().endArray().endObject()).execute().actionGet();
  client.admin().indices().prepareRefresh().execute().actionGet();
  SearchResponse searchResponse=client.prepareSearch("test").setQuery(matchAllQuery()).addFacet(FacetBuilders.termsStatsFacet("facet1").keyField("nested1.nested2.field2_1").valueField("nested1.nested2.field2_2").nested("nested1.nested2")).execute().actionGet();
  assertThat(Arrays.toString(searchResponse.shardFailures()),searchResponse.failedShards(),equalTo(0));
  assertThat(searchResponse.hits().totalHits(),equalTo(2l));
  TermsStatsFacet termsStatsFacet=searchResponse.facets().facet("facet1");
  assertThat(termsStatsFacet.entries().size(),equalTo(4));
  assertThat(termsStatsFacet.entries().get(0).term().string(),equalTo("blue"));
  assertThat(termsStatsFacet.entries().get(0).count(),equalTo(3l));
  assertThat(termsStatsFacet.entries().get(0).total(),equalTo(8d));
  assertThat(termsStatsFacet.entries().get(1).term().string(),equalTo("yellow"));
  assertThat(termsStatsFacet.entries().get(1).count(),equalTo(2l));
  assertThat(termsStatsFacet.entries().get(1).total(),equalTo(13d));
  assertThat(termsStatsFacet.entries().get(2).term().string(),equalTo("green"));
  assertThat(termsStatsFacet.entries().get(2).count(),equalTo(2l));
  assertThat(termsStatsFacet.entries().get(2).total(),equalTo(14d));
  assertThat(termsStatsFacet.entries().get(3).term().string(),equalTo("red"));
  assertThat(termsStatsFacet.entries().get(3).count(),equalTo(1l));
  assertThat(termsStatsFacet.entries().get(3).total(),equalTo(12d));
  searchResponse=client.prepareSearch("test").setQuery(nestedQuery("nested1.nested2",termQuery("nested1.nested2.field2_1","blue")).scope("my")).addFacet(FacetBuilders.termsStatsFacet("facet1").keyField("nested1.nested2.field2_1").valueField("nested1.nested2.field2_2").scope("my")).execute().actionGet();
  assertThat(Arrays.toString(searchResponse.shardFailures()),searchResponse.failedShards(),equalTo(0));
  assertThat(searchResponse.hits().totalHits(),equalTo(2l));
  termsStatsFacet=searchResponse.facets().facet("facet1");
  assertThat(termsStatsFacet.entries().size(),equalTo(1));
  assertThat(termsStatsFacet.entries().get(0).term().string(),equalTo("blue"));
  assertThat(termsStatsFacet.entries().get(0).count(),equalTo(3l));
  assertThat(termsStatsFacet.entries().get(0).total(),equalTo(8d));
}
