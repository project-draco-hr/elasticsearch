{
  org.apache.thrift.protocol.TField field;
  iprot.readStructBegin();
  while (true) {
    field=iprot.readFieldBegin();
    if (field.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (field.id) {
case 1:
      if (field.type == org.apache.thrift.protocol.TType.I32) {
        this.status=Status.findByValue(iprot.readI32());
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
      }
    break;
case 2:
  if (field.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map10=iprot.readMapBegin();
      this.headers=new HashMap<String,String>(2 * _map10.size);
      for (int _i11=0; _i11 < _map10.size; ++_i11) {
        String _key12;
        String _val13;
        _key12=iprot.readString();
        _val13=iprot.readString();
        this.headers.put(_key12,_val13);
      }
      iprot.readMapEnd();
    }
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
  }
break;
case 3:
if (field.type == org.apache.thrift.protocol.TType.STRING) {
this.body=iprot.readBinary();
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
validate();
}
