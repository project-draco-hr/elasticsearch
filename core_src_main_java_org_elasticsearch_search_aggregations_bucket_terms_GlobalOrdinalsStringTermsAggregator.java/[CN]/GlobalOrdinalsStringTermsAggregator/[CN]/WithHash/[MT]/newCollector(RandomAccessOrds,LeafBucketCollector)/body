{
  final SortedDocValues singleValues=DocValues.unwrapSingleton(ords);
  if (singleValues != null) {
    return new LeafBucketCollectorBase(sub,ords){
      @Override public void collect(      int doc,      long bucket) throws IOException {
        final int globalOrd=singleValues.getOrd(doc);
        if (globalOrd >= 0) {
          long bucketOrd=bucketOrds.add(globalOrd);
          if (bucketOrd < 0) {
            bucketOrd=-1 - bucketOrd;
            collectExistingBucket(sub,doc,bucketOrd);
          }
 else {
            collectBucket(sub,doc,bucketOrd);
          }
        }
      }
    }
;
  }
 else {
    return new LeafBucketCollectorBase(sub,ords){
      @Override public void collect(      int doc,      long bucket) throws IOException {
        ords.setDocument(doc);
        final int numOrds=ords.cardinality();
        for (int i=0; i < numOrds; i++) {
          final long globalOrd=ords.ordAt(i);
          long bucketOrd=bucketOrds.add(globalOrd);
          if (bucketOrd < 0) {
            bucketOrd=-1 - bucketOrd;
            collectExistingBucket(sub,doc,bucketOrd);
          }
 else {
            collectBucket(sub,doc,bucketOrd);
          }
        }
      }
    }
;
  }
}
