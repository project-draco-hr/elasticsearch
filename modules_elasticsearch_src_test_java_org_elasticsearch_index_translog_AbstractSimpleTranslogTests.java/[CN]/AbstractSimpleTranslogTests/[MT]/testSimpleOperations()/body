{
  Translog.Snapshot snapshot=translog.snapshot();
  assertThat(snapshot,translogSize(0));
  snapshot.release();
  translog.add(new Translog.Create("test","1",new byte[]{1}));
  snapshot=translog.snapshot();
  assertThat(snapshot,translogSize(1));
  snapshot.release();
  translog.add(new Translog.Index("test","2",new byte[]{2}));
  snapshot=translog.snapshot();
  assertThat(snapshot,translogSize(2));
  snapshot.release();
  translog.add(new Translog.Delete(newUid("3")));
  snapshot=translog.snapshot();
  assertThat(snapshot,translogSize(3));
  snapshot.release();
  translog.add(new Translog.DeleteByQuery(new byte[]{4},null));
  snapshot=translog.snapshot();
  assertThat(snapshot,translogSize(4));
  snapshot.release();
  snapshot=translog.snapshot();
  Iterator<Translog.Operation> it=snapshot.iterator();
  Translog.Create create=(Translog.Create)it.next();
  assertThat(create.source(),equalTo(new byte[]{1}));
  Translog.Index index=(Translog.Index)it.next();
  assertThat(index.source(),equalTo(new byte[]{2}));
  Translog.Delete delete=(Translog.Delete)it.next();
  assertThat(delete.uid(),equalTo(newUid("3")));
  Translog.DeleteByQuery deleteByQuery=(Translog.DeleteByQuery)it.next();
  assertThat(deleteByQuery.source(),equalTo(new byte[]{4}));
  snapshot.release();
  long firstId=translog.currentId();
  translog.newTranslog();
  assertThat(translog.currentId(),Matchers.not(equalTo(firstId)));
  snapshot=translog.snapshot();
  assertThat(snapshot,translogSize(0));
  snapshot.release();
}
