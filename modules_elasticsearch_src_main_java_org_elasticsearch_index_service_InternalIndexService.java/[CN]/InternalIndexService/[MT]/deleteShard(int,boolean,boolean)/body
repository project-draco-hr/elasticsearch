{
  Map<Integer,Injector> tmpShardInjectors=newHashMap(shardsInjectors);
  Injector shardInjector=tmpShardInjectors.remove(shardId);
  if (shardInjector == null) {
    if (!delete) {
      return;
    }
    throw new IndexShardMissingException(new ShardId(index,shardId));
  }
  shardsInjectors=ImmutableMap.copyOf(tmpShardInjectors);
  if (delete) {
    logger.debug("deleting shard_id [{}]",shardId);
  }
  Map<Integer,IndexShard> tmpShardsMap=newHashMap(shards);
  IndexShard indexShard=tmpShardsMap.remove(shardId);
  shards=ImmutableMap.copyOf(tmpShardsMap);
  indicesLifecycle.beforeIndexShardClosed(indexShard,delete);
  for (  Class<? extends CloseableIndexComponent> closeable : pluginsService.shardServices()) {
    shardInjector.getInstance(closeable).close(delete);
  }
  shardInjector.getInstance(IndexShardManagement.class).close();
  RecoveryAction recoveryAction=shardInjector.getInstance(RecoveryAction.class);
  if (recoveryAction != null)   recoveryAction.close();
  shardInjector.getInstance(IndexShardGatewayService.class).close(deleteGateway);
  indexShard.close();
  Engine engine=shardInjector.getInstance(Engine.class);
  engine.close();
  indicesLifecycle.afterIndexShardClosed(indexShard.shardId(),delete);
  Store store=shardInjector.getInstance(Store.class);
  if (delete || indexGateway.type().equals(NoneGateway.TYPE) || !indexStore.persistent()) {
    try {
      store.fullDelete();
    }
 catch (    IOException e) {
      logger.warn("failed to clean store on shard deletion",e);
    }
  }
  try {
    store.close();
  }
 catch (  IOException e) {
    logger.warn("failed to close store on shard deletion",e);
  }
  Injectors.close(injector);
}
