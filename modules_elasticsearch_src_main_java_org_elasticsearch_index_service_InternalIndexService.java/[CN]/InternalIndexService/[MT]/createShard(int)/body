{
  ShardId shardId=new ShardId(index,sShardId);
  if (shardsInjectors.containsKey(shardId.id())) {
    throw new IndexShardAlreadyExistsException(shardId + " already exists");
  }
  indicesLifecycle.beforeIndexShardCreated(shardId);
  logger.debug("Creating Shard Id [{}]",shardId.id());
  Injector shardInjector=injector.createChildInjector(new ShardsPluginsModule(indexSettings,pluginsService),new IndexShardModule(shardId),new StoreModule(indexSettings),new DeletionPolicyModule(indexSettings),new MergePolicyModule(indexSettings),new MergeSchedulerModule(indexSettings),new TranslogModule(indexSettings),new EngineModule(indexSettings),new IndexShardGatewayModule(injector.getInstance(IndexGateway.class)));
  shardsInjectors=newMapBuilder(shardsInjectors).put(shardId.id(),shardInjector).immutableMap();
  IndexShard indexShard=shardInjector.getInstance(IndexShard.class);
  Store store=shardInjector.getInstance(Store.class);
  try {
    store.deleteContent();
  }
 catch (  IOException e) {
    logger.warn("Failed to clean store on shard creation",e);
  }
  indicesLifecycle.afterIndexShardCreated(indexShard);
  shards=newMapBuilder(shards).put(shardId.id(),indexShard).immutableMap();
  return indexShard;
}
