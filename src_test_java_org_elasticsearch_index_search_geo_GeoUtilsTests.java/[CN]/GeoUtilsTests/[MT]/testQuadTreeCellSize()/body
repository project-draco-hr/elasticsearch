{
  double equatorialDistance=2 * Math.PI * 6378137.0;
  double polarDistance=Math.PI * 6356752.314245;
  assertThat(GeoUtils.quadTreeCellSize(0),equalTo(Math.sqrt(Math.pow(polarDistance,2) + Math.pow(equatorialDistance,2))));
  assertThat(GeoUtils.quadTreeCellSize(1),equalTo(Math.sqrt(Math.pow(polarDistance / 2,2) + Math.pow(equatorialDistance / 2,2))));
  assertThat(GeoUtils.quadTreeCellSize(2),equalTo(Math.sqrt(Math.pow(polarDistance / 4,2) + Math.pow(equatorialDistance / 4,2))));
  assertThat(GeoUtils.quadTreeCellSize(3),equalTo(Math.sqrt(Math.pow(polarDistance / 8,2) + Math.pow(equatorialDistance / 8,2))));
  assertThat(GeoUtils.quadTreeCellSize(4),equalTo(Math.sqrt(Math.pow(polarDistance / 16,2) + Math.pow(equatorialDistance / 16,2))));
  assertThat(GeoUtils.quadTreeCellSize(5),equalTo(Math.sqrt(Math.pow(polarDistance / 32,2) + Math.pow(equatorialDistance / 32,2))));
  assertThat(GeoUtils.quadTreeCellSize(6),equalTo(Math.sqrt(Math.pow(polarDistance / 64,2) + Math.pow(equatorialDistance / 64,2))));
  assertThat(GeoUtils.quadTreeCellSize(7),equalTo(Math.sqrt(Math.pow(polarDistance / 128,2) + Math.pow(equatorialDistance / 128,2))));
  assertThat(GeoUtils.quadTreeCellSize(8),equalTo(Math.sqrt(Math.pow(polarDistance / 256,2) + Math.pow(equatorialDistance / 256,2))));
  assertThat(GeoUtils.quadTreeCellSize(9),equalTo(Math.sqrt(Math.pow(polarDistance / 512,2) + Math.pow(equatorialDistance / 512,2))));
  assertThat(GeoUtils.quadTreeCellSize(10),equalTo(Math.sqrt(Math.pow(polarDistance / 1024,2) + Math.pow(equatorialDistance / 1024,2))));
  assertThat(GeoUtils.quadTreeCellSize(11),equalTo(Math.sqrt(Math.pow(polarDistance / 2048,2) + Math.pow(equatorialDistance / 2048,2))));
  assertThat(GeoUtils.quadTreeCellSize(12),equalTo(Math.sqrt(Math.pow(polarDistance / 4096,2) + Math.pow(equatorialDistance / 4096,2))));
}
