{
  ObjectNode attachmentNode=(ObjectNode)node;
  JsonAttachmentMapper.Builder builder=new JsonAttachmentMapper.Builder(name);
  for (Iterator<Map.Entry<String,JsonNode>> fieldsIt=attachmentNode.getFields(); fieldsIt.hasNext(); ) {
    Map.Entry<String,JsonNode> entry=fieldsIt.next();
    String fieldName=entry.getKey();
    JsonNode fieldNode=entry.getValue();
    if (fieldName.equals("path")) {
      builder.pathType(parsePathType(name,fieldNode.getValueAsText()));
    }
 else     if (fieldName.equals("fields")) {
      ObjectNode fieldsNode=(ObjectNode)fieldNode;
      for (Iterator<Map.Entry<String,JsonNode>> propsIt=fieldsNode.getFields(); propsIt.hasNext(); ) {
        Map.Entry<String,JsonNode> entry1=propsIt.next();
        String propName=entry1.getKey();
        JsonNode propNode=entry1.getValue();
        if (name.equals(propName)) {
          builder.content((JsonStringFieldMapper.Builder)parserContext.typeParser("string").parse(name,propNode,parserContext));
        }
 else         if ("date".equals(propName)) {
          builder.date((JsonDateFieldMapper.Builder)parserContext.typeParser("date").parse("date",propNode,parserContext));
        }
 else         if ("title".equals(propName)) {
          builder.title((JsonStringFieldMapper.Builder)parserContext.typeParser("string").parse("title",propNode,parserContext));
        }
 else         if ("author".equals(propName)) {
          builder.author((JsonStringFieldMapper.Builder)parserContext.typeParser("string").parse("author",propNode,parserContext));
        }
 else         if ("keywords".equals(propName)) {
          builder.keywords((JsonStringFieldMapper.Builder)parserContext.typeParser("string").parse("keywords",propNode,parserContext));
        }
      }
    }
  }
  return builder;
}
