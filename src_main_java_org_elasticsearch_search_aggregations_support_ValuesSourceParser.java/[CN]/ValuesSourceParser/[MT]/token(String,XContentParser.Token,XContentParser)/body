{
  if (token == XContentParser.Token.VALUE_STRING) {
    if ("field".equals(currentFieldName)) {
      input.field=parser.text();
    }
 else     if (formattable && "format".equals(currentFieldName)) {
      input.format=parser.text();
    }
 else     if (scriptable) {
      if ("script".equals(currentFieldName)) {
        input.script=parser.text();
        input.scriptType=ScriptService.ScriptType.INLINE;
      }
 else       if ("script_id".equals(currentFieldName)) {
        input.script=parser.text();
        input.scriptType=ScriptService.ScriptType.INDEXED;
      }
 else       if ("script_file".equals(currentFieldName)) {
        input.script=parser.text();
        input.scriptType=ScriptService.ScriptType.FILE;
      }
 else       if ("lang".equals(currentFieldName)) {
        input.lang=parser.text();
      }
 else       if ("value_type".equals(currentFieldName) || "valueType".equals(currentFieldName)) {
        input.valueType=ValueType.resolveForScript(parser.text());
        if (targetValueType != null && input.valueType.isNotA(targetValueType)) {
          throw new SearchParseException(context,aggType.name() + " aggregation [" + aggName+ "] was configured with an incompatible value type ["+ input.valueType+ "]. ["+ aggType+ "] aggregation can only work on value of type ["+ targetValueType+ "]");
        }
      }
 else {
        return false;
      }
      return true;
    }
 else {
      return false;
    }
    return true;
  }
  if (scriptable && token == XContentParser.Token.VALUE_BOOLEAN) {
    if ("script_values_unique".equals(currentFieldName) || "scriptValuesUnique".equals(currentFieldName)) {
      input.assumeUnique=parser.booleanValue();
    }
 else     if ("script_values_sorted".equals(currentFieldName) || "scriptValuesSorted".equals(currentFieldName)) {
      input.assumeSorted=parser.booleanValue();
    }
 else {
      return false;
    }
    return true;
  }
  if (scriptable && token == XContentParser.Token.START_OBJECT) {
    if ("params".equals(currentFieldName)) {
      input.params=parser.map();
      return true;
    }
    return false;
  }
  return false;
}
