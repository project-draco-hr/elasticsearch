{
  final int numShards=between(1,20);
  client().admin().indices().prepareCreate("test").setSettings(Settings.builder().put("index.number_of_shards",numShards).put("index.number_of_replicas",numberOfReplicas)).addMapping("type","loc","type=geo_point","test","type=text").execute().actionGet();
  ensureGreen();
  List<IndexRequestBuilder> indexBuilders=new ArrayList<>();
  final int numDocs=between(10,20);
  for (int i=0; i < numDocs; i++) {
    indexBuilders.add(client().prepareIndex("test","type",Integer.toString(i)).setSource(jsonBuilder().startObject().field("test","value").startObject("loc").field("lat",11).field("lon",21).endObject().endObject()));
  }
  indexRandom(true,indexBuilders.toArray(new IndexRequestBuilder[indexBuilders.size()]));
  assertHitCount(client().prepareSearch().get(),(numDocs));
  final int numIters=scaledRandomIntBetween(5,20);
  for (int i=0; i < numIters; i++) {
    final AtomicBoolean stop=new AtomicBoolean(false);
    final List<String> nonCriticalExceptions=new CopyOnWriteArrayList<>();
    Thread[] threads=new Thread[scaledRandomIntBetween(1,3)];
    for (int j=0; j < threads.length; j++) {
      threads[j]=new Thread(){
        @Override public void run(){
          try {
            while (!stop.get()) {
              SearchResponse sr=client().prepareSearch().setSize(numDocs).get();
              if (sr.getHits().totalHits() != numDocs) {
                if (sr.getTotalShards() != sr.getSuccessfulShards() && sr.getFailedShards() == 0) {
                  nonCriticalExceptions.add("Count is " + sr.getHits().totalHits() + " but "+ numDocs+ " was expected. "+ formatShardStatus(sr));
                }
 else {
                  assertHitCount(sr,numDocs);
                }
              }
              final SearchHits sh=sr.getHits();
              assertThat("Expected hits to be the same size the actual hits array",sh.getTotalHits(),equalTo((long)(sh.getHits().length)));
            }
          }
 catch (          SearchPhaseExecutionException ex) {
            if (numberOfReplicas == 1 || !ex.getMessage().contains("all shards failed")) {
              throw ex;
            }
          }
        }
      }
;
    }
    for (int j=0; j < threads.length; j++) {
      threads[j].start();
    }
    allowNodes("test",between(1,3));
    client().admin().cluster().prepareReroute().get();
    stop.set(true);
    for (int j=0; j < threads.length; j++) {
      threads[j].join();
    }
    ClusterHealthResponse resp=client().admin().cluster().prepareHealth().setWaitForYellowStatus().setWaitForRelocatingShards(0).setWaitForEvents(Priority.LANGUID).setTimeout("5m").get();
    assertNoTimeout(resp);
    if (!nonCriticalExceptions.isEmpty()) {
      logger.info("non-critical exceptions: {}",nonCriticalExceptions);
      for (int j=0; j < 10; j++) {
        assertHitCount(client().prepareSearch().get(),numDocs);
      }
    }
  }
}
