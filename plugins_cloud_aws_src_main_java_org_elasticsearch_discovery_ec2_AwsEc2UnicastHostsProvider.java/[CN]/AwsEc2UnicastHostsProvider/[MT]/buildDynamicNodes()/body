{
  List<DiscoveryNode> discoNodes=Lists.newArrayList();
  DescribeInstancesResult descInstances=client.describeInstances(new DescribeInstancesRequest());
  logger.trace("building dynamic unicast discovery nodes...");
  for (  Reservation reservation : descInstances.getReservations()) {
    if (!groups.isEmpty()) {
      List<String> groupNames=reservation.getGroupNames();
      if (bindAnyGroup) {
        if (Collections.disjoint(groups,groupNames)) {
          logger.trace("filtering out reservation {} based on groups {}, not part of {}",reservation.getReservationId(),groupNames,groups);
          continue;
        }
      }
 else {
        if (!groupNames.containsAll(groups)) {
          logger.trace("filtering out reservation {} based on groups {}, does not include all of {}",reservation.getReservationId(),groupNames,groups);
          continue;
        }
      }
    }
    for (    Instance instance : reservation.getInstances()) {
      if (!availabilityZones.isEmpty()) {
        if (!availabilityZones.contains(instance.getPlacement().getAvailabilityZone())) {
          logger.trace("filtering out instance {} based on availability_zone {}, not part of {}",instance.getInstanceId(),instance.getPlacement().getAvailabilityZone(),availabilityZones);
          continue;
        }
      }
      boolean filterByTag=false;
      if (!tags.isEmpty()) {
        if (instance.getTags() == null) {
          filterByTag=true;
        }
 else {
          for (          Map.Entry<String,String> entry : tags.entrySet()) {
            boolean found=false;
            for (            Tag tag : instance.getTags()) {
              if (entry.getKey().equals(tag.getKey()) && entry.getValue().equals(tag.getValue())) {
                found=true;
                break;
              }
            }
            if (!found) {
              filterByTag=true;
              break;
            }
          }
        }
      }
      if (filterByTag) {
        logger.trace("filtering out instance {} based tags {}, not part of {}",instance.getInstanceId(),tags,instance.getTags());
        continue;
      }
      InstanceState state=instance.getState();
      if (state.getName().equalsIgnoreCase("pending") || state.getName().equalsIgnoreCase("running")) {
        String address=null;
switch (hostType) {
case PRIVATE_DNS:
          address=instance.getPrivateDnsName();
        break;
case PRIVATE_IP:
      address=instance.getPrivateIpAddress();
    break;
case PUBLIC_DNS:
  address=instance.getPublicDnsName();
break;
case PUBLIC_IP:
address=instance.getPublicDnsName();
break;
}
for (int port : new PortsRange(ports).ports()) {
if (address != null) {
logger.trace("adding {}, address {}",instance.getInstanceId(),address);
discoNodes.add(new DiscoveryNode("#cloud-" + instance.getInstanceId() + "-"+ port,new InetSocketTransportAddress(address,port)));
}
 else {
logger.trace("not adding {}, address is null, host_type {}",instance.getInstanceId(),hostType);
}
}
}
}
}
logger.debug("using dynamic discovery nodes {}",discoNodes);
return discoNodes;
}
