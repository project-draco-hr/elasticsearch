{
  Settings.Builder settings=settingsBuilder();
  settings.put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE,ClusterRebalanceAllocationDecider.ClusterRebalanceType.ALWAYS.toString()).put("cluster.routing.allocation.node_concurrent_recoveries",100).put("cluster.routing.allocation.node_initial_primaries_recoveries",100);
  AllocationService service=createAllocationService(settings.build());
  ClusterState clusterState=initCluster(service,1,3,3,1);
  assertThat(clusterState.getRoutingNodes().node("node0").shardsWithState(STARTED).size(),Matchers.equalTo(9));
  assertThat(clusterState.getRoutingNodes().unassigned().size(),Matchers.equalTo(9));
  int nodeOffset=1;
  clusterState=addNodes(clusterState,service,1,nodeOffset++);
  assertThat(clusterState.getRoutingNodes().node("node0").shardsWithState(STARTED).size(),Matchers.equalTo(9));
  assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(STARTED).size(),Matchers.equalTo(9));
  assertThat(clusterState.getRoutingNodes().unassigned().size(),Matchers.equalTo(0));
  assertNumIndexShardsPerNode(clusterState,Matchers.equalTo(3));
  logger.info("now, start one more node, check that rebalancing will happen because we set it to always");
  DiscoveryNodes.Builder nodes=DiscoveryNodes.builder(clusterState.nodes());
  nodes.put(newNode("node2"));
  clusterState=ClusterState.builder(clusterState).nodes(nodes.build()).build();
  RoutingTable routingTable=service.reroute(clusterState).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  RoutingNodes routingNodes=clusterState.getRoutingNodes();
  assertThat(clusterState.getRoutingNodes().node("node2").shardsWithState(INITIALIZING).size(),Matchers.equalTo(2));
  assertThat(clusterState.getRoutingNodes().node("node0").shardsWithState(INITIALIZING).size(),Matchers.equalTo(0));
  assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(INITIALIZING).size(),Matchers.equalTo(0));
  RoutingTable prev=routingTable;
  routingTable=service.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  routingNodes=clusterState.getRoutingNodes();
  assertThat(prev,Matchers.not(Matchers.sameInstance(routingTable)));
  assertThat(clusterState.getRoutingNodes().node("node2").shardsWithState(STARTED).size(),Matchers.equalTo(2));
  assertThat(clusterState.getRoutingNodes().node("node2").shardsWithState(INITIALIZING).size(),Matchers.equalTo(2));
  assertThat(clusterState.getRoutingNodes().node("node0").shardsWithState(INITIALIZING).size(),Matchers.equalTo(0));
  assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(INITIALIZING).size(),Matchers.equalTo(0));
  assertThat(prev,Matchers.not(Matchers.sameInstance(routingTable)));
  prev=routingTable;
  routingTable=service.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  routingNodes=clusterState.getRoutingNodes();
  assertThat(clusterState.getRoutingNodes().node("node2").shardsWithState(STARTED).size(),Matchers.equalTo(4));
  assertThat(clusterState.getRoutingNodes().node("node2").shardsWithState(INITIALIZING).size(),Matchers.equalTo(2));
  assertThat(clusterState.getRoutingNodes().node("node0").shardsWithState(INITIALIZING).size(),Matchers.equalTo(0));
  assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(INITIALIZING).size(),Matchers.equalTo(0));
  assertThat(prev,Matchers.not(Matchers.sameInstance(routingTable)));
  prev=routingTable;
  routingTable=service.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  routingNodes=clusterState.getRoutingNodes();
  assertThat(clusterState.getRoutingNodes().node("node2").shardsWithState(STARTED).size(),Matchers.equalTo(6));
  assertThat(clusterState.getRoutingNodes().node("node2").shardsWithState(INITIALIZING).size(),Matchers.equalTo(0));
  assertThat(clusterState.getRoutingNodes().node("node0").shardsWithState(INITIALIZING).size(),Matchers.equalTo(0));
  assertThat(clusterState.getRoutingNodes().node("node1").shardsWithState(INITIALIZING).size(),Matchers.equalTo(0));
  assertThat(prev,Matchers.not(Matchers.sameInstance(routingTable)));
  prev=routingTable;
  routingTable=service.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  routingNodes=clusterState.getRoutingNodes();
  assertThat(prev,Matchers.sameInstance(routingTable));
  assertNumIndexShardsPerNode(clusterState,Matchers.equalTo(2));
  logger.debug("ClusterState: {}",clusterState.getRoutingNodes().prettyPrint());
}
