{
  logger.info("Removing [{}] nodes",numNodes);
  DiscoveryNodes.Builder nodes=DiscoveryNodes.builder(clusterState.nodes());
  ArrayList<DiscoveryNode> discoveryNodes=CollectionUtils.iterableAsArrayList(clusterState.nodes());
  Collections.shuffle(discoveryNodes,random());
  for (  DiscoveryNode node : discoveryNodes) {
    nodes.remove(node.getId());
    numNodes--;
    if (numNodes <= 0) {
      break;
    }
  }
  clusterState=ClusterState.builder(clusterState).nodes(nodes.build()).build();
  clusterState=service.deassociateDeadNodes(clusterState,true,"reroute");
  logger.info("start all the primary shards, replicas will start initializing");
  RoutingNodes routingNodes=clusterState.getRoutingNodes();
  clusterState=service.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  logger.info("start the replica shards");
  routingNodes=clusterState.getRoutingNodes();
  clusterState=service.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  logger.info("rebalancing");
  clusterState=service.reroute(clusterState,"reroute");
  logger.info("complete rebalancing");
  clusterState=applyStartedShardsUntilNoChange(clusterState,service);
  return clusterState;
}
