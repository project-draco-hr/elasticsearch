{
  prepareCreate("empty_bucket_idx").addMapping("type","value","type=integer").execute().actionGet();
  List<IndexRequestBuilder> builders=new ArrayList<>();
  for (int i=0; i < 2; i++) {
    builders.add(client().prepareIndex("empty_bucket_idx","type","" + i).setSource(jsonBuilder().startObject().field("value",i * 2).endObject()));
  }
  indexRandom(true,builders.toArray(new IndexRequestBuilder[builders.size()]));
  SearchResponse searchResponse=client().prepareSearch("empty_bucket_idx").setQuery(matchAllQuery()).addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0).subAggregation(dateRange("date_range").addRange("0-1",0,1))).execute().actionGet();
  assertThat(searchResponse.getHits().getTotalHits(),equalTo(2l));
  Histogram histo=searchResponse.getAggregations().get("histo");
  assertThat(histo,Matchers.notNullValue());
  Histogram.Bucket bucket=histo.getBucketByKey(1l);
  assertThat(bucket,Matchers.notNullValue());
  DateRange dateRange=bucket.getAggregations().get("date_range");
  List<DateRange.Bucket> buckets=new ArrayList<>(dateRange.getBuckets());
  assertThat(dateRange,Matchers.notNullValue());
  assertThat(dateRange.getName(),equalTo("date_range"));
  assertThat(buckets.size(),is(1));
  assertThat(buckets.get(0).getKey(),equalTo("0-1"));
  assertThat(buckets.get(0).getFrom().doubleValue(),equalTo(0.0));
  assertThat(buckets.get(0).getTo().doubleValue(),equalTo(1.0));
  assertThat(buckets.get(0).getDocCount(),equalTo(0l));
  assertThat(buckets.get(0).getAggregations().asList().isEmpty(),is(true));
}
