{
  DateRangeBuilder rangeBuilder=dateRange("range");
  if (randomBoolean()) {
    rangeBuilder.field("date");
  }
 else {
    rangeBuilder.script("doc['date'].value");
  }
  SearchResponse response=client().prepareSearch("idx").addAggregation(rangeBuilder.addUnboundedTo("a long time ago","now-50y").addRange("recently","now-50y","now-1y").addUnboundedFrom("last year","now-1y")).execute().actionGet();
  assertSearchResponse(response);
  Range range=response.getAggregations().get("range");
  assertThat(range,notNullValue());
  assertThat(range.getName(),equalTo("range"));
  assertThat(range.getBuckets().size(),equalTo(3));
  List<Range.Bucket> buckets=new ArrayList<>(range.getBuckets());
  Range.Bucket bucket=buckets.get(0);
  assertThat((String)bucket.getKey(),equalTo("a long time ago"));
  assertThat(bucket.getKeyAsString(),equalTo("a long time ago"));
  assertThat(bucket.getDocCount(),equalTo(0L));
  bucket=buckets.get(1);
  assertThat((String)bucket.getKey(),equalTo("recently"));
  assertThat(bucket.getKeyAsString(),equalTo("recently"));
  assertThat(bucket.getDocCount(),equalTo((long)numDocs));
  bucket=buckets.get(2);
  assertThat((String)bucket.getKey(),equalTo("last year"));
  assertThat(bucket.getKeyAsString(),equalTo("last year"));
  assertThat(bucket.getDocCount(),equalTo(0L));
}
