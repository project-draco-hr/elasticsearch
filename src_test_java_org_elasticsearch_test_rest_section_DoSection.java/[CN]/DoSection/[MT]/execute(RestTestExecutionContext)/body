{
  try {
    executionContext.callApi(apiCallSection.getApi(),apiCallSection.getParams(),apiCallSection.getBody());
  }
 catch (  RestException e) {
    if (!Strings.hasLength(catchParam)) {
      fail(formatStatusCodeMessage(e.restResponse(),"2xx"));
    }
    if ("param".equals(catchParam)) {
      logger.info("found [catch: param], no request sent");
    }
 else     if ("missing".equals(catchParam)) {
      assertThat(formatStatusCodeMessage(e.restResponse(),"404"),e.statusCode(),equalTo(404));
    }
 else     if ("conflict".equals(catchParam)) {
      assertThat(formatStatusCodeMessage(e.restResponse(),"409"),e.statusCode(),equalTo(409));
    }
 else     if ("forbidden".equals(catchParam)) {
      assertThat(formatStatusCodeMessage(e.restResponse(),"403"),e.statusCode(),equalTo(403));
    }
 else     if ("request".equals(catchParam)) {
      assertThat(formatStatusCodeMessage(e.restResponse(),"4xx|5xx"),e.statusCode(),greaterThanOrEqualTo(400));
    }
 else     if (catchParam.startsWith("/") && catchParam.endsWith("/")) {
      assertThat(formatStatusCodeMessage(e.restResponse(),"4xx|5xx"),e.statusCode(),greaterThanOrEqualTo(400));
      Object error=executionContext.response("error");
      assertThat("error was expected in the response",error,notNullValue());
      String regex=catchParam.substring(1,catchParam.length() - 1);
      String errorMessage=error.toString();
      Matcher matcher=Pattern.compile(regex).matcher(errorMessage);
      assertThat("error message [" + errorMessage + "] was expected to match ["+ catchParam+ "] but didn't",matcher.find(),equalTo(true));
    }
 else {
      throw new UnsupportedOperationException("catch value [" + catchParam + "] not supported");
    }
  }
}
