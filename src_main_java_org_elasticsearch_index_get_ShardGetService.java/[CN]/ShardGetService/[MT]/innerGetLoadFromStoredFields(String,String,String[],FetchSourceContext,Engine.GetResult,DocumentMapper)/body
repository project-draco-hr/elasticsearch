{
  Map<String,GetField> fields=null;
  BytesReference source=null;
  Versions.DocIdAndVersion docIdAndVersion=get.docIdAndVersion();
  FieldsVisitor fieldVisitor=buildFieldsVisitors(gFields,fetchSourceContext);
  if (fieldVisitor != null) {
    try {
      docIdAndVersion.context.reader().document(docIdAndVersion.docId,fieldVisitor);
    }
 catch (    IOException e) {
      throw new ElasticsearchException("Failed to get type [" + type + "] and id ["+ id+ "]",e);
    }
    source=fieldVisitor.source();
    if (!fieldVisitor.fields().isEmpty()) {
      fieldVisitor.postProcess(docMapper);
      fields=new HashMap<>(fieldVisitor.fields().size());
      for (      Map.Entry<String,List<Object>> entry : fieldVisitor.fields().entrySet()) {
        fields.put(entry.getKey(),new GetField(entry.getKey(),entry.getValue()));
      }
    }
  }
  if (gFields != null && gFields.length > 0) {
    SearchLookup searchLookup=null;
    for (    String field : gFields) {
      Object value=null;
      FieldMappers x=docMapper.mappers().smartName(field);
      if (x == null) {
        if (docMapper.objectMappers().get(field) != null) {
          throw new ElasticsearchIllegalArgumentException("field [" + field + "] isn't a leaf field");
        }
      }
 else       if (!x.mapper().fieldType().stored()) {
        if (searchLookup == null) {
          searchLookup=new SearchLookup(mapperService,fieldDataService,new String[]{type});
          searchLookup.setNextReader(docIdAndVersion.context);
          searchLookup.source().setNextSource(source);
          searchLookup.setNextDocId(docIdAndVersion.docId);
        }
        List<Object> values=searchLookup.source().extractRawValues(field);
        if (!values.isEmpty()) {
          for (int i=0; i < values.size(); i++) {
            values.set(i,x.mapper().valueForSearch(values.get(i)));
          }
          value=values;
        }
      }
      if (value != null) {
        if (fields == null) {
          fields=newHashMapWithExpectedSize(2);
        }
        if (value instanceof List) {
          fields.put(field,new GetField(field,(List)value));
        }
 else {
          fields.put(field,new GetField(field,ImmutableList.of(value)));
        }
      }
    }
  }
  if (!fetchSourceContext.fetchSource()) {
    source=null;
  }
 else   if (fetchSourceContext.includes().length > 0 || fetchSourceContext.excludes().length > 0) {
    Map<String,Object> filteredSource;
    XContentType sourceContentType=null;
    Tuple<XContentType,Map<String,Object>> typeMapTuple=XContentHelper.convertToMap(source,true);
    sourceContentType=typeMapTuple.v1();
    filteredSource=XContentMapValues.filter(typeMapTuple.v2(),fetchSourceContext.includes(),fetchSourceContext.excludes());
    try {
      source=XContentFactory.contentBuilder(sourceContentType).map(filteredSource).bytes();
    }
 catch (    IOException e) {
      throw new ElasticsearchException("Failed to get type [" + type + "] and id ["+ id+ "] with includes/excludes set",e);
    }
  }
  return new GetResult(shardId.index().name(),type,id,get.version(),get.exists(),source,fields);
}
