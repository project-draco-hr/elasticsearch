{
  Map<String,GetField> fields=null;
  BytesReference source=null;
  UidField.DocIdAndVersion docIdAndVersion=get.docIdAndVersion();
  FieldsVisitor fieldVisitor=buildFieldsVisitors(gFields);
  if (fieldVisitor != null) {
    try {
      docIdAndVersion.reader.reader().document(docIdAndVersion.docId,fieldVisitor);
    }
 catch (    IOException e) {
      throw new ElasticSearchException("Failed to get type [" + type + "] and id ["+ id+ "]",e);
    }
    source=fieldVisitor.source();
    if (fieldVisitor.fields() != null) {
      fieldVisitor.postProcess(docMapper);
      fields=new HashMap<String,GetField>(fieldVisitor.fields().size());
      for (      Map.Entry<String,List<Object>> entry : fieldVisitor.fields().entrySet()) {
        fields.put(entry.getKey(),new GetField(entry.getKey(),entry.getValue()));
      }
    }
  }
  if (gFields != null && gFields.length > 0) {
    SearchLookup searchLookup=null;
    for (    String field : gFields) {
      Object value=null;
      if (field.contains("_source.") || field.contains("doc[")) {
        if (searchLookup == null) {
          searchLookup=new SearchLookup(mapperService,indexCache.fieldData(),new String[]{type});
        }
        SearchScript searchScript=scriptService.search(searchLookup,"mvel",field,null);
        searchScript.setNextReader(docIdAndVersion.reader);
        searchScript.setNextDocId(docIdAndVersion.docId);
        try {
          value=searchScript.run();
        }
 catch (        RuntimeException e) {
          if (logger.isTraceEnabled()) {
            logger.trace("failed to execute get request script field [{}]",e,field);
          }
        }
      }
 else {
        FieldMappers x=docMapper.mappers().smartName(field);
        if (x == null || !x.mapper().fieldType().stored()) {
          if (searchLookup == null) {
            searchLookup=new SearchLookup(mapperService,indexCache.fieldData(),new String[]{type});
            searchLookup.setNextReader(docIdAndVersion.reader);
            searchLookup.setNextDocId(docIdAndVersion.docId);
          }
          value=searchLookup.source().extractValue(field);
        }
      }
      if (value != null) {
        if (fields == null) {
          fields=newHashMapWithExpectedSize(2);
        }
        GetField getField=fields.get(field);
        if (getField == null) {
          getField=new GetField(field,new ArrayList<Object>(2));
          fields.put(field,getField);
        }
        getField.values().add(value);
      }
    }
  }
  return new GetResult(shardId.index().name(),type,id,get.version(),get.exists(),source,fields);
}
