{
  final Settings pSettings=settingsBuilder().put(preparedSettings).put(Client.CLIENT_TYPE_SETTING,CLIENT_TYPE).build();
  Environment tmpEnv=InternalSettingsPreparer.prepareEnvironment(pSettings,null);
  Settings tmpSettings=TribeService.processSettings(tmpEnv.settings());
  ESLogger logger=Loggers.getLogger(Node.class,tmpSettings.get("name"));
  logger.info("version[{}], pid[{}], build[{}/{}]",version,JvmInfo.jvmInfo().pid(),Build.CURRENT.hashShort(),Build.CURRENT.timestamp());
  logger.info("initializing ...");
  if (logger.isDebugEnabled()) {
    logger.debug("using config [{}], data [{}], logs [{}], plugins [{}]",tmpEnv.configFile(),Arrays.toString(tmpEnv.dataFiles()),tmpEnv.logsFile(),tmpEnv.pluginsFile());
  }
  this.pluginsService=new PluginsService(tmpSettings,tmpEnv.pluginsFile(),classpathPlugins);
  this.settings=pluginsService.updatedSettings();
  this.environment=new Environment(this.settings());
  final NodeEnvironment nodeEnvironment;
  try {
    nodeEnvironment=new NodeEnvironment(this.settings,this.environment);
  }
 catch (  IOException ex) {
    throw new IllegalStateException("Failed to created node environment",ex);
  }
  final ThreadPool threadPool=new ThreadPool(settings);
  boolean success=false;
  try {
    ModulesBuilder modules=new ModulesBuilder();
    modules.add(new Version.Module(version));
    modules.add(new CircuitBreakerModule(settings));
    for (    Module pluginModule : pluginsService.nodeModules()) {
      modules.add(pluginModule);
    }
    modules.add(new PluginsModule(pluginsService));
    modules.add(new SettingsModule(this.settings));
    modules.add(new NodeModule(this));
    modules.add(new NetworkModule());
    modules.add(new ScriptModule(this.settings));
    modules.add(new EnvironmentModule(environment));
    modules.add(new NodeEnvironmentModule(nodeEnvironment));
    modules.add(new ClusterNameModule(this.settings));
    modules.add(new ThreadPoolModule(threadPool));
    modules.add(new DiscoveryModule(this.settings));
    modules.add(new ClusterModule(this.settings));
    modules.add(new RestModule(this.settings));
    modules.add(new TransportModule(settings));
    if (settings.getAsBoolean(HTTP_ENABLED,true)) {
      modules.add(new HttpServerModule(settings));
    }
    modules.add(new IndicesModule());
    modules.add(new SearchModule());
    modules.add(new ActionModule(false));
    modules.add(new MonitorModule(settings));
    modules.add(new GatewayModule(settings));
    modules.add(new NodeClientModule());
    modules.add(new PercolatorModule());
    modules.add(new ResourceWatcherModule());
    modules.add(new RepositoriesModule());
    modules.add(new TribeModule());
    pluginsService.processModules(modules);
    injector=modules.createInjector();
    client=injector.getInstance(Client.class);
    threadPool.setNodeSettingsService(injector.getInstance(NodeSettingsService.class));
    success=true;
  }
  finally {
    if (!success) {
      nodeEnvironment.close();
      ThreadPool.terminate(threadPool,10,TimeUnit.SECONDS);
    }
  }
  logger.info("initialized");
}
