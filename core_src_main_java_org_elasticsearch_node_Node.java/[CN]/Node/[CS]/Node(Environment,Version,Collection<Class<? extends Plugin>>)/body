{
  Settings tmpSettings=Settings.builder().put(tmpEnv.settings()).put(Client.CLIENT_TYPE_SETTING_S.getKey(),CLIENT_TYPE).build();
  tmpSettings=TribeService.processSettings(tmpSettings);
  ESLogger logger=Loggers.getLogger(Node.class,NODE_NAME_SETTING.get(tmpSettings));
  final String displayVersion=version + (Build.CURRENT.isSnapshot() ? "-SNAPSHOT" : "");
  final JvmInfo jvmInfo=JvmInfo.jvmInfo();
  logger.info("version[{}], pid[{}], build[{}/{}], OS[{}/{}/{}], JVM[{}/{}/{}/{}]",displayVersion,jvmInfo.pid(),Build.CURRENT.shortHash(),Build.CURRENT.date(),Constants.OS_NAME,Constants.OS_VERSION,Constants.OS_ARCH,Constants.JVM_VENDOR,Constants.JVM_NAME,Constants.JAVA_VERSION,Constants.JVM_VERSION);
  logger.info("initializing ...");
  if (logger.isDebugEnabled()) {
    logger.debug("using config [{}], data [{}], logs [{}], plugins [{}]",tmpEnv.configFile(),Arrays.toString(tmpEnv.dataFiles()),tmpEnv.logsFile(),tmpEnv.pluginsFile());
  }
  if (JsonXContent.unquotedFieldNamesSet) {
    DeprecationLogger dLogger=new DeprecationLogger(logger);
    dLogger.deprecated("[{}] has been set, but will be removed in Elasticsearch 6.0.0",JsonXContent.JSON_ALLOW_UNQUOTED_FIELD_NAMES);
  }
  this.pluginsService=new PluginsService(tmpSettings,tmpEnv.modulesFile(),tmpEnv.pluginsFile(),classpathPlugins);
  this.settings=pluginsService.updatedSettings();
  this.environment=new Environment(this.settings());
  final NodeEnvironment nodeEnvironment;
  try {
    nodeEnvironment=new NodeEnvironment(this.settings,this.environment);
  }
 catch (  IOException ex) {
    throw new IllegalStateException("Failed to created node environment",ex);
  }
  final NetworkService networkService=new NetworkService(settings);
  final ThreadPool threadPool=new ThreadPool(settings);
  NamedWriteableRegistry namedWriteableRegistry=new NamedWriteableRegistry();
  boolean success=false;
  try {
    final MonitorService monitorService=new MonitorService(settings,nodeEnvironment,threadPool);
    ModulesBuilder modules=new ModulesBuilder();
    modules.add(new Version.Module(version));
    modules.add(new CircuitBreakerModule(settings));
    for (    Module pluginModule : pluginsService.nodeModules()) {
      modules.add(pluginModule);
    }
    modules.add(new PluginsModule(pluginsService));
    SettingsModule settingsModule=new SettingsModule(this.settings);
    modules.add(settingsModule);
    modules.add(new EnvironmentModule(environment));
    modules.add(new NodeModule(this,monitorService));
    modules.add(new NetworkModule(networkService,settings,false,namedWriteableRegistry));
    ScriptModule scriptModule=new ScriptModule();
    modules.add(scriptModule);
    modules.add(new NodeEnvironmentModule(nodeEnvironment));
    modules.add(new ClusterNameModule(this.settings));
    modules.add(new ThreadPoolModule(threadPool));
    modules.add(new DiscoveryModule(this.settings));
    modules.add(new ClusterModule(this.settings));
    modules.add(new IndicesModule());
    modules.add(new SearchModule(settings,namedWriteableRegistry));
    modules.add(new ActionModule(DiscoveryNode.isIngestNode(settings),false));
    modules.add(new GatewayModule(settings));
    modules.add(new NodeClientModule());
    modules.add(new ResourceWatcherModule());
    modules.add(new RepositoriesModule());
    modules.add(new TribeModule());
    modules.add(new AnalysisModule(environment));
    pluginsService.processModules(modules);
    scriptModule.prepareSettings(settingsModule);
    injector=modules.createInjector();
    client=injector.getInstance(Client.class);
    threadPool.setClusterSettings(injector.getInstance(ClusterSettings.class));
    success=true;
  }
 catch (  IOException ex) {
    throw new ElasticsearchException("failed to bind service",ex);
  }
 finally {
    if (!success) {
      nodeEnvironment.close();
      ThreadPool.terminate(threadPool,10,TimeUnit.SECONDS);
    }
  }
  logger.info("initialized");
}
