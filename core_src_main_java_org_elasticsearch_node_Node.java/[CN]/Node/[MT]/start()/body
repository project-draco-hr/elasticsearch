{
  if (!lifecycle.moveToStarted()) {
    return this;
  }
  ESLogger logger=Loggers.getLogger(Node.class,NODE_NAME_SETTING.get(settings));
  logger.info("starting ...");
  injector.getInstance(Discovery.class).setRoutingService(injector.getInstance(RoutingService.class));
  for (  Class<? extends LifecycleComponent> plugin : pluginsService.nodeServices()) {
    injector.getInstance(plugin).start();
  }
  injector.getInstance(MappingUpdatedAction.class).setClient(client);
  injector.getInstance(IndicesService.class).start();
  injector.getInstance(IndicesClusterStateService.class).start();
  injector.getInstance(IndicesTTLService.class).start();
  injector.getInstance(SnapshotsService.class).start();
  injector.getInstance(SnapshotShardsService.class).start();
  injector.getInstance(RoutingService.class).start();
  injector.getInstance(SearchService.class).start();
  injector.getInstance(MonitorService.class).start();
  injector.getInstance(RestController.class).start();
  injector.getInstance(GatewayAllocator.class).setReallocation(injector.getInstance(ClusterService.class),injector.getInstance(RoutingService.class));
  injector.getInstance(ResourceWatcherService.class).start();
  injector.getInstance(GatewayService.class).start();
  TransportService transportService=injector.getInstance(TransportService.class);
  transportService.start();
  injector.getInstance(ClusterService.class).start();
  DiscoveryService discoService=injector.getInstance(DiscoveryService.class).start();
  transportService.acceptIncomingRequests();
  discoService.joinClusterAndWaitForInitialState();
  if (settings.getAsBoolean("http.enabled",true)) {
    injector.getInstance(HttpServer.class).start();
  }
  injector.getInstance(TribeService.class).start();
  if (WRITE_PORTS_FIELD_SETTING.get(settings)) {
    if (settings.getAsBoolean("http.enabled",true)) {
      HttpServerTransport http=injector.getInstance(HttpServerTransport.class);
      writePortsFile("http",http.boundAddress());
    }
    TransportService transport=injector.getInstance(TransportService.class);
    writePortsFile("transport",transport.boundAddress());
  }
  logger.info("started");
  return this;
}
