{
  if (!lifecycle.moveToStopped()) {
    return this;
  }
  ESLogger logger=Loggers.getLogger(Node.class,NODE_NAME_SETTING.get(settings));
  logger.info("stopping ...");
  injector.getInstance(TribeService.class).stop();
  injector.getInstance(ResourceWatcherService.class).stop();
  if (NetworkModule.HTTP_ENABLED.get(settings)) {
    injector.getInstance(HttpServer.class).stop();
  }
  injector.getInstance(SnapshotsService.class).stop();
  injector.getInstance(SnapshotShardsService.class).stop();
  injector.getInstance(IndicesClusterStateService.class).stop();
  injector.getInstance(IndicesTTLService.class).stop();
  injector.getInstance(RoutingService.class).stop();
  injector.getInstance(ClusterService.class).stop();
  injector.getInstance(Discovery.class).stop();
  injector.getInstance(NodeConnectionsService.class).stop();
  injector.getInstance(MonitorService.class).stop();
  injector.getInstance(GatewayService.class).stop();
  injector.getInstance(SearchService.class).stop();
  injector.getInstance(RestController.class).stop();
  injector.getInstance(TransportService.class).stop();
  for (  Class<? extends LifecycleComponent> plugin : pluginsService.nodeServices()) {
    injector.getInstance(plugin).stop();
  }
  injector.getInstance(IndicesService.class).stop();
  logger.info("stopped");
  return this;
}
