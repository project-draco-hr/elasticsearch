{
  TransportRequestHandler handler=new TransportRequestHandler<StringMessageRequest>(){
    @Override public void messageReceived(    StringMessageRequest request,    TransportChannel channel) throws Exception {
      channel.sendResponse(new StringMessageResponse(""));
    }
  }
;
  TransportRequestHandler handlerWithError=new TransportRequestHandler<StringMessageRequest>(){
    @Override public void messageReceived(    StringMessageRequest request,    TransportChannel channel) throws Exception {
      if (request.timeout() > 0) {
        Thread.sleep(request.timeout);
      }
      channel.sendResponse(new RuntimeException(""));
    }
  }
;
  final Semaphore requestCompleted=new Semaphore(0);
  TransportResponseHandler noopResponseHandler=new BaseTransportResponseHandler<StringMessageResponse>(){
    @Override public StringMessageResponse newInstance(){
      return new StringMessageResponse();
    }
    @Override public void handleResponse(    StringMessageResponse response){
      requestCompleted.release();
    }
    @Override public void handleException(    TransportException exp){
      requestCompleted.release();
    }
    @Override public String executor(){
      return ThreadPool.Names.SAME;
    }
  }
;
  serviceA.registerRequestHandler("test",StringMessageRequest.class,ThreadPool.Names.SAME,handler);
  serviceA.registerRequestHandler("testError",StringMessageRequest.class,ThreadPool.Names.SAME,handlerWithError);
  serviceB.registerRequestHandler("test",StringMessageRequest.class,ThreadPool.Names.SAME,handler);
  serviceB.registerRequestHandler("testError",StringMessageRequest.class,ThreadPool.Names.SAME,handlerWithError);
  final Tracer tracer=new Tracer();
  serviceA.addTracer(tracer);
  serviceB.addTracer(tracer);
  tracer.reset(4);
  boolean timeout=randomBoolean();
  TransportRequestOptions options=timeout ? new TransportRequestOptions().withTimeout(1) : TransportRequestOptions.EMPTY;
  serviceA.sendRequest(nodeB,"test",new StringMessageRequest("",10),options,noopResponseHandler);
  requestCompleted.acquire();
  tracer.expectedEvents.get().await();
  assertThat("didn't see request sent",tracer.sawRequestSent,equalTo(true));
  assertThat("didn't see request received",tracer.sawRequestReceived,equalTo(true));
  assertThat("didn't see response sent",tracer.sawResponseSent,equalTo(true));
  assertThat("didn't see response received",tracer.sawResponseReceived,equalTo(true));
  assertThat("saw error sent",tracer.sawErrorSent,equalTo(false));
  tracer.reset(4);
  serviceA.sendRequest(nodeB,"testError",new StringMessageRequest(""),noopResponseHandler);
  requestCompleted.acquire();
  tracer.expectedEvents.get().await();
  assertThat("didn't see request sent",tracer.sawRequestSent,equalTo(true));
  assertThat("didn't see request received",tracer.sawRequestReceived,equalTo(true));
  assertThat("saw response sent",tracer.sawResponseSent,equalTo(false));
  assertThat("didn't see response received",tracer.sawResponseReceived,equalTo(true));
  assertThat("didn't see error sent",tracer.sawErrorSent,equalTo(true));
  String includeSettings;
  String excludeSettings;
  if (randomBoolean()) {
    includeSettings=randomBoolean() ? "*" : "";
    excludeSettings="*Error";
  }
 else {
    includeSettings="test";
    excludeSettings="DOESN'T_MATCH";
  }
  serviceA.applySettings(Settings.builder().put(TransportService.SETTING_TRACE_LOG_INCLUDE,includeSettings,TransportService.SETTING_TRACE_LOG_EXCLUDE,excludeSettings).build());
  tracer.reset(4);
  serviceA.sendRequest(nodeB,"test",new StringMessageRequest(""),noopResponseHandler);
  requestCompleted.acquire();
  tracer.expectedEvents.get().await();
  assertThat("didn't see request sent",tracer.sawRequestSent,equalTo(true));
  assertThat("didn't see request received",tracer.sawRequestReceived,equalTo(true));
  assertThat("didn't see response sent",tracer.sawResponseSent,equalTo(true));
  assertThat("didn't see response received",tracer.sawResponseReceived,equalTo(true));
  assertThat("saw error sent",tracer.sawErrorSent,equalTo(false));
  tracer.reset(2);
  serviceA.sendRequest(nodeB,"testError",new StringMessageRequest(""),noopResponseHandler);
  requestCompleted.acquire();
  tracer.expectedEvents.get().await();
  assertThat("saw request sent",tracer.sawRequestSent,equalTo(false));
  assertThat("didn't see request received",tracer.sawRequestReceived,equalTo(true));
  assertThat("saw response sent",tracer.sawResponseSent,equalTo(false));
  assertThat("saw response received",tracer.sawResponseReceived,equalTo(false));
  assertThat("didn't see error sent",tracer.sawErrorSent,equalTo(true));
}
