{
  super.setUp();
  threadPool=new TestThreadPool(getClass().getName());
  serviceA=build(Settings.builder().put("name","TS_A").put(TransportService.TRACE_LOG_INCLUDE_SETTING.getKey(),"").put(TransportService.TRACE_LOG_EXCLUDE_SETTING.getKey(),"NOTHING").build(),version0,ClusterName.DEFAULT);
  serviceA.acceptIncomingRequests();
  nodeA=new DiscoveryNode("TS_A",serviceA.boundAddress().publishAddress(),emptyMap(),emptySet(),version0);
  serviceB=build(Settings.builder().put("name","TS_B").put(TransportService.TRACE_LOG_INCLUDE_SETTING.getKey(),"").put(TransportService.TRACE_LOG_EXCLUDE_SETTING.getKey(),"NOTHING").build(),version1,ClusterName.DEFAULT);
  serviceB.acceptIncomingRequests();
  nodeB=new DiscoveryNode("TS_B",serviceB.boundAddress().publishAddress(),emptyMap(),emptySet(),version1);
  final boolean useLocalNode=randomBoolean();
  final CountDownLatch latch=new CountDownLatch(useLocalNode ? 2 : 4);
  TransportConnectionListener waitForConnection=new TransportConnectionListener(){
    @Override public void onNodeConnected(    DiscoveryNode node){
      latch.countDown();
    }
    @Override public void onNodeDisconnected(    DiscoveryNode node){
      fail("disconnect should not be called " + node);
    }
  }
;
  serviceA.addConnectionListener(waitForConnection);
  serviceB.addConnectionListener(waitForConnection);
  if (useLocalNode) {
    logger.info("--> using local node optimization");
    serviceA.setLocalNode(nodeA);
    serviceB.setLocalNode(nodeB);
  }
 else {
    logger.info("--> actively connecting to local node");
    serviceA.connectToNode(nodeA);
    serviceB.connectToNode(nodeB);
  }
  serviceA.connectToNode(nodeB);
  serviceB.connectToNode(nodeA);
  assertThat("failed to wait for all nodes to connect",latch.await(5,TimeUnit.SECONDS),equalTo(true));
  serviceA.removeConnectionListener(waitForConnection);
  serviceB.removeConnectionListener(waitForConnection);
}
