{
  Collections.sort(data);
  double[] percentiles=new double[percents.length];
  if (data.size() == 0) {
    for (int i=0; i < percents.length; i++) {
      percentiles[i]=Double.NaN;
    }
  }
 else {
    for (int i=0; i < percents.length; i++) {
      int index=(int)((percents[i] / 100.0) * data.size());
      percentiles[i]=data.get(index);
    }
  }
  return new InternalPercentilesBucket(name(),percents,percentiles,formatter,pipelineAggregators,metadata);
}
