{
  assertAcked(prepareCreate("test").addAlias(new Alias("alias")).setSettings(Settings.builder().put("index.refresh_interval",-1)));
  ensureGreen();
  MultiGetResponse response=client().prepareMultiGet().add(indexOrAlias(),"type1","1").get();
  assertThat(response.getResponses().length,equalTo(1));
  assertThat(response.getResponses()[0].getResponse().isExists(),equalTo(false));
  for (int i=0; i < 3; i++) {
    client().prepareIndex("test","type1",Integer.toString(i)).setSource("field","value" + i).get();
  }
  response=client().prepareMultiGet().add(new MultiGetRequest.Item(indexOrAlias(),"type1","1").version(Versions.MATCH_ANY)).add(new MultiGetRequest.Item(indexOrAlias(),"type1","1").version(1)).add(new MultiGetRequest.Item(indexOrAlias(),"type1","1").version(2)).get();
  assertThat(response.getResponses().length,equalTo(3));
  assertThat(response.getResponses()[0].getFailure(),nullValue());
  assertThat(response.getResponses()[0].getId(),equalTo("1"));
  assertThat(response.getResponses()[0].getIndex(),equalTo("test"));
  assertThat(response.getResponses()[0].getResponse().isExists(),equalTo(true));
  assertThat(response.getResponses()[0].getResponse().getSourceAsMap().get("field").toString(),equalTo("value1"));
  assertThat(response.getResponses()[1].getId(),equalTo("1"));
  assertThat(response.getResponses()[1].getIndex(),equalTo("test"));
  assertThat(response.getResponses()[1].getFailure(),nullValue());
  assertThat(response.getResponses()[1].getResponse().isExists(),equalTo(true));
  assertThat(response.getResponses()[1].getResponse().getSourceAsMap().get("field").toString(),equalTo("value1"));
  assertThat(response.getResponses()[2].getFailure(),notNullValue());
  assertThat(response.getResponses()[2].getFailure().getId(),equalTo("1"));
  assertThat(response.getResponses()[2].getFailure().getMessage(),startsWith("[type1][1]: version conflict"));
  assertThat(response.getResponses()[2].getFailure().getFailure(),instanceOf(VersionConflictEngineException.class));
  refresh();
  response=client().prepareMultiGet().add(new MultiGetRequest.Item(indexOrAlias(),"type1","1").version(Versions.MATCH_ANY)).add(new MultiGetRequest.Item(indexOrAlias(),"type1","1").version(1)).add(new MultiGetRequest.Item(indexOrAlias(),"type1","1").version(2)).setRealtime(false).get();
  assertThat(response.getResponses().length,equalTo(3));
  assertThat(response.getResponses()[0].getFailure(),nullValue());
  assertThat(response.getResponses()[0].getId(),equalTo("1"));
  assertThat(response.getResponses()[0].getResponse().isExists(),equalTo(true));
  assertThat(response.getResponses()[0].getResponse().getSourceAsMap().get("field").toString(),equalTo("value1"));
  assertThat(response.getResponses()[1].getId(),equalTo("1"));
  assertThat(response.getResponses()[1].getFailure(),nullValue());
  assertThat(response.getResponses()[1].getResponse().isExists(),equalTo(true));
  assertThat(response.getResponses()[1].getResponse().getSourceAsMap().get("field").toString(),equalTo("value1"));
  assertThat(response.getResponses()[2].getFailure(),notNullValue());
  assertThat(response.getResponses()[2].getFailure().getId(),equalTo("1"));
  assertThat(response.getResponses()[2].getFailure().getMessage(),startsWith("[type1][1]: version conflict"));
  assertThat(response.getResponses()[2].getFailure().getFailure(),instanceOf(VersionConflictEngineException.class));
  for (int i=0; i < 3; i++) {
    client().prepareIndex("test","type1",Integer.toString(i)).setSource("field","value" + i).get();
  }
  response=client().prepareMultiGet().add(new MultiGetRequest.Item(indexOrAlias(),"type1","2").version(Versions.MATCH_ANY)).add(new MultiGetRequest.Item(indexOrAlias(),"type1","2").version(1)).add(new MultiGetRequest.Item(indexOrAlias(),"type1","2").version(2)).get();
  assertThat(response.getResponses().length,equalTo(3));
  assertThat(response.getResponses()[0].getFailure(),nullValue());
  assertThat(response.getResponses()[0].getId(),equalTo("2"));
  assertThat(response.getResponses()[0].getIndex(),equalTo("test"));
  assertThat(response.getResponses()[0].getResponse().isExists(),equalTo(true));
  assertThat(response.getResponses()[0].getResponse().getSourceAsMap().get("field").toString(),equalTo("value2"));
  assertThat(response.getResponses()[1].getFailure(),notNullValue());
  assertThat(response.getResponses()[1].getFailure().getId(),equalTo("2"));
  assertThat(response.getResponses()[1].getIndex(),equalTo("test"));
  assertThat(response.getResponses()[1].getFailure().getMessage(),startsWith("[type1][2]: version conflict"));
  assertThat(response.getResponses()[2].getId(),equalTo("2"));
  assertThat(response.getResponses()[2].getIndex(),equalTo("test"));
  assertThat(response.getResponses()[2].getFailure(),nullValue());
  assertThat(response.getResponses()[2].getResponse().isExists(),equalTo(true));
  assertThat(response.getResponses()[2].getResponse().getSourceAsMap().get("field").toString(),equalTo("value2"));
  refresh();
  response=client().prepareMultiGet().add(new MultiGetRequest.Item(indexOrAlias(),"type1","2").version(Versions.MATCH_ANY)).add(new MultiGetRequest.Item(indexOrAlias(),"type1","2").version(1)).add(new MultiGetRequest.Item(indexOrAlias(),"type1","2").version(2)).setRealtime(false).get();
  assertThat(response.getResponses().length,equalTo(3));
  assertThat(response.getResponses()[0].getFailure(),nullValue());
  assertThat(response.getResponses()[0].getId(),equalTo("2"));
  assertThat(response.getResponses()[0].getIndex(),equalTo("test"));
  assertThat(response.getResponses()[0].getResponse().isExists(),equalTo(true));
  assertThat(response.getResponses()[0].getResponse().getSourceAsMap().get("field").toString(),equalTo("value2"));
  assertThat(response.getResponses()[1].getFailure(),notNullValue());
  assertThat(response.getResponses()[1].getFailure().getId(),equalTo("2"));
  assertThat(response.getResponses()[1].getIndex(),equalTo("test"));
  assertThat(response.getResponses()[1].getFailure().getMessage(),startsWith("[type1][2]: version conflict"));
  assertThat(response.getResponses()[2].getId(),equalTo("2"));
  assertThat(response.getResponses()[2].getIndex(),equalTo("test"));
  assertThat(response.getResponses()[2].getFailure(),nullValue());
  assertThat(response.getResponses()[2].getResponse().isExists(),equalTo(true));
  assertThat(response.getResponses()[2].getResponse().getSourceAsMap().get("field").toString(),equalTo("value2"));
}
