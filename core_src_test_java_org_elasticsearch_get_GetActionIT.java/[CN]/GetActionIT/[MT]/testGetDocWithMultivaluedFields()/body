{
  String mapping1=XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("field").field("type","text").field("store",true).endObject().endObject().endObject().endObject().string();
  String mapping2=XContentFactory.jsonBuilder().startObject().startObject("type2").startObject("properties").startObject("field").field("type","text").field("store",true).endObject().endObject().endObject().endObject().string();
  assertAcked(prepareCreate("test").addMapping("type1",mapping1).addMapping("type2",mapping2).setSettings(Settings.builder().put("index.refresh_interval",-1)));
  ensureGreen();
  GetResponse response=client().prepareGet("test","type1","1").get();
  assertThat(response.isExists(),equalTo(false));
  response=client().prepareGet("test","type2","1").get();
  assertThat(response.isExists(),equalTo(false));
  client().prepareIndex("test","type1","1").setSource(jsonBuilder().startObject().array("field","1","2").endObject()).get();
  client().prepareIndex("test","type2","1").setSource(jsonBuilder().startObject().array("field","1","2").endObject()).get();
  response=client().prepareGet("test","type1","1").setStoredFields("field").get();
  assertThat(response.isExists(),equalTo(true));
  assertThat(response.getId(),equalTo("1"));
  assertThat(response.getType(),equalTo("type1"));
  Set<String> fields=new HashSet<>(response.getFields().keySet());
  fields.remove(TimestampFieldMapper.NAME);
  assertThat(fields,equalTo(singleton("field")));
  assertThat(response.getFields().get("field").getValues().size(),equalTo(2));
  assertThat(response.getFields().get("field").getValues().get(0).toString(),equalTo("1"));
  assertThat(response.getFields().get("field").getValues().get(1).toString(),equalTo("2"));
  response=client().prepareGet("test","type2","1").setStoredFields("field").get();
  assertThat(response.isExists(),equalTo(true));
  assertThat(response.getType(),equalTo("type2"));
  assertThat(response.getId(),equalTo("1"));
  fields=new HashSet<>(response.getFields().keySet());
  fields.remove(TimestampFieldMapper.NAME);
  assertThat(fields,equalTo(singleton("field")));
  assertThat(response.getFields().get("field").getValues().size(),equalTo(2));
  assertThat(response.getFields().get("field").getValues().get(0).toString(),equalTo("1"));
  assertThat(response.getFields().get("field").getValues().get(1).toString(),equalTo("2"));
  refresh();
  response=client().prepareGet("test","type1","1").setStoredFields("field").get();
  assertThat(response.isExists(),equalTo(true));
  assertThat(response.getId(),equalTo("1"));
  fields=new HashSet<>(response.getFields().keySet());
  fields.remove(TimestampFieldMapper.NAME);
  assertThat(fields,equalTo(singleton("field")));
  assertThat(response.getFields().get("field").getValues().size(),equalTo(2));
  assertThat(response.getFields().get("field").getValues().get(0).toString(),equalTo("1"));
  assertThat(response.getFields().get("field").getValues().get(1).toString(),equalTo("2"));
  response=client().prepareGet("test","type2","1").setStoredFields("field").get();
  assertThat(response.isExists(),equalTo(true));
  assertThat(response.getId(),equalTo("1"));
  fields=new HashSet<>(response.getFields().keySet());
  fields.remove(TimestampFieldMapper.NAME);
  assertThat(fields,equalTo(singleton("field")));
  assertThat(response.getFields().get("field").getValues().size(),equalTo(2));
  assertThat(response.getFields().get("field").getValues().get(0).toString(),equalTo("1"));
  assertThat(response.getFields().get("field").getValues().get(1).toString(),equalTo("2"));
}
