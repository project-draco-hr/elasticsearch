{
  Directory dir=newDirectory();
  IndexWriter writer=new IndexWriter(dir,new IndexWriterConfig(Lucene.STANDARD_ANALYZER));
  List<Document> docs=new ArrayList<>();
  for (int i=0; i < 4; ++i) {
    Document doc=new Document();
    doc.add(new Field(UidFieldMapper.NAME,"1",UidFieldMapper.Defaults.NESTED_FIELD_TYPE));
    docs.add(doc);
  }
  Document doc=new Document();
  doc.add(new Field(UidFieldMapper.NAME,"1",UidFieldMapper.Defaults.FIELD_TYPE));
  NumericDocValuesField version=new NumericDocValuesField(VersionFieldMapper.NAME,5L);
  doc.add(version);
  docs.add(doc);
  writer.updateDocuments(new Term(UidFieldMapper.NAME,"1"),docs);
  DirectoryReader directoryReader=ElasticsearchDirectoryReader.wrap(DirectoryReader.open(writer,true),new ShardId("foo","_na_",1));
  assertThat(Versions.loadVersion(directoryReader,new Term(UidFieldMapper.NAME,"1")),equalTo(5l));
  assertThat(Versions.loadDocIdAndVersion(directoryReader,new Term(UidFieldMapper.NAME,"1")).version,equalTo(5l));
  version.setLongValue(6L);
  writer.updateDocuments(new Term(UidFieldMapper.NAME,"1"),docs);
  version.setLongValue(7L);
  writer.updateDocuments(new Term(UidFieldMapper.NAME,"1"),docs);
  directoryReader=reopen(directoryReader);
  assertThat(Versions.loadVersion(directoryReader,new Term(UidFieldMapper.NAME,"1")),equalTo(7l));
  assertThat(Versions.loadDocIdAndVersion(directoryReader,new Term(UidFieldMapper.NAME,"1")).version,equalTo(7l));
  writer.deleteDocuments(new Term(UidFieldMapper.NAME,"1"));
  directoryReader=reopen(directoryReader);
  assertThat(Versions.loadVersion(directoryReader,new Term(UidFieldMapper.NAME,"1")),equalTo(Versions.NOT_FOUND));
  assertThat(Versions.loadDocIdAndVersion(directoryReader,new Term(UidFieldMapper.NAME,"1")),nullValue());
  directoryReader.close();
  writer.close();
  dir.close();
}
