{
  ClusterStateObserver observer=new ClusterStateObserver(clusterService,TimeValue.timeValueMinutes(5),logger,threadPool.getThreadContext());
  final ClusterState clusterState=observer.observedState();
  if (clusterState.getVersion() >= clusterStateVersion) {
    logger.trace("node has cluster state with version higher than {} (current: {})",clusterStateVersion,clusterState.getVersion());
    return;
  }
 else {
    logger.trace("waiting for cluster state version {} (current: {})",clusterStateVersion,clusterState.getVersion());
    final PlainActionFuture<Void> future=new PlainActionFuture<>();
    observer.waitForNextChange(new ClusterStateObserver.Listener(){
      @Override public void onNewClusterState(      ClusterState state){
        future.onResponse(null);
      }
      @Override public void onClusterServiceClose(){
        future.onFailure(new NodeClosedException(clusterService.localNode()));
      }
      @Override public void onTimeout(      TimeValue timeout){
        future.onFailure(new IllegalStateException("cluster state never updated to version " + clusterStateVersion));
      }
    }
,new ClusterStateObserver.ValidationPredicate(){
      @Override protected boolean validate(      ClusterState newState){
        return newState.getVersion() >= clusterStateVersion;
      }
    }
);
    try {
      future.get();
      logger.trace("successfully waited for cluster state with version {} (current: {})",clusterStateVersion,observer.observedState().getVersion());
    }
 catch (    Exception e) {
      logger.debug("failed waiting for cluster state with version {} (current: {})",e,clusterStateVersion,observer.observedState());
      throw ExceptionsHelper.convertToRuntime(e);
    }
  }
}
