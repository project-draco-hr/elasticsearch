{
  final int min=2;
  final int max=4;
  final int ntasks=16;
  final ThreadBarrier barrier=new ThreadBarrier(max + 1);
  TransferThreadPoolExecutor pool=TransferThreadPoolExecutor.newScalingExecutor(min,max,Long.MAX_VALUE,TimeUnit.NANOSECONDS,Executors.defaultThreadFactory());
  assertThat("Min property",pool.getCorePoolSize(),equalTo(min));
  assertThat("Max property",pool.getMaximumPoolSize(),equalTo(max));
  final AtomicInteger tasksExecuted=new AtomicInteger();
  for (int i=0; i < ntasks; ++i) {
    final int id=i;
    pool.execute(new Runnable(){
      public void run(){
        tasksExecuted.incrementAndGet();
        try {
          if (id < max) {
            barrier.await();
          }
        }
 catch (        Throwable e) {
          barrier.reset(e);
        }
      }
    }
);
    Thread.sleep(100);
  }
  assertThat("wrong number of pooled tasks",pool.getQueueSize(),equalTo(ntasks - max));
  barrier.await();
  Thread.sleep(1000);
  assertThat("tasks not complete",tasksExecuted.get(),equalTo(ntasks));
  pool.shutdown();
}
