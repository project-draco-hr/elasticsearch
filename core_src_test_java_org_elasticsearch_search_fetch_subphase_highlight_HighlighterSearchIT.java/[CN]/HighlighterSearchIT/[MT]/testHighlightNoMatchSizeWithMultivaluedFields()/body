{
  assertAcked(prepareCreate("test").addMapping("type1","text","type=text," + randomStoreField() + "term_vector=with_positions_offsets,index_options=offsets"));
  ensureGreen();
  String text1="I am pretty long so some of me should get cut off. We'll see how that goes.";
  String text2="I am short";
  index("test","type1","1","text",new String[]{text1,text2});
  refresh();
  HighlightBuilder.Field field=new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain").noMatchSize(21);
  SearchResponse response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertHighlight(response,0,"text",0,1,equalTo("I am pretty long so"));
  field.highlighterType("fvh");
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertHighlight(response,0,"text",0,1,equalTo("I am pretty long so some"));
  field.highlighterType("postings");
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertHighlight(response,0,"text",0,1,equalTo("I am pretty long so some of me should get cut off."));
  index("test","type1","2","text",new String[]{"",text2});
  refresh();
  IdsQueryBuilder idsQueryBuilder=QueryBuilders.idsQuery("type1").addIds("2");
  field.highlighterType("plain");
  response=client().prepareSearch("test").setQuery(idsQueryBuilder).highlighter(new HighlightBuilder().field(field)).get();
  assertNotHighlighted(response,0,"text");
  field.highlighterType("fvh");
  response=client().prepareSearch("test").setQuery(idsQueryBuilder).highlighter(new HighlightBuilder().field(field)).get();
  assertNotHighlighted(response,0,"text");
  field.highlighterType("postings");
  response=client().prepareSearch("test").setQuery(idsQueryBuilder).highlighter(new HighlightBuilder().field(field)).get();
  assertNotHighlighted(response,0,"text");
  index("test","type1","3","text",new String[]{});
  refresh();
  idsQueryBuilder=QueryBuilders.idsQuery("type1").addIds("3");
  field.highlighterType("plain");
  response=client().prepareSearch("test").setQuery(idsQueryBuilder).highlighter(new HighlightBuilder().field(field)).get();
  assertNotHighlighted(response,0,"text");
  field.highlighterType("fvh");
  response=client().prepareSearch("test").setQuery(idsQueryBuilder).highlighter(new HighlightBuilder().field(field)).get();
  assertNotHighlighted(response,0,"text");
  field.highlighterType("postings");
  response=client().prepareSearch("test").setQuery(idsQueryBuilder).highlighter(new HighlightBuilder().field(field)).get();
  assertNotHighlighted(response,0,"text");
  index("test","type1","4");
  refresh();
  idsQueryBuilder=QueryBuilders.idsQuery("type1").addIds("4");
  field.highlighterType("plain");
  response=client().prepareSearch("test").setQuery(idsQueryBuilder).highlighter(new HighlightBuilder().field(field)).get();
  assertNotHighlighted(response,0,"text");
  field.highlighterType("fvh");
  response=client().prepareSearch("test").setQuery(idsQueryBuilder).highlighter(new HighlightBuilder().field(field)).get();
  assertNotHighlighted(response,0,"text");
  field.highlighterType("fvh");
  response=client().prepareSearch("test").setQuery(idsQueryBuilder).highlighter(new HighlightBuilder().field(field)).get();
  assertNotHighlighted(response,0,"postings");
  field=new HighlightBuilder.Field("unmapped").highlighterType("plain").noMatchSize(21);
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertNotHighlighted(response,0,"text");
  field.highlighterType("fvh");
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertNotHighlighted(response,0,"text");
  field.highlighterType("postings");
  response=client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get();
  assertNotHighlighted(response,0,"text");
}
