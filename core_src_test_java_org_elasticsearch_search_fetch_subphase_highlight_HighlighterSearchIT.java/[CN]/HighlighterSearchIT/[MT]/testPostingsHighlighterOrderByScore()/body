{
  assertAcked(prepareCreate("test").addMapping("type1",type1PostingsffsetsMapping()));
  ensureGreen();
  client().prepareIndex("test","type1").setSource("field1",new String[]{"This sentence contains one match, not that short. This sentence contains two sentence matches. " + "This one contains no matches.","This is the second value's first sentence. This one contains no matches. " + "This sentence contains three sentence occurrences (sentence).","One sentence match here and scored lower since the text is quite long, not that appealing. " + "This one contains no matches."}).get();
  refresh();
  logger.info("--> highlighting and searching on field1");
  SearchSourceBuilder source=searchSource().query(termQuery("field1","sentence")).highlighter(highlight().field("field1").order("score"));
  SearchResponse searchResponse=client().search(searchRequest("test").source(source)).actionGet();
  Map<String,HighlightField> highlightFieldMap=searchResponse.getHits().getAt(0).highlightFields();
  assertThat(highlightFieldMap.size(),equalTo(1));
  HighlightField field1=highlightFieldMap.get("field1");
  assertThat(field1.fragments().length,equalTo(5));
  assertThat(field1.fragments()[0].string(),equalTo("This <em>sentence</em> contains three <em>sentence</em> occurrences (<em>sentence</em>)."));
  assertThat(field1.fragments()[1].string(),equalTo("This <em>sentence</em> contains two <em>sentence</em> matches."));
  assertThat(field1.fragments()[2].string(),equalTo("This is the second value's first <em>sentence</em>."));
  assertThat(field1.fragments()[3].string(),equalTo("This <em>sentence</em> contains one match, not that short."));
  assertThat(field1.fragments()[4].string(),equalTo("One <em>sentence</em> match here and scored lower since the text is quite long, not that appealing."));
}
