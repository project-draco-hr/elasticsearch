{
  final Set<IntsRef> ref=SpecialOperations.getFiniteStrings(automaton,-1);
  Automaton subs[]=new Automaton[ref.size()];
  int upto=0;
  for (  IntsRef path : ref) {
    if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {
      subs[upto]=BasicAutomata.makeString(path.ints,path.offset,path.length);
      upto++;
    }
 else {
      Automaton prefix=BasicAutomata.makeString(path.ints,path.offset,nonFuzzyPrefix);
      int ints[]=new int[path.length - nonFuzzyPrefix];
      System.arraycopy(path.ints,path.offset + nonFuzzyPrefix,ints,0,ints.length);
      LevenshteinAutomata lev=new LevenshteinAutomata(ints,unicodeAware ? Character.MAX_CODE_POINT : 255,transpositions);
      Automaton levAutomaton=lev.toAutomaton(maxEdits);
      Automaton combined=BasicOperations.concatenate(Arrays.asList(prefix,levAutomaton));
      combined.setDeterministic(true);
      subs[upto]=combined;
      upto++;
    }
  }
  if (subs.length == 0) {
    return BasicAutomata.makeEmpty();
  }
 else   if (subs.length == 1) {
    return subs[0];
  }
 else {
    Automaton a=BasicOperations.union(Arrays.asList(subs));
    BasicOperations.determinize(a);
    return a;
  }
}
