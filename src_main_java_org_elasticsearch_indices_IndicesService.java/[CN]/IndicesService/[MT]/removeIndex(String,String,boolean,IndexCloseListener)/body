{
  try {
    final IndexService indexService;
    final Injector indexInjector;
synchronized (this) {
      indexInjector=indicesInjectors.remove(index);
      if (indexInjector == null) {
        return;
      }
      logger.debug("[{}] closing ... (reason [{}])",index,reason);
      Map<String,IndexService> tmpMap=newHashMap(indices);
      indexService=tmpMap.remove(index);
      indices=ImmutableMap.copyOf(tmpMap);
    }
    indicesLifecycle.beforeIndexClosed(indexService);
    if (delete) {
      indicesLifecycle.beforeIndexDeleted(indexService);
    }
    IOUtils.close(Iterables.transform(pluginsService.indexServices(),new Function<Class<? extends Closeable>,Closeable>(){
      @Override public Closeable apply(      Class<? extends Closeable> input){
        return indexInjector.getInstance(input);
      }
    }
));
    logger.debug("[{}] closing index service (reason [{}])",index,reason);
    ((IndexService)indexService).close(reason,listener);
    logger.debug("[{}] closing index cache (reason [{}])",index,reason);
    indexInjector.getInstance(IndexCache.class).close();
    logger.debug("[{}] clearing index field data (reason [{}])",index,reason);
    indexInjector.getInstance(IndexFieldDataService.class).clear();
    logger.debug("[{}] closing analysis service (reason [{}])",index,reason);
    indexInjector.getInstance(AnalysisService.class).close();
    logger.debug("[{}] closing mapper service (reason [{}])",index,reason);
    indexInjector.getInstance(MapperService.class).close();
    logger.debug("[{}] closing index query parser service (reason [{}])",index,reason);
    indexInjector.getInstance(IndexQueryParserService.class).close();
    logger.debug("[{}] closing index service (reason [{}])",index,reason);
    indexInjector.getInstance(IndexStore.class).close();
    Injectors.close(injector);
    logger.debug("[{}] closed... (reason [{}])",index,reason);
    indicesLifecycle.afterIndexClosed(indexService.index());
    if (delete) {
      indicesLifecycle.afterIndexDeleted(indexService.index());
    }
  }
 catch (  IOException ex) {
    throw new ElasticsearchException("failed to remove index " + index,ex);
  }
}
