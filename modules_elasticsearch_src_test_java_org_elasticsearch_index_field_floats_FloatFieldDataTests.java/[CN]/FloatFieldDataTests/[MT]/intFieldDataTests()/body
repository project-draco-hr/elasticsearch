{
  Directory dir=new RAMDirectory();
  IndexWriter indexWriter=new IndexWriter(dir,Lucene.STANDARD_ANALYZER,true,IndexWriter.MaxFieldLength.UNLIMITED);
  indexWriter.addDocument(doc().add(new NumericField("svalue").setFloatValue(4)).add(new NumericField("mvalue").setFloatValue(104)).build());
  indexWriter.addDocument(doc().add(new NumericField("svalue").setFloatValue(3)).add(new NumericField("mvalue").setFloatValue(104)).add(new NumericField("mvalue").setFloatValue(105)).build());
  indexWriter.addDocument(doc().add(new NumericField("svalue").setFloatValue(7)).build());
  indexWriter.addDocument(doc().add(new NumericField("mvalue").setFloatValue(102)).build());
  indexWriter.addDocument(doc().add(new NumericField("svalue").setFloatValue(4)).build());
  IndexReader reader=indexWriter.getReader();
  FloatFieldData.load(reader,"svalue",fieldDataOptions().withFreqs(false));
  FloatFieldData.load(reader,"mvalue",fieldDataOptions().withFreqs(false));
  FloatFieldData sFieldData=FloatFieldData.load(reader,"svalue",fieldDataOptions().withFreqs(true));
  FloatFieldData mFieldData=FloatFieldData.load(reader,"mvalue",fieldDataOptions().withFreqs(true));
  assertThat(sFieldData.fieldName(),equalTo("svalue"));
  assertThat(sFieldData.type(),equalTo(FieldData.Type.FLOAT));
  assertThat(sFieldData.multiValued(),equalTo(false));
  assertThat(mFieldData.fieldName(),equalTo("mvalue"));
  assertThat(mFieldData.type(),equalTo(FieldData.Type.FLOAT));
  assertThat(mFieldData.multiValued(),equalTo(true));
  assertThat(sFieldData.hasValue(0),equalTo(true));
  assertThat(sFieldData.value(0),equalTo(4f));
  assertThat(sFieldData.values(0).length,equalTo(1));
  assertThat(sFieldData.values(0)[0],equalTo(4f));
  assertThat(sFieldData.hasValue(1),equalTo(true));
  assertThat(sFieldData.value(1),equalTo(3f));
  assertThat(sFieldData.values(1).length,equalTo(1));
  assertThat(sFieldData.values(1)[0],equalTo(3f));
  assertThat(sFieldData.hasValue(2),equalTo(true));
  assertThat(sFieldData.value(2),equalTo(7f));
  assertThat(sFieldData.values(2).length,equalTo(1));
  assertThat(sFieldData.values(2)[0],equalTo(7f));
  assertThat(sFieldData.hasValue(3),equalTo(false));
  assertThat(sFieldData.hasValue(4),equalTo(true));
  assertThat(sFieldData.value(4),equalTo(4f));
  assertThat(sFieldData.values(4).length,equalTo(1));
  assertThat(sFieldData.values(4)[0],equalTo(4f));
  final ArrayList<Tuple<Float,Integer>> values=new ArrayList<Tuple<Float,Integer>>();
  sFieldData.forEachValue(new FloatFieldData.ValueProc(){
    @Override public void onValue(    float value,    int freq){
      values.add(tuple(value,freq));
    }
  }
);
  assertThat(values.size(),equalTo(3));
  assertThat(values.get(0).v1(),equalTo(3f));
  assertThat(values.get(0).v2(),equalTo(1));
  assertThat(values.get(1).v1(),equalTo(4f));
  assertThat(values.get(1).v2(),equalTo(2));
  assertThat(values.get(2).v1(),equalTo(7f));
  assertThat(values.get(2).v2(),equalTo(1));
  assertThat(mFieldData.hasValue(0),equalTo(true));
  assertThat(mFieldData.value(0),equalTo(104f));
  assertThat(mFieldData.values(0).length,equalTo(1));
  assertThat(mFieldData.values(0)[0],equalTo(104f));
  assertThat(mFieldData.hasValue(1),equalTo(true));
  assertThat(mFieldData.value(1),equalTo(104f));
  assertThat(mFieldData.values(1).length,equalTo(2));
  assertThat(mFieldData.values(1)[0],equalTo(104f));
  assertThat(mFieldData.values(1)[1],equalTo(105f));
  assertThat(mFieldData.hasValue(2),equalTo(false));
  assertThat(mFieldData.hasValue(3),equalTo(true));
  assertThat(mFieldData.value(3),equalTo(102f));
  assertThat(mFieldData.values(3).length,equalTo(1));
  assertThat(mFieldData.values(3)[0],equalTo(102f));
  assertThat(mFieldData.hasValue(4),equalTo(false));
  indexWriter.close();
  values.clear();
  mFieldData.forEachValue(new FloatFieldData.ValueProc(){
    @Override public void onValue(    float value,    int freq){
      values.add(tuple(value,freq));
    }
  }
);
  assertThat(values.size(),equalTo(3));
  assertThat(values.get(0).v1(),equalTo(102f));
  assertThat(values.get(0).v2(),equalTo(1));
  assertThat(values.get(1).v1(),equalTo(104f));
  assertThat(values.get(1).v2(),equalTo(2));
  assertThat(values.get(2).v1(),equalTo(105f));
  assertThat(values.get(2).v2(),equalTo(1));
}
