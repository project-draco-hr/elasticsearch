{
  Map<String,Object> objectNode=node;
  ObjectMapper.Builder builder=createBuilder(name);
  for (  Map.Entry<String,Object> entry : objectNode.entrySet()) {
    String fieldName=Strings.toUnderscoreCase(entry.getKey());
    Object fieldNode=entry.getValue();
    if (fieldName.equals("dynamic")) {
      String value=fieldNode.toString();
      if (value.equalsIgnoreCase("strict")) {
        builder.dynamic(Dynamic.STRICT);
      }
 else {
        builder.dynamic(nodeBooleanValue(fieldNode) ? Dynamic.TRUE : Dynamic.FALSE);
      }
    }
 else     if (fieldName.equals("type")) {
      String type=fieldNode.toString();
      if (type.equals(CONTENT_TYPE)) {
        builder.nested=Nested.NO;
      }
 else       if (type.equals(NESTED_CONTENT_TYPE)) {
        builder.nested=Nested.NESTED;
      }
 else       if (type.equals(OBJECT_AND_NESTED_CONTENT_TYPE)) {
        builder.nested=Nested.OBJECT_AND_NESTED;
      }
 else       if (type.equals(ROOT_AND_NESTED_CONTENT_TYPE)) {
        builder.nested=Nested.ROOT_AND_NESTED;
      }
 else {
        throw new MapperParsingException("Trying to parse an object but has a different type [" + type + "] for ["+ name+ "]");
      }
    }
 else     if (fieldName.equals("enabled")) {
      builder.enabled(nodeBooleanValue(fieldNode));
    }
 else     if (fieldName.equals("path")) {
      builder.pathType(parsePathType(name,fieldNode.toString()));
    }
 else     if (fieldName.equals("properties")) {
      parseProperties(builder,(Map<String,Object>)fieldNode,parserContext);
    }
 else     if (fieldName.equals("include_in_all")) {
      builder.includeInAll(nodeBooleanValue(fieldNode));
    }
 else {
      processField(builder,fieldName,fieldNode);
    }
  }
  return builder;
}
