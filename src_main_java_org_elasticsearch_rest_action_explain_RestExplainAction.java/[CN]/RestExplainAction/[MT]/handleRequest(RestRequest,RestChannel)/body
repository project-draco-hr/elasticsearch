{
  final ExplainRequest explainRequest=new ExplainRequest(request.param("index"),request.param("type"),request.param("id"));
  explainRequest.setParent(request.param("parent"));
  explainRequest.setRouting(request.param("routing"));
  explainRequest.setPreference(request.param("preference"));
  String sourceString=request.param("source");
  String queryString=request.param("q");
  if (request.hasContent()) {
    explainRequest.setSource(request.content(),request.contentUnsafe());
  }
 else   if (sourceString != null) {
    explainRequest.setSource(new BytesArray(request.param("source")),false);
  }
 else   if (queryString != null) {
    QueryStringQueryBuilder queryStringBuilder=QueryBuilders.queryString(queryString);
    queryStringBuilder.defaultField(request.param("df"));
    queryStringBuilder.analyzer(request.param("analyzer"));
    queryStringBuilder.analyzeWildcard(request.paramAsBoolean("analyze_wildcard",false));
    queryStringBuilder.lowercaseExpandedTerms(request.paramAsBoolean("lowercase_expanded_terms",true));
    queryStringBuilder.lenient(request.paramAsBooleanOptional("lenient",null));
    String defaultOperator=request.param("default_operator");
    if (defaultOperator != null) {
      if ("OR".equals(defaultOperator)) {
        queryStringBuilder.defaultOperator(QueryStringQueryBuilder.Operator.OR);
      }
 else       if ("AND".equals(defaultOperator)) {
        queryStringBuilder.defaultOperator(QueryStringQueryBuilder.Operator.AND);
      }
 else {
        throw new ElasticSearchIllegalArgumentException("Unsupported defaultOperator [" + defaultOperator + "], can either be [OR] or [AND]");
      }
    }
    ExplainSourceBuilder explainSourceBuilder=new ExplainSourceBuilder();
    explainSourceBuilder.setQuery(queryStringBuilder);
    explainRequest.setSource(explainSourceBuilder);
  }
  String sField=request.param("fields");
  if (sField != null) {
    String[] sFields=Strings.splitStringByCommaToArray(sField);
    if (sFields != null) {
      explainRequest.setFields(sFields);
    }
  }
  client.explain(explainRequest,new ActionListener<ExplainResponse>(){
    @Override public void onResponse(    ExplainResponse response){
      try {
        XContentBuilder builder=restContentBuilder(request);
        builder.startObject();
        builder.field(Fields.OK,response.isExists()).field(Fields._INDEX,explainRequest.getIndex()).field(Fields._TYPE,explainRequest.getType()).field(Fields._ID,explainRequest.getId()).field(Fields.MATCHED,response.isMatch());
        if (response.hasExplanation()) {
          builder.startObject(Fields.EXPLANATION);
          buildExplanation(builder,response.getExplanation());
          builder.endObject();
        }
        GetResult getResult=response.getGetResult();
        if (getResult != null) {
          builder.startObject(Fields.GET);
          response.getGetResult().toXContentEmbedded(builder,request);
          builder.endObject();
        }
        builder.endObject();
        channel.sendResponse(new XContentRestResponse(request,response.isExists() ? OK : NOT_FOUND,builder));
      }
 catch (      Exception e) {
        onFailure(e);
      }
    }
    private void buildExplanation(    XContentBuilder builder,    Explanation explanation) throws IOException {
      builder.field(Fields.VALUE,explanation.getValue());
      builder.field(Fields.DESCRIPTION,explanation.getDescription());
      Explanation[] innerExps=explanation.getDetails();
      if (innerExps != null) {
        builder.startArray(Fields.DETAILS);
        for (        Explanation exp : innerExps) {
          builder.startObject();
          buildExplanation(builder,exp);
          builder.endObject();
        }
        builder.endArray();
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
