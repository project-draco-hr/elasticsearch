{
  final Map<Object,Object> masterCopy=Maps.newHashMap(ACQUIRED_ARRAYS);
  if (!masterCopy.isEmpty()) {
    boolean success=ElasticsearchTestCase.awaitBusy(new Predicate<Object>(){
      @Override public boolean apply(      Object input){
        return Sets.intersection(masterCopy.keySet(),ACQUIRED_ARRAYS.keySet()).isEmpty();
      }
    }
);
    if (!success) {
      masterCopy.keySet().retainAll(ACQUIRED_ARRAYS.keySet());
      ACQUIRED_ARRAYS.keySet().removeAll(masterCopy.keySet());
      if (!masterCopy.isEmpty()) {
        final Object cause=masterCopy.entrySet().iterator().next().getValue();
        throw new RuntimeException(masterCopy.size() + " arrays have not been released",cause instanceof Throwable ? (Throwable)cause : null);
      }
    }
  }
  if (INSTANCE != null) {
    final boolean sizeIsZero=ElasticsearchTestCase.awaitBusy(new Predicate<Object>(){
      @Override public boolean apply(      Object input){
        return INSTANCE.sizeInBytes() == 0;
      }
    }
);
    if (!sizeIsZero) {
      final long sizeInBytes=INSTANCE.sizeInBytes();
      if (sizeInBytes != 0) {
        throw new AssertionError("Expected 0 bytes, got " + sizeInBytes);
      }
    }
  }
}
