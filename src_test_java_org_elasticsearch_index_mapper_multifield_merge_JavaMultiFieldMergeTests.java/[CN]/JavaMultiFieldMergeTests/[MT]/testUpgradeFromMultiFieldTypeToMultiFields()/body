{
  String mapping=copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/test-mapping1.json");
  DocumentMapperParser parser=createIndex("test").mapperService().documentMapperParser();
  DocumentMapper docMapper=parser.parse(mapping);
  assertNotSame(IndexOptions.NONE,docMapper.mappers().fullName("name").mapper().fieldType().indexOptions());
  assertThat(docMapper.mappers().fullName("name.indexed"),nullValue());
  BytesReference json=new BytesArray(copyToBytesFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/test-data.json"));
  Document doc=docMapper.parse(json).rootDoc();
  IndexableField f=doc.getField("name");
  assertThat(f,notNullValue());
  f=doc.getField("name.indexed");
  assertThat(f,nullValue());
  mapping=copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/upgrade1.json");
  DocumentMapper docMapper2=parser.parse(mapping);
  DocumentMapper.MergeResult mergeResult=docMapper.merge(docMapper2.mapping(),mergeFlags().simulate(true));
  assertThat(Arrays.toString(mergeResult.conflicts()),mergeResult.hasConflicts(),equalTo(false));
  docMapper.merge(docMapper2.mapping(),mergeFlags().simulate(false));
  assertNotSame(IndexOptions.NONE,docMapper.mappers().name("name").mapper().fieldType().indexOptions());
  assertNotSame(IndexOptions.NONE,docMapper.mappers().fullName("name").mapper().fieldType().indexOptions());
  assertThat(docMapper.mappers().fullName("name.indexed").mapper(),notNullValue());
  assertThat(docMapper.mappers().fullName("name.not_indexed").mapper(),notNullValue());
  assertThat(docMapper.mappers().fullName("name.not_indexed2"),nullValue());
  assertThat(docMapper.mappers().fullName("name.not_indexed3"),nullValue());
  json=new BytesArray(copyToBytesFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/test-data.json"));
  doc=docMapper.parse(json).rootDoc();
  f=doc.getField("name");
  assertThat(f,notNullValue());
  f=doc.getField("name.indexed");
  assertThat(f,notNullValue());
  mapping=copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/upgrade2.json");
  DocumentMapper docMapper3=parser.parse(mapping);
  mergeResult=docMapper.merge(docMapper3.mapping(),mergeFlags().simulate(true));
  assertThat(Arrays.toString(mergeResult.conflicts()),mergeResult.hasConflicts(),equalTo(false));
  docMapper.merge(docMapper3.mapping(),mergeFlags().simulate(false));
  assertNotSame(IndexOptions.NONE,docMapper.mappers().name("name").mapper().fieldType().indexOptions());
  assertNotSame(IndexOptions.NONE,docMapper.mappers().fullName("name").mapper().fieldType().indexOptions());
  assertThat(docMapper.mappers().fullName("name.indexed").mapper(),notNullValue());
  assertThat(docMapper.mappers().fullName("name.not_indexed").mapper(),notNullValue());
  assertThat(docMapper.mappers().fullName("name.not_indexed2").mapper(),notNullValue());
  assertThat(docMapper.mappers().fullName("name.not_indexed3"),nullValue());
  mapping=copyToStringFromClasspath("/org/elasticsearch/index/mapper/multifield/merge/upgrade3.json");
  DocumentMapper docMapper4=parser.parse(mapping);
  mergeResult=docMapper.merge(docMapper4.mapping(),mergeFlags().simulate(true));
  assertThat(Arrays.toString(mergeResult.conflicts()),mergeResult.hasConflicts(),equalTo(true));
  assertThat(mergeResult.conflicts()[0],equalTo("mapper [name] has different index values"));
  assertThat(mergeResult.conflicts()[1],equalTo("mapper [name] has different store values"));
  mergeResult=docMapper.merge(docMapper4.mapping(),mergeFlags().simulate(false));
  assertThat(Arrays.toString(mergeResult.conflicts()),mergeResult.hasConflicts(),equalTo(true));
  assertNotSame(IndexOptions.NONE,docMapper.mappers().name("name").mapper().fieldType().indexOptions());
  assertThat(mergeResult.conflicts()[0],equalTo("mapper [name] has different index values"));
  assertThat(mergeResult.conflicts()[1],equalTo("mapper [name] has different store values"));
  assertNotSame(IndexOptions.NONE,docMapper.mappers().fullName("name").mapper().fieldType().indexOptions());
  assertThat(docMapper.mappers().fullName("name.indexed").mapper(),notNullValue());
  assertThat(docMapper.mappers().fullName("name.not_indexed").mapper(),notNullValue());
  assertThat(docMapper.mappers().fullName("name.not_indexed2").mapper(),notNullValue());
  assertThat(docMapper.mappers().fullName("name.not_indexed3").mapper(),notNullValue());
}
