{
  if (expectedValue instanceof String) {
    String expValue=((String)expectedValue).trim();
    if (expValue.length() > 2 && expValue.startsWith("/") && expValue.endsWith("/")) {
      assertThat("field [" + getField() + "] was expected to be of type String but is an instanceof ["+ safeClass(actualValue)+ "]",actualValue,instanceOf(String.class));
      String stringValue=(String)actualValue;
      String regex=expValue.substring(1,expValue.length() - 1);
      logger.trace("assert that [{}] matches [{}]",stringValue,regex);
      assertThat("field [" + getField() + "] was expected to match the provided regex but didn't",stringValue,matches(regex,Pattern.COMMENTS));
      return;
    }
  }
  assertNotNull("field [" + getField() + "] is null",actualValue);
  logger.trace("assert that [{}] matches [{}] (field [{}])",actualValue,expectedValue,getField());
  if (actualValue.getClass().equals(safeClass(expectedValue)) == false) {
    if (actualValue instanceof Number && expectedValue instanceof Number) {
      assertThat("field [" + getField() + "] doesn't match the expected value",((Number)actualValue).doubleValue(),equalTo(((Number)expectedValue).doubleValue()));
      return;
    }
  }
  if (expectedValue.equals(actualValue) == false) {
    FailureMessage message=new FailureMessage(getField());
    message.compare(getField(),actualValue,expectedValue);
    throw new AssertionError(message.message);
  }
}
