{
  LeafReader reader=context.reader();
  Terms terms=reader.terms(getFieldNames().indexName());
  AtomicGeoPointFieldData data=null;
  NonEstimatingEstimator estimator=new NonEstimatingEstimator(breakerService.getBreaker(CircuitBreaker.FIELDDATA));
  if (terms == null) {
    data=AbstractAtomicGeoPointFieldData.empty(reader.maxDoc());
    estimator.afterLoad(null,data.ramBytesUsed());
    return data;
  }
  DoubleArray lat=BigArrays.NON_RECYCLING_INSTANCE.newDoubleArray(128);
  DoubleArray lon=BigArrays.NON_RECYCLING_INSTANCE.newDoubleArray(128);
  final float acceptableTransientOverheadRatio=fieldDataType.getSettings().getAsFloat("acceptable_transient_overhead_ratio",OrdinalsBuilder.DEFAULT_ACCEPTABLE_OVERHEAD_RATIO);
  boolean success=false;
  try (OrdinalsBuilder builder=new OrdinalsBuilder(terms.size(),reader.maxDoc(),acceptableTransientOverheadRatio)){
    final GeoPointEnum iter=new GeoPointEnum(builder.buildFromTerms(terms.iterator()));
    GeoPoint point;
    long numTerms=0;
    while ((point=iter.next()) != null) {
      lat=BigArrays.NON_RECYCLING_INSTANCE.resize(lat,numTerms + 1);
      lon=BigArrays.NON_RECYCLING_INSTANCE.resize(lon,numTerms + 1);
      lat.set(numTerms,point.getLat());
      lon.set(numTerms,point.getLon());
      ++numTerms;
    }
    lat=BigArrays.NON_RECYCLING_INSTANCE.resize(lat,numTerms);
    lon=BigArrays.NON_RECYCLING_INSTANCE.resize(lon,numTerms);
    Ordinals build=builder.build(fieldDataType.getSettings());
    RandomAccessOrds ordinals=build.ordinals();
    if (!(FieldData.isMultiValued(ordinals) || CommonSettings.getMemoryStorageHint(fieldDataType) == CommonSettings.MemoryStorageFormat.ORDINALS)) {
      int maxDoc=reader.maxDoc();
      DoubleArray sLat=BigArrays.NON_RECYCLING_INSTANCE.newDoubleArray(reader.maxDoc());
      DoubleArray sLon=BigArrays.NON_RECYCLING_INSTANCE.newDoubleArray(reader.maxDoc());
      for (int i=0; i < maxDoc; i++) {
        ordinals.setDocument(i);
        long nativeOrdinal=ordinals.nextOrd();
        if (nativeOrdinal != RandomAccessOrds.NO_MORE_ORDS) {
          sLat.set(i,lat.get(nativeOrdinal));
          sLon.set(i,lon.get(nativeOrdinal));
        }
      }
      BitSet set=builder.buildDocsWithValuesSet();
      data=new GeoPointDoubleArrayAtomicFieldData.Single(sLon,sLat,set);
    }
 else {
      data=new GeoPointDoubleArrayAtomicFieldData.WithOrdinals(lon,lat,build,reader.maxDoc());
    }
    success=true;
    return data;
  }
  finally {
    if (success) {
      estimator.afterLoad(null,data.ramBytesUsed());
    }
  }
}
