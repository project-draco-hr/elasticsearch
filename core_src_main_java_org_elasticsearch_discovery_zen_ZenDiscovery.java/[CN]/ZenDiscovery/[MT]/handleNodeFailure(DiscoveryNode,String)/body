{
  if (lifecycleState() != Lifecycle.State.STARTED) {
    return;
  }
  if (!localNodeMaster()) {
    return;
  }
  clusterService.submitStateUpdateTask("zen-disco-node_failed(" + node + "), reason "+ reason,new ClusterStateUpdateTask(Priority.IMMEDIATE){
    @Override public ClusterState execute(    ClusterState currentState){
      if (currentState.nodes().get(node.getId()) == null) {
        logger.debug("node [{}] already removed from cluster state. ignoring.",node);
        return currentState;
      }
      DiscoveryNodes.Builder builder=DiscoveryNodes.builder(currentState.nodes()).remove(node.getId());
      currentState=ClusterState.builder(currentState).nodes(builder).build();
      if (!electMaster.hasEnoughMasterNodes(currentState.nodes())) {
        return rejoin(currentState,"not enough master nodes");
      }
      RoutingAllocation.Result routingResult=routingService.getAllocationService().reroute(ClusterState.builder(currentState).build(),"[" + node + "] failed");
      return ClusterState.builder(currentState).routingResult(routingResult).build();
    }
    @Override public void onNoLongerMaster(    String source){
    }
    @Override public void onFailure(    String source,    Throwable t){
      logger.error("unexpected failure during [{}]",t,source);
    }
    @Override public void clusterStateProcessed(    String source,    ClusterState oldState,    ClusterState newState){
    }
  }
);
}
