{
  if (!transportService.addressSupported(node.getAddress().getClass())) {
    logger.warn("received a wrong address type from [{}], ignoring...",node);
  }
 else   if (nodeJoinController == null) {
    throw new IllegalStateException("discovery module is not yet started");
  }
 else {
    Version minimumNodeJoinVersion=localNode().getVersion().minimumCompatibilityVersion();
    if (node.getVersion().before(minimumNodeJoinVersion)) {
      callback.onFailure(new IllegalStateException("Can't handle join request from a node with a version [" + node.getVersion() + "] that is lower than the minimum compatible version ["+ minimumNodeJoinVersion.minimumCompatibilityVersion()+ "]"));
      return;
    }
    transportService.connectToNode(node);
    try {
      membership.sendValidateJoinRequestBlocking(node,state,joinTimeout);
    }
 catch (    Exception e) {
      logger.warn("failed to validate incoming join request from node [{}]",e,node);
      callback.onFailure(new IllegalStateException("failure when sending a validation request to node",e));
      return;
    }
    nodeJoinController.handleJoinRequest(node,callback);
  }
}
