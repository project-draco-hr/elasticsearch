{
  if (lifecycleState() != Lifecycle.State.STARTED) {
    return;
  }
  final int prevMinimumMasterNode=ZenDiscovery.this.electMaster.minimumMasterNodes();
  ZenDiscovery.this.electMaster.minimumMasterNodes(minimumMasterNodes);
  if (!localNodeMaster()) {
    return;
  }
  clusterService.submitStateUpdateTask("zen-disco-minimum_master_nodes_changed",new ClusterStateUpdateTask(Priority.IMMEDIATE){
    @Override public ClusterState execute(    ClusterState currentState){
      if (!electMaster.hasEnoughMasterNodes(currentState.nodes())) {
        return rejoin(currentState,"not enough master nodes on change of minimum_master_nodes from [" + prevMinimumMasterNode + "] to ["+ minimumMasterNodes+ "]");
      }
      return currentState;
    }
    @Override public void onNoLongerMaster(    String source){
    }
    @Override public void onFailure(    String source,    Throwable t){
      logger.error("unexpected failure during [{}]",t,source);
    }
    @Override public void clusterStateProcessed(    String source,    ClusterState oldState,    ClusterState newState){
      electMaster.logMinimumMasterNodesWarningIfNecessary(oldState,newState);
    }
  }
);
}
