{
  if (lifecycleState() != Lifecycle.State.STARTED) {
    return;
  }
  if (localNodeMaster()) {
    return;
  }
  logger.info("master_left [{}], reason [{}]",cause,masterNode,reason);
  clusterService.submitStateUpdateTask("zen-disco-master_failed (" + masterNode + ")",new ClusterStateUpdateTask(Priority.IMMEDIATE){
    @Override public boolean runOnlyOnMaster(){
      return false;
    }
    @Override public ClusterState execute(    ClusterState currentState){
      if (!masterNode.getId().equals(currentState.nodes().masterNodeId())) {
        return currentState;
      }
      DiscoveryNodes discoveryNodes=DiscoveryNodes.builder(currentState.nodes()).remove(masterNode.getId()).masterNodeId(null).build();
      publishClusterState.pendingStatesQueue().failAllStatesAndClear(new ElasticsearchException("master left [{}]",reason));
      return rejoin(ClusterState.builder(currentState).nodes(discoveryNodes).build(),"master left (reason = " + reason + ")");
    }
    @Override public void onFailure(    String source,    Throwable t){
      logger.error("unexpected failure during [{}]",t,source);
    }
    @Override public void clusterStateProcessed(    String source,    ClusterState oldState,    ClusterState newState){
    }
  }
);
}
