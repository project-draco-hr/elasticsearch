{
  if (lifecycleState() != Lifecycle.State.STARTED) {
    return;
  }
  if (localNodeMaster()) {
    return;
  }
  logger.info(new ParameterizedMessage("master_left [{}], reason [{}]",masterNode,reason),cause);
  clusterService.submitStateUpdateTask("master_failed (" + masterNode + ")",new ClusterStateUpdateTask(Priority.IMMEDIATE){
    @Override public boolean runOnlyOnMaster(){
      return false;
    }
    @Override public ClusterState execute(    ClusterState currentState){
      if (!masterNode.equals(currentState.nodes().getMasterNode())) {
        return currentState;
      }
      DiscoveryNodes discoveryNodes=DiscoveryNodes.builder(currentState.nodes()).remove(masterNode).masterNodeId(null).build();
      publishClusterState.pendingStatesQueue().failAllStatesAndClear(new ElasticsearchException("master left [{}]",reason));
      return rejoin(ClusterState.builder(currentState).nodes(discoveryNodes).build(),"master left (reason = " + reason + ")");
    }
    @Override public void onFailure(    String source,    Exception e){
      logger.error(new ParameterizedMessage("unexpected failure during [{}]",source),e);
    }
    @Override public void clusterStateProcessed(    String source,    ClusterState oldState,    ClusterState newState){
    }
  }
);
}
