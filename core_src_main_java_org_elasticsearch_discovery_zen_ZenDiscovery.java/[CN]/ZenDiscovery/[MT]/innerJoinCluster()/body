{
  DiscoveryNode masterNode=null;
  final Thread currentThread=Thread.currentThread();
  nodeJoinController.startAccumulatingJoins();
  while (masterNode == null && joinThreadControl.joinThreadActive(currentThread)) {
    masterNode=findMaster();
  }
  if (!joinThreadControl.joinThreadActive(currentThread)) {
    logger.trace("thread is no longer in currentJoinThread. Stopping.");
    return;
  }
  if (clusterService.localNode().equals(masterNode)) {
    final int requiredJoins=Math.max(0,electMaster.minimumMasterNodes() - 1);
    logger.debug("elected as master, waiting for incoming joins ([{}] needed)",requiredJoins);
    nodeJoinController.waitToBeElectedAsMaster(requiredJoins,masterElectionWaitForJoinsTimeout,new NodeJoinController.Callback(){
      @Override public void onElectedAsMaster(      ClusterState state){
        joinThreadControl.markThreadAsDone(currentThread);
        nodesFD.updateNodesAndPing(state);
        sendInitialStateEventIfNeeded();
        long count=clusterJoinsCounter.incrementAndGet();
        logger.trace("cluster joins counter set to [{}] (elected as master)",count);
      }
      @Override public void onFailure(      Throwable t){
        logger.trace("failed while waiting for nodes to join, rejoining",t);
        joinThreadControl.markThreadAsDoneAndStartNew(currentThread);
      }
    }
);
  }
 else {
    nodeJoinController.stopAccumulatingJoins();
    final boolean success=joinElectedMaster(masterNode);
    final DiscoveryNode finalMasterNode=masterNode;
    clusterService.submitStateUpdateTask("finalize_join (" + masterNode + ")",new ClusterStateNonMasterUpdateTask(){
      @Override public ClusterState execute(      ClusterState currentState) throws Exception {
        if (!success) {
          joinThreadControl.markThreadAsDoneAndStartNew(currentThread);
          return currentState;
        }
        if (currentState.getNodes().masterNode() == null) {
          logger.debug("no master node is set, despite of join request completing. retrying pings.");
          joinThreadControl.markThreadAsDoneAndStartNew(currentThread);
          return currentState;
        }
        if (!currentState.getNodes().masterNode().equals(finalMasterNode)) {
          return joinThreadControl.stopRunningThreadAndRejoin(currentState,"master_switched_while_finalizing_join");
        }
        joinThreadControl.markThreadAsDone(currentThread);
        return currentState;
      }
      @Override public void onFailure(      String source,      @Nullable Throwable t){
        logger.error("unexpected error while trying to finalize cluster join",t);
        joinThreadControl.markThreadAsDoneAndStartNew(currentThread);
      }
    }
);
  }
}
