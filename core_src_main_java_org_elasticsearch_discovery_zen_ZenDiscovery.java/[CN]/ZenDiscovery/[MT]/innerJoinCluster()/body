{
  DiscoveryNode masterNode=null;
  final Thread currentThread=Thread.currentThread();
  while (masterNode == null && joinThreadControl.joinThreadActive(currentThread)) {
    masterNode=findMaster();
  }
  if (!joinThreadControl.joinThreadActive(currentThread)) {
    logger.trace("thread is no longer in currentJoinThread. Stopping.");
    return;
  }
  if (clusterService.localNode().equals(masterNode)) {
    clusterService.submitStateUpdateTask("zen-disco-join (elected_as_master)",Priority.IMMEDIATE,new ProcessedClusterStateNonMasterUpdateTask(){
      @Override public ClusterState execute(      ClusterState currentState){
        if (currentState.nodes().masterNode() != null) {
          logger.trace("join thread elected local node as master, but there is already a master in place: {}",currentState.nodes().masterNode());
          return currentState;
        }
        DiscoveryNodes.Builder builder=new DiscoveryNodes.Builder(currentState.nodes()).masterNodeId(currentState.nodes().localNode().id());
        ClusterBlocks clusterBlocks=ClusterBlocks.builder().blocks(currentState.blocks()).removeGlobalBlock(discoverySettings.getNoMasterBlock()).build();
        currentState=ClusterState.builder(currentState).nodes(builder).blocks(clusterBlocks).build();
        RoutingAllocation.Result result=allocationService.reroute(currentState);
        return ClusterState.builder(currentState).routingResult(result).build();
      }
      @Override public void onFailure(      String source,      Throwable t){
        logger.error("unexpected failure during [{}]",t,source);
        joinThreadControl.markThreadAsDoneAndStartNew(currentThread);
      }
      @Override public void clusterStateProcessed(      String source,      ClusterState oldState,      ClusterState newState){
        if (newState.nodes().localNodeMaster()) {
          joinThreadControl.markThreadAsDone(currentThread);
          nodesFD.updateNodesAndPing(newState);
        }
 else {
          joinThreadControl.markThreadAsDoneAndStartNew(currentThread);
        }
        sendInitialStateEventIfNeeded();
        long count=clusterJoinsCounter.incrementAndGet();
        logger.trace("cluster joins counter set to [{}] (elected as master)",count);
      }
    }
);
  }
 else {
    final boolean success=joinElectedMaster(masterNode);
    final DiscoveryNode finalMasterNode=masterNode;
    clusterService.submitStateUpdateTask("finalize_join (" + masterNode + ")",new ClusterStateNonMasterUpdateTask(){
      @Override public ClusterState execute(      ClusterState currentState) throws Exception {
        if (!success) {
          joinThreadControl.markThreadAsDoneAndStartNew(currentThread);
          return currentState;
        }
        if (currentState.getNodes().masterNode() == null) {
          logger.debug("no master node is set, despite of join request completing. retrying pings.");
          joinThreadControl.markThreadAsDoneAndStartNew(currentThread);
          return currentState;
        }
        if (!currentState.getNodes().masterNode().equals(finalMasterNode)) {
          return joinThreadControl.stopRunningThreadAndRejoin(currentState,"master_switched_while_finalizing_join");
        }
        joinThreadControl.markThreadAsDone(currentThread);
        return currentState;
      }
      @Override public void onFailure(      String source,      @Nullable Throwable t){
        logger.error("unexpected error while trying to finalize cluster join",t);
        joinThreadControl.markThreadAsDoneAndStartNew(currentThread);
      }
    }
);
  }
}
