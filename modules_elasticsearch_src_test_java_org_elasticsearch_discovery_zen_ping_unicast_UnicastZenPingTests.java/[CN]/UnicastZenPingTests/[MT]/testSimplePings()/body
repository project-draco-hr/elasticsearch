{
  ThreadPool threadPool=new CachedThreadPool();
  TimerService timerService=new TimerService(threadPool);
  ClusterName clusterName=new ClusterName("test");
  NettyTransport transportA=new NettyTransport(threadPool);
  final TransportService transportServiceA=new TransportService(transportA,threadPool).start();
  final DiscoveryNode nodeA=new DiscoveryNode("A",transportServiceA.boundAddress().publishAddress());
  InetSocketTransportAddress addressA=(InetSocketTransportAddress)transportA.boundAddress().publishAddress();
  NettyTransport transportB=new NettyTransport(threadPool);
  final TransportService transportServiceB=new TransportService(transportB,threadPool).start();
  final DiscoveryNode nodeB=new DiscoveryNode("B",transportServiceA.boundAddress().publishAddress());
  InetSocketTransportAddress addressB=(InetSocketTransportAddress)transportB.boundAddress().publishAddress();
  Settings hostsSettings=ImmutableSettings.settingsBuilder().putArray("discovery.zen.ping.unicast.hosts",addressA.address().getAddress().getHostAddress() + ":" + addressA.address().getPort(),addressB.address().getAddress().getHostAddress() + ":" + addressB.address().getPort()).build();
  UnicastZenPing zenPingA=new UnicastZenPing(hostsSettings,threadPool,transportServiceA,clusterName);
  zenPingA.setNodesProvider(new DiscoveryNodesProvider(){
    @Override public DiscoveryNodes nodes(){
      return DiscoveryNodes.newNodesBuilder().put(nodeA).localNodeId("A").build();
    }
  }
);
  zenPingA.start();
  UnicastZenPing zenPingB=new UnicastZenPing(hostsSettings,threadPool,transportServiceB,clusterName);
  zenPingB.setNodesProvider(new DiscoveryNodesProvider(){
    @Override public DiscoveryNodes nodes(){
      return DiscoveryNodes.newNodesBuilder().put(nodeB).localNodeId("B").build();
    }
  }
);
  zenPingB.start();
  try {
    ZenPing.PingResponse[] pingResponses=zenPingA.pingAndWait(TimeValue.timeValueSeconds(1));
    assertThat(pingResponses.length,equalTo(1));
    assertThat(pingResponses[0].target().id(),equalTo("B"));
  }
  finally {
    zenPingA.close();
    zenPingB.close();
    transportServiceA.close();
    transportServiceB.close();
    threadPool.shutdown();
  }
}
