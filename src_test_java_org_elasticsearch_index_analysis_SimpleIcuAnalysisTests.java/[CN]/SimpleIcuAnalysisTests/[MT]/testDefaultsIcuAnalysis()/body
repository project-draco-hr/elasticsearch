{
  Index index=new Index("test");
  Injector parentInjector=new ModulesBuilder().add(new SettingsModule(EMPTY_SETTINGS),new EnvironmentModule(new Environment(EMPTY_SETTINGS)),new IndicesAnalysisModule()).createInjector();
  Injector injector=new ModulesBuilder().add(new IndexSettingsModule(index,EMPTY_SETTINGS),new IndexNameModule(index),new AnalysisModule(EMPTY_SETTINGS,parentInjector.getInstance(IndicesAnalysisService.class)).addProcessor(new IcuAnalysisBinderProcessor())).createChildInjector(parentInjector);
  AnalysisService analysisService=injector.getInstance(AnalysisService.class);
  TokenizerFactory tokenizerFactory=analysisService.tokenizer("icu_tokenizer");
  assertThat(tokenizerFactory,instanceOf(IcuTokenizerFactory.class));
  TokenFilterFactory filterFactory=analysisService.tokenFilter("icu_normalizer");
  assertThat(filterFactory,instanceOf(IcuNormalizerTokenFilterFactory.class));
  filterFactory=analysisService.tokenFilter("icu_folding");
  assertThat(filterFactory,instanceOf(IcuFoldingTokenFilterFactory.class));
  filterFactory=analysisService.tokenFilter("icu_collation");
  assertThat(filterFactory,instanceOf(IcuCollationTokenFilterFactory.class));
  filterFactory=analysisService.tokenFilter("icu_transform");
  assertThat(filterFactory,instanceOf(IcuTransformTokenFilterFactory.class));
}
