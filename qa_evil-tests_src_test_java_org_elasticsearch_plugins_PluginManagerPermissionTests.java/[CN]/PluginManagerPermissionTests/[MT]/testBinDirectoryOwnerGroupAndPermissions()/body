{
  assumeTrue("File system does not support permissions, skipping",supportsPermissions);
  URL pluginUrl=createPlugin(true,false);
  PluginManager pluginManager=new PluginManager(environment,pluginUrl,PluginManager.OutputMode.VERBOSE,TimeValue.timeValueSeconds(10));
  pluginManager.downloadAndExtract(pluginName,terminal,true);
  PosixFileAttributes parentFileAttributes=Files.getFileAttributeView(environment.binFile(),PosixFileAttributeView.class).readAttributes();
  Path binPath=environment.binFile().resolve(pluginName);
  PosixFileAttributes pluginBinDirAttributes=Files.getFileAttributeView(binPath,PosixFileAttributeView.class).readAttributes();
  assertThat(pluginBinDirAttributes.owner(),equalTo(parentFileAttributes.owner()));
  assertThat(pluginBinDirAttributes.group(),equalTo(parentFileAttributes.group()));
  assertThat(pluginBinDirAttributes.permissions(),equalTo(parentFileAttributes.permissions()));
  Path executableFile=binPath.resolve("my-binary");
  PosixFileAttributes pluginExecutableFileAttributes=Files.getFileAttributeView(executableFile,PosixFileAttributeView.class).readAttributes();
  assertThat(pluginExecutableFileAttributes.owner(),equalTo(parentFileAttributes.owner()));
  assertThat(pluginExecutableFileAttributes.group(),equalTo(parentFileAttributes.group()));
  Set<PosixFilePermission> expectedFilePermissions=new HashSet<>();
  expectedFilePermissions.add(OWNER_EXECUTE);
  expectedFilePermissions.add(GROUP_EXECUTE);
  expectedFilePermissions.add(OTHERS_EXECUTE);
  for (  PosixFilePermission parentPermission : parentFileAttributes.permissions()) {
switch (parentPermission) {
case OWNER_EXECUTE:
case GROUP_EXECUTE:
case OTHERS_EXECUTE:
      break;
default :
    expectedFilePermissions.add(parentPermission);
}
}
assertThat(pluginExecutableFileAttributes.permissions(),equalTo(expectedFilePermissions));
}
