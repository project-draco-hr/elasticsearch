{
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
    Filter filter=null;
    ScoreFunction scoreFunction=null;
    Float functionWeight=null;
    if (token != XContentParser.Token.START_OBJECT) {
      throw new QueryParsingException(parseContext.index(),NAME + ": malformed query, expected a " + XContentParser.Token.START_OBJECT+ " while parsing functions but got a "+ token);
    }
 else {
      while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
        if (token == XContentParser.Token.FIELD_NAME) {
          currentFieldName=parser.currentName();
        }
 else         if (WEIGHT_FIELD.match(currentFieldName)) {
          functionWeight=parser.floatValue();
        }
 else {
          if ("filter".equals(currentFieldName)) {
            filter=parseContext.parseInnerFilter();
          }
 else {
            ScoreFunctionParser functionParser=functionParserMapper.get(parseContext.index(),currentFieldName);
            scoreFunction=functionParser.parse(parseContext,parser);
          }
        }
      }
      if (functionWeight != null) {
        scoreFunction=new WeightFactorFunction(functionWeight,scoreFunction);
      }
    }
    if (filter == null) {
      filter=Queries.MATCH_ALL_FILTER;
    }
    if (scoreFunction == null) {
      throw new ElasticsearchParseException("function_score: One entry in functions list is missing a function.");
    }
    filterFunctions.add(new FiltersFunctionScoreQuery.FilterFunction(filter,scoreFunction));
  }
  return currentFieldName;
}
