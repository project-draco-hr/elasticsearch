{
  Path[] paths=pathsForPermissionsCheck(settings,env);
  if (paths == null || paths.length == 0) {
    return doExecute(settings,env);
  }
  Map<Path,Set<PosixFilePermission>> permissions=new HashMap<>(paths.length);
  Map<Path,String> owners=new HashMap<>(paths.length);
  Map<Path,String> groups=new HashMap<>(paths.length);
  if (paths != null && paths.length > 0) {
    for (    Path path : paths) {
      try {
        boolean supportsPosixPermissions=Environment.getFileStore(path).supportsFileAttributeView(PosixFileAttributeView.class);
        if (supportsPosixPermissions) {
          PosixFileAttributes attributes=Files.readAttributes(path,PosixFileAttributes.class);
          permissions.put(path,attributes.permissions());
          owners.put(path,attributes.owner().getName());
          groups.put(path,attributes.group().getName());
        }
      }
 catch (      IOException e) {
      }
    }
  }
  CliTool.ExitStatus status=doExecute(settings,env);
  for (  Map.Entry<Path,Set<PosixFilePermission>> entry : permissions.entrySet()) {
    if (!Files.exists(entry.getKey())) {
      continue;
    }
    Set<PosixFilePermission> permissionsBeforeWrite=entry.getValue();
    Set<PosixFilePermission> permissionsAfterWrite=Files.getPosixFilePermissions(entry.getKey());
    if (!permissionsBeforeWrite.equals(permissionsAfterWrite)) {
      terminal.println(Terminal.Verbosity.SILENT,"WARNING: The file permissions of [" + entry.getKey() + "] have changed "+ "from ["+ PosixFilePermissions.toString(permissionsBeforeWrite)+ "] "+ "to ["+ PosixFilePermissions.toString(permissionsAfterWrite)+ "]");
      terminal.println(Terminal.Verbosity.SILENT,"Please ensure that the user account running Elasticsearch has read access to this file!");
    }
  }
  for (  Map.Entry<Path,String> entry : owners.entrySet()) {
    if (!Files.exists(entry.getKey())) {
      continue;
    }
    String ownerBeforeWrite=entry.getValue();
    String ownerAfterWrite=Files.getOwner(entry.getKey()).getName();
    if (!ownerAfterWrite.equals(ownerBeforeWrite)) {
      terminal.println(Terminal.Verbosity.SILENT,"WARNING: Owner of file [" + entry.getKey() + "] used to be ["+ ownerBeforeWrite+ "], but now is ["+ ownerAfterWrite+ "]");
    }
  }
  for (  Map.Entry<Path,String> entry : groups.entrySet()) {
    if (!Files.exists(entry.getKey())) {
      continue;
    }
    String groupBeforeWrite=entry.getValue();
    String groupAfterWrite=Files.readAttributes(entry.getKey(),PosixFileAttributes.class).group().getName();
    if (!groupAfterWrite.equals(groupBeforeWrite)) {
      terminal.println(Terminal.Verbosity.SILENT,"WARNING: Group of file [" + entry.getKey() + "] used to be ["+ groupBeforeWrite+ "], but now is ["+ groupAfterWrite+ "]");
    }
  }
  return status;
}
