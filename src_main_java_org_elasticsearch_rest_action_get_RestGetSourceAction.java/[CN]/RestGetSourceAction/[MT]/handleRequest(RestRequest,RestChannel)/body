{
  final GetRequest getRequest=new GetRequest(request.param("index"),request.param("type"),request.param("id"));
  getRequest.listenerThreaded(false);
  getRequest.operationThreaded(true);
  getRequest.refresh(request.paramAsBoolean("refresh",getRequest.refresh()));
  getRequest.routing(request.param("routing"));
  getRequest.parent(request.param("parent"));
  getRequest.preference(request.param("preference"));
  getRequest.realtime(request.paramAsBoolean("realtime",null));
  getRequest.fetchSourceContext(FetchSourceContext.parseFromRestRequest(request));
  if (getRequest.fetchSourceContext() != null && !getRequest.fetchSourceContext().fetchSource()) {
    try {
      ActionRequestValidationException validationError=new ActionRequestValidationException();
      validationError.addValidationError("fetching source can not be disabled");
      channel.sendResponse(new BytesRestResponse(channel,validationError));
    }
 catch (    IOException e) {
      logger.error("Failed to send failure response",e);
    }
  }
  client.get(getRequest,new RestResponseListener<GetResponse>(channel){
    @Override public RestResponse buildResponse(    GetResponse response) throws Exception {
      XContentBuilder builder=channel.newBuilder(response.getSourceInternal());
      if (!response.isExists()) {
        return new BytesRestResponse(NOT_FOUND,builder);
      }
 else {
        XContentHelper.writeDirect(response.getSourceInternal(),builder,request);
        return new BytesRestResponse(OK,builder);
      }
    }
  }
);
}
