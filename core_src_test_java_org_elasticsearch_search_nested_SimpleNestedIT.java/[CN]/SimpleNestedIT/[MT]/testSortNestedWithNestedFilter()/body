{
  assertAcked(prepareCreate("test").addMapping("type1",XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("grand_parent_values").field("type","long").endObject().startObject("parent").field("type","nested").startObject("properties").startObject("parent_values").field("type","long").endObject().startObject("child").field("type","nested").startObject("properties").startObject("child_values").field("type","long").endObject().endObject().endObject().endObject().endObject().endObject().endObject().endObject()));
  ensureGreen();
  client().prepareIndex("test","type1",Integer.toString(1)).setSource(jsonBuilder().startObject().field("grand_parent_values",1L).startObject("parent").field("filter",false).field("parent_values",1L).startObject("child").field("filter",true).field("child_values",1L).startObject("child_obj").field("value",1L).endObject().endObject().startObject("child").field("filter",false).field("child_values",6L).endObject().endObject().startObject("parent").field("filter",true).field("parent_values",2L).startObject("child").field("filter",false).field("child_values",-1L).endObject().startObject("child").field("filter",false).field("child_values",5L).endObject().endObject().endObject()).execute().actionGet();
  client().prepareIndex("test","type1",Integer.toString(2)).setSource(jsonBuilder().startObject().field("grand_parent_values",2L).startObject("parent").field("filter",false).field("parent_values",2L).startObject("child").field("filter",true).field("child_values",2L).startObject("child_obj").field("value",2L).endObject().endObject().startObject("child").field("filter",false).field("child_values",4L).endObject().endObject().startObject("parent").field("parent_values",3L).field("filter",true).startObject("child").field("child_values",-2L).field("filter",false).endObject().startObject("child").field("filter",false).field("child_values",3L).endObject().endObject().endObject()).execute().actionGet();
  client().prepareIndex("test","type1",Integer.toString(3)).setSource(jsonBuilder().startObject().field("grand_parent_values",3L).startObject("parent").field("parent_values",3L).field("filter",false).startObject("child").field("filter",true).field("child_values",3L).startObject("child_obj").field("value",3L).endObject().endObject().startObject("child").field("filter",false).field("child_values",1L).endObject().endObject().startObject("parent").field("parent_values",4L).field("filter",true).startObject("child").field("filter",false).field("child_values",-3L).endObject().startObject("child").field("filter",false).field("child_values",1L).endObject().endObject().endObject()).execute().actionGet();
  refresh();
  SearchResponse searchResponse=client().prepareSearch().setQuery(matchAllQuery()).addSort(SortBuilders.fieldSort("parent.child.child_values").setNestedPath("parent.child").order(SortOrder.ASC)).execute().actionGet();
  assertHitCount(searchResponse,3);
  assertThat(searchResponse.getHits().getHits().length,equalTo(3));
  assertThat(searchResponse.getHits().getHits()[0].getId(),equalTo("3"));
  assertThat(searchResponse.getHits().getHits()[0].sortValues()[0].toString(),equalTo("-3"));
  assertThat(searchResponse.getHits().getHits()[1].getId(),equalTo("2"));
  assertThat(searchResponse.getHits().getHits()[1].sortValues()[0].toString(),equalTo("-2"));
  assertThat(searchResponse.getHits().getHits()[2].getId(),equalTo("1"));
  assertThat(searchResponse.getHits().getHits()[2].sortValues()[0].toString(),equalTo("-1"));
  searchResponse=client().prepareSearch().setQuery(matchAllQuery()).addSort(SortBuilders.fieldSort("parent.child.child_values").setNestedPath("parent.child").setNestedFilter(QueryBuilders.termQuery("parent.child.filter",true)).order(SortOrder.ASC)).execute().actionGet();
  assertHitCount(searchResponse,3);
  assertThat(searchResponse.getHits().getHits().length,equalTo(3));
  assertThat(searchResponse.getHits().getHits()[0].getId(),equalTo("1"));
  assertThat(searchResponse.getHits().getHits()[0].sortValues()[0].toString(),equalTo("1"));
  assertThat(searchResponse.getHits().getHits()[1].getId(),equalTo("2"));
  assertThat(searchResponse.getHits().getHits()[1].sortValues()[0].toString(),equalTo("2"));
  assertThat(searchResponse.getHits().getHits()[2].getId(),equalTo("3"));
  assertThat(searchResponse.getHits().getHits()[2].sortValues()[0].toString(),equalTo("3"));
  searchResponse=client().prepareSearch().setQuery(matchAllQuery()).addSort(SortBuilders.fieldSort("parent.child.child_values").setNestedPath("parent.child").setNestedFilter(QueryBuilders.termQuery("parent.child.filter",true)).order(SortOrder.ASC)).execute().actionGet();
  assertHitCount(searchResponse,3);
  assertThat(searchResponse.getHits().getHits().length,equalTo(3));
  assertThat(searchResponse.getHits().getHits()[0].getId(),equalTo("1"));
  assertThat(searchResponse.getHits().getHits()[0].sortValues()[0].toString(),equalTo("1"));
  assertThat(searchResponse.getHits().getHits()[1].getId(),equalTo("2"));
  assertThat(searchResponse.getHits().getHits()[1].sortValues()[0].toString(),equalTo("2"));
  assertThat(searchResponse.getHits().getHits()[2].getId(),equalTo("3"));
  assertThat(searchResponse.getHits().getHits()[2].sortValues()[0].toString(),equalTo("3"));
  searchResponse=client().prepareSearch().setQuery(matchAllQuery()).addSort(SortBuilders.fieldSort("parent.parent_values").setNestedPath("parent.child").setNestedFilter(QueryBuilders.termQuery("parent.filter",false)).order(SortOrder.ASC)).execute().actionGet();
  assertHitCount(searchResponse,3);
  assertThat(searchResponse.getHits().getHits().length,equalTo(3));
  assertThat(searchResponse.getHits().getHits()[0].getId(),equalTo("1"));
  assertThat(searchResponse.getHits().getHits()[0].sortValues()[0].toString(),equalTo("1"));
  assertThat(searchResponse.getHits().getHits()[1].getId(),equalTo("2"));
  assertThat(searchResponse.getHits().getHits()[1].sortValues()[0].toString(),equalTo("2"));
  assertThat(searchResponse.getHits().getHits()[2].getId(),equalTo("3"));
  assertThat(searchResponse.getHits().getHits()[2].sortValues()[0].toString(),equalTo("3"));
  searchResponse=client().prepareSearch().setQuery(matchAllQuery()).addSort(SortBuilders.fieldSort("parent.child.child_values").setNestedPath("parent.child").setNestedFilter(QueryBuilders.termQuery("parent.filter",false)).order(SortOrder.ASC)).execute().actionGet();
  assertHitCount(searchResponse,3);
  assertThat(searchResponse.getHits().getHits().length,equalTo(3));
  searchResponse=client().prepareSearch().setQuery(matchAllQuery()).addSort(SortBuilders.fieldSort("parent.child.child_obj.value").setNestedPath("parent.child").setNestedFilter(QueryBuilders.termQuery("parent.child.filter",true)).order(SortOrder.ASC)).execute().actionGet();
  assertHitCount(searchResponse,3);
  assertThat(searchResponse.getHits().getHits().length,equalTo(3));
  assertThat(searchResponse.getHits().getHits()[0].getId(),equalTo("1"));
  assertThat(searchResponse.getHits().getHits()[0].sortValues()[0].toString(),equalTo("1"));
  assertThat(searchResponse.getHits().getHits()[1].getId(),equalTo("2"));
  assertThat(searchResponse.getHits().getHits()[1].sortValues()[0].toString(),equalTo("2"));
  assertThat(searchResponse.getHits().getHits()[2].getId(),equalTo("3"));
  assertThat(searchResponse.getHits().getHits()[2].sortValues()[0].toString(),equalTo("3"));
  searchResponse=client().prepareSearch().setQuery(matchAllQuery()).addSort(SortBuilders.fieldSort("parent.child.child_values").setNestedPath("parent.child").sortMode("sum").order(SortOrder.ASC)).execute().actionGet();
  assertHitCount(searchResponse,3);
  assertThat(searchResponse.getHits().getHits().length,equalTo(3));
  assertThat(searchResponse.getHits().getHits()[0].getId(),equalTo("3"));
  assertThat(searchResponse.getHits().getHits()[0].sortValues()[0].toString(),equalTo("2"));
  assertThat(searchResponse.getHits().getHits()[1].getId(),equalTo("2"));
  assertThat(searchResponse.getHits().getHits()[1].sortValues()[0].toString(),equalTo("7"));
  assertThat(searchResponse.getHits().getHits()[2].getId(),equalTo("1"));
  assertThat(searchResponse.getHits().getHits()[2].sortValues()[0].toString(),equalTo("11"));
  searchResponse=client().prepareSearch().setQuery(matchAllQuery()).addSort(SortBuilders.fieldSort("parent.child.child_values").setNestedPath("parent.child").sortMode("sum").order(SortOrder.DESC)).execute().actionGet();
  assertHitCount(searchResponse,3);
  assertThat(searchResponse.getHits().getHits().length,equalTo(3));
  assertThat(searchResponse.getHits().getHits()[0].getId(),equalTo("1"));
  assertThat(searchResponse.getHits().getHits()[0].sortValues()[0].toString(),equalTo("11"));
  assertThat(searchResponse.getHits().getHits()[1].getId(),equalTo("2"));
  assertThat(searchResponse.getHits().getHits()[1].sortValues()[0].toString(),equalTo("7"));
  assertThat(searchResponse.getHits().getHits()[2].getId(),equalTo("3"));
  assertThat(searchResponse.getHits().getHits()[2].sortValues()[0].toString(),equalTo("2"));
  searchResponse=client().prepareSearch().setQuery(matchAllQuery()).addSort(SortBuilders.fieldSort("parent.child.child_values").setNestedPath("parent.child").setNestedFilter(QueryBuilders.termQuery("parent.child.filter",true)).sortMode("sum").order(SortOrder.ASC)).execute().actionGet();
  assertHitCount(searchResponse,3);
  assertThat(searchResponse.getHits().getHits().length,equalTo(3));
  assertThat(searchResponse.getHits().getHits()[0].getId(),equalTo("1"));
  assertThat(searchResponse.getHits().getHits()[0].sortValues()[0].toString(),equalTo("1"));
  assertThat(searchResponse.getHits().getHits()[1].getId(),equalTo("2"));
  assertThat(searchResponse.getHits().getHits()[1].sortValues()[0].toString(),equalTo("2"));
  assertThat(searchResponse.getHits().getHits()[2].getId(),equalTo("3"));
  assertThat(searchResponse.getHits().getHits()[2].sortValues()[0].toString(),equalTo("3"));
  searchResponse=client().prepareSearch().setQuery(matchAllQuery()).addSort(SortBuilders.fieldSort("parent.child.child_values").setNestedPath("parent.child").sortMode("avg").order(SortOrder.ASC)).execute().actionGet();
  assertHitCount(searchResponse,3);
  assertThat(searchResponse.getHits().getHits().length,equalTo(3));
  assertThat(searchResponse.getHits().getHits()[0].getId(),equalTo("3"));
  assertThat(searchResponse.getHits().getHits()[0].sortValues()[0].toString(),equalTo("1"));
  assertThat(searchResponse.getHits().getHits()[1].getId(),equalTo("2"));
  assertThat(searchResponse.getHits().getHits()[1].sortValues()[0].toString(),equalTo("2"));
  assertThat(searchResponse.getHits().getHits()[2].getId(),equalTo("1"));
  assertThat(searchResponse.getHits().getHits()[2].sortValues()[0].toString(),equalTo("3"));
  searchResponse=client().prepareSearch().setQuery(matchAllQuery()).addSort(SortBuilders.fieldSort("parent.child.child_values").setNestedPath("parent.child").sortMode("avg").order(SortOrder.DESC)).execute().actionGet();
  assertHitCount(searchResponse,3);
  assertThat(searchResponse.getHits().getHits().length,equalTo(3));
  assertThat(searchResponse.getHits().getHits()[0].getId(),equalTo("1"));
  assertThat(searchResponse.getHits().getHits()[0].sortValues()[0].toString(),equalTo("3"));
  assertThat(searchResponse.getHits().getHits()[1].getId(),equalTo("2"));
  assertThat(searchResponse.getHits().getHits()[1].sortValues()[0].toString(),equalTo("2"));
  assertThat(searchResponse.getHits().getHits()[2].getId(),equalTo("3"));
  assertThat(searchResponse.getHits().getHits()[2].sortValues()[0].toString(),equalTo("1"));
  searchResponse=client().prepareSearch().setQuery(matchAllQuery()).addSort(SortBuilders.fieldSort("parent.child.child_values").setNestedPath("parent.child").setNestedFilter(QueryBuilders.termQuery("parent.child.filter",true)).sortMode("avg").order(SortOrder.ASC)).execute().actionGet();
  assertHitCount(searchResponse,3);
  assertThat(searchResponse.getHits().getHits().length,equalTo(3));
  assertThat(searchResponse.getHits().getHits()[0].getId(),equalTo("1"));
  assertThat(searchResponse.getHits().getHits()[0].sortValues()[0].toString(),equalTo("1"));
  assertThat(searchResponse.getHits().getHits()[1].getId(),equalTo("2"));
  assertThat(searchResponse.getHits().getHits()[1].sortValues()[0].toString(),equalTo("2"));
  assertThat(searchResponse.getHits().getHits()[2].getId(),equalTo("3"));
  assertThat(searchResponse.getHits().getHits()[2].sortValues()[0].toString(),equalTo("3"));
}
