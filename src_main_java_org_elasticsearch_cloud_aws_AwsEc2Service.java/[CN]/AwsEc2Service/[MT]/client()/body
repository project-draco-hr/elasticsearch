{
  if (client != null) {
    return client;
  }
  ClientConfiguration clientConfiguration=new ClientConfiguration();
  String protocol=componentSettings.get("protocol","http").toLowerCase();
  if ("http".equals(protocol)) {
    clientConfiguration.setProtocol(Protocol.HTTP);
  }
 else   if ("https".equals(protocol)) {
    clientConfiguration.setProtocol(Protocol.HTTPS);
  }
 else {
    throw new ElasticSearchIllegalArgumentException("No protocol supported [" + protocol + "], can either be [http] or [https]");
  }
  String account=componentSettings.get("access_key",settings.get("cloud.account"));
  String key=componentSettings.get("secret_key",settings.get("cloud.key"));
  String proxyHost=componentSettings.get("proxy_host");
  if (proxyHost != null) {
    String portString=componentSettings.get("proxy_port","80");
    Integer proxyPort;
    try {
      proxyPort=Integer.parseInt(portString,10);
    }
 catch (    NumberFormatException ex) {
      throw new ElasticSearchIllegalArgumentException("The configured proxy port value [" + portString + "] is invalid",ex);
    }
    clientConfiguration.withProxyHost(proxyHost).setProxyPort(proxyPort);
  }
  AWSCredentialsProvider credentials;
  if (account == null && key == null) {
    credentials=new AWSCredentialsProviderChain(new EnvironmentVariableCredentialsProvider(),new SystemPropertiesCredentialsProvider(),new InstanceProfileCredentialsProvider());
  }
 else {
    credentials=new AWSCredentialsProviderChain(new StaticCredentialsProvider(new BasicAWSCredentials(account,key)));
  }
  this.client=new AmazonEC2Client(credentials,clientConfiguration);
  if (componentSettings.get("ec2.endpoint") != null) {
    client.setEndpoint(componentSettings.get("ec2.endpoint"));
  }
 else   if (componentSettings.get("region") != null) {
    String region=componentSettings.get("region").toLowerCase();
    String endpoint;
    if (region.equals("us-east-1") || region.equals("us-east")) {
      endpoint="ec2.us-east-1.amazonaws.com";
    }
 else     if (region.equals("us-west") || region.equals("us-west-1")) {
      endpoint="ec2.us-west-1.amazonaws.com";
    }
 else     if (region.equals("us-west-2")) {
      endpoint="ec2.us-west-2.amazonaws.com";
    }
 else     if (region.equals("ap-southeast")) {
      endpoint="ec2.ap-southeast-1.amazonaws.com";
    }
 else     if (region.equals("ap-southeast-1")) {
      endpoint="ec2.ap-southeast-1.amazonaws.com";
    }
 else     if (region.equals("ap-northeast") || region.equals("ap-northeast-1")) {
      endpoint="ec2.ap-northeast-1.amazonaws.com";
    }
 else     if (region.equals("eu-west") || region.equals("eu-west-1")) {
      endpoint="ec2.eu-west-1.amazonaws.com";
    }
 else {
      throw new ElasticSearchIllegalArgumentException("No automatic endpoint could be derived from region [" + region + "]");
    }
    if (endpoint != null) {
      client.setEndpoint(endpoint);
    }
  }
  return this.client;
}
