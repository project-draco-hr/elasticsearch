{
  connectNodes(testNodes);
  CountDownLatch checkLatch=new CountDownLatch(1);
  ActionFuture<NodesResponse> future=startBlockingTestNodesAction(checkLatch);
  TestNode testNode=testNodes[randomIntBetween(0,testNodes.length - 1)];
  ListTasksRequest listTasksRequest=new ListTasksRequest();
  listTasksRequest.actions("testAction[n]");
  ListTasksResponse response=testNode.transportListTasksAction.execute(listTasksRequest).get();
  assertEquals(testNodes.length,response.getPerNodeTasks().size());
  for (  Map.Entry<DiscoveryNode,List<TaskInfo>> entry : response.getPerNodeTasks().entrySet()) {
    assertEquals(1,entry.getValue().size());
    assertNull(entry.getValue().get(0).getDescription());
  }
  listTasksRequest.detailed(true);
  response=testNode.transportListTasksAction.execute(listTasksRequest).get();
  assertEquals(testNodes.length,response.getPerNodeTasks().size());
  for (  Map.Entry<DiscoveryNode,List<TaskInfo>> entry : response.getPerNodeTasks().entrySet()) {
    assertEquals(1,entry.getValue().size());
    assertEquals("NodeRequest[Test Request, true]",entry.getValue().get(0).getDescription());
  }
  checkLatch.countDown();
  NodesResponse responses=future.get();
  assertEquals(0,responses.failureCount());
}
