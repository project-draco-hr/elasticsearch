{
  Settings settings=Settings.builder().put(MockTaskManager.USE_MOCK_TASK_MANAGER,true).build();
  setupTestNodes(settings);
  connectNodes(testNodes);
  TestNodesAction[] actions=new TestNodesAction[nodesCount];
  RecordingTaskManagerListener[] listeners=setupListeners(testNodes,"testAction*");
  for (int i=0; i < testNodes.length; i++) {
    final int node=i;
    actions[i]=new TestNodesAction(Settings.EMPTY,"testAction",clusterName,threadPool,testNodes[i].clusterService,testNodes[i].transportService){
      @Override protected NodeResponse nodeOperation(      NodeRequest request){
        logger.info("Action on node " + node);
        throw new RuntimeException("Test exception");
      }
    }
;
  }
  for (  TestNode testNode : testNodes) {
    assertEquals(0,testNode.transportService.getTaskManager().getTasks().size());
  }
  NodesRequest request=new NodesRequest("Test Request");
  NodesResponse responses=actions[0].execute(request).get();
  assertEquals(nodesCount,responses.failureCount());
  assertEquals(4,listeners[0].getEvents().size());
  assertEquals(2,listeners[0].getRegistrationEvents().size());
  assertEquals(2,listeners[0].getUnregistrationEvents().size());
  for (int i=1; i < listeners.length; i++) {
    assertEquals(2,listeners[i].getEvents().size());
    assertEquals(1,listeners[i].getRegistrationEvents().size());
    assertEquals(1,listeners[i].getUnregistrationEvents().size());
  }
}
