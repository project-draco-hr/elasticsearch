{
  setupTestNodes(Settings.EMPTY);
  connectNodes(testNodes);
  CountDownLatch checkLatch=new CountDownLatch(1);
  ActionFuture<NodesResponse> future=startBlockingTestNodesAction(checkLatch);
  String[] allNodes=new String[testNodes.length];
  for (int i=0; i < testNodes.length; i++) {
    allNodes[i]=testNodes[i].getNodeId();
  }
  int filterNodesSize=randomInt(allNodes.length);
  Set<String> filterNodes=new HashSet<>(randomSubsetOf(filterNodesSize,allNodes));
  logger.info("Filtering out nodes {} size: {}",filterNodes,filterNodesSize);
  TestTasksAction[] tasksActions=new TestTasksAction[nodesCount];
  for (int i=0; i < testNodes.length; i++) {
    final int node=i;
    tasksActions[i]=new TestTasksAction(CLUSTER_SETTINGS,"testTasksAction",threadPool,testNodes[i].clusterService,testNodes[i].transportService){
      @Override protected String[] filterNodeIds(      DiscoveryNodes nodes,      String[] nodesIds){
        String[] superNodes=super.filterNodeIds(nodes,nodesIds);
        List<String> filteredNodes=new ArrayList<>();
        for (        String node : superNodes) {
          if (filterNodes.contains(node) == false) {
            filteredNodes.add(node);
          }
        }
        return filteredNodes.toArray(new String[filteredNodes.size()]);
      }
      @Override protected TestTaskResponse taskOperation(      TestTasksRequest request,      Task task){
        return new TestTaskResponse(testNodes[node].getNodeId());
      }
    }
;
  }
  TestTasksRequest testTasksRequest=new TestTasksRequest();
  testTasksRequest.setActions("testAction[n]");
  TestTasksResponse response=tasksActions[randomIntBetween(0,nodesCount - 1)].execute(testTasksRequest).get();
  assertEquals(testNodes.length - filterNodes.size(),response.tasks.size());
  assertEquals(0,response.getTaskFailures().size());
  assertEquals(0,response.getNodeFailures().size());
  for (  TestTaskResponse taskResponse : response.tasks) {
    String nodeId=taskResponse.getStatus();
    assertFalse("Found response from filtered node " + nodeId,filterNodes.contains(nodeId));
  }
  checkLatch.countDown();
  NodesResponse responses=future.get();
  assertEquals(0,responses.failureCount());
}
