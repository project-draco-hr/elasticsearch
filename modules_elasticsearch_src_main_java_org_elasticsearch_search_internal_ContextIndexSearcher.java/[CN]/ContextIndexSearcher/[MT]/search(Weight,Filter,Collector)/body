{
  if (searchContext.parsedFilter() != null && Scopes.MAIN.equals(processingScope)) {
    collector=new FilteredCollector(collector,searchContext.parsedFilter());
  }
  if (searchContext.timeout() != null) {
    collector=new TimeLimitingCollector(collector,searchContext.timeout().millis());
  }
  if (scopeCollectors != null) {
    List<Collector> collectors=scopeCollectors.get(processingScope);
    if (collectors != null && !collectors.isEmpty()) {
      collector=new MultiCollector(collector,collectors.toArray(new Collector[collectors.size()]));
    }
  }
  if (searchContext.minimumScore() != null) {
    collector=new MinimumScoreCollector(collector,searchContext.minimumScore());
  }
  Filter combinedFilter;
  if (filter == null) {
    combinedFilter=searchContext.aliasFilter();
  }
 else {
    if (searchContext.aliasFilter() != null) {
      combinedFilter=new AndFilter(ImmutableList.of(filter,searchContext.aliasFilter()));
    }
 else {
      combinedFilter=filter;
    }
  }
  if (searchContext.timeout() != null) {
    searchContext.queryResult().searchTimedOut(false);
    try {
      super.search(weight,combinedFilter,collector);
    }
 catch (    TimeLimitingCollector.TimeExceededException e) {
      searchContext.queryResult().searchTimedOut(true);
    }
  }
 else {
    super.search(weight,combinedFilter,collector);
  }
}
