{
  boolean retry=true;
  while (retry) {
    retry=false;
    DiscoveryNode masterNode=broadPingTillMasterResolved();
    if (localNode.equals(masterNode)) {
      this.master=true;
      nodesFD.start();
      clusterService.submitStateUpdateTask("zen-disco-initial_connect(master)",new ProcessedClusterStateUpdateTask(){
        @Override public ClusterState execute(        ClusterState currentState){
          DiscoveryNodes.Builder builder=new DiscoveryNodes.Builder().localNodeId(localNode.id()).masterNodeId(localNode.id()).put(localNode);
          latestDiscoNodes=builder.build();
          return newClusterStateBuilder().state(currentState).nodes(builder).build();
        }
        @Override public void clusterStateProcessed(        ClusterState clusterState){
          sendInitialStateEventIfNeeded();
        }
      }
);
    }
 else {
      this.master=false;
      try {
        transportService.connectToNode(masterNode);
      }
 catch (      Exception e) {
        logger.warn("Failed to connect to master [{}], retrying...",e,masterNode);
        retry=true;
        continue;
      }
      try {
        membership.sendJoinRequestBlocking(masterNode,localNode,initialPingTimeout);
      }
 catch (      Exception e) {
        if (e instanceof ElasticSearchException) {
          logger.info("Failed to send join request to master [{}], reason [{}]",masterNode,((ElasticSearchException)e).getDetailedMessage());
        }
 else {
          logger.info("Failed to send join request to master [{}], reason [{}]",masterNode,e.getMessage());
        }
        if (logger.isTraceEnabled()) {
          logger.trace("Detailed failed reason",e);
        }
        retry=true;
        continue;
      }
      masterFD.start(masterNode,"initial_join");
    }
    if (retry) {
      if (!lifecycle.started()) {
        return;
      }
    }
  }
}
