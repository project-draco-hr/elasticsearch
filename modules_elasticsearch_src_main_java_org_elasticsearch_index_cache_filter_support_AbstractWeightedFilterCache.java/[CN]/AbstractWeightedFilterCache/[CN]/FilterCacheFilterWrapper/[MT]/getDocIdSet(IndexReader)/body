{
  Object filterKey=filter;
  if (filter instanceof CacheKeyFilter) {
    filterKey=((CacheKeyFilter)filter).cacheKey();
  }
  FilterCacheKey cacheKey=new FilterCacheKey(reader.getCoreCacheKey(),filterKey);
  ConcurrentMap<FilterCacheKey,FilterCacheValue<DocSet>> innerCache=cache.cache();
  FilterCacheValue<DocSet> cacheValue=innerCache.get(cacheKey);
  if (cacheValue == null) {
    if (!cache.seenReaders.containsKey(reader.getCoreCacheKey())) {
      Boolean previous=cache.seenReaders.putIfAbsent(reader.getCoreCacheKey(),Boolean.TRUE);
      if (previous == null) {
        reader.addReaderFinishedListener(cache);
        cache.seenReadersCount.inc();
      }
    }
    LongsLAB longsLAB=null;
    if (cache.labEnabled) {
      longsLAB=new LongsLAB(cache.labChunkSizeBytes,cache.labMaxAllocBytes);
    }
    DocIdSet docIdSet=filter.getDocIdSet(reader);
    DocSet docSet=FilterCacheValue.cacheable(reader,longsLAB,docIdSet);
    cacheValue=new FilterCacheValue<DocSet>(docSet,longsLAB);
    FilterCacheValue<DocSet> previous=innerCache.putIfAbsent(cacheKey,cacheValue);
    if (previous == null) {
      cache.totalMetric.inc(cacheValue.value().sizeInBytes());
    }
  }
  return cacheValue.value() == DocSet.EMPTY_DOC_SET ? null : cacheValue.value();
}
