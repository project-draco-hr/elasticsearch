{
  String[][] expectedKeywordsByCategory={{"paul","weller","jam","style","council"},{"paul","smith"},{"craig","kelly","terje","haakonsen","burton"}};
  SearchResponse response=client().prepareSearch("test").setSearchType(SearchType.QUERY_AND_FETCH).addAggregation(terms("myCategories").field("fact_category").minDocCount(2).subAggregation(significantTerms("mySignificantTerms").field("description").executionHint(randomExecutionHint()).minDocCount(2))).execute().actionGet();
  assertSearchResponse(response);
  Terms topCategoryTerms=response.getAggregations().get("myCategories");
  for (  org.elasticsearch.search.aggregations.bucket.terms.Terms.Bucket topCategory : topCategoryTerms.getBuckets()) {
    SignificantTerms topTerms=topCategory.getAggregations().get("mySignificantTerms");
    HashSet<String> foundTopWords=new HashSet<String>();
    for (    Bucket topTerm : topTerms) {
      foundTopWords.add(topTerm.getKeyAsString());
    }
    String[] expectedKeywords=expectedKeywordsByCategory[Integer.parseInt(topCategory.getKeyAsString()) - 1];
    for (    String expectedKeyword : expectedKeywords) {
      assertTrue(expectedKeyword + " missing from category keywords",foundTopWords.contains(expectedKeyword));
    }
  }
}
