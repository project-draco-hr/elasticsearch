{
  Token token=parser.currentToken();
  if (token == Token.VALUE_STRING) {
    return new CategoryQueryContext(parser.text());
  }
 else   if (token == Token.START_OBJECT) {
    String currentFieldName=null;
    String context=null;
    boolean isPrefix=false;
    int boost=1;
    while ((token=parser.nextToken()) != Token.END_OBJECT) {
      if (token == Token.FIELD_NAME) {
        currentFieldName=parser.currentName();
      }
 else       if (token == Token.VALUE_STRING) {
        if (CONTEXT_VALUE.equals(currentFieldName)) {
          context=parser.text();
        }
 else         if (CONTEXT_PREFIX.equals(currentFieldName)) {
          isPrefix=Boolean.valueOf(parser.text());
        }
 else         if (CONTEXT_BOOST.equals(currentFieldName)) {
          Number number;
          try {
            number=Long.parseLong(parser.text());
          }
 catch (          NumberFormatException e) {
            throw new IllegalArgumentException("boost must be a string representing a numeric value, but was [" + parser.text() + "]");
          }
          boost=number.intValue();
        }
      }
 else       if (token == Token.VALUE_NUMBER) {
        if (CONTEXT_BOOST.equals(currentFieldName)) {
          Number number=parser.numberValue();
          if (parser.numberType() == XContentParser.NumberType.INT) {
            boost=number.intValue();
          }
 else {
            throw new ElasticsearchParseException("boost must be in the interval [0..2147483647], but was [" + number.longValue() + "]");
          }
        }
      }
 else       if (token == Token.VALUE_BOOLEAN) {
        if (CONTEXT_PREFIX.equals(currentFieldName)) {
          isPrefix=parser.booleanValue();
        }
      }
    }
    if (context == null) {
      throw new ElasticsearchParseException("no context provided");
    }
    return new CategoryQueryContext(context,boost,isPrefix);
  }
 else {
    throw new ElasticsearchParseException("contexts field expected string or object but was [" + token.name() + "]");
  }
}
