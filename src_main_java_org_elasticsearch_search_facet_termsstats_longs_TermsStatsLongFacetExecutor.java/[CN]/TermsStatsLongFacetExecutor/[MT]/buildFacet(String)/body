{
  if (entries.v().isEmpty()) {
    entries.close();
    return new InternalTermsStatsLongFacet(facetName,comparatorType,size,ImmutableList.<InternalTermsStatsLongFacet.LongEntry>of(),missing);
  }
  if (size == 0) {
    List<InternalTermsStatsLongFacet.LongEntry> longEntries=new ArrayList<>(entries.v().size());
    boolean[] states=entries.v().allocated;
    Object[] values=entries.v().values;
    for (int i=0; i < states.length; i++) {
      if (states[i]) {
        longEntries.add((InternalTermsStatsLongFacet.LongEntry)values[i]);
      }
    }
    entries.close();
    return new InternalTermsStatsLongFacet(facetName,comparatorType,0,longEntries,missing);
  }
  Object[] values=entries.v().values;
  Arrays.sort(values,(Comparator)comparatorType.comparator());
  int limit=shardSize;
  List<InternalTermsStatsLongFacet.LongEntry> ordered=Lists.newArrayList();
  for (int i=0; i < limit; i++) {
    InternalTermsStatsLongFacet.LongEntry value=(InternalTermsStatsLongFacet.LongEntry)values[i];
    if (value == null) {
      break;
    }
    ordered.add(value);
  }
  entries.close();
  return new InternalTermsStatsLongFacet(facetName,comparatorType,size,ordered,missing);
}
