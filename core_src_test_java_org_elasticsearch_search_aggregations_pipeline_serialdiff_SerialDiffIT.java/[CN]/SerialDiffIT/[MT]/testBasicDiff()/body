{
  SearchResponse response=client().prepareSearch("idx").setTypes("type").addAggregation(histogram("histo").field(INTERVAL_FIELD).interval(interval).extendedBounds(0L,(long)(interval * (numBuckets - 1))).subAggregation(metric).subAggregation(diff("diff_counts").lag(lag).gapPolicy(gapPolicy).setBucketsPaths("_count")).subAggregation(diff("diff_values").lag(lag).gapPolicy(gapPolicy).setBucketsPaths("the_metric"))).execute().actionGet();
  assertSearchResponse(response);
  InternalHistogram<InternalHistogram.Bucket> histo=response.getAggregations().get("histo");
  assertThat(histo,notNullValue());
  assertThat(histo.getName(),equalTo("histo"));
  List<? extends InternalHistogram.Bucket> buckets=histo.getBuckets();
  assertThat("Size of buckets array is not correct.",buckets.size(),equalTo(mockHisto.size()));
  List<Double> expectedCounts=testValues.get(MetricTarget.COUNT.toString());
  List<Double> expectedValues=testValues.get(MetricTarget.VALUE.toString());
  Iterator<? extends Histogram.Bucket> actualIter=buckets.iterator();
  Iterator<PipelineAggregationHelperTests.MockBucket> expectedBucketIter=mockHisto.iterator();
  Iterator<Double> expectedCountsIter=expectedCounts.iterator();
  Iterator<Double> expectedValuesIter=expectedValues.iterator();
  while (actualIter.hasNext()) {
    assertValidIterators(expectedBucketIter,expectedCountsIter,expectedValuesIter);
    Histogram.Bucket actual=actualIter.next();
    PipelineAggregationHelperTests.MockBucket expected=expectedBucketIter.next();
    Double expectedCount=expectedCountsIter.next();
    Double expectedValue=expectedValuesIter.next();
    assertThat("keys do not match",((Number)actual.getKey()).longValue(),equalTo(expected.key));
    assertThat("doc counts do not match",actual.getDocCount(),equalTo((long)expected.count));
    assertBucketContents(actual,expectedCount,expectedValue);
  }
}
