{
  Tuple<String,String> clientDescriptor=new Tuple<String,String>(endpoint,account);
  AmazonS3Client client=clients.get(clientDescriptor);
  if (client != null) {
    return client;
  }
  ClientConfiguration clientConfiguration=new ClientConfiguration();
  clientConfiguration.setResponseMetadataCacheSize(0);
  if (protocol == null) {
    protocol=settings.get(CLOUD_AWS.PROTOCOL,"https").toLowerCase(Locale.ROOT);
    protocol=settings.get(CLOUD_S3.PROTOCOL,protocol).toLowerCase(Locale.ROOT);
  }
  if ("http".equals(protocol)) {
    clientConfiguration.setProtocol(Protocol.HTTP);
  }
 else   if ("https".equals(protocol)) {
    clientConfiguration.setProtocol(Protocol.HTTPS);
  }
 else {
    throw new IllegalArgumentException("No protocol supported [" + protocol + "], can either be [http] or [https]");
  }
  String proxyHost=settings.get(CLOUD_AWS.PROXY_HOST);
  proxyHost=settings.get(CLOUD_S3.PROXY_HOST,proxyHost);
  if (proxyHost != null) {
    String portString=settings.get(CLOUD_AWS.PROXY_PORT,"80");
    portString=settings.get(CLOUD_S3.PROXY_PORT,portString);
    Integer proxyPort;
    try {
      proxyPort=Integer.parseInt(portString,10);
    }
 catch (    NumberFormatException ex) {
      throw new IllegalArgumentException("The configured proxy port value [" + portString + "] is invalid",ex);
    }
    String proxyUsername=settings.get(CLOUD_S3.PROXY_USERNAME,settings.get(CLOUD_AWS.PROXY_USERNAME));
    String proxyPassword=settings.get(CLOUD_S3.PROXY_PASSWORD,settings.get(CLOUD_AWS.PROXY_PASSWORD));
    clientConfiguration.withProxyHost(proxyHost).withProxyPort(proxyPort).withProxyUsername(proxyUsername).withProxyPassword(proxyPassword);
  }
  if (maxRetries != null) {
    clientConfiguration.setMaxErrorRetry(maxRetries);
  }
  String awsSigner=settings.get(CLOUD_S3.SIGNER,settings.get(CLOUD_AWS.SIGNER));
  if (awsSigner != null) {
    logger.debug("using AWS API signer [{}]",awsSigner);
    AwsSigner.configureSigner(awsSigner,clientConfiguration,endpoint);
  }
  AWSCredentialsProvider credentials;
  if (account == null && key == null) {
    credentials=new AWSCredentialsProviderChain(new EnvironmentVariableCredentialsProvider(),new SystemPropertiesCredentialsProvider(),new InstanceProfileCredentialsProvider());
  }
 else {
    credentials=new AWSCredentialsProviderChain(new StaticCredentialsProvider(new BasicAWSCredentials(account,key)));
  }
  client=new AmazonS3Client(credentials,clientConfiguration);
  if (endpoint != null) {
    client.setEndpoint(endpoint);
  }
  clients.put(clientDescriptor,client);
  return client;
}
