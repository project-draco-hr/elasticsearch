{
  Tuple<String,String> clientDescriptor=new Tuple<>(endpoint,account);
  AmazonS3Client client=clients.get(clientDescriptor);
  if (client != null) {
    return client;
  }
  ClientConfiguration clientConfiguration=new ClientConfiguration();
  clientConfiguration.setResponseMetadataCacheSize(0);
  clientConfiguration.setProtocol(protocol);
  String proxyHost=CLOUD_S3.PROXY_HOST_SETTING.get(settings);
  if (Strings.hasText(proxyHost)) {
    Integer proxyPort=CLOUD_S3.PROXY_PORT_SETTING.get(settings);
    String proxyUsername=CLOUD_S3.PROXY_USERNAME_SETTING.get(settings);
    String proxyPassword=CLOUD_S3.PROXY_PASSWORD_SETTING.get(settings);
    clientConfiguration.withProxyHost(proxyHost).withProxyPort(proxyPort).withProxyUsername(proxyUsername).withProxyPassword(proxyPassword);
  }
  if (maxRetries != null) {
    clientConfiguration.setMaxErrorRetry(maxRetries);
  }
  String awsSigner=CLOUD_S3.SIGNER_SETTING.get(settings);
  if (Strings.hasText(awsSigner)) {
    logger.debug("using AWS API signer [{}]",awsSigner);
    AwsSigner.configureSigner(awsSigner,clientConfiguration,endpoint);
  }
  AWSCredentialsProvider credentials;
  if (account == null && key == null) {
    credentials=new AWSCredentialsProviderChain(new EnvironmentVariableCredentialsProvider(),new SystemPropertiesCredentialsProvider(),new InstanceProfileCredentialsProvider());
  }
 else {
    credentials=new AWSCredentialsProviderChain(new StaticCredentialsProvider(new BasicAWSCredentials(account,key)));
  }
  client=new AmazonS3Client(credentials,clientConfiguration);
  if (endpoint != null) {
    client.setEndpoint(endpoint);
  }
  if (pathStyleAccess != null) {
    client.setS3ClientOptions(new S3ClientOptions().withPathStyleAccess(pathStyleAccess));
  }
  clients.put(clientDescriptor,client);
  return client;
}
