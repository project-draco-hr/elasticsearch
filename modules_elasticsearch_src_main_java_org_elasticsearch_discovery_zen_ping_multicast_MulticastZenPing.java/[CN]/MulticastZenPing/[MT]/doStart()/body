{
  try {
    this.datagramPacketReceive=new DatagramPacket(new byte[bufferSize],bufferSize);
    this.datagramPacketSend=new DatagramPacket(new byte[bufferSize],bufferSize,InetAddress.getByName(group),port);
  }
 catch (  Exception e) {
    logger.warn("disabled, failed to setup multicast (datagram) discovery : {}",e.getMessage());
    if (logger.isDebugEnabled()) {
      logger.debug("disabled, failed to setup multicast (datagram) discovery",e);
    }
    return;
  }
  InetAddress multicastInterface=null;
  try {
    MulticastSocket multicastSocket;
    multicastSocket=new MulticastSocket(port);
    multicastSocket.setTimeToLive(ttl);
    multicastInterface=networkService.resolvePublishHostAddress(address);
    multicastSocket.setInterface(multicastInterface);
    multicastSocket.joinGroup(InetAddress.getByName(group));
    multicastSocket.setReceiveBufferSize(bufferSize);
    multicastSocket.setSendBufferSize(bufferSize);
    multicastSocket.setSoTimeout(60000);
    this.multicastSocket=multicastSocket;
    this.receiver=new Receiver();
    this.receiverThread=daemonThreadFactory(settings,"discovery#multicast#receiver").newThread(receiver);
    this.receiverThread.start();
  }
 catch (  Exception e) {
    datagramPacketReceive=null;
    datagramPacketSend=null;
    if (multicastSocket != null) {
      multicastSocket.close();
      multicastSocket=null;
    }
    logger.warn("disabled, failed to setup multicast discovery on {}: {}",multicastInterface,e.getMessage());
    if (logger.isDebugEnabled()) {
      logger.debug("disabled, failed to setup multicast discovery on {}",e,multicastInterface);
    }
  }
}
