{
  while (running) {
    try {
      int id;
      DiscoveryNode requestingNodeX;
      ClusterName clusterName;
synchronized (receiveMutex) {
        try {
          multicastSocket.receive(datagramPacketReceive);
        }
 catch (        SocketTimeoutException ignore) {
          continue;
        }
catch (        Exception e) {
          if (running) {
            logger.warn("failed to receive packet",e);
          }
          continue;
        }
        try {
          StreamInput input=CachedStreamInput.cachedHandles(new BytesStreamInput(datagramPacketReceive.getData(),datagramPacketReceive.getOffset(),datagramPacketReceive.getLength()));
          id=input.readInt();
          clusterName=ClusterName.readClusterName(input);
          requestingNodeX=readNode(input);
        }
 catch (        Exception e) {
          logger.warn("failed to read requesting node from {}",e,datagramPacketReceive.getSocketAddress());
          continue;
        }
      }
      DiscoveryNodes discoveryNodes=nodesProvider.nodes();
      final DiscoveryNode requestingNode=requestingNodeX;
      if (requestingNode.id().equals(discoveryNodes.localNodeId())) {
        continue;
      }
      if (!clusterName.equals(MulticastZenPing.this.clusterName)) {
        continue;
      }
      final MulticastPingResponse multicastPingResponse=new MulticastPingResponse();
      multicastPingResponse.id=id;
      multicastPingResponse.pingResponse=new PingResponse(discoveryNodes.localNode(),discoveryNodes.masterNode(),clusterName);
      if (logger.isTraceEnabled()) {
        logger.trace("[{}] received ping_request from [{}], sending {}",id,requestingNode,multicastPingResponse.pingResponse);
      }
      if (!transportService.nodeConnected(requestingNode)) {
        threadPool.cached().execute(new Runnable(){
          @Override public void run(){
            try {
              transportService.connectToNode(requestingNode);
              transportService.sendRequest(requestingNode,MulticastPingResponseRequestHandler.ACTION,multicastPingResponse,new VoidTransportResponseHandler(false){
                @Override public void handleException(                TransportException exp){
                  logger.warn("failed to receive confirmation on sent ping response to [{}]",exp,requestingNode);
                }
              }
);
            }
 catch (            Exception e) {
              logger.warn("failed to connect to requesting node {}",e,requestingNode);
            }
          }
        }
);
      }
 else {
        transportService.sendRequest(requestingNode,MulticastPingResponseRequestHandler.ACTION,multicastPingResponse,new VoidTransportResponseHandler(false){
          @Override public void handleException(          TransportException exp){
            logger.warn("failed to receive confirmation on sent ping response to [{}]",exp,requestingNode);
          }
        }
);
      }
    }
 catch (    Exception e) {
      logger.warn("unexpected exception in multicast receiver",e);
    }
  }
}
