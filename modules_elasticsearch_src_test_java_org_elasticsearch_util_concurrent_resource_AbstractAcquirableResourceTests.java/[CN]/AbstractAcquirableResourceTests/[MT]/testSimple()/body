{
  ExecutorService executorService=Executors.newCachedThreadPool();
  final AcquirableResource<Resource> acquirableResource=createInstance(new Resource());
  List<Future> results=new ArrayList<Future>();
  final int cycles=50;
  final int operationsWithinCycle=100000;
  final CyclicBarrier barrier1=new CyclicBarrier(cycles * 2 + 1);
  final CyclicBarrier barrier2=new CyclicBarrier(cycles * 2 + 1);
  for (int i=0; i < cycles; i++) {
    results.add(executorService.submit(new Callable(){
      @Override public Object call() throws Exception {
        barrier1.await();
        barrier2.await();
        for (int j=0; j < operationsWithinCycle; j++) {
          assertThat(acquirableResource.acquire(),equalTo(true));
        }
        return null;
      }
    }
));
    results.add(executorService.submit(new Callable(){
      @Override public Object call() throws Exception {
        barrier1.await();
        barrier2.await();
        for (int j=0; j < operationsWithinCycle; j++) {
          acquirableResource.release();
        }
        return null;
      }
    }
));
  }
  barrier1.await();
  StopWatch stopWatch=new StopWatch("Acquirable");
  stopWatch.start();
  barrier2.await();
  for (  Future f : results) {
    f.get();
  }
  assertThat(acquirableResource.resource().isReleased(),equalTo(false));
  acquirableResource.markForClose();
  assertThat(acquirableResource.resource().isReleased(),equalTo(true));
  stopWatch.stop();
  System.out.println("Took: " + stopWatch.shortSummary());
}
