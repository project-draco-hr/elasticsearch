{
  final String fieldName="field";
  final String mapping="{ \"" + mappingType + "\": {"+ "\"dynamic_templates\": ["+ "{ \""+ fieldName+ "\": {"+ "\"path_match\": \"*\","+ "\"mapping\": {"+ "\"type\": \"string\","+ "\"store\": \"yes\","+ "\"index\": \"analyzed\", \"analyzer\": \"whitespace\" } } } ] } }";
  int iters=scaledRandomIntBetween(5,15);
  for (int i=0; i < iters; i++) {
    wipeIndices("test");
    assertAcked(prepareCreate("test").addMapping(mappingType,mapping));
    ensureYellow();
    int numDocs=scaledRandomIntBetween(10,100);
    final CountDownLatch latch=new CountDownLatch(numDocs);
    final List<Throwable> throwable=new CopyOnWriteArrayList<Throwable>();
    int currentID=0;
    for (int j=0; j < numDocs; j++) {
      Map<String,Object> source=new HashMap<String,Object>();
      source.put(fieldName,"test-user");
      client().prepareIndex("test",mappingType,Integer.toString(currentID++)).setSource(source).execute(new ActionListener<IndexResponse>(){
        @Override public void onResponse(        IndexResponse response){
          latch.countDown();
        }
        @Override public void onFailure(        Throwable e){
          throwable.add(e);
          latch.countDown();
        }
      }
);
    }
    latch.await();
    assertThat(throwable,emptyIterable());
    refresh();
    assertHitCount(client().prepareSearch("test").setQuery(QueryBuilders.matchQuery(fieldName,"test-user")).get(),numDocs);
    assertHitCount(client().prepareSearch("test").setQuery(QueryBuilders.matchQuery(fieldName,"test user")).get(),0);
  }
}
