{
  final int numValues=atLeast(200);
  final FixedBitSet values=new FixedBitSet(numValues);
  values.set(0,numValues);
  IntRedBlackTree tree=new IntRedBlackTree();
  for (int i=0; i < numValues; ++i) {
    tree.add(i);
  }
  final int iters=atLeast(300);
  for (int i=0; i < iters; ++i) {
    final int value=randomInt(numValues - 1);
    final boolean removed=tree.remove(value);
    assertEquals(removed,values.get(value));
    values.clear(value);
    assertEquals(values.cardinality(),tree.size());
    tree.assertConsistent();
  }
  int size=0;
  int previousValue=Integer.MIN_VALUE;
  for (  IntCursor cursor : tree) {
    ++size;
    final int value=tree.values[cursor.value];
    assertTrue(previousValue < value);
    assertTrue(values.get(value));
    previousValue=value;
  }
  assertEquals(values.cardinality(),size);
}
