{
  Map<Integer,Integer> map=Maps.newHashMap();
  IntRedBlackTree tree=new IntRedBlackTree();
  final int iters=atLeast(1000);
  for (int i=0; i < iters; ++i) {
    final int value=randomInt(200);
    final boolean added=tree.add(value);
    tree.assertConsistent();
    assertEquals(!map.containsKey(value),added);
    if (map.containsKey(value)) {
      map.put(value,map.get(value) + 1);
    }
 else {
      map.put(value,1);
    }
    assertEquals(map.size(),tree.size());
  }
  int size=0;
  int previousValue=Integer.MIN_VALUE;
  for (  IntCursor cursor : tree) {
    ++size;
    final int value=tree.values[cursor.value];
    assertTrue(previousValue < value);
    assertEquals(map.get(value).intValue(),tree.counts[cursor.value]);
    previousValue=value;
  }
  assertEquals(map.size(),size);
}
