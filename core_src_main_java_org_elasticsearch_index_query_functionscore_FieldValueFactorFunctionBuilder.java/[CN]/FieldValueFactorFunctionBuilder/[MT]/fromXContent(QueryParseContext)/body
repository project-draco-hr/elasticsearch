{
  XContentParser parser=parseContext.parser();
  String currentFieldName=null;
  String field=null;
  float boostFactor=FieldValueFactorFunctionBuilder.DEFAULT_FACTOR;
  FieldValueFactorFunction.Modifier modifier=FieldValueFactorFunction.Modifier.NONE;
  Double missing=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token.isValue()) {
      if ("field".equals(currentFieldName)) {
        field=parser.text();
      }
 else       if ("factor".equals(currentFieldName)) {
        boostFactor=parser.floatValue();
      }
 else       if ("modifier".equals(currentFieldName)) {
        modifier=FieldValueFactorFunction.Modifier.fromString(parser.text());
      }
 else       if ("missing".equals(currentFieldName)) {
        missing=parser.doubleValue();
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),NAME + " query does not support [" + currentFieldName+ "]");
      }
    }
 else     if ("factor".equals(currentFieldName) && (token == XContentParser.Token.START_ARRAY || token == XContentParser.Token.START_OBJECT)) {
      throw new ParsingException(parser.getTokenLocation(),"[" + NAME + "] field 'factor' does not support lists or objects");
    }
  }
  if (field == null) {
    throw new ParsingException(parser.getTokenLocation(),"[" + NAME + "] required field 'field' missing");
  }
  FieldValueFactorFunctionBuilder fieldValueFactorFunctionBuilder=new FieldValueFactorFunctionBuilder(field).factor(boostFactor).modifier(modifier);
  if (missing != null) {
    fieldValueFactorFunctionBuilder.missing(missing);
  }
  return fieldValueFactorFunctionBuilder;
}
