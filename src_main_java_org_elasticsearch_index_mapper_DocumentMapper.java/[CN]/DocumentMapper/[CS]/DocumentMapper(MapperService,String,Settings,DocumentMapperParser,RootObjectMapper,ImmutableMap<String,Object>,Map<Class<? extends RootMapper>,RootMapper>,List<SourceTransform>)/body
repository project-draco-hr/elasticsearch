{
  this.mapperService=mapperService;
  this.type=rootObjectMapper.name();
  this.typeText=new StringAndBytesText(this.type);
  this.mapping=new Mapping(rootObjectMapper,rootMappers.values().toArray(new RootMapper[rootMappers.values().size()]),sourceTransforms.toArray(new SourceTransform[sourceTransforms.size()]),meta);
  this.documentParser=new DocumentParser(index,indexSettings,docMapperParser,this);
  this.typeFilter=typeMapper().termQuery(type,null);
  if (rootMapper(ParentFieldMapper.class).active()) {
    rootMapper(RoutingFieldMapper.class).markAsRequired();
  }
  List<ObjectMapper> newObjectMappers=new ArrayList<>();
  List<FieldMapper<?>> newFieldMappers=new ArrayList<>();
  for (  RootMapper rootMapper : this.mapping.rootMappersNotIncludedInObject) {
    if (rootMapper instanceof FieldMapper) {
      newFieldMappers.add((FieldMapper)rootMapper);
    }
  }
  MapperUtils.collect(this.mapping.root,newObjectMappers,newFieldMappers);
  this.fieldMappers=new DocumentFieldMappers(docMapperParser.analysisService).copyAndAllAll(newFieldMappers);
  this.objectMappers=Maps.uniqueIndex(newObjectMappers,new Function<ObjectMapper,String>(){
    @Override public String apply(    ObjectMapper mapper){
      return mapper.fullPath();
    }
  }
);
  for (  ObjectMapper objectMapper : newObjectMappers) {
    if (objectMapper.nested().isNested()) {
      hasNestedObjects=true;
    }
  }
  refreshSource();
}
