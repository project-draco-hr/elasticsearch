{
  String mapping="{\n" + "    \"doc\": {\n" + "      \"properties\": {\n"+ "        \"name\": {\"type\":\"text\"},\n"+ "        \"persons\": {\n"+ "          \"type\": \"nested\"\n,"+ "          \"properties\" : {\"foo\" : {\"type\" : \"text\"}}"+ "        }\n"+ "      }\n"+ "    }\n"+ "  }";
  String doc="{\n" + "    \"name\": \"obama\",\n" + "    \"persons\": [\n"+ "      {\n"+ "        \"foo\": \"bar\"\n"+ "      }\n"+ "    ]\n"+ "  }";
  String q1="{\n" + "  \"query\": {\n" + "    \"bool\": {\n"+ "      \"must\": {\n"+ "        \"match\": {\n"+ "          \"name\": \"obama\"\n"+ "        }\n"+ "      }\n"+ "    }\n"+ "  },\n"+ "\"text\":\"foo\""+ "}";
  String q2="{\n" + "  \"query\": {\n" + "    \"bool\": {\n"+ "      \"must_not\": {\n"+ "        \"match\": {\n"+ "          \"name\": \"obama\"\n"+ "        }\n"+ "      }\n"+ "    }\n"+ "  },\n"+ "\"text\":\"foo\""+ "}";
  String q3="{\n" + "  \"query\": {\n" + "    \"bool\": {\n"+ "      \"must\": {\n"+ "        \"match\": {\n"+ "          \"persons.foo\": \"bar\"\n"+ "        }\n"+ "      }\n"+ "    }\n"+ "  },\n"+ "\"text\":\"foo\""+ "}";
  String q4="{\n" + "  \"query\": {\n" + "    \"bool\": {\n"+ "      \"must_not\": {\n"+ "        \"match\": {\n"+ "          \"persons.foo\": \"bar\"\n"+ "        }\n"+ "      }\n"+ "    }\n"+ "  },\n"+ "\"text\":\"foo\""+ "}";
  String q5="{\n" + "  \"query\": {\n" + "    \"bool\": {\n"+ "      \"must\": {\n"+ "        \"nested\": {\n"+ "          \"path\": \"persons\",\n"+ "          \"query\": {\n"+ "            \"match\": {\n"+ "              \"persons.foo\": \"bar\"\n"+ "            }\n"+ "          }\n"+ "        }\n"+ "      }\n"+ "    }\n"+ "  },\n"+ "\"text\":\"foo\""+ "}";
  String q6="{\n" + "  \"query\": {\n" + "    \"bool\": {\n"+ "      \"must_not\": {\n"+ "        \"nested\": {\n"+ "          \"path\": \"persons\",\n"+ "          \"query\": {\n"+ "            \"match\": {\n"+ "              \"persons.foo\": \"bar\"\n"+ "            }\n"+ "          }\n"+ "        }\n"+ "      }\n"+ "    }\n"+ "  },\n"+ "\"text\":\"foo\""+ "}";
  assertAcked(client().admin().indices().prepareCreate(INDEX_NAME).addMapping(TYPE_NAME,"query","type=percolator").addMapping("doc",mapping));
  ensureGreen(INDEX_NAME);
  client().prepareIndex(INDEX_NAME,TYPE_NAME).setSource(q1).setId("q1").get();
  client().prepareIndex(INDEX_NAME,TYPE_NAME).setSource(q2).setId("q2").get();
  client().prepareIndex(INDEX_NAME,TYPE_NAME).setSource(q3).setId("q3").get();
  client().prepareIndex(INDEX_NAME,TYPE_NAME).setSource(q4).setId("q4").get();
  client().prepareIndex(INDEX_NAME,TYPE_NAME).setSource(q5).setId("q5").get();
  client().prepareIndex(INDEX_NAME,TYPE_NAME).setSource(q6).setId("q6").get();
  refresh();
  PercolateResponse response=preparePercolate(client()).setIndices(INDEX_NAME).setDocumentType("doc").setPercolateDoc(docBuilder().setDoc(doc)).get();
  assertMatchCount(response,3L);
  Set<String> expectedIds=new HashSet<>();
  expectedIds.add("q1");
  expectedIds.add("q4");
  expectedIds.add("q5");
  for (  PercolateResponse.Match match : response.getMatches()) {
    assertTrue(expectedIds.remove(match.getId().string()));
  }
  assertTrue(expectedIds.isEmpty());
  response=preparePercolate(client()).setOnlyCount(true).setIndices(INDEX_NAME).setDocumentType("doc").setPercolateDoc(docBuilder().setDoc(doc)).get();
  assertMatchCount(response,3L);
  response=preparePercolate(client()).setScore(randomBoolean()).setSortByScore(randomBoolean()).setOnlyCount(randomBoolean()).setSize(10).setPercolateQuery(QueryBuilders.termQuery("text","foo")).setIndices(INDEX_NAME).setDocumentType("doc").setPercolateDoc(docBuilder().setDoc(doc)).get();
  assertMatchCount(response,3L);
}
