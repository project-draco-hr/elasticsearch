{
  client().admin().indices().prepareCreate(INDEX_NAME).addMapping(TYPE_NAME,"query","type=percolator").get();
  ensureGreen();
  logger.info("--> Add dummy doc");
  client().prepareIndex(INDEX_NAME,TYPE_NAME,"1").setSource("field1","value").execute().actionGet();
  logger.info("--> register a queries");
  client().prepareIndex(INDEX_NAME,TYPE_NAME,"1").setSource(jsonBuilder().startObject().field("query",matchQuery("field1","b")).field("a","b").endObject()).execute().actionGet();
  client().prepareIndex(INDEX_NAME,TYPE_NAME,"2").setSource(jsonBuilder().startObject().field("query",matchQuery("field1","c")).endObject()).execute().actionGet();
  client().prepareIndex(INDEX_NAME,TYPE_NAME,"3").setSource(jsonBuilder().startObject().field("query",boolQuery().must(matchQuery("field1","b")).must(matchQuery("field1","c"))).endObject()).execute().actionGet();
  client().prepareIndex(INDEX_NAME,TYPE_NAME,"4").setSource(jsonBuilder().startObject().field("query",matchAllQuery()).endObject()).execute().actionGet();
  refresh();
  logger.info("--> Percolate doc with field1=b");
  PercolateResponse response=preparePercolate(client()).setIndices(INDEX_NAME).setDocumentType(TYPE_NAME).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1","b").endObject())).execute().actionGet();
  assertMatchCount(response,2L);
  assertThat(response.getMatches(),arrayWithSize(2));
  assertThat(convertFromTextArray(response.getMatches(),INDEX_NAME),arrayContainingInAnyOrder("1","4"));
  logger.info("--> Percolate doc with field1=c");
  response=preparePercolate(client()).setIndices(INDEX_NAME).setDocumentType(TYPE_NAME).setPercolateDoc(docBuilder().setDoc(yamlBuilder().startObject().field("field1","c").endObject())).execute().actionGet();
  assertMatchCount(response,2L);
  assertThat(response.getMatches(),arrayWithSize(2));
  assertThat(convertFromTextArray(response.getMatches(),INDEX_NAME),arrayContainingInAnyOrder("2","4"));
  logger.info("--> Percolate doc with field1=b c");
  response=preparePercolate(client()).setIndices(INDEX_NAME).setDocumentType(TYPE_NAME).setPercolateDoc(docBuilder().setDoc(smileBuilder().startObject().field("field1","b c").endObject())).execute().actionGet();
  assertMatchCount(response,4L);
  assertThat(response.getMatches(),arrayWithSize(4));
  assertThat(convertFromTextArray(response.getMatches(),INDEX_NAME),arrayContainingInAnyOrder("1","2","3","4"));
  logger.info("--> Percolate doc with field1=d");
  response=preparePercolate(client()).setIndices(INDEX_NAME).setDocumentType(TYPE_NAME).setPercolateDoc(docBuilder().setDoc(jsonBuilder().startObject().field("field1","d").endObject())).execute().actionGet();
  assertMatchCount(response,1L);
  assertThat(response.getMatches(),arrayWithSize(1));
  assertThat(convertFromTextArray(response.getMatches(),INDEX_NAME),arrayContaining("4"));
  logger.info("--> Percolate non existing doc");
  try {
    preparePercolate(client()).setIndices(INDEX_NAME).setDocumentType(TYPE_NAME).setGetRequest(Requests.getRequest(INDEX_NAME).type("type").id("5")).execute().actionGet();
    fail("Exception should have been thrown");
  }
 catch (  ResourceNotFoundException e) {
    assertThat(e.getMessage(),equalTo("percolate document [queries/type/5] doesn't exist"));
  }
}
