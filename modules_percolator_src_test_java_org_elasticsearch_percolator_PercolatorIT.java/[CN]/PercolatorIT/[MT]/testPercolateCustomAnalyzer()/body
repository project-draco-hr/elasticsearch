{
  Builder builder=Settings.builder();
  builder.put("index.analysis.analyzer.lwhitespacecomma.tokenizer","whitespacecomma");
  builder.putArray("index.analysis.analyzer.lwhitespacecomma.filter","lowercase");
  builder.put("index.analysis.tokenizer.whitespacecomma.type","pattern");
  builder.put("index.analysis.tokenizer.whitespacecomma.pattern","(,|\\s+)");
  XContentBuilder mapping=XContentFactory.jsonBuilder().startObject().startObject("doc").startObject("properties").startObject("filingcategory").field("type","text").field("analyzer","lwhitespacecomma").endObject().endObject().endObject().endObject();
  assertAcked(prepareCreate(INDEX_NAME).setSettings(builder).addMapping("doc",mapping).addMapping(TYPE_NAME,"query","type=percolator"));
  ensureGreen();
  logger.info("--> register a query");
  client().prepareIndex(INDEX_NAME,TYPE_NAME,"1").setSource(jsonBuilder().startObject().field("source","productizer").field("query",QueryBuilders.constantScoreQuery(QueryBuilders.queryStringQuery("filingcategory:s"))).endObject()).setRefresh(true).execute().actionGet();
  refresh();
  PercolateResponse percolate=preparePercolate(client()).setIndices(INDEX_NAME).setDocumentType("doc").setSource(jsonBuilder().startObject().startObject("doc").field("filingcategory","s").endObject().field("query",termQuery("source","productizer")).endObject()).execute().actionGet();
  assertMatchCount(percolate,1L);
  assertThat(percolate.getMatches(),arrayWithSize(1));
}
