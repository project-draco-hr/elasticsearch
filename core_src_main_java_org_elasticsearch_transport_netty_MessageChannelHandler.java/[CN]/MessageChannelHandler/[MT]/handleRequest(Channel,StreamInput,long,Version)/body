{
  buffer=new NamedWriteableAwareStreamInput(buffer,transport.namedWriteableRegistry);
  final String action=buffer.readString();
  transportServiceAdapter.onRequestReceived(requestId,action);
  final NettyTransportChannel transportChannel=new NettyTransportChannel(transport,transportServiceAdapter,action,channel,requestId,version,profileName);
  try {
    final RequestHandlerRegistry reg=transportServiceAdapter.getRequestHandler(action);
    if (reg == null) {
      throw new ActionNotFoundTransportException(action);
    }
    final TransportRequest request=reg.newRequest();
    request.remoteAddress(new InetSocketTransportAddress((InetSocketAddress)channel.getRemoteAddress()));
    request.readFrom(buffer);
    if (ThreadPool.Names.SAME.equals(reg.getExecutor())) {
      reg.processMessageReceived(request,transportChannel);
    }
 else {
      threadPool.executor(reg.getExecutor()).execute(new RequestHandler(reg,request,transportChannel));
    }
  }
 catch (  Throwable e) {
    try {
      transportChannel.sendResponse(e);
    }
 catch (    IOException e1) {
      logger.warn("Failed to send error message back to client for action [" + action + "]",e);
      logger.warn("Actual Exception",e1);
    }
  }
  return action;
}
