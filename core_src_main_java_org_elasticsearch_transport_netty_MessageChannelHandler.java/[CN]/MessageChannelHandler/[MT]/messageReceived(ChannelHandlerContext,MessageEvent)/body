{
  Transports.assertTransportThread();
  Object m=e.getMessage();
  if (!(m instanceof ChannelBuffer)) {
    ctx.sendUpstream(e);
    return;
  }
  ChannelBuffer buffer=(ChannelBuffer)m;
  int size=buffer.getInt(buffer.readerIndex() - 4);
  transportServiceAdapter.received(size + 6);
  boolean hasMessageBytesToRead=(size - (NettyHeader.HEADER_SIZE - 6)) != 0;
  int markedReaderIndex=buffer.readerIndex();
  int expectedIndexReader=markedReaderIndex + size;
  StreamInput streamIn=ChannelBufferStreamInputFactory.create(buffer,size);
  boolean success=false;
  try {
    long requestId=streamIn.readLong();
    byte status=streamIn.readByte();
    Version version=Version.fromId(streamIn.readInt());
    if (TransportStatus.isCompress(status) && hasMessageBytesToRead && buffer.readable()) {
      Compressor compressor;
      try {
        compressor=CompressorFactory.compressor(buffer);
      }
 catch (      NotCompressedException ex) {
        int maxToRead=Math.min(buffer.readableBytes(),10);
        int offset=buffer.readerIndex();
        StringBuilder sb=new StringBuilder("stream marked as compressed, but no compressor found, first [").append(maxToRead).append("] content bytes out of [").append(buffer.readableBytes()).append("] readable bytes with message size [").append(size).append("] ").append("] are [");
        for (int i=0; i < maxToRead; i++) {
          sb.append(buffer.getByte(offset + i)).append(",");
        }
        sb.append("]");
        throw new IllegalStateException(sb.toString());
      }
      streamIn=compressor.streamInput(streamIn);
    }
    streamIn.setVersion(version);
    if (TransportStatus.isRequest(status)) {
      String action=handleRequest(ctx.getChannel(),streamIn,requestId,version);
      final int nextByte=streamIn.read();
      if (nextByte != -1) {
        throw new IllegalStateException("Message not fully read (request) for requestId [" + requestId + "], action ["+ action+ "], readerIndex ["+ buffer.readerIndex()+ "] vs expected ["+ expectedIndexReader+ "]; resetting");
      }
      if (buffer.readerIndex() < expectedIndexReader) {
        throw new IllegalStateException("Message is fully read (request), yet there are " + (expectedIndexReader - buffer.readerIndex()) + " remaining bytes; resetting");
      }
      if (buffer.readerIndex() > expectedIndexReader) {
        throw new IllegalStateException("Message read past expected size (request) for requestId [" + requestId + "], action ["+ action+ "], readerIndex ["+ buffer.readerIndex()+ "] vs expected ["+ expectedIndexReader+ "]; resetting");
      }
    }
 else {
      TransportResponseHandler<?> handler=transportServiceAdapter.onResponseReceived(requestId);
      if (handler != null) {
        if (TransportStatus.isError(status)) {
          handlerResponseError(streamIn,handler);
        }
 else {
          handleResponse(ctx.getChannel(),streamIn,handler);
        }
        final int nextByte=streamIn.read();
        if (nextByte != -1) {
          throw new IllegalStateException("Message not fully read (response) for requestId [" + requestId + "], handler ["+ handler+ "], error ["+ TransportStatus.isError(status)+ "]; resetting");
        }
        if (buffer.readerIndex() < expectedIndexReader) {
          throw new IllegalStateException("Message is fully read (response), yet there are " + (expectedIndexReader - buffer.readerIndex()) + " remaining bytes; resetting");
        }
        if (buffer.readerIndex() > expectedIndexReader) {
          throw new IllegalStateException("Message read past expected size (response) for requestId [" + requestId + "], handler ["+ handler+ "], error ["+ TransportStatus.isError(status)+ "]; resetting");
        }
      }
    }
  }
  finally {
    try {
      if (success) {
        IOUtils.close(streamIn);
      }
 else {
        IOUtils.closeWhileHandlingException(streamIn);
      }
    }
  finally {
      buffer.readerIndex(expectedIndexReader);
    }
  }
}
