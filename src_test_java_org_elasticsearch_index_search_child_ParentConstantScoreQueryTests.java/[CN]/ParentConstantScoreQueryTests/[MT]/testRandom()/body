{
  Directory directory=newDirectory();
  final Random r=random();
  final IndexWriterConfig iwc=LuceneTestCase.newIndexWriterConfig(r,new MockAnalyzer(r)).setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH).setRAMBufferSizeMB(scaledRandomIntBetween(16,64));
  RandomIndexWriter indexWriter=new RandomIndexWriter(r,directory,iwc);
  int numUniqueParentValues=scaledRandomIntBetween(100,2000);
  String[] parentValues=new String[numUniqueParentValues];
  for (int i=0; i < numUniqueParentValues; i++) {
    parentValues[i]=Integer.toString(i);
  }
  int childDocId=0;
  int numParentDocs=scaledRandomIntBetween(1,numUniqueParentValues);
  ObjectObjectOpenHashMap<String,NavigableSet<String>> parentValueToChildDocIds=new ObjectObjectOpenHashMap<>();
  IntIntOpenHashMap childIdToParentId=new IntIntOpenHashMap();
  for (int parentDocId=0; parentDocId < numParentDocs; parentDocId++) {
    boolean markParentAsDeleted=rarely();
    String parentValue=parentValues[random().nextInt(parentValues.length)];
    String parent=Integer.toString(parentDocId);
    Document document=new Document();
    document.add(new StringField(UidFieldMapper.NAME,Uid.createUid("parent",parent),Field.Store.NO));
    document.add(new StringField(TypeFieldMapper.NAME,"parent",Field.Store.NO));
    document.add(new StringField("field1",parentValue,Field.Store.NO));
    if (markParentAsDeleted) {
      document.add(new StringField("delete","me",Field.Store.NO));
    }
    indexWriter.addDocument(document);
    int numChildDocs=scaledRandomIntBetween(0,100);
    if (parentDocId == numParentDocs - 1 && childIdToParentId.isEmpty()) {
      numChildDocs=Math.max(1,numChildDocs);
    }
    for (int i=0; i < numChildDocs; i++) {
      boolean markChildAsDeleted=rarely();
      boolean filterMe=rarely();
      String child=Integer.toString(childDocId++);
      document=new Document();
      document.add(new StringField(UidFieldMapper.NAME,Uid.createUid("child",child),Field.Store.YES));
      document.add(new StringField(TypeFieldMapper.NAME,"child",Field.Store.NO));
      document.add(new StringField(ParentFieldMapper.NAME,Uid.createUid("parent",parent),Field.Store.NO));
      if (markChildAsDeleted) {
        document.add(new StringField("delete","me",Field.Store.NO));
      }
      if (filterMe) {
        document.add(new StringField("filter","me",Field.Store.NO));
      }
      indexWriter.addDocument(document);
      if (!markParentAsDeleted) {
        NavigableSet<String> childIds;
        if (parentValueToChildDocIds.containsKey(parentValue)) {
          childIds=parentValueToChildDocIds.lget();
        }
 else {
          parentValueToChildDocIds.put(parentValue,childIds=new TreeSet<>());
        }
        if (!markChildAsDeleted && !filterMe) {
          childIdToParentId.put(Integer.valueOf(child),parentDocId);
          childIds.add(child);
        }
      }
    }
  }
  indexWriter.deleteDocuments(new Term("delete","me"));
  indexWriter.commit();
  IndexReader indexReader=DirectoryReader.open(directory);
  IndexSearcher searcher=new IndexSearcher(indexReader);
  Engine.Searcher engineSearcher=new Engine.Searcher(ParentConstantScoreQuery.class.getSimpleName(),searcher);
  ((TestSearchContext)SearchContext.current()).setSearcher(new ContextIndexSearcher(SearchContext.current(),engineSearcher));
  int max=numUniqueParentValues / 4;
  for (int i=0; i < max; i++) {
    if (random().nextBoolean()) {
      int numberOfUpdates=childIdToParentId.isEmpty() ? 0 : scaledRandomIntBetween(1,25);
      int[] childIds=childIdToParentId.keys().toArray();
      for (int j=0; j < numberOfUpdates; j++) {
        int childId=childIds[random().nextInt(childIds.length)];
        String childUid=Uid.createUid("child",Integer.toString(childId));
        indexWriter.deleteDocuments(new Term(UidFieldMapper.NAME,childUid));
        Document document=new Document();
        document.add(new StringField(UidFieldMapper.NAME,childUid,Field.Store.YES));
        document.add(new StringField(TypeFieldMapper.NAME,"child",Field.Store.NO));
        String parentUid=Uid.createUid("parent",Integer.toString(childIdToParentId.get(childId)));
        document.add(new StringField(ParentFieldMapper.NAME,parentUid,Field.Store.NO));
        indexWriter.addDocument(document);
      }
      indexReader.close();
      indexReader=DirectoryReader.open(indexWriter.w,true);
      searcher=new IndexSearcher(indexReader);
      engineSearcher=new Engine.Searcher(ParentConstantScoreQueryTests.class.getSimpleName(),searcher);
      ((TestSearchContext)SearchContext.current()).setSearcher(new ContextIndexSearcher(SearchContext.current(),engineSearcher));
    }
    String parentValue=parentValues[random().nextInt(numUniqueParentValues)];
    QueryBuilder queryBuilder;
    if (random().nextBoolean()) {
      queryBuilder=hasParentQuery("parent",termQuery("field1",parentValue));
    }
 else {
      queryBuilder=constantScoreQuery(hasParentFilter("parent",termFilter("field1",parentValue)));
    }
    queryBuilder=filteredQuery(queryBuilder,notFilter(termFilter("filter","me")));
    Query query=parseQuery(queryBuilder);
    BitSetCollector collector=new BitSetCollector(indexReader.maxDoc());
    searcher.search(query,collector);
    FixedBitSet actualResult=collector.getResult();
    FixedBitSet expectedResult=new FixedBitSet(indexReader.maxDoc());
    if (parentValueToChildDocIds.containsKey(parentValue)) {
      LeafReader slowLeafReader=SlowCompositeReaderWrapper.wrap(indexReader);
      Terms terms=slowLeafReader.terms(UidFieldMapper.NAME);
      if (terms != null) {
        NavigableSet<String> childIds=parentValueToChildDocIds.lget();
        TermsEnum termsEnum=terms.iterator(null);
        DocsEnum docsEnum=null;
        for (        String id : childIds) {
          TermsEnum.SeekStatus seekStatus=termsEnum.seekCeil(Uid.createUidAsBytes("child",id));
          if (seekStatus == TermsEnum.SeekStatus.FOUND) {
            docsEnum=termsEnum.docs(slowLeafReader.getLiveDocs(),docsEnum,DocsEnum.FLAG_NONE);
            expectedResult.set(docsEnum.nextDoc());
          }
 else           if (seekStatus == TermsEnum.SeekStatus.END) {
            break;
          }
        }
      }
    }
    assertBitSet(actualResult,expectedResult,searcher);
  }
  indexWriter.close();
  indexReader.close();
  directory.close();
}
