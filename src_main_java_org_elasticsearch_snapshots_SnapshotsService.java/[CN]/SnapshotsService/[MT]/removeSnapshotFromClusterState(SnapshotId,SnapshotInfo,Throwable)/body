{
  clusterService.submitStateUpdateTask("remove snapshot metadata",new ProcessedClusterStateUpdateTask(){
    @Override public ClusterState execute(    ClusterState currentState){
      MetaData metaData=currentState.metaData();
      MetaData.Builder mdBuilder=MetaData.builder(currentState.metaData());
      SnapshotMetaData snapshots=metaData.custom(SnapshotMetaData.TYPE);
      if (snapshots != null) {
        boolean changed=false;
        ArrayList<SnapshotMetaData.Entry> entries=newArrayList();
        for (        SnapshotMetaData.Entry entry : snapshots.entries()) {
          if (entry.snapshotId().equals(snapshotId)) {
            changed=true;
          }
 else {
            entries.add(entry);
          }
        }
        if (changed) {
          snapshots=new SnapshotMetaData(entries.toArray(new SnapshotMetaData.Entry[entries.size()]));
          mdBuilder.putCustom(SnapshotMetaData.TYPE,snapshots);
          return ClusterState.builder(currentState).metaData(mdBuilder).build();
        }
      }
      return currentState;
    }
    @Override public void onFailure(    String source,    Throwable t){
      logger.warn("[{}][{}] failed to remove snapshot metadata",t,snapshotId);
    }
    @Override public void clusterStateProcessed(    String source,    ClusterState oldState,    ClusterState newState){
      for (      SnapshotCompletionListener listener : snapshotCompletionListeners) {
        try {
          if (snapshot != null) {
            listener.onSnapshotCompletion(snapshotId,snapshot);
          }
 else {
            listener.onSnapshotFailure(snapshotId,t);
          }
        }
 catch (        Throwable t) {
          logger.warn("failed to notify listener [{}]",t,listener);
        }
      }
    }
  }
);
}
