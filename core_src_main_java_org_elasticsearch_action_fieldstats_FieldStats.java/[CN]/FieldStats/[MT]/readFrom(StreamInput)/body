{
  byte type=in.readByte();
  long maxDoc=in.readLong();
  long docCount=in.readLong();
  long sumDocFreq=in.readLong();
  long sumTotalTermFreq=in.readLong();
  boolean isSearchable=in.readBoolean();
  boolean isAggregatable=in.readBoolean();
switch (type) {
case 0:
    return new Long(maxDoc,docCount,sumDocFreq,sumTotalTermFreq,isSearchable,isAggregatable,in.readLong(),in.readLong());
case 1:
  return new Double(maxDoc,docCount,sumDocFreq,sumTotalTermFreq,isSearchable,isAggregatable,in.readDouble(),in.readDouble());
case 2:
FormatDateTimeFormatter formatter=Joda.forPattern(in.readString());
return new Date(maxDoc,docCount,sumDocFreq,sumTotalTermFreq,isSearchable,isAggregatable,formatter,in.readLong(),in.readLong());
case 3:
return new Text(maxDoc,docCount,sumDocFreq,sumTotalTermFreq,isSearchable,isAggregatable,in.readBytesRef(),in.readBytesRef());
case 4:
int l1=in.readByte();
byte[] b1=new byte[l1];
in.readBytes(b1,0,l1);
int l2=in.readByte();
byte[] b2=new byte[l2];
in.readBytes(b2,0,l2);
InetAddress min=InetAddressPoint.decode(b1);
InetAddress max=InetAddressPoint.decode(b2);
return new Ip(maxDoc,docCount,sumDocFreq,sumTotalTermFreq,isSearchable,isAggregatable,min,max);
default :
throw new IllegalArgumentException("Unknown type.");
}
}
