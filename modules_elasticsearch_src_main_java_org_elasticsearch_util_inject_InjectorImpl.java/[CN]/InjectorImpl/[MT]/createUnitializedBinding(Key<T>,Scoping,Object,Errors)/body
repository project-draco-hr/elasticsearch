{
  Class<?> rawType=key.getTypeLiteral().getRawType();
  if (rawType.isArray() || rawType.isEnum()) {
    throw errors.missingImplementation(key).toException();
  }
  if (rawType == TypeLiteral.class) {
    @SuppressWarnings("unchecked") BindingImpl<T> binding=(BindingImpl<T>)createTypeLiteralBinding((Key<TypeLiteral<Object>>)key,errors);
    return binding;
  }
  ImplementedBy implementedBy=rawType.getAnnotation(ImplementedBy.class);
  if (implementedBy != null) {
    Annotations.checkForMisplacedScopeAnnotations(rawType,source,errors);
    return createImplementedByBinding(key,scoping,implementedBy,errors);
  }
  ProvidedBy providedBy=rawType.getAnnotation(ProvidedBy.class);
  if (providedBy != null) {
    Annotations.checkForMisplacedScopeAnnotations(rawType,source,errors);
    return createProvidedByBinding(key,scoping,providedBy,errors);
  }
  if (Modifier.isAbstract(rawType.getModifiers())) {
    throw errors.missingImplementation(key).toException();
  }
  if (Classes.isInnerClass(rawType)) {
    throw errors.cannotInjectInnerClass(rawType).toException();
  }
  if (!scoping.isExplicitlyScoped()) {
    Class<? extends Annotation> scopeAnnotation=findScopeAnnotation(errors,rawType);
    if (scopeAnnotation != null) {
      scoping=Scopes.makeInjectable(Scoping.forAnnotation(scopeAnnotation),this,errors.withSource(rawType));
    }
  }
  return ConstructorBindingImpl.create(this,key,source,scoping);
}
