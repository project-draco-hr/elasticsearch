{
  Class<?> rawType=key.getTypeLiteral().getRawType();
  Class<?> implementationType=implementedBy.value();
  if (implementationType == rawType) {
    throw errors.recursiveImplementationType().toException();
  }
  if (!rawType.isAssignableFrom(implementationType)) {
    throw errors.notASubtype(implementationType,rawType).toException();
  }
  @SuppressWarnings("unchecked") Class<? extends T> subclass=(Class<? extends T>)implementationType;
  final Key<? extends T> targetKey=Key.get(subclass);
  final BindingImpl<? extends T> targetBinding=getBindingOrThrow(targetKey,errors);
  InternalFactory<T> internalFactory=new InternalFactory<T>(){
    public T get(    Errors errors,    InternalContext context,    Dependency<?> dependency) throws ErrorsException {
      return targetBinding.getInternalFactory().get(errors.withSource(targetKey),context,dependency);
    }
  }
;
  return new LinkedBindingImpl<T>(this,key,rawType,Scopes.<T>scope(key,this,internalFactory,scoping),scoping,targetKey);
}
