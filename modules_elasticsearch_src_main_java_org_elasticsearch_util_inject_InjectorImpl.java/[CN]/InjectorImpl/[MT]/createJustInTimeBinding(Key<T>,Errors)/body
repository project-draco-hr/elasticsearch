{
  if (state.isBlacklisted(key)) {
    throw errors.childBindingAlreadySet(key).toException();
  }
  if (isProvider(key)) {
    @SuppressWarnings("unchecked") BindingImpl binding=createProviderBinding((Key)key,errors);
    return binding;
  }
  if (isMembersInjector(key)) {
    @SuppressWarnings("unchecked") BindingImpl binding=createMembersInjectorBinding((Key)key,errors);
    return binding;
  }
  BindingImpl<T> convertedBinding=convertConstantStringBinding(key,errors);
  if (convertedBinding != null) {
    return convertedBinding;
  }
  if (key.hasAnnotationType()) {
    if (key.hasAttributes()) {
      try {
        Errors ignored=new Errors();
        return getBindingOrThrow(key.withoutAttributes(),ignored);
      }
 catch (      ErrorsException ignored) {
      }
    }
    throw errors.missingImplementation(key).toException();
  }
  Object source=key.getTypeLiteral().getRawType();
  BindingImpl<T> binding=createUnitializedBinding(key,Scoping.UNSCOPED,source,errors);
  initializeBinding(binding,errors);
  return binding;
}
