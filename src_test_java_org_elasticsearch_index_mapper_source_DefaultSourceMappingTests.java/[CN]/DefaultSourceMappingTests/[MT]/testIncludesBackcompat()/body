{
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_source").field("includes",new String[]{"path1*"}).endObject().endObject().endObject().string();
  try {
    createIndex("testbad").mapperService().documentMapperParser().parse(mapping);
    fail("includes should not be allowed");
  }
 catch (  MapperParsingException e) {
    assertTrue(e.getMessage().contains("unsupported parameters"));
  }
  Settings settings=ImmutableSettings.builder().put(IndexMetaData.SETTING_VERSION_CREATED,Version.V_1_4_2.id).build();
  DocumentMapper documentMapper=createIndex("test",settings).mapperService().documentMapperParser().parse(mapping);
  ParsedDocument doc=documentMapper.parse("type","1",XContentFactory.jsonBuilder().startObject().startObject("path1").field("field1","value1").endObject().startObject("path2").field("field2","value2").endObject().endObject().bytes());
  IndexableField sourceField=doc.rootDoc().getField("_source");
  Map<String,Object> sourceAsMap=XContentFactory.xContent(XContentType.JSON).createParser(new BytesArray(sourceField.binaryValue())).mapAndClose();
  assertThat(sourceAsMap.containsKey("path1"),equalTo(true));
  assertThat(sourceAsMap.containsKey("path2"),equalTo(false));
}
