{
  ClusterState clusterState=clusterService.state();
  clusterState.blocks().globalBlockedRaiseException(ClusterBlockLevel.READ);
  final AtomicArray<MultiGetItemResponse> responses=new AtomicArray<>(request.items.size());
  Map<ShardId,MultiGetShardRequest> shardRequests=new HashMap<>();
  for (int i=0; i < request.items.size(); i++) {
    MultiGetRequest.Item item=request.items.get(i);
    if (!clusterState.metaData().hasConcreteIndex(item.index())) {
      responses.set(i,new MultiGetItemResponse(null,new MultiGetResponse.Failure(item.index(),item.type(),item.id(),new IndexNotFoundException(item.index()))));
      continue;
    }
    item.routing(clusterState.metaData().resolveIndexRouting(item.parent(),item.routing(),item.index()));
    String concreteSingleIndex=indexNameExpressionResolver.concreteSingleIndex(clusterState,item).getName();
    if (item.routing() == null && clusterState.getMetaData().routingRequired(concreteSingleIndex,item.type())) {
      responses.set(i,new MultiGetItemResponse(null,new MultiGetResponse.Failure(concreteSingleIndex,item.type(),item.id(),new IllegalArgumentException("routing is required for [" + concreteSingleIndex + "]/["+ item.type()+ "]/["+ item.id()+ "]"))));
      continue;
    }
    ShardId shardId=clusterService.operationRouting().getShards(clusterState,concreteSingleIndex,item.type(),item.id(),item.routing(),null).shardId();
    MultiGetShardRequest shardRequest=shardRequests.get(shardId);
    if (shardRequest == null) {
      shardRequest=new MultiGetShardRequest(request,shardId.getIndexName(),shardId.id());
      shardRequests.put(shardId,shardRequest);
    }
    shardRequest.add(i,item);
  }
  if (shardRequests.size() == 0) {
    listener.onResponse(new MultiGetResponse(responses.toArray(new MultiGetItemResponse[responses.length()])));
  }
  final AtomicInteger counter=new AtomicInteger(shardRequests.size());
  for (  final MultiGetShardRequest shardRequest : shardRequests.values()) {
    shardAction.execute(shardRequest,new ActionListener<MultiGetShardResponse>(){
      @Override public void onResponse(      MultiGetShardResponse response){
        for (int i=0; i < response.locations.size(); i++) {
          responses.set(response.locations.get(i),new MultiGetItemResponse(response.responses.get(i),response.failures.get(i)));
        }
        if (counter.decrementAndGet() == 0) {
          finishHim();
        }
      }
      @Override public void onFailure(      Throwable e){
        for (int i=0; i < shardRequest.locations.size(); i++) {
          MultiGetRequest.Item item=shardRequest.items.get(i);
          responses.set(shardRequest.locations.get(i),new MultiGetItemResponse(null,new MultiGetResponse.Failure(shardRequest.index(),item.type(),item.id(),e)));
        }
        if (counter.decrementAndGet() == 0) {
          finishHim();
        }
      }
      private void finishHim(){
        listener.onResponse(new MultiGetResponse(responses.toArray(new MultiGetItemResponse[responses.length()])));
      }
    }
);
  }
}
