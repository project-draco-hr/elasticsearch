{
  final String[] repositories=request.paramAsStringArray("repository",Strings.EMPTY_ARRAY);
  GetRepositoriesRequest getRepositoriesRequest=getRepositoryRequest(repositories);
  getRepositoriesRequest.masterNodeTimeout(request.paramAsTime("master_timeout",getRepositoriesRequest.masterNodeTimeout()));
  client.admin().cluster().getRepositories(getRepositoriesRequest,new ActionListener<GetRepositoriesResponse>(){
    @Override public void onResponse(    GetRepositoriesResponse response){
      try {
        XContentBuilder builder=RestXContentBuilder.restContentBuilder(request);
        builder.startObject();
        for (        RepositoryMetaData repositoryMetaData : response.repositories()) {
          RepositoriesMetaData.FACTORY.toXContent(repositoryMetaData,builder,request);
        }
        builder.endObject();
        channel.sendResponse(new XContentRestResponse(request,OK,builder));
      }
 catch (      Throwable e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
