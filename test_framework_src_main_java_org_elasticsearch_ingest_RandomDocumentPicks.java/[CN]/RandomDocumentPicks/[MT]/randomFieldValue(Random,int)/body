{
switch (RandomInts.randomIntBetween(random,0,9)) {
case 0:
    return randomString(random);
case 1:
  return random.nextInt();
case 2:
return random.nextBoolean();
case 3:
return random.nextDouble();
case 4:
List<String> stringList=new ArrayList<>();
int numStringItems=RandomInts.randomIntBetween(random,1,10);
for (int j=0; j < numStringItems; j++) {
stringList.add(randomString(random));
}
return stringList;
case 5:
List<Integer> intList=new ArrayList<>();
int numIntItems=RandomInts.randomIntBetween(random,1,10);
for (int j=0; j < numIntItems; j++) {
intList.add(random.nextInt());
}
return intList;
case 6:
List<Boolean> booleanList=new ArrayList<>();
int numBooleanItems=RandomInts.randomIntBetween(random,1,10);
for (int j=0; j < numBooleanItems; j++) {
booleanList.add(random.nextBoolean());
}
return booleanList;
case 7:
List<Double> doubleList=new ArrayList<>();
int numDoubleItems=RandomInts.randomIntBetween(random,1,10);
for (int j=0; j < numDoubleItems; j++) {
doubleList.add(random.nextDouble());
}
return doubleList;
case 8:
Map<String,Object> newNode=new HashMap<>();
addRandomFields(random,newNode,++currentDepth);
return newNode;
case 9:
byte[] byteArray=new byte[RandomInts.randomIntBetween(random,1,1024)];
random.nextBytes(byteArray);
return byteArray;
default :
throw new UnsupportedOperationException();
}
}
