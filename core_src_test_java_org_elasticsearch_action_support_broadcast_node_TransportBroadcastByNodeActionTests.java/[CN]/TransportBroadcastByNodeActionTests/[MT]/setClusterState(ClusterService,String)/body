{
  int numberOfNodes=randomIntBetween(3,5);
  DiscoveryNodes.Builder discoBuilder=DiscoveryNodes.builder();
  IndexRoutingTable.Builder indexRoutingTable=IndexRoutingTable.builder(new Index(index,"_na_"));
  int shardIndex=-1;
  for (int i=0; i < numberOfNodes; i++) {
    final DiscoveryNode node=newNode(i);
    discoBuilder=discoBuilder.put(node);
    int numberOfShards=randomIntBetween(1,10);
    for (int j=0; j < numberOfShards; j++) {
      final ShardId shardId=new ShardId(index,"_na_",++shardIndex);
      ShardRouting shard=TestShardRouting.newShardRouting(index,shardId.getId(),node.id(),true,ShardRoutingState.STARTED);
      IndexShardRoutingTable.Builder indexShard=new IndexShardRoutingTable.Builder(shardId);
      indexShard.addShard(shard);
      indexRoutingTable.addIndexShard(indexShard.build());
    }
  }
  discoBuilder.localNodeId(newNode(0).id());
  discoBuilder.masterNodeId(newNode(numberOfNodes - 1).id());
  ClusterState.Builder stateBuilder=ClusterState.builder(new ClusterName(TEST_CLUSTER));
  stateBuilder.nodes(discoBuilder);
  stateBuilder.routingTable(RoutingTable.builder().add(indexRoutingTable.build()).build());
  ClusterState clusterState=stateBuilder.build();
  setState(clusterService,clusterState);
}
