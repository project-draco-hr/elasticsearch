{
  if (collectsFromSingleBucket == false) {
    return asMultiBucketAggregator(this,aggregationContext,parent);
  }
  BucketCountThresholds bucketCountThresholds=new BucketCountThresholds(this.bucketCountThresholds);
  if (!(order == InternalOrder.TERM_ASC || order == InternalOrder.TERM_DESC) && bucketCountThresholds.getShardSize() == TermsAggregatorBuilder.DEFAULT_BUCKET_COUNT_THRESHOLDS.getShardSize()) {
    bucketCountThresholds.setShardSize(BucketUtils.suggestShardSideQueueSize(bucketCountThresholds.getRequiredSize(),aggregationContext.searchContext().numberOfShards()));
  }
  bucketCountThresholds.ensureValidity();
  if (valuesSource instanceof ValuesSource.Bytes) {
    ExecutionMode execution=null;
    if (executionHint != null) {
      execution=ExecutionMode.fromString(executionHint,aggregationContext.searchContext().parseFieldMatcher());
    }
    if (!(valuesSource instanceof ValuesSource.Bytes.WithOrdinals)) {
      execution=ExecutionMode.MAP;
    }
    final long maxOrd;
    final double ratio;
    if (execution == null || execution.needsGlobalOrdinals()) {
      ValuesSource.Bytes.WithOrdinals valueSourceWithOrdinals=(ValuesSource.Bytes.WithOrdinals)valuesSource;
      IndexSearcher indexSearcher=aggregationContext.searchContext().searcher();
      maxOrd=valueSourceWithOrdinals.globalMaxOrd(indexSearcher);
      ratio=maxOrd / ((double)indexSearcher.getIndexReader().numDocs());
    }
 else {
      maxOrd=-1;
      ratio=-1;
    }
    if (execution == null) {
      if (Aggregator.descendsFromBucketAggregator(parent)) {
        execution=ExecutionMode.GLOBAL_ORDINALS_HASH;
      }
 else {
        if (factories == AggregatorFactories.EMPTY) {
          if (ratio <= 0.5 && maxOrd <= 2048) {
            execution=ExecutionMode.GLOBAL_ORDINALS_LOW_CARDINALITY;
          }
 else {
            execution=ExecutionMode.GLOBAL_ORDINALS;
          }
        }
 else {
          execution=ExecutionMode.GLOBAL_ORDINALS;
        }
      }
    }
    return execution.create(name,factories,valuesSource,order,bucketCountThresholds,includeExclude,aggregationContext,parent,collectMode,showTermDocCountError,pipelineAggregators,metaData);
  }
  if ((includeExclude != null) && (includeExclude.isRegexBased())) {
    throw new AggregationExecutionException("Aggregation [" + name + "] cannot support regular expression style include/exclude "+ "settings as they can only be applied to string fields. Use an array of numeric values for include/exclude clauses used to filter numeric fields");
  }
  if (valuesSource instanceof ValuesSource.Numeric) {
    IncludeExclude.LongFilter longFilter=null;
    if (((ValuesSource.Numeric)valuesSource).isFloatingPoint()) {
      if (includeExclude != null) {
        longFilter=includeExclude.convertToDoubleFilter();
      }
      return new DoubleTermsAggregator(name,factories,(ValuesSource.Numeric)valuesSource,config.format(),order,bucketCountThresholds,aggregationContext,parent,collectMode,showTermDocCountError,longFilter,pipelineAggregators,metaData);
    }
    if (includeExclude != null) {
      longFilter=includeExclude.convertToLongFilter();
    }
    return new LongTermsAggregator(name,factories,(ValuesSource.Numeric)valuesSource,config.format(),order,bucketCountThresholds,aggregationContext,parent,collectMode,showTermDocCountError,longFilter,pipelineAggregators,metaData);
  }
  throw new AggregationExecutionException("terms aggregation cannot be applied to field [" + config.fieldContext().field() + "]. It can only be applied to numeric or string fields.");
}
