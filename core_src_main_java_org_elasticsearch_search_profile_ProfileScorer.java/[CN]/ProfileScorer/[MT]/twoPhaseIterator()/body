{
  final TwoPhaseIterator in=scorer.twoPhaseIterator();
  if (in == null) {
    return null;
  }
  final DocIdSetIterator inApproximation=in.approximation();
  final DocIdSetIterator approximation=new DocIdSetIterator(){
    @Override public int advance(    int target) throws IOException {
      profile.startTime(ProfileBreakdown.TimingType.ADVANCE);
      try {
        return inApproximation.advance(target);
      }
  finally {
        profile.stopAndRecordTime();
      }
    }
    @Override public int nextDoc() throws IOException {
      profile.startTime(ProfileBreakdown.TimingType.NEXT_DOC);
      try {
        return inApproximation.nextDoc();
      }
  finally {
        profile.stopAndRecordTime();
      }
    }
    @Override public int docID(){
      return inApproximation.docID();
    }
    @Override public long cost(){
      return inApproximation.cost();
    }
  }
;
  return new TwoPhaseIterator(approximation){
    @Override public boolean matches() throws IOException {
      profile.startTime(ProfileBreakdown.TimingType.MATCH);
      try {
        return in.matches();
      }
  finally {
        profile.stopAndRecordTime();
      }
    }
    @Override public float matchCost(){
      return in.matchCost();
    }
  }
;
}
