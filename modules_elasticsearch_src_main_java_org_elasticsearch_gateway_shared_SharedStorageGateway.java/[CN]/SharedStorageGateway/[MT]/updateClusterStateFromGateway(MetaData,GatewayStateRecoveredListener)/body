{
  final AtomicInteger indicesCounter=new AtomicInteger(fMetaData.indices().size());
  clusterService.submitStateUpdateTask("gateway (recovered meta-data)",new ProcessedClusterStateUpdateTask(){
    @Override public ClusterState execute(    ClusterState currentState){
      MetaData.Builder metaDataBuilder=newMetaDataBuilder().metaData(currentState.metaData());
      metaDataBuilder.markAsRecoveredFromGateway();
      for (      Map.Entry<String,IndexTemplateMetaData> entry : fMetaData.templates().entrySet()) {
        metaDataBuilder.put(entry.getValue());
      }
      return newClusterStateBuilder().state(currentState).metaData(metaDataBuilder).build();
    }
    @Override public void clusterStateProcessed(    ClusterState clusterState){
      if (fMetaData.indices().isEmpty()) {
        listener.onSuccess();
        return;
      }
      for (      final IndexMetaData indexMetaData : fMetaData) {
        try {
          createIndexService.createIndex(new MetaDataCreateIndexService.Request(MetaDataCreateIndexService.Request.Origin.GATEWAY,"gateway",indexMetaData.index()).settings(indexMetaData.settings()).mappingsMetaData(indexMetaData.mappings()).state(indexMetaData.state()).timeout(timeValueSeconds(30)),new MetaDataCreateIndexService.Listener(){
            @Override public void onResponse(            MetaDataCreateIndexService.Response response){
              if (indicesCounter.decrementAndGet() == 0) {
                listener.onSuccess();
              }
            }
            @Override public void onFailure(            Throwable t){
              logger.error("failed to create index [{}]",t,indexMetaData.index());
            }
          }
);
        }
 catch (        IOException e) {
          logger.error("failed to create index [{}]",e,indexMetaData.index());
        }
      }
    }
  }
);
}
