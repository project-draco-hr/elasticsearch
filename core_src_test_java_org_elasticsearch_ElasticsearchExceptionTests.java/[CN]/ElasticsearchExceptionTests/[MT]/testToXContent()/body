{
{
    ElasticsearchException ex=new SearchParseException(new TestSearchContext(),"foo",new XContentLocation(1,0));
    XContentBuilder builder=XContentFactory.jsonBuilder();
    builder.startObject();
    ex.toXContent(builder,ToXContent.EMPTY_PARAMS);
    builder.endObject();
    String expected="{\"type\":\"search_parse_exception\",\"reason\":\"foo\",\"line\":1,\"col\":0}";
    assertEquals(expected,builder.string());
  }
{
    ElasticsearchException ex=new ElasticsearchException("foo",new ElasticsearchException("bar",new IllegalArgumentException("index is closed",new RuntimeException("foobar"))));
    XContentBuilder builder=XContentFactory.jsonBuilder();
    builder.startObject();
    ex.toXContent(builder,ToXContent.EMPTY_PARAMS);
    builder.endObject();
    String expected="{\"type\":\"exception\",\"reason\":\"foo\",\"caused_by\":{\"type\":\"exception\",\"reason\":\"bar\",\"caused_by\":{\"type\":\"illegal_argument_exception\",\"reason\":\"index is closed\",\"caused_by\":{\"type\":\"runtime_exception\",\"reason\":\"foobar\"}}}}";
    assertEquals(expected,builder.string());
  }
{
    Exception ex=new FileNotFoundException("foo not found");
    if (randomBoolean()) {
      ex=new RemoteTransportException("foobar",ex);
    }
    XContentBuilder builder=XContentFactory.jsonBuilder();
    builder.startObject();
    ElasticsearchException.toXContent(builder,ToXContent.EMPTY_PARAMS,ex);
    builder.endObject();
    String expected="{\"type\":\"file_not_found_exception\",\"reason\":\"foo not found\"}";
    assertEquals(expected,builder.string());
  }
{
    QueryParsingException ex=new TestQueryParsingException(new Index("foo"),1,2,"foobar",null);
    XContentBuilder builder=XContentFactory.jsonBuilder();
    builder.startObject();
    ElasticsearchException.toXContent(builder,ToXContent.EMPTY_PARAMS,ex);
    builder.endObject();
    String expected="{\"type\":\"test_query_parsing_exception\",\"reason\":\"foobar\",\"line\":1,\"col\":2,\"index\":\"foo\"}";
    assertEquals(expected,builder.string());
  }
{
    ElasticsearchException ex=new RemoteTransportException("foobar",new FileNotFoundException("foo not found"));
    XContentBuilder builder=XContentFactory.jsonBuilder();
    builder.startObject();
    ElasticsearchException.toXContent(builder,ToXContent.EMPTY_PARAMS,ex);
    builder.endObject();
    XContentBuilder otherBuilder=XContentFactory.jsonBuilder();
    otherBuilder.startObject();
    ex.toXContent(otherBuilder,ToXContent.EMPTY_PARAMS);
    otherBuilder.endObject();
    assertEquals(otherBuilder.string(),builder.string());
    assertEquals("{\"type\":\"file_not_found_exception\",\"reason\":\"foo not found\"}",builder.string());
  }
}
