{
  Settings nodeSettings=nodeSettings();
  Settings fooSettings=ImmutableSettings.builder().put(nodeSettings).put("node.affinity","foo").build();
  Settings barSettings=ImmutableSettings.builder().put(nodeSettings).put("node.affinity","bar").build();
  final Future<List<String>> fooNodes=internalCluster().startNodesAsync(2,fooSettings);
  final Future<List<String>> barNodes=internalCluster().startNodesAsync(2,barSettings);
  fooNodes.get();
  barNodes.get();
  Path dataPath=createTempDir();
  String IDX="test";
  Settings includeFoo=ImmutableSettings.builder().put("index.routing.allocation.include.affinity","foo").build();
  Settings includeBar=ImmutableSettings.builder().put("index.routing.allocation.include.affinity","bar").build();
  Settings idxSettings=ImmutableSettings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,5).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,0).put(IndexMetaData.SETTING_DATA_PATH,dataPath.toAbsolutePath().toString()).put(IndexMetaData.SETTING_SHARED_FILESYSTEM,true).put(IndexMetaData.SETTING_SHARED_FS_ALLOW_RECOVERY_ON_ANY_NODE,true).put(includeFoo).build();
  prepareCreate(IDX).setSettings(idxSettings).addMapping("doc","foo","type=string,index=not_analyzed").get();
  ensureGreen(IDX);
  client().prepareIndex(IDX,"doc","1").setSource("foo","foo").get();
  client().prepareIndex(IDX,"doc","2").setSource("foo","bar").get();
  client().prepareIndex(IDX,"doc","3").setSource("foo","baz").get();
  client().prepareIndex(IDX,"doc","4").setSource("foo","eggplant").get();
  flushAndRefresh(IDX);
  client().admin().indices().prepareUpdateSettings(IDX).setSettings(includeBar).get();
  assertNoShardsOn(fooNodes.get());
  client().admin().indices().prepareUpdateSettings(IDX).setSettings(includeFoo).get();
  assertNoShardsOn(barNodes.get());
  logger.info("--> stopping first 'foo' node");
  internalCluster().stopRandomNode(InternalTestCluster.nameFilter(fooNodes.get().get(0)));
  assertShardCountOn(fooNodes.get().get(1),5);
  assertNoShardsOn(barNodes.get());
  logger.info("--> stopping second 'foo' node");
  internalCluster().stopRandomNode(InternalTestCluster.nameFilter(fooNodes.get().get(1)));
  ensureGreen(IDX);
  logger.info("--> starting additional 'foo' node");
  String newFooNode=internalCluster().startNode(fooSettings);
  assertShardCountOn(newFooNode,5);
  assertNoShardsOn(barNodes.get());
}
