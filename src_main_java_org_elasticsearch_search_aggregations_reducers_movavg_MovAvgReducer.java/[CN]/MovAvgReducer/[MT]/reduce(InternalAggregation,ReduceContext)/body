{
  InternalHistogram histo=(InternalHistogram)aggregation;
  List<? extends InternalHistogram.Bucket> buckets=histo.getBuckets();
  InternalHistogram.Factory<? extends InternalHistogram.Bucket> factory=histo.getFactory();
  List newBuckets=new ArrayList<>();
  EvictingQueue<Double> values=EvictingQueue.create(this.window);
  long lastKey=0;
  long interval=Long.MAX_VALUE;
  Object currentKey;
  for (  InternalHistogram.Bucket bucket : buckets) {
    Double thisBucketValue=resolveBucketValue(histo,bucket,bucketsPaths()[0],gapPolicy);
    currentKey=bucket.getKey();
    if (thisBucketValue != null) {
      values.offer(thisBucketValue);
      double movavg=model.next(values);
      List<InternalAggregation> aggs=new ArrayList<>(Lists.transform(bucket.getAggregations().asList(),FUNCTION));
      aggs.add(new InternalSimpleValue(name(),movavg,formatter,new ArrayList<Reducer>(),metaData()));
      InternalHistogram.Bucket newBucket=factory.createBucket(currentKey,bucket.getDocCount(),new InternalAggregations(aggs),bucket.getKeyed(),bucket.getFormatter());
      newBuckets.add(newBucket);
    }
 else {
      newBuckets.add(bucket);
    }
    if (predict > 0) {
      if (currentKey instanceof Number) {
        interval=Math.min(interval,((Number)bucket.getKey()).longValue() - lastKey);
        lastKey=((Number)bucket.getKey()).longValue();
      }
 else       if (currentKey instanceof DateTime) {
        interval=Math.min(interval,((DateTime)bucket.getKey()).getMillis() - lastKey);
        lastKey=((DateTime)bucket.getKey()).getMillis();
      }
 else {
        throw new AggregationExecutionException("Expected key of type Number or DateTime but got [" + currentKey + "]");
      }
    }
  }
  if (buckets.size() > 0 && predict > 0) {
    boolean keyed;
    ValueFormatter formatter;
    keyed=buckets.get(0).getKeyed();
    formatter=buckets.get(0).getFormatter();
    double[] predictions=model.predict(values,predict);
    for (int i=0; i < predictions.length; i++) {
      List<InternalAggregation> aggs=new ArrayList<>();
      aggs.add(new InternalSimpleValue(name(),predictions[i],formatter,new ArrayList<Reducer>(),metaData()));
      InternalHistogram.Bucket newBucket=factory.createBucket(lastKey + (interval * (i + 1)),0,new InternalAggregations(aggs),keyed,formatter);
      newBuckets.add(newBucket);
    }
  }
  return factory.create(newBuckets,histo);
}
