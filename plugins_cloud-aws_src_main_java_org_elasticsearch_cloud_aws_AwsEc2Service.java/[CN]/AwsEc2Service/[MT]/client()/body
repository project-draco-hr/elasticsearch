{
  if (client != null) {
    return client;
  }
  ClientConfiguration clientConfiguration=new ClientConfiguration();
  clientConfiguration.setResponseMetadataCacheSize(0);
  String protocol=settings.get("cloud.aws.protocol","https").toLowerCase(Locale.ROOT);
  protocol=settings.get("cloud.aws.ec2.protocol",protocol).toLowerCase(Locale.ROOT);
  if ("http".equals(protocol)) {
    clientConfiguration.setProtocol(Protocol.HTTP);
  }
 else   if ("https".equals(protocol)) {
    clientConfiguration.setProtocol(Protocol.HTTPS);
  }
 else {
    throw new IllegalArgumentException("No protocol supported [" + protocol + "], can either be [http] or [https]");
  }
  String account=settings.get("cloud.aws.access_key",settings.get("cloud.account"));
  String key=settings.get("cloud.aws.secret_key",settings.get("cloud.key"));
  String proxyHost=settings.get("cloud.aws.proxy_host");
  proxyHost=settings.get("cloud.aws.ec2.proxy_host",proxyHost);
  if (proxyHost != null) {
    String portString=settings.get("cloud.aws.proxy_port","80");
    portString=settings.get("cloud.aws.ec2.proxy_port",portString);
    Integer proxyPort;
    try {
      proxyPort=Integer.parseInt(portString,10);
    }
 catch (    NumberFormatException ex) {
      throw new IllegalArgumentException("The configured proxy port value [" + portString + "] is invalid",ex);
    }
    clientConfiguration.withProxyHost(proxyHost).setProxyPort(proxyPort);
  }
  String awsSigner=settings.get("cloud.aws.ec2.signer",settings.get("cloud.aws.signer"));
  if (awsSigner != null) {
    logger.debug("using AWS API signer [{}]",awsSigner);
    try {
      AwsSigner.configureSigner(awsSigner,clientConfiguration);
    }
 catch (    IllegalArgumentException e) {
      logger.warn("wrong signer set for [cloud.aws.ec2.signer] or [cloud.aws.signer]: [{}]",awsSigner);
    }
  }
  AWSCredentialsProvider credentials;
  if (account == null && key == null) {
    credentials=new AWSCredentialsProviderChain(new EnvironmentVariableCredentialsProvider(),new SystemPropertiesCredentialsProvider(),new InstanceProfileCredentialsProvider());
  }
 else {
    credentials=new AWSCredentialsProviderChain(new StaticCredentialsProvider(new BasicAWSCredentials(account,key)));
  }
  this.client=new AmazonEC2Client(credentials,clientConfiguration);
  if (settings.get("cloud.aws.ec2.endpoint") != null) {
    String endpoint=settings.get("cloud.aws.ec2.endpoint");
    logger.debug("using explicit ec2 endpoint [{}]",endpoint);
    client.setEndpoint(endpoint);
  }
 else   if (settings.get("cloud.aws.region") != null) {
    String region=settings.get("cloud.aws.region").toLowerCase(Locale.ROOT);
    String endpoint;
    if (region.equals("us-east-1") || region.equals("us-east")) {
      endpoint="ec2.us-east-1.amazonaws.com";
    }
 else     if (region.equals("us-west") || region.equals("us-west-1")) {
      endpoint="ec2.us-west-1.amazonaws.com";
    }
 else     if (region.equals("us-west-2")) {
      endpoint="ec2.us-west-2.amazonaws.com";
    }
 else     if (region.equals("ap-southeast") || region.equals("ap-southeast-1")) {
      endpoint="ec2.ap-southeast-1.amazonaws.com";
    }
 else     if (region.equals("ap-southeast-2")) {
      endpoint="ec2.ap-southeast-2.amazonaws.com";
    }
 else     if (region.equals("ap-northeast") || region.equals("ap-northeast-1")) {
      endpoint="ec2.ap-northeast-1.amazonaws.com";
    }
 else     if (region.equals("eu-west") || region.equals("eu-west-1")) {
      endpoint="ec2.eu-west-1.amazonaws.com";
    }
 else     if (region.equals("eu-central") || region.equals("eu-central-1")) {
      endpoint="ec2.eu-central-1.amazonaws.com";
    }
 else     if (region.equals("sa-east") || region.equals("sa-east-1")) {
      endpoint="ec2.sa-east-1.amazonaws.com";
    }
 else     if (region.equals("cn-north") || region.equals("cn-north-1")) {
      endpoint="ec2.cn-north-1.amazonaws.com.cn";
    }
 else {
      throw new IllegalArgumentException("No automatic endpoint could be derived from region [" + region + "]");
    }
    if (endpoint != null) {
      logger.debug("using ec2 region [{}], with endpoint [{}]",region,endpoint);
      client.setEndpoint(endpoint);
    }
  }
  return this.client;
}
