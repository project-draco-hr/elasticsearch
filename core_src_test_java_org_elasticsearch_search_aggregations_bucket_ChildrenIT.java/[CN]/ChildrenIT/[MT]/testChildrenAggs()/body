{
  SearchResponse searchResponse=client().prepareSearch("test").setQuery(matchQuery("randomized",true)).addAggregation(terms("category").field("category").size(10000).subAggregation(children("to_comment","comment").subAggregation(terms("commenters").field("commenter").size(10000).subAggregation(topHits("top_comments"))))).get();
  assertSearchResponse(searchResponse);
  Terms categoryTerms=searchResponse.getAggregations().get("category");
  assertThat(categoryTerms.getBuckets().size(),equalTo(categoryToControl.size()));
  for (  Map.Entry<String,Control> entry1 : categoryToControl.entrySet()) {
    Terms.Bucket categoryBucket=categoryTerms.getBucketByKey(entry1.getKey());
    assertThat(categoryBucket.getKeyAsString(),equalTo(entry1.getKey()));
    assertThat(categoryBucket.getDocCount(),equalTo((long)entry1.getValue().articleIds.size()));
    Children childrenBucket=categoryBucket.getAggregations().get("to_comment");
    assertThat(childrenBucket.getName(),equalTo("to_comment"));
    assertThat(childrenBucket.getDocCount(),equalTo((long)entry1.getValue().commentIds.size()));
    assertThat((long)childrenBucket.getProperty("_count"),equalTo((long)entry1.getValue().commentIds.size()));
    Terms commentersTerms=childrenBucket.getAggregations().get("commenters");
    assertThat((Terms)childrenBucket.getProperty("commenters"),sameInstance(commentersTerms));
    assertThat(commentersTerms.getBuckets().size(),equalTo(entry1.getValue().commenterToCommentId.size()));
    for (    Map.Entry<String,Set<String>> entry2 : entry1.getValue().commenterToCommentId.entrySet()) {
      Terms.Bucket commentBucket=commentersTerms.getBucketByKey(entry2.getKey());
      assertThat(commentBucket.getKeyAsString(),equalTo(entry2.getKey()));
      assertThat(commentBucket.getDocCount(),equalTo((long)entry2.getValue().size()));
      TopHits topHits=commentBucket.getAggregations().get("top_comments");
      for (      SearchHit searchHit : topHits.getHits().getHits()) {
        assertThat(entry2.getValue().contains(searchHit.getId()),is(true));
      }
    }
  }
}
