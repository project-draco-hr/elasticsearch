{
  Map<String,Version> maxBranchVersions=new HashMap<>();
  for (  java.lang.reflect.Field field : Version.class.getFields()) {
    if (field.getName().endsWith("_ID")) {
      assertTrue(field.getName() + " should be static",Modifier.isStatic(field.getModifiers()));
      assertTrue(field.getName() + " should be final",Modifier.isFinal(field.getModifiers()));
      int versionId=(Integer)field.get(Version.class);
      String constantName=field.getName().substring(0,field.getName().length() - 3);
      java.lang.reflect.Field versionConstant=Version.class.getField(constantName);
      assertTrue(constantName + " should be static",Modifier.isStatic(versionConstant.getModifiers()));
      assertTrue(constantName + " should be final",Modifier.isFinal(versionConstant.getModifiers()));
      Version v=(Version)versionConstant.get(Version.class);
      logger.info("Checking {}",v);
      assertEquals("Version id " + field.getName() + " does not point to "+ constantName,v,Version.fromId(versionId));
      assertEquals("Version " + constantName + " does not have correct id",versionId,v.id);
      if (v.major >= 2) {
        String number=v.toString();
        if (v.isBeta()) {
          number=number.replace("-beta","_beta");
        }
 else         if (v.isRC()) {
          number=number.replace("-rc","_rc");
        }
        assertEquals("V_" + number.replace('.','_'),constantName);
      }
 else {
        assertEquals("V_" + v.toString().replace('.','_'),constantName);
      }
      String branchName="" + v.major + "."+ v.minor;
      Version maxBranchVersion=maxBranchVersions.get(branchName);
      if (maxBranchVersion == null) {
        maxBranchVersions.put(branchName,v);
      }
 else       if (v.after(maxBranchVersion)) {
        assertFalse("Version " + maxBranchVersion + " cannot be a snapshot because version "+ v+ " exists",VersionUtils.isSnapshot(maxBranchVersion));
        maxBranchVersions.put(branchName,v);
      }
    }
  }
}
