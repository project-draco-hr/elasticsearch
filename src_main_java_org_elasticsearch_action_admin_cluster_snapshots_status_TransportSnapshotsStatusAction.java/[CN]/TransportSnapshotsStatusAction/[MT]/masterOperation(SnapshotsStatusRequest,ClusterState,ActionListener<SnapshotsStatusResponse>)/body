{
  ImmutableList<SnapshotMetaData.Entry> currentSnapshots=snapshotsService.currentSnapshots(request.repository(),request.snapshots());
  if (currentSnapshots.isEmpty()) {
    listener.onResponse(buildResponse(request,currentSnapshots,null));
    return;
  }
  Set<String> nodesIds=newHashSet();
  for (  SnapshotMetaData.Entry entry : currentSnapshots) {
    for (    SnapshotMetaData.ShardSnapshotStatus status : entry.shards().values()) {
      if (status.nodeId() != null) {
        nodesIds.add(status.nodeId());
      }
    }
  }
  if (!nodesIds.isEmpty()) {
    SnapshotId[] snapshotIds=new SnapshotId[currentSnapshots.size()];
    for (int i=0; i < currentSnapshots.size(); i++) {
      snapshotIds[i]=currentSnapshots.get(i).snapshotId();
    }
    TransportNodesSnapshotsStatus.Request nodesRequest=new TransportNodesSnapshotsStatus.Request(request,nodesIds.toArray(new String[nodesIds.size()])).snapshotIds(snapshotIds).timeout(request.masterNodeTimeout());
    transportNodesSnapshotsStatus.execute(nodesRequest,new ActionListener<TransportNodesSnapshotsStatus.NodesSnapshotStatus>(){
      @Override public void onResponse(      TransportNodesSnapshotsStatus.NodesSnapshotStatus nodeSnapshotStatuses){
        try {
          ImmutableList<SnapshotMetaData.Entry> currentSnapshots=snapshotsService.currentSnapshots(request.repository(),request.snapshots());
          listener.onResponse(buildResponse(request,currentSnapshots,nodeSnapshotStatuses));
        }
 catch (        Throwable e) {
          listener.onFailure(e);
        }
      }
      @Override public void onFailure(      Throwable e){
        listener.onFailure(e);
      }
    }
);
  }
 else {
    listener.onResponse(buildResponse(request,currentSnapshots,null));
  }
}
