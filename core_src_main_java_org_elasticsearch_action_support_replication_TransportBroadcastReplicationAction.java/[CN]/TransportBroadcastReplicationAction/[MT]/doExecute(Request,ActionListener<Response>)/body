{
  final ClusterState clusterState=clusterService.state();
  List<ShardId> shards=shards(request,clusterState);
  final CopyOnWriteArrayList<ShardResponse> shardsResponses=new CopyOnWriteArrayList();
  if (shards.size() == 0) {
    finishAndNotifyListener(listener,shardsResponses);
  }
  final CountDown responsesCountDown=new CountDown(shards.size());
  for (  final ShardId shardId : shards) {
    ActionListener<ShardResponse> shardActionListener=new ActionListener<ShardResponse>(){
      @Override public void onResponse(      ShardResponse shardResponse){
        shardsResponses.add(shardResponse);
        logger.trace("{}: got response from {}",actionName,shardId);
        if (responsesCountDown.countDown()) {
          finishAndNotifyListener(listener,shardsResponses);
        }
      }
      @Override public void onFailure(      Throwable e){
        logger.trace("{}: got failure from {}",actionName,shardId);
        int totalNumCopies=clusterState.getMetaData().index(shardId.index().getName()).getNumberOfReplicas() + 1;
        ShardResponse shardResponse=newShardResponse();
        ActionWriteResponse.ShardInfo.Failure[] failures;
        if (ExceptionsHelper.unwrap(e,UnavailableShardsException.class) != null) {
          failures=new ActionWriteResponse.ShardInfo.Failure[0];
        }
 else {
          ActionWriteResponse.ShardInfo.Failure failure=new ActionWriteResponse.ShardInfo.Failure(shardId.index().name(),shardId.id(),null,e,ExceptionsHelper.status(e),true);
          failures=new ActionWriteResponse.ShardInfo.Failure[totalNumCopies];
          Arrays.fill(failures,failure);
        }
        shardResponse.setShardInfo(new ActionWriteResponse.ShardInfo(totalNumCopies,0,failures));
        shardsResponses.add(shardResponse);
        if (responsesCountDown.countDown()) {
          finishAndNotifyListener(listener,shardsResponses);
        }
      }
    }
;
    shardExecute(request,shardId,shardActionListener);
  }
}
