{
  Analyzer<BasicValue> stringPlaceHolderAnalyzer=new Analyzer<>(new PlaceHolderStringInterpreter());
  Analyzer<BasicValue> arraySizeAnalyzer=new Analyzer<>(new ArraySizeInterpreter());
  try {
    stringPlaceHolderAnalyzer.analyze(className,methodNode);
    arraySizeAnalyzer.analyze(className,methodNode);
  }
 catch (  AnalyzerException e) {
    throw new RuntimeException("Internal error: failed in analysis step",e);
  }
  Frame<BasicValue>[] logMessageFrames=stringPlaceHolderAnalyzer.getFrames();
  Frame<BasicValue>[] arraySizeFrames=arraySizeAnalyzer.getFrames();
  AbstractInsnNode[] insns=methodNode.instructions.toArray();
  int lineNumber=-1;
  for (int i=0; i < insns.length; i++) {
    AbstractInsnNode insn=insns[i];
    if (insn instanceof LineNumberNode) {
      LineNumberNode lineNumberNode=(LineNumberNode)insn;
      lineNumber=lineNumberNode.line;
    }
    if (insn.getOpcode() == Opcodes.INVOKEINTERFACE) {
      MethodInsnNode methodInsn=(MethodInsnNode)insn;
      if (Type.getObjectType(methodInsn.owner).equals(LOGGER_CLASS)) {
        if (LOGGER_METHODS.contains(methodInsn.name) == false) {
          continue;
        }
        Type[] argumentTypes=Type.getArgumentTypes(methodInsn.desc);
        int markerOffset=0;
        if (argumentTypes[0].equals(MARKER_CLASS)) {
          markerOffset=1;
        }
        int lengthWithoutMarker=argumentTypes.length - markerOffset;
        if (lengthWithoutMarker == 2 && argumentTypes[markerOffset + 0].equals(STRING_CLASS) && (argumentTypes[markerOffset + 1].equals(OBJECT_ARRAY_CLASS) || argumentTypes[markerOffset + 1].equals(SUPPLIER_ARRAY_CLASS))) {
          checkArrayArgs(methodNode,logMessageFrames[i],arraySizeFrames[i],lineNumber,methodInsn,markerOffset + 0,markerOffset + 1);
        }
 else         if (lengthWithoutMarker >= 2 && argumentTypes[markerOffset + 0].equals(STRING_CLASS) && argumentTypes[markerOffset + 1].equals(OBJECT_CLASS)) {
          checkFixedArityArgs(methodNode,logMessageFrames[i],lineNumber,methodInsn,markerOffset + 0,lengthWithoutMarker - 1);
        }
 else         if ((lengthWithoutMarker == 1 || lengthWithoutMarker == 2) && lengthWithoutMarker == 2 ? argumentTypes[markerOffset + 1].equals(THROWABLE_CLASS) : true) {
          checkFixedArityArgs(methodNode,logMessageFrames[i],lineNumber,methodInsn,markerOffset + 0,0);
        }
 else {
          throw new IllegalStateException("Method invoked on " + LOGGER_CLASS.getClassName() + " that is not supported by logger usage checker");
        }
      }
    }
 else     if (insn.getOpcode() == Opcodes.INVOKESPECIAL) {
      MethodInsnNode methodInsn=(MethodInsnNode)insn;
      if (Type.getObjectType(methodInsn.owner).equals(PARAMETERIZED_MESSAGE_CLASS)) {
        Type[] argumentTypes=Type.getArgumentTypes(methodInsn.desc);
        if (argumentTypes.length == 2 && argumentTypes[0].equals(STRING_CLASS) && argumentTypes[1].equals(OBJECT_ARRAY_CLASS)) {
          checkArrayArgs(methodNode,logMessageFrames[i],arraySizeFrames[i],lineNumber,methodInsn,0,1);
        }
 else         if (argumentTypes.length == 2 && argumentTypes[0].equals(STRING_CLASS) && argumentTypes[1].equals(OBJECT_CLASS)) {
          checkFixedArityArgs(methodNode,logMessageFrames[i],lineNumber,methodInsn,0,1);
        }
 else         if (argumentTypes.length == 3 && argumentTypes[0].equals(STRING_CLASS) && argumentTypes[1].equals(OBJECT_CLASS) && argumentTypes[2].equals(OBJECT_CLASS)) {
          checkFixedArityArgs(methodNode,logMessageFrames[i],lineNumber,methodInsn,0,2);
        }
 else         if (argumentTypes.length == 3 && argumentTypes[0].equals(STRING_CLASS) && argumentTypes[1].equals(OBJECT_ARRAY_CLASS) && argumentTypes[2].equals(THROWABLE_CLASS)) {
          checkArrayArgs(methodNode,logMessageFrames[i],arraySizeFrames[i],lineNumber,methodInsn,0,1);
        }
 else         if (argumentTypes.length == 3 && argumentTypes[0].equals(STRING_CLASS) && argumentTypes[1].equals(STRING_ARRAY_CLASS) && argumentTypes[2].equals(THROWABLE_CLASS)) {
          checkArrayArgs(methodNode,logMessageFrames[i],arraySizeFrames[i],lineNumber,methodInsn,0,1);
        }
 else {
          throw new IllegalStateException("Constructor invoked on " + PARAMETERIZED_MESSAGE_CLASS.getClassName() + " that is not supported by logger usage checker");
        }
      }
    }
  }
}
