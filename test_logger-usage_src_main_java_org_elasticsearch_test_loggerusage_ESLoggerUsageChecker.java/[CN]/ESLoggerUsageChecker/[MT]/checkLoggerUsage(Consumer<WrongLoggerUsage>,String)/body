{
  for (  String classDirectory : classDirectories) {
    Path root=Paths.get(classDirectory);
    if (Files.isDirectory(root) == false) {
      throw new IllegalArgumentException(root + " should be an existing directory");
    }
    Files.walkFileTree(root,new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        if (Files.isRegularFile(file) && file.endsWith(".class")) {
          try (InputStream in=Files.newInputStream(file)){
            ESLoggerUsageChecker.check(wrongUsageCallback,in);
          }
         }
        return super.visitFile(file,attrs);
      }
    }
);
  }
}
