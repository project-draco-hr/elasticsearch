{
  if (selectedIndices == null || selectedIndices.length == 0) {
    return availableIndices;
  }
  Set<String> result=null;
  for (int i=0; i < selectedIndices.length; i++) {
    String indexOrPattern=selectedIndices[i];
    boolean add=true;
    if (!indexOrPattern.isEmpty()) {
      if (availableIndices.contains(indexOrPattern)) {
        if (result != null) {
          result.add(indexOrPattern);
        }
        continue;
      }
      if (indexOrPattern.charAt(0) == '+') {
        add=true;
        indexOrPattern=indexOrPattern.substring(1);
        if (i == 0) {
          result=new HashSet<String>();
        }
      }
 else       if (indexOrPattern.charAt(0) == '-') {
        if (i == 0) {
          result=new HashSet<String>(availableIndices);
        }
        add=false;
        indexOrPattern=indexOrPattern.substring(1);
      }
    }
    if (indexOrPattern.isEmpty() || !Regex.isSimpleMatchPattern(indexOrPattern)) {
      if (!availableIndices.contains(indexOrPattern)) {
        if (ignoreIndices != IgnoreIndices.MISSING) {
          throw new IndexMissingException(new Index(indexOrPattern));
        }
 else {
          if (result == null) {
            result=new HashSet<String>();
            result.addAll(availableIndices.subList(0,i));
          }
        }
      }
 else {
        if (result != null) {
          if (add) {
            result.add(indexOrPattern);
          }
 else {
            result.remove(indexOrPattern);
          }
        }
      }
      continue;
    }
    if (result == null) {
      result=new HashSet<String>();
      result.addAll(availableIndices.subList(0,i));
    }
    boolean found=false;
    for (    String index : availableIndices) {
      if (Regex.simpleMatch(indexOrPattern,index)) {
        found=true;
        if (add) {
          result.add(index);
        }
 else {
          result.remove(index);
        }
      }
    }
    if (!found && ignoreIndices != IgnoreIndices.MISSING) {
      throw new IndexMissingException(new Index(indexOrPattern));
    }
  }
  if (result == null) {
    return ImmutableList.copyOf(selectedIndices);
  }
  return ImmutableList.copyOf(result);
}
