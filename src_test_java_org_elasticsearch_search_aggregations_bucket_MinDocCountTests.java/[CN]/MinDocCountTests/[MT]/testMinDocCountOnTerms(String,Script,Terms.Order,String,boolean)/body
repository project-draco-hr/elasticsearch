{
  final SearchResponse allTermsResponse=client().prepareSearch("idx").setTypes("type").setSearchType(SearchType.COUNT).setQuery(QUERY).addAggregation(script.apply(terms("terms"),field).executionHint(StringTermsTests.randomExecutionHint()).order(order).size(cardinality + randomInt(10)).minDocCount(0)).execute().actionGet();
  assertAllSuccessful(allTermsResponse);
  final Terms allTerms=allTermsResponse.getAggregations().get("terms");
  assertEquals(cardinality,allTerms.getBuckets().size());
  for (long minDocCount=0; minDocCount < 20; ++minDocCount) {
    final int size=randomIntBetween(1,cardinality + 2);
    final SearchRequest request=client().prepareSearch("idx").setTypes("type").setSearchType(SearchType.COUNT).setQuery(QUERY).addAggregation(script.apply(terms("terms"),field).executionHint(StringTermsTests.randomExecutionHint()).order(order).size(size).include(include).shardSize(cardinality + randomInt(10)).minDocCount(minDocCount)).request();
    final SearchResponse response=client().search(request).get();
    try {
      assertAllSuccessful(response);
      assertSubset(allTerms,(Terms)response.getAggregations().get("terms"),minDocCount,size,include);
    }
 catch (    AssertionError ae) {
      if (!retryOnFailure) {
        throw ae;
      }
      logger.info("test failed. trying to see if it recovers after 1m.",ae);
      try {
        Thread.sleep(60000);
        logger.debug("1m passed. retrying.");
        testMinDocCountOnTerms(field,script,order,include,false);
      }
 catch (      Throwable secondFailure) {
        logger.error("exception on retry (will re-throw the original in a sec)",secondFailure);
      }
 finally {
        throw ae;
      }
    }
  }
}
