{
  if (transport.compress) {
    options.withCompress(true);
  }
  byte status=0;
  status=TransportStatus.setResponse(status);
  ReleasableBytesStreamOutput bStream=new ReleasableBytesStreamOutput(transport.bigArrays);
  boolean addedReleaseListener=false;
  try {
    bStream.skip(NettyHeader.HEADER_SIZE);
    StreamOutput stream=bStream;
    if (options.compress()) {
      status=TransportStatus.setCompress(status);
      stream=CompressorFactory.defaultCompressor().streamOutput(stream);
    }
    stream.setVersion(version);
    response.writeTo(stream);
    stream.close();
    ReleasablePagedBytesReference bytes=bStream.bytes();
    ChannelBuffer buffer=bytes.toChannelBuffer();
    NettyHeader.writeHeader(buffer,requestId,status,version);
    ChannelFuture future=channel.write(buffer);
    ReleaseChannelFutureListener listener=new ReleaseChannelFutureListener(bytes);
    future.addListener(listener);
    addedReleaseListener=true;
    transportServiceAdapter.onResponseSent(requestId,action,response,options);
  }
  finally {
    if (!addedReleaseListener) {
      Releasables.close(bStream.bytes());
    }
  }
}
