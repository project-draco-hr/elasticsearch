{
  assertAcked(prepareCreate("test").addAlias(new Alias("alias")).setSettings(settingsBuilder().put("index.analysis.char_filter.my_mapping.type","mapping").putArray("index.analysis.char_filter.my_mapping.mappings","PH=>F").put("index.analysis.analyzer.test_analyzer.type","custom").put("index.analysis.analyzer.test_analyzer.position_increment_gap","100").put("index.analysis.analyzer.test_analyzer.tokenizer","standard").putArray("index.analysis.analyzer.test_analyzer.char_filter","my_mapping").putArray("index.analysis.analyzer.test_analyzer.filter","snowball","lowercase")));
  ensureGreen();
  client().admin().indices().preparePutMapping("test").setType("document").setSource("simple","type=text,analyzer=simple,position_increment_gap=100").get();
  String[] texts=new String[]{"this is a PHISH","the troubled text"};
  AnalyzeResponse analyzeResponse=client().admin().indices().prepareAnalyze().setIndex(indexOrAlias()).setText(texts).setExplain(true).setAnalyzer("test_analyzer").setText(texts).execute().get();
  assertThat(analyzeResponse.detail().charfilters().length,equalTo(1));
  assertThat(analyzeResponse.detail().charfilters()[0].getName(),equalTo("my_mapping"));
  assertThat(analyzeResponse.detail().charfilters()[0].getTexts().length,equalTo(2));
  assertThat(analyzeResponse.detail().charfilters()[0].getTexts()[0],equalTo("this is a FISH"));
  assertThat(analyzeResponse.detail().charfilters()[0].getTexts()[1],equalTo("the troubled text"));
  assertThat(analyzeResponse.detail().tokenizer().getName(),equalTo("standard"));
  assertThat(analyzeResponse.detail().tokenizer().getTokens().length,equalTo(7));
  AnalyzeResponse.AnalyzeToken token=analyzeResponse.detail().tokenizer().getTokens()[3];
  assertThat(token.getTerm(),equalTo("FISH"));
  assertThat(token.getPosition(),equalTo(3));
  assertThat(token.getStartOffset(),equalTo(10));
  assertThat(token.getEndOffset(),equalTo(15));
  token=analyzeResponse.detail().tokenizer().getTokens()[5];
  assertThat(token.getTerm(),equalTo("troubled"));
  assertThat(token.getPosition(),equalTo(105));
  assertThat(token.getStartOffset(),equalTo(20));
  assertThat(token.getEndOffset(),equalTo(28));
  assertThat(analyzeResponse.detail().tokenfilters().length,equalTo(2));
  assertThat(analyzeResponse.detail().tokenfilters()[0].getName(),equalTo("snowball"));
  assertThat(analyzeResponse.detail().tokenfilters()[0].getTokens().length,equalTo(7));
  token=analyzeResponse.detail().tokenfilters()[0].getTokens()[3];
  assertThat(token.getTerm(),equalTo("FISH"));
  assertThat(token.getPosition(),equalTo(3));
  assertThat(token.getStartOffset(),equalTo(10));
  assertThat(token.getEndOffset(),equalTo(15));
  token=analyzeResponse.detail().tokenfilters()[0].getTokens()[5];
  assertThat(token.getTerm(),equalTo("troubl"));
  assertThat(token.getPosition(),equalTo(105));
  assertThat(token.getStartOffset(),equalTo(20));
  assertThat(token.getEndOffset(),equalTo(28));
  assertThat(analyzeResponse.detail().tokenfilters()[1].getName(),equalTo("lowercase"));
  assertThat(analyzeResponse.detail().tokenfilters()[1].getTokens().length,equalTo(7));
  token=analyzeResponse.detail().tokenfilters()[1].getTokens()[3];
  assertThat(token.getTerm(),equalTo("fish"));
  assertThat(token.getPosition(),equalTo(3));
  assertThat(token.getStartOffset(),equalTo(10));
  assertThat(token.getEndOffset(),equalTo(15));
  token=analyzeResponse.detail().tokenfilters()[0].getTokens()[5];
  assertThat(token.getTerm(),equalTo("troubl"));
  assertThat(token.getPosition(),equalTo(105));
  assertThat(token.getStartOffset(),equalTo(20));
  assertThat(token.getEndOffset(),equalTo(28));
}
