{
  Settings settings=settingsBuilder().put("gateway.type","local").put("gateway.local.auto_import_dangled","no").build();
  logger.info("--> starting two nodes");
  final String node_1=internalCluster().startNode(settings);
  internalCluster().startNode(settings);
  logger.info("--> indexing a simple document");
  client().prepareIndex("test","type1","1").setSource("field1","value1").setRefresh(true).execute().actionGet();
  logger.info("--> waiting for green status");
  ensureGreen();
  logger.info("--> verify 1 doc in the index");
  for (int i=0; i < 10; i++) {
    assertHitCount(client().prepareSearch().setQuery(matchAllQuery()).get(),1l);
  }
  logger.info("--> restarting the nodes");
  final Gateway gateway1=internalCluster().getInstance(Gateway.class,node_1);
  internalCluster().fullRestart(new RestartCallback(){
    @Override public Settings onNodeStopped(    String nodeName) throws Exception {
      if (node_1.equals(nodeName)) {
        logger.info("--> deleting the data for the first node");
        gateway1.reset();
      }
      return null;
    }
  }
);
  logger.info("--> waiting for green status");
  ensureGreen();
  logger.info("--> verify that the dangling index does not exists");
  assertThat(client().admin().indices().prepareExists("test").execute().actionGet().isExists(),equalTo(false));
  logger.info("--> close the first node, so we remain with the second that has the dangling index");
  internalCluster().stopRandomNode(InternalTestCluster.nameFilter(node_1));
  logger.info("--> index a different doc");
  client().prepareIndex("test","type1","2").setSource("field1","value2").setRefresh(true).execute().actionGet();
  logger.info("--> verify that doc 2 does exist");
  assertThat(client().prepareGet("test","type1","2").execute().actionGet().isExists(),equalTo(true));
  ensureYellow("test");
  logger.info("--> verify that doc 1 doesn't exist");
  assertThat(client().prepareGet("test","type1","1").execute().actionGet().isExists(),equalTo(false));
}
