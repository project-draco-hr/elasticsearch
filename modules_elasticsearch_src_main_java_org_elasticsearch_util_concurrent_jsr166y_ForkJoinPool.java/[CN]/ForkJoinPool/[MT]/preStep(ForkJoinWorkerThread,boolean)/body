{
  boolean active=w.active;
  boolean inactivate=!worked & active;
  for (; ; ) {
    if (inactivate) {
      int c=runState;
      if (UNSAFE.compareAndSwapInt(this,runStateOffset,c,c - ONE_ACTIVE))       inactivate=active=w.active=false;
    }
    int wc=workerCounts;
    if ((wc & RUNNING_COUNT_MASK) <= parallelism) {
      if (!worked)       eventSync(w);
      return;
    }
    if (!(inactivate|=active) && UNSAFE.compareAndSwapInt(this,workerCountsOffset,wc,wc - ONE_RUNNING) && !w.suspendAsSpare())     return;
  }
}
