{
  if (!lifecycle.started()) {
    logger.debug("processing [{}]: ignoring, cluster_service not started",source);
    return;
  }
  logger.debug("processing [{}]: execute",source);
  ClusterState previousClusterState=clusterState;
  if (!previousClusterState.nodes().localNodeMaster() && updateTask.runOnlyOnMaster()) {
    logger.debug("failing [{}]: local node is no longer master",source);
    updateTask.onNoLongerMaster(source);
    return;
  }
  ClusterState newClusterState;
  long startTimeNS=System.nanoTime();
  try {
    newClusterState=updateTask.execute(previousClusterState);
  }
 catch (  Throwable e) {
    TimeValue executionTime=TimeValue.timeValueMillis(Math.max(0,TimeValue.nsecToMSec(System.nanoTime() - startTimeNS)));
    if (logger.isTraceEnabled()) {
      StringBuilder sb=new StringBuilder("failed to execute cluster state update in ").append(executionTime).append(", state:\nversion [").append(previousClusterState.version()).append("], source [").append(source).append("]\n");
      sb.append(previousClusterState.nodes().prettyPrint());
      sb.append(previousClusterState.routingTable().prettyPrint());
      sb.append(previousClusterState.readOnlyRoutingNodes().prettyPrint());
      logger.trace(sb.toString(),e);
    }
    warnAboutSlowTaskIfNeeded(executionTime,source);
    updateTask.onFailure(source,e);
    return;
  }
  if (previousClusterState == newClusterState) {
    if (updateTask instanceof AckedClusterStateUpdateTask) {
      ((AckedClusterStateUpdateTask)updateTask).onAllNodesAcked(null);
    }
    if (updateTask instanceof ProcessedClusterStateUpdateTask) {
      ((ProcessedClusterStateUpdateTask)updateTask).clusterStateProcessed(source,previousClusterState,newClusterState);
    }
    TimeValue executionTime=TimeValue.timeValueMillis(Math.max(0,TimeValue.nsecToMSec(System.nanoTime() - startTimeNS)));
    logger.debug("processing [{}]: took {} no change in cluster_state",source,executionTime);
    warnAboutSlowTaskIfNeeded(executionTime,source);
    return;
  }
  try {
    Discovery.AckListener ackListener=new NoOpAckListener();
    if (newClusterState.nodes().localNodeMaster()) {
      Builder builder=ClusterState.builder(newClusterState).incrementVersion();
      if (previousClusterState.routingTable() != newClusterState.routingTable()) {
        builder.routingTable(RoutingTable.builder(newClusterState.routingTable()).version(newClusterState.routingTable().version() + 1));
      }
      if (previousClusterState.metaData() != newClusterState.metaData()) {
        builder.metaData(MetaData.builder(newClusterState.metaData()).version(newClusterState.metaData().version() + 1));
      }
      newClusterState=builder.build();
      if (updateTask instanceof AckedClusterStateUpdateTask) {
        final AckedClusterStateUpdateTask ackedUpdateTask=(AckedClusterStateUpdateTask)updateTask;
        if (ackedUpdateTask.ackTimeout() == null || ackedUpdateTask.ackTimeout().millis() == 0) {
          ackedUpdateTask.onAckTimeout();
        }
 else {
          try {
            ackListener=new AckCountDownListener(ackedUpdateTask,newClusterState.version(),newClusterState.nodes(),threadPool);
          }
 catch (          EsRejectedExecutionException ex) {
            if (logger.isDebugEnabled()) {
              logger.debug("Couldn't schedule timeout thread - node might be shutting down",ex);
            }
            ackedUpdateTask.onAckTimeout();
          }
        }
      }
    }
    newClusterState.status(ClusterState.ClusterStateStatus.BEING_APPLIED);
    if (logger.isTraceEnabled()) {
      StringBuilder sb=new StringBuilder("cluster state updated, source [").append(source).append("]\n");
      sb.append(newClusterState.prettyPrint());
      logger.trace(sb.toString());
    }
 else     if (logger.isDebugEnabled()) {
      logger.debug("cluster state updated, version [{}], source [{}]",newClusterState.version(),source);
    }
    ClusterChangedEvent clusterChangedEvent=new ClusterChangedEvent(source,newClusterState,previousClusterState);
    final DiscoveryNodes.Delta nodesDelta=clusterChangedEvent.nodesDelta();
    if (nodesDelta.hasChanges() && logger.isInfoEnabled()) {
      String summary=nodesDelta.shortSummary();
      if (summary.length() > 0) {
        logger.info("{}, reason: {}",summary,source);
      }
    }
    for (    DiscoveryNode node : nodesDelta.addedNodes()) {
      if (!nodeRequiresConnection(node)) {
        continue;
      }
      try {
        transportService.connectToNode(node);
      }
 catch (      Throwable e) {
        logger.warn("failed to connect to node [" + node + "]",e);
      }
    }
    if (newClusterState.nodes().localNodeMaster()) {
      logger.debug("publishing cluster state version {}",newClusterState.version());
      discoveryService.publish(clusterChangedEvent,ackListener);
    }
    clusterState=newClusterState;
    logger.debug("set local cluster state to version {}",newClusterState.version());
    for (    ClusterStateListener listener : preAppliedListeners) {
      try {
        listener.clusterChanged(clusterChangedEvent);
      }
 catch (      Exception ex) {
        logger.warn("failed to notify ClusterStateListener",ex);
      }
    }
    for (    DiscoveryNode node : nodesDelta.removedNodes()) {
      try {
        transportService.disconnectFromNode(node);
      }
 catch (      Throwable e) {
        logger.warn("failed to disconnect to node [" + node + "]",e);
      }
    }
    newClusterState.status(ClusterState.ClusterStateStatus.APPLIED);
    for (    ClusterStateListener listener : postAppliedListeners) {
      try {
        listener.clusterChanged(clusterChangedEvent);
      }
 catch (      Exception ex) {
        logger.warn("failed to notify ClusterStateListener",ex);
      }
    }
    if (newClusterState.nodes().localNodeMaster()) {
      try {
        ackListener.onNodeAck(newClusterState.nodes().localNode(),null);
      }
 catch (      Throwable t) {
        logger.debug("error while processing ack for master node [{}]",t,newClusterState.nodes().localNode());
      }
    }
    if (updateTask instanceof ProcessedClusterStateUpdateTask) {
      ((ProcessedClusterStateUpdateTask)updateTask).clusterStateProcessed(source,previousClusterState,newClusterState);
    }
    TimeValue executionTime=TimeValue.timeValueMillis(Math.max(0,TimeValue.nsecToMSec(System.nanoTime() - startTimeNS)));
    logger.debug("processing [{}]: took {} done applying updated cluster_state (version: {}, uuid: {})",source,executionTime,newClusterState.version(),newClusterState.uuid());
    warnAboutSlowTaskIfNeeded(executionTime,source);
  }
 catch (  Throwable t) {
    TimeValue executionTime=TimeValue.timeValueMillis(Math.max(0,TimeValue.nsecToMSec(System.nanoTime() - startTimeNS)));
    StringBuilder sb=new StringBuilder("failed to apply updated cluster state in ").append(executionTime).append(":\nversion [").append(newClusterState.version()).append("], uuid [").append(newClusterState.uuid()).append("], source [").append(source).append("]\n");
    sb.append(newClusterState.nodes().prettyPrint());
    sb.append(newClusterState.routingTable().prettyPrint());
    sb.append(newClusterState.readOnlyRoutingNodes().prettyPrint());
    logger.warn(sb.toString(),t);
  }
}
