{
  List<DiscoveryNode> yesNodes=new ArrayList<>();
  List<DiscoveryNode> throttledNodes=new ArrayList<>();
  List<DiscoveryNode> noNodes=new ArrayList<>();
  for (  DiscoveryNode discoNode : nodes) {
    RoutingNode node=allocation.routingNodes().node(discoNode.id());
    if (node == null) {
      continue;
    }
    Decision decision=allocation.deciders().canAllocate(shard,node,allocation);
    if (decision.type() == Decision.Type.THROTTLE) {
      throttledNodes.add(discoNode);
    }
 else     if (decision.type() == Decision.Type.NO) {
      noNodes.add(discoNode);
    }
 else {
      yesNodes.add(discoNode);
    }
  }
  return new NodesToAllocate(Collections.unmodifiableList(yesNodes),Collections.unmodifiableList(throttledNodes),Collections.unmodifiableList(noNodes));
}
