{
  List<NodeGatewayStartedShards> yesNodeShards=new ArrayList<>();
  List<NodeGatewayStartedShards> throttledNodeShards=new ArrayList<>();
  List<NodeGatewayStartedShards> noNodeShards=new ArrayList<>();
  for (  NodeGatewayStartedShards nodeShardState : nodeShardStates) {
    RoutingNode node=allocation.routingNodes().node(nodeShardState.getNode().getId());
    if (node == null) {
      continue;
    }
    Decision decision=allocation.deciders().canAllocate(shard,node,allocation);
    if (decision.type() == Decision.Type.THROTTLE) {
      throttledNodeShards.add(nodeShardState);
    }
 else     if (decision.type() == Decision.Type.NO) {
      noNodeShards.add(nodeShardState);
    }
 else {
      yesNodeShards.add(nodeShardState);
    }
  }
  return new NodesToAllocate(Collections.unmodifiableList(yesNodeShards),Collections.unmodifiableList(throttledNodeShards),Collections.unmodifiableList(noNodeShards));
}
