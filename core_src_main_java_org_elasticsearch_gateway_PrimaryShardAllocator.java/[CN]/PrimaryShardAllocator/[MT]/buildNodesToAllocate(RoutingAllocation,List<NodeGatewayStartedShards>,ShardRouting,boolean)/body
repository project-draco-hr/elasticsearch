{
  List<DecidedNode> yesNodeShards=new ArrayList<>();
  List<DecidedNode> throttledNodeShards=new ArrayList<>();
  List<DecidedNode> noNodeShards=new ArrayList<>();
  for (  NodeGatewayStartedShards nodeShardState : nodeShardStates) {
    RoutingNode node=allocation.routingNodes().node(nodeShardState.getNode().getId());
    if (node == null) {
      continue;
    }
    Decision decision=forceAllocate ? allocation.deciders().canForceAllocatePrimary(shardRouting,node,allocation) : allocation.deciders().canAllocate(shardRouting,node,allocation);
    DecidedNode decidedNode=new DecidedNode(nodeShardState,decision);
    if (decision.type() == Type.THROTTLE) {
      throttledNodeShards.add(decidedNode);
    }
 else     if (decision.type() == Type.NO) {
      noNodeShards.add(decidedNode);
    }
 else {
      yesNodeShards.add(decidedNode);
    }
  }
  return new NodesToAllocate(Collections.unmodifiableList(yesNodeShards),Collections.unmodifiableList(throttledNodeShards),Collections.unmodifiableList(noNodeShards));
}
