{
  final Map<DiscoveryNode,Long> nodesWithVersion=new HashMap<>();
  int numberOfAllocationsFound=0;
  long highestVersion=ShardStateMetaData.NO_VERSION;
  for (  TransportNodesListGatewayStartedShards.NodeGatewayStartedShards nodeShardState : shardState.getData().values()) {
    long version=nodeShardState.legacyVersion();
    DiscoveryNode node=nodeShardState.getNode();
    if (ignoreNodes.contains(node.id())) {
      continue;
    }
    if (nodeShardState.storeException() == null) {
      logger.trace("[{}] on node [{}] has version [{}] of shard",shard,nodeShardState.getNode(),version);
    }
 else {
      logger.trace("[{}] on node [{}] has version [{}] but the store can not be opened, treating no version",nodeShardState.storeException(),shard,nodeShardState.getNode(),version);
      version=ShardStateMetaData.NO_VERSION;
    }
    if (version != ShardStateMetaData.NO_VERSION) {
      numberOfAllocationsFound++;
      if (version > highestVersion) {
        highestVersion=version;
        if (matchAnyShard == false) {
          nodesWithVersion.clear();
        }
        nodesWithVersion.put(node,version);
      }
 else       if (version == highestVersion) {
        nodesWithVersion.put(node,version);
      }
    }
  }
  List<DiscoveryNode> nodesWithHighestVersion=new ArrayList<>();
  nodesWithHighestVersion.addAll(nodesWithVersion.keySet());
  CollectionUtil.timSort(nodesWithHighestVersion,new Comparator<DiscoveryNode>(){
    @Override public int compare(    DiscoveryNode o1,    DiscoveryNode o2){
      return Long.compare(nodesWithVersion.get(o2),nodesWithVersion.get(o1));
    }
  }
);
  if (logger.isTraceEnabled()) {
    StringBuilder sb=new StringBuilder("[");
    for (    DiscoveryNode n : nodesWithVersion.keySet()) {
      sb.append("[").append(n.getName()).append("]").append(" -> ").append(nodesWithVersion.get(n)).append(", ");
    }
    sb.append("]");
    logger.trace("{} candidates for allocation: {}",shard,sb.toString());
  }
  return new NodesResult(Collections.unmodifiableList(nodesWithHighestVersion),numberOfAllocationsFound);
}
