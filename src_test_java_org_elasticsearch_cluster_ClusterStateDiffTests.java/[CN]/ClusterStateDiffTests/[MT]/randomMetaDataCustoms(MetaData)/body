{
  return randomParts(metaData,"custom",new RandomPart<MetaData.Custom>(){
    @Override public ImmutableOpenMap<String,MetaData.Custom> parts(    MetaData metaData){
      return metaData.customs();
    }
    @Override public MetaData.Builder put(    MetaData.Builder builder,    MetaData.Custom part){
      if (part instanceof SnapshotMetaData) {
        return builder.putCustom(SnapshotMetaData.TYPE,part);
      }
 else       if (part instanceof RepositoriesMetaData) {
        return builder.putCustom(RepositoriesMetaData.TYPE,part);
      }
 else       if (part instanceof RestoreMetaData) {
        return builder.putCustom(RestoreMetaData.TYPE,part);
      }
      throw new IllegalArgumentException("Unknown custom part " + part);
    }
    @Override public MetaData.Builder remove(    MetaData.Builder builder,    String name){
      return builder.removeCustom(name);
    }
    @Override public MetaData.Custom randomCreate(    String name){
switch (randomIntBetween(0,2)) {
case 0:
        return new SnapshotMetaData(new SnapshotMetaData.Entry(new SnapshotId(randomName("repo"),randomName("snap")),randomBoolean(),SnapshotMetaData.State.fromValue((byte)randomIntBetween(0,6)),ImmutableList.<String>of(),Math.abs(randomLong()),ImmutableMap.<ShardId,SnapshotMetaData.ShardSnapshotStatus>of()));
case 1:
      return new RepositoriesMetaData();
case 2:
    return new RestoreMetaData(new RestoreMetaData.Entry(new SnapshotId(randomName("repo"),randomName("snap")),RestoreMetaData.State.fromValue((byte)randomIntBetween(0,3)),ImmutableList.<String>of(),ImmutableMap.<ShardId,RestoreMetaData.ShardRestoreStatus>of()));
default :
  throw new IllegalArgumentException("Shouldn't be here");
}
}
@Override public MetaData.Custom randomChange(MetaData.Custom part){
return part;
}
}
);
}
