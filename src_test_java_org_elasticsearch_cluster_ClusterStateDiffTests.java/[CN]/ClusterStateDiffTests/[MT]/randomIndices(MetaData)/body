{
  return randomParts(metaData,"index",new RandomPart<IndexMetaData>(){
    @Override public ImmutableOpenMap<String,IndexMetaData> parts(    MetaData metaData){
      return metaData.indices();
    }
    @Override public MetaData.Builder put(    MetaData.Builder builder,    IndexMetaData part){
      return builder.put(part,true);
    }
    @Override public MetaData.Builder remove(    MetaData.Builder builder,    String name){
      return builder.remove(name);
    }
    @Override public IndexMetaData randomCreate(    String name){
      IndexMetaData.Builder builder=IndexMetaData.builder(name);
      ImmutableSettings.Builder settingsBuilder=ImmutableSettings.builder();
      setRandomSettings(getRandom(),settingsBuilder);
      settingsBuilder.put(randomSettings(ImmutableSettings.EMPTY)).put(IndexMetaData.SETTING_VERSION_CREATED,randomVersion(random()));
      builder.settings(settingsBuilder);
      builder.numberOfShards(randomIntBetween(1,10)).numberOfReplicas(randomInt(10));
      int aliasCount=randomInt(10);
      if (randomBoolean()) {
        builder.putCustom(IndexWarmersMetaData.TYPE,randomWarmers());
      }
      for (int i=0; i < aliasCount; i++) {
        builder.putAlias(randomAlias());
      }
      return builder.build();
    }
    @Override public IndexMetaData randomChange(    IndexMetaData part){
      IndexMetaData.Builder builder=IndexMetaData.builder(part);
switch (randomIntBetween(0,3)) {
case 0:
        builder.settings(ImmutableSettings.builder().put(part.settings()).put(randomSettings(ImmutableSettings.EMPTY)));
      break;
case 1:
    if (randomBoolean() && part.aliases().isEmpty() == false) {
      builder.removeAlias(randomFrom(part.aliases().keys().toArray(String.class)));
    }
 else {
      builder.putAlias(AliasMetaData.builder(randomAsciiOfLength(10)));
    }
  break;
case 2:
builder.settings(ImmutableSettings.builder().put(part.settings()).put(IndexMetaData.SETTING_UUID,Strings.randomBase64UUID()));
break;
case 3:
builder.putCustom(IndexWarmersMetaData.TYPE,randomWarmers());
break;
default :
throw new IllegalArgumentException("Shouldn't be here");
}
return builder.build();
}
}
);
}
