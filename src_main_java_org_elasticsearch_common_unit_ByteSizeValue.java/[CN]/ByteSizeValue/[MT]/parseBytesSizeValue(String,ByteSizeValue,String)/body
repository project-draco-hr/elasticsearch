{
  settingName=Objects.requireNonNull(settingName);
  if (sValue == null) {
    return defaultValue;
  }
  long bytes;
  try {
    String lastTwoChars=sValue.substring(sValue.length() - Math.min(2,sValue.length())).toLowerCase(Locale.ROOT);
    if (lastTwoChars.endsWith("k")) {
      bytes=(long)(Double.parseDouble(sValue.substring(0,sValue.length() - 1)) * ByteSizeUnit.C1);
    }
 else     if (lastTwoChars.endsWith("kb")) {
      bytes=(long)(Double.parseDouble(sValue.substring(0,sValue.length() - 2)) * ByteSizeUnit.C1);
    }
 else     if (lastTwoChars.endsWith("m")) {
      bytes=(long)(Double.parseDouble(sValue.substring(0,sValue.length() - 1)) * ByteSizeUnit.C2);
    }
 else     if (lastTwoChars.endsWith("mb")) {
      bytes=(long)(Double.parseDouble(sValue.substring(0,sValue.length() - 2)) * ByteSizeUnit.C2);
    }
 else     if (lastTwoChars.endsWith("g")) {
      bytes=(long)(Double.parseDouble(sValue.substring(0,sValue.length() - 1)) * ByteSizeUnit.C3);
    }
 else     if (lastTwoChars.endsWith("gb")) {
      bytes=(long)(Double.parseDouble(sValue.substring(0,sValue.length() - 2)) * ByteSizeUnit.C3);
    }
 else     if (lastTwoChars.endsWith("t")) {
      bytes=(long)(Double.parseDouble(sValue.substring(0,sValue.length() - 1)) * ByteSizeUnit.C4);
    }
 else     if (lastTwoChars.endsWith("tb")) {
      bytes=(long)(Double.parseDouble(sValue.substring(0,sValue.length() - 2)) * ByteSizeUnit.C4);
    }
 else     if (lastTwoChars.endsWith("p")) {
      bytes=(long)(Double.parseDouble(sValue.substring(0,sValue.length() - 1)) * ByteSizeUnit.C5);
    }
 else     if (lastTwoChars.endsWith("pb")) {
      bytes=(long)(Double.parseDouble(sValue.substring(0,sValue.length() - 2)) * ByteSizeUnit.C5);
    }
 else     if (lastTwoChars.endsWith("b")) {
      bytes=Long.parseLong(sValue.substring(0,sValue.length() - 1));
    }
 else {
      bytes=Long.parseLong(sValue);
    }
  }
 catch (  NumberFormatException e) {
    throw new ElasticsearchParseException("Failed to parse [" + sValue + "]",e);
  }
  return new ByteSizeValue(bytes,ByteSizeUnit.BYTES);
}
