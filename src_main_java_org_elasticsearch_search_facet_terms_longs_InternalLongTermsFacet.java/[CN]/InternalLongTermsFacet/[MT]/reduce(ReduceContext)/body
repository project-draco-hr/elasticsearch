{
  List<Facet> facets=context.facets();
  if (facets.size() == 1) {
    Facet facet=facets.get(0);
    if (facet instanceof InternalLongTermsFacet) {
      ((InternalLongTermsFacet)facet).trimExcessEntries();
    }
    return facet;
  }
  InternalLongTermsFacet first=null;
  Recycler.V<LongIntOpenHashMap> aggregated=context.cacheRecycler().longIntMap(-1);
  long missing=0;
  long total=0;
  for (  Facet facet : facets) {
    TermsFacet termsFacet=(TermsFacet)facet;
    if (first == null && termsFacet instanceof InternalLongTermsFacet) {
      first=(InternalLongTermsFacet)termsFacet;
    }
    missing+=termsFacet.getMissingCount();
    total+=termsFacet.getTotalCount();
    for (    Entry entry : termsFacet.getEntries()) {
      aggregated.v().addTo(((LongEntry)entry).term,entry.getCount());
    }
  }
  BoundedTreeSet<LongEntry> ordered=new BoundedTreeSet<>(first.comparatorType.comparator(),first.requiredSize);
  LongIntOpenHashMap entries=aggregated.v();
  final boolean[] states=aggregated.v().allocated;
  final long[] keys=aggregated.v().keys;
  final int[] values=aggregated.v().values;
  for (int i=0; i < entries.allocated.length; i++) {
    if (states[i]) {
      ordered.add(new LongEntry(keys[i],values[i]));
    }
  }
  first.entries=ordered;
  first.missing=missing;
  first.total=total;
  aggregated.close();
  return first;
}
