{
  createIndex("test");
  ensureGreen();
  NumShards test=getNumShards("test");
  String aMonthAgo=ISODateTimeFormat.yearMonthDay().print(new DateTime(DateTimeZone.UTC).minusMonths(1));
  String aMonthFromNow=ISODateTimeFormat.yearMonthDay().print(new DateTime(DateTimeZone.UTC).plusMonths(1));
  client().prepareIndex("test","type","1").setSource("past",aMonthAgo,"future",aMonthFromNow).get();
  refresh();
  CountResponse countResponse=client().prepareCount().setQuery(queryString("past:[now-2M/d TO now/d]")).get();
  assertHitCount(countResponse,1l);
  countResponse=client().prepareCount().setQuery(queryString("future:[now/d TO now+2M/d]").lowercaseExpandedTerms(false)).get();
  assertHitCount(countResponse,1l);
  countResponse=client().prepareCount("test").setQuery(queryString("future:[now/D TO now+2M/d]").lowercaseExpandedTerms(false)).get();
  assertThat(countResponse.getSuccessfulShards(),equalTo(0));
  assertThat(countResponse.getFailedShards(),equalTo(test.numPrimaries));
  assertThat(countResponse.getShardFailures().length,equalTo(test.numPrimaries));
  for (  ShardOperationFailedException shardFailure : countResponse.getShardFailures()) {
    assertThat(shardFailure.status(),equalTo(RestStatus.BAD_REQUEST));
    assertThat(shardFailure.reason(),allOf(containsString("Failed to parse"),containsString("unit [D] not supported for date math")));
  }
}
