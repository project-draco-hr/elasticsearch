{
  assertAcked(prepareCreate("test").addMapping("type1","field1","type=string,analyzer=whitespace").setSettings(SETTING_NUMBER_OF_SHARDS,1));
  indexRandom(true,client().prepareIndex("test","type1","3").setSource("field1","quick lazy huge brown pidgin","field2","the quick lazy huge brown fox jumps over the tree"),client().prepareIndex("test","type1","1").setSource("field1","the quick brown fox"),client().prepareIndex("test","type1","2").setSource("field1","the quick lazy huge brown fox jumps over the tree"));
  CountResponse countResponse=client().prepareCount().setQuery(QueryBuilders.commonTerms("field1","the quick brown").cutoffFrequency(3).lowFreqOperator(Operator.OR)).get();
  assertHitCount(countResponse,3l);
  countResponse=client().prepareCount().setQuery(QueryBuilders.commonTerms("field1","the quick brown").cutoffFrequency(3).lowFreqOperator(Operator.AND)).get();
  assertHitCount(countResponse,2l);
  countResponse=client().prepareCount().setQuery(QueryBuilders.commonTerms("field1","the quick brown").cutoffFrequency(3)).get();
  assertHitCount(countResponse,3l);
  countResponse=client().prepareCount().setQuery(QueryBuilders.commonTerms("field1","the huge fox").lowFreqMinimumShouldMatch("2")).get();
  assertHitCount(countResponse,1l);
  countResponse=client().prepareCount().setQuery(QueryBuilders.commonTerms("field1","the lazy fox brown").cutoffFrequency(1).highFreqMinimumShouldMatch("3")).get();
  assertHitCount(countResponse,2l);
  countResponse=client().prepareCount().setQuery(QueryBuilders.commonTerms("field1","the lazy fox brown").cutoffFrequency(1).highFreqMinimumShouldMatch("4")).get();
  assertHitCount(countResponse,1l);
  countResponse=client().prepareCount().setQuery(new BytesArray("{ \"common\" : { \"field1\" : { \"query\" : \"the lazy fox brown\", \"cutoff_frequency\" : 1, \"minimum_should_match\" : { \"high_freq\" : 4 } } } }").array()).get();
  assertHitCount(countResponse,1l);
  countResponse=client().prepareCount().setQuery(QueryBuilders.commonTerms("field1","the lazy fox brown").cutoffFrequency(1)).get();
  assertHitCount(countResponse,1l);
  countResponse=client().prepareCount().setQuery(QueryBuilders.commonTerms("field1","the quick brown").cutoffFrequency(3).analyzer("standard")).get();
  assertHitCount(countResponse,3l);
  countResponse=client().prepareCount().setQuery(QueryBuilders.matchQuery("field1","the quick brown").cutoffFrequency(3).operator(MatchQueryBuilder.Operator.AND)).get();
  assertHitCount(countResponse,2l);
  countResponse=client().prepareCount().setQuery(QueryBuilders.matchQuery("field1","the quick brown").cutoffFrequency(3).operator(MatchQueryBuilder.Operator.OR)).get();
  assertHitCount(countResponse,3l);
  countResponse=client().prepareCount().setQuery(QueryBuilders.matchQuery("field1","the quick brown").cutoffFrequency(3).operator(MatchQueryBuilder.Operator.AND).analyzer("stop")).get();
  assertHitCount(countResponse,3l);
  countResponse=client().prepareCount().setQuery(QueryBuilders.multiMatchQuery("the quick brown","field1","field2").cutoffFrequency(3).operator(MatchQueryBuilder.Operator.AND)).get();
  assertHitCount(countResponse,3l);
}
