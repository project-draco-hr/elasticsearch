{
  super(settings);
  this.threadPool=threadPool;
  this.indicesService=indicesService;
  ByteSizeValue indexingBuffer;
  String indexingBufferSetting=componentSettings.get("index_buffer_size","10%");
  if (indexingBufferSetting.endsWith("%")) {
    double percent=Double.parseDouble(indexingBufferSetting.substring(0,indexingBufferSetting.length() - 1));
    indexingBuffer=new ByteSizeValue((long)(((double)JvmInfo.jvmInfo().mem().heapMax().bytes()) * (percent / 100)));
    ByteSizeValue minIndexingBuffer=componentSettings.getAsBytesSize("min_index_buffer_size",new ByteSizeValue(48,ByteSizeUnit.MB));
    ByteSizeValue maxIndexingBuffer=componentSettings.getAsBytesSize("max_index_buffer_size",null);
    if (indexingBuffer.bytes() < minIndexingBuffer.bytes()) {
      indexingBuffer=minIndexingBuffer;
    }
    if (maxIndexingBuffer != null && indexingBuffer.bytes() > maxIndexingBuffer.bytes()) {
      indexingBuffer=maxIndexingBuffer;
    }
  }
 else {
    indexingBuffer=ByteSizeValue.parseBytesSizeValue(indexingBufferSetting,null);
  }
  this.indexingBuffer=indexingBuffer;
  this.minShardIndexBufferSize=componentSettings.getAsBytesSize("min_shard_index_buffer_size",new ByteSizeValue(4,ByteSizeUnit.MB));
  this.maxShardIndexBufferSize=componentSettings.getAsBytesSize("max_shard_index_buffer_size",new ByteSizeValue(512,ByteSizeUnit.MB));
  ByteSizeValue translogBuffer;
  String translogBufferSetting=componentSettings.get("translog_buffer_size","1%");
  if (translogBufferSetting.endsWith("%")) {
    double percent=Double.parseDouble(translogBufferSetting.substring(0,translogBufferSetting.length() - 1));
    translogBuffer=new ByteSizeValue((long)(((double)JvmInfo.jvmInfo().mem().heapMax().bytes()) * (percent / 100)));
    ByteSizeValue minTranslogBuffer=componentSettings.getAsBytesSize("min_translog_buffer_size",new ByteSizeValue(256,ByteSizeUnit.KB));
    ByteSizeValue maxTranslogBuffer=componentSettings.getAsBytesSize("max_translog_buffer_size",null);
    if (translogBuffer.bytes() < minTranslogBuffer.bytes()) {
      translogBuffer=minTranslogBuffer;
    }
    if (maxTranslogBuffer != null && translogBuffer.bytes() > maxTranslogBuffer.bytes()) {
      translogBuffer=maxTranslogBuffer;
    }
  }
 else {
    translogBuffer=ByteSizeValue.parseBytesSizeValue(translogBufferSetting,null);
  }
  this.translogBuffer=translogBuffer;
  this.minShardTranslogBufferSize=componentSettings.getAsBytesSize("min_shard_translog_buffer_size",new ByteSizeValue(2,ByteSizeUnit.KB));
  this.maxShardTranslogBufferSize=componentSettings.getAsBytesSize("max_shard_translog_buffer_size",new ByteSizeValue(64,ByteSizeUnit.KB));
  this.inactiveTime=componentSettings.getAsTime("shard_inactive_time",TimeValue.timeValueMinutes(30));
  this.interval=componentSettings.getAsTime("interval",TimeValue.timeValueSeconds(30));
  logger.debug("using index_buffer_size [{}], with min_shard_index_buffer_size [{}], max_shard_index_buffer_size [{}], shard_inactive_time [{}]",this.indexingBuffer,this.minShardIndexBufferSize,this.maxShardIndexBufferSize,this.inactiveTime);
}
