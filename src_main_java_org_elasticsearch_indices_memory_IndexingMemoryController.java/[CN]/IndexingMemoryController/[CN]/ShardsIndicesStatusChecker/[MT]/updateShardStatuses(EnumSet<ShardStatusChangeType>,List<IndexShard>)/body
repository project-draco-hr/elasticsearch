{
  int activeShards=0;
  for (  IndexService indexService : indicesService) {
    for (    IndexShard indexShard : indexService) {
      if (!CAN_UPDATE_INDEX_BUFFER_STATES.contains(indexShard.state())) {
        continue;
      }
      if (indexShard.canIndex() == false) {
        continue;
      }
      final Translog translog;
      try {
        translog=indexShard.engine().getTranslog();
      }
 catch (      EngineClosedException e) {
        continue;
      }
      final long time=threadPool.estimatedTimeInMillis();
      ShardIndexingStatus status=shardsIndicesStatus.get(indexShard.shardId());
      if (status == null) {
        status=new ShardIndexingStatus();
        shardsIndicesStatus.put(indexShard.shardId(),status);
        changes.add(ShardStatusChangeType.ADDED);
      }
      if (status.translogId == translog.currentId() && translog.totalOperations() == 0) {
        if (status.time == -1) {
          status.time=time;
        }
        if (status.activeIndexing) {
          if ((time - status.time) > inactiveTime.millis() && indexShard.mergeStats().getCurrent() == 0) {
            activeToInactiveIndexingShards.add(indexShard);
            status.activeIndexing=false;
            changes.add(ShardStatusChangeType.BECAME_INACTIVE);
            logger.debug("marking shard [{}][{}] as inactive (inactive_time[{}]) indexing wise, setting size to [{}]",indexShard.shardId().index().name(),indexShard.shardId().id(),inactiveTime,EngineConfig.INACTIVE_SHARD_INDEXING_BUFFER);
          }
        }
      }
 else {
        if (!status.activeIndexing) {
          status.activeIndexing=true;
          changes.add(ShardStatusChangeType.BECAME_ACTIVE);
          logger.debug("marking shard [{}][{}] as active indexing wise",indexShard.shardId().index().name(),indexShard.shardId().id());
        }
        status.time=-1;
      }
      status.translogId=translog.currentId();
      status.translogNumberOfOperations=translog.totalOperations();
      if (status.activeIndexing) {
        activeShards++;
      }
    }
  }
  return activeShards;
}
