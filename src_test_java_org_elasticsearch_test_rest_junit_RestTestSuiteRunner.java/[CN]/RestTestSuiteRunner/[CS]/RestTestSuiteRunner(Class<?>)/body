{
  super(testClass);
  this.runMode=runMode();
  if (runMode == RunMode.NO) {
    this.runnerRandomness=null;
    this.testSectionRandomnessOverride=null;
    this.restTestExecutionContext=null;
    this.restTestCandidates=null;
    this.rootDescription=createRootDescription(getRootSuiteTitle());
    this.rootDescription.addChild(createApiDescription("empty suite"));
    this.testCluster=null;
    return;
  }
  if (sequencer.getAndIncrement() > 0) {
    throw new InitializationError("only one instance of RestTestSuiteRunner can be created per jvm");
  }
  final String globalSeed=System.getProperty(SYSPROP_RANDOM_SEED());
  final long initialSeed;
  Randomness randomnessOverride=null;
  if (Strings.hasLength(globalSeed)) {
    final long[] seedChain=parseSeedChain(globalSeed);
    if (seedChain.length == 0 || seedChain.length > 2) {
      throw new IllegalArgumentException("Invalid system property " + SYSPROP_RANDOM_SEED() + " specification: "+ globalSeed);
    }
    if (seedChain.length > 1) {
      randomnessOverride=new Randomness(seedChain[1]);
    }
    initialSeed=seedChain[0];
  }
 else {
    initialSeed=MurmurHash3.hash(System.nanoTime());
  }
  this.runnerRandomness=new Randomness(initialSeed);
  this.testSectionRandomnessOverride=randomnessOverride;
  logger.info("Master seed: {}",SeedUtils.formatSeed(initialSeed));
  List<InetSocketAddress> addresses=Lists.newArrayList();
  if (runMode == RunMode.TEST_CLUSTER) {
    this.testCluster=new TestCluster(initialSeed,1,3,clusterName("REST-tests",ElasticsearchTestCase.CHILD_VM_ID,initialSeed));
    this.testCluster.beforeTest(runnerRandomness.getRandom(),0.0f);
    for (    HttpServerTransport httpServerTransport : testCluster.getInstances(HttpServerTransport.class)) {
      addresses.add(((InetSocketTransportAddress)httpServerTransport.boundAddress().publishAddress()).address());
    }
  }
 else {
    this.testCluster=null;
    String testsMode=System.getProperty(REST_TESTS_MODE);
    String[] stringAddresses=testsMode.split(",");
    for (    String stringAddress : stringAddresses) {
      String[] split=stringAddress.split(":");
      if (split.length < 2) {
        throw new InitializationError("address [" + testsMode + "] not valid");
      }
      try {
        addresses.add(new InetSocketAddress(split[0],Integer.valueOf(split[1])));
      }
 catch (      NumberFormatException e) {
        throw new InitializationError("port is not valid, expected number but was [" + split[1] + "]");
      }
    }
  }
  try {
    String[] specPaths=resolvePathsProperty(REST_TESTS_SPEC,DEFAULT_SPEC_PATH);
    RestSpec restSpec=RestSpec.parseFrom(DEFAULT_SPEC_PATH,specPaths);
    this.restTestExecutionContext=new RestTestExecutionContext(addresses.toArray(new InetSocketAddress[addresses.size()]),restSpec);
    this.rootDescription=createRootDescription(getRootSuiteTitle());
    this.restTestCandidates=collectTestCandidates(rootDescription);
  }
 catch (  InitializationError e) {
    stopTestCluster();
    throw e;
  }
catch (  Throwable e) {
    stopTestCluster();
    throw new InitializationError(e);
  }
}
