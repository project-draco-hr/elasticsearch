{
  prepareCreate("test",1).execute().actionGet(5000);
  logger.info("Running Cluster Health");
  ClusterHealthResponse clusterHealth=client().admin().cluster().health(clusterHealthRequest().waitForYellowStatus()).actionGet();
  logger.info("Done Cluster Health, status " + clusterHealth.getStatus());
  assertThat(clusterHealth.isTimedOut(),equalTo(false));
  assertThat(clusterHealth.getStatus(),equalTo(ClusterHealthStatus.YELLOW));
  client().index(indexRequest("test").type("type1").id("1").source(source("1","test"))).actionGet();
  FlushResponse flushResponse=client().admin().indices().flush(flushRequest("test")).actionGet();
  assertThat(flushResponse.getTotalShards(),equalTo(10));
  assertThat(flushResponse.getSuccessfulShards(),equalTo(5));
  assertThat(flushResponse.getFailedShards(),equalTo(0));
  client().index(indexRequest("test").type("type1").id("2").source(source("2","test"))).actionGet();
  RefreshResponse refreshResponse=client().admin().indices().refresh(refreshRequest("test")).actionGet();
  assertThat(refreshResponse.getTotalShards(),equalTo(10));
  assertThat(refreshResponse.getSuccessfulShards(),equalTo(5));
  assertThat(refreshResponse.getFailedShards(),equalTo(0));
  logger.info("Count");
  for (int i=0; i < 5; i++) {
    CountResponse countResponse=client().count(countRequest("test").query(termQuery("_type","type1")).operationThreading(BroadcastOperationThreading.NO_THREADS)).actionGet();
    assertThat(countResponse.getCount(),equalTo(2l));
    assertThat(countResponse.getTotalShards(),equalTo(5));
    assertThat(countResponse.getSuccessfulShards(),equalTo(5));
    assertThat(countResponse.getFailedShards(),equalTo(0));
  }
  for (int i=0; i < 5; i++) {
    CountResponse countResponse=client().count(countRequest("test").query(termQuery("_type","type1")).operationThreading(BroadcastOperationThreading.SINGLE_THREAD)).actionGet();
    assertThat(countResponse.getCount(),equalTo(2l));
    assertThat(countResponse.getTotalShards(),equalTo(5));
    assertThat(countResponse.getSuccessfulShards(),equalTo(5));
    assertThat(countResponse.getFailedShards(),equalTo(0));
  }
  for (int i=0; i < 5; i++) {
    CountResponse countResponse=client().count(countRequest("test").query(termQuery("_type","type1")).operationThreading(BroadcastOperationThreading.THREAD_PER_SHARD)).actionGet();
    assertThat(countResponse.getCount(),equalTo(2l));
    assertThat(countResponse.getTotalShards(),equalTo(5));
    assertThat(countResponse.getSuccessfulShards(),equalTo(5));
    assertThat(countResponse.getFailedShards(),equalTo(0));
  }
  for (int i=0; i < 5; i++) {
    CountResponse countResponse=client().count(countRequest("test").query("{ term : { _type : \"type1 } }".getBytes(Charsets.UTF_8))).actionGet();
    assertThat(countResponse.getCount(),equalTo(0l));
    assertThat(countResponse.getTotalShards(),equalTo(5));
    assertThat(countResponse.getSuccessfulShards(),equalTo(0));
    assertThat(countResponse.getFailedShards(),equalTo(5));
    for (    ShardOperationFailedException exp : countResponse.getShardFailures()) {
      assertThat(exp.reason(),containsString("QueryParsingException"));
    }
  }
}
