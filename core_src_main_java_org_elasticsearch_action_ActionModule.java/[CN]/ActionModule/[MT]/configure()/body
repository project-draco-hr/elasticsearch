{
  Multibinder<ActionFilter> actionFilterMultibinder=Multibinder.newSetBinder(binder(),ActionFilter.class);
  for (  Class<? extends ActionFilter> actionFilter : actionFilters) {
    actionFilterMultibinder.addBinding().to(actionFilter);
  }
  bind(ActionFilters.class).asEagerSingleton();
  bind(DestructiveOperations.class).toInstance(destructiveOperations);
  @SuppressWarnings("rawtypes") MapBinder<String,GenericAction> actionsBinder=MapBinder.newMapBinder(binder(),String.class,GenericAction.class);
  for (  Map.Entry<String,ActionHandler<?,?>> entry : actions.entrySet()) {
    actionsBinder.addBinding(entry.getKey()).toInstance(entry.getValue().getAction());
  }
  if (false == transportClient) {
    bind(AutoCreateIndex.class).toInstance(autoCreateIndex);
    bind(TransportLivenessAction.class).asEagerSingleton();
    @SuppressWarnings("rawtypes") MapBinder<GenericAction,TransportAction> transportActionsBinder=MapBinder.newMapBinder(binder(),GenericAction.class,TransportAction.class);
    for (    ActionHandler<?,?> action : actions.values()) {
      bind(action.getTransportAction()).asEagerSingleton();
      transportActionsBinder.addBinding(action.getAction()).to(action.getTransportAction()).asEagerSingleton();
      for (      Class<?> supportAction : action.getSupportTransportActions()) {
        bind(supportAction).asEagerSingleton();
      }
    }
    bind(RestController.class).toInstance(restController);
    if (NetworkModule.HTTP_ENABLED.get(settings)) {
      Multibinder<RestHandler> restHandlers=Multibinder.newSetBinder(binder(),RestHandler.class);
      Multibinder<AbstractCatAction> catHandlers=Multibinder.newSetBinder(binder(),AbstractCatAction.class);
      for (      Class<? extends RestHandler> handler : setupRestHandlers(actionPlugins)) {
        bind(handler).asEagerSingleton();
        if (AbstractCatAction.class.isAssignableFrom(handler)) {
          catHandlers.addBinding().to(handler.asSubclass(AbstractCatAction.class));
        }
 else {
          restHandlers.addBinding().to(handler);
        }
      }
    }
  }
}
