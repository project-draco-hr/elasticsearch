{
  assertEquals(5D,Utility.divideWithoutOverflow(25D,5D),0D);
  assertTrue(Double.isNaN(Utility.divideWithoutOverflow(5D,Double.NaN)));
  assertEquals(Double.POSITIVE_INFINITY,Utility.divideWithoutOverflow(Double.POSITIVE_INFINITY,5D),0D);
  try {
    Utility.divideWithoutOverflow(Double.MAX_VALUE,Double.MIN_VALUE);
    fail("did not get expected exception");
  }
 catch (  ArithmeticException expected) {
  }
  try {
    Utility.divideWithoutOverflow(0D,0D);
    fail("did not get expected exception");
  }
 catch (  ArithmeticException expected) {
  }
  try {
    Utility.divideWithoutOverflow(5D,0D);
    fail("did not get expected exception");
  }
 catch (  ArithmeticException expected) {
  }
}
