{
  int chafPerShard=100;
  Builder builder=ImmutableSettings.builder();
  int numberOfShards=between(2,5);
  builder.put("index.number_of_shards",numberOfShards).put("index.number_of_replicas",between(0,numberOfNodes() - 1));
  builder.put("index.analysis.analyzer.body.tokenizer","standard");
  builder.putArray("index.analysis.analyzer.body.filter","lowercase","my_shingle");
  builder.put("index.analysis.filter.my_shingle.type","shingle");
  builder.put("index.analysis.filter.my_shingle.output_unigrams",true);
  builder.put("index.analysis.filter.my_shingle.min_shingle_size",2);
  builder.put("index.analysis.filter.my_shingle.max_shingle_size",2);
  XContentBuilder mapping=XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("_all").field("store","yes").field("termVector","with_positions_offsets").endObject().startObject("properties").startObject("body").field("type","string").field("analyzer","body").endObject().endObject().endObject().endObject();
  client().admin().indices().prepareCreate("test").setSettings(builder.build()).addMapping("type1",mapping).execute().actionGet();
  ensureGreen();
  List<String> phrases=new ArrayList<String>();
  Collections.addAll(phrases,"nobel prize","noble gases","somethingelse prize","pride and joy","notes are fun");
  for (int i=0; i < 8; i++) {
    phrases.add("noble somethingelse" + i);
  }
  for (int i=0; i < numberOfShards * chafPerShard; i++) {
    phrases.add("chaff" + i);
  }
  for (  String phrase : phrases) {
    client().prepareIndex("test","type1").setSource(XContentFactory.jsonBuilder().startObject().field("body",phrase).endObject()).execute().actionGet();
  }
  refresh();
  Suggest searchSuggest=searchSuggest(client(),"nobel prize",phraseSuggestion("simple_phrase").field("body").addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f)).confidence(2f).maxErrors(5f).size(1));
  ElasticsearchAssertions.assertSuggestionSize(searchSuggest,0,0,"simple_phrase");
  searchSuggest=searchSuggest(client(),"noble prize",phraseSuggestion("simple_phrase").field("body").addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f)).confidence(2f).maxErrors(5f).size(1));
  ElasticsearchAssertions.assertSuggestion(searchSuggest,0,0,"simple_phrase","nobel prize");
}
