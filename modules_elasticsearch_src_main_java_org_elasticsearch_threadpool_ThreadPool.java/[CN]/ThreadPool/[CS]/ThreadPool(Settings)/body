{
  super(settings);
  Map<String,Settings> groupSettings=settings.getGroups("threadpool");
  Map<String,Executor> executors=Maps.newHashMap();
  executors.put(Names.CACHED,build(Names.CACHED,"cached",groupSettings.get(Names.CACHED),settingsBuilder().put("keep_alive","30s").build()));
  executors.put(Names.INDEX,build(Names.INDEX,"cached",groupSettings.get(Names.INDEX),ImmutableSettings.Builder.EMPTY_SETTINGS));
  executors.put(Names.SEARCH,build(Names.SEARCH,"cached",groupSettings.get(Names.SEARCH),ImmutableSettings.Builder.EMPTY_SETTINGS));
  executors.put(Names.PERCOLATE,build(Names.PERCOLATE,"cached",groupSettings.get(Names.PERCOLATE),ImmutableSettings.Builder.EMPTY_SETTINGS));
  executors.put(Names.MANAGEMENT,build(Names.MANAGEMENT,"scaling",groupSettings.get(Names.MANAGEMENT),ImmutableSettings.Builder.EMPTY_SETTINGS));
  executors.put(Names.SNAPSHOT,build(Names.SNAPSHOT,"scaling",groupSettings.get(Names.SNAPSHOT),ImmutableSettings.Builder.EMPTY_SETTINGS));
  executors.put(Names.SAME,MoreExecutors.sameThreadExecutor());
  this.executors=ImmutableMap.copyOf(executors);
  this.scheduler=Executors.newScheduledThreadPool(1,EsExecutors.daemonThreadFactory(settings,"[scheduler]"));
}
