{
  final String firstNode=internalCluster().startNode();
  internalCluster().startNode();
  client().prepareIndex("test","type1","1").setSource(jsonBuilder().startObject().field("field","value1").endObject()).execute().actionGet();
  flush();
  client().prepareIndex("test","type1","2").setSource(jsonBuilder().startObject().field("field","value2").endObject()).execute().actionGet();
  refresh();
  logger.info("Running Cluster Health (wait for the shards to startup)");
  ensureGreen();
  for (int i=0; i < 10; i++) {
    assertHitCount(client().prepareSearch().setSize(0).setQuery(matchAllQuery()).execute().actionGet(),2);
  }
  internalCluster().fullRestart(new RestartCallback(){
    @Override public Settings onNodeStopped(    String nodeName) throws Exception {
      return settingsBuilder().put("gateway.recover_after_nodes",2).build();
    }
    @Override public boolean clearData(    String nodeName){
      return firstNode.equals(nodeName);
    }
  }
);
  logger.info("Running Cluster Health (wait for the shards to startup)");
  ensureGreen();
  for (int i=0; i < 10; i++) {
    assertHitCount(client().prepareSearch().setSize(0).setQuery(matchAllQuery()).execute().actionGet(),2);
  }
}
