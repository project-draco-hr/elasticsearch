{
  Version version=VersionUtils.randomVersionBetween(random(),Version.V_2_0_0,Version.CURRENT);
  Settings settings=Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED,version).build();
  DocumentMapperParser parser=createIndex("test",settings).mapperService().documentMapperParser();
  if (version.onOrAfter(Version.V_5_0_0_alpha6)) {
    try {
      String normalizeMapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("point").field("type","geo_point").field("lat_lon",true).endObject().endObject().endObject().endObject().string();
      parser.parse("type",new CompressedXContent(normalizeMapping));
    }
 catch (    MapperParsingException e) {
      assertEquals(e.getMessage(),"Mapping definition for [point] has unsupported parameters:  [lat_lon : true]");
    }
  }
  if (version.onOrAfter(Version.V_5_0_0_alpha6)) {
    try {
      String normalizeMapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("point").field("type","geo_point").field("geohash",true).endObject().endObject().endObject().endObject().string();
      parser.parse("type",new CompressedXContent(normalizeMapping));
    }
 catch (    MapperParsingException e) {
      assertEquals(e.getMessage(),"Mapping definition for [point] has unsupported parameters:  [geohash : true]");
    }
  }
  try {
    XContentBuilder xContentBuilder=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("point").field("type","geo_point");
    if (version.before(Version.V_5_0_0_alpha6)) {
      xContentBuilder=xContentBuilder.field("lat_lon",true).field("geohash",true);
    }
    String validateMapping=xContentBuilder.field("validate",true).endObject().endObject().endObject().endObject().string();
    parser.parse("type",new CompressedXContent(validateMapping));
    fail("process completed successfully when " + MapperParsingException.class.getName() + " expected");
  }
 catch (  MapperParsingException e) {
    assertEquals(e.getMessage(),"Mapping definition for [point] has unsupported parameters:  [validate : true]");
  }
  try {
    XContentBuilder xContentBuilder=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("point").field("type","geo_point");
    if (version.before(Version.V_5_0_0_alpha6)) {
      xContentBuilder=xContentBuilder.field("lat_lon",true).field("geohash",true);
    }
    String validateMapping=xContentBuilder.field("validate_lat",true).endObject().endObject().endObject().endObject().string();
    parser.parse("type",new CompressedXContent(validateMapping));
    fail("process completed successfully when " + MapperParsingException.class.getName() + " expected");
  }
 catch (  MapperParsingException e) {
    assertEquals(e.getMessage(),"Mapping definition for [point] has unsupported parameters:  [validate_lat : true]");
  }
  try {
    XContentBuilder xContentBuilder=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("point").field("type","geo_point");
    if (version.before(Version.V_5_0_0_alpha6)) {
      xContentBuilder=xContentBuilder.field("lat_lon",true).field("geohash",true);
    }
    String validateMapping=xContentBuilder.field("validate_lon",true).endObject().endObject().endObject().endObject().string();
    parser.parse("type",new CompressedXContent(validateMapping));
    fail("process completed successfully when " + MapperParsingException.class.getName() + " expected");
  }
 catch (  MapperParsingException e) {
    assertEquals(e.getMessage(),"Mapping definition for [point] has unsupported parameters:  [validate_lon : true]");
  }
  try {
    XContentBuilder xContentBuilder=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("point").field("type","geo_point");
    if (version.before(Version.V_5_0_0_alpha6)) {
      xContentBuilder=xContentBuilder.field("lat_lon",true).field("geohash",true);
    }
    String normalizeMapping=xContentBuilder.field("normalize",true).endObject().endObject().endObject().endObject().string();
    parser.parse("type",new CompressedXContent(normalizeMapping));
    fail("process completed successfully when " + MapperParsingException.class.getName() + " expected");
  }
 catch (  MapperParsingException e) {
    assertEquals(e.getMessage(),"Mapping definition for [point] has unsupported parameters:  [normalize : true]");
  }
  try {
    XContentBuilder xContentBuilder=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("point").field("type","geo_point");
    if (version.before(Version.V_5_0_0_alpha6)) {
      xContentBuilder=xContentBuilder.field("lat_lon",true).field("geohash",true);
    }
    String normalizeMapping=xContentBuilder.field("normalize_lat",true).endObject().endObject().endObject().endObject().string();
    parser.parse("type",new CompressedXContent(normalizeMapping));
    fail("process completed successfully when " + MapperParsingException.class.getName() + " expected");
  }
 catch (  MapperParsingException e) {
    assertEquals(e.getMessage(),"Mapping definition for [point] has unsupported parameters:  [normalize_lat : true]");
  }
  try {
    XContentBuilder xContentBuilder=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("point").field("type","geo_point");
    if (version.before(Version.V_5_0_0_alpha6)) {
      xContentBuilder=xContentBuilder.field("lat_lon",true).field("geohash",true);
    }
    String normalizeMapping=xContentBuilder.field("normalize_lon",true).endObject().endObject().endObject().endObject().string();
    parser.parse("type",new CompressedXContent(normalizeMapping));
    fail("process completed successfully when " + MapperParsingException.class.getName() + " expected");
  }
 catch (  MapperParsingException e) {
    assertEquals(e.getMessage(),"Mapping definition for [point] has unsupported parameters:  [normalize_lon : true]");
  }
}
