{
  try {
    RestClient.builder().setMaxRetryTimeout(RandomInts.randomIntBetween(random(),Integer.MIN_VALUE,0));
    fail("should have failed");
  }
 catch (  IllegalArgumentException e) {
    assertEquals(e.getMessage(),"maxRetryTimeout must be greater than 0");
  }
  try {
    RestClient.builder().setHosts((HttpHost[])null);
    fail("should have failed");
  }
 catch (  IllegalArgumentException e) {
    assertEquals(e.getMessage(),"no hosts provided");
  }
  try {
    RestClient.builder().setHosts();
    fail("should have failed");
  }
 catch (  IllegalArgumentException e) {
    assertEquals(e.getMessage(),"no hosts provided");
  }
  try {
    RestClient.builder();
    fail("should have failed");
  }
 catch (  IllegalArgumentException e) {
    assertEquals(e.getMessage(),"no hosts provided");
  }
  RestClient.Builder builder=RestClient.builder();
  int numNodes=RandomInts.randomIntBetween(random(),1,5);
  HttpHost[] hosts=new HttpHost[numNodes];
  for (int i=0; i < numNodes; i++) {
    hosts[i]=new HttpHost("localhost",9200 + i);
  }
  builder.setHosts(hosts);
  if (random().nextBoolean()) {
    builder.setHttpClient(HttpClientBuilder.create().build());
  }
  if (random().nextBoolean()) {
    builder.setMaxRetryTimeout(RandomInts.randomIntBetween(random(),1,Integer.MAX_VALUE));
  }
  try (RestClient restClient=builder.build()){
    assertNotNull(restClient);
  }
 }
