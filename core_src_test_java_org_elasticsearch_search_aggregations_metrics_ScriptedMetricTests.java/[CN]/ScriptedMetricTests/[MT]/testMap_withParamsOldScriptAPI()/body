{
  Map<String,Object> params=new HashMap<>();
  params.put("_agg",new ArrayList<>());
  SearchResponse response=client().prepareSearch("idx").setQuery(matchAllQuery()).addAggregation(scriptedMetric("scripted").params(params).mapScript("_agg.add(1)")).execute().actionGet();
  assertSearchResponse(response);
  assertThat(response.getHits().getTotalHits(),equalTo(numDocs));
  Aggregation aggregation=response.getAggregations().get("scripted");
  assertThat(aggregation,notNullValue());
  assertThat(aggregation,instanceOf(ScriptedMetric.class));
  ScriptedMetric scriptedMetricAggregation=(ScriptedMetric)aggregation;
  assertThat(scriptedMetricAggregation.getName(),equalTo("scripted"));
  assertThat(scriptedMetricAggregation.aggregation(),notNullValue());
  assertThat(scriptedMetricAggregation.aggregation(),instanceOf(ArrayList.class));
  List<?> aggregationList=(List<?>)scriptedMetricAggregation.aggregation();
  assertThat(aggregationList.size(),equalTo(getNumShards("idx").numPrimaries));
  long totalCount=0;
  for (  Object object : aggregationList) {
    assertThat(object,notNullValue());
    assertThat(object,instanceOf(List.class));
    List<?> list=(List<?>)object;
    for (    Object o : list) {
      assertThat(o,notNullValue());
      assertThat(o,instanceOf(Number.class));
      Number numberValue=(Number)o;
      assertThat(numberValue,equalTo((Number)1));
      totalCount+=numberValue.longValue();
    }
  }
  assertThat(totalCount,equalTo(numDocs));
}
