{
  Map<String,Object> varsMap=new HashMap<>();
  varsMap.put("multiplier",1);
  Map<String,Object> params=new HashMap<>();
  params.put("_agg",new ArrayList<>());
  params.put("vars",varsMap);
  SearchResponse response=client().prepareSearch("idx").setQuery(matchAllQuery()).setSize(1000).addAggregation(histogram("histo").field("l_value").interval(1).subAggregation(scriptedMetric("scripted").params(params).initScript("vars.multiplier = 3").mapScript("_agg.add(vars.multiplier)").combineScript("newaggregation = []; sum = 0;for (a in _agg) { sum += a}; newaggregation.add(sum); return newaggregation").reduceScript("newaggregation = []; sum = 0;for (aggregation in _aggs) { for (a in aggregation) { sum += a} }; newaggregation.add(sum); return newaggregation"))).execute().actionGet();
  assertSearchResponse(response);
  assertThat(response.getHits().getTotalHits(),equalTo(numDocs));
  Aggregation aggregation=response.getAggregations().get("histo");
  assertThat(aggregation,notNullValue());
  assertThat(aggregation,instanceOf(Histogram.class));
  Histogram histoAgg=(Histogram)aggregation;
  assertThat(histoAgg.getName(),equalTo("histo"));
  List<? extends Bucket> buckets=histoAgg.getBuckets();
  assertThat(buckets,notNullValue());
  for (  Bucket b : buckets) {
    assertThat(b,notNullValue());
    assertThat(b.getDocCount(),equalTo(1l));
    Aggregations subAggs=b.getAggregations();
    assertThat(subAggs,notNullValue());
    assertThat(subAggs.asList().size(),equalTo(1));
    Aggregation subAgg=subAggs.get("scripted");
    assertThat(subAgg,notNullValue());
    assertThat(subAgg,instanceOf(ScriptedMetric.class));
    ScriptedMetric scriptedMetricAggregation=(ScriptedMetric)subAgg;
    assertThat(scriptedMetricAggregation.getName(),equalTo("scripted"));
    assertThat(scriptedMetricAggregation.aggregation(),notNullValue());
    assertThat(scriptedMetricAggregation.aggregation(),instanceOf(ArrayList.class));
    List<?> aggregationList=(List<?>)scriptedMetricAggregation.aggregation();
    assertThat(aggregationList.size(),equalTo(1));
    Object object=aggregationList.get(0);
    assertThat(object,notNullValue());
    assertThat(object,instanceOf(Number.class));
    assertThat(((Number)object).longValue(),equalTo(3l));
  }
}
