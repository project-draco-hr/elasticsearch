{
  createIndex("test");
  ensureGreen();
  HashMap<String,Object> newSettings=new HashMap<>();
  newSettings.put("index.gc_deletes","1000000h");
  assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(newSettings).execute().actionGet());
  Random random=random();
  IDSource idSource=getRandomIDs();
  Set<String> idsSet=new HashSet<>();
  String idPrefix;
  if (randomBoolean()) {
    idPrefix="";
  }
 else {
    idPrefix=TestUtil.randomSimpleString(random);
    logger.debug("--> use id prefix {}",idPrefix);
  }
  int numIDs;
  if (TEST_NIGHTLY) {
    numIDs=scaledRandomIntBetween(300,1000);
  }
 else {
    numIDs=scaledRandomIntBetween(50,100);
  }
  while (idsSet.size() < numIDs) {
    idsSet.add(idPrefix + idSource.next());
  }
  String[] ids=idsSet.toArray(new String[numIDs]);
  boolean useMonotonicVersion=randomBoolean();
  long version=0;
  final IDAndVersion[] idVersions=new IDAndVersion[TestUtil.nextInt(random,numIDs / 2,numIDs * (TEST_NIGHTLY ? 8 : 2))];
  final Map<String,IDAndVersion> truth=new HashMap<>();
  logger.debug("--> use {} ids; {} operations",numIDs,idVersions.length);
  for (int i=0; i < idVersions.length; i++) {
    if (useMonotonicVersion) {
      version+=TestUtil.nextInt(random,1,10);
    }
 else {
      version=random.nextLong() & 0x3fffffffffffffffL;
    }
    idVersions[i]=new IDAndVersion();
    idVersions[i].id=ids[random.nextInt(numIDs)];
    idVersions[i].version=version;
    idVersions[i].delete=random.nextInt(5) == 2;
    IDAndVersion curVersion=truth.get(idVersions[i].id);
    if (curVersion == null || idVersions[i].version > curVersion.version) {
      truth.put(idVersions[i].id,idVersions[i]);
    }
  }
  for (int i=idVersions.length - 1; i > 0; i--) {
    int index=random.nextInt(i + 1);
    IDAndVersion x=idVersions[index];
    idVersions[index]=idVersions[i];
    idVersions[i]=x;
  }
  for (  IDAndVersion idVersion : idVersions) {
    logger.debug("--> id={} version={} delete?={} truth?={}",idVersion.id,idVersion.version,idVersion.delete,truth.get(idVersion.id) == idVersion);
  }
  final AtomicInteger upto=new AtomicInteger();
  final CountDownLatch startingGun=new CountDownLatch(1);
  Thread[] threads=new Thread[TestUtil.nextInt(random,1,TEST_NIGHTLY ? 20 : 5)];
  final long startTime=System.nanoTime();
  for (int i=0; i < threads.length; i++) {
    final int threadID=i;
    threads[i]=new Thread(){
      @Override public void run(){
        try {
          final Random threadRandom=random();
          startingGun.await();
          while (true) {
            int index=upto.getAndIncrement();
            if (index >= idVersions.length) {
              break;
            }
            if (index % 100 == 0) {
              logger.trace("{}: index={}",Thread.currentThread().getName(),index);
            }
            IDAndVersion idVersion=idVersions[index];
            String id=idVersion.id;
            idVersion.threadID=threadID;
            idVersion.indexStartTime=System.nanoTime() - startTime;
            long version=idVersion.version;
            if (idVersion.delete) {
              try {
                idVersion.response=client().prepareDelete("test","type",id).setVersion(version).setVersionType(VersionType.EXTERNAL).execute().actionGet();
              }
 catch (              VersionConflictEngineException vcee) {
                assertThat(version,lessThanOrEqualTo(truth.get(id).version));
                idVersion.versionConflict=true;
              }
            }
 else {
              try {
                idVersion.response=client().prepareIndex("test","type",id).setSource("foo","bar").setVersion(version).setVersionType(VersionType.EXTERNAL).get();
              }
 catch (              VersionConflictEngineException vcee) {
                assertThat(version,lessThanOrEqualTo(truth.get(id).version));
                idVersion.versionConflict=true;
              }
            }
            idVersion.indexFinishTime=System.nanoTime() - startTime;
            if (threadRandom.nextInt(100) == 7) {
              logger.trace("--> {}: TEST: now refresh at {}",threadID,System.nanoTime() - startTime);
              refresh();
              logger.trace("--> {}: TEST: refresh done at {}",threadID,System.nanoTime() - startTime);
            }
            if (threadRandom.nextInt(100) == 7) {
              logger.trace("--> {}: TEST: now flush at {}",threadID,System.nanoTime() - startTime);
              try {
                flush();
              }
 catch (              FlushNotAllowedEngineException fnaee) {
              }
              logger.trace("--> {}: TEST: flush done at {}",threadID,System.nanoTime() - startTime);
            }
          }
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
;
    threads[i].start();
  }
  startingGun.countDown();
  for (  Thread thread : threads) {
    thread.join();
  }
  boolean failed=false;
  for (  String id : ids) {
    long expected;
    IDAndVersion idVersion=truth.get(id);
    if (idVersion != null && idVersion.delete == false) {
      expected=idVersion.version;
    }
 else {
      expected=-1;
    }
    long actualVersion=client().prepareGet("test","type",id).execute().actionGet().getVersion();
    if (actualVersion != expected) {
      logger.error("--> FAILED: idVersion={} actualVersion= {}",idVersion,actualVersion);
      failed=true;
    }
  }
  if (failed) {
    StringBuilder sb=new StringBuilder();
    for (int i=0; i < idVersions.length; i++) {
      sb.append("i=").append(i).append(" ").append(idVersions[i]).append(System.lineSeparator());
    }
    logger.error("All versions: {}",sb);
    fail("wrong versions for some IDs");
  }
}
