{
  client().admin().indices().prepareCreate("test").setSettings(ImmutableSettings.settingsBuilder().put("index.number_of_shards",1)).execute().actionGet();
  client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();
  client().admin().indices().preparePutMapping("test").setType("type1").setSource(XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("foo").field("type","string").endObject().startObject("bar").field("type","integer").endObject().startObject("baz").field("type","string").field("analyzer","snowball").endObject().startObject("pin").startObject("properties").startObject("location").field("type","geo_point").endObject().endObject().endObject().endObject().endObject().endObject()).execute().actionGet();
  client().admin().indices().preparePutMapping("test").setType("child-type").setSource(XContentFactory.jsonBuilder().startObject().startObject("child-type").startObject("_parent").field("type","type1").endObject().startObject("properties").startObject("foo").field("type","string").endObject().endObject().endObject().endObject()).execute().actionGet();
  client().admin().indices().prepareRefresh().execute().actionGet();
  ValidateQueryResponse response;
  response=client().admin().indices().prepareValidateQuery("test").setQuery("foo".getBytes(Charsets.UTF_8)).setExplain(true).execute().actionGet();
  assertThat(response.isValid(),equalTo(false));
  assertThat(response.getQueryExplanation().size(),equalTo(1));
  assertThat(response.getQueryExplanation().get(0).getError(),containsString("Failed to parse"));
  assertThat(response.getQueryExplanation().get(0).getExplanation(),nullValue());
  assertExplanation(QueryBuilders.queryString("_id:1"),equalTo("ConstantScore(_uid:type1#1)"));
  assertExplanation(QueryBuilders.idsQuery("type1").addIds("1").addIds("2"),equalTo("ConstantScore(_uid:type1#1 _uid:type1#2)"));
  assertExplanation(QueryBuilders.queryString("foo"),equalTo("_all:foo"));
  assertExplanation(QueryBuilders.filteredQuery(QueryBuilders.termQuery("foo","1"),FilterBuilders.orFilter(FilterBuilders.termFilter("bar","2"),FilterBuilders.termFilter("baz","3"))),equalTo("filtered(foo:1)->cache(bar:[2 TO 2]) cache(baz:3)"));
  assertExplanation(QueryBuilders.filteredQuery(QueryBuilders.termQuery("foo","1"),FilterBuilders.orFilter(FilterBuilders.termFilter("bar","2"))),equalTo("filtered(foo:1)->cache(bar:[2 TO 2])"));
  assertExplanation(QueryBuilders.filteredQuery(QueryBuilders.matchAllQuery(),FilterBuilders.geoPolygonFilter("pin.location").addPoint(40,-70).addPoint(30,-80).addPoint(20,-90)),equalTo("ConstantScore(GeoPolygonFilter(pin.location, [[40.0, -70.0], [30.0, -80.0], [20.0, -90.0]]))"));
  assertExplanation(QueryBuilders.constantScoreQuery(FilterBuilders.geoBoundingBoxFilter("pin.location").topLeft(40,-80).bottomRight(20,-70)),equalTo("ConstantScore(GeoBoundingBoxFilter(pin.location, [40.0, -80.0], [20.0, -70.0]))"));
  assertExplanation(QueryBuilders.constantScoreQuery(FilterBuilders.geoDistanceFilter("pin.location").lat(10).lon(20).distance(15,DistanceUnit.MILES).geoDistance(GeoDistance.PLANE)),equalTo("ConstantScore(GeoDistanceFilter(pin.location, PLANE, 15.0, 10.0, 20.0))"));
  assertExplanation(QueryBuilders.constantScoreQuery(FilterBuilders.geoDistanceFilter("pin.location").lat(10).lon(20).distance(15,DistanceUnit.MILES).geoDistance(GeoDistance.PLANE)),equalTo("ConstantScore(GeoDistanceFilter(pin.location, PLANE, 15.0, 10.0, 20.0))"));
  assertExplanation(QueryBuilders.constantScoreQuery(FilterBuilders.geoDistanceRangeFilter("pin.location").lat(10).lon(20).from("15miles").to("25miles").geoDistance(GeoDistance.PLANE)),equalTo("ConstantScore(GeoDistanceRangeFilter(pin.location, PLANE, [15.0 - 25.0], 10.0, 20.0))"));
  assertExplanation(QueryBuilders.filteredQuery(QueryBuilders.termQuery("foo","1"),FilterBuilders.andFilter(FilterBuilders.termFilter("bar","2"),FilterBuilders.termFilter("baz","3"))),equalTo("filtered(foo:1)->+cache(bar:[2 TO 2]) +cache(baz:3)"));
  assertExplanation(QueryBuilders.constantScoreQuery(FilterBuilders.termsFilter("foo","1","2","3")),equalTo("ConstantScore(cache(foo:1 foo:2 foo:3))"));
  assertExplanation(QueryBuilders.constantScoreQuery(FilterBuilders.notFilter(FilterBuilders.termFilter("foo","bar"))),equalTo("ConstantScore(NotFilter(cache(foo:bar)))"));
  assertExplanation(QueryBuilders.filteredQuery(QueryBuilders.termQuery("foo","1"),FilterBuilders.hasChildFilter("child-type",QueryBuilders.fieldQuery("foo","1"))),equalTo("filtered(foo:1)->child_filter[child-type/type1](filtered(foo:1)->cache(_type:child-type))"));
  assertExplanation(QueryBuilders.filteredQuery(QueryBuilders.termQuery("foo","1"),FilterBuilders.scriptFilter("true")),equalTo("filtered(foo:1)->ScriptFilter(true)"));
}
