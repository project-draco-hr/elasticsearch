{
  createIndex("test");
  ensureGreen();
  client().admin().indices().preparePutMapping("test").setType("type1").setSource(XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("foo").field("type","string").endObject().startObject("bar").field("type","integer").endObject().startObject("baz").field("type","string").field("analyzer","snowball").endObject().startObject("pin").startObject("properties").startObject("location").field("type","geo_point").endObject().endObject().endObject().endObject().endObject().endObject()).execute().actionGet();
  client().admin().indices().preparePutMapping("test").setType("child-type").setSource(XContentFactory.jsonBuilder().startObject().startObject("child-type").startObject("_parent").field("type","type1").endObject().startObject("properties").startObject("foo").field("type","string").endObject().endObject().endObject().endObject()).execute().actionGet();
  refresh();
  ValidateQueryResponse response;
  response=client().admin().indices().prepareValidateQuery("test").setSource("foo".getBytes(Charsets.UTF_8)).setExplain(true).execute().actionGet();
  assertThat(response.isValid(),equalTo(false));
  assertThat(response.getQueryExplanation().size(),equalTo(1));
  assertThat(response.getQueryExplanation().get(0).getError(),containsString("Failed to parse"));
  assertThat(response.getQueryExplanation().get(0).getExplanation(),nullValue());
  final String typeFilter=filter("_type:type1");
  assertExplanation(QueryBuilders.queryStringQuery("_id:1"),equalTo("filtered(ConstantScore(_uid:type1#1))->" + typeFilter));
  assertExplanation(QueryBuilders.idsQuery("type1").addIds("1").addIds("2"),equalTo("filtered(ConstantScore(_uid:type1#1 _uid:type1#2))->" + typeFilter));
  assertExplanation(QueryBuilders.queryStringQuery("foo"),equalTo("filtered(_all:foo)->" + typeFilter));
  assertExplanation(QueryBuilders.filteredQuery(QueryBuilders.termQuery("foo","1"),FilterBuilders.orFilter(FilterBuilders.termFilter("bar","2"),FilterBuilders.termFilter("baz","3"))),equalTo("filtered(filtered(foo:1)->" + filter("bar:[2 TO 2]") + " "+ filter("baz:3")+ ")->"+ typeFilter));
  assertExplanation(QueryBuilders.filteredQuery(QueryBuilders.termQuery("foo","1"),FilterBuilders.orFilter(FilterBuilders.termFilter("bar","2"))),equalTo("filtered(filtered(foo:1)->" + filter("bar:[2 TO 2]") + ")->"+ typeFilter));
  assertExplanation(QueryBuilders.filteredQuery(QueryBuilders.matchAllQuery(),FilterBuilders.geoPolygonFilter("pin.location").addPoint(40,-70).addPoint(30,-80).addPoint(20,-90).addPoint(40,-70)),equalTo("filtered(ConstantScore(GeoPolygonFilter(pin.location, [[40.0, -70.0], [30.0, -80.0], [20.0, -90.0], [40.0, -70.0]])))->" + typeFilter));
  assertExplanation(QueryBuilders.constantScoreQuery(FilterBuilders.geoBoundingBoxFilter("pin.location").topLeft(40,-80).bottomRight(20,-70)),equalTo("filtered(ConstantScore(GeoBoundingBoxFilter(pin.location, [40.0, -80.0], [20.0, -70.0])))->" + typeFilter));
  assertExplanation(QueryBuilders.constantScoreQuery(FilterBuilders.geoDistanceFilter("pin.location").lat(10).lon(20).distance(15,DistanceUnit.DEFAULT).geoDistance(GeoDistance.PLANE)),equalTo("filtered(ConstantScore(GeoDistanceFilter(pin.location, PLANE, 15.0, 10.0, 20.0)))->" + typeFilter));
  assertExplanation(QueryBuilders.constantScoreQuery(FilterBuilders.geoDistanceFilter("pin.location").lat(10).lon(20).distance(15,DistanceUnit.DEFAULT).geoDistance(GeoDistance.PLANE)),equalTo("filtered(ConstantScore(GeoDistanceFilter(pin.location, PLANE, 15.0, 10.0, 20.0)))->" + typeFilter));
  assertExplanation(QueryBuilders.constantScoreQuery(FilterBuilders.geoDistanceRangeFilter("pin.location").lat(10).lon(20).from("15m").to("25m").geoDistance(GeoDistance.PLANE)),equalTo("filtered(ConstantScore(GeoDistanceRangeFilter(pin.location, PLANE, [15.0 - 25.0], 10.0, 20.0)))->" + typeFilter));
  assertExplanation(QueryBuilders.constantScoreQuery(FilterBuilders.geoDistanceRangeFilter("pin.location").lat(10).lon(20).from("15miles").to("25miles").geoDistance(GeoDistance.PLANE)),equalTo("filtered(ConstantScore(GeoDistanceRangeFilter(pin.location, PLANE, [" + DistanceUnit.DEFAULT.convert(15.0,DistanceUnit.MILES) + " - "+ DistanceUnit.DEFAULT.convert(25.0,DistanceUnit.MILES)+ "], 10.0, 20.0)))->"+ typeFilter));
  assertExplanation(QueryBuilders.filteredQuery(QueryBuilders.termQuery("foo","1"),FilterBuilders.andFilter(FilterBuilders.termFilter("bar","2"),FilterBuilders.termFilter("baz","3"))),equalTo("filtered(filtered(foo:1)->+" + filter("bar:[2 TO 2]") + " +"+ filter("baz:3")+ ")->"+ typeFilter));
  assertExplanation(QueryBuilders.constantScoreQuery(FilterBuilders.termsFilter("foo","1","2","3")),equalTo("filtered(ConstantScore(" + filter("foo:1 foo:2 foo:3") + "))->"+ typeFilter));
  assertExplanation(QueryBuilders.constantScoreQuery(FilterBuilders.notFilter(FilterBuilders.termFilter("foo","bar"))),equalTo("filtered(ConstantScore(NotFilter(" + filter("foo:bar") + ")))->"+ typeFilter));
  assertExplanation(QueryBuilders.filteredQuery(QueryBuilders.termQuery("foo","1"),FilterBuilders.hasChildFilter("child-type",QueryBuilders.matchQuery("foo","1"))),equalTo("filtered(filtered(foo:1)->CustomQueryWrappingFilter(child_filter[child-type/type1](filtered(foo:1)->" + filter("_type:child-type") + ")))->"+ typeFilter));
  assertExplanation(QueryBuilders.filteredQuery(QueryBuilders.termQuery("foo","1"),FilterBuilders.scriptFilter("true")),equalTo("filtered(filtered(foo:1)->ScriptFilter(true))->" + typeFilter));
}
