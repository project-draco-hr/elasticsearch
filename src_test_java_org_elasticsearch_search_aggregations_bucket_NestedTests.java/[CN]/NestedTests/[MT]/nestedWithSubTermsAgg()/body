{
  SearchResponse response=client().prepareSearch("idx").addAggregation(nested("nested").path("nested").subAggregation(terms("values").field("nested.value").size(100))).execute().actionGet();
  assertSearchResponse(response);
  long docCount=0;
  long[] counts=new long[numParents + 6];
  for (int i=0; i < numParents; ++i) {
    for (int j=0; j < numChildren[i]; ++j) {
      final int value=i + 1 + j;
      ++counts[value];
      ++docCount;
    }
  }
  int uniqueValues=0;
  for (  long count : counts) {
    if (count > 0) {
      ++uniqueValues;
    }
  }
  Nested nested=response.getAggregations().get("nested");
  assertThat(nested,notNullValue());
  assertThat(nested.getName(),equalTo("nested"));
  assertThat(nested.getDocCount(),equalTo(docCount));
  assertThat(nested.getAggregations().asList().isEmpty(),is(false));
  LongTerms values=nested.getAggregations().get("values");
  assertThat(values,notNullValue());
  assertThat(values.getName(),equalTo("values"));
  assertThat(values.buckets(),notNullValue());
  assertThat(values.buckets().size(),equalTo(uniqueValues));
  for (int i=0; i < counts.length; ++i) {
    final String key=Long.toString(i);
    if (counts[i] == 0) {
      assertNull(values.getByTerm(key));
    }
 else {
      Bucket bucket=values.getByTerm(key);
      assertNotNull(bucket);
      assertEquals(counts[i],bucket.getDocCount());
    }
  }
}
