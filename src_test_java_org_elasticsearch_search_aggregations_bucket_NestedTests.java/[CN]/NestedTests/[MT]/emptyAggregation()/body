{
  prepareCreate("empty_bucket_idx").addMapping("type","value","type=integer","nested","type=nested").execute().actionGet();
  List<IndexRequestBuilder> builders=new ArrayList<>();
  for (int i=0; i < 2; i++) {
    builders.add(client().prepareIndex("empty_bucket_idx","type","" + i).setSource(jsonBuilder().startObject().field("value",i * 2).startArray("nested").startObject().field("value",i + 1).endObject().startObject().field("value",i + 2).endObject().startObject().field("value",i + 3).endObject().startObject().field("value",i + 4).endObject().startObject().field("value",i + 5).endObject().endArray().endObject()));
  }
  indexRandom(true,builders.toArray(new IndexRequestBuilder[builders.size()]));
  SearchResponse searchResponse=client().prepareSearch("empty_bucket_idx").setQuery(matchAllQuery()).addAggregation(histogram("histo").field("value").interval(1l).minDocCount(0).subAggregation(nested("nested").path("nested"))).execute().actionGet();
  assertThat(searchResponse.getHits().getTotalHits(),equalTo(2l));
  Histogram histo=searchResponse.getAggregations().get("histo");
  assertThat(histo,Matchers.notNullValue());
  Histogram.Bucket bucket=histo.getBucketByKey(1l);
  assertThat(bucket,Matchers.notNullValue());
  Nested nested=bucket.getAggregations().get("nested");
  assertThat(nested,Matchers.notNullValue());
  assertThat(nested.getName(),equalTo("nested"));
  assertThat(nested.getDocCount(),is(0l));
}
