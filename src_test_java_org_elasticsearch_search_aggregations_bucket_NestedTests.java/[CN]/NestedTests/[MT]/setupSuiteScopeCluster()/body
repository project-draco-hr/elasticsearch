{
  assertAcked(prepareCreate("idx").addMapping("type","nested","type=nested"));
  List<IndexRequestBuilder> builders=new ArrayList<>();
  numParents=randomIntBetween(3,10);
  numChildren=new int[numParents];
  aggCollectionMode=randomFrom(SubAggCollectionMode.values());
  logger.info("AGG COLLECTION MODE: " + aggCollectionMode);
  int totalChildren=0;
  for (int i=0; i < numParents; ++i) {
    if (i == numParents - 1 && totalChildren == 0) {
      numChildren[i]=randomIntBetween(1,5);
    }
 else {
      numChildren[i]=randomInt(5);
    }
    totalChildren+=numChildren[i];
  }
  assertTrue(totalChildren > 0);
  for (int i=0; i < numParents; i++) {
    XContentBuilder source=jsonBuilder().startObject().field("value",i + 1).startArray("nested");
    for (int j=0; j < numChildren[i]; ++j) {
      source=source.startObject().field("value",i + 1 + j).endObject();
    }
    source=source.endArray().endObject();
    builders.add(client().prepareIndex("idx","type","" + i + 1).setSource(source));
  }
  prepareCreate("empty_bucket_idx").addMapping("type","value","type=integer","nested","type=nested").execute().actionGet();
  for (int i=0; i < 2; i++) {
    builders.add(client().prepareIndex("empty_bucket_idx","type","" + i).setSource(jsonBuilder().startObject().field("value",i * 2).startArray("nested").startObject().field("value",i + 1).endObject().startObject().field("value",i + 2).endObject().startObject().field("value",i + 3).endObject().startObject().field("value",i + 4).endObject().startObject().field("value",i + 5).endObject().endArray().endObject()));
  }
  assertAcked(prepareCreate("idx_nested_nested_aggs").addMapping("type",jsonBuilder().startObject().startObject("type").startObject("properties").startObject("nested1").field("type","nested").startObject("properties").startObject("nested2").field("type","nested").endObject().endObject().endObject().endObject().endObject().endObject()));
  builders.add(client().prepareIndex("idx_nested_nested_aggs","type","1").setSource(jsonBuilder().startObject().startArray("nested1").startObject().field("a","a").startArray("nested2").startObject().field("b",2).endObject().endArray().endObject().startObject().field("a","b").startArray("nested2").startObject().field("b",2).endObject().endArray().endObject().endArray().endObject()));
  indexRandom(true,builders);
  ensureSearchable();
}
