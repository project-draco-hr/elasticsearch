{
  SearchResponse response=client().prepareSearch("idx").addAggregation(nested("nested").path("nested").subAggregation(stats("nested_value_stats").field("nested.value"))).execute().actionGet();
  assertThat(response.getFailedShards(),equalTo(0));
  double min=Double.POSITIVE_INFINITY;
  double max=Double.NEGATIVE_INFINITY;
  long sum=0;
  long count=0;
  for (int i=0; i < numParents; ++i) {
    for (int j=0; j < numChildren[i]; ++j) {
      final long value=i + 1 + j;
      min=Math.min(min,value);
      max=Math.max(max,value);
      sum+=value;
      ++count;
    }
  }
  Nested nested=response.getAggregations().get("nested");
  assertThat(nested,notNullValue());
  assertThat(nested.getName(),equalTo("nested"));
  assertThat(nested.getDocCount(),equalTo(count));
  assertThat(nested.getAggregations().asList().isEmpty(),is(false));
  Stats stats=nested.getAggregations().get("nested_value_stats");
  assertThat(stats,notNullValue());
  assertThat(stats.getMin(),equalTo(min));
  assertThat(stats.getMax(),equalTo(max));
  assertThat(stats.getCount(),equalTo(count));
  assertThat(stats.getSum(),equalTo((double)sum));
  assertThat(stats.getAvg(),equalTo((double)sum / count));
}
