{
  IndexRoutingTable indexRoutingTable=allocation.routingTable().index(allocation.failedShard().index());
  if (indexRoutingTable == null) {
    return false;
  }
  ShardRouting failedShard=allocation.failedShard();
  boolean shardDirty=false;
  boolean inRelocation=failedShard.relocatingNodeId() != null;
  if (inRelocation) {
    RoutingNode routingNode=allocation.routingNodes().nodesToShards().get(failedShard.currentNodeId());
    if (routingNode != null) {
      Iterator<MutableShardRouting> shards=routingNode.iterator();
      while (shards.hasNext()) {
        MutableShardRouting shard=shards.next();
        if (shard.shardId().equals(failedShard.shardId())) {
          shardDirty=true;
          shard.deassignNode();
          shards.remove();
          break;
        }
      }
    }
  }
  String nodeId=inRelocation ? failedShard.relocatingNodeId() : failedShard.currentNodeId();
  RoutingNode currentRoutingNode=allocation.routingNodes().nodesToShards().get(nodeId);
  if (currentRoutingNode == null) {
    return false;
  }
  Iterator<MutableShardRouting> shards=currentRoutingNode.iterator();
  while (shards.hasNext()) {
    MutableShardRouting shard=shards.next();
    if (shard.shardId().equals(failedShard.shardId())) {
      shardDirty=true;
      if (!inRelocation) {
        shard.deassignNode();
        shards.remove();
      }
 else {
        shard.cancelRelocation();
      }
      break;
    }
  }
  if (!shardDirty) {
    return false;
  }
  allocation.addIgnoreShardForNode(failedShard.shardId(),failedShard.currentNodeId());
  if (inRelocation) {
    return true;
  }
  List<MutableShardRouting> shardsToMove=Lists.newArrayList();
  for (Iterator<MutableShardRouting> it=allocation.routingNodes().unassigned().iterator(); it.hasNext(); ) {
    MutableShardRouting shardRouting=it.next();
    if (shardRouting.shardId().equals(failedShard.shardId())) {
      it.remove();
      shardsToMove.add(shardRouting);
    }
  }
  if (!shardsToMove.isEmpty()) {
    allocation.routingNodes().unassigned().addAll(shardsToMove);
  }
  allocation.routingNodes().unassigned().add(new MutableShardRouting(failedShard.index(),failedShard.id(),null,failedShard.primary(),ShardRoutingState.UNASSIGNED,failedShard.version() + 1));
  return true;
}
