{
  boolean changed=false;
  RoutingNodes routingNodes=allocation.routingNodes();
  if (!routingNodes.hasUnassignedPrimaries()) {
    return changed;
  }
  List<ShardRouting> shardsToFail=Lists.newArrayList();
  for (  MutableShardRouting shardEntry : routingNodes.unassigned()) {
    if (shardEntry.primary()) {
      for (      MutableShardRouting routing : routingNodes.assignedShards(shardEntry)) {
        if (!routing.primary() && routing.initializing()) {
          shardsToFail.add(routing);
        }
      }
    }
  }
  for (  ShardRouting shardToFail : shardsToFail) {
    changed|=applyFailedShard(allocation,shardToFail,false);
  }
  for (  MutableShardRouting shardEntry : routingNodes.unassigned()) {
    if (shardEntry.primary()) {
      MutableShardRouting candidate=allocation.routingNodes().activeReplica(shardEntry);
      if (candidate != null) {
        routingNodes.swapPrimaryFlag(shardEntry,candidate);
        if (candidate.relocatingNodeId() != null) {
          changed=true;
          RoutingNode node=routingNodes.node(candidate.relocatingNodeId());
          if (node != null) {
            for (            MutableShardRouting shardRouting : node) {
              if (shardRouting.shardId().equals(candidate.shardId()) && !shardRouting.primary()) {
                routingNodes.swapPrimaryFlag(shardRouting);
                break;
              }
            }
          }
        }
      }
    }
  }
  return changed;
}
