{
  while (running) {
    MappingUpdateListener listener=null;
    try {
      final MappingChange change=queue.poll(10,TimeUnit.MINUTES);
      if (change == null) {
        continue;
      }
      listener=change.listener;
      final MappingUpdatedAction.MappingUpdatedRequest mappingRequest;
      try {
        DiscoveryNode node=clusterService.localNode();
        mappingRequest=new MappingUpdatedAction.MappingUpdatedRequest(change.index,change.indexUUID,change.type,change.mappingSource,node != null ? node.id() : null);
      }
 catch (      Throwable t) {
        logger.warn("Failed to update master on updated mapping for index [" + change.index + "], type ["+ change.type+ "]",t);
        if (change.listener != null) {
          change.listener.onFailure(t);
        }
        continue;
      }
      logger.trace("sending mapping updated to master: {}",mappingRequest);
      execute(mappingRequest,new ActionListener<MappingUpdatedAction.MappingUpdatedResponse>(){
        @Override public void onResponse(        MappingUpdatedAction.MappingUpdatedResponse mappingUpdatedResponse){
          logger.debug("successfully updated master with mapping update: {}",mappingRequest);
          if (change.listener != null) {
            change.listener.onMappingUpdate();
          }
        }
        @Override public void onFailure(        Throwable e){
          logger.warn("failed to update master on updated mapping for {}",e,mappingRequest);
          if (change.listener != null) {
            change.listener.onFailure(e);
          }
        }
      }
);
    }
 catch (    Throwable t) {
      if (listener != null) {
        listener.onFailure(t);
      }
      if (t instanceof InterruptedException && !running) {
      }
 else {
        logger.warn("failed to process mapping update",t);
      }
    }
  }
}
