{
  AtomicReader reader=context.reader();
  Terms terms=reader.terms(getFieldNames().indexName());
  if (terms == null) {
    return DoubleArrayAtomicFieldData.EMPTY;
  }
  final TDoubleArrayList values=new TDoubleArrayList();
  values.add(0);
  final float acceptableOverheadRatio=fieldDataType.getSettings().getAsFloat("acceptable_overhead_ratio",PackedInts.DEFAULT);
  OrdinalsBuilder builder=new OrdinalsBuilder(terms,reader.maxDoc(),acceptableOverheadRatio);
  try {
    final BytesRefIterator iter=builder.buildFromTerms(getNumericType().wrapTermsEnum(terms.iterator(null)),reader.getLiveDocs());
    BytesRef term;
    while ((term=iter.next()) != null) {
      values.add(NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(term)));
    }
    Ordinals build=builder.build(fieldDataType.getSettings());
    if (!build.isMultiValued() && CommonSettings.removeOrdsOnSingleValue(fieldDataType)) {
      Docs ordinals=build.ordinals();
      final FixedBitSet set=builder.buildDocsWithValuesSet();
      long singleValuesArraySize=reader.maxDoc() * RamUsage.NUM_BYTES_DOUBLE + (set == null ? 0 : set.getBits().length * RamUsage.NUM_BYTES_LONG + RamUsage.NUM_BYTES_INT);
      long uniqueValuesArraySize=values.size() * RamUsage.NUM_BYTES_DOUBLE;
      long ordinalsSize=build.getMemorySizeInBytes();
      if (uniqueValuesArraySize + ordinalsSize < singleValuesArraySize) {
        return new DoubleArrayAtomicFieldData.WithOrdinals(values.toArray(new double[values.size()]),reader.maxDoc(),build);
      }
      double[] sValues=new double[reader.maxDoc()];
      int maxDoc=reader.maxDoc();
      for (int i=0; i < maxDoc; i++) {
        sValues[i]=values.get(ordinals.getOrd(i));
      }
      if (set == null) {
        return new DoubleArrayAtomicFieldData.Single(sValues,reader.maxDoc());
      }
 else {
        return new DoubleArrayAtomicFieldData.SingleFixedSet(sValues,reader.maxDoc(),set);
      }
    }
 else {
      return new DoubleArrayAtomicFieldData.WithOrdinals(values.toArray(new double[values.size()]),reader.maxDoc(),build);
    }
  }
  finally {
    builder.close();
  }
}
