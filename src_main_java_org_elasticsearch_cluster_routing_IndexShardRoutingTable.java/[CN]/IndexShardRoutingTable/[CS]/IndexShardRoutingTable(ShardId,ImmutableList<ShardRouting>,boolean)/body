{
  this.shardId=shardId;
  this.shards=shards;
  this.allocatedPostApi=allocatedPostApi;
  this.counter=new AtomicInteger(ThreadLocalRandom.current().nextInt(shards.size()));
  ShardRouting primary=null;
  List<ShardRouting> replicas=new ArrayList<ShardRouting>();
  List<ShardRouting> activeShards=new ArrayList<ShardRouting>();
  List<ShardRouting> assignedShards=new ArrayList<ShardRouting>();
  for (  ShardRouting shard : shards) {
    if (shard.primary()) {
      primary=shard;
    }
 else {
      replicas.add(shard);
    }
    if (shard.active()) {
      activeShards.add(shard);
    }
    if (shard.assignedToNode()) {
      assignedShards.add(shard);
    }
  }
  this.primary=primary;
  if (primary != null) {
    this.primaryAsList=ImmutableList.of(primary);
  }
 else {
    this.primaryAsList=ImmutableList.of();
  }
  this.replicas=ImmutableList.copyOf(replicas);
  this.activeShards=ImmutableList.copyOf(activeShards);
  this.assignedShards=ImmutableList.copyOf(assignedShards);
}
