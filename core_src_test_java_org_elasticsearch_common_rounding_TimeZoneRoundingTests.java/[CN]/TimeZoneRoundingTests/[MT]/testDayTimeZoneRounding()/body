{
  int timezoneOffset=-2;
  Rounding tzRounding=TimeZoneRounding.builder(DateTimeUnit.DAY_OF_MONTH).timeZone(DateTimeZone.forOffsetHours(timezoneOffset)).build();
  assertThat(tzRounding.round(0),equalTo(0L - TimeValue.timeValueHours(24 + timezoneOffset).millis()));
  assertThat(tzRounding.nextRoundingValue(0L - TimeValue.timeValueHours(24 + timezoneOffset).millis()),equalTo(0L - TimeValue.timeValueHours(timezoneOffset).millis()));
  DateTimeZone tz=DateTimeZone.forID("-08:00");
  tzRounding=TimeZoneRounding.builder(DateTimeUnit.DAY_OF_MONTH).timeZone(tz).build();
  assertThat(tzRounding.round(time("2012-04-01T04:15:30Z")),isDate(time("2012-03-31T08:00:00Z"),tz));
  tzRounding=TimeZoneRounding.builder(DateTimeUnit.MONTH_OF_YEAR).timeZone(tz).build();
  assertThat(tzRounding.round(time("2012-04-01T04:15:30Z")),equalTo(time("2012-03-01T08:00:00Z")));
  tz=DateTimeZone.forID("-02:00");
  tzRounding=TimeZoneRounding.builder(DateTimeUnit.DAY_OF_MONTH).timeZone(tz).build();
  assertThat(tzRounding.round(time("2009-02-03T01:01:01")),isDate(time("2009-02-02T02:00:00"),tz));
  assertThat(tzRounding.nextRoundingValue(time("2009-02-02T02:00:00")),isDate(time("2009-02-03T02:00:00"),tz));
  tzRounding=TimeZoneRounding.builder(DateTimeUnit.DAY_OF_MONTH).timeZone(tz).build();
  assertThat(tzRounding.round(time("2009-02-03T02:01:01")),isDate(time("2009-02-03T02:00:00"),tz));
  assertThat(tzRounding.nextRoundingValue(time("2009-02-03T02:00:00")),isDate(time("2009-02-04T02:00:00"),tz));
}
