{
  long interval=TimeUnit.MINUTES.toMillis(45);
  DateTimeZone tz=DateTimeZone.forID("CET");
  TimeZoneRounding rounding=new TimeZoneRounding.TimeIntervalRounding(interval,tz);
  List<Tuple<String,String>> expectedDates=new ArrayList<Tuple<String,String>>();
  expectedDates.add(new Tuple<>("2011-10-30T01:40:00.000+02:00","2011-10-30T01:30:00.000+02:00"));
  expectedDates.add(new Tuple<>("2011-10-30T02:02:30.000+02:00","2011-10-30T01:30:00.000+02:00"));
  expectedDates.add(new Tuple<>("2011-10-30T02:25:00.000+02:00","2011-10-30T02:15:00.000+02:00"));
  expectedDates.add(new Tuple<>("2011-10-30T02:47:30.000+02:00","2011-10-30T02:15:00.000+02:00"));
  expectedDates.add(new Tuple<>("2011-10-30T02:10:00.000+01:00","2011-10-30T02:15:00.000+02:00"));
  expectedDates.add(new Tuple<>("2011-10-30T02:32:30.000+01:00","2011-10-30T02:15:00.000+01:00"));
  expectedDates.add(new Tuple<>("2011-10-30T02:55:00.000+01:00","2011-10-30T02:15:00.000+01:00"));
  expectedDates.add(new Tuple<>("2011-10-30T03:17:30.000+01:00","2011-10-30T03:00:00.000+01:00"));
  long previousDate=Long.MIN_VALUE;
  for (  Tuple<String,String> dates : expectedDates) {
    final long roundedDate=rounding.round(time(dates.v1()));
    assertThat(roundedDate,isDate(time(dates.v2()),tz));
    assertThat(roundedDate,greaterThanOrEqualTo(previousDate));
    previousDate=roundedDate;
  }
  assertEquals(TimeUnit.MINUTES.toMillis(45),time("2011-10-30T02:15:00.000+02:00") - time("2011-10-30T01:30:00.000+02:00"));
  assertEquals(TimeUnit.MINUTES.toMillis(60),time("2011-10-30T02:15:00.000+01:00") - time("2011-10-30T02:15:00.000+02:00"));
  assertEquals(TimeUnit.MINUTES.toMillis(45),time("2011-10-30T03:00:00.000+01:00") - time("2011-10-30T02:15:00.000+01:00"));
}
