{
  Rounding tzRounding;
  DateTimeZone cet=DateTimeZone.forID("CET");
  tzRounding=TimeZoneRounding.builder(DateTimeUnit.HOUR_OF_DAY).timeZone(cet).build();
  assertThat(tzRounding.round(time("2014-10-26T01:01:01",cet)),isDate(time("2014-10-26T01:00:00+02:00"),cet));
  assertThat(tzRounding.nextRoundingValue(time("2014-10-26T01:00:00",cet)),isDate(time("2014-10-26T02:00:00+02:00"),cet));
  assertThat(tzRounding.nextRoundingValue(time("2014-10-26T02:00:00",cet)),isDate(time("2014-10-26T02:00:00+01:00"),cet));
  tzRounding=TimeZoneRounding.builder(DateTimeUnit.HOUR_OF_DAY).timeZone(cet).build();
  assertThat(tzRounding.round(time("2014-03-30T01:01:01",cet)),isDate(time("2014-03-30T01:00:00+01:00"),cet));
  assertThat(tzRounding.nextRoundingValue(time("2014-03-30T01:00:00",cet)),isDate(time("2014-03-30T03:00:00",cet),cet));
  assertThat(tzRounding.nextRoundingValue(time("2014-03-30T03:00:00",cet)),isDate(time("2014-03-30T04:00:00",cet),cet));
  DateTimeZone chg=DateTimeZone.forID("America/Chicago");
  Rounding tzRounding_utc=TimeZoneRounding.builder(DateTimeUnit.HOUR_OF_DAY).timeZone(DateTimeZone.UTC).build();
  assertThat(tzRounding.round(time("2014-03-09T03:01:01",chg)),isDate(time("2014-03-09T03:00:00",chg),chg));
  Rounding tzRounding_chg=TimeZoneRounding.builder(DateTimeUnit.HOUR_OF_DAY).timeZone(chg).build();
  assertThat(tzRounding_chg.round(time("2014-03-09T03:01:01",chg)),isDate(time("2014-03-09T03:00:00",chg),chg));
  assertThat(tzRounding_utc.round(time("2013-11-03T06:01:01",chg)),isDate(time("2013-11-03T06:00:00",chg),chg));
  assertThat(tzRounding_chg.round(time("2013-11-03T06:01:01",chg)),isDate(time("2013-11-03T06:00:00",chg),chg));
  assertThat(tzRounding_utc.round(time("2014-11-02T06:01:01",chg)),isDate(time("2014-11-02T06:00:00",chg),chg));
  assertThat(tzRounding_chg.round(time("2014-11-02T06:01:01",chg)),isDate(time("2014-11-02T06:00:00",chg),chg));
}
