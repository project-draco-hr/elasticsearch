{
  for (int i=0; i < 1000; ++i) {
    DateTimeUnit timeUnit=randomTimeUnit();
    DateTimeZone timezone=randomDateTimeZone();
    TimeZoneRounding rounding=new TimeZoneRounding.TimeUnitRounding(timeUnit,timezone);
    long date=Math.abs(randomLong() % (2 * (long)10e11));
    long unitMillis=timeUnit.field(timezone).getDurationField().getUnitMillis();
    if (randomBoolean()) {
      nastyDate(date,timezone,unitMillis);
    }
    final long roundedDate=rounding.round(date);
    final long nextRoundingValue=rounding.nextRoundingValue(roundedDate);
    assertInterval(roundedDate,date,nextRoundingValue,rounding);
    if (unitMillis <= DateTimeConstants.MILLIS_PER_DAY) {
      if (timezone.getOffset(roundedDate - 1) == timezone.getOffset(nextRoundingValue + 1)) {
        assertThat("unit interval width not as expected for [" + timeUnit + "], ["+ timezone+ "] at "+ new DateTime(roundedDate),nextRoundingValue - roundedDate,equalTo(unitMillis));
      }
    }
  }
}
