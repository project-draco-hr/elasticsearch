{
  Rounding tzRounding;
  final DateTimeZone tz=DateTimeZone.forID("Asia/Jerusalem");
  tzRounding=Rounding.builder(DateTimeUnit.HOUR_OF_DAY).timeZone(tz).build();
  assertThat(tzRounding.round(time("2014-10-26T00:30:00+03:00")),isDate(time("2014-10-26T00:00:00+03:00"),tz));
  assertThat(tzRounding.round(time("2014-10-26T01:30:00+03:00")),isDate(time("2014-10-26T01:00:00+03:00"),tz));
  assertThat(time("2014-10-26T03:00:00+03:00"),isDate(time("2014-10-26T02:00:00+02:00"),tz));
  assertThat(tzRounding.round(time("2014-10-26T01:30:00+02:00")),isDate(time("2014-10-26T01:00:00+02:00"),tz));
  assertThat(tzRounding.round(time("2014-10-26T02:30:00+02:00")),isDate(time("2014-10-26T02:00:00+02:00"),tz));
  tzRounding=Rounding.builder(DateTimeUnit.DAY_OF_MONTH).timeZone(tz).build();
  assertThat(tzRounding.round(time("2014-11-11T17:00:00",tz)),isDate(time("2014-11-11T00:00:00",tz),tz));
  assertThat(tzRounding.round(time("2014-08-11T17:00:00",tz)),isDate(time("2014-08-11T00:00:00",tz),tz));
  assertThat(tzRounding.round(time("2014-10-26T17:00:00",tz)),isDate(time("2014-10-26T00:00:00",tz),tz));
  assertThat(tzRounding.round(time("2015-03-27T17:00:00",tz)),isDate(time("2015-03-27T00:00:00",tz),tz));
  tzRounding=Rounding.builder(DateTimeUnit.MONTH_OF_YEAR).timeZone(tz).build();
  assertThat(tzRounding.round(time("2014-11-11T17:00:00",tz)),isDate(time("2014-11-01T00:00:00",tz),tz));
  assertThat(tzRounding.round(time("2014-10-10T17:00:00",tz)),isDate(time("2014-10-01T00:00:00",tz),tz));
  tzRounding=Rounding.builder(DateTimeUnit.YEAR_OF_CENTURY).timeZone(tz).build();
  assertThat(tzRounding.round(time("2014-11-11T17:00:00",tz)),isDate(time("2014-01-01T00:00:00",tz),tz));
  tzRounding=Rounding.builder(DateTimeUnit.YEAR_OF_CENTURY).timeZone(tz).build();
  assertThat(tzRounding.round(time("2014-11-11T17:00:00",tz)),isDate(tzRounding.round(time("2014-08-11T17:00:00",tz)),tz));
}
