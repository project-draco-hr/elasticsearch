{
  try {
    XContentBuilder builder=XContentFactory.jsonBuilder();
    builder.startObject();
    if (type != null) {
      builder.startObject(type);
    }
    for (int i=0; i < source.length; i++) {
      String fieldName=source[i++].toString();
      if (RESERVED_FIELDS.contains(fieldName)) {
        builder.startObject(fieldName);
        String[] s1=Strings.splitStringByCommaToArray(source[i].toString());
        for (        String s : s1) {
          String[] s2=Strings.split(s,"=");
          if (s2.length != 2) {
            throw new ElasticsearchIllegalArgumentException("malformed " + s);
          }
          builder.field(s2[0],s2[1]);
        }
        builder.endObject();
      }
    }
    builder.startObject("properties");
    for (int i=0; i < source.length; i++) {
      String fieldName=source[i++].toString();
      if (RESERVED_FIELDS.contains(fieldName)) {
        continue;
      }
      builder.startObject(fieldName);
      String[] s1=Strings.splitStringByCommaToArray(source[i].toString());
      for (      String s : s1) {
        String[] s2=Strings.split(s,"=");
        if (s2.length != 2) {
          throw new ElasticsearchIllegalArgumentException("malformed " + s);
        }
        builder.field(s2[0],s2[1]);
      }
      builder.endObject();
    }
    builder.endObject();
    if (type != null) {
      builder.endObject();
    }
    builder.endObject();
    return builder;
  }
 catch (  Exception e) {
    throw new ElasticsearchIllegalArgumentException("failed to generate simplified mapping definition",e);
  }
}
