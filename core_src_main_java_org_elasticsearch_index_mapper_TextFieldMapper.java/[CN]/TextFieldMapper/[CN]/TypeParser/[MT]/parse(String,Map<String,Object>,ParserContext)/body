{
  TextFieldMapper.Builder builder=new TextFieldMapper.Builder(fieldName);
  builder.fieldType().setIndexAnalyzer(parserContext.analysisService().defaultIndexAnalyzer());
  builder.fieldType().setSearchAnalyzer(parserContext.analysisService().defaultSearchAnalyzer());
  builder.fieldType().setSearchQuoteAnalyzer(parserContext.analysisService().defaultSearchQuoteAnalyzer());
  parseTextField(builder,fieldName,node,parserContext);
  for (Iterator<Map.Entry<String,Object>> iterator=node.entrySet().iterator(); iterator.hasNext(); ) {
    Map.Entry<String,Object> entry=iterator.next();
    String propName=entry.getKey();
    Object propNode=entry.getValue();
    if (propName.equals("position_increment_gap")) {
      int newPositionIncrementGap=XContentMapValues.nodeIntegerValue(propNode,-1);
      builder.positionIncrementGap(newPositionIncrementGap);
      iterator.remove();
    }
 else     if (propName.equals("fielddata")) {
      builder.fielddata(XContentMapValues.nodeBooleanValue(propNode));
      iterator.remove();
    }
 else     if (propName.equals("eager_global_ordinals")) {
      builder.eagerGlobalOrdinals(XContentMapValues.nodeBooleanValue(propNode));
      iterator.remove();
    }
 else     if (propName.equals("fielddata_frequency_filter")) {
      Map<?,?> frequencyFilter=(Map<?,?>)propNode;
      double minFrequency=XContentMapValues.nodeDoubleValue(frequencyFilter.remove("min"),0);
      double maxFrequency=XContentMapValues.nodeDoubleValue(frequencyFilter.remove("max"),Integer.MAX_VALUE);
      int minSegmentSize=XContentMapValues.nodeIntegerValue(frequencyFilter.remove("min_segment_size"),0);
      builder.fielddataFrequencyFilter(minFrequency,maxFrequency,minSegmentSize);
      DocumentMapperParser.checkNoRemainingFields(propName,frequencyFilter,parserContext.indexVersionCreated());
      iterator.remove();
    }
  }
  return builder;
}
