{
  if (parserContext.indexVersionCreated().before(Version.V_5_0_0_alpha1)) {
    Set<String> unsupportedParameters=new HashSet<>(node.keySet());
    unsupportedParameters.removeAll(SUPPORTED_PARAMETERS_FOR_AUTO_DOWNGRADE_TO_STRING);
    if (false == SUPPORTED_PARAMETERS_FOR_AUTO_DOWNGRADE_TO_STRING.containsAll(node.keySet())) {
      throw new IllegalArgumentException("Automatic downgrade from [text] to [string] failed because parameters " + unsupportedParameters + " are not supported for automatic downgrades.");
    }
{
      Object index=node.get("index");
      if (index == null || Boolean.TRUE.equals(index)) {
        index="analyzed";
      }
 else       if (Boolean.FALSE.equals(index)) {
        index="no";
      }
 else {
        throw new IllegalArgumentException("Can't parse [index] value [" + index + "] for field ["+ fieldName+ "], expected [true] or [false]");
      }
      node.put("index",index);
    }
{
      Object fielddata=node.get("fielddata");
      if (fielddata == null || Boolean.FALSE.equals(fielddata)) {
        fielddata=false;
      }
 else       if (Boolean.TRUE.equals(fielddata)) {
        fielddata=true;
      }
 else {
        throw new IllegalArgumentException("can't parse [fielddata] value for [" + fielddata + "] for field ["+ fieldName+ "], expected [true] or [false]");
      }
      node.put("fielddata",fielddata);
    }
    return new StringFieldMapper.TypeParser().parse(fieldName,node,parserContext);
  }
  TextFieldMapper.Builder builder=new TextFieldMapper.Builder(fieldName);
  builder.fieldType().setIndexAnalyzer(parserContext.analysisService().defaultIndexAnalyzer());
  builder.fieldType().setSearchAnalyzer(parserContext.analysisService().defaultSearchAnalyzer());
  builder.fieldType().setSearchQuoteAnalyzer(parserContext.analysisService().defaultSearchQuoteAnalyzer());
  parseTextField(builder,fieldName,node,parserContext);
  for (Iterator<Map.Entry<String,Object>> iterator=node.entrySet().iterator(); iterator.hasNext(); ) {
    Map.Entry<String,Object> entry=iterator.next();
    String propName=entry.getKey();
    Object propNode=entry.getValue();
    if (propName.equals("position_increment_gap")) {
      int newPositionIncrementGap=XContentMapValues.nodeIntegerValue(propNode,-1);
      builder.positionIncrementGap(newPositionIncrementGap);
      iterator.remove();
    }
 else     if (propName.equals("fielddata")) {
      builder.fielddata(XContentMapValues.nodeBooleanValue(propNode));
      iterator.remove();
    }
 else     if (propName.equals("eager_global_ordinals")) {
      builder.eagerGlobalOrdinals(XContentMapValues.nodeBooleanValue(propNode));
      iterator.remove();
    }
 else     if (propName.equals("fielddata_frequency_filter")) {
      Map<?,?> frequencyFilter=(Map<?,?>)propNode;
      double minFrequency=XContentMapValues.nodeDoubleValue(frequencyFilter.remove("min"),0);
      double maxFrequency=XContentMapValues.nodeDoubleValue(frequencyFilter.remove("max"),Integer.MAX_VALUE);
      int minSegmentSize=XContentMapValues.nodeIntegerValue(frequencyFilter.remove("min_segment_size"),0);
      builder.fielddataFrequencyFilter(minFrequency,maxFrequency,minSegmentSize);
      DocumentMapperParser.checkNoRemainingFields(propName,frequencyFilter,parserContext.indexVersionCreated());
      iterator.remove();
    }
  }
  return builder;
}
