{
  Class<?> testClass=null;
  Class<?> integTestClass=null;
  Path rootPath=null;
  boolean skipIntegTestsInDisguise=false;
  boolean selfTest=false;
  for (int i=0; i < args.length; i++) {
    String arg=args[i];
switch (arg) {
case "--test-class":
      testClass=loadClassWithoutInitializing(args[++i]);
    break;
case "--integ-test-class":
  integTestClass=loadClassWithoutInitializing(args[++i]);
break;
case "--skip-integ-tests-in-disguise":
skipIntegTestsInDisguise=true;
break;
case "--self-test":
selfTest=true;
break;
case "--":
rootPath=Paths.get(args[++i]);
break;
default :
fail("unsupported argument '" + arg + "'");
}
}
NamingConventionsCheck check=new NamingConventionsCheck(testClass,integTestClass);
check.check(rootPath,skipIntegTestsInDisguise);
if (selfTest) {
assertViolation("WrongName",check.missingSuffix);
assertViolation("WrongNameTheSecond",check.missingSuffix);
assertViolation("DummyAbstractTests",check.notRunnable);
assertViolation("DummyInterfaceTests",check.notRunnable);
assertViolation("InnerTests",check.innerClasses);
assertViolation("NotImplementingTests",check.notImplementing);
assertViolation("PlainUnit",check.pureUnitTest);
}
assertNoViolations("Not all subclasses of " + check.testClass.getSimpleName() + " match the naming convention. Concrete classes must end with [Tests]",check.missingSuffix);
assertNoViolations("Classes ending with [Tests] are abstract or interfaces",check.notRunnable);
assertNoViolations("Found inner classes that are tests, which are excluded from the test runner",check.innerClasses);
assertNoViolations("Pure Unit-Test found must subclass [" + check.testClass.getSimpleName() + "]",check.pureUnitTest);
assertNoViolations("Classes ending with [Tests] must subclass [" + check.testClass.getSimpleName() + "]",check.notImplementing);
if (skipIntegTestsInDisguise == false) {
assertNoViolations("Subclasses of " + check.integTestClass.getSimpleName() + " should end with IT as they are integration tests",check.integTestsInDisguise);
}
}
