{
  Files.walkFileTree(rootPath,new FileVisitor<Path>(){
    /** 
 * The package name of the directory we are currently visiting. Kept as a string rather than something fancy because we load
 * just about every class and doing so requires building a string out of it anyway. At least this way we don't need to build the
 * first part of the string over and over and over again.
 */
    private String packageName;
    @Override public FileVisitResult preVisitDirectory(    Path dir,    BasicFileAttributes attrs) throws IOException {
      if (packageName == null) {
        packageName="";
      }
 else {
        packageName+=dir.getFileName() + ".";
      }
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult postVisitDirectory(    Path dir,    IOException exc) throws IOException {
      packageName=packageName.substring(0,1 + packageName.lastIndexOf('.',packageName.length() - 2));
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {
      String filename=file.getFileName().toString();
      if (filename.endsWith(".class")) {
        String className=filename.substring(0,filename.length() - ".class".length());
        Class<?> clazz=loadClassWithoutInitializing(packageName + className);
        if (clazz.getName().endsWith("Tests")) {
          if (integTestClass.isAssignableFrom(clazz)) {
            integTestsInDisguise.add(clazz);
          }
          if (Modifier.isAbstract(clazz.getModifiers()) || Modifier.isInterface(clazz.getModifiers())) {
            notRunnable.add(clazz);
          }
 else           if (isTestCase(clazz) == false) {
            notImplementing.add(clazz);
          }
 else           if (Modifier.isStatic(clazz.getModifiers())) {
            innerClasses.add(clazz);
          }
        }
 else         if (clazz.getName().endsWith("IT")) {
          if (isTestCase(clazz) == false) {
            notImplementing.add(clazz);
          }
        }
 else         if (Modifier.isAbstract(clazz.getModifiers()) == false && Modifier.isInterface(clazz.getModifiers()) == false) {
          if (isTestCase(clazz)) {
            missingSuffix.add(clazz);
          }
 else           if (junit.framework.Test.class.isAssignableFrom(clazz)) {
            pureUnitTest.add(clazz);
          }
        }
      }
      return FileVisitResult.CONTINUE;
    }
    private boolean isTestCase(    Class<?> clazz){
      return testClass.isAssignableFrom(clazz);
    }
    @Override public FileVisitResult visitFileFailed(    Path file,    IOException exc) throws IOException {
      throw exc;
    }
  }
);
}
