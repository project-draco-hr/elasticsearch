{
  if (temporarilyMarked.contains(factory)) {
    throw new IllegalArgumentException("Cyclical dependancy found with pipeline aggregator [" + factory.getName() + "]");
  }
 else   if (unmarkedFactories.contains(factory)) {
    temporarilyMarked.add(factory);
    String[] bucketsPaths=factory.getBucketsPaths();
    for (    String bucketsPath : bucketsPaths) {
      List<AggregationPath.PathElement> bucketsPathElements=AggregationPath.parse(bucketsPath).getPathElements();
      String firstAggName=bucketsPathElements.get(0).name;
      if (bucketsPath.equals("_count") || bucketsPath.equals("_key")) {
        continue;
      }
 else       if (aggFactoriesMap.containsKey(firstAggName)) {
        AggregatorBuilder<?> aggFactory=aggFactoriesMap.get(firstAggName);
        for (int i=1; i < bucketsPathElements.size(); i++) {
          PathElement pathElement=bucketsPathElements.get(i);
          String aggName=pathElement.name;
          if ((i == bucketsPathElements.size() - 1) && (aggName.equalsIgnoreCase("_key") || aggName.equals("_count"))) {
            break;
          }
 else {
            AggregatorBuilder<?>[] subFactories=aggFactory.factoriesBuilder.getAggregatorFactories();
            boolean foundSubFactory=false;
            for (            AggregatorBuilder<?> subFactory : subFactories) {
              if (aggName.equals(subFactory.name)) {
                aggFactory=subFactory;
                foundSubFactory=true;
                break;
              }
            }
            if (!foundSubFactory && (i == bucketsPathElements.size() - 1)) {
              List<PipelineAggregatorBuilder<?>> subPipelineFactories=aggFactory.factoriesBuilder.pipelineAggregatorFactories;
              for (              PipelineAggregatorBuilder<?> subFactory : subPipelineFactories) {
                if (aggName.equals(subFactory.name())) {
                  foundSubFactory=true;
                  break;
                }
              }
            }
            if (!foundSubFactory) {
              throw new IllegalArgumentException("No aggregation [" + aggName + "] found for path ["+ bucketsPath+ "]");
            }
          }
        }
        continue;
      }
 else {
        PipelineAggregatorBuilder<?> matchingFactory=pipelineAggregatorFactoriesMap.get(firstAggName);
        if (matchingFactory != null) {
          resolvePipelineAggregatorOrder(aggFactoriesMap,pipelineAggregatorFactoriesMap,orderedPipelineAggregators,unmarkedFactories,temporarilyMarked,matchingFactory);
        }
 else {
          throw new IllegalArgumentException("No aggregation found for path [" + bucketsPath + "]");
        }
      }
    }
    unmarkedFactories.remove(factory);
    temporarilyMarked.remove(factory);
    orderedPipelineAggregators.add(factory);
  }
}
