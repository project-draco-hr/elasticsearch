{
  SSLConnectionSocketFactory sslsf;
  String keystorePath=settings.get(TRUSTSTORE_PATH);
  if (keystorePath != null) {
    final String keystorePass=settings.get(TRUSTSTORE_PASSWORD);
    if (keystorePass == null) {
      throw new IllegalStateException(TRUSTSTORE_PATH + " is provided but not " + TRUSTSTORE_PASSWORD);
    }
    Path path=PathUtils.get(keystorePath);
    if (!Files.exists(path)) {
      throw new IllegalStateException(TRUSTSTORE_PATH + " is set but points to a non-existing file");
    }
    try {
      KeyStore keyStore=KeyStore.getInstance("jks");
      try (InputStream is=Files.newInputStream(path)){
        keyStore.load(is,keystorePass.toCharArray());
      }
       SSLContext sslcontext=SSLContexts.custom().loadTrustMaterial(keyStore,null).build();
      sslsf=new SSLConnectionSocketFactory(sslcontext,StrictHostnameVerifier.INSTANCE);
    }
 catch (    KeyStoreException|NoSuchAlgorithmException|KeyManagementException|CertificateException e) {
      throw new RuntimeException(e);
    }
  }
 else {
    sslsf=SSLConnectionSocketFactory.getSocketFactory();
  }
  Registry<ConnectionSocketFactory> socketFactoryRegistry=RegistryBuilder.<ConnectionSocketFactory>create().register("http",PlainConnectionSocketFactory.getSocketFactory()).register("https",sslsf).build();
  return HttpClients.createMinimal(new PoolingHttpClientConnectionManager(socketFactoryRegistry,null,null,null,15,TimeUnit.SECONDS));
}
