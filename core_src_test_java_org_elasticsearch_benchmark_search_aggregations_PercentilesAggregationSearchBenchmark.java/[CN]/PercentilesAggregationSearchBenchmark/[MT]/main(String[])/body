{
  Settings settings=settingsBuilder().put("index.refresh_interval","-1").put(SETTING_NUMBER_OF_SHARDS,100).put(SETTING_NUMBER_OF_REPLICAS,0).build();
  Node[] nodes=new Node[1];
  for (int i=0; i < nodes.length; i++) {
    nodes[i]=nodeBuilder().clusterName(CLUSTER_NAME).settings(settingsBuilder().put(settings).put("name","node" + i)).node();
  }
  Node clientNode=nodeBuilder().clusterName(CLUSTER_NAME).settings(settingsBuilder().put(settings).put("name","client")).client(true).node();
  Client client=clientNode.client();
  for (  Distribution d : Distribution.values()) {
    try {
      client.admin().indices().create(createIndexRequest(d.indexName()).settings(settings)).actionGet();
    }
 catch (    Exception e) {
      System.out.println("Index " + d.indexName() + " already exists, skipping index creation");
      continue;
    }
    final int[] values=new int[NUM_DOCS];
    for (int i=0; i < NUM_DOCS; ++i) {
      values[i]=d.next();
    }
    System.out.println("Indexing " + NUM_DOCS + " documents into "+ d.indexName());
    StopWatch stopWatch=new StopWatch().start();
    for (int i=0; i < NUM_DOCS; ) {
      BulkRequestBuilder request=client.prepareBulk();
      for (int j=0; j < BATCH && i < NUM_DOCS; ++j) {
        request.add(client.prepareIndex(d.indexName(),"values",Integer.toString(i)).setSource("v",values[i]));
        ++i;
      }
      BulkResponse response=request.execute().actionGet();
      if (response.hasFailures()) {
        System.err.println("--> failures...");
        System.err.println(response.buildFailureMessage());
      }
      if ((i % 100000) == 0) {
        System.out.println("--> Indexed " + i + " took "+ stopWatch.stop().lastTaskTime());
        stopWatch.start();
      }
    }
    Arrays.sort(values);
    XContentBuilder builder=JsonXContent.contentBuilder().startObject();
    for (    double percentile : PERCENTILES) {
      builder.field(Double.toString(percentile),accuratePercentile(percentile,values));
    }
    client.prepareIndex(d.indexName(),"values","percentiles").setSource(builder.endObject()).execute().actionGet();
    client.admin().indices().prepareRefresh(d.indexName()).execute().actionGet();
  }
  ClusterHealthResponse clusterHealthResponse=client.admin().cluster().prepareHealth().setWaitForGreenStatus().setTimeout("10m").execute().actionGet();
  if (clusterHealthResponse.isTimedOut()) {
    System.err.println("--> Timed out waiting for cluster health");
  }
  System.out.println("## Precision");
  for (  Distribution d : Distribution.values()) {
    System.out.println("#### " + d);
    final long count=client.prepareSearch(d.indexName()).setSize(0).setQuery(matchAllQuery()).execute().actionGet().getHits().totalHits();
    if (count != NUM_DOCS + 1) {
      throw new Error("Expected " + NUM_DOCS + " documents, got "+ (count - 1));
    }
    Map<String,Object> percentilesUnsorted=client.get(getRequest(d.indexName()).type("values").id("percentiles")).actionGet().getSourceAsMap();
    SortedMap<Double,Double> percentiles=new TreeMap<>();
    for (    Map.Entry<String,Object> entry : percentilesUnsorted.entrySet()) {
      percentiles.put(Double.parseDouble(entry.getKey()),(Double)entry.getValue());
    }
    System.out.println("Expected percentiles: " + percentiles);
    System.out.println();
    SearchResponse resp=client.prepareSearch(d.indexName()).setSize(0).addAggregation(percentiles("pcts").field("v").percentiles(PERCENTILES)).execute().actionGet();
    Percentiles pcts=resp.getAggregations().get("pcts");
    Map<Double,Double> asMap=new LinkedHashMap<>();
    double sumOfErrorSquares=0;
    for (    Percentile percentile : pcts) {
      asMap.put(percentile.getPercent(),percentile.getValue());
      double error=percentile.getValue() - percentiles.get(percentile.getPercent());
      sumOfErrorSquares+=error * error;
    }
    System.out.println("Percentiles: " + asMap);
    System.out.println("Sum of error squares: " + sumOfErrorSquares);
    System.out.println();
  }
  System.out.println("## Performance");
  for (int i=0; i < 3; ++i) {
    for (    Distribution d : Distribution.values()) {
      System.out.println("#### " + d);
      for (int j=0; j < QUERY_WARMUP; ++j) {
        client.prepareSearch(d.indexName()).setSize(0).addAggregation(percentiles("pcts").field("v").percentiles(PERCENTILES)).execute().actionGet();
      }
      long start=System.nanoTime();
      for (int j=0; j < QUERY_COUNT; ++j) {
        client.prepareSearch(d.indexName()).setSize(0).addAggregation(percentiles("pcts").field("v").percentiles(PERCENTILES)).execute().actionGet();
      }
      System.out.println(new TimeValue((System.nanoTime() - start) / QUERY_COUNT,TimeUnit.NANOSECONDS));
    }
  }
}
