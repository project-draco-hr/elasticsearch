{
  int chafPerShard=100;
  CreateIndexRequestBuilder builder=prepareCreate("test").setSettings(Settings.builder().put(indexSettings()).put("index.analysis.analyzer.body.tokenizer","standard").putArray("index.analysis.analyzer.body.filter","lowercase","my_shingle").put("index.analysis.filter.my_shingle.type","shingle").put("index.analysis.filter.my_shingle.output_unigrams",true).put("index.analysis.filter.my_shingle.min_shingle_size",2).put("index.analysis.filter.my_shingle.max_shingle_size",2));
  XContentBuilder mapping=XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("_all").field("store",true).field("termVector","with_positions_offsets").endObject().startObject("properties").startObject("body").field("type","text").field("analyzer","body").endObject().endObject().endObject().endObject();
  assertAcked(builder.addMapping("type1",mapping));
  ensureGreen();
  NumShards test=getNumShards("test");
  List<String> phrases=new ArrayList<>();
  Collections.addAll(phrases,"nobel prize","noble gases","somethingelse prize","pride and joy","notes are fun");
  for (int i=0; i < 8; i++) {
    phrases.add("noble somethingelse" + i);
  }
  for (int i=0; i < test.numPrimaries * chafPerShard; i++) {
    phrases.add("chaff" + i);
  }
  for (  String phrase : phrases) {
    index("test","type1",phrase,"body",phrase);
  }
  refresh();
  Suggest searchSuggest=searchSuggest("nobel prize","simple_phrase",phraseSuggestion("body").addCandidateGenerator(candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f)).confidence(2f).maxErrors(5f).size(1));
  assertSuggestionSize(searchSuggest,0,0,"simple_phrase");
  searchSuggest=searchSuggest("noble prize","simple_phrase",phraseSuggestion("body").addCandidateGenerator(candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f)).confidence(2f).maxErrors(5f).size(1));
  assertSuggestion(searchSuggest,0,0,"simple_phrase","nobel prize");
}
