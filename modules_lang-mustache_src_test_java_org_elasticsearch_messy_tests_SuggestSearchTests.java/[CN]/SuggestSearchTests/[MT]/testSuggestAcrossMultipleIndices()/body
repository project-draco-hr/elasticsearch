{
  createIndex("test");
  ensureGreen();
  index("test","type1","1","text","abcd");
  index("test","type1","2","text","aacd");
  index("test","type1","3","text","abbd");
  index("test","type1","4","text","abcc");
  refresh();
  TermSuggestionBuilder termSuggest=termSuggestion().suggestMode(TermSuggestionBuilder.SuggestMode.ALWAYS).text("abcd").field("text");
  logger.info("--> run suggestions with one index");
  searchSuggest("test",termSuggest);
  createIndex("test_1");
  ensureGreen();
  index("test_1","type1","1","text","ab cd");
  index("test_1","type1","2","text","aa cd");
  index("test_1","type1","3","text","ab bd");
  index("test_1","type1","4","text","ab cc");
  refresh();
  termSuggest=termSuggestion().suggestMode(SuggestMode.ALWAYS).text("ab cd").minWordLength(1).field("text");
  logger.info("--> run suggestions with two indices");
  searchSuggest("test",termSuggest);
  XContentBuilder mapping=XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("properties").startObject("text").field("type","text").field("analyzer","keyword").endObject().endObject().endObject().endObject();
  assertAcked(prepareCreate("test_2").addMapping("type1",mapping));
  ensureGreen();
  index("test_2","type1","1","text","ab cd");
  index("test_2","type1","2","text","aa cd");
  index("test_2","type1","3","text","ab bd");
  index("test_2","type1","4","text","ab cc");
  index("test_2","type1","1","text","abcd");
  index("test_2","type1","2","text","aacd");
  index("test_2","type1","3","text","abbd");
  index("test_2","type1","4","text","abcc");
  refresh();
  termSuggest=termSuggestion().suggestMode(SuggestMode.ALWAYS).text("ab cd").minWordLength(1).field("text");
  logger.info("--> run suggestions with three indices");
  try {
    searchSuggest("test",termSuggest);
    fail(" can not suggest across multiple indices with different analysis chains");
  }
 catch (  ReduceSearchPhaseException ex) {
    assertThat(ex.getCause(),instanceOf(IllegalStateException.class));
    assertThat(ex.getCause().getMessage(),anyOf(endsWith("Suggest entries have different sizes actual [1] expected [2]"),endsWith("Suggest entries have different sizes actual [2] expected [1]")));
  }
catch (  IllegalStateException ex) {
    assertThat(ex.getMessage(),anyOf(endsWith("Suggest entries have different sizes actual [1] expected [2]"),endsWith("Suggest entries have different sizes actual [2] expected [1]")));
  }
  termSuggest=termSuggestion().suggestMode(SuggestMode.ALWAYS).text("ABCD").minWordLength(1).field("text");
  logger.info("--> run suggestions with four indices");
  try {
    searchSuggest("test",termSuggest);
    fail(" can not suggest across multiple indices with different analysis chains");
  }
 catch (  ReduceSearchPhaseException ex) {
    assertThat(ex.getCause(),instanceOf(IllegalStateException.class));
    assertThat(ex.getCause().getMessage(),anyOf(endsWith("Suggest entries have different text actual [ABCD] expected [abcd]"),endsWith("Suggest entries have different text actual [abcd] expected [ABCD]")));
  }
catch (  IllegalStateException ex) {
    assertThat(ex.getMessage(),anyOf(endsWith("Suggest entries have different text actual [ABCD] expected [abcd]"),endsWith("Suggest entries have different text actual [abcd] expected [ABCD]")));
  }
}
