{
  CreateIndexRequestBuilder builder=prepareCreate("test").setSettings(Settings.builder().put(indexSettings()).put(SETTING_NUMBER_OF_SHARDS,1).put("index.analysis.analyzer.body.tokenizer","standard").putArray("index.analysis.analyzer.body.filter","lowercase").put("index.analysis.analyzer.bigram.tokenizer","standard").putArray("index.analysis.analyzer.bigram.filter","my_shingle","lowercase").put("index.analysis.analyzer.ngram.tokenizer","standard").putArray("index.analysis.analyzer.ngram.filter","my_shingle2","lowercase").put("index.analysis.analyzer.myDefAnalyzer.tokenizer","standard").putArray("index.analysis.analyzer.myDefAnalyzer.filter","shingle","lowercase").put("index.analysis.filter.my_shingle.type","shingle").put("index.analysis.filter.my_shingle.output_unigrams",false).put("index.analysis.filter.my_shingle.min_shingle_size",2).put("index.analysis.filter.my_shingle.max_shingle_size",2).put("index.analysis.filter.my_shingle2.type","shingle").put("index.analysis.filter.my_shingle2.output_unigrams",true).put("index.analysis.filter.my_shingle2.min_shingle_size",2).put("index.analysis.filter.my_shingle2.max_shingle_size",2));
  XContentBuilder mapping=XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("_all").field("store",true).field("termVector","with_positions_offsets").endObject().startObject("properties").startObject("body").field("type","text").field("analyzer","body").endObject().startObject("bigram").field("type","text").field("analyzer","bigram").endObject().startObject("ngram").field("type","text").field("analyzer","ngram").endObject().endObject().endObject().endObject();
  assertAcked(builder.addMapping("type1",mapping));
  ensureGreen();
  for (  String line : readMarvelHeroNames()) {
    index("test","type1",line,"body",line,"bigram",line,"ngram",line);
  }
  refresh();
  NumShards numShards=getNumShards("test");
  PhraseSuggestionBuilder phraseSuggestion=phraseSuggestion("bigram").analyzer("body").addCandidateGenerator(candidateGenerator("does_not_exist").minWordLength(1).suggestMode("always")).realWordErrorLikelihood(0.95f).maxErrors(0.5f).size(1);
  Map<String,SuggestionBuilder<?>> suggestion=new HashMap<>();
  suggestion.put("simple_phrase",phraseSuggestion);
  try {
    searchSuggest("Xor the Got-Jewel",numShards.numPrimaries,suggestion);
    fail("field does not exists");
  }
 catch (  SearchPhaseExecutionException e) {
  }
  phraseSuggestion.clearCandidateGenerators().analyzer(null);
  try {
    searchSuggest("Xor the Got-Jewel",numShards.numPrimaries,suggestion);
    fail("analyzer does only produce ngrams");
  }
 catch (  SearchPhaseExecutionException e) {
  }
  phraseSuggestion.analyzer("bigram");
  try {
    searchSuggest("Xor the Got-Jewel",numShards.numPrimaries,suggestion);
    fail("analyzer does only produce ngrams");
  }
 catch (  SearchPhaseExecutionException e) {
  }
  phraseSuggestion.forceUnigrams(false);
  searchSuggest("Xor the Got-Jewel",0,suggestion);
  phraseSuggestion.forceUnigrams(true).analyzer("ngram");
  searchSuggest("Xor the Got-Jewel",0,suggestion);
  phraseSuggestion=phraseSuggestion("ngram").analyzer("myDefAnalyzer").forceUnigrams(true).realWordErrorLikelihood(0.95f).maxErrors(0.5f).size(1).addCandidateGenerator(candidateGenerator("body").minWordLength(1).suggestMode("always"));
  Suggest suggest=searchSuggest("Xor the Got-Jewel",0,suggestion);
  assertSuggestion(suggest,0,"simple_phrase","xorn the god jewel");
  phraseSuggestion.analyzer(null);
  suggest=searchSuggest("Xor the Got-Jewel",0,suggestion);
  assertSuggestion(suggest,0,"simple_phrase","xorr the god jewel");
}
