{
  createIndex("test");
  ensureGreen();
  Map<String,Integer> termsAndDocCount=new HashMap<>();
  termsAndDocCount.put("prefix_aaad",20);
  termsAndDocCount.put("prefix_abbb",18);
  termsAndDocCount.put("prefix_aaca",16);
  termsAndDocCount.put("prefix_abba",14);
  termsAndDocCount.put("prefix_accc",12);
  termsAndDocCount.put("prefix_addd",10);
  termsAndDocCount.put("prefix_abaa",8);
  termsAndDocCount.put("prefix_dbca",6);
  termsAndDocCount.put("prefix_cbad",4);
  termsAndDocCount.put("prefix_aacd",1);
  termsAndDocCount.put("prefix_abcc",1);
  termsAndDocCount.put("prefix_accd",1);
  for (  Map.Entry<String,Integer> entry : termsAndDocCount.entrySet()) {
    for (int i=0; i < entry.getValue(); i++) {
      index("test","type1",entry.getKey() + i,"field1",entry.getKey());
    }
  }
  refresh();
  Map<String,SuggestionBuilder<?>> suggestions=new HashMap<>();
  suggestions.put("size3SortScoreFirst",termSuggestion().size(3).minDocFreq(0).field("field1").suggestMode(SuggestMode.ALWAYS));
  suggestions.put("size10SortScoreFirst",termSuggestion().size(10).minDocFreq(0).field("field1").suggestMode(SuggestMode.ALWAYS).shardSize(50));
  suggestions.put("size3SortScoreFirstMaxEdits1",termSuggestion().maxEdits(1).size(10).minDocFreq(0).field("field1").suggestMode(SuggestMode.ALWAYS));
  suggestions.put("size10SortFrequencyFirst",termSuggestion().size(10).sort(SortBy.FREQUENCY).shardSize(1000).minDocFreq(0).field("field1").suggestMode(SuggestMode.ALWAYS));
  Suggest suggest=searchSuggest("prefix_abcd",0,suggestions);
  assertSuggestion(suggest,0,"size3SortScoreFirst","prefix_aacd","prefix_abcc","prefix_accd");
  assertSuggestion(suggest,0,"size10SortScoreFirst",10,"prefix_aacd","prefix_abcc","prefix_accd");
  assertSuggestion(suggest,0,"size3SortScoreFirstMaxEdits1","prefix_aacd","prefix_abcc","prefix_accd");
  assertSuggestion(suggest,0,"size10SortFrequencyFirst","prefix_aaad","prefix_abbb","prefix_aaca","prefix_abba","prefix_accc","prefix_addd","prefix_abaa","prefix_dbca","prefix_cbad","prefix_aacd");
}
