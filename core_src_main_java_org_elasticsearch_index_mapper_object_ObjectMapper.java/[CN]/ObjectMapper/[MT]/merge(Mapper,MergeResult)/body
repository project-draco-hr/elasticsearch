{
  if (!(mergeWith instanceof ObjectMapper)) {
    mergeResult.addConflict("Can't merge a non object mapping [" + mergeWith.name() + "] with an object mapping ["+ name()+ "]");
    return;
  }
  ObjectMapper mergeWithObject=(ObjectMapper)mergeWith;
  if (nested().isNested()) {
    if (!mergeWithObject.nested().isNested()) {
      mergeResult.addConflict("object mapping [" + name() + "] can't be changed from nested to non-nested");
      return;
    }
  }
 else {
    if (mergeWithObject.nested().isNested()) {
      mergeResult.addConflict("object mapping [" + name() + "] can't be changed from non-nested to nested");
      return;
    }
  }
  if (!mergeResult.simulate()) {
    if (mergeWithObject.dynamic != null) {
      this.dynamic=mergeWithObject.dynamic;
    }
  }
  doMerge(mergeWithObject,mergeResult);
  List<Mapper> mappersToPut=new ArrayList<>();
  List<ObjectMapper> newObjectMappers=new ArrayList<>();
  List<FieldMapper> newFieldMappers=new ArrayList<>();
  for (  Mapper mapper : mergeWithObject) {
    Mapper mergeWithMapper=mapper;
    Mapper mergeIntoMapper=mappers.get(mergeWithMapper.name());
    if (mergeIntoMapper == null) {
      if (!mergeResult.simulate()) {
        mappersToPut.add(mergeWithMapper);
        MapperUtils.collect(mergeWithMapper,newObjectMappers,newFieldMappers);
      }
    }
 else     if (mergeIntoMapper instanceof MetadataFieldMapper == false) {
      mergeIntoMapper.merge(mergeWithMapper,mergeResult);
    }
  }
  if (!newFieldMappers.isEmpty()) {
    mergeResult.addFieldMappers(newFieldMappers);
  }
  if (!newObjectMappers.isEmpty()) {
    mergeResult.addObjectMappers(newObjectMappers);
  }
  for (  Mapper mapper : mappersToPut) {
    putMapper(mapper);
  }
}
