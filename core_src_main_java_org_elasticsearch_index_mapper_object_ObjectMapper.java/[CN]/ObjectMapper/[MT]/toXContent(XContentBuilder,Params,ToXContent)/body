{
  builder.startObject(name);
  if (nested.isNested()) {
    builder.field("type",NESTED_CONTENT_TYPE);
    if (nested.isIncludeInParent()) {
      builder.field("include_in_parent",true);
    }
    if (nested.isIncludeInRoot()) {
      builder.field("include_in_root",true);
    }
  }
 else   if (mappers.isEmpty() && custom == null) {
    builder.field("type",CONTENT_TYPE);
  }
  if (dynamic != null) {
    builder.field("dynamic",dynamic.name().toLowerCase(Locale.ROOT));
  }
  if (enabled != Defaults.ENABLED) {
    builder.field("enabled",enabled);
  }
  if (pathType != Defaults.PATH_TYPE) {
    builder.field("path",pathType.name().toLowerCase(Locale.ROOT));
  }
  if (includeInAll != null) {
    builder.field("include_in_all",includeInAll);
  }
  if (custom != null) {
    custom.toXContent(builder,params);
  }
  doXContent(builder,params);
  Mapper[] sortedMappers=Iterables.toArray(mappers.values(),Mapper.class);
  Arrays.sort(sortedMappers,new Comparator<Mapper>(){
    @Override public int compare(    Mapper o1,    Mapper o2){
      return o1.name().compareTo(o2.name());
    }
  }
);
  int count=0;
  for (  Mapper mapper : sortedMappers) {
    if (!(mapper instanceof MetadataFieldMapper)) {
      if (count++ == 0) {
        builder.startObject("properties");
      }
      mapper.toXContent(builder,params);
    }
  }
  if (count > 0) {
    builder.endObject();
  }
  builder.endObject();
}
