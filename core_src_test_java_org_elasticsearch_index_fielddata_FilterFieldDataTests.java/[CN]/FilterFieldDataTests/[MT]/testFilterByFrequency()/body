{
  Random random=random();
  for (int i=0; i < 1000; i++) {
    Document d=new Document();
    d.add(new StringField("id","" + i,Field.Store.NO));
    if (i % 100 == 0) {
      d.add(new StringField("high_freq","100",Field.Store.NO));
      d.add(new StringField("low_freq","100",Field.Store.NO));
      d.add(new StringField("med_freq","100",Field.Store.NO));
    }
    if (i % 10 == 0) {
      d.add(new StringField("high_freq","10",Field.Store.NO));
      d.add(new StringField("med_freq","10",Field.Store.NO));
    }
    if (i % 5 == 0) {
      d.add(new StringField("high_freq","5",Field.Store.NO));
    }
    writer.addDocument(d);
  }
  writer.forceMerge(1,true);
  LeafReaderContext context=refreshReader();
  final BuilderContext builderCtx=new BuilderContext(indexService.getIndexSettings().getSettings(),new ContentPath(1));
{
    ifdService.clear();
    MappedFieldType ft=new TextFieldMapper.Builder("high_freq").fielddataFrequencyFilter(0,random.nextBoolean() ? 100 : 0.5d,0).build(builderCtx).fieldType();
    IndexOrdinalsFieldData fieldData=ifdService.getForField(ft);
    AtomicOrdinalsFieldData loadDirect=fieldData.loadDirect(context);
    RandomAccessOrds bytesValues=loadDirect.getOrdinalsValues();
    assertThat(2L,equalTo(bytesValues.getValueCount()));
    assertThat(bytesValues.lookupOrd(0).utf8ToString(),equalTo("10"));
    assertThat(bytesValues.lookupOrd(1).utf8ToString(),equalTo("100"));
  }
{
    ifdService.clear();
    MappedFieldType ft=new TextFieldMapper.Builder("high_freq").fielddataFrequencyFilter(random.nextBoolean() ? 101 : 101d / 200.0d,201,100).build(builderCtx).fieldType();
    IndexOrdinalsFieldData fieldData=ifdService.getForField(ft);
    AtomicOrdinalsFieldData loadDirect=fieldData.loadDirect(context);
    RandomAccessOrds bytesValues=loadDirect.getOrdinalsValues();
    assertThat(1L,equalTo(bytesValues.getValueCount()));
    assertThat(bytesValues.lookupOrd(0).utf8ToString(),equalTo("5"));
  }
{
    ifdService.clear();
    MappedFieldType ft=new TextFieldMapper.Builder("med_freq").fielddataFrequencyFilter(random.nextBoolean() ? 101 : 101d / 200.0d,Integer.MAX_VALUE,101).build(builderCtx).fieldType();
    IndexOrdinalsFieldData fieldData=ifdService.getForField(ft);
    AtomicOrdinalsFieldData loadDirect=fieldData.loadDirect(context);
    RandomAccessOrds bytesValues=loadDirect.getOrdinalsValues();
    assertThat(2L,equalTo(bytesValues.getValueCount()));
    assertThat(bytesValues.lookupOrd(0).utf8ToString(),equalTo("10"));
    assertThat(bytesValues.lookupOrd(1).utf8ToString(),equalTo("100"));
  }
{
    ifdService.clear();
    MappedFieldType ft=new TextFieldMapper.Builder("med_freq").fielddataFrequencyFilter(random.nextBoolean() ? 101 : 101d / 200.0d,Integer.MAX_VALUE,101).build(builderCtx).fieldType();
    IndexOrdinalsFieldData fieldData=ifdService.getForField(ft);
    AtomicOrdinalsFieldData loadDirect=fieldData.loadDirect(context);
    RandomAccessOrds bytesValues=loadDirect.getOrdinalsValues();
    assertThat(2L,equalTo(bytesValues.getValueCount()));
    assertThat(bytesValues.lookupOrd(0).utf8ToString(),equalTo("10"));
    assertThat(bytesValues.lookupOrd(1).utf8ToString(),equalTo("100"));
  }
}
