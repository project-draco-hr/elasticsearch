{
  while (true) {
    if (closed) {
      return;
    }
    String lastSeq=null;
    try {
      client.admin().indices().prepareRefresh(riverIndexName).execute().actionGet();
      GetResponse lastSeqGetResponse=client.prepareGet(riverIndexName,riverName().name(),"_seq").execute().actionGet();
      if (lastSeqGetResponse.exists()) {
        Map<String,Object> couchdbState=(Map<String,Object>)lastSeqGetResponse.sourceAsMap().get("couchdb");
        if (couchdbState != null) {
          lastSeq=couchdbState.get("last_seq").toString();
        }
      }
    }
 catch (    Exception e) {
      logger.warn("failed to get last_seq, throttling....",e);
      try {
        Thread.sleep(5000);
      }
 catch (      InterruptedException e1) {
        if (closed) {
          return;
        }
      }
    }
    String file="/" + couchDb + "/_changes?feed=continuous&include_docs=true&&heartbeat=10000";
    if (couchFilter != null) {
      file=file + "&filter=" + couchFilter;
    }
    if (lastSeq != null) {
      file=file + "&since=" + lastSeq;
    }
    HttpURLConnection connection=null;
    InputStream is=null;
    try {
      URL url=new URL("http",couchHost,couchPort,file);
      connection=(HttpURLConnection)url.openConnection();
      connection.setDoInput(true);
      connection.setUseCaches(false);
      is=connection.getInputStream();
      final BufferedReader reader=new BufferedReader(new InputStreamReader(is,"UTF-8"));
      String line;
      while ((line=reader.readLine()) != null) {
        if (line.length() == 0) {
          logger.trace("[couchdb] heartbeat");
          continue;
        }
        if (logger.isTraceEnabled()) {
          logger.trace("[couchdb] {}",line);
        }
        stream.add(line);
      }
    }
 catch (    Exception e) {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException e1) {
        }
      }
      if (connection != null) {
        try {
          connection.disconnect();
        }
 catch (        Exception e1) {
        }
      }
      if (closed) {
        return;
      }
      logger.warn("failed to read from _changes, throttling....",e);
      try {
        Thread.sleep(5000);
      }
 catch (      InterruptedException e1) {
        if (closed) {
          return;
        }
      }
    }
  }
}
