{
  Map<String,Object> ctx;
  try {
    ctx=XContentFactory.xContent(XContentType.JSON).createParser(s).mapAndClose();
  }
 catch (  IOException e) {
    logger.warn("failed to parse {}",e,s);
    return null;
  }
  if (ctx.containsKey("error")) {
    logger.warn("received error {}",s);
    return null;
  }
  String seq=ctx.get("seq").toString();
  String id=ctx.get("id").toString();
  if (id.startsWith("_design/")) {
    logger.trace("ignoring design document {}",id);
    return seq;
  }
  if (script != null) {
    scriptParams.put("ctx",ctx);
    try {
      script.run(scriptParams);
    }
 catch (    Exception e) {
      logger.warn("failed to script process {}, ignoring",e,ctx);
      return seq;
    }
  }
  if (ctx.containsKey("ignore") && ctx.get("ignore").equals(Boolean.TRUE)) {
  }
 else   if (ctx.containsKey("deleted") && ctx.get("deleted").equals(Boolean.TRUE)) {
    if (logger.isTraceEnabled()) {
      logger.trace("processing [delete]: [{}]/[{}]/[{}]",indexName,typeName,id);
    }
    bulk.add(deleteRequest(indexName).type(typeName).id(id));
  }
 else   if (ctx.containsKey("doc")) {
    Map<String,Object> doc=(Map<String,Object>)ctx.get("doc");
    if (logger.isTraceEnabled()) {
      logger.trace("processing [index ]: [{}]/[{}]/[{}], source {}",indexName,typeName,id,doc);
    }
    bulk.add(indexRequest(indexName).type(typeName).id(id).source(doc));
  }
 else {
    logger.warn("ignoring unknown change {}",s);
  }
  return seq;
}
