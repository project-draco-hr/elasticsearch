{
  ValuesSourceConfig<ParentChild> config=new ValuesSourceConfig<>(ValuesSourceType.BYTES);
  DocumentMapper childDocMapper=aggregationContext.searchContext().mapperService().documentMapper(childType);
  if (childDocMapper != null) {
    ParentFieldMapper parentFieldMapper=childDocMapper.parentFieldMapper();
    if (!parentFieldMapper.active()) {
      throw new SearchParseException(aggregationContext.searchContext(),"[children] no [_parent] field not configured that points to a parent type",null);
    }
    parentType=parentFieldMapper.type();
    DocumentMapper parentDocMapper=aggregationContext.searchContext().mapperService().documentMapper(parentType);
    if (parentDocMapper != null) {
      parentFilter=parentDocMapper.typeFilter();
      childFilter=childDocMapper.typeFilter();
      ParentChildIndexFieldData parentChildIndexFieldData=aggregationContext.searchContext().fieldData().getForField(parentFieldMapper.fieldType());
      config.fieldContext(new FieldContext(parentFieldMapper.fieldType().name(),parentChildIndexFieldData,parentFieldMapper.fieldType()));
    }
 else {
      config.unmapped(true);
    }
  }
 else {
    config.unmapped(true);
  }
  return config;
}
