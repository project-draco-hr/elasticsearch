{
  boolean filterPercolateType=hasMapping(PercolatorService.TYPE_NAME);
  if (types != null && filterPercolateType) {
    for (    String type : types) {
      if (PercolatorService.TYPE_NAME.equals(type)) {
        filterPercolateType=false;
        break;
      }
    }
  }
  Filter percolatorType=null;
  if (filterPercolateType) {
    percolatorType=documentMapper(PercolatorService.TYPE_NAME).typeFilter();
  }
  if (types == null || types.length == 0) {
    if (hasNested && filterPercolateType) {
      BooleanQuery bq=new BooleanQuery();
      bq.add(percolatorType,Occur.MUST_NOT);
      bq.add(Queries.newNonNestedFilter(),Occur.MUST);
      return new QueryWrapperFilter(bq);
    }
 else     if (hasNested) {
      return Queries.newNonNestedFilter();
    }
 else     if (filterPercolateType) {
      return new QueryWrapperFilter(Queries.not(percolatorType));
    }
 else {
      return null;
    }
  }
  if (types.length == 1) {
    DocumentMapper docMapper=documentMapper(types[0]);
    Filter filter=docMapper != null ? docMapper.typeFilter() : new QueryWrapperFilter(new TermQuery(new Term(TypeFieldMapper.NAME,types[0])));
    if (filterPercolateType) {
      BooleanQuery bq=new BooleanQuery();
      bq.add(percolatorType,Occur.MUST_NOT);
      bq.add(filter,Occur.MUST);
      return new QueryWrapperFilter(bq);
    }
 else {
      return filter;
    }
  }
  boolean useTermsFilter=true;
  for (  String type : types) {
    DocumentMapper docMapper=documentMapper(type);
    if (docMapper == null) {
      useTermsFilter=false;
      break;
    }
    if (docMapper.typeMapper().fieldType().indexOptions() == IndexOptions.NONE) {
      useTermsFilter=false;
      break;
    }
  }
  if (useTermsFilter) {
    BytesRef[] typesBytes=new BytesRef[types.length];
    for (int i=0; i < typesBytes.length; i++) {
      typesBytes[i]=new BytesRef(types[i]);
    }
    TermsQuery termsFilter=new TermsQuery(TypeFieldMapper.NAME,typesBytes);
    if (filterPercolateType) {
      BooleanQuery bq=new BooleanQuery();
      bq.add(percolatorType,Occur.MUST_NOT);
      bq.add(termsFilter,Occur.MUST);
      return new QueryWrapperFilter(bq);
    }
 else {
      return new QueryWrapperFilter(termsFilter);
    }
  }
 else {
    BooleanQuery bool=new BooleanQuery();
    for (    String type : types) {
      DocumentMapper docMapper=documentMapper(type);
      if (docMapper == null) {
        bool.add(new TermQuery(new Term(TypeFieldMapper.NAME,type)),BooleanClause.Occur.SHOULD);
      }
 else {
        bool.add(docMapper.typeFilter(),BooleanClause.Occur.SHOULD);
      }
    }
    if (filterPercolateType) {
      bool.add(percolatorType,BooleanClause.Occur.MUST_NOT);
    }
    if (hasNested) {
      bool.add(Queries.newNonNestedFilter(),BooleanClause.Occur.MUST);
    }
    return new QueryWrapperFilter(bool);
  }
}
