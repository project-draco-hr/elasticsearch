{
synchronized (mutex) {
    if (mapper.type().length() == 0) {
      throw new InvalidTypeNameException("mapping type name is empty");
    }
    if (mapper.type().charAt(0) == '_') {
      throw new InvalidTypeNameException("mapping type name [" + mapper.type() + "] can't start with '_'");
    }
    if (mapper.type().contains("#")) {
      throw new InvalidTypeNameException("mapping type name [" + mapper.type() + "] should not include '#' in it");
    }
    if (mapper.type().contains(",")) {
      throw new InvalidTypeNameException("mapping type name [" + mapper.type() + "] should not include ',' in it");
    }
    if (mapper.type().contains(".")) {
      logger.warn("Type [{}] contains a '.', it is recommended not to include it within a type name",mapper.type());
    }
    DocumentMapper oldMapper=mappers.get(mapper.type());
    FieldMapperListener.Aggregator fieldMappersAgg=new FieldMapperListener.Aggregator();
    mapper.traverse(fieldMappersAgg);
    addFieldMappers(fieldMappersAgg.fieldMappers.toArray(new FieldMapper[fieldMappersAgg.fieldMappers.size()]));
    mapper.addFieldMapperListener(fieldMapperListener,false);
    ObjectMapperListener.Aggregator objectMappersAgg=new ObjectMapperListener.Aggregator();
    mapper.traverse(objectMappersAgg);
    addObjectMappers(objectMappersAgg.objectMappers.toArray(new ObjectMapper[objectMappersAgg.objectMappers.size()]));
    mapper.addObjectMapperListener(objectMapperListener,false);
    mappers=newMapBuilder(mappers).put(mapper.type(),mapper).map();
    if (oldMapper != null) {
      removeObjectAndFieldMappers(oldMapper);
      oldMapper.close();
    }
  }
}
