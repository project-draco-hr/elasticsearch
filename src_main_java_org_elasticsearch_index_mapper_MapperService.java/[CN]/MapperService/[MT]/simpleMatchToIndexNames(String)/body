{
  if (!Regex.isSimpleMatchPattern(pattern)) {
    return ImmutableSet.of(pattern);
  }
  int dotIndex=pattern.indexOf('.');
  if (dotIndex != -1) {
    String possibleType=pattern.substring(0,dotIndex);
    DocumentMapper possibleDocMapper=mappers.get(possibleType);
    if (possibleDocMapper != null) {
      Set<String> typedFields=Sets.newHashSet();
      for (      String indexName : possibleDocMapper.mappers().simpleMatchToIndexNames(pattern)) {
        typedFields.add(possibleType + "." + indexName);
      }
      return typedFields;
    }
  }
  Set<String> fields=Sets.newHashSet();
  for (  Map.Entry<String,FieldMappers> entry : fullNameFieldMappers.entrySet()) {
    if (Regex.simpleMatch(pattern,entry.getKey())) {
      for (      FieldMapper mapper : entry.getValue()) {
        fields.add(mapper.names().indexName());
      }
    }
  }
  for (  Map.Entry<String,FieldMappers> entry : indexNameFieldMappers.entrySet()) {
    if (Regex.simpleMatch(pattern,entry.getKey())) {
      for (      FieldMapper mapper : entry.getValue()) {
        fields.add(mapper.names().indexName());
      }
    }
  }
  for (  Map.Entry<String,FieldMappers> entry : nameFieldMappers.entrySet()) {
    if (Regex.simpleMatch(pattern,entry.getKey())) {
      for (      FieldMapper mapper : entry.getValue()) {
        fields.add(mapper.names().indexName());
      }
    }
  }
  return fields;
}
