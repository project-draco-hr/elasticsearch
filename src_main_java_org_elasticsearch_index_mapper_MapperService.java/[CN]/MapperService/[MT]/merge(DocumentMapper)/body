{
  mappingLock.writeLock().lock();
  try {
    if (mapper.type().length() == 0) {
      throw new InvalidTypeNameException("mapping type name is empty");
    }
    if (mapper.type().charAt(0) == '_') {
      throw new InvalidTypeNameException("mapping type name [" + mapper.type() + "] can't start with '_'");
    }
    if (mapper.type().contains("#")) {
      throw new InvalidTypeNameException("mapping type name [" + mapper.type() + "] should not include '#' in it");
    }
    if (mapper.type().contains(",")) {
      throw new InvalidTypeNameException("mapping type name [" + mapper.type() + "] should not include ',' in it");
    }
    if (mapper.type().contains(".") && !PercolatorService.TYPE_NAME.equals(mapper.type())) {
      logger.warn("Type [{}] contains a '.', it is recommended not to include it within a type name",mapper.type());
    }
    DocumentMapper oldMapper=mappers.get(mapper.type());
    if (oldMapper != null) {
      MergeResult result=oldMapper.merge(mapper.mapping(),false);
      if (result.hasConflicts()) {
        if (logger.isDebugEnabled()) {
          logger.debug("merging mapping for type [{}] resulted in conflicts: [{}]",mapper.type(),Arrays.toString(result.buildConflicts()));
        }
      }
      fieldDataService.onMappingUpdate();
      return oldMapper;
    }
 else {
      List<ObjectMapper> newObjectMappers=new ArrayList<>();
      List<FieldMapper<?>> newFieldMappers=new ArrayList<>();
      for (      RootMapper rootMapper : mapper.mapping().rootMappers) {
        if (rootMapper instanceof FieldMapper<?>) {
          newFieldMappers.add((FieldMapper<?>)rootMapper);
        }
      }
      MapperUtils.collect(mapper.mapping().root,newObjectMappers,newFieldMappers);
      addFieldMappers(newFieldMappers);
      addObjectMappers(newObjectMappers);
      for (      DocumentTypeListener typeListener : typeListeners) {
        typeListener.beforeCreate(mapper);
      }
      mappers=newMapBuilder(mappers).put(mapper.type(),mapper).map();
      return mapper;
    }
  }
  finally {
    mappingLock.writeLock().unlock();
  }
}
