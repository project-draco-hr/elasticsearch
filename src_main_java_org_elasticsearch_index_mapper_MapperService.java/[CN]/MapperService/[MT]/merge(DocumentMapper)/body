{
synchronized (typeMutex) {
    if (mapper.type().length() == 0) {
      throw new InvalidTypeNameException("mapping type name is empty");
    }
    if (mapper.type().charAt(0) == '_') {
      throw new InvalidTypeNameException("mapping type name [" + mapper.type() + "] can't start with '_'");
    }
    if (mapper.type().contains("#")) {
      throw new InvalidTypeNameException("mapping type name [" + mapper.type() + "] should not include '#' in it");
    }
    if (mapper.type().contains(",")) {
      throw new InvalidTypeNameException("mapping type name [" + mapper.type() + "] should not include ',' in it");
    }
    if (mapper.type().contains(".") && !PercolatorService.TYPE_NAME.equals(mapper.type())) {
      logger.warn("Type [{}] contains a '.', it is recommended not to include it within a type name",mapper.type());
    }
    DocumentMapper oldMapper=mappers.get(mapper.type());
    if (oldMapper != null) {
      MergeResult result=oldMapper.merge(mapper.mapping(),false);
      if (result.hasConflicts()) {
        if (logger.isDebugEnabled()) {
          logger.debug("merging mapping for type [{}] resulted in conflicts: [{}]",mapper.type(),Arrays.toString(result.buildConflicts()));
        }
      }
      fieldDataService.onMappingUpdate();
      return oldMapper;
    }
 else {
      FieldMapperListener.Aggregator fieldMappersAgg=new FieldMapperListener.Aggregator();
      mapper.traverse(fieldMappersAgg);
      addFieldMappers(fieldMappersAgg.mappers);
      mapper.addFieldMapperListener(fieldMapperListener);
      ObjectMapperListener.Aggregator objectMappersAgg=new ObjectMapperListener.Aggregator();
      mapper.traverse(objectMappersAgg);
      addObjectMappers(objectMappersAgg.mappers.toArray(new ObjectMapper[objectMappersAgg.mappers.size()]));
      mapper.addObjectMapperListener(objectMapperListener);
      for (      DocumentTypeListener typeListener : typeListeners) {
        typeListener.beforeCreate(mapper);
      }
      mappers=newMapBuilder(mappers).put(mapper.type(),mapper).map();
      return mapper;
    }
  }
}
