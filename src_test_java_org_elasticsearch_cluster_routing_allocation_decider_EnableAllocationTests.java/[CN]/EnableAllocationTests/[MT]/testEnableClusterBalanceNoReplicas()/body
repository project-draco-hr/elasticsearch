{
  final boolean useClusterSetting=randomBoolean();
  Settings build=settingsBuilder().put(CLUSTER_ROUTING_REBALANCE_ENABLE,useClusterSetting ? Rebalance.NONE : RandomPicks.randomFrom(getRandom(),Rebalance.values())).put(ConcurrentRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_CLUSTER_CONCURRENT_REBALANCE,3).build();
  NodeSettingsService nodeSettingsService=new NodeSettingsService(build);
  AllocationService strategy=createAllocationService(build,nodeSettingsService,getRandom());
  Settings indexSettings=useClusterSetting ? ImmutableSettings.EMPTY : settingsBuilder().put(EnableAllocationDecider.INDEX_ROUTING_REBALANCE_ENABLE,Rebalance.NONE).build();
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT).put(indexSettings)).numberOfShards(6).numberOfReplicas(0)).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build();
  logger.info("--> adding one nodes and do rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1")).put(newNode("node2"))).build();
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.routingNodes().shardsWithState(INITIALIZING).size(),equalTo(6));
  logger.info("--> start the shards (primaries)");
  routingTable=strategy.applyStartedShards(clusterState,clusterState.routingNodes().shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.routingNodes().shardsWithState(STARTED).size(),equalTo(6));
  assertThat(clusterState.routingNodes().shardsWithState(INITIALIZING).size(),equalTo(0));
  logger.info("--> adding one nodes and do rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1")).put(newNode("node2")).put(newNode("node3"))).build();
  ClusterState prevState=clusterState;
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.routingNodes().shardsWithState(STARTED).size(),equalTo(6));
  assertThat(clusterState.routingNodes().shardsWithState(RELOCATING).size(),equalTo(0));
  if (useClusterSetting) {
    prevState=clusterState;
    clusterState=ClusterState.builder(clusterState).metaData(MetaData.builder(metaData).transientSettings(settingsBuilder().put(CLUSTER_ROUTING_REBALANCE_ENABLE,randomBoolean() ? Rebalance.PRIMARIES : Rebalance.ALL).build())).build();
  }
 else {
    prevState=clusterState;
    IndexMetaData meta=clusterState.getMetaData().index("test");
    clusterState=ClusterState.builder(clusterState).metaData(MetaData.builder(metaData).removeAllIndices().put(IndexMetaData.builder(meta).settings(settingsBuilder().put(meta.getSettings()).put(EnableAllocationDecider.INDEX_ROUTING_REBALANCE_ENABLE,randomBoolean() ? Rebalance.PRIMARIES : Rebalance.ALL).build()))).build();
  }
  nodeSettingsService.clusterChanged(new ClusterChangedEvent("foo",clusterState,prevState));
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat("expected 4 primaries to be started and 2 to relocate useClusterSettings: " + useClusterSetting,clusterState.routingNodes().shardsWithState(STARTED).size(),equalTo(4));
  assertThat("expected 2 primaries to relocate useClusterSettings: " + useClusterSetting,clusterState.routingNodes().shardsWithState(RELOCATING).size(),equalTo(2));
}
