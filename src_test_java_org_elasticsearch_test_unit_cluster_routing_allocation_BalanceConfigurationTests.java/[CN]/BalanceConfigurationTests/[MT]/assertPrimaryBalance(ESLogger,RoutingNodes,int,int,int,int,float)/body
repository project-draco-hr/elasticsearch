{
  final int numShards=numberOfShards;
  final float avgNumShards=(float)(numShards) / (float)(numberOfNodes);
  final int minAvgNumberOfShards=Math.round(Math.round(Math.floor(avgNumShards - treshold)));
  final int maxAvgNumberOfShards=Math.round(Math.round(Math.ceil(avgNumShards + treshold)));
  for (  String index : nodes.getRoutingTable().indicesRouting().keySet()) {
    for (    RoutingNode node : nodes) {
      int primaries=0;
      for (      ShardRouting shard : node.shardsWithState(index,STARTED)) {
        primaries+=shard.primary() ? 1 : 0;
      }
      assertThat(primaries,Matchers.greaterThanOrEqualTo(minAvgNumberOfShards));
      assertThat(primaries,Matchers.lessThanOrEqualTo(maxAvgNumberOfShards));
    }
  }
}
