{
  String keyField=null;
  String valueField=null;
  String keyScript=null;
  String valueScript=null;
  String scriptLang=null;
  Map<String,Object> params=null;
  long interval=0;
  HistogramFacet.ComparatorType comparatorType=HistogramFacet.ComparatorType.KEY;
  XContentParser.Token token;
  String fieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      fieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("params".equals(fieldName)) {
        params=parser.map();
      }
    }
 else     if (token.isValue()) {
      if ("field".equals(fieldName)) {
        keyField=parser.text();
      }
 else       if ("key_field".equals(fieldName) || "keyField".equals(fieldName)) {
        keyField=parser.text();
      }
 else       if ("value_field".equals(fieldName) || "valueField".equals(fieldName)) {
        valueField=parser.text();
      }
 else       if ("interval".equals(fieldName)) {
        interval=parser.longValue();
      }
 else       if ("time_interval".equals(fieldName) || "timeInterval".equals(fieldName)) {
        interval=TimeValue.parseTimeValue(parser.text(),null).millis();
      }
 else       if ("key_script".equals(fieldName) || "keyScript".equals(fieldName)) {
        keyScript=parser.text();
      }
 else       if ("value_script".equals(fieldName) || "valueScript".equals(fieldName)) {
        valueScript=parser.text();
      }
 else       if ("order".equals(fieldName) || "comparator".equals(fieldName)) {
        comparatorType=HistogramFacet.ComparatorType.fromString(parser.text());
      }
 else       if ("lang".equals(fieldName)) {
        scriptLang=parser.text();
      }
    }
  }
  if (keyScript != null && valueScript != null) {
    return new ScriptHistogramFacetExecutor(scriptLang,keyScript,valueScript,params,interval,comparatorType,context);
  }
  if (keyField == null) {
    throw new FacetPhaseExecutionException(facetName,"key field is required to be set for histogram facet, either using [field] or using [key_field]");
  }
  if (interval <= 0) {
    throw new FacetPhaseExecutionException(facetName,"[interval] is required to be set for histogram facet");
  }
  FieldMapper keyMapper=context.smartNameFieldMapper(keyField);
  if (keyMapper == null) {
    throw new FacetPhaseExecutionException(facetName,"No mapping found for key_field [" + keyField + "]");
  }
  IndexNumericFieldData keyIndexFieldData=context.fieldData().getForField(keyMapper);
  IndexNumericFieldData valueIndexFieldData=null;
  if (valueField != null) {
    FieldMapper valueMapper=context.smartNameFieldMapper(valueField);
    if (valueMapper == null) {
      throw new FacetPhaseExecutionException(facetName,"No mapping found for value_field [" + valueField + "]");
    }
    valueIndexFieldData=context.fieldData().getForField(valueMapper);
  }
  if (valueScript != null) {
    return new ValueScriptHistogramFacetExecutor(keyIndexFieldData,scriptLang,valueScript,params,interval,comparatorType,context);
  }
 else   if (valueField == null) {
    return new CountHistogramFacetExecutor(keyIndexFieldData,interval,comparatorType,context);
  }
 else   if (keyField.equals(valueField)) {
    return new FullHistogramFacetExecutor(keyIndexFieldData,interval,comparatorType,context);
  }
 else {
    return new ValueHistogramFacetExecutor(keyIndexFieldData,valueIndexFieldData,interval,comparatorType,context);
  }
}
