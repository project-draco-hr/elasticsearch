{
  DateTimeFormatter formatter;
  if ("basicDate".equals(input)) {
    formatter=ISODateTimeFormat.basicDate();
  }
 else   if ("basicDateTime".equals(input)) {
    formatter=ISODateTimeFormat.basicDateTime();
  }
 else   if ("basicDateTimeNoMillis".equals(input)) {
    formatter=ISODateTimeFormat.basicDateTimeNoMillis();
  }
 else   if ("basicOrdinalDate".equals(input)) {
    formatter=ISODateTimeFormat.basicOrdinalDate();
  }
 else   if ("basicOrdinalDateTime".equals(input)) {
    formatter=ISODateTimeFormat.basicOrdinalDateTime();
  }
 else   if ("basicOrdinalDateTimeNoMillis".equals(input)) {
    formatter=ISODateTimeFormat.basicOrdinalDateTimeNoMillis();
  }
 else   if ("basicTime".equals(input)) {
    formatter=ISODateTimeFormat.basicTime();
  }
 else   if ("basicTimeNoMillis".equals(input)) {
    formatter=ISODateTimeFormat.basicTimeNoMillis();
  }
 else   if ("basicTTime".equals(input)) {
    formatter=ISODateTimeFormat.basicTTime();
  }
 else   if ("basicTTimeNoMillis".equals(input)) {
    formatter=ISODateTimeFormat.basicTTimeNoMillis();
  }
 else   if ("basicWeekDate".equals(input)) {
    formatter=ISODateTimeFormat.basicWeekDate();
  }
 else   if ("basicWeekDateTime".equals(input)) {
    formatter=ISODateTimeFormat.basicWeekDateTime();
  }
 else   if ("basicWeekDateTimeNoMillis".equals(input)) {
    formatter=ISODateTimeFormat.basicWeekDateTimeNoMillis();
  }
 else   if ("date".equals(input)) {
    formatter=ISODateTimeFormat.date();
  }
 else   if ("dateHour".equals(input)) {
    formatter=ISODateTimeFormat.dateHour();
  }
 else   if ("dateHourMinute".equals(input)) {
    formatter=ISODateTimeFormat.dateHourMinute();
  }
 else   if ("dateHourMinuteSecond".equals(input)) {
    formatter=ISODateTimeFormat.dateHourMinuteSecond();
  }
 else   if ("dateHourMinuteSecondFraction".equals(input)) {
    formatter=ISODateTimeFormat.dateHourMinuteSecondFraction();
  }
 else   if ("dateHourMinuteSecondMillis".equals(input)) {
    formatter=ISODateTimeFormat.dateHourMinuteSecondMillis();
  }
 else   if ("dateOptionalTime".equals(input)) {
    formatter=ISODateTimeFormat.dateOptionalTimeParser();
  }
 else   if ("dateTime".equals(input)) {
    formatter=ISODateTimeFormat.dateTime();
  }
 else   if ("dateTimeNoMillis".equals(input)) {
    formatter=ISODateTimeFormat.dateTimeNoMillis();
  }
 else   if ("hour".equals(input)) {
    formatter=ISODateTimeFormat.hour();
  }
 else   if ("hourMinute".equals(input)) {
    formatter=ISODateTimeFormat.hourMinute();
  }
 else   if ("hourMinuteSecond".equals(input)) {
    formatter=ISODateTimeFormat.hourMinuteSecond();
  }
 else   if ("hourMinuteSecondFraction".equals(input)) {
    formatter=ISODateTimeFormat.hourMinuteSecondFraction();
  }
 else   if ("hourMinuteSecondMillis".equals(input)) {
    formatter=ISODateTimeFormat.hourMinuteSecondMillis();
  }
 else   if ("ordinalDate".equals(input)) {
    formatter=ISODateTimeFormat.ordinalDate();
  }
 else   if ("ordinalDateTime".equals(input)) {
    formatter=ISODateTimeFormat.ordinalDateTime();
  }
 else   if ("ordinalDateTimeNoMillis".equals(input)) {
    formatter=ISODateTimeFormat.ordinalDateTimeNoMillis();
  }
 else   if ("time".equals(input)) {
    formatter=ISODateTimeFormat.time();
  }
 else   if ("tTime".equals(input)) {
    formatter=ISODateTimeFormat.tTime();
  }
 else   if ("tTimeNoMillis".equals(input)) {
    formatter=ISODateTimeFormat.tTimeNoMillis();
  }
 else   if ("weekDate".equals(input)) {
    formatter=ISODateTimeFormat.weekDate();
  }
 else   if ("weekDateTime".equals(input)) {
    formatter=ISODateTimeFormat.weekDateTime();
  }
 else   if ("weekyear".equals(input)) {
    formatter=ISODateTimeFormat.weekyear();
  }
 else   if ("weekyearWeek".equals(input)) {
    formatter=ISODateTimeFormat.weekyearWeek();
  }
 else   if ("year".equals(input)) {
    formatter=ISODateTimeFormat.year();
  }
 else   if ("yearMonth".equals(input)) {
    formatter=ISODateTimeFormat.yearMonth();
  }
 else   if ("yearMonthDay".equals(input)) {
    formatter=ISODateTimeFormat.yearMonthDay();
  }
 else {
    formatter=DateTimeFormat.forPattern(input);
  }
  formatter.withZone(DateTimeZone.UTC);
  return new FormatDateTimeFormatter(input,formatter);
}
