{
  if (blockingClient) {
    clientBootstrap=new ClientBootstrap(new OioClientSocketChannelFactory(Executors.newCachedThreadPool(daemonThreadFactory(settings,TRANSPORT_CLIENT_WORKER_THREAD_NAME_PREFIX))));
  }
 else {
    int bossCount=NETTY_BOSS_COUNT.get(settings);
    clientBootstrap=new ClientBootstrap(new NioClientSocketChannelFactory(Executors.newCachedThreadPool(daemonThreadFactory(settings,TRANSPORT_CLIENT_BOSS_THREAD_NAME_PREFIX)),bossCount,new NioWorkerPool(Executors.newCachedThreadPool(daemonThreadFactory(settings,TRANSPORT_CLIENT_WORKER_THREAD_NAME_PREFIX)),workerCount),new HashedWheelTimer(daemonThreadFactory(settings,"transport_client_timer"))));
  }
  clientBootstrap.setPipelineFactory(configureClientChannelPipelineFactory());
  clientBootstrap.setOption("connectTimeoutMillis",connectTimeout.millis());
  boolean tcpNoDelay=TCP_NO_DELAY.get(settings);
  clientBootstrap.setOption("tcpNoDelay",tcpNoDelay);
  boolean tcpKeepAlive=TCP_KEEP_ALIVE.get(settings);
  clientBootstrap.setOption("keepAlive",tcpKeepAlive);
  ByteSizeValue tcpSendBufferSize=TCP_SEND_BUFFER_SIZE.get(settings);
  if (tcpSendBufferSize.getBytes() > 0) {
    clientBootstrap.setOption("sendBufferSize",tcpSendBufferSize.getBytes());
  }
  ByteSizeValue tcpReceiveBufferSize=TCP_RECEIVE_BUFFER_SIZE.get(settings);
  if (tcpReceiveBufferSize.getBytes() > 0) {
    clientBootstrap.setOption("receiveBufferSize",tcpReceiveBufferSize.getBytes());
  }
  clientBootstrap.setOption("receiveBufferSizePredictorFactory",receiveBufferSizePredictorFactory);
  boolean reuseAddress=TCP_REUSE_ADDRESS.get(settings);
  clientBootstrap.setOption("reuseAddress",reuseAddress);
  return clientBootstrap;
}
