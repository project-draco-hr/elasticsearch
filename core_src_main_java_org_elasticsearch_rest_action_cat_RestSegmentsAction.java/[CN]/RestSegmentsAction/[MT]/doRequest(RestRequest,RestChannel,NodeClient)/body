{
  final String[] indices=Strings.splitStringByCommaToArray(request.param("index"));
  final ClusterStateRequest clusterStateRequest=new ClusterStateRequest();
  clusterStateRequest.local(request.paramAsBoolean("local",clusterStateRequest.local()));
  clusterStateRequest.masterNodeTimeout(request.paramAsTime("master_timeout",clusterStateRequest.masterNodeTimeout()));
  clusterStateRequest.clear().nodes(true).routingTable(true).indices(indices);
  client.admin().cluster().state(clusterStateRequest,new RestActionListener<ClusterStateResponse>(channel){
    @Override public void processResponse(    final ClusterStateResponse clusterStateResponse){
      final IndicesSegmentsRequest indicesSegmentsRequest=new IndicesSegmentsRequest();
      indicesSegmentsRequest.indices(indices);
      client.admin().indices().segments(indicesSegmentsRequest,new RestResponseListener<IndicesSegmentResponse>(channel){
        @Override public RestResponse buildResponse(        final IndicesSegmentResponse indicesSegmentResponse) throws Exception {
          final Map<String,IndexSegments> indicesSegments=indicesSegmentResponse.getIndices();
          Table tab=buildTable(request,clusterStateResponse,indicesSegments);
          return RestTable.buildResponse(tab,channel);
        }
      }
);
    }
  }
);
}
