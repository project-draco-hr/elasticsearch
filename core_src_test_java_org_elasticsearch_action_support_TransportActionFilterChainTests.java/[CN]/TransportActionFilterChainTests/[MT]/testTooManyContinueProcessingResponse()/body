{
  final int additionalContinueCount=randomInt(10);
  ResponseTestFilter testFilter=new ResponseTestFilter(randomInt(),new ResponseCallback(){
    @Override public void execute(    String action,    ActionResponse response,    ActionListener listener,    ActionFilterChain chain){
      for (int i=0; i <= additionalContinueCount; i++) {
        chain.proceed(action,response,listener);
      }
    }
  }
);
  Set<ActionFilter> filters=new HashSet<>();
  filters.add(testFilter);
  String actionName=randomAsciiOfLength(randomInt(30));
  ActionFilters actionFilters=new ActionFilters(filters);
  TransportAction<TestRequest,TestResponse> transportAction=new TransportAction<TestRequest,TestResponse>(Settings.EMPTY,actionName,null,actionFilters,null,new TaskManager(Settings.EMPTY)){
    @Override protected void doExecute(    TestRequest request,    ActionListener<TestResponse> listener){
      listener.onResponse(new TestResponse());
    }
  }
;
  final CountDownLatch latch=new CountDownLatch(additionalContinueCount + 1);
  final AtomicInteger responses=new AtomicInteger();
  final List<Throwable> failures=new CopyOnWriteArrayList<>();
  transportAction.execute(new TestRequest(),new ActionListener<TestResponse>(){
    @Override public void onResponse(    TestResponse testResponse){
      responses.incrementAndGet();
      latch.countDown();
    }
    @Override public void onFailure(    Throwable e){
      failures.add(e);
      latch.countDown();
    }
  }
);
  if (!latch.await(10,TimeUnit.SECONDS)) {
    fail("timeout waiting for the filter to notify the listener as many times as expected");
  }
  assertThat(testFilter.runs.get(),equalTo(1));
  assertThat(testFilter.lastActionName,equalTo(actionName));
  assertThat(responses.get(),equalTo(1));
  assertThat(failures.size(),equalTo(additionalContinueCount));
  for (  Throwable failure : failures) {
    assertThat(failure,instanceOf(IllegalStateException.class));
  }
}
