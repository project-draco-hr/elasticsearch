{
  try {
    if (lifecycle.stopped()) {
      return;
    }
    if (rerouting.compareAndSet(false,true) == false) {
      logger.trace("already has pending reroute, ignoring {}",reason);
      return;
    }
    logger.trace("rerouting {}",reason);
    clusterService.submitStateUpdateTask(CLUSTER_UPDATE_TASK_SOURCE + "(" + reason+ ")",Priority.HIGH,new ClusterStateUpdateTask(){
      @Override public ClusterState execute(      ClusterState currentState){
        rerouting.set(false);
        RoutingAllocation.Result routingResult=allocationService.reroute(currentState);
        if (!routingResult.changed()) {
          return currentState;
        }
        return ClusterState.builder(currentState).routingResult(routingResult).build();
      }
      @Override public void onNoLongerMaster(      String source){
        rerouting.set(false);
      }
      @Override public void onFailure(      String source,      Throwable t){
        rerouting.set(false);
        ClusterState state=clusterService.state();
        if (logger.isTraceEnabled()) {
          logger.error("unexpected failure during [{}], current state:\n{}",t,source,state.prettyPrint());
        }
 else {
          logger.error("unexpected failure during [{}], current state version [{}]",t,source,state.version());
        }
      }
    }
);
  }
 catch (  Throwable e) {
    rerouting.set(false);
    ClusterState state=clusterService.state();
    logger.warn("failed to reroute routing table, current state:\n{}",e,state.prettyPrint());
  }
}
