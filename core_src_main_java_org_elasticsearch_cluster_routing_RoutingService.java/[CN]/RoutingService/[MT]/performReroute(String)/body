{
  try {
    if (lifecycle.stopped()) {
      return;
    }
    if (rerouting.compareAndSet(false,true) == false) {
      logger.trace("already has pending reroute, ignoring {}",reason);
      return;
    }
    logger.trace("rerouting {}",reason);
    clusterService.submitStateUpdateTask(CLUSTER_UPDATE_TASK_SOURCE + "(" + reason+ ")",new ClusterStateUpdateTask(Priority.HIGH){
      @Override public ClusterState execute(      ClusterState currentState){
        rerouting.set(false);
        RoutingAllocation.Result routingResult=allocationService.reroute(currentState,reason);
        if (!routingResult.changed()) {
          return currentState;
        }
        return ClusterState.builder(currentState).routingResult(routingResult).build();
      }
      @Override public void onNoLongerMaster(      String source){
        rerouting.set(false);
      }
      @Override public void onFailure(      String source,      Exception e){
        rerouting.set(false);
        ClusterState state=clusterService.state();
        if (logger.isTraceEnabled()) {
          logger.error(new ParameterizedMessage("unexpected failure during [{}], current state:\n{}",source,state.prettyPrint()),e);
        }
 else {
          logger.error(new ParameterizedMessage("unexpected failure during [{}], current state version [{}]",source,state.version()),e);
        }
      }
    }
);
  }
 catch (  Exception e) {
    rerouting.set(false);
    ClusterState state=clusterService.state();
    logger.warn(new ParameterizedMessage("failed to reroute routing table, current state:\n{}",state.prettyPrint()),e);
  }
}
