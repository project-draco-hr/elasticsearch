{
  XContentParser parser=parseContext.parser();
  List<String> ids=new ArrayList<>();
  List<String> types=new ArrayList<>();
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  String queryName=null;
  String currentFieldName=null;
  XContentParser.Token token;
  boolean idsProvided=false;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if (parseContext.parseFieldMatcher().match(currentFieldName,VALUES_FIELD)) {
        idsProvided=true;
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          if ((token == XContentParser.Token.VALUE_STRING) || (token == XContentParser.Token.VALUE_NUMBER)) {
            String id=parser.textOrNull();
            if (id == null) {
              throw new ParsingException(parser.getTokenLocation(),"No value specified for term filter");
            }
            ids.add(id);
          }
 else {
            throw new ParsingException(parser.getTokenLocation(),"Illegal value for id, expecting a string or number, got: " + token);
          }
        }
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,TYPE_FIELD)) {
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          String value=parser.textOrNull();
          if (value == null) {
            throw new ParsingException(parser.getTokenLocation(),"No type specified for term filter");
          }
          types.add(value);
        }
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"[" + IdsQueryBuilder.NAME + "] query does not support ["+ currentFieldName+ "]");
      }
    }
 else     if (token.isValue()) {
      if (parseContext.parseFieldMatcher().match(currentFieldName,TYPE_FIELD)) {
        types=Collections.singletonList(parser.text());
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.BOOST_FIELD)) {
        boost=parser.floatValue();
      }
 else       if (parseContext.parseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.NAME_FIELD)) {
        queryName=parser.text();
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"[" + IdsQueryBuilder.NAME + "] query does not support ["+ currentFieldName+ "]");
      }
    }
 else {
      throw new ParsingException(parser.getTokenLocation(),"[" + IdsQueryBuilder.NAME + "] unknown token ["+ token+ "] after ["+ currentFieldName+ "]");
    }
  }
  if (!idsProvided) {
    throw new ParsingException(parser.getTokenLocation(),"[" + IdsQueryBuilder.NAME + "] query, no ids values provided");
  }
  IdsQueryBuilder query=new IdsQueryBuilder(types.toArray(new String[types.size()]));
  query.addIds(ids.toArray(new String[ids.size()]));
  query.boost(boost).queryName(queryName);
  return query;
}
