{
  int MAX_DOCS_PER_AUTHOR=1;
  int MAX_DOCS_PER_GENRE=2;
  DiversifiedFactory rootSample=new DiversifiedFactory("genreSample").shardSize(100).field("genre").maxDocsPerValue(MAX_DOCS_PER_GENRE);
  DiversifiedFactory sampleAgg=new DiversifiedFactory("sample").shardSize(100);
  sampleAgg.field("author").maxDocsPerValue(MAX_DOCS_PER_AUTHOR).executionHint(randomExecutionHint());
  sampleAgg.subAggregation(terms("authors").field("author"));
  sampleAgg.subAggregation(terms("genres").field("genre"));
  rootSample.subAggregation(sampleAgg);
  SearchResponse response=client().prepareSearch("test").setSearchType(SearchType.QUERY_AND_FETCH).addAggregation(rootSample).execute().actionGet();
  assertSearchResponse(response);
  Sampler genreSample=response.getAggregations().get("genreSample");
  Sampler sample=genreSample.getAggregations().get("sample");
  Terms genres=sample.getAggregations().get("genres");
  Collection<Bucket> testBuckets=genres.getBuckets();
  for (  Terms.Bucket testBucket : testBuckets) {
    assertThat(testBucket.getDocCount(),lessThanOrEqualTo((long)NUM_SHARDS * MAX_DOCS_PER_GENRE));
  }
  Terms authors=sample.getAggregations().get("authors");
  testBuckets=authors.getBuckets();
  for (  Terms.Bucket testBucket : testBuckets) {
    assertThat(testBucket.getDocCount(),lessThanOrEqualTo((long)NUM_SHARDS * MAX_DOCS_PER_AUTHOR));
  }
}
