{
  for (int runs=0; runs < NUMBER_OF_TESTBUILDERS; runs++) {
    SB firstShape=createTestShapeBuilder();
    assertFalse("shape is equal to null",firstShape.equals(null));
    assertFalse("shape is equal to incompatible type",firstShape.equals(""));
    assertTrue("shape is not equal to self",firstShape.equals(firstShape));
    assertThat("same shape's hashcode returns different values if called multiple times",firstShape.hashCode(),equalTo(firstShape.hashCode()));
    assertThat("different shapes should not be equal",mutate(firstShape),not(equalTo(firstShape)));
    assertThat("different shapes should have different hashcode",mutate(firstShape).hashCode(),not(equalTo(firstShape.hashCode())));
    SB secondShape=copyShape(firstShape);
    assertTrue("shape is not equal to self",secondShape.equals(secondShape));
    assertTrue("shape is not equal to its copy",firstShape.equals(secondShape));
    assertTrue("equals is not symmetric",secondShape.equals(firstShape));
    assertThat("shape copy's hashcode is different from original hashcode",secondShape.hashCode(),equalTo(firstShape.hashCode()));
    SB thirdShape=copyShape(secondShape);
    assertTrue("shape is not equal to self",thirdShape.equals(thirdShape));
    assertTrue("shape is not equal to its copy",secondShape.equals(thirdShape));
    assertThat("shape copy's hashcode is different from original hashcode",secondShape.hashCode(),equalTo(thirdShape.hashCode()));
    assertTrue("equals is not transitive",firstShape.equals(thirdShape));
    assertThat("shape copy's hashcode is different from original hashcode",firstShape.hashCode(),equalTo(thirdShape.hashCode()));
    assertTrue("equals is not symmetric",thirdShape.equals(secondShape));
    assertTrue("equals is not symmetric",thirdShape.equals(firstShape));
  }
}
