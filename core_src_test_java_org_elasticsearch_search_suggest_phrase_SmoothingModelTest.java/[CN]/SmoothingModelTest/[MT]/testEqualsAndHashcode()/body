{
  SM firstModel=createTestModel();
  assertFalse("smoothing model is equal to null",firstModel.equals(null));
  assertFalse("smoothing model is equal to incompatible type",firstModel.equals(""));
  assertTrue("smoothing model is not equal to self",firstModel.equals(firstModel));
  assertThat("same smoothing model's hashcode returns different values if called multiple times",firstModel.hashCode(),equalTo(firstModel.hashCode()));
  assertThat("different smoothing models should not be equal",createMutation(firstModel),not(equalTo(firstModel)));
  SM secondModel=(SM)copyModel(firstModel);
  assertTrue("smoothing model is not equal to self",secondModel.equals(secondModel));
  assertTrue("smoothing model is not equal to its copy",firstModel.equals(secondModel));
  assertTrue("equals is not symmetric",secondModel.equals(firstModel));
  assertThat("smoothing model copy's hashcode is different from original hashcode",secondModel.hashCode(),equalTo(firstModel.hashCode()));
  SM thirdModel=(SM)copyModel(secondModel);
  assertTrue("smoothing model is not equal to self",thirdModel.equals(thirdModel));
  assertTrue("smoothing model is not equal to its copy",secondModel.equals(thirdModel));
  assertThat("smoothing model copy's hashcode is different from original hashcode",secondModel.hashCode(),equalTo(thirdModel.hashCode()));
  assertTrue("equals is not transitive",firstModel.equals(thirdModel));
  assertThat("smoothing model copy's hashcode is different from original hashcode",firstModel.hashCode(),equalTo(thirdModel.hashCode()));
  assertTrue("equals is not symmetric",thirdModel.equals(secondModel));
  assertTrue("equals is not symmetric",thirdModel.equals(firstModel));
}
