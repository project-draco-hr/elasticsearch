{
  clearAttributes();
  while (true) {
    if (bufferStart >= bufferEnd - maxGram - 1 && !exhausted) {
      System.arraycopy(buffer,bufferStart,buffer,0,bufferEnd - bufferStart);
      bufferEnd-=bufferStart;
      lastCheckedChar-=bufferStart;
      lastNonTokenChar-=bufferStart;
      bufferStart=0;
      exhausted=!charUtils.fill(charBuffer,input,buffer.length - bufferEnd);
      bufferEnd+=charUtils.toCodePoints(charBuffer.getBuffer(),0,charBuffer.getLength(),buffer,bufferEnd);
    }
    if (gramSize > maxGram || (bufferStart + gramSize) > bufferEnd) {
      if (bufferStart + 1 + minGram > bufferEnd) {
        assert exhausted;
        return false;
      }
      consume();
      gramSize=minGram;
    }
    updateLastNonTokenChar();
    final boolean termContainsNonTokenChar=lastNonTokenChar >= bufferStart && lastNonTokenChar < (bufferStart + gramSize);
    final boolean isEdgeAndPreviousCharIsTokenChar=edgesOnly && lastNonTokenChar != bufferStart - 1;
    if (termContainsNonTokenChar || isEdgeAndPreviousCharIsTokenChar) {
      consume();
      gramSize=minGram;
      continue;
    }
    final int length=charUtils.toChars(buffer,bufferStart,gramSize,termAtt.buffer(),0);
    termAtt.setLength(length);
    posIncAtt.setPositionIncrement(1);
    posLenAtt.setPositionLength(1);
    offsetAtt.setOffset(correctOffset(offset),correctOffset(offset + length));
    ++gramSize;
    return true;
  }
}
