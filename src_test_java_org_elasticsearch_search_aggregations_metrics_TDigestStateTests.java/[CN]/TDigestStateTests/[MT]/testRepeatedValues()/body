{
  final Random gen=getRandom();
  AbstractContinousDistribution mix=new AbstractContinousDistribution(){
    @Override public double nextDouble(){
      return Math.rint(gen.nextDouble() * 10) / 10.0;
    }
  }
;
  TDigestState dist=new TDigestState((double)1000);
  List<Double> data=Lists.newArrayList();
  for (int i1=0; i1 < 100000; i1++) {
    double x=mix.nextDouble();
    data.add(x);
    dist.add(x);
  }
  assertTrue("Summary is too large",dist.centroidCount() < 10 * (double)1000);
  for (int i=0; i < 10; i++) {
    double z=i / 10.0;
    for (    double delta : new double[]{0.01,0.02,0.03,0.07,0.08,0.09}) {
      double q=z + delta;
      double cdf=dist.cdf(q);
      assertEquals(String.format(Locale.ROOT,"z=%.1f, q = %.3f, cdf = %.3f",z,q,cdf),z + 0.05,cdf,0.01);
      double estimate=dist.quantile(q);
      assertEquals(String.format(Locale.ROOT,"z=%.1f, q = %.3f, cdf = %.3f, estimate = %.3f",z,q,cdf,estimate),Math.rint(q * 10) / 10.0,estimate,0.001);
    }
  }
}
