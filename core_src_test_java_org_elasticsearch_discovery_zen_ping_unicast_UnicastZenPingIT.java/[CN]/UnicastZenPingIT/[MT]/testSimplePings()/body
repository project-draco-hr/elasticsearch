{
  int startPort=11000 + randomIntBetween(0,1000);
  int endPort=startPort + 10;
  Settings settings=Settings.builder().put("cluster.name","test").put(TransportSettings.PORT.getKey(),startPort + "-" + endPort).build();
  Settings settingsMismatch=Settings.builder().put(settings).put("cluster.name","mismatch").put(TransportSettings.PORT.getKey(),startPort + "-" + endPort).build();
  ThreadPool threadPool=new TestThreadPool(getClass().getName());
  NetworkService networkService=new NetworkService(settings);
  ElectMasterService electMasterService=new ElectMasterService(settings);
  NetworkHandle handleA=startServices(settings,threadPool,networkService,"UZP_A",Version.CURRENT);
  NetworkHandle handleB=startServices(settings,threadPool,networkService,"UZP_B",Version.CURRENT);
  NetworkHandle handleC=startServices(settingsMismatch,threadPool,networkService,"UZP_C",Version.CURRENT);
  Version previousVersion=VersionUtils.getPreviousVersion(Version.CURRENT.minimumCompatibilityVersion());
  Version versionD=VersionUtils.randomVersionBetween(random(),previousVersion.minimumCompatibilityVersion(),previousVersion);
  NetworkHandle handleD=startServices(settingsMismatch,threadPool,networkService,"UZP_D",versionD);
  Settings hostsSettings=Settings.builder().putArray("discovery.zen.ping.unicast.hosts",NetworkAddress.format(new InetSocketAddress(handleA.address.address().getAddress(),handleA.address.address().getPort())),NetworkAddress.format(new InetSocketAddress(handleB.address.address().getAddress(),handleB.address.address().getPort())),NetworkAddress.format(new InetSocketAddress(handleC.address.address().getAddress(),handleC.address.address().getPort())),NetworkAddress.format(new InetSocketAddress(handleD.address.address().getAddress(),handleD.address.address().getPort()))).put("cluster.name","test").build();
  Settings hostsSettingsMismatch=Settings.builder().put(hostsSettings).put(settingsMismatch).build();
  UnicastZenPing zenPingA=new UnicastZenPing(hostsSettings,threadPool,handleA.transportService,electMasterService,null);
  zenPingA.setPingContextProvider(new PingContextProvider(){
    @Override public DiscoveryNodes nodes(){
      return DiscoveryNodes.builder().put(handleA.node).localNodeId("UZP_A").build();
    }
    @Override public boolean nodeHasJoinedClusterOnce(){
      return false;
    }
  }
);
  zenPingA.start();
  UnicastZenPing zenPingB=new UnicastZenPing(hostsSettings,threadPool,handleB.transportService,electMasterService,null);
  zenPingB.setPingContextProvider(new PingContextProvider(){
    @Override public DiscoveryNodes nodes(){
      return DiscoveryNodes.builder().put(handleB.node).localNodeId("UZP_B").build();
    }
    @Override public boolean nodeHasJoinedClusterOnce(){
      return true;
    }
  }
);
  zenPingB.start();
  UnicastZenPing zenPingC=new UnicastZenPing(hostsSettingsMismatch,threadPool,handleC.transportService,electMasterService,null){
    @Override protected Version getVersion(){
      return versionD;
    }
  }
;
  zenPingC.setPingContextProvider(new PingContextProvider(){
    @Override public DiscoveryNodes nodes(){
      return DiscoveryNodes.builder().put(handleC.node).localNodeId("UZP_C").build();
    }
    @Override public boolean nodeHasJoinedClusterOnce(){
      return false;
    }
  }
);
  zenPingC.start();
  UnicastZenPing zenPingD=new UnicastZenPing(hostsSettingsMismatch,threadPool,handleD.transportService,electMasterService,null);
  zenPingD.setPingContextProvider(new PingContextProvider(){
    @Override public DiscoveryNodes nodes(){
      return DiscoveryNodes.builder().put(handleD.node).localNodeId("UZP_D").build();
    }
    @Override public boolean nodeHasJoinedClusterOnce(){
      return false;
    }
  }
);
  zenPingD.start();
  try {
    logger.info("ping from UZP_A");
    ZenPing.PingResponse[] pingResponses=zenPingA.pingAndWait(TimeValue.timeValueSeconds(1));
    assertThat(pingResponses.length,equalTo(1));
    assertThat(pingResponses[0].node().getId(),equalTo("UZP_B"));
    assertTrue(pingResponses[0].hasJoinedOnce());
    assertCounters(handleA,handleA,handleB,handleC,handleD);
    logger.info("ping from UZP_B");
    pingResponses=zenPingB.pingAndWait(TimeValue.timeValueSeconds(1));
    assertThat(pingResponses.length,equalTo(1));
    assertThat(pingResponses[0].node().getId(),equalTo("UZP_A"));
    assertFalse(pingResponses[0].hasJoinedOnce());
    assertCounters(handleB,handleA,handleB,handleC,handleD);
    logger.info("ping from UZP_C");
    pingResponses=zenPingC.pingAndWait(TimeValue.timeValueSeconds(1));
    assertThat(pingResponses.length,equalTo(0));
    assertCounters(handleC,handleA,handleB,handleC,handleD);
    logger.info("ping from UZP_D");
    pingResponses=zenPingD.pingAndWait(TimeValue.timeValueSeconds(1));
    assertThat(pingResponses.length,equalTo(0));
    assertCounters(handleD,handleA,handleB,handleC,handleD);
  }
  finally {
    zenPingA.close();
    zenPingB.close();
    zenPingC.close();
    zenPingD.close();
    handleA.transportService.close();
    handleB.transportService.close();
    handleC.transportService.close();
    handleD.transportService.close();
    terminate(threadPool);
  }
}
