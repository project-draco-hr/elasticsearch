{
  rwl.writeLock().lock();
  try {
    if (indexWriter != null) {
      throw new EngineAlreadyStartedException(shardId);
    }
    if (closed) {
      throw new EngineClosedException(shardId);
    }
    if (logger.isDebugEnabled()) {
      logger.debug("starting engine");
    }
    try {
      this.indexWriter=createWriter();
    }
 catch (    IOException e) {
      throw new EngineCreationFailureException(shardId,"failed to create engine",e);
    }
    try {
      if (IndexReader.indexExists(store.directory())) {
        Map<String,String> commitUserData=IndexReader.getCommitUserData(store.directory());
        if (commitUserData.containsKey(Translog.TRANSLOG_ID_KEY)) {
          translogIdGenerator.set(Long.parseLong(commitUserData.get(Translog.TRANSLOG_ID_KEY)));
        }
 else {
          translogIdGenerator.set(System.currentTimeMillis());
          indexWriter.commit(MapBuilder.<String,String>newMapBuilder().put(Translog.TRANSLOG_ID_KEY,Long.toString(translogIdGenerator.get())).map());
        }
      }
 else {
        translogIdGenerator.set(System.currentTimeMillis());
        indexWriter.commit(MapBuilder.<String,String>newMapBuilder().put(Translog.TRANSLOG_ID_KEY,Long.toString(translogIdGenerator.get())).map());
      }
      translog.newTranslog(translogIdGenerator.get());
      this.searcherManager=buildSearchManager(indexWriter);
      SegmentInfos infos=new SegmentInfos();
      infos.read(store.directory());
      lastCommittedSegmentInfos=infos;
    }
 catch (    IOException e) {
      try {
        indexWriter.rollback();
      }
 catch (      IOException e1) {
      }
 finally {
        try {
          indexWriter.close();
        }
 catch (        IOException e1) {
        }
      }
      throw new EngineCreationFailureException(shardId,"failed to open reader on writer",e);
    }
  }
  finally {
    rwl.writeLock().unlock();
  }
}
