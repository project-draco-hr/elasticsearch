{
  ByteSizeValue preValue=this.indexingBufferSize;
  rwl.readLock().lock();
  try {
    if (indexingBufferSize.mbFrac() > 2048.0) {
      this.indexingBufferSize=new ByteSizeValue(2048,ByteSizeUnit.MB);
    }
 else {
      this.indexingBufferSize=indexingBufferSize;
    }
    IndexWriter indexWriter=this.indexWriter;
    if (indexWriter != null) {
      indexWriter.getConfig().setRAMBufferSizeMB(this.indexingBufferSize.mbFrac());
    }
  }
  finally {
    rwl.readLock().unlock();
  }
  if (preValue.bytes() != indexingBufferSize.bytes()) {
    if (indexingBufferSize == Engine.INACTIVE_SHARD_INDEXING_BUFFER && preValue != Engine.INACTIVE_SHARD_INDEXING_BUFFER) {
      logger.debug("updating index_buffer_size from [{}] to (inactive) [{}]",preValue,indexingBufferSize);
      try {
        flush(new Flush().full(true));
      }
 catch (      EngineClosedException e) {
      }
catch (      FlushNotAllowedEngineException e) {
      }
catch (      Exception e) {
        logger.warn("failed to flush after setting shard to inactive",e);
      }
    }
 else {
      logger.debug("updating index_buffer_size from [{}] to [{}]",preValue,indexingBufferSize);
    }
  }
}
