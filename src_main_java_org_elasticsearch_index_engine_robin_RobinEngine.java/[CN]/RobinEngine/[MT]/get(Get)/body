{
  rwl.readLock().lock();
  try {
    if (get.realtime()) {
      VersionValue versionValue=versionMap.get(versionKey(get.uid()));
      if (versionValue != null) {
        if (versionValue.delete()) {
          return GetResult.NOT_EXISTS;
        }
        if (!get.loadSource()) {
          return new GetResult(true,versionValue.version(),null);
        }
        byte[] data=translog.read(versionValue.translogLocation());
        if (data != null) {
          try {
            Translog.Source source=TranslogStreams.readSource(data);
            return new GetResult(true,versionValue.version(),source);
          }
 catch (          IOException e) {
          }
        }
      }
    }
    Searcher searcher=searcher();
    try {
      final Versions.DocIdAndVersion docIdAndVersion=Versions.loadDocIdAndVersion(searcher.reader(),get.uid());
      if (docIdAndVersion != null) {
        return new GetResult(searcher,docIdAndVersion);
      }
    }
 catch (    Exception e) {
      searcher.release();
      throw new EngineException(shardId(),"Couldn't resolve version",e);
    }
    searcher.release();
    return GetResult.NOT_EXISTS;
  }
  finally {
    rwl.readLock().unlock();
  }
}
