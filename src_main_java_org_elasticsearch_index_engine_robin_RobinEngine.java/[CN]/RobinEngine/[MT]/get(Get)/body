{
  rwl.readLock().lock();
  try {
    if (get.realtime()) {
      VersionValue versionValue=versionMap.get(versionKey(get.uid()));
      if (versionValue != null) {
        if (versionValue.delete()) {
          return GetResult.NOT_EXISTS;
        }
        if (get.version() != Versions.MATCH_ANY) {
          if (get.versionType().isVersionConflict(versionValue.version(),get.version())) {
            Uid uid=Uid.createUid(get.uid().text());
            throw new VersionConflictEngineException(shardId,uid.type(),uid.id(),versionValue.version(),get.version());
          }
        }
        if (!get.loadSource()) {
          return new GetResult(true,versionValue.version(),null);
        }
        byte[] data=translog.read(versionValue.translogLocation());
        if (data != null) {
          try {
            Translog.Source source=TranslogStreams.readSource(data);
            return new GetResult(true,versionValue.version(),source);
          }
 catch (          IOException e) {
          }
        }
      }
    }
    Searcher searcher=acquireSearcher();
    final Versions.DocIdAndVersion docIdAndVersion;
    try {
      docIdAndVersion=Versions.loadDocIdAndVersion(searcher.reader(),get.uid());
    }
 catch (    Throwable e) {
      searcher.release();
      throw new EngineException(shardId(),"Couldn't resolve version",e);
    }
    if (get.version() != Versions.MATCH_ANY && docIdAndVersion != null) {
      if (get.versionType().isVersionConflict(docIdAndVersion.version,get.version())) {
        searcher.release();
        Uid uid=Uid.createUid(get.uid().text());
        throw new VersionConflictEngineException(shardId,uid.type(),uid.id(),docIdAndVersion.version,get.version());
      }
    }
    if (docIdAndVersion != null) {
      return new GetResult(searcher,docIdAndVersion);
    }
 else {
      searcher.release();
      return GetResult.NOT_EXISTS;
    }
  }
  finally {
    rwl.readLock().unlock();
  }
}
