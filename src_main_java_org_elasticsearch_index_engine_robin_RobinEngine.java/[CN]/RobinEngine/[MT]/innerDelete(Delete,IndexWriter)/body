{
synchronized (dirtyLock(delete.uid())) {
    final long currentVersion;
    HashedBytesRef versionKey=versionKey(delete.uid());
    VersionValue versionValue=versionMap.get(versionKey);
    if (versionValue == null) {
      currentVersion=loadCurrentVersionFromIndex(delete.uid());
    }
 else {
      if (enableGcDeletes && versionValue.delete() && (threadPool.estimatedTimeInMillis() - versionValue.time()) > gcDeletesInMillis) {
        currentVersion=Versions.NOT_FOUND;
      }
 else {
        currentVersion=versionValue.version();
      }
    }
    long updatedVersion;
    long expectedVersion=delete.version();
    if (delete.origin() == Operation.Origin.PRIMARY) {
      if (delete.versionType().isVersionConflict(currentVersion,expectedVersion)) {
        throw new VersionConflictEngineException(shardId,delete.type(),delete.id(),currentVersion,expectedVersion);
      }
      updatedVersion=delete.versionType().updateVersion(currentVersion,expectedVersion);
    }
 else {
      if (VersionType.EXTERNAL.isVersionConflict(currentVersion,expectedVersion)) {
        if (delete.origin() == Operation.Origin.RECOVERY) {
          return;
        }
 else {
          throw new VersionConflictEngineException(shardId,delete.type(),delete.id(),currentVersion - 1,expectedVersion);
        }
      }
      updatedVersion=VersionType.EXTERNAL.updateVersion(currentVersion,expectedVersion);
    }
    if (currentVersion == Versions.NOT_FOUND) {
      delete.version(updatedVersion).notFound(true);
      Translog.Location translogLocation=translog.add(new Translog.Delete(delete));
      versionMap.put(versionKey,new VersionValue(updatedVersion,true,threadPool.estimatedTimeInMillis(),translogLocation));
    }
 else     if (versionValue != null && versionValue.delete()) {
      delete.version(updatedVersion).notFound(true);
      Translog.Location translogLocation=translog.add(new Translog.Delete(delete));
      versionMap.put(versionKey,new VersionValue(updatedVersion,true,threadPool.estimatedTimeInMillis(),translogLocation));
    }
 else {
      delete.version(updatedVersion);
      writer.deleteDocuments(delete.uid());
      Translog.Location translogLocation=translog.add(new Translog.Delete(delete));
      versionMap.put(versionKey,new VersionValue(updatedVersion,true,threadPool.estimatedTimeInMillis(),translogLocation));
    }
    indexingService.postDeleteUnderLock(delete);
  }
}
