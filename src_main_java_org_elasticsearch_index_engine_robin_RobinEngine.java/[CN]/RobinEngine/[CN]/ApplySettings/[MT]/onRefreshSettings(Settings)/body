{
  long gcDeletesInMillis=settings.getAsTime(INDEX_GC_DELETES,TimeValue.timeValueMillis(RobinEngine.this.gcDeletesInMillis)).millis();
  if (gcDeletesInMillis != RobinEngine.this.gcDeletesInMillis) {
    logger.info("updating index.gc_deletes from [{}] to [{}]",TimeValue.timeValueMillis(RobinEngine.this.gcDeletesInMillis),TimeValue.timeValueMillis(gcDeletesInMillis));
    RobinEngine.this.gcDeletesInMillis=gcDeletesInMillis;
  }
  final boolean compoundOnFlush=settings.getAsBoolean(INDEX_COMPOUND_ON_FLUSH,RobinEngine.this.compoundOnFlush);
  if (compoundOnFlush != RobinEngine.this.compoundOnFlush) {
    logger.info("updating {} from [{}] to [{}]",RobinEngine.INDEX_COMPOUND_ON_FLUSH,RobinEngine.this.compoundOnFlush,compoundOnFlush);
    RobinEngine.this.compoundOnFlush=compoundOnFlush;
    indexWriter.getConfig().setUseCompoundFile(compoundOnFlush);
  }
  int indexConcurrency=settings.getAsInt(INDEX_INDEX_CONCURRENCY,RobinEngine.this.indexConcurrency);
  boolean failOnMergeFailure=settings.getAsBoolean(INDEX_FAIL_ON_MERGE_FAILURE,RobinEngine.this.failOnMergeFailure);
  String codecName=settings.get(INDEX_CODEC,RobinEngine.this.codecName);
  final boolean codecBloomLoad=settings.getAsBoolean(CodecService.INDEX_CODEC_BLOOM_LOAD,codecService.isLoadBloomFilter());
  boolean requiresFlushing=false;
  if (indexConcurrency != RobinEngine.this.indexConcurrency || !codecName.equals(RobinEngine.this.codecName) || failOnMergeFailure != RobinEngine.this.failOnMergeFailure || codecBloomLoad != codecService.isLoadBloomFilter()) {
    rwl.readLock().lock();
    try {
      if (indexConcurrency != RobinEngine.this.indexConcurrency) {
        logger.info("updating index.index_concurrency from [{}] to [{}]",RobinEngine.this.indexConcurrency,indexConcurrency);
        RobinEngine.this.indexConcurrency=indexConcurrency;
        requiresFlushing=true;
      }
      if (!codecName.equals(RobinEngine.this.codecName)) {
        logger.info("updating index.codec from [{}] to [{}]",RobinEngine.this.codecName,codecName);
        RobinEngine.this.codecName=codecName;
        requiresFlushing=true;
      }
      if (failOnMergeFailure != RobinEngine.this.failOnMergeFailure) {
        logger.info("updating {} from [{}] to [{}]",RobinEngine.INDEX_FAIL_ON_MERGE_FAILURE,RobinEngine.this.failOnMergeFailure,failOnMergeFailure);
        RobinEngine.this.failOnMergeFailure=failOnMergeFailure;
      }
      if (codecBloomLoad != codecService.isLoadBloomFilter()) {
        logger.info("updating {} from [{}] to [{}]",CodecService.INDEX_CODEC_BLOOM_LOAD,codecService.isLoadBloomFilter(),codecBloomLoad);
        codecService.setLoadBloomFilter(codecBloomLoad);
        requiresFlushing=true;
      }
    }
  finally {
      rwl.readLock().unlock();
    }
    if (requiresFlushing) {
      flush(new Flush().type(Flush.Type.NEW_WRITER));
    }
  }
}
