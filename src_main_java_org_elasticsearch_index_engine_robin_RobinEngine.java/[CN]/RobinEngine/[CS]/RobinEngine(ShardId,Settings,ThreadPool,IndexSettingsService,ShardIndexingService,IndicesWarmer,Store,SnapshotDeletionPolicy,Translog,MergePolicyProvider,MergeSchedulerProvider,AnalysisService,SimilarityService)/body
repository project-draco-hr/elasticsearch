{
  super(shardId,indexSettings);
  Preconditions.checkNotNull(store,"Store must be provided to the engine");
  Preconditions.checkNotNull(deletionPolicy,"Snapshot deletion policy must be provided to the engine");
  Preconditions.checkNotNull(translog,"Translog must be provided to the engine");
  this.gcDeletesInMillis=indexSettings.getAsTime("index.gc_deletes",TimeValue.timeValueSeconds(60)).millis();
  this.indexingBufferSize=componentSettings.getAsBytesSize("index_buffer_size",new ByteSizeValue(64,ByteSizeUnit.MB));
  this.termIndexInterval=indexSettings.getAsInt("index.term_index_interval",IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL);
  this.termIndexDivisor=indexSettings.getAsInt("index.term_index_divisor",1);
  this.threadPool=threadPool;
  this.indexSettingsService=indexSettingsService;
  this.indexingService=indexingService;
  this.warmer=(InternalIndicesWarmer)warmer;
  this.store=store;
  this.deletionPolicy=deletionPolicy;
  this.translog=translog;
  this.mergePolicyProvider=mergePolicyProvider;
  this.mergeScheduler=mergeScheduler;
  this.analysisService=analysisService;
  this.similarityService=similarityService;
  this.indexConcurrency=indexSettings.getAsInt("index.index_concurrency",IndexWriterConfig.DEFAULT_MAX_THREAD_STATES);
  this.versionMap=ConcurrentCollections.newConcurrentMap();
  this.dirtyLocks=new Object[indexConcurrency * 50];
  for (int i=0; i < dirtyLocks.length; i++) {
    dirtyLocks[i]=new Object();
  }
  this.indexSettingsService.addListener(applySettings);
}
