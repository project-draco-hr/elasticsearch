{
  Float minScore=randomBoolean() ? null : 1.0f;
  CombineFunction combineFunction=randomFrom(CombineFunction.values());
  float maxBoost=randomBoolean() ? Float.POSITIVE_INFINITY : randomFloat();
  ScoreFunction function=randomBoolean() ? null : new DummyScoreFunction(combineFunction);
  FunctionScoreQuery q=new FunctionScoreQuery(new TermQuery(new Term("foo","bar")),function,minScore,combineFunction,maxBoost);
  FunctionScoreQuery q1=new FunctionScoreQuery(new TermQuery(new Term("foo","bar")),function,minScore,combineFunction,maxBoost);
  assertEquals(q,q);
  assertEquals(q.hashCode(),q.hashCode());
  assertEquals(q,q1);
  assertEquals(q.hashCode(),q1.hashCode());
  FunctionScoreQuery diffQuery=new FunctionScoreQuery(new TermQuery(new Term("foo","baz")),function,minScore,combineFunction,maxBoost);
  FunctionScoreQuery diffMinScore=new FunctionScoreQuery(q.getSubQuery(),function,minScore == null ? 1.0f : null,combineFunction,maxBoost);
  ScoreFunction otherFunciton=function == null ? new DummyScoreFunction(combineFunction) : null;
  FunctionScoreQuery diffFunction=new FunctionScoreQuery(q.getSubQuery(),otherFunciton,minScore,combineFunction,maxBoost);
  FunctionScoreQuery diffMaxBoost=new FunctionScoreQuery(new TermQuery(new Term("foo","bar")),function,minScore,combineFunction,maxBoost == 1.0f ? 0.9f : 1.0f);
  FunctionScoreQuery[] queries=new FunctionScoreQuery[]{diffFunction,diffMinScore,diffQuery,q,diffMaxBoost};
  final int numIters=randomIntBetween(20,100);
  for (int i=0; i < numIters; i++) {
    FunctionScoreQuery left=randomFrom(queries);
    FunctionScoreQuery right=randomFrom(queries);
    if (left == right) {
      assertEquals(left,right);
      assertEquals(left.hashCode(),right.hashCode());
    }
 else {
      assertNotEquals(left + " == " + right,left,right);
    }
  }
}
