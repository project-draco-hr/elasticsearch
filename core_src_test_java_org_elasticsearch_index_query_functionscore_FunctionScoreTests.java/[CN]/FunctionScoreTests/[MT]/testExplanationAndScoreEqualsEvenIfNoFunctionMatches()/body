{
  IndexSearcher localSearcher=newSearcher(reader);
  ScoreMode scoreMode=randomFrom(new ScoreMode[]{ScoreMode.SUM,ScoreMode.AVG,ScoreMode.FIRST,ScoreMode.MIN,ScoreMode.MAX,ScoreMode.MULTIPLY});
  CombineFunction combineFunction=randomFrom(new CombineFunction[]{CombineFunction.SUM,CombineFunction.AVG,CombineFunction.MIN,CombineFunction.MAX,CombineFunction.MULTIPLY,CombineFunction.REPLACE});
  FiltersFunctionScoreQuery query=new FiltersFunctionScoreQuery(new TermQuery(new Term(FIELD,"out")),scoreMode,new FilterFunction[]{new FilterFunction(new TermQuery(new Term("_uid","2")),new WeightFactorFunction(10))},Float.MAX_VALUE,Float.NEGATIVE_INFINITY,combineFunction);
  TopDocs searchResult=localSearcher.search(query,1);
  Explanation explanation=localSearcher.explain(query,searchResult.scoreDocs[0].doc);
  assertThat(searchResult.scoreDocs[0].score,equalTo(explanation.getValue()));
  query=new FiltersFunctionScoreQuery(new TermQuery(new Term(FIELD,"out")),scoreMode,new FilterFunction[]{new FilterFunction(new TermQuery(new Term("_uid","1")),new WeightFactorFunction(10))},Float.MAX_VALUE,Float.NEGATIVE_INFINITY,combineFunction);
  searchResult=localSearcher.search(query,1);
  explanation=localSearcher.explain(query,searchResult.scoreDocs[0].doc);
  assertThat(searchResult.scoreDocs[0].score,equalTo(explanation.getValue()));
}
