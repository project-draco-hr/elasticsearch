{
  int numFunctions=randomIntBetween(1,3);
  float[] weights=randomFloats(numFunctions);
  double[] scores=randomDoubles(numFunctions);
  ScoreFunctionStub[] scoreFunctionStubs=new ScoreFunctionStub[numFunctions];
  for (int i=0; i < numFunctions; i++) {
    scoreFunctionStubs[i]=new ScoreFunctionStub(scores[i]);
  }
  WeightFactorFunction[] weightFunctionStubs=new WeightFactorFunction[numFunctions];
  for (int i=0; i < numFunctions; i++) {
    weightFunctionStubs[i]=new WeightFactorFunction(weights[i],scoreFunctionStubs[i]);
  }
  Query filtersFunctionScoreQueryWithWeights=getFiltersFunctionScoreQuery(FiltersFunctionScoreQuery.ScoreMode.MULTIPLY,CombineFunction.REPLACE,weightFunctionStubs);
  TopDocs topDocsWithWeights=searcher.search(filtersFunctionScoreQueryWithWeights,1);
  float scoreWithWeight=topDocsWithWeights.scoreDocs[0].score;
  double score=1;
  for (int i=0; i < weights.length; i++) {
    score*=weights[i] * scores[i];
  }
  assertThat(scoreWithWeight / (float)score,is(1f));
  float explainedScore=getExplanation(searcher,filtersFunctionScoreQueryWithWeights).getValue();
  assertThat(explainedScore / scoreWithWeight,is(1f));
  filtersFunctionScoreQueryWithWeights=getFiltersFunctionScoreQuery(FiltersFunctionScoreQuery.ScoreMode.SUM,CombineFunction.REPLACE,weightFunctionStubs);
  topDocsWithWeights=searcher.search(filtersFunctionScoreQueryWithWeights,1);
  scoreWithWeight=topDocsWithWeights.scoreDocs[0].score;
  double sum=0;
  for (int i=0; i < weights.length; i++) {
    sum+=weights[i] * scores[i];
  }
  assertThat(scoreWithWeight / (float)sum,is(1f));
  explainedScore=getExplanation(searcher,filtersFunctionScoreQueryWithWeights).getValue();
  assertThat(explainedScore / scoreWithWeight,is(1f));
  filtersFunctionScoreQueryWithWeights=getFiltersFunctionScoreQuery(FiltersFunctionScoreQuery.ScoreMode.AVG,CombineFunction.REPLACE,weightFunctionStubs);
  topDocsWithWeights=searcher.search(filtersFunctionScoreQueryWithWeights,1);
  scoreWithWeight=topDocsWithWeights.scoreDocs[0].score;
  double norm=0;
  sum=0;
  for (int i=0; i < weights.length; i++) {
    norm+=weights[i];
    sum+=weights[i] * scores[i];
  }
  assertThat(scoreWithWeight / (float)(sum / norm),is(1f));
  explainedScore=getExplanation(searcher,filtersFunctionScoreQueryWithWeights).getValue();
  assertThat(explainedScore / scoreWithWeight,is(1f));
  filtersFunctionScoreQueryWithWeights=getFiltersFunctionScoreQuery(FiltersFunctionScoreQuery.ScoreMode.MIN,CombineFunction.REPLACE,weightFunctionStubs);
  topDocsWithWeights=searcher.search(filtersFunctionScoreQueryWithWeights,1);
  scoreWithWeight=topDocsWithWeights.scoreDocs[0].score;
  double min=Double.POSITIVE_INFINITY;
  for (int i=0; i < weights.length; i++) {
    min=Math.min(min,weights[i] * scores[i]);
  }
  assertThat(scoreWithWeight / (float)min,is(1f));
  explainedScore=getExplanation(searcher,filtersFunctionScoreQueryWithWeights).getValue();
  assertThat(explainedScore / scoreWithWeight,is(1f));
  filtersFunctionScoreQueryWithWeights=getFiltersFunctionScoreQuery(FiltersFunctionScoreQuery.ScoreMode.MAX,CombineFunction.REPLACE,weightFunctionStubs);
  topDocsWithWeights=searcher.search(filtersFunctionScoreQueryWithWeights,1);
  scoreWithWeight=topDocsWithWeights.scoreDocs[0].score;
  double max=Double.NEGATIVE_INFINITY;
  for (int i=0; i < weights.length; i++) {
    max=Math.max(max,weights[i] * scores[i]);
  }
  assertThat(scoreWithWeight / (float)max,is(1f));
  explainedScore=getExplanation(searcher,filtersFunctionScoreQueryWithWeights).getValue();
  assertThat(explainedScore / scoreWithWeight,is(1f));
}
