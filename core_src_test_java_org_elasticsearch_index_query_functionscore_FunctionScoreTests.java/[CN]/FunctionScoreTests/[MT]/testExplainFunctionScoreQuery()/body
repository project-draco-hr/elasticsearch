{
  Explanation functionExplanation=getFunctionScoreExplanation(searcher,RANDOM_SCORE_FUNCTION);
  checkFunctionScoreExplanation(functionExplanation,"random score function (seed: 0)");
  assertThat(functionExplanation.getDetails()[0].getDetails().length,equalTo(0));
  functionExplanation=getFunctionScoreExplanation(searcher,FIELD_VALUE_FACTOR_FUNCTION);
  checkFunctionScoreExplanation(functionExplanation,"field value function: ln(doc['test'].value?:1.0 * factor=1.0)");
  assertThat(functionExplanation.getDetails()[0].getDetails().length,equalTo(0));
  functionExplanation=getFunctionScoreExplanation(searcher,GAUSS_DECAY_FUNCTION);
  checkFunctionScoreExplanation(functionExplanation,"Function for field test:");
  assertThat(functionExplanation.getDetails()[0].getDetails()[0].toString(),equalTo("0.1 = exp(-0.5*pow(MAX[Math.max(Math.abs(1.0(=doc value) - 0.0(=origin))) - 0.0(=offset), 0)],2.0)/0.21714724095162594)\n"));
  assertThat(functionExplanation.getDetails()[0].getDetails()[0].getDetails().length,equalTo(0));
  functionExplanation=getFunctionScoreExplanation(searcher,EXP_DECAY_FUNCTION);
  checkFunctionScoreExplanation(functionExplanation,"Function for field test:");
  assertThat(functionExplanation.getDetails()[0].getDetails()[0].toString(),equalTo("0.1 = exp(- MAX[Math.max(Math.abs(1.0(=doc value) - 0.0(=origin))) - 0.0(=offset), 0)] * 2.3025850929940455)\n"));
  assertThat(functionExplanation.getDetails()[0].getDetails()[0].getDetails().length,equalTo(0));
  functionExplanation=getFunctionScoreExplanation(searcher,LIN_DECAY_FUNCTION);
  checkFunctionScoreExplanation(functionExplanation,"Function for field test:");
  assertThat(functionExplanation.getDetails()[0].getDetails()[0].toString(),equalTo("0.1 = max(0.0, ((1.1111111111111112 - MAX[Math.max(Math.abs(1.0(=doc value) - 0.0(=origin))) - 0.0(=offset), 0)])/1.1111111111111112)\n"));
  assertThat(functionExplanation.getDetails()[0].getDetails()[0].getDetails().length,equalTo(0));
  functionExplanation=getFunctionScoreExplanation(searcher,WEIGHT_FACTOR_FUNCTION);
  checkFunctionScoreExplanation(functionExplanation,"product of:");
  assertThat(functionExplanation.getDetails()[0].getDetails()[0].toString(),equalTo("1.0 = constant score 1.0 - no function provided\n"));
  assertThat(functionExplanation.getDetails()[0].getDetails()[1].toString(),equalTo("4.0 = weight\n"));
  assertThat(functionExplanation.getDetails()[0].getDetails()[0].getDetails().length,equalTo(0));
  assertThat(functionExplanation.getDetails()[0].getDetails()[1].getDetails().length,equalTo(0));
}
