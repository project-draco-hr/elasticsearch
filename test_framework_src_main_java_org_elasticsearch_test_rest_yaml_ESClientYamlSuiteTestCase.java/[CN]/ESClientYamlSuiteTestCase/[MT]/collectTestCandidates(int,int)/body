{
  List<ClientYamlTestCandidate> testCandidates=new ArrayList<>();
  FileSystem fileSystem=getFileSystem();
  try {
    String[] paths=resolvePathsProperty(REST_TESTS_SUITE,DEFAULT_TESTS_PATH);
    Map<String,Set<Path>> yamlSuites=FileUtils.findYamlSuites(fileSystem,DEFAULT_TESTS_PATH,paths);
    ClientYamlTestSuiteParser restTestSuiteParser=new ClientYamlTestSuiteParser();
    for (    String api : yamlSuites.keySet()) {
      List<Path> yamlFiles=new ArrayList<>(yamlSuites.get(api));
      for (      Path yamlFile : yamlFiles) {
        String key=api + yamlFile.getFileName().toString();
        if (mustExecute(key,id,count)) {
          ClientYamlTestSuite restTestSuite=restTestSuiteParser.parse(api,yamlFile);
          for (          ClientYamlTestSection testSection : restTestSuite.getTestSections()) {
            testCandidates.add(new ClientYamlTestCandidate(restTestSuite,testSection));
          }
        }
      }
    }
  }
  finally {
    IOUtils.close(fileSystem);
  }
  Collections.sort(testCandidates,new Comparator<ClientYamlTestCandidate>(){
    @Override public int compare(    ClientYamlTestCandidate o1,    ClientYamlTestCandidate o2){
      return o1.getTestPath().compareTo(o2.getTestPath());
    }
  }
);
  return testCandidates;
}
