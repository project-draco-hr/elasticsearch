{
  int copied=0;
  boolean escaped=false;
  boolean prefix=false;
  boolean fuzzy=false;
  while (state.index < state.length) {
    if (!escaped) {
      if (state.data[state.index] == '\\' && (flags & ESCAPE_OPERATOR) != 0) {
        escaped=true;
        prefix=false;
        ++state.index;
        continue;
      }
 else       if (tokenFinished(state)) {
        break;
      }
 else       if (copied > 0 && state.data[state.index] == '~' && (flags & FUZZY_OPERATOR) != 0) {
        fuzzy=true;
        break;
      }
      prefix=copied > 0 && state.data[state.index] == '*' && (flags & PREFIX_OPERATOR) != 0;
    }
    escaped=false;
    state.buffer[copied++]=state.data[state.index++];
  }
  if (copied > 0) {
    final Query branch;
    if (fuzzy && (flags & FUZZY_OPERATOR) != 0) {
      String token=new String(state.buffer,0,copied);
      int fuzziness=parseFuzziness(state);
      fuzziness=Math.min(fuzziness,LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE);
      if (fuzziness == 0) {
        branch=newDefaultQuery(token);
      }
 else {
        branch=newFuzzyQuery(token,fuzziness);
      }
    }
 else     if (prefix) {
      String token=new String(state.buffer,0,copied - 1);
      branch=newPrefixQuery(token);
    }
 else {
      String token=new String(state.buffer,0,copied);
      branch=newDefaultQuery(token);
    }
    buildQueryTree(state,branch);
  }
}
