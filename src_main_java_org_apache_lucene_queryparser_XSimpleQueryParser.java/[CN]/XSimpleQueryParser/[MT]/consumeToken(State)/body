{
  int copied=0;
  boolean escaped=false;
  boolean prefix=false;
  while (state.index < state.length) {
    if (!escaped) {
      if (state.data[state.index] == '\\' && (flags & ESCAPE_OPERATOR) != 0) {
        escaped=true;
        prefix=false;
        ++state.index;
        continue;
      }
 else       if ((state.data[state.index] == '"' && (flags & PHRASE_OPERATOR) != 0) || (state.data[state.index] == '|' && (flags & OR_OPERATOR) != 0) || (state.data[state.index] == '+' && (flags & AND_OPERATOR) != 0)|| (state.data[state.index] == '(' && (flags & PRECEDENCE_OPERATORS) != 0)|| (state.data[state.index] == ')' && (flags & PRECEDENCE_OPERATORS) != 0)|| ((state.data[state.index] == ' ' || state.data[state.index] == '\t' || state.data[state.index] == '\n' || state.data[state.index] == '\r') && (flags & WHITESPACE_OPERATOR) != 0)) {
        break;
      }
      prefix=copied > 0 && state.data[state.index] == '*' && (flags & PREFIX_OPERATOR) != 0;
    }
    escaped=false;
    state.buffer[copied++]=state.data[state.index++];
  }
  if (copied > 0) {
    final Query branch;
    if (prefix) {
      String token=new String(state.buffer,0,copied - 1);
      branch=newPrefixQuery(token);
    }
 else {
      String token=new String(state.buffer,0,copied);
      branch=newDefaultQuery(token);
    }
    buildQueryTree(state,branch);
  }
}
