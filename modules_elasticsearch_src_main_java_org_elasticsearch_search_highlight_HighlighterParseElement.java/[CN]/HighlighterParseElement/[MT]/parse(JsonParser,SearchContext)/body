{
  JsonToken token;
  String topLevelFieldName=null;
  List<SearchContextHighlight.ParsedHighlightField> fields=newArrayList();
  String[] preTags=DEFAULT_PRE_TAGS;
  String[] postTags=DEFAULT_POST_TAGS;
  boolean scoreOrdered=false;
  boolean highlightFilter=true;
  while ((token=jp.nextToken()) != JsonToken.END_OBJECT) {
    if (token == JsonToken.FIELD_NAME) {
      topLevelFieldName=jp.getCurrentName();
    }
 else     if (token == JsonToken.START_ARRAY) {
      if ("pre_tags".equals(topLevelFieldName) || "preTags".equals(topLevelFieldName)) {
        List<String> preTagsList=Lists.newArrayList();
        while ((token=jp.nextToken()) != JsonToken.END_ARRAY) {
          preTagsList.add(jp.getText());
        }
        preTags=preTagsList.toArray(new String[preTagsList.size()]);
      }
 else       if ("post_tags".equals(topLevelFieldName) || "postTags".equals(topLevelFieldName)) {
        List<String> postTagsList=Lists.newArrayList();
        while ((token=jp.nextToken()) != JsonToken.END_ARRAY) {
          postTagsList.add(jp.getText());
        }
        postTags=postTagsList.toArray(new String[postTagsList.size()]);
      }
    }
 else     if (token == JsonToken.VALUE_STRING) {
      if ("order".equals(topLevelFieldName)) {
        if ("score".equals(jp.getText())) {
          scoreOrdered=true;
        }
 else {
          scoreOrdered=false;
        }
      }
 else       if ("tags_schema".equals(topLevelFieldName) || "tagsSchema".equals(topLevelFieldName)) {
        String schema=jp.getText();
        if ("styled".equals(schema)) {
          preTags=STYLED_PRE_TAG;
          postTags=STYLED_POST_TAGS;
        }
      }
 else       if ("highlight_filter".equals(topLevelFieldName) || "highlightFilter".equals(topLevelFieldName)) {
        highlightFilter=Booleans.parseBoolean(jp.getText(),true);
      }
    }
 else     if (token == JsonToken.VALUE_NUMBER_INT) {
      if ("highlight_filter".equals(topLevelFieldName) || "highlightFilter".equals(topLevelFieldName)) {
        highlightFilter=jp.getIntValue() != 0;
      }
    }
 else     if (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE) {
      if ("highlight_filter".equals(topLevelFieldName) || "highlightFilter".equals(topLevelFieldName)) {
        highlightFilter=token == JsonToken.VALUE_TRUE;
      }
    }
 else     if (token == JsonToken.START_OBJECT) {
      if ("fields".equals(topLevelFieldName)) {
        String highlightFieldName=null;
        while ((token=jp.nextToken()) != JsonToken.END_OBJECT) {
          if (token == JsonToken.FIELD_NAME) {
            highlightFieldName=jp.getCurrentName();
          }
 else           if (token == JsonToken.START_OBJECT) {
            String fieldName=null;
            int fragmentSize=100;
            int numOfFragments=5;
            while ((token=jp.nextToken()) != JsonToken.END_OBJECT) {
              if (token == JsonToken.FIELD_NAME) {
                fieldName=jp.getCurrentName();
              }
 else               if (token == JsonToken.VALUE_STRING) {
                if ("fragment_size".equals(fieldName) || "fragmentSize".equals(fieldName)) {
                  fragmentSize=Integer.parseInt(jp.getText());
                }
 else                 if ("number_of_fragments".equals(fieldName) || "numberOfFragments".equals(fieldName)) {
                  numOfFragments=Integer.parseInt(jp.getText());
                }
              }
 else               if (token == JsonToken.VALUE_NUMBER_INT) {
                if ("fragment_size".equals(fieldName) || "fragmentSize".equals(fieldName)) {
                  fragmentSize=jp.getIntValue();
                }
 else                 if ("number_of_fragments".equals(fieldName) || "numberOfFragments".equals(fieldName)) {
                  numOfFragments=jp.getIntValue();
                }
              }
            }
            fields.add(new SearchContextHighlight.ParsedHighlightField(highlightFieldName,fragmentSize,numOfFragments));
          }
        }
      }
    }
  }
  if (preTags != null && postTags == null) {
    throw new SearchParseException(context,"Highlighter preTags are set, but postTags are not set");
  }
  context.highlight(new SearchContextHighlight(fields,preTags,postTags,scoreOrdered,highlightFilter));
}
