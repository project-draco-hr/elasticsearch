{
  client().admin().indices().prepareStats().clear().execute().actionGet();
  final int numNodes=cluster().numDataNodes();
  assertThat(numNodes,greaterThanOrEqualTo(2));
  final int shardsIdx1=randomIntBetween(1,10);
  final int shardsIdx2=Math.max(numNodes - shardsIdx1,randomIntBetween(1,10));
  final int totalShards=shardsIdx1 + shardsIdx2;
  assertThat(numNodes,lessThanOrEqualTo(totalShards));
  assertAcked(prepareCreate("test1").setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS,shardsIdx1).put(SETTING_NUMBER_OF_REPLICAS,0)).addMapping("type","f","type=string"));
  assertAcked(prepareCreate("test2").setSettings(Settings.builder().put(SETTING_NUMBER_OF_SHARDS,shardsIdx2).put(SETTING_NUMBER_OF_REPLICAS,0)).addMapping("type","f","type=string"));
  assertThat(shardsIdx1 + shardsIdx2,equalTo(numAssignedShards("test1","test2")));
  assertThat(numAssignedShards("test1","test2"),greaterThanOrEqualTo(2));
  ensureGreen();
  for (int i=0; i < randomIntBetween(20,100); i++) {
    index("test" + ((i % 2) + 1),"type","" + i,"f","test" + i);
  }
  refresh();
  int suggestAllIdx=scaledRandomIntBetween(20,50);
  int suggestIdx1=scaledRandomIntBetween(20,50);
  int suggestIdx2=scaledRandomIntBetween(20,50);
  long startTime=System.currentTimeMillis();
  for (int i=0; i < suggestAllIdx; i++) {
    SuggestResponse suggestResponse=addSuggestions(internalCluster().clientNodeClient().prepareSuggest(),i).get();
    assertAllSuccessful(suggestResponse);
  }
  for (int i=0; i < suggestIdx1; i++) {
    SuggestResponse suggestResponse=addSuggestions(internalCluster().clientNodeClient().prepareSuggest("test1"),i).get();
    assertAllSuccessful(suggestResponse);
  }
  for (int i=0; i < suggestIdx2; i++) {
    SuggestResponse suggestResponse=addSuggestions(internalCluster().clientNodeClient().prepareSuggest("test2"),i).get();
    assertAllSuccessful(suggestResponse);
  }
  long endTime=System.currentTimeMillis();
  IndicesStatsResponse indicesStats=client().admin().indices().prepareStats().execute().actionGet();
  assertThat(indicesStats.getTotal().getSuggest().getCurrent(),equalTo(0L));
  assertThat(indicesStats.getTotal().getSuggest().getCount(),equalTo((long)(suggestAllIdx * totalShards + suggestIdx1 * shardsIdx1 + suggestIdx2 * shardsIdx2)));
  assertThat(indicesStats.getIndices().get("test1").getTotal().getSuggest().getCount(),equalTo((long)((suggestAllIdx + suggestIdx1) * shardsIdx1)));
  assertThat(indicesStats.getIndices().get("test2").getTotal().getSuggest().getCount(),equalTo((long)((suggestAllIdx + suggestIdx2) * shardsIdx2)));
  logger.info("iter {}, iter1 {}, iter2 {}, {}",suggestAllIdx,suggestIdx1,suggestIdx2,endTime - startTime);
  assertThat(indicesStats.getTotal().getSuggest().getTimeInMillis(),greaterThan(0L));
  assertThat(indicesStats.getTotal().getSuggest().getTimeInMillis(),lessThanOrEqualTo(totalShards * (endTime - startTime)));
  NodesStatsResponse nodeStats=client().admin().cluster().prepareNodesStats().execute().actionGet();
  NodeStats[] nodes=nodeStats.getNodes();
  Set<String> nodeIdsWithIndex=nodeIdsWithIndex("test1","test2");
  int num=0;
  for (  NodeStats stat : nodes) {
    SuggestStats suggestStats=stat.getIndices().getSuggest();
    logger.info("evaluating {}",stat.getNode());
    if (nodeIdsWithIndex.contains(stat.getNode().getId())) {
      assertThat(suggestStats.getCount(),greaterThan(0L));
      assertThat(suggestStats.getTimeInMillis(),greaterThan(0L));
      num++;
    }
 else {
      assertThat(suggestStats.getCount(),equalTo(0L));
      assertThat(suggestStats.getTimeInMillis(),equalTo(0L));
    }
  }
  assertThat(num,greaterThan(0));
}
