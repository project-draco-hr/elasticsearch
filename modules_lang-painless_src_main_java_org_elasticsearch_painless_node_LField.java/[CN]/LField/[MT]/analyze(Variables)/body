{
  if (before == null) {
    throw new IllegalArgumentException(error("Illegal field [" + value + "] access made without target."));
  }
  Sort sort=before.sort;
  if (sort == Sort.ARRAY) {
    return new LArrayLength(line,offset,location,value).copy(this).analyze(variables);
  }
 else   if (sort == Sort.DEF) {
    return new LDefField(line,offset,location,value).copy(this).analyze(variables);
  }
  Struct struct=before.struct;
  field=statik ? struct.staticMembers.get(value) : struct.members.get(value);
  if (field != null) {
    if (store && java.lang.reflect.Modifier.isFinal(field.reflect.getModifiers())) {
      throw new IllegalArgumentException(error("Cannot write to read-only field [" + value + "] for type ["+ struct.name+ "]."));
    }
    after=field.type;
    return this;
  }
 else {
    boolean shortcut=struct.methods.containsKey(new Definition.MethodKey("get" + Character.toUpperCase(value.charAt(0)) + value.substring(1),0)) || struct.methods.containsKey(new Definition.MethodKey("is" + Character.toUpperCase(value.charAt(0)) + value.substring(1),0)) || struct.methods.containsKey(new Definition.MethodKey("set" + Character.toUpperCase(value.charAt(0)) + value.substring(1),1));
    if (shortcut) {
      return new LShortcut(line,offset,location,value).copy(this).analyze(variables);
    }
 else {
      EConstant index=new EConstant(line,offset,location,value);
      index.analyze(variables);
      if (Map.class.isAssignableFrom(before.clazz)) {
        return new LMapShortcut(line,offset,location,index).copy(this).analyze(variables);
      }
      if (List.class.isAssignableFrom(before.clazz)) {
        return new LListShortcut(line,offset,location,index).copy(this).analyze(variables);
      }
    }
  }
  throw new IllegalArgumentException(error("Unknown field [" + value + "] for type ["+ struct.name+ "]."));
}
