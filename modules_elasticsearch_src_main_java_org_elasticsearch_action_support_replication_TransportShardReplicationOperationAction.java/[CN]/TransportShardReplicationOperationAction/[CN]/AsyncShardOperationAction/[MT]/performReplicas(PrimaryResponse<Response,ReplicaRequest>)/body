{
  if (ignoreReplicas() || shardIt.size() == 1) {
    postPrimaryOperation(request,response);
    listener.onResponse(response.response());
    return;
  }
  int replicaCounter=shardIt.assignedReplicasIncludingRelocating();
  if (replicaCounter == 0) {
    postPrimaryOperation(request,response);
    listener.onResponse(response.response());
    return;
  }
  if (replicationType == ReplicationType.ASYNC) {
    postPrimaryOperation(request,response);
    listener.onResponse(response.response());
    replicaCounter=-100;
  }
  replicaCounter++;
  AtomicInteger counter=new AtomicInteger(replicaCounter);
  shardIt.reset();
  ShardRouting shard;
  while ((shard=shardIt.nextOrNull()) != null) {
    if (shard.unassigned()) {
      continue;
    }
    boolean doOnlyOnRelocating=false;
    if (shard.primary()) {
      if (shard.relocating()) {
        doOnlyOnRelocating=true;
      }
 else {
        continue;
      }
    }
    if (!doOnlyOnRelocating) {
      performOnReplica(response,counter,shard,shard.currentNodeId());
    }
    if (shard.relocating()) {
      performOnReplica(response,counter,shard,shard.relocatingNodeId());
    }
  }
  postPrimaryOperation(request,response);
  if (counter.decrementAndGet() == 0) {
    listener.onResponse(response.response());
  }
}
