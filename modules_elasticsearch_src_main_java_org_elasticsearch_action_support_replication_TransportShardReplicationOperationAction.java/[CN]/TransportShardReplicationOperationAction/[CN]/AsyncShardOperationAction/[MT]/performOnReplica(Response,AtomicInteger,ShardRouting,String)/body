{
  final ShardOperationRequest shardRequest=new ShardOperationRequest(shards.shardId().id(),request);
  if (!nodeId.equals(nodes.localNodeId())) {
    DiscoveryNode node=nodes.get(nodeId);
    transportService.sendRequest(node,transportReplicaAction(),shardRequest,new VoidTransportResponseHandler(){
      @Override public void handleResponse(      VoidStreamable vResponse){
        finishIfPossible();
      }
      @Override public void handleException(      RemoteTransportException exp){
        if (!ignoreReplicaException(exp.unwrapCause())) {
          logger.warn("Failed to perform " + transportAction() + " on replica "+ shards.shardId(),exp);
          shardStateAction.shardFailed(shard,"Failed to perform [" + transportAction() + "] on replica, message ["+ detailedMessage(exp)+ "]");
        }
        finishIfPossible();
      }
      private void finishIfPossible(){
        if (counter.decrementAndGet() == 0) {
          if (request.listenerThreaded()) {
            threadPool.execute(new Runnable(){
              @Override public void run(){
                listener.onResponse(response);
              }
            }
);
          }
 else {
            listener.onResponse(response);
          }
        }
      }
      @Override public boolean spawn(){
        return false;
      }
    }
);
  }
 else {
    if (request.operationThreaded()) {
      request.beforeLocalFork();
      threadPool.execute(new Runnable(){
        @Override public void run(){
          try {
            shardOperationOnReplica(shardRequest);
          }
 catch (          Exception e) {
            if (!ignoreReplicaException(e)) {
              logger.warn("Failed to perform " + transportAction() + " on replica "+ shards.shardId(),e);
              shardStateAction.shardFailed(shard,"Failed to perform [" + transportAction() + "] on replica, message ["+ detailedMessage(e)+ "]");
            }
          }
          if (counter.decrementAndGet() == 0) {
            listener.onResponse(response);
          }
        }
      }
);
    }
 else {
      try {
        shardOperationOnReplica(shardRequest);
      }
 catch (      Exception e) {
        if (!ignoreReplicaException(e)) {
          logger.warn("Failed to perform " + transportAction() + " on replica"+ shards.shardId(),e);
          shardStateAction.shardFailed(shard,"Failed to perform [" + transportAction() + "] on replica, message ["+ detailedMessage(e)+ "]");
        }
      }
      if (counter.decrementAndGet() == 0) {
        if (request.listenerThreaded()) {
          threadPool.execute(new Runnable(){
            @Override public void run(){
              listener.onResponse(response);
            }
          }
);
        }
 else {
          listener.onResponse(response);
        }
      }
    }
  }
}
