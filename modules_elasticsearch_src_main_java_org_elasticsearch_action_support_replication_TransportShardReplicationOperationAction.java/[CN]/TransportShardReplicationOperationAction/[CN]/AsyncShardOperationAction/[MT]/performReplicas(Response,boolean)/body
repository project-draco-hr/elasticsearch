{
  if (ignoreReplicas() || shards.size() == 1) {
    if (alreadyThreaded || !request.listenerThreaded()) {
      listener.onResponse(response);
    }
 else {
      threadPool.execute(new Runnable(){
        @Override public void run(){
          listener.onResponse(response);
        }
      }
);
    }
    return;
  }
  int replicaCounter=0;
  if (replicationType == ReplicationType.ASYNC) {
    if (alreadyThreaded || !request.listenerThreaded()) {
      listener.onResponse(response);
    }
 else {
      threadPool.execute(new Runnable(){
        @Override public void run(){
          listener.onResponse(response);
        }
      }
);
    }
    replicaCounter=-100;
  }
  for (  final ShardRouting shard : shards.reset()) {
    if (shard.primary()) {
      if (shard.relocating()) {
        replicaCounter++;
      }
    }
 else {
      replicaCounter++;
      if (shard.relocating()) {
        replicaCounter++;
      }
    }
  }
  AtomicInteger counter=new AtomicInteger(replicaCounter);
  for (  final ShardRouting shard : shards.reset()) {
    boolean doOnlyOnRelocating=false;
    if (shard.primary()) {
      if (shard.relocating()) {
        doOnlyOnRelocating=true;
      }
 else {
        continue;
      }
    }
    if (shard.unassigned() || !nodes.nodeExists(shard.currentNodeId())) {
      if (counter.decrementAndGet() == 0) {
        if (alreadyThreaded || !request.listenerThreaded()) {
          listener.onResponse(response);
        }
 else {
          threadPool.execute(new Runnable(){
            @Override public void run(){
              listener.onResponse(response);
            }
          }
);
        }
        break;
      }
      continue;
    }
    if (!doOnlyOnRelocating) {
      performOnReplica(response,counter,shard,shard.currentNodeId());
    }
    if (shard.relocating()) {
      performOnReplica(response,counter,shard,shard.relocatingNodeId());
    }
  }
}
