{
  ScaledFloatFieldMapper.ScaledFloatFieldType ft=new ScaledFloatFieldMapper.ScaledFloatFieldType();
  ft.setName("scaled_float");
  ft.setScalingFactor(0.1 + randomDouble() * 100);
  Directory dir=newDirectory();
  IndexWriter w=new IndexWriter(dir,new IndexWriterConfig(null));
  final int numDocs=1000;
  for (int i=0; i < numDocs; ++i) {
    Document doc=new Document();
    double value=(randomDouble() * 2 - 1) * 10000;
    long scaledValue=Math.round(value * ft.getScalingFactor());
    double rounded=scaledValue / ft.getScalingFactor();
    doc.add(new LongPoint("scaled_float",scaledValue));
    doc.add(new DoublePoint("double",rounded));
    w.addDocument(doc);
  }
  final DirectoryReader reader=DirectoryReader.open(w);
  w.close();
  IndexSearcher searcher=newSearcher(reader);
  final int numQueries=1000;
  for (int i=0; i < numQueries; ++i) {
    double l=(randomDouble() * 2 - 1) * 10000;
    double u=(randomDouble() * 2 - 1) * 10000;
    boolean includeLower=randomBoolean();
    boolean includeUpper=randomBoolean();
    Query doubleQ=NumberFieldMapper.NumberType.DOUBLE.rangeQuery("double",l,u,includeLower,includeUpper);
    Query scaledFloatQ=ft.rangeQuery(l,u,includeLower,includeUpper);
    assertEquals(searcher.count(doubleQ),searcher.count(scaledFloatQ));
  }
  IOUtils.close(reader,dir);
}
