{
  byte[] grokPatternBytes=grokPattern.getBytes(StandardCharsets.UTF_8);
  Matcher matcher=GROK_PATTERN_REGEX.matcher(grokPatternBytes);
  int result=matcher.search(0,grokPatternBytes.length,Option.NONE);
  if (result != -1) {
    Region region=matcher.getEagerRegion();
    String namedPatternRef=groupMatch(NAME_GROUP,region,grokPattern);
    String subName=groupMatch(SUBNAME_GROUP,region,grokPattern);
    String definition=groupMatch(DEFINITION_GROUP,region,grokPattern);
    String patternName=groupMatch(PATTERN_GROUP,region,grokPattern);
    String pattern=patternBank.get(patternName);
    String grokPart;
    if (namedCaptures && subName != null) {
      grokPart=String.format(Locale.US,"(?<%s>%s)",namedPatternRef,pattern);
    }
 else     if (!namedCaptures) {
      grokPart=String.format(Locale.US,"(?<%s>%s)",patternName + "_" + String.valueOf(result),pattern);
    }
 else {
      grokPart=String.format(Locale.US,"(?:%s)",pattern);
    }
    String start=new String(grokPatternBytes,0,result,StandardCharsets.UTF_8);
    String rest=new String(grokPatternBytes,region.end[0],grokPatternBytes.length - region.end[0],StandardCharsets.UTF_8);
    return start + toRegex(grokPart + rest);
  }
  return grokPattern;
}
