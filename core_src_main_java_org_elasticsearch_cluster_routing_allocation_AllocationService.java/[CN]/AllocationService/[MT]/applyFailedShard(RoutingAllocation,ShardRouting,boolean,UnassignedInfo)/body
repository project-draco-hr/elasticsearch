{
  failedShard=new ShardRouting(failedShard);
  IndexRoutingTable indexRoutingTable=allocation.routingTable().index(failedShard.index());
  if (indexRoutingTable == null) {
    return false;
  }
  RoutingNodes routingNodes=allocation.routingNodes();
  boolean dirty=false;
  if (failedShard.relocatingNodeId() != null) {
    if (failedShard.initializing()) {
      RoutingNodes.RoutingNodeIterator initializingNode=routingNodes.routingNodeIter(failedShard.currentNodeId());
      if (initializingNode != null) {
        while (initializingNode.hasNext()) {
          ShardRouting shardRouting=initializingNode.next();
          if (shardRouting.equals(failedShard)) {
            dirty=true;
            initializingNode.remove();
            if (addToIgnoreList) {
              allocation.addIgnoreShardForNode(failedShard.shardId(),failedShard.currentNodeId());
            }
            break;
          }
        }
      }
      if (dirty) {
        RoutingNode relocatingFromNode=routingNodes.node(failedShard.relocatingNodeId());
        if (relocatingFromNode != null) {
          for (          ShardRouting shardRouting : relocatingFromNode) {
            if (shardRouting.shardId().equals(failedShard.shardId()) && shardRouting.relocating()) {
              dirty=true;
              routingNodes.cancelRelocation(shardRouting);
              break;
            }
          }
        }
      }
 else {
        logger.debug("failed shard {} not found in routingNodes, ignoring it",failedShard);
      }
      return dirty;
    }
 else     if (failedShard.relocating()) {
      RoutingNodes.RoutingNodeIterator relocatingFromNode=routingNodes.routingNodeIter(failedShard.currentNodeId());
      if (relocatingFromNode != null) {
        while (relocatingFromNode.hasNext()) {
          ShardRouting shardRouting=relocatingFromNode.next();
          if (shardRouting.equals(failedShard)) {
            dirty=true;
            if (addToIgnoreList) {
              allocation.addIgnoreShardForNode(failedShard.shardId(),failedShard.currentNodeId());
            }
            relocatingFromNode.moveToUnassigned(unassignedInfo);
            break;
          }
        }
      }
      if (dirty) {
        RoutingNodes.RoutingNodeIterator initializingNode=routingNodes.routingNodeIter(failedShard.relocatingNodeId());
        if (initializingNode != null) {
          while (initializingNode.hasNext()) {
            ShardRouting shardRouting=initializingNode.next();
            if (shardRouting.shardId().equals(failedShard.shardId()) && shardRouting.initializing()) {
              dirty=true;
              initializingNode.remove();
            }
          }
        }
      }
 else {
        logger.debug("failed shard {} not found in routingNodes, ignoring it",failedShard);
      }
    }
 else {
      throw new IllegalStateException("illegal state for a failed shard, relocating node id is set, but state does not match: " + failedShard);
    }
  }
 else {
    RoutingNodes.RoutingNodeIterator node=routingNodes.routingNodeIter(failedShard.currentNodeId());
    if (node != null) {
      while (node.hasNext()) {
        ShardRouting shardRouting=node.next();
        if (shardRouting.equals(failedShard)) {
          dirty=true;
          if (addToIgnoreList) {
            allocation.addIgnoreShardForNode(failedShard.shardId(),failedShard.currentNodeId());
          }
          List<ShardRouting> shardsToMove=Lists.newArrayList();
          for (Iterator<ShardRouting> unassignedIt=routingNodes.unassigned().iterator(); unassignedIt.hasNext(); ) {
            ShardRouting unassignedShardRouting=unassignedIt.next();
            if (unassignedShardRouting.shardId().equals(failedShard.shardId())) {
              unassignedIt.remove();
              shardsToMove.add(unassignedShardRouting);
            }
          }
          if (!shardsToMove.isEmpty()) {
            routingNodes.unassigned().addAll(shardsToMove);
          }
          node.moveToUnassigned(unassignedInfo);
          break;
        }
      }
    }
    if (!dirty) {
      logger.debug("failed shard {} not found in routingNodes, ignoring it",failedShard);
    }
  }
  return dirty;
}
