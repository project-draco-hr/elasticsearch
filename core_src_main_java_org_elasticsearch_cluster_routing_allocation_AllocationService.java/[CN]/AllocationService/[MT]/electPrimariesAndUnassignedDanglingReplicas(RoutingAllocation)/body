{
  boolean changed=false;
  final RoutingNodes routingNodes=allocation.routingNodes();
  if (routingNodes.unassigned().getNumPrimaries() == 0) {
    return changed;
  }
  final RoutingNodes.UnassignedShards.UnassignedIterator unassignedIterator=routingNodes.unassigned().iterator();
  while (unassignedIterator.hasNext()) {
    ShardRouting shardEntry=unassignedIterator.next();
    if (shardEntry.primary()) {
      changed|=failReplicasForUnassignedPrimary(allocation,shardEntry);
      ShardRouting candidate=allocation.routingNodes().activeReplica(shardEntry.shardId());
      if (candidate != null) {
        shardEntry=unassignedIterator.demotePrimaryToReplicaShard();
        ShardRouting primarySwappedCandidate=routingNodes.promoteAssignedReplicaShardToPrimary(candidate);
        changed=true;
        if (primarySwappedCandidate.relocatingNodeId() != null) {
          RoutingNode node=routingNodes.node(primarySwappedCandidate.relocatingNodeId());
          if (node != null) {
            for (            ShardRouting shardRouting : node) {
              if (shardRouting.shardId().equals(primarySwappedCandidate.shardId()) && !shardRouting.primary()) {
                routingNodes.promoteAssignedReplicaShardToPrimary(shardRouting);
                break;
              }
            }
          }
        }
        IndexMetaData index=allocation.metaData().getIndexSafe(primarySwappedCandidate.index());
        if (IndexMetaData.isIndexUsingShadowReplicas(index.getSettings())) {
          routingNodes.reinitShadowPrimary(primarySwappedCandidate);
        }
      }
    }
  }
  return changed;
}
