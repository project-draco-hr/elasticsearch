{
  ImmutableList.Builder<Tuple<PluginInfo,Plugin>> plugins=ImmutableList.builder();
  try {
    Enumeration<URL> pluginUrls=settings.getClassLoader().getResources(esPluginPropertiesFile);
    while (pluginUrls.hasMoreElements()) {
      URL pluginUrl=pluginUrls.nextElement();
      Properties pluginProps=new Properties();
      InputStream is=null;
      try {
        is=pluginUrl.openStream();
        pluginProps.load(is);
        String pluginClassName=pluginProps.getProperty("plugin");
        String pluginVersion=pluginProps.getProperty("version",PluginInfo.VERSION_NOT_AVAILABLE);
        Plugin plugin=loadPlugin(pluginClassName,settings);
        File siteFile=new File(new File(environment.pluginsFile(),plugin.name()),"_site");
        boolean isSite=isAccessibleDirectory(siteFile,logger);
        if (logger.isTraceEnabled()) {
          logger.trace("found a jvm plugin [{}], [{}]{}",plugin.name(),plugin.description(),isSite ? ": with _site structure" : "");
        }
        PluginInfo pluginInfo=new PluginInfo(plugin.name(),plugin.description(),isSite,true,pluginVersion);
        plugins.add(new Tuple<>(pluginInfo,plugin));
      }
 catch (      Throwable e) {
        logger.warn("failed to load plugin from [" + pluginUrl + "]",e);
      }
 finally {
        IOUtils.closeWhileHandlingException(is);
      }
    }
  }
 catch (  IOException e) {
    logger.warn("failed to find jvm plugins from classpath",e);
  }
  return plugins.build();
}
