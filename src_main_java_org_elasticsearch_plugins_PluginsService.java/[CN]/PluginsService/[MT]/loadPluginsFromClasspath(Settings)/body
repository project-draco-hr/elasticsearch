{
  Map<String,Plugin> plugins=newHashMap();
  Enumeration<URL> pluginUrls=null;
  try {
    pluginUrls=settings.getClassLoader().getResources("es-plugin.properties");
  }
 catch (  IOException e) {
    logger.warn("failed to find plugins from classpath",e);
    return ImmutableMap.of();
  }
  while (pluginUrls.hasMoreElements()) {
    URL pluginUrl=pluginUrls.nextElement();
    Properties pluginProps=new Properties();
    InputStream is=null;
    try {
      is=pluginUrl.openStream();
      pluginProps.load(is);
      String sPluginClass=pluginProps.getProperty("plugin");
      Class<? extends Plugin> pluginClass=(Class<? extends Plugin>)settings.getClassLoader().loadClass(sPluginClass);
      Plugin plugin;
      try {
        plugin=pluginClass.getConstructor(Settings.class).newInstance(settings);
      }
 catch (      NoSuchMethodException e) {
        try {
          plugin=pluginClass.getConstructor().newInstance();
        }
 catch (        NoSuchMethodException e1) {
          throw new ElasticSearchException("No constructor for [" + pluginClass + "]");
        }
      }
      plugins.put(plugin.name(),plugin);
    }
 catch (    Exception e) {
      logger.warn("failed to load plugin from [" + pluginUrl + "]",e);
    }
 finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
  return plugins;
}
