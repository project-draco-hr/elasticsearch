{
  List<Tuple<PluginInfo,Plugin>> plugins=Lists.newArrayList();
  Enumeration<URL> entries=Collections.enumeration(properties);
  while (entries.hasMoreElements()) {
    URL pluginUrl=entries.nextElement();
    Properties pluginProps=new Properties();
    InputStream is=null;
    try {
      is=pluginUrl.openStream();
      pluginProps.load(is);
      String pluginClassName=pluginProps.getProperty("plugin");
      if (pluginClassName == null) {
        throw new IllegalArgumentException("No plugin class specified");
      }
      String pluginVersion=pluginProps.getProperty("version",PluginInfo.VERSION_NOT_AVAILABLE);
      Plugin plugin=PluginUtils.loadPlugin(pluginClassName,settings,classLoader);
      File siteFile=new File(new File(environment.pluginsFile(),plugin.name()),"_site");
      boolean isSite=isAccessibleDirectory(siteFile,logger);
      if (logger.isTraceEnabled()) {
        logger.trace("found a jvm plugin [{}], [{}]{}",plugin.name(),plugin.description(),isSite ? ": with _site structure" : "");
      }
      PluginInfo pluginInfo=new PluginInfo(plugin.name(),plugin.description(),isSite,true,pluginVersion,isolation);
      plugins.add(new Tuple<PluginInfo,Plugin>(pluginInfo,plugin));
    }
 catch (    Throwable e) {
      logger.warn("failed to load plugin from [" + pluginUrl + "]",e);
    }
 finally {
      IOUtils.closeWhileHandlingException(is);
    }
  }
  return plugins;
}
