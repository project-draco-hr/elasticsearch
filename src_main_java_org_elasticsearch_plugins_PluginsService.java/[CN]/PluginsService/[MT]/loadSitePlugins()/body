{
  ImmutableList.Builder<Tuple<PluginInfo,Plugin>> sitePlugins=ImmutableList.builder();
  List<String> loadedJvmPlugins=new ArrayList<String>();
  for (  Tuple<PluginInfo,Plugin> tuple : plugins) {
    if (tuple.v1().isSite()) {
      loadedJvmPlugins.add(tuple.v1().getName());
    }
  }
  File pluginsFile=environment.pluginsFile();
  if (!pluginsFile.exists() || !pluginsFile.isDirectory()) {
    return sitePlugins.build();
  }
  for (  File pluginFile : pluginsFile.listFiles()) {
    if (!loadedJvmPlugins.contains(pluginFile.getName())) {
      File sitePluginDir=new File(pluginFile,"_site");
      if (isAccessibleDirectory(sitePluginDir,logger)) {
        String name=pluginFile.getName();
        String version=PluginInfo.VERSION_NOT_AVAILABLE;
        String description=PluginInfo.DESCRIPTION_NOT_AVAILABLE;
        File pluginPropFile=new File(sitePluginDir,ES_PLUGIN_PROPERTIES);
        if (pluginPropFile.exists()) {
          Properties pluginProps=new Properties();
          InputStream is=null;
          try {
            is=new FileInputStream(pluginPropFile.getAbsolutePath());
            pluginProps.load(is);
            description=pluginProps.getProperty("description",PluginInfo.DESCRIPTION_NOT_AVAILABLE);
            version=pluginProps.getProperty("version",PluginInfo.VERSION_NOT_AVAILABLE);
          }
 catch (          Exception e) {
            logger.debug("can not load {} file.",e,ES_PLUGIN_PROPERTIES);
          }
 finally {
            IOUtils.closeWhileHandlingException(is);
          }
        }
        if (logger.isTraceEnabled()) {
          logger.trace("found a site plugin name [{}], version [{}], description [{}]",name,version,description);
        }
        sitePlugins.add(new Tuple<PluginInfo,Plugin>(new PluginInfo(name,description,true,false,version,false),null));
      }
    }
  }
  return sitePlugins.build();
}
