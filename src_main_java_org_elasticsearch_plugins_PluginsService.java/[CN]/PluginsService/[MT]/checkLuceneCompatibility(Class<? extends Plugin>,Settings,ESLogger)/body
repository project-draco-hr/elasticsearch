{
  String luceneVersion=null;
  try {
    Enumeration<URL> pluginUrls=settings.getClassLoader().getResources(PluginsService.ES_PLUGIN_PROPERTIES);
    while (pluginUrls.hasMoreElements()) {
      URL pluginUrl=pluginUrls.nextElement();
      try (InputStream is=pluginUrl.openStream()){
        Properties pluginProps=new Properties();
        pluginProps.load(is);
        String plugin=pluginProps.getProperty("plugin");
        if (pluginClass.getName().equals(plugin)) {
          luceneVersion=pluginProps.getProperty("lucene");
          break;
        }
        logger.debug("skipping [{}]",pluginUrl);
      }
     }
    if (luceneVersion != null) {
      String parts[]=luceneVersion.split("\\.");
      org.apache.lucene.util.Version luceneExpectedVersion=org.apache.lucene.util.Version.parseLeniently(parts[0] + "." + parts[1]);
      if (Version.CURRENT.luceneVersion.equals(luceneExpectedVersion)) {
        logger.debug("starting analysis plugin for Lucene [{}].",luceneExpectedVersion);
        return true;
      }
    }
 else {
      logger.debug("lucene property is not set in plugin {} file. Skipping test.",PluginsService.ES_PLUGIN_PROPERTIES);
      return true;
    }
  }
 catch (  Throwable t) {
    logger.debug("exception raised while checking plugin Lucene version.",t);
  }
  logger.error("cannot start plugin due to incorrect Lucene version: plugin [{}], node [{}].",luceneVersion,Constants.LUCENE_MAIN_VERSION);
  return false;
}
