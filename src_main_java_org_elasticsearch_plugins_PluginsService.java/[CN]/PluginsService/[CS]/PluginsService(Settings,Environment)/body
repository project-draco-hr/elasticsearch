{
  super(settings);
  this.environment=environment;
  Map<String,Plugin> plugins=Maps.newHashMap();
  String[] defaultPluginsClasses=settings.getAsArray("plugin.types");
  for (  String pluginClass : defaultPluginsClasses) {
    Plugin plugin=loadPlugin(pluginClass,settings);
    plugins.put(plugin.name(),plugin);
  }
  loadPluginsIntoClassLoader();
  plugins.putAll(loadPluginsFromClasspath(settings));
  Set<String> sitePlugins=PluginsHelper.sitePlugins(this.environment);
  String[] mandatoryPlugins=settings.getAsArray("plugin.mandatory",null);
  if (mandatoryPlugins != null) {
    Set<String> missingPlugins=Sets.newHashSet();
    for (    String mandatoryPlugin : mandatoryPlugins) {
      if (!plugins.containsKey(mandatoryPlugin) && !sitePlugins.contains(mandatoryPlugin) && !missingPlugins.contains(mandatoryPlugin)) {
        missingPlugins.add(mandatoryPlugin);
      }
    }
    if (!missingPlugins.isEmpty()) {
      throw new ElasticSearchException("Missing mandatory plugins [" + Strings.collectionToDelimitedString(missingPlugins,", ") + "]");
    }
  }
  logger.info("loaded {}, sites {}",plugins.keySet(),sitePlugins);
  this.plugins=ImmutableMap.copyOf(plugins);
  MapBuilder<Plugin,List<OnModuleReference>> onModuleReferences=MapBuilder.newMapBuilder();
  for (  Plugin plugin : plugins.values()) {
    List<OnModuleReference> list=Lists.newArrayList();
    for (    Method method : plugin.getClass().getDeclaredMethods()) {
      if (!method.getName().equals("onModule")) {
        continue;
      }
      if (method.getParameterTypes().length == 0 || method.getParameterTypes().length > 1) {
        logger.warn("Plugin: {} implementing onModule with no parameters or more than one parameter",plugin.name());
        continue;
      }
      Class moduleClass=method.getParameterTypes()[0];
      if (!Module.class.isAssignableFrom(moduleClass)) {
        logger.warn("Plugin: {} implementing onModule by the type is not of Module type {}",plugin.name(),moduleClass);
        continue;
      }
      method.setAccessible(true);
      list.add(new OnModuleReference(moduleClass,method));
    }
    if (!list.isEmpty()) {
      onModuleReferences.put(plugin,list);
    }
  }
  this.onModuleReferences=onModuleReferences.immutableMap();
}
