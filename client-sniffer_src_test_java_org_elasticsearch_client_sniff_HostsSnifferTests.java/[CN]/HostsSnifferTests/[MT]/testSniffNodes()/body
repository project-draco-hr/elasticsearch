{
  HttpHost httpHost=new HttpHost(httpServer.getAddress().getHostName(),httpServer.getAddress().getPort());
  try (RestClient restClient=RestClient.builder().setHosts(httpHost).build()){
    HostsSniffer sniffer=new HostsSniffer(restClient,sniffRequestTimeout,scheme);
    try {
      List<HttpHost> sniffedHosts=sniffer.sniffHosts();
      if (sniffResponse.isFailure) {
        fail("sniffNodes should have failed");
      }
      assertThat(sniffedHosts.size(),equalTo(sniffResponse.hosts.size()));
      Iterator<HttpHost> responseHostsIterator=sniffResponse.hosts.iterator();
      for (      HttpHost sniffedHost : sniffedHosts) {
        assertEquals(sniffedHost,responseHostsIterator.next());
      }
    }
 catch (    ElasticsearchResponseException e) {
      ElasticsearchResponse response=e.getElasticsearchResponse();
      if (sniffResponse.isFailure) {
        assertThat(e.getMessage(),containsString("GET " + httpHost + "/_nodes/http?timeout="+ sniffRequestTimeout+ "ms"));
        assertThat(e.getMessage(),containsString(Integer.toString(sniffResponse.nodesInfoResponseCode)));
        assertThat(response.getHost(),equalTo(httpHost));
        assertThat(response.getStatusLine().getStatusCode(),equalTo(sniffResponse.nodesInfoResponseCode));
        assertThat(response.getRequestLine().toString(),equalTo("GET /_nodes/http?timeout=" + sniffRequestTimeout + "ms HTTP/1.1"));
      }
 else {
        fail("sniffNodes should have succeeded: " + response.getStatusLine());
      }
    }
  }
 }
