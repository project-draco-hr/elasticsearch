{
  long clusterSeed=randomLong();
  boolean masterNodes=randomBoolean();
  final int minNumDataNodes=2;
  final int maxNumDataNodes=2;
  final int numClientNodes=randomIntBetween(0,2);
  final String clusterName1="shared1";
  NodeConfigurationSource nodeConfigurationSource=new NodeConfigurationSource(){
    @Override public Settings nodeSettings(    int nodeOrdinal){
      return Settings.builder().put(NetworkModule.HTTP_ENABLED.getKey(),false).put(NodeEnvironment.MAX_LOCAL_STORAGE_NODES_SETTING.getKey(),2 + (masterNodes ? InternalTestCluster.DEFAULT_HIGH_NUM_MASTER_NODES : 0) + maxNumDataNodes+ numClientNodes).put(NetworkModule.TRANSPORT_TYPE_KEY,"local").put(DiscoveryModule.DISCOVERY_TYPE_SETTING.getKey(),"local").build();
    }
    @Override public Settings transportClientSettings(){
      return Settings.builder().put(NetworkModule.TRANSPORT_TYPE_KEY,"local").build();
    }
  }
;
  boolean enableHttpPipelining=randomBoolean();
  String nodePrefix="test";
  Path baseDir=createTempDir();
  InternalTestCluster cluster=new InternalTestCluster(clusterSeed,baseDir,masterNodes,minNumDataNodes,maxNumDataNodes,clusterName1,nodeConfigurationSource,numClientNodes,enableHttpPipelining,nodePrefix,Collections.emptyList(),Function.identity());
  try {
    cluster.beforeTest(random(),0.0);
    final Map<String,Path[]> shardNodePaths=new HashMap<>();
    for (    String name : cluster.getNodeNames()) {
      shardNodePaths.put(name,getNodePaths(cluster,name));
    }
    String poorNode=randomFrom(cluster.getNodeNames());
    Path dataPath=getNodePaths(cluster,poorNode)[0];
    final Path testMarker=dataPath.resolve("testMarker");
    Files.createDirectories(testMarker);
    cluster.stopRandomNode(InternalTestCluster.nameFilter(poorNode));
    assertFileExists(testMarker);
    final String stableNode=randomFrom(cluster.getNodeNames());
    final Path stableDataPath=getNodePaths(cluster,stableNode)[0];
    final Path stableTestMarker=stableDataPath.resolve("stableTestMarker");
    assertThat(stableDataPath,not(dataPath));
    Files.createDirectories(stableTestMarker);
    final String newNode1=cluster.startNode();
    assertThat(getNodePaths(cluster,newNode1)[0],equalTo(dataPath));
    assertFileExists(testMarker);
    final String newNode2=cluster.startNode();
    final Path newDataPath=getNodePaths(cluster,newNode2)[0];
    final Path newTestMarker=newDataPath.resolve("newTestMarker");
    assertThat(newDataPath,not(dataPath));
    Files.createDirectories(newTestMarker);
    cluster.beforeTest(random(),0.0);
    assertFileNotExists(newTestMarker);
    assertFileNotExists(testMarker);
    assertFileExists(stableTestMarker);
    for (    String name : cluster.getNodeNames()) {
      assertThat("data paths for " + name + " changed",getNodePaths(cluster,name),equalTo(shardNodePaths.get(name)));
    }
    cluster.beforeTest(random(),0.0);
    assertFileExists(stableTestMarker);
    for (    String name : cluster.getNodeNames()) {
      assertThat("data paths for " + name + " changed",getNodePaths(cluster,name),equalTo(shardNodePaths.get(name)));
    }
  }
  finally {
    cluster.close();
  }
}
