{
  long clusterSeed=randomLong();
  boolean masterNodes=randomBoolean();
  int minNumDataNodes=randomIntBetween(0,3);
  int maxNumDataNodes=randomIntBetween(minNumDataNodes,4);
  int numClientNodes=randomIntBetween(0,2);
  final String clusterName1="shared1";
  final String clusterName2="shared2";
  NodeConfigurationSource nodeConfigurationSource=new NodeConfigurationSource(){
    @Override public Settings nodeSettings(    int nodeOrdinal){
      return Settings.builder().put(NodeEnvironment.MAX_LOCAL_STORAGE_NODES_SETTING.getKey(),2 * ((masterNodes ? InternalTestCluster.DEFAULT_HIGH_NUM_MASTER_NODES : 0) + maxNumDataNodes + numClientNodes)).put(NetworkModule.HTTP_ENABLED.getKey(),false).put(DiscoveryModule.DISCOVERY_TYPE_SETTING.getKey(),"local").put(NetworkModule.TRANSPORT_TYPE_KEY,"local").build();
    }
    @Override public Settings transportClientSettings(){
      return Settings.builder().put(NetworkModule.TRANSPORT_TYPE_KEY,"local").build();
    }
  }
;
  boolean enableHttpPipelining=randomBoolean();
  String nodePrefix="foobar";
  Path baseDir=createTempDir();
  InternalTestCluster cluster0=new InternalTestCluster(clusterSeed,baseDir,masterNodes,minNumDataNodes,maxNumDataNodes,clusterName1,nodeConfigurationSource,numClientNodes,enableHttpPipelining,nodePrefix,Collections.emptyList(),Function.identity());
  InternalTestCluster cluster1=new InternalTestCluster(clusterSeed,baseDir,masterNodes,minNumDataNodes,maxNumDataNodes,clusterName2,nodeConfigurationSource,numClientNodes,enableHttpPipelining,nodePrefix,Collections.emptyList(),Function.identity());
  assertClusters(cluster0,cluster1,false);
  long seed=randomLong();
  try {
{
      Random random=new Random(seed);
      cluster0.beforeTest(random,random.nextDouble());
    }
{
      Random random=new Random(seed);
      cluster1.beforeTest(random,random.nextDouble());
    }
    assertArrayEquals(cluster0.getNodeNames(),cluster1.getNodeNames());
    Iterator<Client> iterator1=cluster1.getClients().iterator();
    for (    Client client : cluster0.getClients()) {
      assertTrue(iterator1.hasNext());
      Client other=iterator1.next();
      assertSettings(client.settings(),other.settings(),false);
    }
    assertArrayEquals(cluster0.getNodeNames(),cluster1.getNodeNames());
    cluster0.afterTest();
    cluster1.afterTest();
  }
  finally {
    IOUtils.close(cluster0,cluster1);
  }
}
