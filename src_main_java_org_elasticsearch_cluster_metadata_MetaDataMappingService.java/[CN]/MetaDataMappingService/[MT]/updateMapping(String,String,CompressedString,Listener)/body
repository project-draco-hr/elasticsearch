{
  clusterService.submitStateUpdateTask("update-mapping [" + index + "]["+ type+ "]",new ProcessedClusterStateUpdateTask(){
    @Override public ClusterState execute(    ClusterState currentState){
      boolean createdIndex=false;
      try {
        final IndexMetaData indexMetaData=currentState.metaData().index(index);
        if (indexMetaData == null) {
          return currentState;
        }
        if (indexMetaData.mappings().containsKey(type) && indexMetaData.mapping(type).source().equals(mappingSource)) {
          return currentState;
        }
        IndexService indexService=indicesService.indexService(index);
        if (indexService == null) {
          indexService=indicesService.createIndex(indexMetaData.index(),indexMetaData.settings(),currentState.nodes().localNode().id());
          createdIndex=true;
          if (indexMetaData.mappings().containsKey(type)) {
            indexService.mapperService().merge(type,indexMetaData.mappings().get(type).source().string(),false);
          }
        }
        DocumentMapper updatedMapper=indexService.mapperService().merge(type,mappingSource.string(),false);
        if (indexMetaData.mappings().containsKey(type) && indexMetaData.mapping(type).source().equals(updatedMapper.mappingSource())) {
          return currentState;
        }
        if (logger.isDebugEnabled()) {
          try {
            logger.debug("[{}] update_mapping [{}] (dynamic) with source [{}]",index,type,updatedMapper.mappingSource().string());
          }
 catch (          IOException e) {
          }
        }
 else         if (logger.isInfoEnabled()) {
          logger.info("[{}] update_mapping [{}] (dynamic)",index,type);
        }
        MetaData.Builder builder=newMetaDataBuilder().metaData(currentState.metaData());
        builder.put(newIndexMetaDataBuilder(indexMetaData).putMapping(new MappingMetaData(updatedMapper)));
        return newClusterStateBuilder().state(currentState).metaData(builder).build();
      }
 catch (      Exception e) {
        logger.warn("failed to dynamically update the mapping in cluster_state from shard",e);
        listener.onFailure(e);
        return currentState;
      }
 finally {
        if (createdIndex) {
          indicesService.cleanIndex(index,"created for mapping processing");
        }
      }
    }
    @Override public void clusterStateProcessed(    ClusterState clusterState){
      listener.onResponse(new Response(true));
    }
  }
);
}
