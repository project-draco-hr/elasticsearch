{
  MapBinder<String,CharFilterFactoryFactory> charFilterBinder=MapBinder.newMapBinder(binder(),String.class,CharFilterFactoryFactory.class);
  AnalysisBinderProcessor.CharFiltersBindings charFiltersBindings=new AnalysisBinderProcessor.CharFiltersBindings();
  for (  AnalysisBinderProcessor processor : processors) {
    processor.processCharFilters(charFiltersBindings);
  }
  charFiltersBindings.charFilters.putAll(charFilters);
  Map<String,Settings> charFiltersSettings=settings.getGroups("index.analysis.char_filter");
  for (  Map.Entry<String,Settings> entry : charFiltersSettings.entrySet()) {
    String charFilterName=entry.getKey();
    Settings charFilterSettings=entry.getValue();
    String typeName=charFilterSettings.get("type");
    if (typeName == null) {
      throw new IllegalArgumentException("CharFilter [" + charFilterName + "] must have a type associated with it");
    }
    Class<? extends CharFilterFactory> type=charFiltersBindings.charFilters.get(typeName);
    if (type == null) {
      throw new IllegalArgumentException("Unknown CharFilter type [" + typeName + "] for ["+ charFilterName+ "]");
    }
    charFilterBinder.addBinding(charFilterName).toProvider(FactoryProvider.newFactory(CharFilterFactoryFactory.class,type)).in(Scopes.SINGLETON);
  }
  for (  Map.Entry<String,Class<? extends CharFilterFactory>> entry : charFiltersBindings.charFilters.entrySet()) {
    String charFilterName=entry.getKey();
    Class<? extends CharFilterFactory> clazz=entry.getValue();
    if (charFiltersSettings.containsKey(charFilterName)) {
      continue;
    }
    if (clazz.getAnnotation(AnalysisSettingsRequired.class) != null) {
      continue;
    }
    if (indicesAnalysisService.hasCharFilter(charFilterName) == false) {
      charFilterBinder.addBinding(charFilterName).toProvider(FactoryProvider.newFactory(CharFilterFactoryFactory.class,clazz)).in(Scopes.SINGLETON);
    }
  }
  MapBinder<String,TokenFilterFactoryFactory> tokenFilterBinder=MapBinder.newMapBinder(binder(),String.class,TokenFilterFactoryFactory.class);
  AnalysisBinderProcessor.TokenFiltersBindings tokenFiltersBindings=new AnalysisBinderProcessor.TokenFiltersBindings();
  for (  AnalysisBinderProcessor processor : processors) {
    processor.processTokenFilters(tokenFiltersBindings);
  }
  tokenFiltersBindings.tokenFilters.putAll(tokenFilters);
  Map<String,Settings> tokenFiltersSettings=settings.getGroups("index.analysis.filter");
  for (  Map.Entry<String,Settings> entry : tokenFiltersSettings.entrySet()) {
    String tokenFilterName=entry.getKey();
    Settings tokenFilterSettings=entry.getValue();
    String typeName=tokenFilterSettings.get("type");
    if (typeName == null) {
      throw new IllegalArgumentException("TokenFilter [" + tokenFilterName + "] must have a type associated with it");
    }
    Class<? extends TokenFilterFactory> type=tokenFiltersBindings.tokenFilters.get(typeName);
    if (type == null) {
      throw new IllegalArgumentException("Unknown TokenFilter type [" + typeName + "] for ["+ tokenFilterName+ "]");
    }
    tokenFilterBinder.addBinding(tokenFilterName).toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class,type)).in(Scopes.SINGLETON);
  }
  for (  Map.Entry<String,Class<? extends TokenFilterFactory>> entry : tokenFiltersBindings.tokenFilters.entrySet()) {
    String tokenFilterName=entry.getKey();
    Class<? extends TokenFilterFactory> clazz=entry.getValue();
    if (tokenFiltersSettings.containsKey(tokenFilterName)) {
      continue;
    }
    if (clazz.getAnnotation(AnalysisSettingsRequired.class) != null) {
      continue;
    }
    if (indicesAnalysisService.hasTokenFilter(tokenFilterName) == false) {
      tokenFilterBinder.addBinding(tokenFilterName).toProvider(FactoryProvider.newFactory(TokenFilterFactoryFactory.class,clazz)).in(Scopes.SINGLETON);
    }
  }
  MapBinder<String,TokenizerFactoryFactory> tokenizerBinder=MapBinder.newMapBinder(binder(),String.class,TokenizerFactoryFactory.class);
  AnalysisBinderProcessor.TokenizersBindings tokenizersBindings=new AnalysisBinderProcessor.TokenizersBindings();
  for (  AnalysisBinderProcessor processor : processors) {
    processor.processTokenizers(tokenizersBindings);
  }
  tokenizersBindings.tokenizers.putAll(tokenizers);
  Map<String,Settings> tokenizersSettings=settings.getGroups("index.analysis.tokenizer");
  for (  Map.Entry<String,Settings> entry : tokenizersSettings.entrySet()) {
    String tokenizerName=entry.getKey();
    Settings tokenizerSettings=entry.getValue();
    String typeName=tokenizerSettings.get("type");
    if (typeName == null) {
      throw new IllegalArgumentException("Tokenizer [" + tokenizerName + "] must have a type associated with it");
    }
    Class<? extends TokenizerFactory> type=tokenizersBindings.tokenizers.get(typeName);
    if (type == null) {
      throw new IllegalArgumentException("Unknown Tokenizer type [" + typeName + "] for ["+ tokenizerName+ "]");
    }
    tokenizerBinder.addBinding(tokenizerName).toProvider(FactoryProvider.newFactory(TokenizerFactoryFactory.class,type)).in(Scopes.SINGLETON);
  }
  for (  Map.Entry<String,Class<? extends TokenizerFactory>> entry : tokenizersBindings.tokenizers.entrySet()) {
    String tokenizerName=entry.getKey();
    Class<? extends TokenizerFactory> clazz=entry.getValue();
    if (tokenizersSettings.containsKey(tokenizerName)) {
      continue;
    }
    if (clazz.getAnnotation(AnalysisSettingsRequired.class) != null) {
      continue;
    }
    if (indicesAnalysisService.hasTokenizer(tokenizerName) == false) {
      tokenizerBinder.addBinding(tokenizerName).toProvider(FactoryProvider.newFactory(TokenizerFactoryFactory.class,clazz)).in(Scopes.SINGLETON);
    }
  }
  MapBinder<String,AnalyzerProviderFactory> analyzerBinder=MapBinder.newMapBinder(binder(),String.class,AnalyzerProviderFactory.class);
  AnalysisBinderProcessor.AnalyzersBindings analyzersBindings=new AnalysisBinderProcessor.AnalyzersBindings();
  for (  AnalysisBinderProcessor processor : processors) {
    processor.processAnalyzers(analyzersBindings);
  }
  analyzersBindings.analyzers.putAll(analyzers);
  Map<String,Settings> analyzersSettings=settings.getGroups("index.analysis.analyzer");
  for (  Map.Entry<String,Settings> entry : analyzersSettings.entrySet()) {
    String analyzerName=entry.getKey();
    Settings analyzerSettings=entry.getValue();
    String typeName=analyzerSettings.get("type");
    Class<? extends AnalyzerProvider> type;
    if (typeName == null) {
      if (analyzerSettings.get("tokenizer") != null) {
        type=CustomAnalyzerProvider.class;
      }
 else {
        throw new IllegalArgumentException("Analyzer [" + analyzerName + "] must have a type associated with it");
      }
    }
 else     if (typeName.equals("custom")) {
      type=CustomAnalyzerProvider.class;
    }
 else {
      type=analyzersBindings.analyzers.get(typeName);
      if (type == null) {
        throw new IllegalArgumentException("Unknown Analyzer type [" + typeName + "] for ["+ analyzerName+ "]");
      }
    }
    analyzerBinder.addBinding(analyzerName).toProvider(FactoryProvider.newFactory(AnalyzerProviderFactory.class,type)).in(Scopes.SINGLETON);
  }
  for (  Map.Entry<String,Class<? extends AnalyzerProvider>> entry : analyzersBindings.analyzers.entrySet()) {
    String analyzerName=entry.getKey();
    Class<? extends AnalyzerProvider> clazz=entry.getValue();
    if (analyzersSettings.containsKey(analyzerName)) {
      continue;
    }
    if (clazz.getAnnotation(AnalysisSettingsRequired.class) != null) {
      continue;
    }
    if (indicesAnalysisService.hasAnalyzer(analyzerName) == false) {
      analyzerBinder.addBinding(analyzerName).toProvider(FactoryProvider.newFactory(AnalyzerProviderFactory.class,clazz)).in(Scopes.SINGLETON);
    }
  }
  bind(AnalysisService.class).in(Scopes.SINGLETON);
}
