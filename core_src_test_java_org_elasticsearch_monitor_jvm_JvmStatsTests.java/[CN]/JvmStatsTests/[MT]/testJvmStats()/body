{
  JvmStats stats=JvmStats.jvmStats();
  assertNotNull(stats);
  assertNotNull(stats.getUptime());
  assertThat(stats.getUptime().millis(),greaterThan(0L));
  assertThat(stats.getTimestamp(),greaterThan(0L));
  JvmStats.Mem mem=stats.getMem();
  assertNotNull(mem);
  for (  ByteSizeValue heap : Arrays.asList(mem.getHeapCommitted(),mem.getHeapMax(),mem.getHeapUsed(),mem.getNonHeapCommitted())) {
    assertNotNull(heap);
    assertThat(heap.bytes(),greaterThanOrEqualTo(0L));
  }
  assertNotNull(mem.getHeapUsedPercent());
  assertThat(mem.getHeapUsedPercent(),anyOf(equalTo((short)-1),greaterThanOrEqualTo((short)0)));
  JvmStats.Threads threads=stats.getThreads();
  assertNotNull(threads);
  assertThat(threads.getCount(),greaterThanOrEqualTo(0));
  assertThat(threads.getPeakCount(),greaterThanOrEqualTo(0));
  JvmStats.GarbageCollectors gcs=stats.getGc();
  assertNotNull(gcs);
  JvmStats.GarbageCollector[] collectors=gcs.getCollectors();
  assertNotNull(collectors);
  assertThat(collectors.length,greaterThan(0));
  for (  JvmStats.GarbageCollector collector : collectors) {
    assertTrue(Strings.hasText(collector.getName()));
    assertNotNull(collector.getCollectionTime());
    assertThat(collector.getCollectionTime().millis(),anyOf(equalTo(-1L),greaterThanOrEqualTo(0L)));
    assertThat(collector.getCollectionCount(),anyOf(equalTo(-1L),greaterThanOrEqualTo(0L)));
  }
  List<JvmStats.BufferPool> bufferPools=stats.getBufferPools();
  if (bufferPools != null) {
    for (    JvmStats.BufferPool bufferPool : bufferPools) {
      assertNotNull(bufferPool);
      assertTrue(Strings.hasText(bufferPool.getName()));
      assertThat(bufferPool.getCount(),greaterThanOrEqualTo(0L));
      assertNotNull(bufferPool.getTotalCapacity());
      assertThat(bufferPool.getTotalCapacity().bytes(),greaterThanOrEqualTo(0L));
      assertNotNull(bufferPool.getUsed());
      assertThat(bufferPool.getUsed().bytes(),anyOf(equalTo(-1L),greaterThanOrEqualTo(0L)));
    }
  }
  JvmStats.Classes classes=stats.getClasses();
  assertNotNull(classes);
  assertThat(classes.getLoadedClassCount(),greaterThanOrEqualTo(0L));
  assertThat(classes.getTotalLoadedClassCount(),greaterThanOrEqualTo(0L));
  assertThat(classes.getUnloadedClassCount(),greaterThanOrEqualTo(0L));
}
