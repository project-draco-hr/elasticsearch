{
  int[] unicastHostPorts=new int[numHosts];
  final int basePort=calcBasePort();
  final int maxPort=basePort + InternalTestCluster.PORTS_PER_JVM;
  int tries=0;
  for (int i=0; i < unicastHostPorts.length; i++) {
    boolean foundPortInRange=false;
    while (tries < InternalTestCluster.PORTS_PER_JVM && !foundPortInRange) {
      try (ServerSocket serverSocket=new ServerSocket()){
        serverSocket.setReuseAddress(NetworkUtils.defaultReuseAddress());
        serverSocket.bind(new InetSocketAddress(IP_ADDR,nextPort));
        foundPortInRange=true;
        unicastHostPorts[i]=nextPort;
      }
 catch (      IOException e) {
      }
      nextPort++;
      if (nextPort >= maxPort) {
        nextPort=basePort;
      }
      tries++;
    }
    if (!foundPortInRange) {
      throw new ElasticsearchException("could not find enough open ports in range [" + basePort + "-"+ maxPort+ "]. required ["+ unicastHostPorts.length+ "] ports");
    }
  }
  return unicastHostPorts;
}
