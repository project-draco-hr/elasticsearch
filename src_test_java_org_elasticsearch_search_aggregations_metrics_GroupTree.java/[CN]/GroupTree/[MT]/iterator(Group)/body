{
  return new AbstractIterator<Group>(){
{
      stack=new ArrayDeque<GroupTree>();
      push(GroupTree.this,start);
    }
    Deque<GroupTree> stack;
    private void push(    GroupTree z,    Group start){
      while (z.left != null) {
        if (start == null || start.compareTo(z.leaf) < 0) {
          stack.push(z.right);
          z=z.left;
        }
 else {
          z=z.right;
        }
      }
      if (start == null || z.leaf.compareTo(start) >= 0) {
        stack.push(z);
      }
    }
    @Override protected Group computeNext(){
      GroupTree r=stack.poll();
      while (r != null && r.left != null) {
        push(r,start);
        r=stack.poll();
      }
      if (r != null) {
        return r.leaf;
      }
      return endOfData();
    }
  }
;
}
