{
  MemoryUsage memUsage=memoryMXBean.getHeapMemoryUsage();
  long heapUsed=memUsage.getUsed() < 0 ? 0 : memUsage.getUsed();
  long heapCommitted=memUsage.getCommitted() < 0 ? 0 : memUsage.getCommitted();
  long heapMax=memUsage.getMax() < 0 ? 0 : memUsage.getMax();
  memUsage=memoryMXBean.getNonHeapMemoryUsage();
  long nonHeapUsed=memUsage.getUsed() < 0 ? 0 : memUsage.getUsed();
  long nonHeapCommitted=memUsage.getCommitted() < 0 ? 0 : memUsage.getCommitted();
  List<MemoryPoolMXBean> memoryPoolMXBeans=ManagementFactory.getMemoryPoolMXBeans();
  List<MemoryPool> pools=new ArrayList<>();
  for (  MemoryPoolMXBean memoryPoolMXBean : memoryPoolMXBeans) {
    try {
      MemoryUsage usage=memoryPoolMXBean.getUsage();
      MemoryUsage peakUsage=memoryPoolMXBean.getPeakUsage();
      String name=GcNames.getByMemoryPoolName(memoryPoolMXBean.getName(),null);
      if (name == null) {
        continue;
      }
      pools.add(new MemoryPool(name,usage.getUsed() < 0 ? 0 : usage.getUsed(),usage.getMax() < 0 ? 0 : usage.getMax(),peakUsage.getUsed() < 0 ? 0 : peakUsage.getUsed(),peakUsage.getMax() < 0 ? 0 : peakUsage.getMax()));
    }
 catch (    Exception ex) {
    }
  }
  Mem mem=new Mem(heapCommitted,heapUsed,heapMax,nonHeapCommitted,nonHeapUsed,Collections.unmodifiableList(pools));
  Threads threads=new Threads(threadMXBean.getThreadCount(),threadMXBean.getPeakThreadCount());
  List<GarbageCollectorMXBean> gcMxBeans=ManagementFactory.getGarbageCollectorMXBeans();
  GarbageCollector[] collectors=new GarbageCollector[gcMxBeans.size()];
  for (int i=0; i < collectors.length; i++) {
    GarbageCollectorMXBean gcMxBean=gcMxBeans.get(i);
    collectors[i]=new GarbageCollector(GcNames.getByGcName(gcMxBean.getName(),gcMxBean.getName()),gcMxBean.getCollectionCount(),gcMxBean.getCollectionTime());
  }
  GarbageCollectors garbageCollectors=new GarbageCollectors(collectors);
  List<BufferPool> bufferPoolsList=null;
  try {
    List<BufferPoolMXBean> bufferPools=ManagementFactory.getPlatformMXBeans(BufferPoolMXBean.class);
    bufferPoolsList=new ArrayList<>(bufferPools.size());
    for (    BufferPoolMXBean bufferPool : bufferPools) {
      bufferPoolsList.add(new BufferPool(bufferPool.getName(),bufferPool.getCount(),bufferPool.getTotalCapacity(),bufferPool.getMemoryUsed()));
    }
  }
 catch (  Exception e) {
  }
  Classes classes=new Classes(classLoadingMXBean.getLoadedClassCount(),classLoadingMXBean.getTotalLoadedClassCount(),classLoadingMXBean.getUnloadedClassCount());
  return new JvmStats(System.currentTimeMillis(),runtimeMXBean.getUptime(),mem,threads,garbageCollectors,bufferPoolsList,classes);
}
