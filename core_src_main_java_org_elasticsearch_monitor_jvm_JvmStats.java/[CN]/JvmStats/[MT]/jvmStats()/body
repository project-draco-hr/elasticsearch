{
  JvmStats stats=new JvmStats(System.currentTimeMillis(),runtimeMXBean.getUptime());
  stats.mem=new Mem();
  MemoryUsage memUsage=memoryMXBean.getHeapMemoryUsage();
  stats.mem.heapUsed=memUsage.getUsed() < 0 ? 0 : memUsage.getUsed();
  stats.mem.heapCommitted=memUsage.getCommitted() < 0 ? 0 : memUsage.getCommitted();
  stats.mem.heapMax=memUsage.getMax() < 0 ? 0 : memUsage.getMax();
  memUsage=memoryMXBean.getNonHeapMemoryUsage();
  stats.mem.nonHeapUsed=memUsage.getUsed() < 0 ? 0 : memUsage.getUsed();
  stats.mem.nonHeapCommitted=memUsage.getCommitted() < 0 ? 0 : memUsage.getCommitted();
  List<MemoryPoolMXBean> memoryPoolMXBeans=ManagementFactory.getMemoryPoolMXBeans();
  List<MemoryPool> pools=new ArrayList<>();
  for (int i=0; i < memoryPoolMXBeans.size(); i++) {
    try {
      MemoryPoolMXBean memoryPoolMXBean=memoryPoolMXBeans.get(i);
      MemoryUsage usage=memoryPoolMXBean.getUsage();
      MemoryUsage peakUsage=memoryPoolMXBean.getPeakUsage();
      String name=GcNames.getByMemoryPoolName(memoryPoolMXBean.getName(),null);
      if (name == null) {
        continue;
      }
      pools.add(new MemoryPool(name,usage.getUsed() < 0 ? 0 : usage.getUsed(),usage.getMax() < 0 ? 0 : usage.getMax(),peakUsage.getUsed() < 0 ? 0 : peakUsage.getUsed(),peakUsage.getMax() < 0 ? 0 : peakUsage.getMax()));
    }
 catch (    OutOfMemoryError err) {
      throw err;
    }
catch (    Throwable ex) {
    }
  }
  stats.mem.pools=pools.toArray(new MemoryPool[pools.size()]);
  stats.threads=new Threads();
  stats.threads.count=threadMXBean.getThreadCount();
  stats.threads.peakCount=threadMXBean.getPeakThreadCount();
  List<GarbageCollectorMXBean> gcMxBeans=ManagementFactory.getGarbageCollectorMXBeans();
  stats.gc=new GarbageCollectors();
  stats.gc.collectors=new GarbageCollector[gcMxBeans.size()];
  for (int i=0; i < stats.gc.collectors.length; i++) {
    GarbageCollectorMXBean gcMxBean=gcMxBeans.get(i);
    stats.gc.collectors[i]=new GarbageCollector();
    stats.gc.collectors[i].name=GcNames.getByGcName(gcMxBean.getName(),gcMxBean.getName());
    stats.gc.collectors[i].collectionCount=gcMxBean.getCollectionCount();
    stats.gc.collectors[i].collectionTime=gcMxBean.getCollectionTime();
  }
  try {
    List<BufferPoolMXBean> bufferPools=ManagementFactory.getPlatformMXBeans(BufferPoolMXBean.class);
    stats.bufferPools=new ArrayList<>(bufferPools.size());
    for (    BufferPoolMXBean bufferPool : bufferPools) {
      stats.bufferPools.add(new BufferPool(bufferPool.getName(),bufferPool.getCount(),bufferPool.getTotalCapacity(),bufferPool.getMemoryUsed()));
    }
  }
 catch (  Throwable t) {
  }
  return stats;
}
