{
  if (type instanceof Class<?>) {
    return ((Class)type).getName();
  }
 else   if (type instanceof ParameterizedType) {
    ParameterizedType parameterizedType=(ParameterizedType)type;
    Type[] arguments=parameterizedType.getActualTypeArguments();
    Type ownerType=parameterizedType.getOwnerType();
    StringBuilder stringBuilder=new StringBuilder();
    if (ownerType != null) {
      stringBuilder.append(toString(ownerType)).append(".");
    }
    stringBuilder.append(toString(parameterizedType.getRawType()));
    if (arguments.length > 0) {
      stringBuilder.append("<").append(toString(arguments[0]));
      for (int i=1; i < arguments.length; i++) {
        stringBuilder.append(", ").append(toString(arguments[i]));
      }
    }
    return stringBuilder.append(">").toString();
  }
 else   if (type instanceof GenericArrayType) {
    return toString(((GenericArrayType)type).getGenericComponentType()) + "[]";
  }
 else   if (type instanceof WildcardType) {
    WildcardType wildcardType=(WildcardType)type;
    Type[] lowerBounds=wildcardType.getLowerBounds();
    Type[] upperBounds=wildcardType.getUpperBounds();
    if (upperBounds.length != 1 || lowerBounds.length > 1) {
      throw new UnsupportedOperationException("Unsupported wildcard type " + type);
    }
    if (lowerBounds.length == 1) {
      if (upperBounds[0] != Object.class) {
        throw new UnsupportedOperationException("Unsupported wildcard type " + type);
      }
      return "? super " + toString(lowerBounds[0]);
    }
 else     if (upperBounds[0] == Object.class) {
      return "?";
    }
 else {
      return "? extends " + toString(upperBounds[0]);
    }
  }
 else {
    return type.toString();
  }
}
