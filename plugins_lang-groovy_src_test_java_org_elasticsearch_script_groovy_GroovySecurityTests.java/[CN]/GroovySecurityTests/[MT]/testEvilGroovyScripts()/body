{
  int nodes=randomIntBetween(1,3);
  Settings nodeSettings=Settings.builder().put("script.inline",true).put("script.indexed",true).build();
  internalCluster().startNodesAsync(nodes,nodeSettings).get();
  client().admin().cluster().prepareHealth().setWaitForNodes(nodes + "").get();
  client().prepareIndex("test","doc","1").setSource("foo",5,"bar","baz").setRefresh(true).get();
  assertSuccess("");
  assertSuccess("def foo = doc['foo'].value; if (foo == null) { return 5; }");
  assertSuccess("def bar = doc['bar'].value; if (bar == null) { return 5; }");
  assertSuccess("def list = [doc['foo'].value, 3, 4]; def v = list.get(1); list.add(10)");
  assertSuccess("def range = 1..doc['foo'].value; def v = range.get(0)");
  assertSuccess("def v = doc['foo'].value; def m = [:]; m.put(\"value\", v)");
  assertSuccess("def t = Instant.now().getMillis()");
  assertSuccess("def n = [1,2,3]; GroovyCollections.max(n)");
  assertFailure("pr = Runtime.getRuntime().exec(\"touch /tmp/gotcha\"); pr.waitFor()");
  assertFailure("d = new DateTime(); d.getClass().getDeclaredMethod(\"year\").setAccessible(true)");
  assertFailure("d = new DateTime(); d.\"${'get' + 'Class'}\"()." + "\"${'getDeclared' + 'Method'}\"(\"year\").\"${'set' + 'Accessible'}\"(false)");
  assertFailure("Class.forName(\"org.joda.time.DateTime\").getDeclaredMethod(\"year\").setAccessible(true)");
  assertFailure("Eval.me('2 + 2')");
  assertFailure("Eval.x(5, 'x + 2')");
  assertFailure("d = new Date(); java.lang.reflect.Field f = Date.class.getDeclaredField(\"fastTime\");" + " f.setAccessible(true); f.get(\"fastTime\")");
  assertFailure("def methodName = 'ex'; Runtime.\"${'get' + 'Runtime'}\"().\"${methodName}ec\"(\"touch /tmp/gotcha2\")");
  assertFailure("t = new Thread({ println 3 });");
  Path dir=createTempDir();
  if (!Constants.WINDOWS) {
    assertFailure("new File(\"" + dir + "\").exists()");
  }
}
