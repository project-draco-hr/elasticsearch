{
  final AtomicBoolean compressed=new AtomicBoolean(true);
  Directory dir=new RAMDirectory(){
    @Override public IndexOutput createOutput(    String name) throws IOException {
      if (compressed.get() && name.endsWith(".fdt")) {
        return compressor.indexOutput(super.createOutput(name));
      }
      return super.createOutput(name);
    }
    @Override public IndexInput openInput(    String name) throws IOException {
      if (name.endsWith(".fdt")) {
        IndexInput in=super.openInput(name);
        Compressor compressor1=CompressorFactory.compressor(in);
        if (compressor1 != null) {
          return compressor1.indexInput(in);
        }
 else {
          return in;
        }
      }
      return super.openInput(name);
    }
    @Override public IndexInput openInput(    String name,    int bufferSize) throws IOException {
      if (name.endsWith(".fdt")) {
        IndexInput in=super.openInput(name,bufferSize);
        if (in instanceof CompressedIndexInput) {
          return in;
        }
        Compressor compressor1=CompressorFactory.compressor(in);
        if (compressor1 != null) {
          return compressor1.indexInput(in);
        }
 else {
          return in;
        }
      }
      return super.openInput(name,bufferSize);
    }
  }
;
  IndexWriter writer=new IndexWriter(dir,new IndexWriterConfig(Lucene.VERSION,Lucene.STANDARD_ANALYZER));
  writer.addDocument(createDoc(1,(int)SizeValue.parseSizeValue("100b").singles()));
  writer.addDocument(createDoc(2,(int)SizeValue.parseSizeValue("5k").singles()));
  writer.commit();
  writer.addDocument(createDoc(3,(int)SizeValue.parseSizeValue("2k").singles()));
  writer.addDocument(createDoc(4,(int)SizeValue.parseSizeValue("1k").singles()));
  writer.commit();
  verify(writer);
  writer.forceMerge(1);
  writer.waitForMerges();
  verify(writer);
  compressed.set(false);
  writer.addDocument(createDoc(5,(int)SizeValue.parseSizeValue("2k").singles()));
  writer.addDocument(createDoc(6,(int)SizeValue.parseSizeValue("1k").singles()));
  verify(writer);
  writer.forceMerge(1);
  writer.waitForMerges();
  verify(writer);
}
