{
  if (clusterState.getMetaData().hasIndex(INDEX)) {
    IndexMetaData indexMetaData=clusterState.getMetaData().index(INDEX);
    Settings indexSettings=indexMetaData.getSettings();
    int numberOfShards=indexSettings.getAsInt(IndexMetaData.SETTING_NUMBER_OF_SHARDS,-1);
    if (numberOfShards != 1) {
      throw new IllegalStateException("illegal ingest index setting, [" + IndexMetaData.SETTING_NUMBER_OF_SHARDS + "] setting is ["+ numberOfShards+ "] while [1] is expected");
    }
    int numberOfReplicas=indexSettings.getAsInt(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,-1);
    if (numberOfReplicas != 1) {
      throw new IllegalStateException("illegal ingest index setting, [" + IndexMetaData.SETTING_NUMBER_OF_REPLICAS + "] setting is ["+ numberOfReplicas+ "] while [1] is expected");
    }
    boolean dynamicMappings=indexSettings.getAsBoolean("index.mapper.dynamic",true);
    if (dynamicMappings != false) {
      throw new IllegalStateException("illegal ingest index setting, [index.mapper.dynamic] setting is [" + dynamicMappings + "] while [false] is expected");
    }
    if (indexMetaData.getMappings().size() != 1 && indexMetaData.getMappings().containsKey(TYPE) == false) {
      throw new IllegalStateException("illegal ingest mappings, only [" + TYPE + "] mapping is allowed to exist in the "+ INDEX+ " index");
    }
    try {
      Map<String,Object> pipelineMapping=indexMetaData.getMappings().get(TYPE).getSourceAsMap();
      String dynamicMapping=(String)XContentMapValues.extractValue("dynamic",pipelineMapping);
      if ("strict".equals(dynamicMapping) == false) {
        throw new IllegalStateException("illegal ingest mapping, pipeline mapping must be strict");
      }
      Boolean allEnabled=(Boolean)XContentMapValues.extractValue("_all.enabled",pipelineMapping);
      if (Boolean.FALSE.equals(allEnabled) == false) {
        throw new IllegalStateException("illegal ingest mapping, _all field is enabled");
      }
      String processorsType=(String)XContentMapValues.extractValue("properties.processors.type",pipelineMapping);
      if ("object".equals(processorsType) == false) {
        throw new IllegalStateException("illegal ingest mapping, processors field's type is [" + processorsType + "] while [object] is expected");
      }
      Boolean processorsEnabled=(Boolean)XContentMapValues.extractValue("properties.processors.enabled",pipelineMapping);
      if (Boolean.FALSE.equals(processorsEnabled) == false) {
        throw new IllegalStateException("illegal ingest mapping, processors field enabled option is [true] while [false] is expected");
      }
      Boolean processorsDynamic=(Boolean)XContentMapValues.extractValue("properties.processors.dynamic",pipelineMapping);
      if (Boolean.TRUE.equals(processorsDynamic) == false) {
        throw new IllegalStateException("illegal ingest mapping, processors field dynamic option is [false] while [true] is expected");
      }
      String onFailureType=(String)XContentMapValues.extractValue("properties.on_failure.type",pipelineMapping);
      if ("object".equals(onFailureType) == false) {
        throw new IllegalStateException("illegal ingest mapping, on_failure field type option is [" + onFailureType + "] while [object] is expected");
      }
      Boolean onFailureEnabled=(Boolean)XContentMapValues.extractValue("properties.on_failure.enabled",pipelineMapping);
      if (Boolean.FALSE.equals(onFailureEnabled) == false) {
        throw new IllegalStateException("illegal ingest mapping, on_failure field enabled option is [true] while [false] is expected");
      }
      Boolean onFailureDynamic=(Boolean)XContentMapValues.extractValue("properties.on_failure.dynamic",pipelineMapping);
      if (Boolean.TRUE.equals(onFailureDynamic) == false) {
        throw new IllegalStateException("illegal ingest mapping, on_failure field dynamic option is [false] while [true] is expected");
      }
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    return true;
  }
 else {
    return false;
  }
}
