{
  for (  Map.Entry<String,Object> defaultEntry : defaults.entrySet()) {
    if (!content.containsKey(defaultEntry.getKey())) {
      content.put(defaultEntry.getKey(),defaultEntry.getValue());
    }
 else {
      if (content.get(defaultEntry.getKey()) instanceof Map && defaultEntry.getValue() instanceof Map) {
        mergeDefaults((Map<String,Object>)content.get(defaultEntry.getKey()),(Map<String,Object>)defaultEntry.getValue());
      }
 else       if (content.get(defaultEntry.getKey()) instanceof List && defaultEntry.getValue() instanceof List) {
        List defaultList=(List)defaultEntry.getValue();
        List contentList=(List)content.get(defaultEntry.getKey());
        List mergedList=new ArrayList();
        if (allListValuesAreMapsOfOne(defaultList) && allListValuesAreMapsOfOne(contentList)) {
          Map<String,Map<String,Object>> processed=Maps.newLinkedHashMap();
          for (          Object o : contentList) {
            Map<String,Object> map=(Map<String,Object>)o;
            Map.Entry<String,Object> entry=map.entrySet().iterator().next();
            processed.put(entry.getKey(),map);
          }
          for (          Object o : defaultList) {
            Map<String,Object> map=(Map<String,Object>)o;
            Map.Entry<String,Object> entry=map.entrySet().iterator().next();
            if (processed.containsKey(entry.getKey())) {
              mergeDefaults(processed.get(entry.getKey()),map);
            }
          }
          for (          Map<String,Object> map : processed.values()) {
            mergedList.add(map);
          }
        }
 else {
          mergedList.addAll((Collection)defaultEntry.getValue());
          mergedList.addAll((Collection)content.get(defaultEntry.getKey()));
        }
        content.put(defaultEntry.getKey(),mergedList);
      }
    }
  }
}
