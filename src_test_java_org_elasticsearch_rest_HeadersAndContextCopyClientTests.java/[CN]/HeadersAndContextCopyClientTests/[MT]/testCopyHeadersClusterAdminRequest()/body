{
  Map<String,String> transportHeaders=randomHeaders(randomIntBetween(0,10));
  Map<String,String> restHeaders=randomHeaders(randomIntBetween(0,10));
  Map<String,String> copiedHeaders=randomHeadersFrom(restHeaders);
  Set<String> usefulRestHeaders=new HashSet<>(copiedHeaders.keySet());
  usefulRestHeaders.addAll(randomMap(randomIntBetween(0,10),"useful-").keySet());
  Map<String,String> restContext=randomContext(randomIntBetween(0,10));
  Map<String,String> transportContext=Maps.difference(randomContext(randomIntBetween(0,10)),restContext).entriesOnlyOnLeft();
  HashMap<String,String> expectedHeaders=new HashMap<>();
  expectedHeaders.putAll(transportHeaders);
  expectedHeaders.putAll(copiedHeaders);
  Map<String,String> expectedContext=new HashMap<>();
  expectedContext.putAll(transportContext);
  expectedContext.putAll(restContext);
  try (Client client=client(new NoOpClient(getTestName()),new FakeRestRequest(restHeaders,expectedContext),usefulRestHeaders)){
    ClusterHealthRequest clusterHealthRequest=Requests.clusterHealthRequest();
    putHeaders(clusterHealthRequest,transportHeaders);
    putContext(clusterHealthRequest,transportContext);
    assertHeaders(clusterHealthRequest,transportHeaders);
    client.admin().cluster().health(clusterHealthRequest);
    assertHeaders(clusterHealthRequest,expectedHeaders);
    assertContext(clusterHealthRequest,expectedContext);
    ClusterStateRequest clusterStateRequest=Requests.clusterStateRequest();
    putHeaders(clusterStateRequest,transportHeaders);
    putContext(clusterStateRequest,transportContext);
    assertHeaders(clusterStateRequest,transportHeaders);
    client.admin().cluster().state(clusterStateRequest);
    assertHeaders(clusterStateRequest,expectedHeaders);
    assertContext(clusterStateRequest,expectedContext);
    ClusterStatsRequest clusterStatsRequest=Requests.clusterStatsRequest();
    putHeaders(clusterStatsRequest,transportHeaders);
    putContext(clusterStatsRequest,transportContext);
    assertHeaders(clusterStatsRequest,transportHeaders);
    client.admin().cluster().clusterStats(clusterStatsRequest);
    assertHeaders(clusterStatsRequest,expectedHeaders);
    assertContext(clusterStatsRequest,expectedContext);
  }
 }
