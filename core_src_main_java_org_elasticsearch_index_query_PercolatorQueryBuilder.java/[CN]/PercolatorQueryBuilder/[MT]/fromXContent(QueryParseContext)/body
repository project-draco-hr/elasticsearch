{
  XContentParser parser=parseContext.parser();
  float boost=AbstractQueryBuilder.DEFAULT_BOOST;
  String documentType=null;
  String indexedDocumentIndex=null;
  String indexedDocumentType=null;
  String indexedDocumentId=null;
  String indexedDocumentRouting=null;
  String indexedDocumentPreference=null;
  Long indexedDocumentVersion=null;
  BytesReference source=null;
  String queryName=null;
  String currentFieldName=null;
  XContentParser.Token token;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if (parseContext.getParseFieldMatcher().match(currentFieldName,DOCUMENT_FIELD)) {
        try (XContentBuilder builder=XContentFactory.jsonBuilder()){
          builder.copyCurrentStructure(parser);
          builder.flush();
          source=builder.bytes();
        }
       }
 else {
        throw new ParsingException(parser.getTokenLocation(),"[" + PercolatorQueryBuilder.NAME + "] query does not support ["+ token+ "]");
      }
    }
 else     if (token.isValue()) {
      if (parseContext.getParseFieldMatcher().match(currentFieldName,DOCUMENT_TYPE_FIELD)) {
        documentType=parser.text();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,INDEXED_DOCUMENT_FIELD_INDEX)) {
        indexedDocumentIndex=parser.text();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,INDEXED_DOCUMENT_FIELD_TYPE)) {
        indexedDocumentType=parser.text();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,INDEXED_DOCUMENT_FIELD_ID)) {
        indexedDocumentId=parser.text();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,INDEXED_DOCUMENT_FIELD_ROUTING)) {
        indexedDocumentRouting=parser.text();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,INDEXED_DOCUMENT_FIELD_PREFERENCE)) {
        indexedDocumentPreference=parser.text();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,INDEXED_DOCUMENT_FIELD_VERSION)) {
        indexedDocumentVersion=parser.longValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.BOOST_FIELD)) {
        boost=parser.floatValue();
      }
 else       if (parseContext.getParseFieldMatcher().match(currentFieldName,AbstractQueryBuilder.NAME_FIELD)) {
        queryName=parser.text();
      }
 else {
        throw new ParsingException(parser.getTokenLocation(),"[" + PercolatorQueryBuilder.NAME + "] query does not support ["+ currentFieldName+ "]");
      }
    }
 else {
      throw new ParsingException(parser.getTokenLocation(),"[" + PercolatorQueryBuilder.NAME + "] query does not support ["+ token+ "]");
    }
  }
  if (documentType == null) {
    throw new IllegalArgumentException("[" + PercolatorQueryBuilder.NAME + "] query is missing required ["+ DOCUMENT_TYPE_FIELD.getPreferredName()+ "] parameter");
  }
  PercolatorQueryBuilder queryBuilder;
  if (source != null) {
    queryBuilder=new PercolatorQueryBuilder(documentType,source);
  }
 else   if (indexedDocumentId != null) {
    queryBuilder=new PercolatorQueryBuilder(documentType,indexedDocumentIndex,indexedDocumentType,indexedDocumentId,indexedDocumentRouting,indexedDocumentPreference,indexedDocumentVersion);
  }
 else {
    throw new IllegalArgumentException("[" + PercolatorQueryBuilder.NAME + "] query, nothing to percolate");
  }
  queryBuilder.queryName(queryName);
  queryBuilder.boost(boost);
  return queryBuilder;
}
