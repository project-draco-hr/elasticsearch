{
  Directory dir=newDirectory();
  IndexWriterConfig iwc=newIndexWriterConfig(new MockAnalyzer(random()));
  iwc.setMergePolicy(newLogMergePolicy());
  RandomIndexWriter iw=new RandomIndexWriter(random(),dir,iwc);
  FieldType offsetsType=new FieldType(TextField.TYPE_STORED);
  offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
  Field body=new Field("body","",offsetsType);
  final String firstValue="This is a test. Just a test highlighting from postings highlighter.";
  Document doc=new Document();
  doc.add(body);
  body.setStringValue(firstValue);
  final String secondValue="This is the second value without matches.";
  Field body2=new Field("body","",offsetsType);
  doc.add(body2);
  body2.setStringValue(secondValue);
  final String thirdValue="This is the third value to test highlighting with postings.";
  Field body3=new Field("body","",offsetsType);
  doc.add(body3);
  body3.setStringValue(thirdValue);
  iw.addDocument(doc);
  IndexReader ir=iw.getReader();
  iw.close();
  IndexSearcher searcher=newSearcher(ir);
  Query query=new TermQuery(new Term("body","highlighting"));
  TopDocs topDocs=searcher.search(query,null,10,Sort.INDEXORDER);
  assertThat(topDocs.totalHits,equalTo(1));
  XPostingsHighlighter highlighter=new XPostingsHighlighter(){
    @Override protected BreakIterator getBreakIterator(    String field){
      return new WholeBreakIterator();
    }
    @Override protected char getMultiValuedSeparator(    String field){
      return 8233;
    }
    @Override protected Passage[] getEmptyHighlight(    String fieldName,    BreakIterator bi,    int maxPassages){
      return new Passage[0];
    }
  }
;
  String snippets[]=highlighter.highlight("body",query,searcher,topDocs);
  assertThat(snippets.length,equalTo(1));
  String firstHlValue="This is a test. Just a test <b>highlighting</b> from postings highlighter.";
  String thirdHlValue="This is the third value to test <b>highlighting</b> with postings.";
  assertThat(snippets[0],equalTo(firstHlValue + (char)8233 + secondValue+ (char)8233+ thirdHlValue));
  highlighter=new XPostingsHighlighter(){
    Iterator<String> valuesIterator=Arrays.asList(firstValue,secondValue,thirdValue).iterator();
    Iterator<Integer> offsetsIterator=Arrays.asList(0,firstValue.length() + 1,firstValue.length() + secondValue.length() + 2).iterator();
    @Override protected String[][] loadFieldValues(    IndexSearcher searcher,    String[] fields,    int[] docids,    int maxLength) throws IOException {
      return new String[][]{new String[]{valuesIterator.next()}};
    }
    @Override protected int getOffsetForCurrentValue(    String field,    int docId){
      return offsetsIterator.next();
    }
    @Override protected BreakIterator getBreakIterator(    String field){
      return new WholeBreakIterator();
    }
    @Override protected Passage[] getEmptyHighlight(    String fieldName,    BreakIterator bi,    int maxPassages){
      return new Passage[0];
    }
  }
;
  snippets=highlighter.highlight("body",query,searcher,topDocs);
  assertThat(snippets.length,equalTo(1));
  assertThat(snippets[0],equalTo(firstHlValue));
  snippets=highlighter.highlight("body",query,searcher,topDocs);
  assertThat(snippets.length,equalTo(1));
  assertThat(snippets[0],nullValue());
  snippets=highlighter.highlight("body",query,searcher,topDocs);
  assertThat(snippets.length,equalTo(1));
  assertThat(snippets[0],equalTo(thirdHlValue));
  ir.close();
  dir.close();
}
