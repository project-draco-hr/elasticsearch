{
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("nested1").field("type","nested").startObject("properties").startObject("nested2").field("type","nested").field("include_in_root",true).endObject().endObject().endObject().endObject().endObject().string();
  DocumentMapper docMapper=MapperTestUtils.newParser().parse(mapping);
  assertThat(docMapper.hasNestedObjects(),equalTo(true));
  ObjectMapper nested1Mapper=docMapper.objectMappers().get("nested1");
  assertThat(nested1Mapper.nested().isNested(),equalTo(true));
  assertThat(nested1Mapper.nested().isIncludeInParent(),equalTo(false));
  assertThat(nested1Mapper.nested().isIncludeInRoot(),equalTo(false));
  ObjectMapper nested2Mapper=docMapper.objectMappers().get("nested1.nested2");
  assertThat(nested2Mapper.nested().isNested(),equalTo(true));
  assertThat(nested2Mapper.nested().isIncludeInParent(),equalTo(false));
  assertThat(nested2Mapper.nested().isIncludeInRoot(),equalTo(true));
  ParsedDocument doc=docMapper.parse("type","1",XContentFactory.jsonBuilder().startObject().field("field","value").startArray("nested1").startObject().field("field1","1").startArray("nested2").startObject().field("field2","2").endObject().startObject().field("field2","3").endObject().endArray().endObject().startObject().field("field1","4").startArray("nested2").startObject().field("field2","5").endObject().startObject().field("field2","6").endObject().endArray().endObject().endArray().endObject().bytes());
  assertThat(doc.docs().size(),equalTo(7));
  assertThat(doc.docs().get(0).get("nested1.nested2.field2"),equalTo("6"));
  assertThat(doc.docs().get(0).get("nested1.field1"),nullValue());
  assertThat(doc.docs().get(0).get("field"),nullValue());
  assertThat(doc.docs().get(1).get("nested1.nested2.field2"),equalTo("5"));
  assertThat(doc.docs().get(1).get("nested1.field1"),nullValue());
  assertThat(doc.docs().get(1).get("field"),nullValue());
  assertThat(doc.docs().get(2).get("nested1.field1"),equalTo("4"));
  assertThat(doc.docs().get(2).get("nested1.nested2.field2"),nullValue());
  assertThat(doc.docs().get(2).get("field"),nullValue());
  assertThat(doc.docs().get(3).get("nested1.nested2.field2"),equalTo("3"));
  assertThat(doc.docs().get(3).get("field"),nullValue());
  assertThat(doc.docs().get(4).get("nested1.nested2.field2"),equalTo("2"));
  assertThat(doc.docs().get(4).get("field"),nullValue());
  assertThat(doc.docs().get(5).get("nested1.field1"),equalTo("1"));
  assertThat(doc.docs().get(5).get("nested1.nested2.field2"),nullValue());
  assertThat(doc.docs().get(5).get("field"),nullValue());
  assertThat(doc.docs().get(6).get("field"),equalTo("value"));
  assertThat(doc.docs().get(6).get("nested1.field1"),nullValue());
  assertThat(doc.docs().get(6).getFields("nested1.nested2.field2").length,equalTo(4));
}
