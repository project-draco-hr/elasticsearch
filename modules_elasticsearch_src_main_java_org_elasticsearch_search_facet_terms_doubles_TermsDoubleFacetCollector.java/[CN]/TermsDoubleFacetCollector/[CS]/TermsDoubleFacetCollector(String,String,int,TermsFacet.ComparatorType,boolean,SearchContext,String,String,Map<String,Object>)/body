{
  super(facetName);
  this.fieldDataCache=context.fieldDataCache();
  this.size=size;
  this.comparatorType=comparatorType;
  this.numberOfShards=context.numberOfShards();
  MapperService.SmartNameFieldMappers smartMappers=context.mapperService().smartName(fieldName);
  if (smartMappers == null || !smartMappers.hasMapper()) {
    throw new ElasticSearchIllegalArgumentException("Field [" + fieldName + "] doesn't have a type, can't run terms double facet collector on it");
  }
 else {
    if (smartMappers.hasDocMapper()) {
      setFilter(context.filterCache().cache(smartMappers.docMapper().typeFilter()));
    }
    if (smartMappers.mapper().fieldDataType() != FieldDataType.DefaultTypes.DOUBLE) {
      throw new ElasticSearchIllegalArgumentException("Field [" + fieldName + "] is not of double type, can't run terms double facet collector on it");
    }
    this.indexFieldName=smartMappers.mapper().names().indexName();
    this.fieldDataType=smartMappers.mapper().fieldDataType();
  }
  if (script != null) {
    this.script=new SearchScript(context.lookup(),scriptLang,script,params,context.scriptService());
  }
 else {
    this.script=null;
  }
  if (this.script == null) {
    aggregator=new StaticAggregatorValueProc(popFacets());
  }
 else {
    aggregator=new AggregatorValueProc(popFacets(),this.script);
  }
  if (allTerms) {
    try {
      for (      IndexReader reader : context.searcher().subReaders()) {
        DoubleFieldData fieldData=(DoubleFieldData)fieldDataCache.cache(fieldDataType,reader,indexFieldName);
        fieldData.forEachValue(aggregator);
      }
    }
 catch (    Exception e) {
      throw new FacetPhaseExecutionException(facetName,"failed to load all terms",e);
    }
  }
}
