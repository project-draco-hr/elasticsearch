{
  PathTrie<String> trie=new PathTrie<>();
  assertThat(trie.splitPath("/a/"),arrayContaining("a"));
  assertThat(trie.splitPath("/a/b"),arrayContaining("a","b"));
  assertThat(trie.splitPath("/a/b/c"),arrayContaining("a","b","c"));
  assertThat(trie.splitPath("/a/b/<c/d>"),arrayContaining("a","b","<c/d>"));
  assertThat(trie.splitPath("/a/b/<c/d>/d"),arrayContaining("a","b","<c/d>","d"));
  assertThat(trie.splitPath("/<logstash-{now}>/_search"),arrayContaining("<logstash-{now}>","_search"));
  assertThat(trie.splitPath("/<logstash-{now/d}>/_search"),arrayContaining("<logstash-{now/d}>","_search"));
  assertThat(trie.splitPath("/<logstash-{now/M{YYYY.MM}}>/_search"),arrayContaining("<logstash-{now/M{YYYY.MM}}>","_search"));
  assertThat(trie.splitPath("/<logstash-{now/M{YYYY.MM}}>/_search"),arrayContaining("<logstash-{now/M{YYYY.MM}}>","_search"));
  assertThat(trie.splitPath("/<logstash-{now/M{YYYY.MM|UTC}}>/log/_search"),arrayContaining("<logstash-{now/M{YYYY.MM|UTC}}>","log","_search"));
  assertThat(trie.splitPath("/<logstash-{now/M}>,<logstash-{now/M-1M}>/_search"),arrayContaining("<logstash-{now/M}>,<logstash-{now/M-1M}>","_search"));
  assertThat(trie.splitPath("/<logstash-{now/M}>,<logstash-{now/M-1M}>/_search"),arrayContaining("<logstash-{now/M}>,<logstash-{now/M-1M}>","_search"));
  assertThat(trie.splitPath("/<logstash-{now/M{YYYY.MM}}>,<logstash-{now/M-1M{YYYY.MM}}>/_search"),arrayContaining("<logstash-{now/M{YYYY.MM}}>,<logstash-{now/M-1M{YYYY.MM}}>","_search"));
  assertThat(trie.splitPath("/<logstash-{now/M{YYYY.MM|UTC}}>,<logstash-{now/M-1M{YYYY.MM|UTC}}>/_search"),arrayContaining("<logstash-{now/M{YYYY.MM|UTC}}>,<logstash-{now/M-1M{YYYY.MM|UTC}}>","_search"));
}
