{
  AtomicReader reader=context.reader();
  Terms terms=reader.terms(getFieldNames().indexName());
  if (terms == null) {
    return IntArrayAtomicFieldData.EMPTY;
  }
  final TIntArrayList values=new TIntArrayList();
  values.add(0);
  OrdinalsBuilder builder=new OrdinalsBuilder(terms,reader.maxDoc());
  try {
    BytesRef term;
    int max=Integer.MIN_VALUE;
    int min=Integer.MAX_VALUE;
    BytesRefIterator iter=builder.buildFromTerms(builder.wrapNumeric32Bit(terms.iterator(null)),reader.getLiveDocs());
    while ((term=iter.next()) != null) {
      int value=NumericUtils.prefixCodedToInt(term);
      values.add(value);
      if (value > max) {
        max=value;
      }
      if (value < min) {
        min=value;
      }
    }
    Ordinals build=builder.build(fieldDataType.getSettings());
    if (fieldDataType.getSettings().getAsBoolean("optimize_type",true)) {
      if (min >= Byte.MIN_VALUE && max <= Byte.MAX_VALUE) {
        return ByteArrayIndexFieldData.build(reader,fieldDataType,builder,build,new ByteArrayIndexFieldData.BuilderBytes(){
          @Override public byte get(          int index){
            return (byte)values.get(index);
          }
          @Override public byte[] toArray(){
            byte[] bValues=new byte[values.size()];
            int i=0;
            for (TIntIterator it=values.iterator(); it.hasNext(); ) {
              bValues[i++]=(byte)it.next();
            }
            return bValues;
          }
        }
);
      }
 else       if (min >= Short.MIN_VALUE && max <= Short.MAX_VALUE) {
        return ShortArrayIndexFieldData.build(reader,fieldDataType,builder,build,new ShortArrayIndexFieldData.BuilderShorts(){
          @Override public short get(          int index){
            return (short)values.get(index);
          }
          @Override public short[] toArray(){
            short[] sValues=new short[values.size()];
            int i=0;
            for (TIntIterator it=values.iterator(); it.hasNext(); ) {
              sValues[i++]=(short)it.next();
            }
            return sValues;
          }
          @Override public int size(){
            return values.size();
          }
        }
);
      }
    }
    return build(reader,fieldDataType,builder,build,new BuilderIntegers(){
      @Override public int get(      int index){
        return values.get(index);
      }
      @Override public int[] toArray(){
        return values.toArray();
      }
      @Override public int size(){
        return values.size();
      }
    }
);
  }
  finally {
    builder.close();
  }
}
