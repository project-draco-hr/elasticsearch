{
  Set<Setting<?>> settings=new LinkedHashSet<>(2);
  final boolean groupFirst=randomBoolean();
  final Setting<?> groupSetting=Setting.groupSetting("foo.",SettingsProperty.ClusterScope);
  final Setting<?> listSetting=Setting.listSetting("foo.bar",Collections.emptyList(),Function.identity(),SettingsProperty.ClusterScope);
  settings.add(groupFirst ? groupSetting : listSetting);
  settings.add(groupFirst ? listSetting : groupSetting);
  try {
    new ClusterSettings(Settings.EMPTY,settings);
    fail("an exception should have been thrown because settings overlap");
  }
 catch (  IllegalArgumentException e) {
    if (groupFirst) {
      assertEquals("complex setting key: [foo.bar] overlaps existing setting key: [foo.]",e.getMessage());
    }
 else {
      assertEquals("complex setting key: [foo.] overlaps existing setting key: [foo.bar]",e.getMessage());
    }
  }
}
