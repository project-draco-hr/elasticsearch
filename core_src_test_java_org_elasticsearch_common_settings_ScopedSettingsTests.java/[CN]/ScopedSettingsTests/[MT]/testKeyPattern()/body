{
  assertTrue(AbstractScopedSettings.isValidKey("a.b.c-b.d"));
  assertTrue(AbstractScopedSettings.isValidKey("a.b.c.d"));
  assertTrue(AbstractScopedSettings.isValidKey("a.b_012.c_b.d"));
  assertTrue(AbstractScopedSettings.isValidKey("a"));
  assertFalse(AbstractScopedSettings.isValidKey("a b"));
  assertFalse(AbstractScopedSettings.isValidKey(""));
  assertFalse(AbstractScopedSettings.isValidKey("\""));
  try {
    new IndexScopedSettings(Settings.EMPTY,Collections.singleton(Setting.groupSetting("foo.bar.",Property.IndexScope)));
    fail();
  }
 catch (  IllegalArgumentException e) {
    assertEquals("illegal settings key: [foo.bar.] must start with [index.]",e.getMessage());
  }
  try {
    new IndexScopedSettings(Settings.EMPTY,Collections.singleton(Setting.simpleString("foo.bar",Property.IndexScope)));
    fail();
  }
 catch (  IllegalArgumentException e) {
    assertEquals("illegal settings key: [foo.bar] must start with [index.]",e.getMessage());
  }
  try {
    new IndexScopedSettings(Settings.EMPTY,Collections.singleton(Setting.groupSetting("index. foo.",Property.IndexScope)));
    fail();
  }
 catch (  IllegalArgumentException e) {
    assertEquals("illegal settings key: [index. foo.]",e.getMessage());
  }
  new IndexScopedSettings(Settings.EMPTY,Collections.singleton(Setting.groupSetting("index.",Property.IndexScope)));
  try {
    new IndexScopedSettings(Settings.EMPTY,Collections.singleton(Setting.boolSetting("index.",true,Property.IndexScope)));
    fail();
  }
 catch (  IllegalArgumentException e) {
    assertEquals("illegal settings key: [index.]",e.getMessage());
  }
  new IndexScopedSettings(Settings.EMPTY,Collections.singleton(Setting.boolSetting("index.boo",true,Property.IndexScope)));
  new ClusterSettings(Settings.EMPTY,Collections.singleton(Setting.boolSetting("index.boo",true,Property.NodeScope)));
}
