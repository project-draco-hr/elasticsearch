{
  super(sub,values);
  for (int i=1; i < ranges.length; ++i) {
    if (RANGE_COMPARATOR.compare(ranges[i - 1],ranges[i]) > 0) {
      throw new IllegalArgumentException("Ranges must be sorted");
    }
  }
  this.values=values;
  this.sub=sub;
  froms=new long[ranges.length];
  tos=new long[ranges.length];
  maxTos=new long[ranges.length];
  for (int i=0; i < ranges.length; ++i) {
    if (ranges[i].from == null) {
      froms[i]=0;
    }
 else {
      froms[i]=values.lookupTerm(ranges[i].from);
      if (froms[i] < 0) {
        froms[i]=-1 - froms[i];
      }
    }
    if (ranges[i].to == null) {
      tos[i]=values.getValueCount() - 1;
    }
 else {
      long ord=values.lookupTerm(ranges[i].to);
      if (ord < 0) {
        tos[i]=-2 - ord;
      }
 else {
        tos[i]=ord - 1;
      }
    }
  }
  maxTos[0]=tos[0];
  for (int i=1; i < tos.length; ++i) {
    maxTos[i]=Math.max(maxTos[i - 1],tos[i]);
  }
}
