{
  String index="test";
  internalCluster().ensureAtLeastNumDataNodes(2);
  assertAcked(prepareCreate(index).setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,"2").put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,"1")));
  indexRandomData(index);
  ensureGreen(index);
  IndicesShardStoresResponse response=client().admin().indices().prepareShardStores(index).get();
  assertThat(response.getStoreStatuses().size(),equalTo(0));
  response=client().admin().indices().shardStores(Requests.indicesShardStoresRequest(index).shardStatuses("all")).get();
  assertThat(response.getStoreStatuses().containsKey(index),equalTo(true));
  ImmutableOpenIntMap<List<IndicesShardStoresResponse.StoreStatus>> shardStores=response.getStoreStatuses().get(index);
  assertThat(shardStores.values().size(),equalTo(2));
  for (  ObjectCursor<List<IndicesShardStoresResponse.StoreStatus>> shardStoreStatuses : shardStores.values()) {
    for (    IndicesShardStoresResponse.StoreStatus storeStatus : shardStoreStatuses.value) {
      assertThat(storeStatus.getAllocationId(),notNullValue());
      assertThat(storeStatus.getNode(),notNullValue());
      assertThat(storeStatus.getStoreException(),nullValue());
    }
  }
  ensureGreen(index);
  logger.info("--> disable allocation");
  disableAllocation(index);
  logger.info("--> stop random node");
  int num=client().admin().cluster().prepareState().get().getState().nodes().getSize();
  internalCluster().stopRandomNode(new IndexNodePredicate(index));
  assertNoTimeout(client().admin().cluster().prepareHealth().setWaitForNodes("" + (num - 1)));
  ClusterState clusterState=client().admin().cluster().prepareState().get().getState();
  List<ShardRouting> unassignedShards=clusterState.routingTable().index(index).shardsWithState(ShardRoutingState.UNASSIGNED);
  response=client().admin().indices().shardStores(Requests.indicesShardStoresRequest(index)).get();
  assertThat(response.getStoreStatuses().containsKey(index),equalTo(true));
  ImmutableOpenIntMap<List<IndicesShardStoresResponse.StoreStatus>> shardStoresStatuses=response.getStoreStatuses().get(index);
  assertThat(shardStoresStatuses.size(),equalTo(unassignedShards.size()));
  for (  IntObjectCursor<List<IndicesShardStoresResponse.StoreStatus>> storesStatus : shardStoresStatuses) {
    assertThat("must report for one store",storesStatus.value.size(),equalTo(1));
    assertThat("reported store should be primary",storesStatus.value.get(0).getAllocationStatus(),equalTo(IndicesShardStoresResponse.StoreStatus.AllocationStatus.PRIMARY));
  }
  logger.info("--> enable allocation");
  enableAllocation(index);
}
