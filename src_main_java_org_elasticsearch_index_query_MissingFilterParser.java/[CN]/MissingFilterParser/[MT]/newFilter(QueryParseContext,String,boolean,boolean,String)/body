{
  if (!existence && !nullValue) {
    throw new QueryParsingException(parseContext.index(),"missing must have either existence, or null_value, or both set to true");
  }
  final FieldMappers fieldNamesMapper=parseContext.mapperService().indexName(FieldNamesFieldMapper.NAME);
  MapperService.SmartNameObjectMapper smartNameObjectMapper=parseContext.smartObjectMapper(fieldPattern);
  if (smartNameObjectMapper != null && smartNameObjectMapper.hasMapper()) {
    fieldPattern=fieldPattern + ".*";
  }
  List<String> fields=parseContext.simpleMatchToIndexNames(fieldPattern);
  if (fields.isEmpty()) {
    if (existence) {
      return Queries.MATCH_ALL_FILTER;
    }
    return null;
  }
  Filter existenceFilter=null;
  Filter nullFilter=null;
  MapperService.SmartNameFieldMappers nonNullFieldMappers=null;
  if (existence) {
    XBooleanFilter boolFilter=new XBooleanFilter();
    for (    String field : fields) {
      MapperService.SmartNameFieldMappers smartNameFieldMappers=parseContext.smartFieldMappers(field);
      if (smartNameFieldMappers != null) {
        nonNullFieldMappers=smartNameFieldMappers;
      }
      Filter filter=null;
      if (fieldNamesMapper != null && fieldNamesMapper.mapper().fieldType().indexOptions() != IndexOptions.NONE) {
        final String f;
        if (smartNameFieldMappers != null && smartNameFieldMappers.hasMapper()) {
          f=smartNameFieldMappers.mapper().names().indexName();
        }
 else {
          f=field;
        }
        filter=fieldNamesMapper.mapper().termFilter(f,parseContext);
      }
      if (filter == null && smartNameFieldMappers != null && smartNameFieldMappers.hasMapper()) {
        filter=smartNameFieldMappers.mapper().rangeFilter(null,null,true,true,parseContext);
      }
      if (filter == null) {
        filter=new TermRangeFilter(field,null,null,true,true);
      }
      boolFilter.add(filter,BooleanClause.Occur.SHOULD);
    }
    existenceFilter=parseContext.cacheFilter(boolFilter,new HashedBytesRef("$exists$" + fieldPattern),parseContext.autoFilterCachePolicy());
    existenceFilter=new NotFilter(existenceFilter);
    existenceFilter=parseContext.cacheFilter(existenceFilter,new HashedBytesRef("$missing$" + fieldPattern),parseContext.autoFilterCachePolicy());
  }
  if (nullValue) {
    for (    String field : fields) {
      MapperService.SmartNameFieldMappers smartNameFieldMappers=parseContext.smartFieldMappers(field);
      if (smartNameFieldMappers != null && smartNameFieldMappers.hasMapper()) {
        nullFilter=smartNameFieldMappers.mapper().nullValueFilter();
        if (nullFilter != null) {
          nullFilter=parseContext.cacheFilter(nullFilter,new HashedBytesRef("$null$" + fieldPattern),parseContext.autoFilterCachePolicy());
        }
      }
    }
  }
  Filter filter;
  if (nullFilter != null) {
    if (existenceFilter != null) {
      XBooleanFilter combined=new XBooleanFilter();
      combined.add(existenceFilter,BooleanClause.Occur.SHOULD);
      combined.add(nullFilter,BooleanClause.Occur.SHOULD);
      filter=parseContext.cacheFilter(combined,null,parseContext.autoFilterCachePolicy());
    }
 else {
      filter=nullFilter;
    }
  }
 else {
    filter=existenceFilter;
  }
  if (filter == null) {
    return null;
  }
  if (filterName != null) {
    parseContext.addNamedFilter(filterName,existenceFilter);
  }
  return filter;
}
