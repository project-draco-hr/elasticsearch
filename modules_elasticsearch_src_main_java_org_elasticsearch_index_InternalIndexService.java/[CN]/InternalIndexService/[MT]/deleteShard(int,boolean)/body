{
  Map<Integer,Injector> tmpShardInjectors=newHashMap(shardsInjectors);
  Injector shardInjector=tmpShardInjectors.remove(shardId);
  if (shardInjector == null) {
    if (close) {
      return;
    }
    throw new IndexShardMissingException(new ShardId(index,shardId));
  }
  shardsInjectors=ImmutableMap.copyOf(tmpShardInjectors);
  if (!close) {
    logger.debug("Deleting Shard Id [{}]",shardId);
  }
  Map<Integer,IndexShard> tmpShardsMap=newHashMap(shards);
  IndexShard indexShard=tmpShardsMap.remove(shardId);
  shards=ImmutableMap.copyOf(tmpShardsMap);
  shardInjector.getInstance(IndexShardManagement.class).close();
  RecoveryAction recoveryAction=shardInjector.getInstance(RecoveryAction.class);
  if (recoveryAction != null)   recoveryAction.close();
  shardInjector.getInstance(IndexShardGatewayService.class).close();
  indexShard.close();
  Engine engine=shardInjector.getInstance(Engine.class);
  engine.close();
  Store store=shardInjector.getInstance(Store.class);
  try {
    store.fullDelete();
  }
 catch (  IOException e) {
    logger.warn("Failed to clean store on shard deletion",e);
  }
  try {
    store.close();
  }
 catch (  IOException e) {
    logger.warn("Failed to close store on shard deletion",e);
  }
  Injectors.close(injector);
}
