{
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("nested").field("type","nested").startObject("properties").startObject("int").field("type","integer").startObject("fielddata").field("format","doc_values").endObject().endObject().startObject("double").field("type","double").startObject("fielddata").field("format","doc_values").endObject().endObject().endObject().endObject().endObject().endObject().endObject().string();
  DocumentMapper defaultMapper=createIndex("test").mapperService().documentMapperParser().parse(mapping);
  ParsedDocument parsedDoc=defaultMapper.parse("test","type","1",XContentFactory.jsonBuilder().startObject().startArray("nested").startObject().field("int","1234").field("double","1234").endObject().startObject().field("int","-1").field("double","-2").endObject().endArray().endObject().bytes());
  for (  Document doc : parsedDoc.docs()) {
    if (doc == parsedDoc.rootDoc()) {
      continue;
    }
    assertEquals(DocValuesType.SORTED_NUMERIC,SimpleStringMappingTests.docValuesType(doc,"nested.int"));
    assertEquals(DocValuesType.SORTED_NUMERIC,SimpleStringMappingTests.docValuesType(doc,"nested.double"));
  }
}
