{
  String[] nonFractionNumericFieldTypes={"integer","long","short"};
  DocumentMapperParser parser=createIndex("test").mapperService().documentMapperParser();
  for (  String nonFractionNumericFieldType : nonFractionNumericFieldTypes) {
    String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("noErrorNoCoerceField").field("type",nonFractionNumericFieldType).field("ignore_malformed",true).field("coerce",false).endObject().startObject("noErrorCoerceField").field("type",nonFractionNumericFieldType).field("ignore_malformed",true).field("coerce",true).endObject().startObject("errorDefaultCoerce").field("type",nonFractionNumericFieldType).field("ignore_malformed",false).endObject().startObject("errorNoCoerce").field("type",nonFractionNumericFieldType).field("ignore_malformed",false).field("coerce",false).endObject().endObject().endObject().endObject().string();
    DocumentMapper defaultMapper=parser.parse(mapping);
    String invalidJsonNumberAsString="1";
    ParsedDocument doc=defaultMapper.parse("test","type","1",XContentFactory.jsonBuilder().startObject().field("noErrorNoCoerceField",invalidJsonNumberAsString).field("noErrorCoerceField",invalidJsonNumberAsString).field("errorDefaultCoerce",invalidJsonNumberAsString).endObject().bytes());
    assertThat(doc.rootDoc().getField("noErrorNoCoerceField"),nullValue());
    assertThat(doc.rootDoc().getField("noErrorCoerceField"),notNullValue());
    assertThat(doc.rootDoc().getField("errorDefaultCoerce"),notNullValue());
    int validNumber=1;
    doc=defaultMapper.parse("test","type","1",XContentFactory.jsonBuilder().startObject().field("noErrorNoCoerceField",validNumber).field("noErrorCoerceField",validNumber).field("errorDefaultCoerce",validNumber).endObject().bytes());
    assertEquals(validNumber,doc.rootDoc().getField("noErrorNoCoerceField").numericValue().intValue());
    assertEquals(validNumber,doc.rootDoc().getField("noErrorCoerceField").numericValue().intValue());
    assertEquals(validNumber,doc.rootDoc().getField("errorDefaultCoerce").numericValue().intValue());
    int validNegativeNumber=-1;
    doc=defaultMapper.parse("test","type","1",XContentFactory.jsonBuilder().startObject().field("noErrorNoCoerceField",validNegativeNumber).field("noErrorCoerceField",validNegativeNumber).field("errorDefaultCoerce",validNegativeNumber).endObject().bytes());
    assertEquals(validNegativeNumber,doc.rootDoc().getField("noErrorNoCoerceField").numericValue().intValue());
    assertEquals(validNegativeNumber,doc.rootDoc().getField("noErrorCoerceField").numericValue().intValue());
    assertEquals(validNegativeNumber,doc.rootDoc().getField("errorDefaultCoerce").numericValue().intValue());
    try {
      defaultMapper.parse("test","type","1",XContentFactory.jsonBuilder().startObject().field("errorNoCoerce",invalidJsonNumberAsString).endObject().bytes());
    }
 catch (    MapperParsingException e) {
      assertThat(e.getCause(),instanceOf(IllegalArgumentException.class));
    }
    float invalidJsonForInteger=1.9f;
    int coercedFloatValue=1;
    doc=defaultMapper.parse("test","type","1",XContentFactory.jsonBuilder().startObject().field("noErrorNoCoerceField",invalidJsonForInteger).field("noErrorCoerceField",invalidJsonForInteger).field("errorDefaultCoerce",invalidJsonForInteger).endObject().bytes());
    assertThat(doc.rootDoc().getField("noErrorNoCoerceField"),nullValue());
    assertEquals(coercedFloatValue,doc.rootDoc().getField("noErrorCoerceField").numericValue().intValue());
    assertEquals(coercedFloatValue,doc.rootDoc().getField("errorDefaultCoerce").numericValue().intValue());
    try {
      defaultMapper.parse("test","type","1",XContentFactory.jsonBuilder().startObject().field("errorNoCoerce",invalidJsonForInteger).endObject().bytes());
    }
 catch (    MapperParsingException e) {
      assertThat(e.getCause(),instanceOf(IllegalArgumentException.class));
    }
  }
}
