{
  AllocationService strategy=createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries",100).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE,"always").put("cluster.routing.allocation.cluster_concurrent_rebalance",100).put("cluster.routing.allocation.node_initial_primaries_recoveries",100).build());
  ClusterState newClusterState, previousClusterState;
  MetaData metaDataIndexCreated=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(2)).build();
  RoutingTable routingTableIndexCreated=RoutingTable.builder().addAsNew(metaDataIndexCreated.index("test")).build();
  ClusterState init=ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaDataIndexCreated).routingTable(routingTableIndexCreated).nodes(generateDiscoveryNodes(masterEligible)).build();
  RoutingTable routingTableInitializing=strategy.reroute(init,"reroute").routingTable();
  ClusterState temp=ClusterState.builder(init).routingTable(routingTableInitializing).build();
  RoutingTable routingTableStarted=strategy.applyStartedShards(temp,temp.getRoutingNodes().shardsWithState(INITIALIZING)).routingTable();
  MetaData metaDataStarted=MetaData.builder().put(init.metaData().index("test"),true).build();
  MetaData metaDataClosed=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).state(IndexMetaData.State.CLOSE).numberOfShards(5).numberOfReplicas(2)).version(metaDataStarted.version() + 1).build();
  previousClusterState=ClusterState.builder(init).metaData(metaDataStarted).routingTable(routingTableStarted).nodes(generateDiscoveryNodes(masterEligible)).build();
  newClusterState=ClusterState.builder(previousClusterState).routingTable(routingTableIndexCreated).metaData(metaDataClosed).version(previousClusterState.getVersion() + 1).build();
  ClusterChangedEvent event=new ClusterChangedEvent("test",newClusterState,previousClusterState);
  assertThat(event.state().version(),equalTo(event.previousState().version() + 1));
  return event;
}
