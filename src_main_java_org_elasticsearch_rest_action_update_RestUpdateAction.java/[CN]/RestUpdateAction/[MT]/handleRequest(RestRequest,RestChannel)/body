{
  UpdateRequest updateRequest=new UpdateRequest(request.param("index"),request.param("type"),request.param("id"));
  updateRequest.setListenerThreaded(false);
  updateRequest.setRouting(request.param("routing"));
  updateRequest.setParent(request.param("parent"));
  updateRequest.setTimeout(request.paramAsTime("timeout",updateRequest.getTimeout()));
  updateRequest.setRefresh(request.paramAsBoolean("refresh",updateRequest.isRefresh()));
  String replicationType=request.param("replication");
  if (replicationType != null) {
    updateRequest.setReplicationType(ReplicationType.fromString(replicationType));
  }
  String consistencyLevel=request.param("consistency");
  if (consistencyLevel != null) {
    updateRequest.setConsistencyLevel(WriteConsistencyLevel.fromString(consistencyLevel));
  }
  updateRequest.setPercolate(request.param("percolate",null));
  updateRequest.setScript(request.param("script"));
  updateRequest.setScriptLang(request.param("lang"));
  for (  Map.Entry<String,String> entry : request.params().entrySet()) {
    if (entry.getKey().startsWith("sp_")) {
      updateRequest.addScriptParam(entry.getKey().substring(3),entry.getValue());
    }
  }
  String sField=request.param("fields");
  if (sField != null) {
    String[] sFields=Strings.splitStringByCommaToArray(sField);
    if (sFields != null) {
      updateRequest.setFields(sFields);
    }
  }
  updateRequest.setRetryOnConflict(request.paramAsInt("retry_on_conflict",updateRequest.getRetryOnConflict()));
  if (request.hasContent()) {
    try {
      updateRequest.setSource(request.content());
      IndexRequest upsertRequest=updateRequest.getUpsertRequest();
      if (upsertRequest != null) {
        upsertRequest.setRouting(request.param("routing"));
        upsertRequest.setParent(request.param("parent"));
        upsertRequest.setTimestamp(request.param("timestamp"));
        if (request.hasParam("ttl")) {
          upsertRequest.setTtl(request.paramAsTime("ttl",null).millis());
        }
        upsertRequest.setVersion(RestActions.parseVersion(request));
        upsertRequest.setVersionType(VersionType.fromString(request.param("version_type"),upsertRequest.getVersionType()));
      }
      IndexRequest doc=updateRequest.getDoc();
      if (doc != null) {
        doc.setRouting(request.param("routing"));
        doc.setParent(request.param("parent"));
        doc.setTimestamp(request.param("timestamp"));
        if (request.hasParam("ttl")) {
          doc.setTtl(request.paramAsTime("ttl",null).millis());
        }
        doc.setVersion(RestActions.parseVersion(request));
        doc.setVersionType(VersionType.fromString(request.param("version_type"),doc.getVersionType()));
      }
    }
 catch (    Exception e) {
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.warn("Failed to send response",e1);
      }
      return;
    }
  }
  client.update(updateRequest,new ActionListener<UpdateResponse>(){
    @Override public void onResponse(    UpdateResponse response){
      try {
        XContentBuilder builder=RestXContentBuilder.restContentBuilder(request);
        builder.startObject().field(Fields.OK,true).field(Fields._INDEX,response.getIndex()).field(Fields._TYPE,response.getType()).field(Fields._ID,response.getId()).field(Fields._VERSION,response.getVersion());
        if (response.getGetResult() != null) {
          builder.startObject(Fields.GET);
          response.getGetResult().toXContentEmbedded(builder,request);
          builder.endObject();
        }
        if (response.getMatches() != null) {
          builder.startArray(Fields.MATCHES);
          for (          String match : response.getMatches()) {
            builder.value(match);
          }
          builder.endArray();
        }
        builder.endObject();
        RestStatus status=OK;
        if (response.getVersion() == 1) {
          status=CREATED;
        }
        channel.sendResponse(new XContentRestResponse(request,status,builder));
      }
 catch (      Exception e) {
        onFailure(e);
      }
    }
    @Override public void onFailure(    Throwable e){
      try {
        channel.sendResponse(new XContentThrowableRestResponse(request,e));
      }
 catch (      IOException e1) {
        logger.error("Failed to send failure response",e1);
      }
    }
  }
);
}
