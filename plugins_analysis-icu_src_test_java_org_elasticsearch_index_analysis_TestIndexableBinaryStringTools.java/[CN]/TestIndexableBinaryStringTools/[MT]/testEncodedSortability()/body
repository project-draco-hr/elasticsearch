{
  byte[] originalArray1=new byte[MAX_RANDOM_BINARY_LENGTH];
  char[] originalString1=new char[MAX_RANDOM_BINARY_LENGTH];
  char[] encoded1=new char[MAX_RANDOM_BINARY_LENGTH * 10];
  byte[] original2=new byte[MAX_RANDOM_BINARY_LENGTH];
  char[] originalString2=new char[MAX_RANDOM_BINARY_LENGTH];
  char[] encoded2=new char[MAX_RANDOM_BINARY_LENGTH * 10];
  for (int testNum=0; testNum < NUM_RANDOM_TESTS; ++testNum) {
    int numBytes1=random().nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1;
    for (int byteNum=0; byteNum < numBytes1; ++byteNum) {
      int randomInt=random().nextInt(0x100);
      originalArray1[byteNum]=(byte)randomInt;
      originalString1[byteNum]=(char)randomInt;
    }
    int numBytes2=random().nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1;
    for (int byteNum=0; byteNum < numBytes2; ++byteNum) {
      int randomInt=random().nextInt(0x100);
      original2[byteNum]=(byte)randomInt;
      originalString2[byteNum]=(char)randomInt;
    }
    int originalComparison=new String(originalString1,0,numBytes1).compareTo(new String(originalString2,0,numBytes2));
    originalComparison=originalComparison < 0 ? -1 : originalComparison > 0 ? 1 : 0;
    int encodedLen1=IndexableBinaryStringTools.getEncodedLength(originalArray1,0,numBytes1);
    if (encodedLen1 > encoded1.length)     encoded1=new char[ArrayUtil.oversize(encodedLen1,RamUsageEstimator.NUM_BYTES_CHAR)];
    IndexableBinaryStringTools.encode(originalArray1,0,numBytes1,encoded1,0,encodedLen1);
    int encodedLen2=IndexableBinaryStringTools.getEncodedLength(original2,0,numBytes2);
    if (encodedLen2 > encoded2.length)     encoded2=new char[ArrayUtil.oversize(encodedLen2,RamUsageEstimator.NUM_BYTES_CHAR)];
    IndexableBinaryStringTools.encode(original2,0,numBytes2,encoded2,0,encodedLen2);
    int encodedComparison=new String(encoded1,0,encodedLen1).compareTo(new String(encoded2,0,encodedLen2));
    encodedComparison=encodedComparison < 0 ? -1 : encodedComparison > 0 ? 1 : 0;
    assertEquals("Test #" + (testNum + 1) + ": Original bytes and encoded chars compare differently:"+ System.getProperty("line.separator")+ " binary 1: "+ binaryDump(originalArray1,numBytes1)+ System.getProperty("line.separator")+ " binary 2: "+ binaryDump(original2,numBytes2)+ System.getProperty("line.separator")+ "encoded 1: "+ charArrayDump(encoded1,encodedLen1)+ System.getProperty("line.separator")+ "encoded 2: "+ charArrayDump(encoded2,encodedLen2)+ System.getProperty("line.separator"),originalComparison,encodedComparison);
  }
}
