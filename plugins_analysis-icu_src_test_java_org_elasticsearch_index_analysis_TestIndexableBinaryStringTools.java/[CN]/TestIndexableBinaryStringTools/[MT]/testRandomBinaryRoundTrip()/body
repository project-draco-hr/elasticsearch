{
  byte[] binary=new byte[MAX_RANDOM_BINARY_LENGTH];
  char[] encoded=new char[MAX_RANDOM_BINARY_LENGTH * 10];
  byte[] decoded=new byte[MAX_RANDOM_BINARY_LENGTH];
  for (int testNum=0; testNum < NUM_RANDOM_TESTS; ++testNum) {
    int numBytes=random().nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1;
    for (int byteNum=0; byteNum < numBytes; ++byteNum) {
      binary[byteNum]=(byte)random().nextInt(0x100);
    }
    int encodedLen=IndexableBinaryStringTools.getEncodedLength(binary,0,numBytes);
    if (encoded.length < encodedLen)     encoded=new char[ArrayUtil.oversize(encodedLen,RamUsageEstimator.NUM_BYTES_CHAR)];
    IndexableBinaryStringTools.encode(binary,0,numBytes,encoded,0,encodedLen);
    int decodedLen=IndexableBinaryStringTools.getDecodedLength(encoded,0,encodedLen);
    IndexableBinaryStringTools.decode(encoded,0,encodedLen,decoded,0,decodedLen);
    assertEquals("Test #" + (testNum + 1) + ": Round trip decode/decode returned different results:"+ System.getProperty("line.separator")+ "  original: "+ binaryDump(binary,numBytes)+ System.getProperty("line.separator")+ "encodedBuf: "+ charArrayDump(encoded,encodedLen)+ System.getProperty("line.separator")+ "decodedBuf: "+ binaryDump(decoded,decodedLen),binaryDump(binary,numBytes),binaryDump(decoded,decodedLen));
  }
}
