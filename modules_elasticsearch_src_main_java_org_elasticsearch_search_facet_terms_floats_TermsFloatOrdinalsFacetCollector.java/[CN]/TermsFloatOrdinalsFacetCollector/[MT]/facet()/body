{
  if (current != null) {
    missing+=current.counts[0];
    if (current.values.length > 1) {
      aggregators.add(current);
    }
  }
  AggregatorPriorityQueue queue=new AggregatorPriorityQueue(aggregators.size());
  for (  ReaderAggregator aggregator : aggregators) {
    CacheRecycler.pushIntArray(aggregator.counts);
    if (aggregator.nextPosition()) {
      queue.add(aggregator);
    }
  }
  if (size < EntryPriorityQueue.LIMIT) {
    EntryPriorityQueue ordered=new EntryPriorityQueue(size,comparatorType.comparator());
    while (queue.size() > 0) {
      ReaderAggregator agg=queue.top();
      float value=agg.current;
      int count=0;
      do {
        count+=agg.counts[agg.position];
        if (agg.nextPosition()) {
          agg=queue.updateTop();
        }
 else {
          queue.pop();
          agg=queue.top();
        }
      }
 while (agg != null && value == agg.current);
      if (count > minCount) {
        if (excluded == null || !excluded.contains(value)) {
          InternalFloatTermsFacet.FloatEntry entry=new InternalFloatTermsFacet.FloatEntry(value,count);
          ordered.insertWithOverflow(entry);
        }
      }
    }
    InternalFloatTermsFacet.FloatEntry[] list=new InternalFloatTermsFacet.FloatEntry[ordered.size()];
    for (int i=ordered.size() - 1; i >= 0; i--) {
      list[i]=(InternalFloatTermsFacet.FloatEntry)ordered.pop();
    }
    return new InternalFloatTermsFacet(facetName,comparatorType,size,Arrays.asList(list),missing);
  }
  BoundedTreeSet<InternalFloatTermsFacet.FloatEntry> ordered=new BoundedTreeSet<InternalFloatTermsFacet.FloatEntry>(comparatorType.comparator(),size);
  while (queue.size() > 0) {
    ReaderAggregator agg=queue.top();
    float value=agg.current;
    int count=0;
    do {
      count+=agg.counts[agg.position];
      if (agg.nextPosition()) {
        agg=queue.updateTop();
      }
 else {
        queue.pop();
        agg=queue.top();
      }
    }
 while (agg != null && value == agg.current);
    if (count > minCount) {
      if (excluded == null || !excluded.contains(value)) {
        InternalFloatTermsFacet.FloatEntry entry=new InternalFloatTermsFacet.FloatEntry(value,count);
        ordered.add(entry);
      }
    }
  }
  return new InternalFloatTermsFacet(facetName,comparatorType,size,ordered,missing);
}
