{
  Path[] dirs=new Path[randomIntBetween(1,5)];
  for (int i=0; i < dirs.length; i++) {
    dirs[i]=newTempDir(LifecycleScope.TEST).toPath();
  }
  final boolean deleteOldFiles=randomBoolean();
  Format format=new Format(randomFrom(XContentType.values()),deleteOldFiles);
  DummyState state=new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1,1000),randomInt(),randomLong(),randomDouble(),randomBoolean());
  int version=between(0,Integer.MAX_VALUE / 2);
  format.write(state,"foo-",version,dirs);
  for (  Path file : dirs) {
    Path[] list=content(file);
    assertEquals(list.length,1);
    assertThat(list[0].getFileName().toString(),equalTo(MetaDataStateFormat.STATE_DIR_NAME));
    Path stateDir=list[0];
    assertThat(Files.isDirectory(stateDir),is(true));
    list=content(stateDir);
    assertEquals(list.length,1);
    assertThat(list[0].getFileName().toString(),equalTo("foo-" + version + ".st"));
    DummyState read=format.read(list[0],version);
    assertThat(read,equalTo(state));
  }
  final int version2=between(version,Integer.MAX_VALUE);
  DummyState state2=new DummyState(randomRealisticUnicodeOfCodepointLengthBetween(1,1000),randomInt(),randomLong(),randomDouble(),randomBoolean());
  format.write(state2,"foo-",version2,dirs);
  for (  Path file : dirs) {
    Path[] list=content(file);
    assertEquals(list.length,1);
    assertThat(list[0].getFileName().toString(),equalTo(MetaDataStateFormat.STATE_DIR_NAME));
    Path stateDir=list[0];
    assertThat(Files.isDirectory(stateDir),is(true));
    list=content(stateDir);
    assertEquals(list.length,deleteOldFiles ? 1 : 2);
    if (deleteOldFiles) {
      assertThat(list[0].getFileName().toString(),equalTo("foo-" + version2 + ".st"));
      DummyState read=format.read(list[0],version2);
      assertThat(read,equalTo(state2));
    }
 else {
      assertThat(list[0].getFileName().toString(),anyOf(equalTo("foo-" + version + ".st"),equalTo("foo-" + version2 + ".st")));
      assertThat(list[1].getFileName().toString(),anyOf(equalTo("foo-" + version + ".st"),equalTo("foo-" + version2 + ".st")));
      DummyState read=format.read(stateDir.resolve("foo-" + version2 + ".st"),version2);
      assertThat(read,equalTo(state2));
      read=format.read(stateDir.resolve("foo-" + version + ".st"),version);
      assertThat(read,equalTo(state));
    }
  }
}
