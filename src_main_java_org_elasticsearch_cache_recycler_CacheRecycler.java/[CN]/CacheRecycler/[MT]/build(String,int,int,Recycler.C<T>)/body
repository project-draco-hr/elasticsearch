{
  Recycler<T> recycler;
  if (type == null || "soft_thread_local".equals(type)) {
    recycler=new SoftThreadLocalRecycler<T>(c,limit);
  }
 else   if ("thread_local".equals(type)) {
    recycler=new ThreadLocalRecycler<T>(c,limit);
  }
 else   if ("queue".equals(type)) {
    recycler=new QueueRecycler<T>(c);
  }
 else {
    throw new ElasticSearchIllegalArgumentException("no type support [" + type + "] for recycler");
  }
  if (smartSize > 0) {
    recycler=new Recycler.Sizing<T>(recycler,smartSize);
  }
  return recycler;
}
