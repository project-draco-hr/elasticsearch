{
  super(settings);
  String type=settings.get("type","soft_thread_local");
  int limit=settings.getAsInt("limit",10);
  int smartSize=settings.getAsInt("smart_size",1024);
  hashMap=build(type,limit,smartSize,new Recycler.C<ExtTHashMap>(){
    @Override public ExtTHashMap newInstance(    int sizing){
      return new ExtTHashMap(size(sizing));
    }
    @Override public void clear(    ExtTHashMap value){
      value.clear();
    }
  }
);
  hashSet=build(type,limit,smartSize,new Recycler.C<THashSet>(){
    @Override public THashSet newInstance(    int sizing){
      return new THashSet(size(sizing));
    }
    @Override public void clear(    THashSet value){
      value.clear();
    }
  }
);
  doubleObjectMap=build(type,limit,smartSize,new Recycler.C<ExtTDoubleObjectHashMap>(){
    @Override public ExtTDoubleObjectHashMap newInstance(    int sizing){
      return new ExtTDoubleObjectHashMap(size(sizing));
    }
    @Override public void clear(    ExtTDoubleObjectHashMap value){
      value.clear();
    }
  }
);
  longObjectMap=build(type,limit,smartSize,new Recycler.C<ExtTLongObjectHashMap>(){
    @Override public ExtTLongObjectHashMap newInstance(    int sizing){
      return new ExtTLongObjectHashMap(size(sizing));
    }
    @Override public void clear(    ExtTLongObjectHashMap value){
      value.clear();
    }
  }
);
  longLongMap=build(type,limit,smartSize,new Recycler.C<TLongLongHashMap>(){
    @Override public TLongLongHashMap newInstance(    int sizing){
      return new TLongLongHashMap(size(sizing));
    }
    @Override public void clear(    TLongLongHashMap value){
      value.clear();
    }
  }
);
  intIntMap=build(type,limit,smartSize,new Recycler.C<TIntIntHashMap>(){
    @Override public TIntIntHashMap newInstance(    int sizing){
      return new TIntIntHashMap(size(sizing));
    }
    @Override public void clear(    TIntIntHashMap value){
      value.clear();
    }
  }
);
  floatIntMap=build(type,limit,smartSize,new Recycler.C<TFloatIntHashMap>(){
    @Override public TFloatIntHashMap newInstance(    int sizing){
      return new TFloatIntHashMap(size(sizing));
    }
    @Override public void clear(    TFloatIntHashMap value){
      value.clear();
    }
  }
);
  doubleIntMap=build(type,limit,smartSize,new Recycler.C<TDoubleIntHashMap>(){
    @Override public TDoubleIntHashMap newInstance(    int sizing){
      return new TDoubleIntHashMap(size(sizing));
    }
    @Override public void clear(    TDoubleIntHashMap value){
      value.clear();
    }
  }
);
  longIntMap=build(type,limit,smartSize,new Recycler.C<TLongIntHashMap>(){
    @Override public TLongIntHashMap newInstance(    int sizing){
      return new TLongIntHashMap(size(sizing));
    }
    @Override public void clear(    TLongIntHashMap value){
      value.clear();
    }
  }
);
  objectIntMap=build(type,limit,smartSize,new Recycler.C<TObjectIntHashMap>(){
    @Override public TObjectIntHashMap newInstance(    int sizing){
      return new TObjectIntHashMap(size(sizing));
    }
    @Override public void clear(    TObjectIntHashMap value){
      value.clear();
    }
  }
);
  intObjectMap=build(type,limit,smartSize,new Recycler.C<TIntObjectHashMap>(){
    @Override public TIntObjectHashMap newInstance(    int sizing){
      return new TIntObjectHashMap(size(sizing));
    }
    @Override public void clear(    TIntObjectHashMap value){
      value.clear();
    }
  }
);
  objectFloatMap=build(type,limit,smartSize,new Recycler.C<TObjectFloatHashMap>(){
    @Override public TObjectFloatHashMap newInstance(    int sizing){
      return new TObjectFloatHashMap(size(sizing));
    }
    @Override public void clear(    TObjectFloatHashMap value){
      value.clear();
    }
  }
);
}
