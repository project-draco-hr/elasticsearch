{
  if (random.nextBoolean()) {
    builder.put(AbstractMergePolicyProvider.INDEX_COMPOUND_FORMAT,random.nextBoolean() ? random.nextDouble() : random.nextBoolean());
  }
  Class<? extends MergePolicyProvider<?>> mergePolicy=TieredMergePolicyProvider.class;
switch (random.nextInt(5)) {
case 4:
    mergePolicy=LogByteSizeMergePolicyProvider.class;
  break;
case 3:
mergePolicy=LogDocMergePolicyProvider.class;
break;
case 0:
mergePolicy=null;
}
if (mergePolicy != null) {
builder.put(MergePolicyModule.MERGE_POLICY_TYPE_KEY,mergePolicy.getName());
}
if (random.nextBoolean()) {
builder.put(MergeSchedulerProvider.FORCE_ASYNC_MERGE,random.nextBoolean());
}
switch (random.nextInt(5)) {
case 4:
builder.put(MergeSchedulerModule.MERGE_SCHEDULER_TYPE_KEY,SerialMergeSchedulerProvider.class.getName());
break;
case 3:
builder.put(MergeSchedulerModule.MERGE_SCHEDULER_TYPE_KEY,ConcurrentMergeSchedulerProvider.class.getName());
break;
}
return builder;
}
