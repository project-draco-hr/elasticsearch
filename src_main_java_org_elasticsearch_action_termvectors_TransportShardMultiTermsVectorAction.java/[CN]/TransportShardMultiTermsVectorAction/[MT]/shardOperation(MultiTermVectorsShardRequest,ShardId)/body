{
  MultiTermVectorsShardResponse response=new MultiTermVectorsShardResponse();
  for (int i=0; i < request.locations.size(); i++) {
    TermVectorsRequest termVectorsRequest=request.requests.get(i);
    try {
      IndexService indexService=indicesService.indexServiceSafe(request.index());
      IndexShard indexShard=indexService.shardSafe(shardId.id());
      TermVectorsResponse termVectorsResponse=indexShard.termVectorsService().getTermVectors(termVectorsRequest,shardId.getIndex());
      termVectorsResponse.updateTookInMillis(termVectorsRequest.startTime());
      response.add(request.locations.get(i),termVectorsResponse);
    }
 catch (    Throwable t) {
      if (TransportActions.isShardNotAvailableException(t)) {
        throw (ElasticsearchException)t;
      }
 else {
        logger.debug("{} failed to execute multi term vectors for [{}]/[{}]",t,shardId,termVectorsRequest.type(),termVectorsRequest.id());
        response.add(request.locations.get(i),new MultiTermVectorsResponse.Failure(request.index(),termVectorsRequest.type(),termVectorsRequest.id(),ExceptionsHelper.detailedMessage(t)));
      }
    }
  }
  return response;
}
