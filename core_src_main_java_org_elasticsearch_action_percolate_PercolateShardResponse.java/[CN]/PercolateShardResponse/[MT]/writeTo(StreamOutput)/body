{
  super.writeTo(out);
  out.writeBoolean(onlyCount);
  out.writeVLong(requestedSize);
  Lucene.writeTopDocs(out,topDocs);
  out.writeVInt(ids.size());
  for (  Map.Entry<Integer,String> entry : ids.entrySet()) {
    out.writeVInt(entry.getKey());
    out.writeString(entry.getValue());
  }
  out.writeVInt(hls.size());
  for (  Map.Entry<Integer,Map<String,HighlightField>> entry1 : hls.entrySet()) {
    out.writeVInt(entry1.getKey());
    out.writeVInt(entry1.getValue().size());
    for (    Map.Entry<String,HighlightField> entry2 : entry1.getValue().entrySet()) {
      out.writeString(entry2.getKey());
      entry2.getValue().writeTo(out);
    }
  }
  out.writeOptionalStreamable(aggregations);
  if (pipelineAggregators == null) {
    out.writeBoolean(false);
  }
 else {
    out.writeBoolean(true);
    out.writeVInt(pipelineAggregators.size());
    for (    PipelineAggregator pipelineAggregator : pipelineAggregators) {
      out.writeBytesReference(pipelineAggregator.type().stream());
      pipelineAggregator.writeTo(out);
    }
  }
}
