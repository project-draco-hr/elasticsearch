{
  out.writeOptionalWriteable(aggregations);
  out.writeOptionalBoolean(explain);
  out.writeOptionalStreamable(fetchSourceContext);
  boolean hasFieldDataFields=fieldDataFields != null;
  out.writeBoolean(hasFieldDataFields);
  if (hasFieldDataFields) {
    out.writeVInt(fieldDataFields.size());
    for (    String field : fieldDataFields) {
      out.writeString(field);
    }
  }
  boolean hasFieldNames=fieldNames != null;
  out.writeBoolean(hasFieldNames);
  if (hasFieldNames) {
    out.writeVInt(fieldNames.size());
    for (    String field : fieldNames) {
      out.writeString(field);
    }
  }
  out.writeVInt(from);
  out.writeOptionalWriteable(highlightBuilder);
  boolean hasIndexBoost=indexBoost != null;
  out.writeBoolean(hasIndexBoost);
  if (hasIndexBoost) {
    out.writeVInt(indexBoost.size());
    for (    ObjectCursor<String> key : indexBoost.keys()) {
      out.writeString(key.value);
      out.writeFloat(indexBoost.get(key.value));
    }
  }
  out.writeOptionalFloat(minScore);
  out.writeOptionalNamedWriteable(postQueryBuilder);
  out.writeOptionalNamedWriteable(queryBuilder);
  boolean hasRescoreBuilders=rescoreBuilders != null;
  out.writeBoolean(hasRescoreBuilders);
  if (hasRescoreBuilders) {
    out.writeVInt(rescoreBuilders.size());
    for (    RescoreBuilder<?> rescoreBuilder : rescoreBuilders) {
      out.writeNamedWriteable(rescoreBuilder);
    }
  }
  boolean hasScriptFields=scriptFields != null;
  out.writeBoolean(hasScriptFields);
  if (hasScriptFields) {
    out.writeVInt(scriptFields.size());
    for (    ScriptField scriptField : scriptFields) {
      scriptField.writeTo(out);
    }
  }
  out.writeVInt(size);
  boolean hasSorts=sorts != null;
  out.writeBoolean(hasSorts);
  if (hasSorts) {
    out.writeVInt(sorts.size());
    for (    SortBuilder<?> sort : sorts) {
      out.writeNamedWriteable(sort);
    }
  }
  boolean hasStats=stats != null;
  out.writeBoolean(hasStats);
  if (hasStats) {
    out.writeVInt(stats.size());
    for (    String stat : stats) {
      out.writeString(stat);
    }
  }
  out.writeOptionalWriteable(suggestBuilder);
  out.writeVInt(terminateAfter);
  out.writeOptionalWriteable(timeout);
  out.writeBoolean(trackScores);
  out.writeOptionalBoolean(version);
  out.writeOptionalBytesReference(ext);
  out.writeBoolean(profile);
  out.writeOptionalWriteable(searchAfterBuilder);
  out.writeOptionalWriteable(sliceBuilder);
}
