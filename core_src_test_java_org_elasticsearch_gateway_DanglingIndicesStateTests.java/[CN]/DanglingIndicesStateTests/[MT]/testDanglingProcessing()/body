{
  try (NodeEnvironment env=newNodeEnvironment()){
    MetaStateService metaStateService=new MetaStateService(Settings.EMPTY,env);
    DanglingIndicesState danglingState=new DanglingIndicesState(Settings.EMPTY,env,metaStateService,null);
    MetaData metaData=MetaData.builder().build();
    final Settings.Builder settings=Settings.builder().put(indexSettings).put(IndexMetaData.SETTING_INDEX_UUID,"test1UUID");
    IndexMetaData dangledIndex=IndexMetaData.builder("test1").settings(settings).build();
    metaStateService.writeIndex("test_write",dangledIndex);
    int numberOfChecks=randomIntBetween(1,10);
    for (int i=0; i < numberOfChecks; i++) {
      Map<Index,IndexMetaData> newDanglingIndices=danglingState.findNewDanglingIndices(metaData);
      assertThat(newDanglingIndices.size(),equalTo(1));
      assertThat(newDanglingIndices.keySet(),Matchers.hasItems(dangledIndex.getIndex()));
      assertTrue(danglingState.getDanglingIndices().isEmpty());
    }
    for (int i=0; i < numberOfChecks; i++) {
      danglingState.findNewAndAddDanglingIndices(metaData);
      assertThat(danglingState.getDanglingIndices().size(),equalTo(1));
      assertThat(danglingState.getDanglingIndices().keySet(),Matchers.hasItems(dangledIndex.getIndex()));
    }
    metaData=MetaData.builder(metaData).put(dangledIndex,true).build();
    for (int i=0; i < numberOfChecks; i++) {
      Map<Index,IndexMetaData> newDanglingIndices=danglingState.findNewDanglingIndices(metaData);
      assertTrue(newDanglingIndices.isEmpty());
      assertThat(danglingState.getDanglingIndices().size(),equalTo(1));
      assertThat(danglingState.getDanglingIndices().keySet(),Matchers.hasItems(dangledIndex.getIndex()));
    }
    danglingState.cleanupAllocatedDangledIndices(metaData);
    assertTrue(danglingState.getDanglingIndices().isEmpty());
  }
 }
