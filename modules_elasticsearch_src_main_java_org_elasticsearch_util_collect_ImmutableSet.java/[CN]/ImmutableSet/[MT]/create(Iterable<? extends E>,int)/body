{
  int tableSize=Hashing.chooseTableSize(count);
  Object[] table=new Object[tableSize];
  int mask=tableSize - 1;
  List<E> elements=new ArrayList<E>(count);
  int hashCode=0;
  for (  E element : iterable) {
    checkNotNull(element);
    int hash=element.hashCode();
    for (int i=Hashing.smear(hash); true; i++) {
      int index=i & mask;
      Object value=table[index];
      if (value == null) {
        table[index]=element;
        elements.add(element);
        hashCode+=hash;
        break;
      }
 else       if (value.equals(element)) {
        break;
      }
    }
  }
  if (elements.size() == 1) {
    return new SingletonImmutableSet<E>(elements.get(0),hashCode);
  }
 else   if (tableSize > Hashing.chooseTableSize(elements.size())) {
    return create(elements,elements.size());
  }
 else {
    return new RegularImmutableSet<E>(elements.toArray(),hashCode,table,mask);
  }
}
