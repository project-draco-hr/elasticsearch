{
  if (!event.routingTableChanged()) {
    return;
  }
  if (event.state().blocks().disableStatePersistence()) {
    return;
  }
  RoutingTable routingTable=event.state().routingTable();
  for (  IndexRoutingTable indexRoutingTable : routingTable) {
    IndexService indexService=indicesService.indexService(indexRoutingTable.index());
    if (indexService == null) {
      continue;
    }
    if (!indexService.store().persistent()) {
      continue;
    }
    for (    IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {
      if (indexService.hasShard(indexShardRoutingTable.shardId().id())) {
        continue;
      }
      if (!indexService.store().canDeleteUnallocated(indexShardRoutingTable.shardId())) {
        continue;
      }
      if (indexShardRoutingTable.countWithState(ShardRoutingState.STARTED) == indexShardRoutingTable.size()) {
        if (logger.isDebugEnabled()) {
          logger.debug("[{}][{}] deleting unallocated shard",indexShardRoutingTable.shardId().index().name(),indexShardRoutingTable.shardId().id());
        }
        try {
          indexService.store().deleteUnallocated(indexShardRoutingTable.shardId());
        }
 catch (        Exception e) {
          logger.debug("[{}][{}] failed to delete unallocated shard, ignoring",e,indexShardRoutingTable.shardId().index().name(),indexShardRoutingTable.shardId().id());
        }
      }
    }
  }
  if (nodeEnv.hasNodeFile()) {
    for (    IndexRoutingTable indexRoutingTable : routingTable) {
      IndexService indexService=indicesService.indexService(indexRoutingTable.index());
      if (indexService != null) {
        continue;
      }
      for (      IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {
        boolean shardCanBeDeleted=true;
        for (        ShardRouting shardRouting : indexShardRoutingTable) {
          if (!shardRouting.active()) {
            shardCanBeDeleted=false;
            break;
          }
          String localNodeId=clusterService.localNode().id();
          if (localNodeId.equals(shardRouting.currentNodeId()) || localNodeId.equals(shardRouting.relocatingNodeId())) {
            shardCanBeDeleted=false;
            break;
          }
        }
        if (shardCanBeDeleted) {
          ShardId shardId=indexShardRoutingTable.shardId();
          File shardLocation=nodeEnv.shardLocation(shardId);
          if (shardLocation.exists()) {
            logger.debug("[{}][{}] deleting shard that is no longer used",shardId.index().name(),shardId.id());
            FileSystemUtils.deleteRecursively(shardLocation);
          }
        }
      }
    }
    File[] files=nodeEnv.indicesLocation().listFiles();
    if (files != null) {
      for (      File file : files) {
        if (event.state().metaData().hasIndex(file.getName())) {
          continue;
        }
        logger.debug("[{}] deleting index that is no longer in the cluster meta_date",file.getName());
        FileSystemUtils.deleteRecursively(file);
      }
    }
  }
}
