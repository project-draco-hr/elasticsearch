{
  final Start start=new Start();
  AtomicBoolean stop=new AtomicBoolean();
  Streamer<Start> streamer=new Streamer<Start>(stop,start){
    @Override Start createObj(){
      return new Start();
    }
  }
;
  start.start();
  assertThat(start.checkIndexTime(),equalTo(0l));
  Start lastRead=streamer.serializeDeserialize();
  assertThat(lastRead.checkIndexTime(),equalTo(0l));
  long took=randomLong();
  if (took < 0) {
    took=-took;
    took=Math.max(0l,took);
  }
  start.checkIndexTime(took);
  assertThat(start.checkIndexTime(),equalTo(took));
  boolean stopped=false;
  if (randomBoolean()) {
    start.stop();
    stopped=true;
  }
  if (randomBoolean()) {
    start.reset();
    took=0;
    assertThat(start.checkIndexTime(),equalTo(took));
  }
  lastRead=streamer.serializeDeserialize();
  assertThat(lastRead.checkIndexTime(),equalTo(took));
  assertThat(lastRead.startTime(),equalTo(start.startTime()));
  assertThat(lastRead.stopTime(),equalTo(start.stopTime()));
  if (stopped) {
    assertThat(lastRead.time(),equalTo(start.time()));
  }
 else {
    assertThat(lastRead.time(),lessThanOrEqualTo(start.time()));
  }
}
