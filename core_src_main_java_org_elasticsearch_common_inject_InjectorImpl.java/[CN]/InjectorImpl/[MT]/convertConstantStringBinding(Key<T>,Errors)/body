{
  Key<String> stringKey=key.ofType(String.class);
  BindingImpl<String> stringBinding=state.getExplicitBinding(stringKey);
  if (stringBinding == null || !stringBinding.isConstant()) {
    return null;
  }
  String stringValue=stringBinding.getProvider().get();
  Object source=stringBinding.getSource();
  TypeLiteral<T> type=key.getTypeLiteral();
  MatcherAndConverter matchingConverter=state.getConverter(stringValue,type,errors,source);
  if (matchingConverter == null) {
    return null;
  }
  try {
    @SuppressWarnings("unchecked") T converted=(T)matchingConverter.getTypeConverter().convert(stringValue,type);
    if (converted == null) {
      throw errors.converterReturnedNull(stringValue,source,type,matchingConverter).toException();
    }
    if (!type.getRawType().isInstance(converted)) {
      throw errors.conversionTypeError(stringValue,source,type,matchingConverter,converted).toException();
    }
    return new ConvertedConstantBindingImpl<>(this,key,converted,stringBinding);
  }
 catch (  ErrorsException e) {
    throw e;
  }
catch (  RuntimeException e) {
    throw errors.conversionError(stringValue,source,type,matchingConverter,e).toException();
  }
}
