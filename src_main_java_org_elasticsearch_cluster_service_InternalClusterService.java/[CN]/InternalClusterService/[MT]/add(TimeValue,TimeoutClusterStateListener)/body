{
  if (lifecycle.stoppedOrClosed()) {
    listener.onClose();
    return;
  }
  try {
    updateTasksExecutor.execute(new PrioritizedRunnable(Priority.HIGH){
      @Override public void run(){
        NotifyTimeout notifyTimeout=new NotifyTimeout(listener,timeout);
        notifyTimeout.future=threadPool.schedule(timeout,ThreadPool.Names.GENERIC,notifyTimeout);
        onGoingTimeouts.add(notifyTimeout);
        postAppliedListeners.add(listener);
        listener.postAdded();
      }
    }
);
  }
 catch (  EsRejectedExecutionException e) {
    if (lifecycle.stoppedOrClosed()) {
      listener.onClose();
    }
 else {
      throw e;
    }
  }
}
