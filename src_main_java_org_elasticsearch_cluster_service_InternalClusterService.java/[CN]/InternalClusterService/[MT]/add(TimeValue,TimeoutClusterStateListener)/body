{
  if (lifecycle.stoppedOrClosed()) {
    listener.onClose();
    return;
  }
  updateTasksExecutor.execute(new PrioritizedRunnable(Priority.HIGH){
    @Override public void run(){
      NotifyTimeout notifyTimeout=new NotifyTimeout(listener,timeout);
      notifyTimeout.future=threadPool.schedule(timeout,ThreadPool.Names.GENERIC,notifyTimeout);
      onGoingTimeouts.add(notifyTimeout);
      clusterStateListeners.add(listener);
      listener.postAdded();
    }
  }
);
}
