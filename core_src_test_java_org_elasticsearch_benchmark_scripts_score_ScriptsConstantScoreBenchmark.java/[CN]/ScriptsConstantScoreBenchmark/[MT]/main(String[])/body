{
  int minTerms=49;
  int maxTerms=50;
  int maxIter=1000;
  int warmerIter=1000;
  init(maxTerms);
  List<Results> allResults=new ArrayList<>();
  Settings settings=settingsBuilder().put("plugin.types",NativeScriptExamplesPlugin.class.getName()).build();
  String clusterName=ScriptsConstantScoreBenchmark.class.getSimpleName();
  Node node1=nodeBuilder().clusterName(clusterName).settings(settingsBuilder().put(settings).put("name","node1")).node();
  Client client=node1.client();
  client.admin().cluster().prepareHealth("test").setWaitForGreenStatus().setTimeout("10s").execute().actionGet();
  indexData(10000,client,true);
  client.admin().cluster().prepareHealth("test").setWaitForGreenStatus().setTimeout("10s").execute().actionGet();
  Results results=new Results();
  results.init(maxTerms - minTerms,"native const script score (log(2) 10X)","Results for native const script score with score = log(2) 10X:","black","-.");
  List<Entry<String,RequestInfo>> searchRequests=initScriptMatchAllSearchRequests(NativeConstantForLoopScoreScript.NATIVE_CONSTANT_FOR_LOOP_SCRIPT_SCORE,true);
  runBenchmark(client,maxIter,results,searchRequests,minTerms,warmerIter);
  allResults.add(results);
  results=new Results();
  results.init(maxTerms - minTerms,"mvel const (log(2) 10X)","Results for mvel const score = log(2) 10X:","red","-.");
  searchRequests=initScriptMatchAllSearchRequests("score = 0; for (int i=0; i<10;i++) {score = score + log(2);} return score",false);
  runBenchmark(client,maxIter,results,searchRequests,minTerms,warmerIter);
  allResults.add(results);
  results=new Results();
  results.init(maxTerms - minTerms,"native const script score (2)","Results for native const script score with score = 2:","black",":");
  searchRequests=initScriptMatchAllSearchRequests(NativeConstantScoreScript.NATIVE_CONSTANT_SCRIPT_SCORE,true);
  runBenchmark(client,maxIter,results,searchRequests,minTerms,warmerIter);
  allResults.add(results);
  results=new Results();
  results.init(maxTerms - minTerms,"mvel const (2)","Results for mvel const score = 2:","red","--");
  searchRequests=initScriptMatchAllSearchRequests("2",false);
  runBenchmark(client,maxIter,results,searchRequests,minTerms,warmerIter);
  allResults.add(results);
  printOctaveScript(allResults,args);
  client.close();
  node1.close();
}
