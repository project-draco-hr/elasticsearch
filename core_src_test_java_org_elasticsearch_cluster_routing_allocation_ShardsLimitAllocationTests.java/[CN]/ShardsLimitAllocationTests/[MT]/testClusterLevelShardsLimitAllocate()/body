{
  AllocationService strategy=createAllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries",10).put(ShardsLimitAllocationDecider.CLUSTER_TOTAL_SHARDS_PER_NODE_SETTING.getKey(),1).build());
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,4).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,0))).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(routingTable).build();
  logger.info("Adding two nodes and performing rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1")).put(newNode("node2"))).build();
  routingTable=strategy.reroute(clusterState,"reroute").routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.getRoutingNodes().node("node1").numberOfShardsWithState(ShardRoutingState.INITIALIZING),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").numberOfShardsWithState(ShardRoutingState.INITIALIZING),equalTo(1));
  logger.info("Start the primary shards");
  RoutingNodes routingNodes=clusterState.getRoutingNodes();
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.getRoutingNodes().node("node1").numberOfShardsWithState(ShardRoutingState.STARTED),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").numberOfShardsWithState(ShardRoutingState.STARTED),equalTo(1));
  assertThat(clusterState.getRoutingNodes().unassigned().size(),equalTo(2));
  strategy=createAllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries",10).put(ShardsLimitAllocationDecider.CLUSTER_TOTAL_SHARDS_PER_NODE_SETTING.getKey(),2).build());
  logger.info("Do another reroute, make sure shards are now allocated");
  routingTable=strategy.reroute(clusterState,"reroute").routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.getRoutingNodes().node("node1").numberOfShardsWithState(ShardRoutingState.INITIALIZING),equalTo(1));
  assertThat(clusterState.getRoutingNodes().node("node2").numberOfShardsWithState(ShardRoutingState.INITIALIZING),equalTo(1));
  routingNodes=clusterState.getRoutingNodes();
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.getRoutingNodes().node("node1").numberOfShardsWithState(ShardRoutingState.STARTED),equalTo(2));
  assertThat(clusterState.getRoutingNodes().node("node2").numberOfShardsWithState(ShardRoutingState.STARTED),equalTo(2));
  assertThat(clusterState.getRoutingNodes().unassigned().size(),equalTo(0));
}
