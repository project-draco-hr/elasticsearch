{
  AllocationService strategy=createAllocationService(settingsBuilder().put("cluster.routing.allocation.node_concurrent_recoveries",10).put("cluster.routing.allocation.node_initial_primaries_recoveries",10).put("cluster.routing.allocation.cluster_concurrent_rebalance",-1).put("cluster.routing.allocation.balance.index",0.0f).put("cluster.routing.allocation.balance.replica",1.0f).put("cluster.routing.allocation.balance.primary",0.0f).build());
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,5).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,0))).build();
  RoutingTable routingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build();
  logger.info("Adding one node and reroute");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1"))).build();
  routingTable=strategy.reroute(clusterState,"reroute").routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  logger.info("Start the primary shards");
  RoutingNodes routingNodes=clusterState.getRoutingNodes();
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(numberOfShardsOfType(clusterState.getRoutingNodes(),STARTED),equalTo(5));
  logger.info("add another index with 5 shards");
  metaData=MetaData.builder(metaData).put(IndexMetaData.builder("test1").settings(settings(Version.CURRENT).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,5).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,0))).build();
  routingTable=RoutingTable.builder(routingTable).addAsNew(metaData.index("test1")).build();
  clusterState=ClusterState.builder(clusterState).metaData(metaData).routingTable(routingTable).build();
  logger.info("Add another one node and reroute");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).put(newNode("node2"))).build();
  routingTable=strategy.reroute(clusterState,"reroute").routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  routingNodes=clusterState.getRoutingNodes();
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(numberOfShardsOfType(clusterState.getRoutingNodes(),STARTED),equalTo(10));
  for (  ShardRouting shardRouting : clusterState.getRoutingNodes().node("node1")) {
    assertThat(shardRouting.getIndexName(),equalTo("test"));
  }
  for (  ShardRouting shardRouting : clusterState.getRoutingNodes().node("node2")) {
    assertThat(shardRouting.getIndexName(),equalTo("test1"));
  }
  logger.info("update {} for test, see that things move",ShardsLimitAllocationDecider.INDEX_TOTAL_SHARDS_PER_NODE_SETTING.getKey());
  metaData=MetaData.builder(metaData).put(IndexMetaData.builder("test").settings(settings(Version.CURRENT).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,5).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,0).put(ShardsLimitAllocationDecider.INDEX_TOTAL_SHARDS_PER_NODE_SETTING.getKey(),3))).build();
  clusterState=ClusterState.builder(clusterState).metaData(metaData).build();
  logger.info("reroute after setting");
  routingTable=strategy.reroute(clusterState,"reroute").routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.getRoutingNodes().node("node1").numberOfShardsWithState(STARTED),equalTo(3));
  assertThat(clusterState.getRoutingNodes().node("node1").numberOfShardsWithState(RELOCATING),equalTo(2));
  assertThat(clusterState.getRoutingNodes().node("node2").numberOfShardsWithState(RELOCATING),equalTo(2));
  assertThat(clusterState.getRoutingNodes().node("node2").numberOfShardsWithState(STARTED),equalTo(3));
  routingNodes=clusterState.getRoutingNodes();
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=ClusterState.builder(clusterState).routingTable(routingTable).build();
  assertThat(clusterState.getRoutingNodes().node("node1").numberOfShardsWithState(STARTED),equalTo(5));
  assertThat(clusterState.getRoutingNodes().node("node2").numberOfShardsWithState(STARTED),equalTo(5));
}
