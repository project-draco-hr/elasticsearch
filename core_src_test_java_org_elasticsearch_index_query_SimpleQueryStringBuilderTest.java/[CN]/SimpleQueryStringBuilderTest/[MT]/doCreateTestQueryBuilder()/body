{
  SimpleQueryStringBuilder result=new SimpleQueryStringBuilder(randomAsciiOfLengthBetween(1,10));
  if (randomBoolean()) {
    result.analyzeWildcard(randomBoolean());
  }
  if (randomBoolean()) {
    result.lenient(randomBoolean());
  }
  if (randomBoolean()) {
    result.lowercaseExpandedTerms(randomBoolean());
  }
  if (randomBoolean()) {
    result.locale(randomLocale(getRandom()));
  }
  if (randomBoolean()) {
    result.minimumShouldMatch(randomFrom(MINIMUM_SHOULD_MATCH));
  }
  if (randomBoolean()) {
    result.analyzer("simple");
  }
  if (randomBoolean()) {
    result.defaultOperator(randomFrom(Operator.AND,Operator.OR));
  }
  if (randomBoolean()) {
    Set<SimpleQueryStringFlag> flagSet=new HashSet<>();
    int size=randomIntBetween(0,SimpleQueryStringFlag.values().length);
    for (int i=0; i < size; i++) {
      flagSet.add(randomFrom(SimpleQueryStringFlag.values()));
    }
    if (flagSet.size() > 0) {
      result.flags(flagSet.toArray(new SimpleQueryStringFlag[flagSet.size()]));
    }
  }
  int fieldCount=randomIntBetween(0,10);
  Map<String,Float> fields=new TreeMap<>();
  for (int i=0; i < fieldCount; i++) {
    if (randomBoolean()) {
      fields.put(randomAsciiOfLengthBetween(1,10),AbstractQueryBuilder.DEFAULT_BOOST);
    }
 else {
      fields.put(randomAsciiOfLengthBetween(1,10),2.0f / randomIntBetween(1,20));
    }
  }
  result.fields(fields);
  return result;
}
