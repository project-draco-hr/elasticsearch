{
  assertThat(query,notNullValue());
  if ("".equals(queryBuilder.value())) {
    assertTrue("Query should have been MatchNoDocsQuery but was " + query.getClass().getName(),query instanceof MatchNoDocsQuery);
  }
 else   if (queryBuilder.fields().size() > 1) {
    assertTrue("Query should have been BooleanQuery but was " + query.getClass().getName(),query instanceof BooleanQuery);
    BooleanQuery boolQuery=(BooleanQuery)query;
    if (queryBuilder.lowercaseExpandedTerms()) {
      for (      BooleanClause clause : boolQuery.clauses()) {
        if (clause.getQuery() instanceof TermQuery) {
          TermQuery inner=(TermQuery)clause.getQuery();
          assertThat(inner.getTerm().bytes().toString(),is(inner.getTerm().bytes().toString().toLowerCase(Locale.ROOT)));
        }
      }
    }
    assertThat(boolQuery.clauses().size(),equalTo(queryBuilder.fields().size()));
    Iterator<String> fields=queryBuilder.fields().keySet().iterator();
    for (    BooleanClause booleanClause : boolQuery) {
      assertThat(booleanClause.getQuery(),instanceOf(TermQuery.class));
      TermQuery termQuery=(TermQuery)booleanClause.getQuery();
      assertThat(termQuery.getTerm(),equalTo(new Term(fields.next(),queryBuilder.value().toLowerCase(Locale.ROOT))));
    }
    if (queryBuilder.minimumShouldMatch() != null) {
      Collection<String> minMatchAlways=Arrays.asList("1","-1","75%","-25%");
      Collection<String> minMatchLarger=Arrays.asList("2<75%","2<-25%");
      if (minMatchAlways.contains(queryBuilder.minimumShouldMatch())) {
        assertThat(boolQuery.getMinimumNumberShouldMatch(),greaterThan(0));
      }
 else       if (minMatchLarger.contains(queryBuilder.minimumShouldMatch())) {
        if (shouldClauses(boolQuery) > 2) {
          assertThat(boolQuery.getMinimumNumberShouldMatch(),greaterThan(0));
        }
      }
 else {
        assertEquals(0,boolQuery.getMinimumNumberShouldMatch());
      }
    }
  }
 else   if (queryBuilder.fields().size() <= 1) {
    assertTrue("Query should have been TermQuery but was " + query.getClass().getName(),query instanceof TermQuery);
    TermQuery termQuery=(TermQuery)query;
    String field;
    if (queryBuilder.fields().size() == 0) {
      field=MetaData.ALL;
    }
 else {
      field=queryBuilder.fields().keySet().iterator().next();
    }
    assertThat(termQuery.getTerm(),equalTo(new Term(field,queryBuilder.value().toLowerCase(Locale.ROOT))));
    if (queryBuilder.lowercaseExpandedTerms()) {
      assertThat(termQuery.getTerm().bytes().toString(),is(termQuery.getTerm().bytes().toString().toLowerCase(Locale.ROOT)));
    }
  }
 else {
    fail("Encountered lucene query type we do not have a validation implementation for in our SimpleQueryStringBuilderTest");
  }
}
