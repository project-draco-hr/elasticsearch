{
  Map<String,Float> fields=new TreeMap<>();
  if (queryBuilder.fields().isEmpty()) {
    String field=context.defaultField();
    fields.put(field,1.0F);
  }
 else {
    fields.putAll(queryBuilder.fields());
  }
  Analyzer luceneAnalyzer;
  if (queryBuilder.analyzer() == null) {
    luceneAnalyzer=context.mapperService().searchAnalyzer();
  }
 else {
    luceneAnalyzer=context.analysisService().analyzer(queryBuilder.analyzer());
  }
  SimpleQueryParser sqp=new SimpleQueryParser(luceneAnalyzer,fields,queryBuilder.flags(),new Settings(queryBuilder.locale(),queryBuilder.lowercaseExpandedTerms(),queryBuilder.lenient(),queryBuilder.analyzeWildcard()));
  if (queryBuilder.defaultOperator() != null) {
switch (queryBuilder.defaultOperator()) {
case OR:
      sqp.setDefaultOperator(Occur.SHOULD);
    break;
case AND:
  sqp.setDefaultOperator(Occur.MUST);
break;
}
}
Query query=sqp.parse(queryBuilder.text());
if (queryBuilder.queryName() != null) {
context.addNamedQuery(queryBuilder.queryName(),query);
}
if (queryBuilder.minimumShouldMatch() != null && query instanceof BooleanQuery) {
Queries.applyMinimumShouldMatch((BooleanQuery)query,queryBuilder.minimumShouldMatch());
}
query.setBoost(queryBuilder.boost());
return query;
}
