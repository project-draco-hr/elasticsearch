{
  startCluster(3);
  String masterNode=internalCluster().getMasterName();
  String nonMasterNode=null;
  while (nonMasterNode == null) {
    nonMasterNode=randomFrom(internalCluster().getNodeNames());
    if (nonMasterNode.equals(masterNode)) {
      nonMasterNode=null;
    }
  }
  logger.info("blocking request from master [{}] to [{}]",masterNode,nonMasterNode);
  MockTransportService masterTransportService=(MockTransportService)internalCluster().getInstance(TransportService.class,masterNode);
  if (randomBoolean()) {
    masterTransportService.addUnresponsiveRule(internalCluster().getInstance(TransportService.class,nonMasterNode));
  }
 else {
    masterTransportService.addFailToSendNoConnectRule(internalCluster().getInstance(TransportService.class,nonMasterNode));
  }
  logger.info("waiting for [{}] to be removed from cluster",nonMasterNode);
  ensureStableCluster(2,masterNode);
  logger.info("waiting for [{}] to have no master",nonMasterNode);
  assertNoMaster(nonMasterNode);
  logger.info("healing partition and checking cluster reforms");
  masterTransportService.clearAllRules();
  ensureStableCluster(3);
}
