{
  List<String> nodes=startCluster(3);
  assertAcked(prepareCreate("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS,1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS,2)).get());
  ensureGreen("test");
  nodes=new ArrayList<>(nodes);
  Collections.shuffle(nodes,random());
  String isolatedNode=nodes.get(0);
  String notIsolatedNode=nodes.get(1);
  ServiceDisruptionScheme scheme=addRandomIsolation(isolatedNode);
  scheme.startDisrupting();
  ensureStableCluster(2,notIsolatedNode);
  assertFalse(client(notIsolatedNode).admin().cluster().prepareHealth("test").setWaitForYellowStatus().get().isTimedOut());
  IndexResponse indexResponse=internalCluster().client(notIsolatedNode).prepareIndex("test","type").setSource("field","value").get();
  assertThat(indexResponse.getVersion(),equalTo(1l));
  logger.info("Verifying if document exists via node[" + notIsolatedNode + "]");
  GetResponse getResponse=internalCluster().client(notIsolatedNode).prepareGet("test","type",indexResponse.getId()).setPreference("_local").get();
  assertThat(getResponse.isExists(),is(true));
  assertThat(getResponse.getVersion(),equalTo(1l));
  assertThat(getResponse.getId(),equalTo(indexResponse.getId()));
  scheme.stopDisrupting();
  ensureStableCluster(3);
  ensureGreen("test");
  for (  String node : nodes) {
    logger.info("Verifying if document exists after isolating node[" + isolatedNode + "] via node["+ node+ "]");
    getResponse=internalCluster().client(node).prepareGet("test","type",indexResponse.getId()).setPreference("_local").get();
    assertThat(getResponse.isExists(),is(true));
    assertThat(getResponse.getVersion(),equalTo(1l));
    assertThat(getResponse.getId(),equalTo(indexResponse.getId()));
  }
}
