{
  List<String> nodes=startCluster(4,-1,new int[]{0});
  final String unicastTarget=nodes.get(0);
  Set<String> unicastTargetSide=new HashSet<>();
  unicastTargetSide.add(unicastTarget);
  Set<String> restOfClusterSide=new HashSet<>();
  restOfClusterSide.addAll(nodes);
  restOfClusterSide.remove(unicastTarget);
  for (  ZenPingService pingService : internalCluster().getInstances(ZenPingService.class)) {
    for (    ZenPing zenPing : pingService.zenPings()) {
      ((UnicastZenPing)zenPing).clearTemporalResponses();
    }
  }
  NetworkDisconnectPartition networkDisconnect=new NetworkDisconnectPartition(unicastTargetSide,restOfClusterSide,random());
  setDisruptionScheme(networkDisconnect);
  networkDisconnect.startDisrupting();
  ensureStableCluster(3,nodes.get(1));
  assertNoMaster(unicastTarget);
  networkDisconnect.stopDisrupting();
  ensureStableCluster(4);
}
