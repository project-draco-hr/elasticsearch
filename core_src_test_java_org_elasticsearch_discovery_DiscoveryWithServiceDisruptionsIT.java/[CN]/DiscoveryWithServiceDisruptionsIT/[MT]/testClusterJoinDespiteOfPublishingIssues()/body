{
  List<String> nodes=startCluster(2,1);
  String masterNode=internalCluster().getMasterName();
  String nonMasterNode;
  if (masterNode.equals(nodes.get(0))) {
    nonMasterNode=nodes.get(1);
  }
 else {
    nonMasterNode=nodes.get(0);
  }
  DiscoveryNodes discoveryNodes=internalCluster().getInstance(ClusterService.class,nonMasterNode).state().nodes();
  TransportService masterTranspotService=internalCluster().getInstance(TransportService.class,discoveryNodes.masterNode().getName());
  logger.info("blocking requests from non master [{}] to master [{}]",nonMasterNode,masterNode);
  MockTransportService nonMasterTransportService=(MockTransportService)internalCluster().getInstance(TransportService.class,nonMasterNode);
  nonMasterTransportService.addFailToSendNoConnectRule(masterTranspotService);
  assertNoMaster(nonMasterNode);
  logger.info("blocking cluster state publishing from master [{}] to non master [{}]",masterNode,nonMasterNode);
  MockTransportService masterTransportService=(MockTransportService)internalCluster().getInstance(TransportService.class,masterNode);
  TransportService localTransportService=internalCluster().getInstance(TransportService.class,discoveryNodes.getLocalNode().getName());
  if (randomBoolean()) {
    masterTransportService.addFailToSendNoConnectRule(localTransportService,PublishClusterStateAction.SEND_ACTION_NAME);
  }
 else {
    masterTransportService.addFailToSendNoConnectRule(localTransportService,PublishClusterStateAction.COMMIT_ACTION_NAME);
  }
  logger.info("allowing requests from non master [{}] to master [{}], waiting for two join request",nonMasterNode,masterNode);
  final CountDownLatch countDownLatch=new CountDownLatch(2);
  nonMasterTransportService.addDelegate(masterTranspotService,new MockTransportService.DelegateTransport(nonMasterTransportService.original()){
    @Override public void sendRequest(    DiscoveryNode node,    long requestId,    String action,    TransportRequest request,    TransportRequestOptions options) throws IOException, TransportException {
      if (action.equals(MembershipAction.DISCOVERY_JOIN_ACTION_NAME)) {
        countDownLatch.countDown();
      }
      super.sendRequest(node,requestId,action,request,options);
    }
  }
);
  countDownLatch.await();
  logger.info("waiting for cluster to reform");
  masterTransportService.clearRule(localTransportService);
  nonMasterTransportService.clearRule(localTransportService);
  ensureStableCluster(2);
  internalCluster().stopRandomNonMasterNode();
}
