{
  final DisruptedLinks disruptedLinks;
  if (randomBoolean()) {
    disruptedLinks=TwoPartitions.random(random(),internalCluster().getNodeNames());
  }
 else {
    disruptedLinks=Bridge.random(random(),internalCluster().getNodeNames());
  }
  final NetworkLinkDisruptionType disruptionType;
switch (randomInt(2)) {
case 0:
    disruptionType=new NetworkUnresponsive();
  break;
case 1:
disruptionType=new NetworkDisconnect();
break;
case 2:
disruptionType=NetworkDelay.random(random());
break;
default :
throw new IllegalArgumentException();
}
final ServiceDisruptionScheme scheme;
if (rarely()) {
scheme=new SlowClusterStateProcessing(random());
}
 else {
scheme=new NetworkDisruption(disruptedLinks,disruptionType);
}
setDisruptionScheme(scheme);
return scheme;
}
