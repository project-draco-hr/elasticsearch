{
  int numPredictions=randomIntBetween(0,10);
  SearchResponse response=client().prepareSearch("idx").addAggregation(filter("filtered").filter(new RangeFilterBuilder("gap_test").from((interval * (numValueBuckets - 1) + interval))).subAggregation(histogram("histo").field("gap_test").interval(interval).minDocCount(0).subAggregation(sum("the_sum").field(GAP_FIELD)).subAggregation(movingAvg("movingAvg").window(windowSize).modelBuilder(randomModelBuilder()).gapPolicy(gapPolicy).predict(numPredictions).setBucketsPaths("the_sum")))).execute().actionGet();
  assertSearchResponse(response);
  InternalFilter filtered=response.getAggregations().get("filtered");
  assertThat(filtered,notNullValue());
  assertThat(filtered.getName(),equalTo("filtered"));
  InternalHistogram<Bucket> histo=filtered.getAggregations().get("histo");
  assertThat(histo,notNullValue());
  assertThat(histo.getName(),equalTo("histo"));
  List<? extends Bucket> buckets=histo.getBuckets();
  assertThat(buckets.size(),equalTo(0));
}
