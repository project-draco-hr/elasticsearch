{
  SearchResponse response=client().prepareSearch("idx").addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(interval).minDocCount(0).extendedBounds(0L,(long)(interval * (numValueBuckets - 1))).subAggregation(randomMetric("the_metric",SINGLE_VALUED_VALUE_FIELD_NAME)).subAggregation(movingAvg("movavg_counts").window(windowSize).modelBuilder(new DoubleExpModel.DoubleExpModelBuilder().alpha(0.5).beta(0.5)).gapPolicy(gapPolicy).setBucketsPaths("_count")).subAggregation(movingAvg("movavg_values").window(windowSize).modelBuilder(new DoubleExpModel.DoubleExpModelBuilder().alpha(0.5).beta(0.5)).gapPolicy(gapPolicy).setBucketsPaths("the_metric"))).execute().actionGet();
  assertSearchResponse(response);
  InternalHistogram<Bucket> histo=response.getAggregations().get("histo");
  assertThat(histo,notNullValue());
  assertThat(histo.getName(),equalTo("histo"));
  List<? extends Bucket> buckets=histo.getBuckets();
  assertThat(buckets.size(),equalTo(numValueBuckets));
  for (int i=0; i < numValueBuckets; ++i) {
    Histogram.Bucket bucket=buckets.get(i);
    checkBucketKeyAndDocCount("Bucket " + i,bucket,i * interval,docCounts[i]);
    SimpleValue docCountMovAvg=bucket.getAggregations().get("movavg_counts");
    assertThat(docCountMovAvg,notNullValue());
    assertThat(docCountMovAvg.value(),equalTo(doubleDocCounts[i]));
    SimpleValue valuesMovAvg=bucket.getAggregations().get("movavg_values");
    assertThat(valuesMovAvg,notNullValue());
    assertThat(valuesMovAvg.value(),equalTo(doubleDocValues[i]));
  }
}
