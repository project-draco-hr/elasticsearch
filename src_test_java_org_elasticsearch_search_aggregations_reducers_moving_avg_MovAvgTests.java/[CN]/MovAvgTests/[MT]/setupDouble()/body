{
  EvictingQueue<Double> window=EvictingQueue.create(windowSize);
  doubleDocCounts=new Double[numValueBuckets];
  for (int i=0; i < numValueBuckets; i++) {
    if (docCounts[i] == 0 && gapPolicy.equals(BucketHelpers.GapPolicy.IGNORE)) {
      continue;
    }
    window.offer((double)docCounts[i]);
    double s=0;
    double last_s=0;
    double b=0;
    double last_b=0;
    double alpha=0.5;
    double beta=0.5;
    int counter=0;
    double last;
    for (    double value : window) {
      last=value;
      if (counter == 1) {
        s=value;
        b=value - last;
      }
 else {
        s=alpha * value + (1.0d - alpha) * (last_s + last_b);
        b=beta * (s - last_s) + (1 - beta) * last_b;
      }
      counter+=1;
      last_s=s;
      last_b=b;
    }
    doubleDocCounts[i]=s + (0 * b);
  }
  doubleDocValues=new Double[numValueBuckets];
  window.clear();
  for (int i=0; i < numValueBuckets; i++) {
    if (docCounts[i] == 0) {
      if (gapPolicy.equals(BucketHelpers.GapPolicy.IGNORE)) {
        continue;
      }
 else       if (gapPolicy.equals(BucketHelpers.GapPolicy.INSERT_ZEROS)) {
        window.offer(0.0);
      }
 else {
        window.offer((double)docValues[i]);
      }
    }
 else {
      window.offer((double)docValues[i]);
    }
    double s=0;
    double last_s=0;
    double b=0;
    double last_b=0;
    double alpha=0.5;
    double beta=0.5;
    int counter=0;
    double last;
    for (    double value : window) {
      last=value;
      if (counter == 1) {
        s=value;
        b=value - last;
      }
 else {
        s=alpha * value + (1.0d - alpha) * (last_s + last_b);
        b=beta * (s - last_s) + (1 - beta) * last_b;
      }
      counter+=1;
      last_s=s;
      last_b=b;
    }
    doubleDocValues[i]=s + (0 * b);
  }
}
