{
  ArrayList<Double> values=new ArrayList<>(numBuckets);
  EvictingQueue<Double> window=EvictingQueue.create(windowSize);
  for (  ReducerHelperTests.MockBucket mockBucket : mockHisto) {
    double metricValue;
    double[] docValues=mockBucket.docValues;
    if (mockBucket.count == 0 && target.equals(MetricTarget.VALUE)) {
      if (gapPolicy.equals(BucketHelpers.GapPolicy.SKIP)) {
        values.add(null);
        continue;
      }
 else       if (gapPolicy.equals(BucketHelpers.GapPolicy.INSERT_ZEROS)) {
        metricValue=0.0;
      }
 else {
        metricValue=ReducerHelperTests.calculateMetric(docValues,metric);
      }
    }
 else {
      metricValue=target.equals(MetricTarget.VALUE) ? ReducerHelperTests.calculateMetric(docValues,metric) : mockBucket.count;
    }
    window.offer(metricValue);
switch (type) {
case SIMPLE:
      values.add(simple(window));
    break;
case LINEAR:
  values.add(linear(window));
break;
case EWMA:
values.add(ewma(window));
break;
case HOLT:
values.add(holt(window));
break;
}
}
testValues.put(type.toString() + "_" + target.toString(),values);
}
