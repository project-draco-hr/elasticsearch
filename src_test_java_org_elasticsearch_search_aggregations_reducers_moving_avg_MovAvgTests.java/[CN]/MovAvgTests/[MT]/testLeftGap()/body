{
  SearchResponse response=client().prepareSearch("idx").addAggregation(filter("filtered").filter(new RangeFilterBuilder("gap_test").from(1)).subAggregation(histogram("histo").field("gap_test").interval(interval).minDocCount(0).extendedBounds(0L,(long)(interval * (numValueBuckets - 1))).subAggregation(sum("the_sum").field(GAP_FIELD)).subAggregation(movingAvg("movingAvg").window(windowSize).modelBuilder(randomModelBuilder()).gapPolicy(gapPolicy).setBucketsPaths("the_sum")))).execute().actionGet();
  assertSearchResponse(response);
  InternalFilter filtered=response.getAggregations().get("filtered");
  assertThat(filtered,notNullValue());
  assertThat(filtered.getName(),equalTo("filtered"));
  InternalHistogram<Bucket> histo=filtered.getAggregations().get("histo");
  assertThat(histo,notNullValue());
  assertThat(histo.getName(),equalTo("histo"));
  List<? extends Bucket> buckets=histo.getBuckets();
  assertThat(buckets.size(),equalTo(numValueBuckets));
  double currentValue;
  double lastValue=0.0;
  for (int i=0; i < numValueBuckets - 1; i++) {
    currentValue=((SimpleValue)(buckets.get(i).getAggregations().get("movingAvg"))).value();
    assertThat(Double.compare(lastValue,currentValue),lessThanOrEqualTo(0));
    lastValue=currentValue;
  }
}
