{
  final long requestId=newRequestId();
  TimeoutHandler timeoutHandler=null;
  try {
    if (options.timeout() != null) {
      timeoutHandler=new TimeoutHandler(requestId);
      timeoutHandler.future=threadPool.schedule(timeoutHandler,options.timeout(),ThreadPool.ExecutionType.THREADED);
    }
    clientHandlers.put(requestId,new RequestHolder<T>(handler,node,action,timeoutHandler));
    transport.sendRequest(node,requestId,action,message,options);
  }
 catch (  final Exception e) {
    clientHandlers.remove(requestId);
    if (timeoutHandler != null) {
      timeoutHandler.future.cancel(false);
    }
    if (throwConnectException) {
      if (e instanceof ConnectTransportException) {
        throw (ConnectTransportException)e;
      }
    }
    final SendRequestTransportException sendRequestException=new SendRequestTransportException(node,action,e);
    threadPool.execute(new Runnable(){
      @Override public void run(){
        handler.handleException(sendRequestException);
      }
    }
);
  }
}
