{
  prefix.analyze(locals);
  prefix.expected=prefix.actual;
  prefix=prefix.cast(locals);
  Sort sort=prefix.actual.sort;
  if (sort == Sort.ARRAY) {
    sub=new PSubArrayLength(location,prefix.actual.name,value);
  }
 else   if (sort == Sort.DEF) {
    sub=new PSubDefField(location,value);
  }
 else {
    Struct struct=prefix.actual.struct;
    Field field=prefix instanceof EStatic ? struct.staticMembers.get(value) : struct.members.get(value);
    if (field != null) {
      sub=new PSubField(location,field);
    }
 else {
      Method getter=struct.methods.get(new Definition.MethodKey("get" + Character.toUpperCase(value.charAt(0)) + value.substring(1),0));
      if (getter == null) {
        getter=struct.methods.get(new Definition.MethodKey("is" + Character.toUpperCase(value.charAt(0)) + value.substring(1),0));
      }
      Method setter=struct.methods.get(new Definition.MethodKey("set" + Character.toUpperCase(value.charAt(0)) + value.substring(1),1));
      if (getter != null || setter != null) {
        sub=new PSubShortcut(location,value,prefix.actual.name,getter,setter);
      }
 else {
        EConstant index=new EConstant(location,value);
        index.analyze(locals);
        if (Map.class.isAssignableFrom(prefix.actual.clazz)) {
          sub=new PSubMapShortcut(location,struct,index);
        }
        if (List.class.isAssignableFrom(prefix.actual.clazz)) {
          sub=new PSubListShortcut(location,struct,index);
        }
      }
    }
  }
  if (sub == null) {
    throw createError(new IllegalArgumentException("Unknown field [" + value + "] for type ["+ prefix.actual.name+ "]."));
  }
  sub.write=write;
  sub.read=read;
  sub.expected=expected;
  sub.explicit=explicit;
  sub.analyze(locals);
  actual=sub.actual;
}
