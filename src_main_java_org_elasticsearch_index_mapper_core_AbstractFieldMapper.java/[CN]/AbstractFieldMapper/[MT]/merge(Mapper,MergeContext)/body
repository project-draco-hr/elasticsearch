{
  if (!this.getClass().equals(mergeWith.getClass())) {
    String mergedType=mergeWith.getClass().getSimpleName();
    if (mergeWith instanceof AbstractFieldMapper) {
      mergedType=((AbstractFieldMapper)mergeWith).contentType();
    }
    mergeContext.addConflict("mapper [" + names.fullName() + "] of different type, current_type ["+ contentType()+ "], merged_type ["+ mergedType+ "]");
    return;
  }
  AbstractFieldMapper fieldMergeWith=(AbstractFieldMapper)mergeWith;
  if (this.indexed() != fieldMergeWith.indexed() || this.tokenized() != fieldMergeWith.tokenized()) {
    mergeContext.addConflict("mapper [" + names.fullName() + "] has different index values");
  }
  if (this.stored() != fieldMergeWith.stored()) {
    mergeContext.addConflict("mapper [" + names.fullName() + "] has different store values");
  }
  if (this.tokenized() != fieldMergeWith.tokenized()) {
    mergeContext.addConflict("mapper [" + names.fullName() + "] has different tokenize values");
  }
  if (this.storeTermVectors() != fieldMergeWith.storeTermVectors()) {
    mergeContext.addConflict("mapper [" + names.fullName() + "] has different store_term_vector values");
  }
  if (this.storeTermVectorOffsets() != fieldMergeWith.storeTermVectorOffsets()) {
    mergeContext.addConflict("mapper [" + names.fullName() + "] has different store_term_vector_offsets values");
  }
  if (this.storeTermVectorPositions() != fieldMergeWith.storeTermVectorPositions()) {
    mergeContext.addConflict("mapper [" + names.fullName() + "] has different store_term_vector_positions values");
  }
  if (this.storeTermVectorPayloads() != fieldMergeWith.storeTermVectorPayloads()) {
    mergeContext.addConflict("mapper [" + names.fullName() + "] has different store_term_vector_payloads values");
  }
  if (this.indexAnalyzer == null) {
    if (fieldMergeWith.indexAnalyzer != null) {
      mergeContext.addConflict("mapper [" + names.fullName() + "] has different index_analyzer");
    }
  }
 else   if (fieldMergeWith.indexAnalyzer == null) {
    mergeContext.addConflict("mapper [" + names.fullName() + "] has different index_analyzer");
  }
 else   if (!this.indexAnalyzer.name().equals(fieldMergeWith.indexAnalyzer.name())) {
    mergeContext.addConflict("mapper [" + names.fullName() + "] has different index_analyzer");
  }
  if (this.searchAnalyzer == null) {
    if (fieldMergeWith.searchAnalyzer != null) {
      mergeContext.addConflict("mapper [" + names.fullName() + "] has different search_analyzer");
    }
  }
 else   if (fieldMergeWith.searchAnalyzer == null) {
    mergeContext.addConflict("mapper [" + names.fullName() + "] has different search_analyzer");
  }
 else   if (!this.searchAnalyzer.name().equals(fieldMergeWith.searchAnalyzer.name())) {
    mergeContext.addConflict("mapper [" + names.fullName() + "] has different search_analyzer");
  }
  if (this.similarity == null) {
    if (fieldMergeWith.similarity() != null) {
      mergeContext.addConflict("mapper [" + names.fullName() + "] has different similarity");
    }
  }
 else   if (fieldMergeWith.similarity() == null) {
    mergeContext.addConflict("mapper [" + names.fullName() + "] has different similarity");
  }
 else   if (!this.similarity().equals(fieldMergeWith.similarity())) {
    mergeContext.addConflict("mapper [" + names.fullName() + "] has different similarity");
  }
  if (!mergeContext.mergeFlags().simulate()) {
    this.boost=fieldMergeWith.boost;
    if (fieldMergeWith.postingsFormat != null) {
      this.postingsFormat=fieldMergeWith.postingsFormat;
    }
  }
}
