{
  builder.field("type",contentType());
  if (writePre20Metadata && (includeDefaults || !names.name().equals(names.indexNameClean()))) {
    builder.field("index_name",names.indexNameClean());
  }
  if (includeDefaults || boost != 1.0f) {
    builder.field("boost",boost);
  }
  FieldType defaultFieldType=defaultFieldType();
  boolean indexed=fieldType.indexOptions() != IndexOptions.NONE;
  boolean defaultIndexed=defaultFieldType.indexOptions() != IndexOptions.NONE;
  if (includeDefaults || indexed != defaultIndexed || fieldType.tokenized() != defaultFieldType.tokenized()) {
    builder.field("index",indexTokenizeOptionToString(indexed,fieldType.tokenized()));
  }
  if (includeDefaults || fieldType.stored() != defaultFieldType.stored()) {
    builder.field("store",fieldType.stored());
  }
  if (includeDefaults || hasDocValues() != Defaults.DOC_VALUES) {
    builder.field(TypeParsers.DOC_VALUES,docValues);
  }
  if (includeDefaults || fieldType.storeTermVectors() != defaultFieldType.storeTermVectors()) {
    builder.field("term_vector",termVectorOptionsToString(fieldType));
  }
  if (includeDefaults || fieldType.omitNorms() != defaultFieldType.omitNorms() || normsLoading != null) {
    builder.startObject("norms");
    if (includeDefaults || fieldType.omitNorms() != defaultFieldType.omitNorms()) {
      builder.field("enabled",!fieldType.omitNorms());
    }
    if (normsLoading != null) {
      builder.field(Loading.KEY,normsLoading);
    }
    builder.endObject();
  }
  if (indexed && (includeDefaults || fieldType.indexOptions() != defaultFieldType.indexOptions())) {
    builder.field("index_options",indexOptionToString(fieldType.indexOptions()));
  }
  doXContentAnalyzers(builder,includeDefaults);
  if (similarity() != null) {
    builder.field("similarity",similarity().name());
  }
 else   if (includeDefaults) {
    builder.field("similarity",SimilarityLookupService.DEFAULT_SIMILARITY);
  }
  if (customFieldDataSettings != null) {
    builder.field("fielddata",(Map)customFieldDataSettings.getAsMap());
  }
 else   if (includeDefaults) {
    builder.field("fielddata",(Map)fieldDataType.getSettings().getAsMap());
  }
  multiFields.toXContent(builder,params);
  if (copyTo != null) {
    copyTo.toXContent(builder,params);
  }
}
