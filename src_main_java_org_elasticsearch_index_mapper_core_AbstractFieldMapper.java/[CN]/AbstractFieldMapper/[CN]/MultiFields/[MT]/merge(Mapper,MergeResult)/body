{
  AbstractFieldMapper mergeWithMultiField=(AbstractFieldMapper)mergeWith;
  List<FieldMapper<?>> newFieldMappers=null;
  ImmutableOpenMap.Builder<String,FieldMapper> newMappersBuilder=null;
  for (  ObjectCursor<FieldMapper> cursor : mergeWithMultiField.multiFields.mappers.values()) {
    FieldMapper mergeWithMapper=cursor.value;
    Mapper mergeIntoMapper=mappers.get(mergeWithMapper.names().shortName());
    if (mergeIntoMapper == null) {
      if (!mergeResult.simulate()) {
        if (mergeWithMapper instanceof AllFieldMapper.IncludeInAll) {
          ((AllFieldMapper.IncludeInAll)mergeWithMapper).unsetIncludeInAll();
        }
        if (newMappersBuilder == null) {
          newMappersBuilder=ImmutableOpenMap.builder(mappers);
        }
        newMappersBuilder.put(mergeWithMapper.names().shortName(),mergeWithMapper);
        if (mergeWithMapper instanceof AbstractFieldMapper) {
          if (newFieldMappers == null) {
            newFieldMappers=new ArrayList<>(2);
          }
          newFieldMappers.add(mergeWithMapper);
        }
      }
    }
 else {
      mergeIntoMapper.merge(mergeWithMapper,mergeResult);
    }
  }
  if (newFieldMappers != null) {
    mergeResult.addFieldMappers(newFieldMappers);
  }
  if (newMappersBuilder != null) {
    mappers=newMappersBuilder.build();
  }
}
