{
  AbstractFieldMapper mergeWithMultiField=(AbstractFieldMapper)mergeWith;
  List<FieldMapper<?>> newFieldMappers=null;
  ImmutableOpenMap.Builder<String,Mapper> newMappersBuilder=null;
  for (  ObjectCursor<Mapper> cursor : mergeWithMultiField.multiFields.mappers.values()) {
    Mapper mergeWithMapper=cursor.value;
    Mapper mergeIntoMapper=mappers.get(mergeWithMapper.name());
    if (mergeIntoMapper == null) {
      if (!mergeContext.mergeFlags().simulate()) {
        if (mergeWithMapper instanceof AllFieldMapper.IncludeInAll) {
          ((AllFieldMapper.IncludeInAll)mergeWithMapper).unsetIncludeInAll();
        }
        if (newMappersBuilder == null) {
          newMappersBuilder=ImmutableOpenMap.builder(mappers);
        }
        newMappersBuilder.put(mergeWithMapper.name(),mergeWithMapper);
        if (mergeWithMapper instanceof AbstractFieldMapper) {
          if (newFieldMappers == null) {
            newFieldMappers=new ArrayList<>(2);
          }
          newFieldMappers.add((FieldMapper)mergeWithMapper);
        }
      }
    }
 else {
      mergeIntoMapper.merge(mergeWithMapper,mergeContext);
    }
  }
  if (newFieldMappers != null) {
    mergeContext.addFieldMappers(newFieldMappers);
  }
  if (newMappersBuilder != null) {
    mappers=newMappersBuilder.build();
  }
}
