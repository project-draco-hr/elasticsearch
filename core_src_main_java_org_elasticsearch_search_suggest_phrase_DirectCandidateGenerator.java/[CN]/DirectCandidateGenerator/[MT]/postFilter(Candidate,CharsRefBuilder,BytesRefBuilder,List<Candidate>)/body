{
  if (postFilter == null) {
    candidates.add(candidate);
  }
 else {
    final BytesRefBuilder result=byteSpare;
    analyze(postFilter,candidate.term,field,new TokenConsumer(){
      @Override public void nextToken() throws IOException {
        this.fillBytesRef(result);
        if (posIncAttr.getPositionIncrement() > 0 && result.get().bytesEquals(candidate.term)) {
          BytesRef term=result.toBytesRef();
          long freq=internalFrequency(term);
          candidates.add(new Candidate(result.toBytesRef(),freq,candidate.stringDistance,score(candidate.frequency,candidate.stringDistance,dictSize),false));
        }
 else {
          candidates.add(new Candidate(result.toBytesRef(),candidate.frequency,nonErrorLikelihood,score(candidate.frequency,candidate.stringDistance,dictSize),false));
        }
      }
    }
,spare);
  }
}
