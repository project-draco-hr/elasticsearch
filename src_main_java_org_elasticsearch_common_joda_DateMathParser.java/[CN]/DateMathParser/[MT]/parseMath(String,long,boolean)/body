{
  MutableDateTime dateTime=new MutableDateTime(time,DateTimeZone.UTC);
  for (int i=0; i < mathString.length(); ) {
    char c=mathString.charAt(i++);
    final boolean round;
    final int sign;
    if (c == '/') {
      round=true;
      sign=1;
    }
 else {
      round=false;
      if (c == '+') {
        sign=1;
      }
 else       if (c == '-') {
        sign=-1;
      }
 else {
        throw new ElasticsearchParseException("operator not supported for date math [" + mathString + "]");
      }
    }
    if (i >= mathString.length()) {
      throw new ElasticsearchParseException("truncated date math [" + mathString + "]");
    }
    final int num;
    if (!Character.isDigit(mathString.charAt(i))) {
      num=1;
    }
 else {
      int numFrom=i;
      while (i < mathString.length() && Character.isDigit(mathString.charAt(i))) {
        i++;
      }
      if (i >= mathString.length()) {
        throw new ElasticsearchParseException("truncated date math [" + mathString + "]");
      }
      num=Integer.parseInt(mathString.substring(numFrom,i));
    }
    if (round) {
      if (num != 1) {
        throw new ElasticsearchParseException("rounding `/` can only be used on single unit types [" + mathString + "]");
      }
    }
    char unit=mathString.charAt(i++);
    MutableDateTime.Property propertyToRound=null;
switch (unit) {
case 'y':
      if (round) {
        propertyToRound=dateTime.yearOfCentury();
      }
 else {
        dateTime.addYears(sign * num);
      }
    break;
case 'M':
  if (round) {
    propertyToRound=dateTime.monthOfYear();
  }
 else {
    dateTime.addMonths(sign * num);
  }
break;
case 'w':
if (round) {
propertyToRound=dateTime.weekOfWeekyear();
}
 else {
dateTime.addWeeks(sign * num);
}
break;
case 'd':
if (round) {
propertyToRound=dateTime.dayOfMonth();
}
 else {
dateTime.addDays(sign * num);
}
break;
case 'h':
case 'H':
if (round) {
propertyToRound=dateTime.hourOfDay();
}
 else {
dateTime.addHours(sign * num);
}
break;
case 'm':
if (round) {
propertyToRound=dateTime.minuteOfHour();
}
 else {
dateTime.addMinutes(sign * num);
}
break;
case 's':
if (round) {
propertyToRound=dateTime.secondOfMinute();
}
 else {
dateTime.addSeconds(sign * num);
}
break;
default :
throw new ElasticsearchParseException("unit [" + unit + "] not supported for date math ["+ mathString+ "]");
}
if (propertyToRound != null) {
if (roundUp) {
propertyToRound.add(1);
propertyToRound.roundFloor();
dateTime.addMillis(-1);
}
 else {
propertyToRound.roundFloor();
}
}
}
return dateTime.getMillis();
}
