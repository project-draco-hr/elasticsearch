{
  MutableDateTime dateTime=new MutableDateTime(time,DateTimeZone.UTC);
  try {
    for (int i=0; i < mathString.length(); ) {
      char c=mathString.charAt(i++);
      int type;
      if (c == '/') {
        type=0;
      }
 else       if (c == '+') {
        type=1;
      }
 else       if (c == '-') {
        type=2;
      }
 else {
        throw new ElasticsearchParseException("operator not supported for date math [" + mathString + "]");
      }
      int num;
      if (!Character.isDigit(mathString.charAt(i))) {
        num=1;
      }
 else {
        int numFrom=i;
        while (Character.isDigit(mathString.charAt(i))) {
          i++;
        }
        num=Integer.parseInt(mathString.substring(numFrom,i));
      }
      if (type == 0) {
        if (num != 1) {
          throw new ElasticsearchParseException("rounding `/` can only be used on single unit types [" + mathString + "]");
        }
      }
      char unit=mathString.charAt(i++);
switch (unit) {
case 'y':
        if (type == 0) {
          if (roundUp) {
            dateTime.yearOfCentury().roundCeiling();
          }
 else {
            dateTime.yearOfCentury().roundFloor();
          }
        }
 else         if (type == 1) {
          dateTime.addYears(num);
        }
 else         if (type == 2) {
          dateTime.addYears(-num);
        }
      break;
case 'M':
    if (type == 0) {
      if (roundUp) {
        dateTime.monthOfYear().roundCeiling();
      }
 else {
        dateTime.monthOfYear().roundFloor();
      }
    }
 else     if (type == 1) {
      dateTime.addMonths(num);
    }
 else     if (type == 2) {
      dateTime.addMonths(-num);
    }
  break;
case 'w':
if (type == 0) {
  if (roundUp) {
    dateTime.weekOfWeekyear().roundCeiling();
  }
 else {
    dateTime.weekOfWeekyear().roundFloor();
  }
}
 else if (type == 1) {
  dateTime.addWeeks(num);
}
 else if (type == 2) {
  dateTime.addWeeks(-num);
}
break;
case 'd':
if (type == 0) {
if (roundUp) {
dateTime.dayOfMonth().roundCeiling();
}
 else {
dateTime.dayOfMonth().roundFloor();
}
}
 else if (type == 1) {
dateTime.addDays(num);
}
 else if (type == 2) {
dateTime.addDays(-num);
}
break;
case 'h':
case 'H':
if (type == 0) {
if (roundUp) {
dateTime.hourOfDay().roundCeiling();
}
 else {
dateTime.hourOfDay().roundFloor();
}
}
 else if (type == 1) {
dateTime.addHours(num);
}
 else if (type == 2) {
dateTime.addHours(-num);
}
break;
case 'm':
if (type == 0) {
if (roundUp) {
dateTime.minuteOfHour().roundCeiling();
}
 else {
dateTime.minuteOfHour().roundFloor();
}
}
 else if (type == 1) {
dateTime.addMinutes(num);
}
 else if (type == 2) {
dateTime.addMinutes(-num);
}
break;
case 's':
if (type == 0) {
if (roundUp) {
dateTime.secondOfMinute().roundCeiling();
}
 else {
dateTime.secondOfMinute().roundFloor();
}
}
 else if (type == 1) {
dateTime.addSeconds(num);
}
 else if (type == 2) {
dateTime.addSeconds(-num);
}
break;
default :
throw new ElasticsearchParseException("unit [" + unit + "] not supported for date math ["+ mathString+ "]");
}
}
}
 catch (Exception e) {
if (e instanceof ElasticsearchParseException) {
throw (ElasticsearchParseException)e;
}
throw new ElasticsearchParseException("failed to parse date math [" + mathString + "]");
}
return dateTime.getMillis();
}
