{
  long purgeInterval=200;
  Settings settings=settingsBuilder().put("gateway.type","none").put("indices.ttl.interval",purgeInterval).build();
  logger.info("--> starting 2 nodes");
  startNode("node1",settings);
  startNode("node2",settings);
  Client client=client("node1");
  client.admin().indices().prepareDelete().execute().actionGet();
  ensureGreen(client);
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("_percolator").startObject("_ttl").field("enabled",true).endObject().startObject("_timestamp").field("enabled",true).endObject().endObject().endObject().string();
  client.admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards",2)).addMapping("_percolator",mapping).addMapping("type1",mapping).execute().actionGet();
  ensureGreen(client);
  long ttl=1500;
  long now=System.currentTimeMillis();
  client.prepareIndex("test","_percolator","kuku").setSource(jsonBuilder().startObject().startObject("query").startObject("term").field("field1","value1").endObject().endObject().endObject()).setRefresh(true).setTTL(ttl).execute().actionGet();
  PercolateResponse percolateResponse=client.preparePercolate().setIndices("test").setDocumentType("type1").setSource(jsonBuilder().startObject().startObject("doc").field("field1","value1").endObject().endObject()).execute().actionGet();
  assertThat(convertFromTextArray(percolateResponse.getMatches(),"test"),arrayContaining("kuku"));
  long timeSpent=System.currentTimeMillis() - now;
  long waitTime=ttl + purgeInterval - timeSpent;
  if (waitTime >= 0) {
    Thread.sleep(waitTime);
  }
  logger.info("Checking if the ttl purger has run");
  long currentDeleteCount;
  do {
    if (rarely()) {
      client.admin().indices().prepareFlush("test").setFull(true).execute().actionGet();
    }
 else     if (rarely()) {
      client.admin().indices().prepareOptimize("test").setMaxNumSegments(1).execute().actionGet();
    }
    IndicesStatsResponse response=client.admin().indices().prepareStats("test").clear().setIndexing(true).execute().actionGet();
    currentDeleteCount=response.getIndices().get("test").getTotal().getIndexing().getTotal().getDeleteCount();
  }
 while (currentDeleteCount < 2);
  assertThat(currentDeleteCount,equalTo(2l));
  percolateResponse=client.preparePercolate().setIndices("test").setDocumentType("type1").setSource(jsonBuilder().startObject().startObject("doc").field("field1","value1").endObject().endObject()).execute().actionGet();
  assertThat(percolateResponse.getMatches(),emptyArray());
}
