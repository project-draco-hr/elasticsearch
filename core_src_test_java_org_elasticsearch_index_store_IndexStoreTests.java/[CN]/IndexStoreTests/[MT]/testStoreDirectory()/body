{
  Index index=new Index("foo","fooUUID");
  final Path tempDir=createTempDir().resolve(index.getUUID()).resolve("0");
  final IndexModule.Type[] values=IndexModule.Type.values();
  final IndexModule.Type type=RandomPicks.randomFrom(random(),values);
  Settings settings=Settings.builder().put(IndexModule.INDEX_STORE_TYPE_SETTING.getKey(),type.name().toLowerCase(Locale.ROOT)).put(IndexMetaData.SETTING_VERSION_CREATED,Version.CURRENT).build();
  IndexSettings indexSettings=IndexSettingsModule.newIndexSettings("foo",settings);
  FsDirectoryService service=new FsDirectoryService(indexSettings,null,new ShardPath(false,tempDir,tempDir,new ShardId(index,0)));
  try (final Directory directory=service.newFSDirectory(tempDir,NoLockFactory.INSTANCE)){
switch (type) {
case NIOFS:
      assertTrue(type + " " + directory.toString(),directory instanceof NIOFSDirectory);
    break;
case MMAPFS:
  assertTrue(type + " " + directory.toString(),directory instanceof MMapDirectory);
break;
case SIMPLEFS:
assertTrue(type + " " + directory.toString(),directory instanceof SimpleFSDirectory);
break;
case FS:
case DEFAULT:
if (Constants.WINDOWS) {
if (Constants.JRE_IS_64BIT && MMapDirectory.UNMAP_SUPPORTED) {
assertTrue(type + " " + directory.toString(),directory instanceof MMapDirectory);
}
 else {
assertTrue(type + " " + directory.toString(),directory instanceof SimpleFSDirectory);
}
}
 else if (Constants.JRE_IS_64BIT && MMapDirectory.UNMAP_SUPPORTED) {
assertTrue(type + " " + directory.toString(),directory instanceof FileSwitchDirectory);
}
 else {
assertTrue(type + " " + directory.toString(),directory instanceof NIOFSDirectory);
}
break;
}
}
 }
