{
  final Path tempDir=createTempDir().resolve("foo").resolve("0");
  final IndexStoreModule.Type[] values=IndexStoreModule.Type.values();
  final IndexStoreModule.Type type=RandomPicks.randomFrom(random(),values);
  Settings settings=Settings.settingsBuilder().put(IndexStoreModule.STORE_TYPE,type.name().toLowerCase(Locale.ROOT)).build();
  FsDirectoryService service=new FsDirectoryService(settings,null,new ShardPath(false,tempDir,tempDir,"foo",new ShardId("foo",0)));
  try (final Directory directory=service.newFSDirectory(tempDir,NoLockFactory.INSTANCE)){
switch (type) {
case NIOFS:
      assertTrue(type + " " + directory.toString(),directory instanceof NIOFSDirectory);
    break;
case MMAPFS:
  assertTrue(type + " " + directory.toString(),directory instanceof MMapDirectory);
break;
case SIMPLEFS:
assertTrue(type + " " + directory.toString(),directory instanceof SimpleFSDirectory);
break;
case FS:
case DEFAULT:
if (Constants.WINDOWS) {
if (Constants.JRE_IS_64BIT && MMapDirectory.UNMAP_SUPPORTED) {
assertTrue(type + " " + directory.toString(),directory instanceof MMapDirectory);
}
 else {
assertTrue(type + " " + directory.toString(),directory instanceof SimpleFSDirectory);
}
}
 else if (Constants.JRE_IS_64BIT && MMapDirectory.UNMAP_SUPPORTED) {
assertTrue(type + " " + directory.toString(),directory instanceof FileSwitchDirectory);
}
 else {
assertTrue(type + " " + directory.toString(),directory instanceof NIOFSDirectory);
}
break;
}
}
 }
