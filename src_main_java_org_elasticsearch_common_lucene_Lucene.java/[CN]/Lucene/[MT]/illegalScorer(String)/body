{
  return new Scorer(null){
    @Override public float score() throws IOException {
      throw new ElasticsearchIllegalStateException(message);
    }
    @Override public int freq() throws IOException {
      throw new ElasticsearchIllegalStateException(message);
    }
    @Override public int advance(    int arg0) throws IOException {
      throw new ElasticsearchIllegalStateException(message);
    }
    @Override public long cost(){
      throw new ElasticsearchIllegalStateException(message);
    }
    @Override public int docID(){
      throw new ElasticsearchIllegalStateException(message);
    }
    @Override public int nextDoc() throws IOException {
      throw new ElasticsearchIllegalStateException(message);
    }
    @Override public int nextPosition() throws IOException {
      throw new ElasticsearchIllegalStateException(message);
    }
    @Override public int startOffset() throws IOException {
      throw new ElasticsearchIllegalStateException(message);
    }
    @Override public int endOffset() throws IOException {
      throw new ElasticsearchIllegalStateException(message);
    }
    @Override public BytesRef getPayload() throws IOException {
      throw new ElasticsearchIllegalStateException(message);
    }
  }
;
}
