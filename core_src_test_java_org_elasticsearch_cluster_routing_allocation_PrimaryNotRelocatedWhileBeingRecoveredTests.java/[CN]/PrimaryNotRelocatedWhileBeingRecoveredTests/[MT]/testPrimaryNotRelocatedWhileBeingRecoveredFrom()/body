{
  AllocationService strategy=createAllocationService(Settings.builder().put("cluster.routing.allocation.node_concurrent_recoveries",10).put("cluster.routing.allocation.concurrent_source_recoveries",10).put("cluster.routing.allocation.node_initial_primaries_recoveries",10).build());
  logger.info("Building initial routing table");
  MetaData metaData=MetaData.builder().put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(5).numberOfReplicas(1)).build();
  RoutingTable initialRoutingTable=RoutingTable.builder().addAsNew(metaData.index("test")).build();
  ClusterState clusterState=ClusterState.builder(org.elasticsearch.cluster.ClusterName.CLUSTER_NAME_SETTING.getDefault(Settings.EMPTY)).metaData(metaData).routingTable(initialRoutingTable).build();
  logger.info("Adding two nodes and performing rerouting");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().add(newNode("node1"))).build();
  RoutingAllocation.Result routingResult=strategy.reroute(clusterState,"reroute");
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  logger.info("Start the primary shard (on node1)");
  RoutingNodes routingNodes=clusterState.getRoutingNodes();
  routingResult=strategy.applyStartedShards(clusterState,routingNodes.node("node1").shardsWithState(INITIALIZING));
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  assertThat(clusterState.routingTable().shardsWithState(STARTED).size(),equalTo(5));
  logger.info("start another node, replica will start recovering form primary");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode("node2"))).build();
  routingResult=strategy.reroute(clusterState,"reroute");
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  assertThat(clusterState.routingTable().shardsWithState(STARTED).size(),equalTo(5));
  assertThat(clusterState.routingTable().shardsWithState(INITIALIZING).size(),equalTo(5));
  logger.info("start another node, make sure the primary is not relocated");
  clusterState=ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).add(newNode("node3"))).build();
  routingResult=strategy.reroute(clusterState,"reroute");
  clusterState=ClusterState.builder(clusterState).routingResult(routingResult).build();
  assertThat(clusterState.routingTable().shardsWithState(STARTED).size(),equalTo(5));
  assertThat(clusterState.routingTable().shardsWithState(INITIALIZING).size(),equalTo(5));
}
