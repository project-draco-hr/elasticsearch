{
  JsonParseContext jsonContext=cache.get().get();
  if (type != null && !type.equals(this.type)) {
    throw new MapperParsingException("Type mismatch, provide type [" + type + "] but mapper is of type ["+ this.type+ "]");
  }
  type=this.type;
  JsonParser jp=null;
  try {
    jp=jsonFactory.createJsonParser(source);
    jsonContext.reset(jp,new Document(),type,source,listener);
    JsonToken token=jp.nextToken();
    if (token != JsonToken.START_OBJECT) {
      throw new MapperException("Malformed json, must start with an object");
    }
    token=jp.nextToken();
    if (token != JsonToken.FIELD_NAME) {
      throw new MapperException("Malformed json, after first object, the type name must exists");
    }
    if (!jp.getCurrentName().equals(type)) {
      if (type == null) {
        throw new MapperException("Json content type [" + jp.getCurrentName() + "] does not match the type of the mapper ["+ type+ "]");
      }
    }
 else {
      token=jp.nextToken();
      if (token != JsonToken.START_OBJECT) {
        throw new MapperException("Malformed json, a field with the same name as the type much be an object json with the properties/fields within it");
      }
    }
    if (sourceFieldMapper.enabled()) {
      sourceFieldMapper.parse(jsonContext);
    }
    if (id != null) {
      jsonContext.id(id);
      uidFieldMapper.parse(jsonContext);
    }
    typeFieldMapper.parse(jsonContext);
    rootObjectMapper.parse(jsonContext);
    if (id == null) {
      uidFieldMapper.parse(jsonContext);
    }
    if (jsonContext.parsedIdState() != JsonParseContext.ParsedIdState.PARSED) {
      jsonContext.parsedId(JsonParseContext.ParsedIdState.EXTERNAL);
      idFieldMapper.parse(jsonContext);
    }
    allFieldMapper.parse(jsonContext);
  }
 catch (  IOException e) {
    throw new MapperParsingException("Failed to parse",e);
  }
 finally {
    if (jp != null) {
      try {
        jp.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return new ParsedDocument(jsonContext.uid(),jsonContext.id(),jsonContext.type(),jsonContext.doc(),source,jsonContext.mappersAdded());
}
