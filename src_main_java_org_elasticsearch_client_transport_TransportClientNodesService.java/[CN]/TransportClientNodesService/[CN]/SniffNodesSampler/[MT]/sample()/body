{
  if (closed) {
    return;
  }
  Map<TransportAddress,DiscoveryNode> nodesToPing=Maps.newHashMap();
  for (  DiscoveryNode node : listedNodes) {
    nodesToPing.put(node.address(),node);
  }
  for (  DiscoveryNode node : nodes) {
    nodesToPing.put(node.address(),node);
  }
  final CountDownLatch latch=new CountDownLatch(nodesToPing.size());
  final CopyOnWriteArrayList<NodesInfoResponse> nodesInfoResponses=new CopyOnWriteArrayList<NodesInfoResponse>();
  for (  final DiscoveryNode listedNode : nodesToPing.values()) {
    threadPool.executor(ThreadPool.Names.MANAGEMENT).execute(new Runnable(){
      @Override public void run(){
        try {
          transportService.connectToNode(listedNode);
          transportService.sendRequest(listedNode,NodesInfoAction.NAME,Requests.nodesInfoRequest("_all"),new BaseTransportResponseHandler<NodesInfoResponse>(){
            @Override public NodesInfoResponse newInstance(){
              return new NodesInfoResponse();
            }
            @Override public String executor(){
              return ThreadPool.Names.SAME;
            }
            @Override public void handleResponse(            NodesInfoResponse response){
              nodesInfoResponses.add(response);
              latch.countDown();
            }
            @Override public void handleException(            TransportException exp){
              logger.debug("Failed to get node info from " + listedNode + ", removed from nodes list",exp);
              latch.countDown();
            }
          }
);
        }
 catch (        Exception e) {
          logger.debug("Failed to get node info from " + listedNode + ", removed from nodes list",e);
          latch.countDown();
        }
      }
    }
);
  }
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
    return;
  }
  HashSet<DiscoveryNode> newNodes=new HashSet<DiscoveryNode>();
  for (  NodesInfoResponse nodesInfoResponse : nodesInfoResponses) {
    for (    NodeInfo nodeInfo : nodesInfoResponse) {
      if (!clusterName.equals(nodesInfoResponse.clusterName())) {
        logger.warn("Node {} not part of the cluster {}, ignoring...",nodeInfo.node(),clusterName);
      }
 else {
        if (nodeInfo.node().dataNode()) {
          newNodes.add(nodeInfo.node());
        }
      }
    }
  }
  for (Iterator<DiscoveryNode> it=newNodes.iterator(); it.hasNext(); ) {
    DiscoveryNode node=it.next();
    try {
      transportService.connectToNode(node);
    }
 catch (    Exception e) {
      it.remove();
      logger.debug("Failed to connect to discovered node [" + node + "]",e);
    }
  }
  nodes=new ImmutableList.Builder<DiscoveryNode>().addAll(newNodes).build();
}
