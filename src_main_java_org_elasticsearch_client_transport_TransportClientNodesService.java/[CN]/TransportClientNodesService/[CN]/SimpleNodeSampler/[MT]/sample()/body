{
  if (closed) {
    return;
  }
  HashSet<DiscoveryNode> newNodes=new HashSet<DiscoveryNode>();
  for (  DiscoveryNode node : listedNodes) {
    if (!transportService.nodeConnected(node)) {
      try {
        transportService.connectToNode(node);
      }
 catch (      Throwable e) {
        logger.debug("failed to connect to node [{}], removed from nodes list",e,node);
        continue;
      }
    }
    try {
      NodesInfoResponse nodeInfo=transportService.submitRequest(node,NodesInfoAction.NAME,Requests.nodesInfoRequest("_local"),TransportRequestOptions.options().withType(TransportRequestOptions.Type.STATE).withTimeout(pingTimeout),new FutureTransportResponseHandler<NodesInfoResponse>(){
        @Override public NodesInfoResponse newInstance(){
          return new NodesInfoResponse();
        }
      }
).txGet();
      if (!ignoreClusterName && !clusterName.equals(nodeInfo.getClusterName())) {
        logger.warn("node {} not part of the cluster {}, ignoring...",node,clusterName);
      }
 else {
        newNodes.add(node);
      }
    }
 catch (    Exception e) {
      logger.info("failed to get node info for {}, disconnecting...",e,node);
      transportService.disconnectFromNode(node);
    }
  }
  nodes=new ImmutableList.Builder<DiscoveryNode>().addAll(newNodes).build();
}
