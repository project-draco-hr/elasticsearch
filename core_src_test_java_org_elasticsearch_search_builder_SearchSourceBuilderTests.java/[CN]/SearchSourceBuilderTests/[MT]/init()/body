{
  Version version=randomBoolean() ? Version.CURRENT : VersionUtils.randomVersionBetween(random(),Version.V_2_0_0_beta1,Version.CURRENT);
  Settings settings=Settings.builder().put("node.name",AbstractQueryTestCase.class.toString()).put(Environment.PATH_HOME_SETTING.getKey(),createTempDir()).put(ScriptService.SCRIPT_AUTO_RELOAD_ENABLED_SETTING.getKey(),false).build();
  namedWriteableRegistry=new NamedWriteableRegistry();
  index=new Index(randomAsciiOfLengthBetween(1,10),"_na_");
  Settings indexSettings=Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED,version).build();
  final ThreadPool threadPool=new ThreadPool(settings);
  final ClusterService clusterService=createClusterService(threadPool);
  setState(clusterService,new ClusterState.Builder(clusterService.state()).metaData(new MetaData.Builder().put(new IndexMetaData.Builder(index.getName()).settings(indexSettings).numberOfShards(1).numberOfReplicas(0))));
  ScriptModule scriptModule=newTestScriptModule();
  List<Setting<?>> scriptSettings=scriptModule.getSettings();
  scriptSettings.add(InternalSettingsPlugin.VERSION_CREATED);
  SettingsModule settingsModule=new SettingsModule(settings,scriptSettings,Collections.emptyList());
  injector=new ModulesBuilder().add(new EnvironmentModule(new Environment(settings),threadPool),settingsModule,scriptModule,new IndicesModule(){
    @Override protected void configure(){
      bindMapperExtension();
    }
  }
,new SearchModule(settings,namedWriteableRegistry){
    @Override protected void configureSearch(){
    }
  }
,new IndexSettingsModule(index,settings),new AbstractModule(){
    @Override protected void configure(){
      bind(ClusterService.class).toProvider(Providers.of(clusterService));
      bind(CircuitBreakerService.class).to(NoneCircuitBreakerService.class);
      bind(NamedWriteableRegistry.class).toInstance(namedWriteableRegistry);
    }
  }
).createInjector();
  aggParsers=injector.getInstance(AggregatorParsers.class);
  suggesters=injector.getInstance(Suggesters.class);
  currentTypes=new String[randomIntBetween(0,5)];
  for (int i=0; i < currentTypes.length; i++) {
    String type=randomAsciiOfLengthBetween(1,10);
    currentTypes[i]=type;
  }
  indicesQueriesRegistry=injector.getInstance(IndicesQueriesRegistry.class);
  parseFieldMatcher=ParseFieldMatcher.STRICT;
}
