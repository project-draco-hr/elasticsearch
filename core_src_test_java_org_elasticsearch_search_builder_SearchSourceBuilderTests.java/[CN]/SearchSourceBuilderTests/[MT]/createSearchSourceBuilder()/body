{
  SearchSourceBuilder builder=new SearchSourceBuilder();
  if (randomBoolean()) {
    builder.from(randomIntBetween(0,10000));
  }
  if (randomBoolean()) {
    builder.size(randomIntBetween(0,10000));
  }
  if (randomBoolean()) {
    builder.explain(randomBoolean());
  }
  if (randomBoolean()) {
    builder.version(randomBoolean());
  }
  if (randomBoolean()) {
    builder.trackScores(randomBoolean());
  }
  if (randomBoolean()) {
    builder.minScore(randomFloat() * 1000);
  }
  if (randomBoolean()) {
    builder.timeout(new TimeValue(randomIntBetween(1,100),randomFrom(TimeUnit.values())));
  }
  if (randomBoolean()) {
    builder.terminateAfter(randomIntBetween(1,100000));
  }
  if (randomBoolean()) {
    int fieldsSize=randomInt(25);
    List<String> fields=new ArrayList<>(fieldsSize);
    for (int i=0; i < fieldsSize; i++) {
      fields.add(randomAsciiOfLengthBetween(5,50));
    }
    builder.fields(fields);
  }
  if (randomBoolean()) {
    int fieldDataFieldsSize=randomInt(25);
    for (int i=0; i < fieldDataFieldsSize; i++) {
      builder.fieldDataField(randomAsciiOfLengthBetween(5,50));
    }
  }
  if (randomBoolean()) {
    int scriptFieldsSize=randomInt(25);
    for (int i=0; i < scriptFieldsSize; i++) {
      if (randomBoolean()) {
        builder.scriptField(randomAsciiOfLengthBetween(5,50),new Script("foo"),randomBoolean());
      }
 else {
        builder.scriptField(randomAsciiOfLengthBetween(5,50),new Script("foo"));
      }
    }
  }
  if (randomBoolean()) {
    FetchSourceContext fetchSourceContext;
    int branch=randomInt(5);
    String[] includes=new String[randomIntBetween(0,20)];
    for (int i=0; i < includes.length; i++) {
      includes[i]=randomAsciiOfLengthBetween(5,20);
    }
    String[] excludes=new String[randomIntBetween(0,20)];
    for (int i=0; i < excludes.length; i++) {
      excludes[i]=randomAsciiOfLengthBetween(5,20);
    }
switch (branch) {
case 0:
      fetchSourceContext=new FetchSourceContext(randomBoolean());
    break;
case 1:
  fetchSourceContext=new FetchSourceContext(includes,excludes);
break;
case 2:
fetchSourceContext=new FetchSourceContext(randomAsciiOfLengthBetween(5,20),randomAsciiOfLengthBetween(5,20));
break;
case 3:
fetchSourceContext=new FetchSourceContext(true,includes,excludes);
break;
case 4:
fetchSourceContext=new FetchSourceContext(includes);
break;
case 5:
fetchSourceContext=new FetchSourceContext(randomAsciiOfLengthBetween(5,20));
break;
default :
throw new IllegalStateException();
}
builder.fetchSource(fetchSourceContext);
}
if (randomBoolean()) {
int size=randomIntBetween(0,20);
List<String> statsGroups=new ArrayList<>(size);
for (int i=0; i < size; i++) {
statsGroups.add(randomAsciiOfLengthBetween(5,20));
}
builder.stats(statsGroups);
}
if (randomBoolean()) {
int indexBoostSize=randomIntBetween(1,10);
for (int i=0; i < indexBoostSize; i++) {
builder.indexBoost(randomAsciiOfLengthBetween(5,20),randomFloat() * 10);
}
}
if (randomBoolean()) {
builder.query(QueryBuilders.termQuery(randomAsciiOfLengthBetween(5,20),randomAsciiOfLengthBetween(5,20)));
}
if (randomBoolean()) {
builder.postFilter(QueryBuilders.termQuery(randomAsciiOfLengthBetween(5,20),randomAsciiOfLengthBetween(5,20)));
}
if (randomBoolean()) {
int numSorts=randomIntBetween(1,5);
for (int i=0; i < numSorts; i++) {
int branch=randomInt(5);
switch (branch) {
case 0:
builder.sort(SortBuilders.fieldSort(randomAsciiOfLengthBetween(5,20)).order(randomFrom(SortOrder.values())));
break;
case 1:
builder.sort(SortBuilders.geoDistanceSort(randomAsciiOfLengthBetween(5,20),AbstractQueryTestCase.randomGeohash(1,12)).order(randomFrom(SortOrder.values())));
break;
case 2:
builder.sort(SortBuilders.scoreSort().order(randomFrom(SortOrder.values())));
break;
case 3:
builder.sort(SortBuilders.scriptSort(new Script("foo"),"number").order(randomFrom(SortOrder.values())));
break;
case 4:
builder.sort(randomAsciiOfLengthBetween(5,20));
break;
case 5:
builder.sort(randomAsciiOfLengthBetween(5,20),randomFrom(SortOrder.values()));
break;
}
}
}
if (randomBoolean()) {
int numSearchFrom=randomIntBetween(1,5);
XContentBuilder jsonBuilder=XContentFactory.jsonBuilder();
jsonBuilder.startObject();
jsonBuilder.startArray("search_from");
for (int i=0; i < numSearchFrom; i++) {
int branch=randomInt(8);
switch (branch) {
case 0:
jsonBuilder.value(randomInt());
break;
case 1:
jsonBuilder.value(randomFloat());
break;
case 2:
jsonBuilder.value(randomLong());
break;
case 3:
jsonBuilder.value(randomDouble());
break;
case 4:
jsonBuilder.value(randomAsciiOfLengthBetween(5,20));
break;
case 5:
jsonBuilder.value(randomBoolean());
break;
case 6:
jsonBuilder.value(randomByte());
break;
case 7:
jsonBuilder.value(randomShort());
break;
case 8:
jsonBuilder.value(new Text(randomAsciiOfLengthBetween(5,20)));
break;
}
}
jsonBuilder.endArray();
jsonBuilder.endObject();
XContentParser parser=XContentFactory.xContent(XContentType.JSON).createParser(jsonBuilder.bytes());
parser.nextToken();
parser.nextToken();
parser.nextToken();
builder.searchAfter(SearchAfterBuilder.PROTOTYPE.fromXContent(parser,null).getSortValues());
}
if (randomBoolean()) {
builder.highlighter(HighlightBuilderTests.randomHighlighterBuilder());
}
if (randomBoolean()) {
builder.suggest(new SuggestBuilder().setText(randomAsciiOfLengthBetween(1,5)).addSuggestion(SuggestBuilders.termSuggestion(randomAsciiOfLengthBetween(1,5))));
}
if (randomBoolean()) {
InnerHitsBuilder innerHitsBuilder=new InnerHitsBuilder();
InnerHit innerHit=new InnerHit();
innerHit.field(randomAsciiOfLengthBetween(5,20));
innerHitsBuilder.addNestedInnerHits(randomAsciiOfLengthBetween(5,20),randomAsciiOfLengthBetween(5,20),innerHit);
builder.innerHits(innerHitsBuilder);
}
if (randomBoolean()) {
int numRescores=randomIntBetween(1,5);
for (int i=0; i < numRescores; i++) {
builder.addRescorer(QueryRescoreBuilderTests.randomRescoreBuilder());
}
}
if (randomBoolean()) {
builder.aggregation(AggregationBuilders.avg(randomAsciiOfLengthBetween(5,20)));
}
if (true) {
XContentBuilder xContentBuilder=XContentFactory.jsonBuilder();
xContentBuilder.startObject();
xContentBuilder.field("term_vectors_fetch",randomAsciiOfLengthBetween(5,20));
xContentBuilder.endObject();
builder.ext(xContentBuilder);
}
return builder;
}
