{
  if (maxOrd <= threshold) {
    PackedInts.Mutable[] newSegmentOrdToGlobalOrdDeltas=new PackedInts.Mutable[numSegments];
    for (int i=0; i < segmentOrdToGlobalOrdDeltas.length; i++) {
      newSegmentOrdToGlobalOrdDeltas[i]=PackedInts.getMutable((int)segmentOrdToGlobalOrdDeltas[i].size(),PackedInts.bitsRequired(maxOrd),acceptableOverheadRatio);
    }
    for (int readerIndex=0; readerIndex < segmentOrdToGlobalOrdDeltas.length; readerIndex++) {
      MonotonicAppendingLongBuffer segmentOrdToGlobalOrdDelta=segmentOrdToGlobalOrdDeltas[readerIndex];
      for (long ordIndex=0; ordIndex < segmentOrdToGlobalOrdDelta.size(); ordIndex++) {
        long ordDelta=segmentOrdToGlobalOrdDelta.get(ordIndex);
        newSegmentOrdToGlobalOrdDeltas[readerIndex].set((int)ordIndex,ordDelta);
      }
    }
    PackedIntOrdinalMappingSource[] sources=new PackedIntOrdinalMappingSource[numSegments];
    for (int i=0; i < newSegmentOrdToGlobalOrdDeltas.length; i++) {
      PackedInts.Reader segmentOrdToGlobalOrdDelta=newSegmentOrdToGlobalOrdDeltas[i];
      if (segmentOrdToGlobalOrdDelta.size() == maxOrd) {
        sources[i]=null;
      }
 else {
        long ramUsed=segmentOrdToGlobalOrdDelta.ramBytesUsed();
        sources[i]=new PackedIntOrdinalMappingSource(segmentOrdToGlobalOrdDelta,ramUsed,maxOrd);
        memorySizeInBytesCounter+=ramUsed;
      }
    }
    return sources;
  }
 else {
    OrdinalMappingSource[] sources=new OrdinalMappingSource[segmentOrdToGlobalOrdDeltas.length];
    for (int i=0; i < segmentOrdToGlobalOrdDeltas.length; i++) {
      MonotonicAppendingLongBuffer segmentOrdToGlobalOrdLookup=segmentOrdToGlobalOrdDeltas[i];
      if (segmentOrdToGlobalOrdLookup.size() == maxOrd) {
        sources[i]=null;
      }
 else {
        segmentOrdToGlobalOrdLookup.freeze();
        long ramUsed=segmentOrdToGlobalOrdLookup.ramBytesUsed();
        sources[i]=new CompressedOrdinalMappingSource(segmentOrdToGlobalOrdLookup,ramUsed,maxOrd);
        memorySizeInBytesCounter+=ramUsed;
      }
    }
    return sources;
  }
}
