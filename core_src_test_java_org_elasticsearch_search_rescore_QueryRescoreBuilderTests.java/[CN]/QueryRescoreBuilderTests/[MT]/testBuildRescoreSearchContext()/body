{
  Settings indexSettings=Settings.settingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED,Version.CURRENT).build();
  Index index=new Index(randomAsciiOfLengthBetween(1,10));
  IndexSettings idxSettings=IndexSettingsModule.newIndexSettings(index,indexSettings);
  QueryShardContext mockShardContext=new QueryShardContext(idxSettings,null,null,null,null,null,null,indicesQueriesRegistry){
    @Override public MappedFieldType fieldMapper(    String name){
      StringFieldMapper.Builder builder=MapperBuilders.stringField(name);
      return builder.build(new Mapper.BuilderContext(idxSettings.getSettings(),new ContentPath(1))).fieldType();
    }
  }
;
  for (int runs=0; runs < NUMBER_OF_TESTBUILDERS; runs++) {
    RescoreBaseBuilder rescoreBuilder=randomRescoreBuilder();
    QueryRescoreContext rescoreContext=(QueryRescoreContext)rescoreBuilder.build(mockShardContext);
    XContentParser parser=createParser(rescoreBuilder);
    QueryRescoreContext parsedRescoreContext=(QueryRescoreContext)new RescoreParseElement().parseSingleRescoreContext(parser,mockShardContext);
    assertNotSame(rescoreContext,parsedRescoreContext);
    assertEquals(rescoreContext.window(),parsedRescoreContext.window());
    assertEquals(rescoreContext.query(),parsedRescoreContext.query());
    assertEquals(rescoreContext.queryWeight(),parsedRescoreContext.queryWeight(),Float.MIN_VALUE);
    assertEquals(rescoreContext.rescoreQueryWeight(),parsedRescoreContext.rescoreQueryWeight(),Float.MIN_VALUE);
    assertEquals(rescoreContext.scoreMode(),parsedRescoreContext.scoreMode());
  }
}
