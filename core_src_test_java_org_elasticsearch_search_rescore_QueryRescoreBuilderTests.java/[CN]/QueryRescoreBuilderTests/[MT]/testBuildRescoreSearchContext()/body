{
  Settings indexSettings=Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED,Version.CURRENT).build();
  IndexSettings idxSettings=IndexSettingsModule.newIndexSettings(randomAsciiOfLengthBetween(1,10),indexSettings);
  QueryShardContext mockShardContext=new QueryShardContext(idxSettings,null,null,null,null,null,indicesQueriesRegistry,null,null){
    @Override public MappedFieldType fieldMapper(    String name){
      TextFieldMapper.Builder builder=new TextFieldMapper.Builder(name);
      return builder.build(new Mapper.BuilderContext(idxSettings.getSettings(),new ContentPath(1))).fieldType();
    }
  }
;
  for (int runs=0; runs < NUMBER_OF_TESTBUILDERS; runs++) {
    QueryRescorerBuilder rescoreBuilder=randomRescoreBuilder();
    QueryRescoreContext rescoreContext=rescoreBuilder.build(mockShardContext);
    int expectedWindowSize=rescoreBuilder.windowSize() == null ? QueryRescoreContext.DEFAULT_WINDOW_SIZE : rescoreBuilder.windowSize().intValue();
    assertEquals(expectedWindowSize,rescoreContext.window());
    Query expectedQuery=QueryBuilder.rewriteQuery(rescoreBuilder.getRescoreQuery(),mockShardContext).toQuery(mockShardContext);
    assertEquals(expectedQuery,rescoreContext.query());
    assertEquals(rescoreBuilder.getQueryWeight(),rescoreContext.queryWeight(),Float.MIN_VALUE);
    assertEquals(rescoreBuilder.getRescoreQueryWeight(),rescoreContext.rescoreQueryWeight(),Float.MIN_VALUE);
    assertEquals(rescoreBuilder.getScoreMode(),rescoreContext.scoreMode());
  }
}
