{
  for (int runs=0; runs < NUMBER_OF_TESTBUILDERS; runs++) {
    RescoreBaseBuilder firstBuilder=randomRescoreBuilder();
    assertFalse("rescore builder is equal to null",firstBuilder.equals(null));
    assertFalse("rescore builder is equal to incompatible type",firstBuilder.equals(""));
    assertTrue("rescore builder is not equal to self",firstBuilder.equals(firstBuilder));
    assertThat("same rescore builder's hashcode returns different values if called multiple times",firstBuilder.hashCode(),equalTo(firstBuilder.hashCode()));
    assertThat("different rescore builder should not be equal",mutate(firstBuilder),not(equalTo(firstBuilder)));
    RescoreBaseBuilder secondBuilder=serializedCopy(firstBuilder);
    assertTrue("rescore builder is not equal to self",secondBuilder.equals(secondBuilder));
    assertTrue("rescore builder is not equal to its copy",firstBuilder.equals(secondBuilder));
    assertTrue("equals is not symmetric",secondBuilder.equals(firstBuilder));
    assertThat("rescore builder copy's hashcode is different from original hashcode",secondBuilder.hashCode(),equalTo(firstBuilder.hashCode()));
    RescoreBaseBuilder thirdBuilder=serializedCopy(secondBuilder);
    assertTrue("rescore builder is not equal to self",thirdBuilder.equals(thirdBuilder));
    assertTrue("rescore builder is not equal to its copy",secondBuilder.equals(thirdBuilder));
    assertThat("rescore builder copy's hashcode is different from original hashcode",secondBuilder.hashCode(),equalTo(thirdBuilder.hashCode()));
    assertTrue("equals is not transitive",firstBuilder.equals(thirdBuilder));
    assertThat("rescore builder copy's hashcode is different from original hashcode",firstBuilder.hashCode(),equalTo(thirdBuilder.hashCode()));
    assertTrue("equals is not symmetric",thirdBuilder.equals(secondBuilder));
    assertTrue("equals is not symmetric",thirdBuilder.equals(firstBuilder));
  }
}
