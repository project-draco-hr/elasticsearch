{
  if (subsetFreq < 0 || subsetSize < 0 || supersetFreq < 0 || supersetSize < 0) {
    throw new ElasticsearchIllegalArgumentException("Frequencies of subset and superset must be positive in MutualInformation.getScore()");
  }
  if (subsetFreq > subsetSize) {
    throw new ElasticsearchIllegalArgumentException("subsetFreq > subsetSize, in MutualInformation.score(..)");
  }
  if (supersetFreq > supersetSize) {
    throw new ElasticsearchIllegalArgumentException("supersetFreq > supersetSize, in MutualInformation.score(..)");
  }
  if (backgroundIsSuperset) {
    if (subsetFreq > supersetFreq) {
      throw new ElasticsearchIllegalArgumentException("subsetFreq > supersetFreq" + SCORE_ERROR_MESSAGE);
    }
    if (subsetSize > supersetSize) {
      throw new ElasticsearchIllegalArgumentException("subsetSize > supersetSize" + SCORE_ERROR_MESSAGE);
    }
    if (supersetFreq - subsetFreq > supersetSize - subsetSize) {
      throw new ElasticsearchIllegalArgumentException("supersetFreq - subsetFreq > supersetSize - subsetSize" + SCORE_ERROR_MESSAGE);
    }
  }
  double N00, N01, N10, N11, N0_, N1_, N_0, N_1, N;
  if (backgroundIsSuperset) {
    N00=supersetSize - supersetFreq - (subsetSize - subsetFreq);
    N01=(subsetSize - subsetFreq);
    N10=supersetFreq - subsetFreq;
    N11=subsetFreq;
    N0_=supersetSize - supersetFreq;
    N1_=supersetFreq;
    N_0=supersetSize - subsetSize;
    N_1=subsetSize;
    N=supersetSize;
  }
 else {
    N00=supersetSize - supersetFreq;
    N01=subsetSize - subsetFreq;
    N10=supersetFreq;
    N11=subsetFreq;
    N0_=supersetSize - supersetFreq + subsetSize - subsetFreq;
    N1_=supersetFreq + subsetFreq;
    N_0=supersetSize;
    N_1=subsetSize;
    N=supersetSize + subsetSize;
  }
  double score=(getMITerm(N00,N0_,N_0,N) + getMITerm(N01,N0_,N_1,N) + getMITerm(N10,N1_,N_0,N)+ getMITerm(N11,N1_,N_1,N)) / log2;
  if (Double.isNaN(score)) {
    score=-1.0 * Float.MAX_VALUE;
  }
  if (!includeNegatives && N11 / N_1 < N10 / N_0) {
    score=-1.0 * Double.MAX_VALUE;
  }
  return score;
}
