{
  ClusterState state=client().admin().cluster().prepareState().get().getState();
  GroupShardsIterator shardIterators=state.getRoutingNodes().getRoutingTable().activePrimaryShardsGrouped(new String[]{"test"},false);
  List<ShardIterator> iterators=Lists.newArrayList(shardIterators);
  ShardIterator shardIterator=RandomPicks.randomFrom(getRandom(),iterators);
  ShardRouting shardRouting=shardIterator.nextOrNull();
  assertNotNull(shardRouting);
  assertTrue(shardRouting.primary());
  assertTrue(shardRouting.assignedToNode());
  String nodeId=shardRouting.currentNodeId();
  NodesStatsResponse nodeStatses=client().admin().cluster().prepareNodesStats(nodeId).setFs(true).get();
  Set<Path> files=new TreeSet<>();
  for (  FsStats.Info info : nodeStatses.getNodes()[0].getFs()) {
    String path=info.getPath();
    final String relativeDataLocationPath="indices/test/" + Integer.toString(shardRouting.getId()) + "/translog";
    Path file=PathUtils.get(path).resolve(relativeDataLocationPath);
    logger.info("--> path: {}",file);
    try (DirectoryStream<Path> stream=Files.newDirectoryStream(file)){
      for (      Path item : stream) {
        logger.info("--> File: {}",item);
        if (Files.isRegularFile(item) && item.getFileName().toString().startsWith("translog-")) {
          files.add(item);
        }
      }
    }
   }
  Path fileToCorrupt=null;
  if (!files.isEmpty()) {
    int corruptions=randomIntBetween(5,20);
    for (int i=0; i < corruptions; i++) {
      fileToCorrupt=RandomPicks.randomFrom(getRandom(),files);
      try (FileChannel raf=FileChannel.open(fileToCorrupt,StandardOpenOption.READ,StandardOpenOption.WRITE)){
        raf.position(randomIntBetween(0,(int)Math.min(Integer.MAX_VALUE,raf.size() - 1)));
        long filePointer=raf.position();
        ByteBuffer bb=ByteBuffer.wrap(new byte[1]);
        raf.read(bb);
        bb.flip();
        byte oldValue=bb.get(0);
        byte newValue=(byte)(oldValue + 1);
        bb.put(0,newValue);
        raf.position(filePointer);
        raf.write(bb);
        logger.info("--> corrupting file {} --  flipping at position {} from {} to {} file: {}",fileToCorrupt,filePointer,Integer.toHexString(oldValue),Integer.toHexString(newValue),fileToCorrupt);
      }
     }
  }
  assertThat("no file corrupted",fileToCorrupt,notNullValue());
}
