{
  Item[] likeItems=new Item[this.likeItems.length];
  for (int i=0; i < likeItems.length; i++) {
    likeItems[i]=new Item(this.likeItems[i]);
  }
  Item[] unlikeItems=new Item[this.unlikeItems.length];
  for (int i=0; i < unlikeItems.length; i++) {
    unlikeItems[i]=new Item(this.unlikeItems[i]);
  }
  MoreLikeThisQuery mltQuery=new MoreLikeThisQuery();
  mltQuery.setSimilarity(context.getSearchSimilarity());
  mltQuery.setMaxQueryTerms(maxQueryTerms);
  mltQuery.setMinTermFrequency(minTermFreq);
  mltQuery.setMinDocFreq(minDocFreq);
  mltQuery.setMaxDocFreq(maxDocFreq);
  mltQuery.setMinWordLen(minWordLength);
  mltQuery.setMaxWordLen(maxWordLength);
  mltQuery.setMinimumShouldMatch(minimumShouldMatch);
  if (stopWords != null) {
    mltQuery.setStopWords(new HashSet<>(Arrays.asList(stopWords)));
  }
  if (boostTerms != 0) {
    mltQuery.setBoostTerms(true);
    mltQuery.setBoostTermsFactor(boostTerms);
  }
  Analyzer analyzerObj=context.getIndexAnalyzers().get(analyzer);
  if (analyzerObj == null) {
    analyzerObj=context.getMapperService().searchAnalyzer();
  }
  mltQuery.setAnalyzer(analyzerObj);
  boolean useDefaultField=(fields == null);
  List<String> moreLikeFields=new ArrayList<>();
  if (useDefaultField) {
    moreLikeFields=Collections.singletonList(context.defaultField());
  }
 else {
    for (    String field : fields) {
      MappedFieldType fieldType=context.fieldMapper(field);
      if (fieldType != null && SUPPORTED_FIELD_TYPES.contains(fieldType.getClass()) == false) {
        if (failOnUnsupportedField) {
          throw new IllegalArgumentException("more_like_this only supports text/keyword fields: [" + field + "]");
        }
 else {
          continue;
        }
      }
      moreLikeFields.add(fieldType == null ? field : fieldType.name());
    }
  }
  if (moreLikeFields.isEmpty()) {
    return null;
  }
  mltQuery.setMoreLikeFields(moreLikeFields.toArray(new String[moreLikeFields.size()]));
  if (likeTexts.length > 0) {
    mltQuery.setLikeText(likeTexts);
  }
  if (unlikeTexts.length > 0) {
    mltQuery.setUnlikeText(unlikeTexts);
  }
  if (likeItems.length > 0) {
    return handleItems(context,mltQuery,likeItems,unlikeItems,include,moreLikeFields,useDefaultField);
  }
 else {
    return mltQuery;
  }
}
