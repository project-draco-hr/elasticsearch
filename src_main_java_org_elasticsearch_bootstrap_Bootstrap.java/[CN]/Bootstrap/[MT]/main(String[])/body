{
  System.setProperty("es.logger.prefix","");
  bootstrap=new Bootstrap();
  final String pidFile=System.getProperty("es.pidfile",System.getProperty("es-pidfile"));
  if (pidFile != null) {
    try {
      File fPidFile=new File(pidFile);
      if (fPidFile.getParentFile() != null) {
        FileSystemUtils.mkdirs(fPidFile.getParentFile());
      }
      RandomAccessFile rafPidFile=new RandomAccessFile(fPidFile,"rw");
      rafPidFile.writeBytes(Long.toString(JvmInfo.jvmInfo().pid()) + "\n");
      rafPidFile.close();
      fPidFile.deleteOnExit();
    }
 catch (    Exception e) {
      String errorMessage=buildErrorMessage("pid",e);
      System.err.println(errorMessage);
      System.err.flush();
      System.exit(3);
    }
  }
  boolean foreground=System.getProperty("es.foreground",System.getProperty("es-foreground")) != null;
  if (System.getProperty("wrapper.service","XXX").equalsIgnoreCase("true")) {
    foreground=false;
  }
  Tuple<Settings,Environment> tuple=null;
  try {
    tuple=initialSettings();
    setupLogging(tuple);
  }
 catch (  Exception e) {
    String errorMessage=buildErrorMessage("Setup",e);
    System.err.println(errorMessage);
    System.err.flush();
    System.exit(3);
  }
  if (System.getProperty("es.max-open-files","false").equals("true")) {
    ESLogger logger=Loggers.getLogger(Bootstrap.class);
    logger.info("max_open_files [{}]",FileSystemUtils.maxOpenFiles(new File(tuple.v2().workFile(),"open_files")));
  }
  if (JvmInfo.jvmInfo().vmName().toLowerCase().contains("client")) {
    ESLogger logger=Loggers.getLogger(Bootstrap.class);
    logger.warn("jvm uses the client vm, make sure to run `java` with the server vm for best performance by adding `-server` to the command line");
  }
  String stage="Initialization";
  try {
    if (!foreground) {
      Loggers.disableConsoleLogging();
      System.out.close();
    }
    bootstrap.setup(true,tuple);
    stage="Startup";
    bootstrap.start();
    if (!foreground) {
      System.err.close();
    }
    keepAliveLatch=new CountDownLatch(1);
    Runtime.getRuntime().addShutdownHook(new Thread(){
      @Override public void run(){
        keepAliveLatch.countDown();
      }
    }
);
    keepAliveThread=new Thread(new Runnable(){
      @Override public void run(){
        try {
          keepAliveLatch.await();
        }
 catch (        InterruptedException e) {
        }
      }
    }
,"es[keepAlive]");
    keepAliveThread.setDaemon(false);
    keepAliveThread.start();
  }
 catch (  Throwable e) {
    ESLogger logger=Loggers.getLogger(Bootstrap.class);
    if (bootstrap.node != null) {
      logger=Loggers.getLogger(Bootstrap.class,bootstrap.node.settings().get("name"));
    }
    String errorMessage=buildErrorMessage(stage,e);
    if (foreground) {
      logger.error(errorMessage);
    }
 else {
      System.err.println(errorMessage);
      System.err.flush();
    }
    Loggers.disableConsoleLogging();
    if (logger.isDebugEnabled()) {
      logger.debug("Exception",e);
    }
    System.exit(3);
  }
}
