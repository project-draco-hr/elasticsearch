{
  System.setProperty("es.logger.prefix","");
  bootstrap=new Bootstrap();
  final String pidFile=System.getProperty("es.pidfile",System.getProperty("es-pidfile"));
  if (pidFile != null) {
    try {
      PidFile.create(PathUtils.get(pidFile),true);
    }
 catch (    Exception e) {
      String errorMessage=buildErrorMessage("pid",e);
      sysError(errorMessage,true);
      System.exit(3);
    }
  }
  boolean foreground=System.getProperty("es.foreground",System.getProperty("es-foreground")) != null;
  if (System.getProperty("wrapper.service","XXX").equalsIgnoreCase("true")) {
    foreground=false;
  }
  Settings settings=null;
  Environment environment=null;
  try {
    Tuple<Settings,Environment> tuple=initialSettings();
    settings=tuple.v1();
    environment=tuple.v2();
    setupLogging(settings,environment);
  }
 catch (  Exception e) {
    String errorMessage=buildErrorMessage("Setup",e);
    sysError(errorMessage,true);
    System.exit(3);
  }
  if (System.getProperty("es.max-open-files","false").equals("true")) {
    ESLogger logger=Loggers.getLogger(Bootstrap.class);
    logger.info("max_open_files [{}]",JmxProcessProbe.getMaxFileDescriptorCount());
  }
  if (JvmInfo.jvmInfo().getVmName().toLowerCase(Locale.ROOT).contains("client")) {
    ESLogger logger=Loggers.getLogger(Bootstrap.class);
    logger.warn("jvm uses the client vm, make sure to run `java` with the server vm for best performance by adding `-server` to the command line");
  }
  String stage="Initialization";
  try {
    if (!foreground) {
      Loggers.disableConsoleLogging();
      closeSystOut();
    }
    JVMCheck.check();
    keepAliveLatch=new CountDownLatch(1);
    Runtime.getRuntime().addShutdownHook(new Thread(){
      @Override public void run(){
        keepAliveLatch.countDown();
      }
    }
);
    bootstrap.setup(true,settings,environment);
    stage="Startup";
    bootstrap.start();
    if (!foreground) {
      closeSysError();
    }
    keepAliveThread=new Thread(new Runnable(){
      @Override public void run(){
        try {
          keepAliveLatch.await();
        }
 catch (        InterruptedException e) {
        }
      }
    }
,"elasticsearch[keepAlive/" + Version.CURRENT + "]");
    keepAliveThread.setDaemon(false);
    keepAliveThread.start();
  }
 catch (  Throwable e) {
    ESLogger logger=Loggers.getLogger(Bootstrap.class);
    if (bootstrap.node != null) {
      logger=Loggers.getLogger(Bootstrap.class,bootstrap.node.settings().get("name"));
    }
    String errorMessage=buildErrorMessage(stage,e);
    if (foreground) {
      sysError(errorMessage,true);
      Loggers.disableConsoleLogging();
    }
    logger.error("Exception",e);
    System.exit(3);
  }
}
