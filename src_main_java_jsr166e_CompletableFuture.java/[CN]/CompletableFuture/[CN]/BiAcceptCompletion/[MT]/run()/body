{
  final CompletableFuture<? extends T> a;
  final CompletableFuture<? extends U> b;
  final BiAction<? super T,? super U> fn;
  final CompletableFuture<Void> dst;
  Object r, s;
  T t;
  U u;
  Throwable ex;
  if ((dst=this.dst) != null && (fn=this.fn) != null && (a=this.src) != null && (r=a.result) != null && (b=this.snd) != null && (s=b.result) != null && compareAndSet(0,1)) {
    if (r instanceof AltResult) {
      ex=((AltResult)r).ex;
      t=null;
    }
 else {
      ex=null;
      @SuppressWarnings("unchecked") T tr=(T)r;
      t=tr;
    }
    if (ex != null)     u=null;
 else     if (s instanceof AltResult) {
      ex=((AltResult)s).ex;
      u=null;
    }
 else {
      @SuppressWarnings("unchecked") U us=(U)s;
      u=us;
    }
    Executor e=executor;
    if (ex == null) {
      try {
        if (e != null)         e.execute(new AsyncBiAccept<T,U>(t,u,fn,dst));
 else         fn.accept(t,u);
      }
 catch (      Throwable rex) {
        ex=rex;
      }
    }
    if (e == null || ex != null)     dst.internalComplete(null,ex);
  }
}
