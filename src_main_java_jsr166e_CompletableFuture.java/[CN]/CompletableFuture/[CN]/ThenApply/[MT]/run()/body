{
  final CompletableFuture<? extends T> a;
  final Fun<? super T,? extends U> fn;
  final CompletableFuture<U> dst;
  Object r;
  T t;
  Throwable ex;
  if ((dst=this.dst) != null && (fn=this.fn) != null && (a=this.src) != null && (r=a.result) != null && compareAndSet(0,1)) {
    if (r instanceof AltResult) {
      ex=((AltResult)r).ex;
      t=null;
    }
 else {
      ex=null;
      @SuppressWarnings("unchecked") T tr=(T)r;
      t=tr;
    }
    Executor e=executor;
    U u=null;
    if (ex == null) {
      try {
        if (e != null)         e.execute(new AsyncApply<T,U>(t,fn,dst));
 else         u=fn.apply(t);
      }
 catch (      Throwable rex) {
        ex=rex;
      }
    }
    if (e == null || ex != null)     dst.internalComplete(u,ex);
  }
}
