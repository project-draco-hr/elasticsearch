{
  int len=cfs.length;
  if (len > 1)   return anyTree(cfs,0,len - 1);
 else {
    CompletableFuture<Object> dst=new CompletableFuture<Object>();
    CompletableFuture<?> f;
    if (len == 0)     ;
 else     if ((f=cfs[0]) == null)     throw new NullPointerException();
 else {
      ThenCopy<Object> d=null;
      CompletionNode p=null;
      Object r;
      while ((r=f.result) == null) {
        if (d == null)         d=new ThenCopy<Object>(f,dst);
 else         if (p == null)         p=new CompletionNode(d);
 else         if (UNSAFE.compareAndSwapObject(f,COMPLETIONS,p.next=f.completions,p))         break;
      }
      if (r != null && (d == null || d.compareAndSet(0,1))) {
        Throwable ex;
        Object t;
        if (r instanceof AltResult) {
          ex=((AltResult)r).ex;
          t=null;
        }
 else {
          ex=null;
          t=r;
        }
        dst.internalComplete(t,ex);
      }
      f.helpPostComplete();
    }
    return dst;
  }
}
