{
  Snippet[] snippets=new Snippet[passages.length];
  int pos;
  for (int j=0; j < passages.length; j++) {
    Passage passage=passages[j];
    StringBuilder sb=new StringBuilder();
    pos=passage.startOffset;
    for (int i=0; i < passage.numMatches; i++) {
      int start=passage.matchStarts[i];
      int end=passage.matchEnds[i];
      if (start > pos) {
        append(sb,content,pos,start);
      }
      if (end > pos) {
        sb.append(preTag);
        append(sb,content,Math.max(pos,start),end);
        sb.append(postTag);
        pos=end;
      }
    }
    append(sb,content,pos,Math.max(pos,passage.endOffset));
    if (sb.charAt(sb.length() - 1) == HighlightUtils.PARAGRAPH_SEPARATOR) {
      sb.deleteCharAt(sb.length() - 1);
    }
    snippets[j]=new Snippet(sb.toString().trim(),passage.score,passage.numMatches > 0);
  }
  return snippets;
}
