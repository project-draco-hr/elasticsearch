{
  boolean http10=request.getProtocolVersion().equals(HttpVersion.HTTP_1_0);
  boolean close=HttpHeaders.Values.CLOSE.equalsIgnoreCase(request.getHeader(HttpHeaders.Names.CONNECTION)) || (http10 && !HttpHeaders.Values.KEEP_ALIVE.equalsIgnoreCase(request.getHeader(HttpHeaders.Names.CONNECTION)));
  HttpResponseStatus status=getStatus(response.status());
  org.elasticsearch.common.netty.handler.codec.http.HttpResponse resp;
  if (http10) {
    resp=new DefaultHttpResponse(HttpVersion.HTTP_1_0,status);
    if (!close) {
      resp.addHeader(HttpHeaders.Names.CONNECTION,"Keep-Alive");
    }
  }
 else {
    resp=new DefaultHttpResponse(HttpVersion.HTTP_1_1,status);
  }
  resp.addHeader("Access-Control-Allow-Origin","*");
  if (request.getMethod() == HttpMethod.OPTIONS) {
    resp.addHeader("Access-Control-Max-Age",1728000);
    resp.addHeader("Access-Control-Allow-Methods","PUT, DELETE");
    resp.addHeader("Access-Control-Allow-Headers","X-Requested-With");
  }
  ChannelFutureListener releaseContentListener=null;
  ChannelBuffer buf;
  try {
    if (response instanceof XContentRestResponse) {
      XContentBuilder builder=((XContentRestResponse)response).builder();
      if (builder.payload() instanceof CachedStreamOutput.Entry) {
        releaseContentListener=new NettyTransport.CacheFutureListener((CachedStreamOutput.Entry)builder.payload());
        buf=ChannelBuffers.wrappedBuffer(builder.unsafeBytes(),0,builder.unsafeBytesLength());
      }
 else       if (response.contentThreadSafe()) {
        buf=ChannelBuffers.wrappedBuffer(response.content(),0,response.contentLength());
      }
 else {
        buf=ChannelBuffers.copiedBuffer(response.content(),0,response.contentLength());
      }
    }
 else {
      if (response.contentThreadSafe()) {
        buf=ChannelBuffers.wrappedBuffer(response.content(),0,response.contentLength());
      }
 else {
        buf=ChannelBuffers.copiedBuffer(response.content(),0,response.contentLength());
      }
    }
  }
 catch (  IOException e) {
    throw new HttpException("Failed to convert response to bytes",e);
  }
  if (response.prefixContent() != null || response.suffixContent() != null) {
    ChannelBuffer prefixBuf=ChannelBuffers.EMPTY_BUFFER;
    if (response.prefixContent() != null) {
      prefixBuf=ChannelBuffers.copiedBuffer(response.prefixContent(),0,response.prefixContentLength());
    }
    ChannelBuffer suffixBuf=ChannelBuffers.EMPTY_BUFFER;
    if (response.suffixContent() != null) {
      suffixBuf=ChannelBuffers.copiedBuffer(response.suffixContent(),0,response.suffixContentLength());
    }
    buf=ChannelBuffers.wrappedBuffer(prefixBuf,buf,suffixBuf);
  }
  resp.setContent(buf);
  resp.setHeader(HttpHeaders.Names.CONTENT_TYPE,response.contentType());
  resp.setHeader(HttpHeaders.Names.CONTENT_LENGTH,String.valueOf(buf.readableBytes()));
  String cookieString=request.getHeader(HttpHeaders.Names.COOKIE);
  if (cookieString != null) {
    CookieDecoder cookieDecoder=new CookieDecoder();
    Set<Cookie> cookies=cookieDecoder.decode(cookieString);
    if (!cookies.isEmpty()) {
      CookieEncoder cookieEncoder=new CookieEncoder(true);
      for (      Cookie cookie : cookies) {
        cookieEncoder.addCookie(cookie);
      }
      resp.addHeader(HttpHeaders.Names.SET_COOKIE,cookieEncoder.encode());
    }
  }
  ChannelFuture future=channel.write(resp);
  if (releaseContentListener != null) {
    future.addListener(releaseContentListener);
  }
  if (close) {
    future.addListener(ChannelFutureListener.CLOSE);
  }
}
