{
  Matcher matcher=Pattern.compile("[^\\[\\]>]+").matcher("");
  String name;
  Random rand=random();
  int len=randomIntBetween(1,5);
  char[] word=new char[len];
  while (true) {
    for (int i=0; i < word.length; i++) {
      word[i]=(char)rand.nextInt(127);
    }
    name=String.valueOf(word);
    if (!matcher.reset(name).matches()) {
      break;
    }
  }
  String source=JsonXContent.contentBuilder().startObject().startObject(name).startObject("filter").startObject("range").startObject("stock").field("gt",0).endObject().endObject().endObject().endObject().endObject().string();
  try {
    XContentParser parser=XContentFactory.xContent(source).createParser(source);
    QueryParseContext parseContext=new QueryParseContext(queriesRegistry,parser,parseFieldMatcher);
    assertSame(XContentParser.Token.START_OBJECT,parser.nextToken());
    aggParsers.parseAggregators(parseContext);
    fail();
  }
 catch (  ParsingException e) {
    assertThat(e.toString(),containsString("Invalid aggregation name [" + name + "]"));
  }
}
