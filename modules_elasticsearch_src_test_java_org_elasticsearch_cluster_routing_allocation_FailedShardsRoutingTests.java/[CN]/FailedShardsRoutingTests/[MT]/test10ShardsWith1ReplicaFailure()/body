{
  ShardsAllocation strategy=new ShardsAllocation(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries",10).build());
  logger.info("Building initial routing table");
  MetaData metaData=newMetaDataBuilder().put(newIndexMetaDataBuilder("test").numberOfShards(10).numberOfReplicas(1)).build();
  RoutingTable routingTable=routingTable().add(indexRoutingTable("test").initializeEmpty(metaData.index("test"))).build();
  ClusterState clusterState=newClusterStateBuilder().metaData(metaData).routingTable(routingTable).build();
  assertThat(routingTable.index("test").shards().size(),equalTo(10));
  for (int i=0; i < routingTable.index("test").shards().size(); i++) {
    assertThat(routingTable.index("test").shard(i).size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).shards().size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).shards().get(0).state(),equalTo(UNASSIGNED));
    assertThat(routingTable.index("test").shard(i).shards().get(1).state(),equalTo(UNASSIGNED));
    assertThat(routingTable.index("test").shard(i).shards().get(0).currentNodeId(),nullValue());
    assertThat(routingTable.index("test").shard(i).shards().get(1).currentNodeId(),nullValue());
  }
  logger.info("Adding one node and performing rerouting");
  clusterState=newClusterStateBuilder().state(clusterState).nodes(newNodesBuilder().put(newNode("node1"))).build();
  RoutingTable prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(10));
  for (int i=0; i < routingTable.index("test").shards().size(); i++) {
    assertThat(routingTable.index("test").shard(i).size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).shards().size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).primaryShard().state(),equalTo(INITIALIZING));
    assertThat(routingTable.index("test").shard(i).primaryShard().currentNodeId(),equalTo("node1"));
    assertThat(routingTable.index("test").shard(i).replicaShards().size(),equalTo(1));
    assertThat(routingTable.index("test").shard(i).replicaShards().get(0).state(),equalTo(UNASSIGNED));
    assertThat(routingTable.index("test").shard(i).replicaShards().get(0).currentNodeId(),nullValue());
  }
  logger.info("Add another node and perform rerouting");
  clusterState=newClusterStateBuilder().state(clusterState).nodes(newNodesBuilder().putAll(clusterState.nodes()).put(newNode("node2"))).build();
  prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable == routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(10));
  for (int i=0; i < routingTable.index("test").shards().size(); i++) {
    assertThat(routingTable.index("test").shard(i).size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).shards().size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).primaryShard().state(),equalTo(INITIALIZING));
    assertThat(routingTable.index("test").shard(i).primaryShard().currentNodeId(),equalTo("node1"));
    assertThat(routingTable.index("test").shard(i).replicaShards().size(),equalTo(1));
    assertThat(routingTable.index("test").shard(i).replicaShards().get(0).state(),equalTo(UNASSIGNED));
    assertThat(routingTable.index("test").shard(i).replicaShards().get(0).currentNodeId(),nullValue());
  }
  logger.info("Start the primary shards");
  RoutingNodes routingNodes=clusterState.routingNodes();
  prevRoutingTable=routingTable;
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING)).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(10));
  for (int i=0; i < routingTable.index("test").shards().size(); i++) {
    assertThat(routingTable.index("test").shard(i).size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).shards().size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).primaryShard().state(),equalTo(STARTED));
    assertThat(routingTable.index("test").shard(i).primaryShard().currentNodeId(),anyOf(equalTo("node1"),equalTo("node2")));
    assertThat(routingTable.index("test").shard(i).replicaShards().size(),equalTo(1));
    assertThat(routingTable.index("test").shard(i).replicaShards().get(0).state(),equalTo(INITIALIZING));
    assertThat(routingTable.index("test").shard(i).replicaShards().get(0).currentNodeId(),anyOf(equalTo("node2"),equalTo("node1")));
  }
  logger.info("Reroute, nothing should change");
  prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState).routingTable();
  assertThat(prevRoutingTable == routingTable,equalTo(true));
  logger.info("Fail backup shards on node2");
  routingNodes=clusterState.routingNodes();
  prevRoutingTable=routingTable;
  List<MutableShardRouting> failedShards=routingNodes.node("node2").shardsWithState(INITIALIZING);
  routingTable=strategy.applyFailedShards(clusterState,failedShards).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  routingNodes=clusterState.routingNodes();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(10));
  for (int i=0; i < routingTable.index("test").shards().size(); i++) {
    assertThat(routingTable.index("test").shard(i).size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).shards().size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).primaryShard().state(),equalTo(STARTED));
    assertThat(routingTable.index("test").shard(i).primaryShard().currentNodeId(),equalTo("node1"));
    assertThat(routingTable.index("test").shard(i).replicaShards().size(),equalTo(1));
    assertThat(routingTable.index("test").shard(i).replicaShards().get(0).state(),equalTo(UNASSIGNED));
    assertThat(routingTable.index("test").shard(i).replicaShards().get(0).currentNodeId(),nullValue());
  }
  routingTable=strategy.applyFailedShards(clusterState,failedShards).routingTable();
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  routingNodes=clusterState.routingNodes();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(10));
  for (int i=0; i < routingTable.index("test").shards().size(); i++) {
    assertThat(routingTable.index("test").shard(i).size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).shards().size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).primaryShard().state(),equalTo(STARTED));
    assertThat(routingTable.index("test").shard(i).primaryShard().currentNodeId(),equalTo("node1"));
    assertThat(routingTable.index("test").shard(i).replicaShards().size(),equalTo(1));
    assertThat(routingTable.index("test").shard(i).replicaShards().get(0).state(),equalTo(UNASSIGNED));
    assertThat(routingTable.index("test").shard(i).replicaShards().get(0).currentNodeId(),nullValue());
  }
}
