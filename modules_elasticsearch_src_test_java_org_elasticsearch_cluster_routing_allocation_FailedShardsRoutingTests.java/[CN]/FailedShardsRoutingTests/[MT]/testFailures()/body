{
  ShardsAllocation strategy=new ShardsAllocation();
  logger.info("Building initial routing table");
  MetaData metaData=newMetaDataBuilder().put(newIndexMetaDataBuilder("test").numberOfShards(3).numberOfReplicas(1)).build();
  RoutingTable routingTable=routingTable().add(indexRoutingTable("test").initializeEmpty(metaData.index("test"))).build();
  ClusterState clusterState=newClusterStateBuilder().metaData(metaData).routingTable(routingTable).build();
  logger.info("Adding two nodes and performing rerouting");
  clusterState=newClusterStateBuilder().state(clusterState).nodes(newNodesBuilder().put(newNode("node1")).put(newNode("node2"))).build();
  RoutingTable prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState);
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  logger.info("Start the shards (primaries)");
  RoutingNodes routingNodes=routingTable.routingNodes(clusterState.metaData());
  prevRoutingTable=routingTable;
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(3));
  for (int i=0; i < routingTable.index("test").shards().size(); i++) {
    assertThat(routingTable.index("test").shard(i).size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).shards().size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).primaryShard().state(),equalTo(STARTED));
    assertThat(routingTable.index("test").shard(i).primaryShard().currentNodeId(),anyOf(equalTo("node1"),equalTo("node2")));
    assertThat(routingTable.index("test").shard(i).replicaShards().size(),equalTo(1));
    assertThat(routingTable.index("test").shard(i).replicaShards().get(0).state(),equalTo(INITIALIZING));
    assertThat(routingTable.index("test").shard(i).replicaShards().get(0).currentNodeId(),anyOf(equalTo("node2"),equalTo("node1")));
  }
  logger.info("Start the shards (backups)");
  routingNodes=routingTable.routingNodes(clusterState.metaData());
  prevRoutingTable=routingTable;
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.shardsWithState(INITIALIZING));
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(3));
  for (int i=0; i < routingTable.index("test").shards().size(); i++) {
    assertThat(routingTable.index("test").shard(i).size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).shards().size(),equalTo(2));
    assertThat(routingTable.index("test").shard(i).primaryShard().state(),equalTo(STARTED));
    assertThat(routingTable.index("test").shard(i).primaryShard().currentNodeId(),anyOf(equalTo("node1"),equalTo("node2")));
    assertThat(routingTable.index("test").shard(i).replicaShards().size(),equalTo(1));
    assertThat(routingTable.index("test").shard(i).replicaShards().get(0).state(),equalTo(STARTED));
    assertThat(routingTable.index("test").shard(i).replicaShards().get(0).currentNodeId(),anyOf(equalTo("node2"),equalTo("node1")));
  }
  logger.info("Adding third node and reroute");
  clusterState=newClusterStateBuilder().state(clusterState).nodes(newNodesBuilder().putAll(clusterState.nodes()).put(newNode("node3"))).build();
  prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState);
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  routingNodes=routingTable.routingNodes(metaData);
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(3));
  assertThat(routingNodes.node("node1").numberOfShardsWithState(STARTED,RELOCATING),equalTo(3));
  assertThat(routingNodes.node("node1").numberOfShardsWithState(STARTED),lessThan(3));
  assertThat(routingNodes.node("node2").numberOfShardsWithState(STARTED,RELOCATING),equalTo(3));
  assertThat(routingNodes.node("node2").numberOfShardsWithState(STARTED),lessThan(3));
  assertThat(routingNodes.node("node3").numberOfShardsWithState(INITIALIZING),equalTo(2));
  logger.info("Fail the shards on node 3");
  routingNodes=routingTable.routingNodes(clusterState.metaData());
  prevRoutingTable=routingTable;
  routingTable=strategy.applyFailedShards(clusterState,routingNodes.node("node3").shardsWithState(INITIALIZING));
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  routingNodes=routingTable.routingNodes(metaData);
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(3));
  assertThat(routingNodes.node("node1").numberOfShardsWithState(STARTED),equalTo(3));
  assertThat(routingNodes.node("node2").numberOfShardsWithState(STARTED),equalTo(3));
  assertThat(routingNodes.node("node3"),nullValue());
  logger.info("Do another reroute, should try and assign again to node 3");
  prevRoutingTable=routingTable;
  routingTable=strategy.reroute(clusterState);
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  routingNodes=routingTable.routingNodes(metaData);
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(3));
  assertThat(routingNodes.node("node1").numberOfShardsWithState(STARTED,RELOCATING),equalTo(3));
  assertThat(routingNodes.node("node1").numberOfShardsWithState(STARTED),lessThan(3));
  assertThat(routingNodes.node("node2").numberOfShardsWithState(STARTED,RELOCATING),equalTo(3));
  assertThat(routingNodes.node("node2").numberOfShardsWithState(STARTED),lessThan(3));
  assertThat(routingNodes.node("node3").numberOfShardsWithState(INITIALIZING),equalTo(2));
  logger.info("Start the shards on node 3");
  routingNodes=routingTable.routingNodes(clusterState.metaData());
  prevRoutingTable=routingTable;
  routingTable=strategy.applyStartedShards(clusterState,routingNodes.node("node3").shardsWithState(INITIALIZING));
  clusterState=newClusterStateBuilder().state(clusterState).routingTable(routingTable).build();
  routingNodes=routingTable.routingNodes(metaData);
  assertThat(prevRoutingTable != routingTable,equalTo(true));
  assertThat(routingTable.index("test").shards().size(),equalTo(3));
  assertThat(routingNodes.node("node1").numberOfShardsWithState(STARTED),equalTo(2));
  assertThat(routingNodes.node("node2").numberOfShardsWithState(STARTED),equalTo(2));
  assertThat(routingNodes.node("node3").numberOfShardsWithState(STARTED),equalTo(2));
}
