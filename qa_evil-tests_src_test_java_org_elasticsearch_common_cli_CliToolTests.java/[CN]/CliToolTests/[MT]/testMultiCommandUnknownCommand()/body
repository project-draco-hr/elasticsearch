{
  Terminal terminal=new MockTerminal();
  int count=randomIntBetween(2,7);
  List<AtomicReference<Boolean>> executed=new ArrayList<>(count);
  for (int i=0; i < executed.size(); i++) {
    executed.add(new AtomicReference<>(false));
  }
  NamedCommand[] cmds=new NamedCommand[count];
  for (int i=0; i < count; i++) {
    final int index=i;
    cmds[i]=new NamedCommand("cmd" + index,terminal){
      @Override public CliTool.ExitStatus execute(      Settings settings,      Environment env) throws Exception {
        executed.get(index).set(true);
        return OK;
      }
    }
;
  }
  MultiCmdTool tool=new MultiCmdTool("tool",terminal,cmds);
  CliTool.ExitStatus status=tool.execute("cmd" + count);
  assertThat(status,is(CliTool.ExitStatus.USAGE));
  for (int i=0; i < executed.size(); i++) {
    assertThat(executed.get(i).get(),is(false));
  }
}
