{
  if (str == null) {
    return null;
  }
  str=clean(str);
  if (str.length() == 0) {
    return str;
  }
  str=PAT_MAC.matcher(str).replaceFirst("MCC");
  str=PAT_KN.matcher(str).replaceFirst("NN");
  str=PAT_K.matcher(str).replaceFirst("C");
  str=PAT_PH_PF.matcher(str).replaceFirst("FF");
  str=PAT_SCH.matcher(str).replaceFirst("SSS");
  str=PAT_EE_IE.matcher(str).replaceFirst("Y");
  str=PAT_DT_ETC.matcher(str).replaceFirst("D");
  StringBuilder key=new StringBuilder(str.length());
  key.append(str.charAt(0));
  final char[] chars=str.toCharArray();
  final int len=chars.length;
  for (int i=1; i < len; i++) {
    final char next=i < len - 1 ? chars[i + 1] : SPACE;
    final char aNext=i < len - 2 ? chars[i + 2] : SPACE;
    final char[] transcoded=transcodeRemaining(chars[i - 1],chars[i],next,aNext);
    System.arraycopy(transcoded,0,chars,i,transcoded.length);
    if (chars[i] != chars[i - 1]) {
      key.append(chars[i]);
    }
  }
  if (key.length() > 1) {
    char lastChar=key.charAt(key.length() - 1);
    if (lastChar == 'S') {
      key.deleteCharAt(key.length() - 1);
      lastChar=key.charAt(key.length() - 1);
    }
    if (key.length() > 2) {
      final char last2Char=key.charAt(key.length() - 2);
      if (last2Char == 'A' && lastChar == 'Y') {
        key.deleteCharAt(key.length() - 2);
      }
    }
    if (lastChar == 'A') {
      key.deleteCharAt(key.length() - 1);
    }
  }
  final String string=key.toString();
  return this.isStrict() ? string.substring(0,Math.min(TRUE_LENGTH,string.length())) : string;
}
