{
  if (request.indices().length == 0) {
    listener.onResponse(new DeleteIndexResponse(true));
  }
  final AtomicInteger count=new AtomicInteger(request.indices().length);
  for (  final String index : request.indices()) {
    deleteIndexService.deleteIndex(new MetaDataDeleteIndexService.Request(index).timeout(request.timeout()).masterTimeout(request.masterNodeTimeout()),new MetaDataDeleteIndexService.Listener(){
      private volatile Throwable lastFailure;
      private volatile boolean ack=true;
      @Override public void onResponse(      MetaDataDeleteIndexService.Response response){
        if (!response.acknowledged()) {
          ack=false;
        }
        if (count.decrementAndGet() == 0) {
          if (lastFailure != null) {
            listener.onFailure(lastFailure);
          }
 else {
            listener.onResponse(new DeleteIndexResponse(ack));
          }
        }
      }
      @Override public void onFailure(      Throwable t){
        logger.debug("[{}] failed to delete index",t,index);
        lastFailure=t;
        if (count.decrementAndGet() == 0) {
          listener.onFailure(t);
        }
      }
    }
);
  }
}
