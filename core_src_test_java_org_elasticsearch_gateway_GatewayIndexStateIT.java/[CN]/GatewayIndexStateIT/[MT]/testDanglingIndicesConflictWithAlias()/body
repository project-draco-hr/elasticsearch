{
  logger.info("--> starting two nodes");
  internalCluster().startNodesAsync(2).get();
  logger.info("--> indexing a simple document");
  client().prepareIndex("test","type1","1").setSource("field1","value1").setRefresh(true).execute().actionGet();
  logger.info("--> waiting for green status");
  ensureGreen();
  logger.info("--> verify 1 doc in the index");
  for (int i=0; i < 10; i++) {
    assertHitCount(client().prepareSearch().setQuery(matchAllQuery()).get(),1L);
  }
  assertThat(client().prepareGet("test","type1","1").execute().actionGet().isExists(),equalTo(true));
  internalCluster().stopRandomNonMasterNode();
  assertFalse(client().admin().cluster().prepareHealth().setWaitForNodes("1").get().isTimedOut());
  logger.info("--> deleting index");
  assertAcked(client().admin().indices().prepareDelete("test"));
  index("test2","type1","2","{}");
  logger.info("--> creating index with an alias");
  assertAcked(client().admin().indices().prepareAliases().addAlias("test2","test"));
  logger.info("--> starting node back up");
  internalCluster().startNode();
  ensureGreen();
  assertFalse(client().admin().cluster().prepareHealth().setWaitForRelocatingShards(0).setWaitForEvents(Priority.LANGUID).get().isTimedOut());
  logger.info("--> verify we read the right thing through alias");
  assertThat(client().prepareGet("test","type1","2").execute().actionGet().isExists(),equalTo(true));
  logger.info("--> deleting alias");
  assertAcked(client().admin().indices().prepareAliases().removeAlias("test2","test"));
  logger.info("--> waiting for dangling index to be imported");
  assertBusy(new Runnable(){
    @Override public void run(){
      assertTrue(client().admin().indices().prepareExists("test").execute().actionGet().isExists());
    }
  }
);
  ensureGreen();
  logger.info("--> verifying dangling index contains doc");
  assertThat(client().prepareGet("test","type1","1").execute().actionGet().isExists(),equalTo(true));
}
