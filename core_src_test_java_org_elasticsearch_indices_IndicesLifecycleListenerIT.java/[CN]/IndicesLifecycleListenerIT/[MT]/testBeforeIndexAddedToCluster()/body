{
  String node1=internalCluster().startNode();
  String node2=internalCluster().startNode();
  String node3=internalCluster().startNode();
  final AtomicInteger beforeAddedCount=new AtomicInteger(0);
  final AtomicInteger allCreatedCount=new AtomicInteger(0);
  IndexEventListener listener=new IndexEventListener(){
    @Override public void beforeIndexAddedToCluster(    Index index,    Settings indexSettings){
      beforeAddedCount.incrementAndGet();
      if (MockIndexEventListener.TestPlugin.INDEX_FAIL.get(indexSettings)) {
        throw new ElasticsearchException("failing on purpose");
      }
    }
    @Override public void beforeIndexCreated(    Index index,    Settings indexSettings){
      allCreatedCount.incrementAndGet();
    }
  }
;
  internalCluster().getInstance(MockIndexEventListener.TestEventListener.class,node1).setNewDelegate(listener);
  internalCluster().getInstance(MockIndexEventListener.TestEventListener.class,node2).setNewDelegate(listener);
  internalCluster().getInstance(MockIndexEventListener.TestEventListener.class,node3).setNewDelegate(listener);
  client().admin().indices().prepareCreate("test").setSettings(IndexMetaData.SETTING_NUMBER_OF_SHARDS,3,IndexMetaData.SETTING_NUMBER_OF_REPLICAS,1).get();
  ensureGreen("test");
  assertThat("beforeIndexAddedToCluster called only once",beforeAddedCount.get(),equalTo(1));
  assertThat("beforeIndexCreated called on each data node",allCreatedCount.get(),greaterThanOrEqualTo(3));
  try {
    client().admin().indices().prepareCreate("failed").setSettings("index.fail",true).get();
    fail("should have thrown an exception during creation");
  }
 catch (  Exception e) {
    assertTrue(e.getMessage().contains("failing on purpose"));
    ClusterStateResponse resp=client().admin().cluster().prepareState().get();
    assertFalse(resp.getState().routingTable().indicesRouting().keys().contains("failed"));
  }
}
