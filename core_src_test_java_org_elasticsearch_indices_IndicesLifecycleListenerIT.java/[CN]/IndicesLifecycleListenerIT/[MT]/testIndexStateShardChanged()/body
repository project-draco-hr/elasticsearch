{
  String node1=internalCluster().startNode();
  IndexShardStateChangeListener stateChangeListenerNode1=new IndexShardStateChangeListener();
  internalCluster().getInstance(MockIndexEventListener.TestEventListener.class,node1).setNewDelegate(stateChangeListenerNode1);
  try {
    client().admin().indices().prepareCreate("failed").setSettings(SETTING_NUMBER_OF_SHARDS,1,"index.fail",true).get();
    fail("should have thrown an exception");
  }
 catch (  ElasticsearchException e) {
    assertTrue(e.getMessage().contains("failing on purpose"));
    ClusterStateResponse resp=client().admin().cluster().prepareState().get();
    assertFalse(resp.getState().routingTable().indicesRouting().keys().contains("failed"));
  }
  assertAcked(client().admin().indices().prepareCreate("test").setSettings(SETTING_NUMBER_OF_SHARDS,6,SETTING_NUMBER_OF_REPLICAS,0));
  ensureGreen();
  assertThat(stateChangeListenerNode1.creationSettings.getAsInt(SETTING_NUMBER_OF_SHARDS,-1),equalTo(6));
  assertThat(stateChangeListenerNode1.creationSettings.getAsInt(SETTING_NUMBER_OF_REPLICAS,-1),equalTo(0));
  assertShardStatesMatch(stateChangeListenerNode1,6,CREATED,RECOVERING,POST_RECOVERY,STARTED);
  assertAcked(client().admin().cluster().prepareUpdateSettings().setPersistentSettings(builder().put(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE,"none")));
  String node2=internalCluster().startNode();
  IndexShardStateChangeListener stateChangeListenerNode2=new IndexShardStateChangeListener();
  internalCluster().getInstance(MockIndexEventListener.TestEventListener.class,node2).setNewDelegate(stateChangeListenerNode2);
  assertAcked(client().admin().cluster().prepareUpdateSettings().setPersistentSettings(builder().put(EnableAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ENABLE,"all")));
  ensureGreen();
  assertShardStatesMatch(stateChangeListenerNode1,3,CLOSED);
  assertShardStatesMatch(stateChangeListenerNode2,3,CREATED,RECOVERING,POST_RECOVERY,STARTED);
  assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(builder().put(SETTING_NUMBER_OF_REPLICAS,1)));
  ensureGreen();
  assertShardStatesMatch(stateChangeListenerNode1,3,CREATED,RECOVERING,POST_RECOVERY,STARTED);
  assertShardStatesMatch(stateChangeListenerNode2,3,CREATED,RECOVERING,POST_RECOVERY,STARTED);
  assertAcked(client().admin().indices().prepareClose("test"));
  assertThat(stateChangeListenerNode1.afterCloseSettings.getAsInt(SETTING_NUMBER_OF_SHARDS,-1),equalTo(6));
  assertThat(stateChangeListenerNode1.afterCloseSettings.getAsInt(SETTING_NUMBER_OF_REPLICAS,-1),equalTo(1));
  assertShardStatesMatch(stateChangeListenerNode1,6,CLOSED);
  assertShardStatesMatch(stateChangeListenerNode2,6,CLOSED);
}
