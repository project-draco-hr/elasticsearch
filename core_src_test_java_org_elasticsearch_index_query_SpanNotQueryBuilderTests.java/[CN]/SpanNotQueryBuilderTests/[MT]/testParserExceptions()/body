{
{
    XContentBuilder builder=XContentFactory.jsonBuilder();
    builder.startObject();
    builder.startObject(SpanNotQueryBuilder.NAME);
    builder.field("exclude");
    spanTermQuery("description","jumped").toXContent(builder,null);
    builder.field("dist",2);
    builder.endObject();
    builder.endObject();
    try {
      parseQuery(builder.string());
      fail("ParsingException should have been caught");
    }
 catch (    ParsingException e) {
      assertThat("ParsingException should have been caught",e.getDetailedMessage(),containsString("spanNot must have [include]"));
    }
  }
{
    XContentBuilder builder=XContentFactory.jsonBuilder();
    builder.startObject();
    builder.startObject(SpanNotQueryBuilder.NAME);
    builder.field("include");
    spanNearQuery(QueryBuilders.spanTermQuery("description","quick"),1).clause(QueryBuilders.spanTermQuery("description","fox")).toXContent(builder,null);
    builder.field("dist",2);
    builder.endObject();
    builder.endObject();
    try {
      parseQuery(builder.string());
      fail("ParsingException should have been caught");
    }
 catch (    ParsingException e) {
      assertThat("ParsingException should have been caught",e.getDetailedMessage(),containsString("spanNot must have [exclude]"));
    }
  }
{
    XContentBuilder builder=XContentFactory.jsonBuilder();
    builder.startObject();
    builder.startObject(SpanNotQueryBuilder.NAME);
    builder.field("include");
    spanNearQuery(QueryBuilders.spanTermQuery("description","quick"),1).clause(QueryBuilders.spanTermQuery("description","fox")).toXContent(builder,null);
    builder.field("exclude");
    spanTermQuery("description","jumped").toXContent(builder,null);
    builder.field("dist",2);
    builder.field("pre",2);
    builder.endObject();
    builder.endObject();
    try {
      parseQuery(builder.string());
      fail("ParsingException should have been caught");
    }
 catch (    ParsingException e) {
      assertThat("ParsingException should have been caught",e.getDetailedMessage(),containsString("spanNot can either use [dist] or [pre] & [post] (or none)"));
    }
  }
}
