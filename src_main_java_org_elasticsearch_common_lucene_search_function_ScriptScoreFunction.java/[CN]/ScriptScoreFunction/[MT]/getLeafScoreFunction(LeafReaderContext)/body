{
  final LeafSearchScript leafScript=script.getLeafSearchScript(ctx);
  final CannedScorer scorer=new CannedScorer();
  leafScript.setScorer(scorer);
  return new LeafScoreFunction(){
    @Override public double score(    int docId,    float subQueryScore){
      leafScript.setDocument(docId);
      scorer.docid=docId;
      scorer.score=subQueryScore;
      double result=leafScript.runAsDouble();
      if (Double.isNaN(result)) {
        throw new ScriptException("script_score returned NaN");
      }
      return result;
    }
    @Override public Explanation explainScore(    int docId,    Explanation subQueryScore) throws IOException {
      Explanation exp;
      if (leafScript instanceof ExplainableSearchScript) {
        leafScript.setDocument(docId);
        scorer.docid=docId;
        scorer.score=subQueryScore.getValue();
        exp=((ExplainableSearchScript)leafScript).explain(subQueryScore);
      }
 else {
        double score=score(docId,subQueryScore.getValue());
        String explanation="script score function, computed with script:\"" + sScript;
        if (params != null) {
          explanation+="\" and parameters: \n" + params.toString();
        }
        exp=new Explanation(CombineFunction.toFloat(score),explanation);
        Explanation scoreExp=new Explanation(subQueryScore.getValue(),"_score: ");
        scoreExp.addDetail(subQueryScore);
        exp.addDetail(scoreExp);
      }
      return exp;
    }
  }
;
}
