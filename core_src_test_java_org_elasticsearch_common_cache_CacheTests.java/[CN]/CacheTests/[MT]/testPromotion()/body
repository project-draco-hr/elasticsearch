{
  AtomicLong now=new AtomicLong();
  Cache<Integer,String> cache=new Cache<Integer,String>(){
    @Override protected long now(){
      return now.get();
    }
  }
;
  cache.setExpireAfter(1);
  now.set(0);
  for (int i=0; i < numberOfEntries; i++) {
    cache.put(i,Integer.toString(i));
  }
  now.set(1);
  Set<Integer> promotedKeys=new HashSet<>();
  for (int i=0; i < numberOfEntries; i++) {
    if (rarely()) {
      cache.get(i);
      promotedKeys.add(i);
    }
  }
  now.set(2);
  cache.refresh();
  assertEquals(promotedKeys.size(),cache.count());
  for (int i=0; i < numberOfEntries; i++) {
    if (promotedKeys.contains(i)) {
      assertNotNull(cache.get(i));
    }
 else {
      assertNull(cache.get(i));
    }
  }
}
