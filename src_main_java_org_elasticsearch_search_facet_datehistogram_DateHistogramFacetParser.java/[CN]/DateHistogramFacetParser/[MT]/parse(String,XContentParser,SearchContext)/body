{
  String keyField=null;
  String valueField=null;
  String valueScript=null;
  String scriptLang=null;
  Map<String,Object> params=null;
  String interval=null;
  DateTimeZone preZone=DateTimeZone.UTC;
  DateTimeZone postZone=DateTimeZone.UTC;
  boolean preZoneAdjustLargeInterval=false;
  long preOffset=0;
  long postOffset=0;
  float factor=1.0f;
  Chronology chronology=ISOChronology.getInstanceUTC();
  DateHistogramFacet.ComparatorType comparatorType=DateHistogramFacet.ComparatorType.TIME;
  XContentParser.Token token;
  String fieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      fieldName=parser.currentName();
    }
 else     if (token == XContentParser.Token.START_OBJECT) {
      if ("params".equals(fieldName)) {
        params=parser.map();
      }
    }
 else     if (token.isValue()) {
      if ("field".equals(fieldName)) {
        keyField=parser.text();
      }
 else       if ("key_field".equals(fieldName) || "keyField".equals(fieldName)) {
        keyField=parser.text();
      }
 else       if ("value_field".equals(fieldName) || "valueField".equals(fieldName)) {
        valueField=parser.text();
      }
 else       if ("interval".equals(fieldName)) {
        interval=parser.text();
      }
 else       if ("time_zone".equals(fieldName) || "timeZone".equals(fieldName)) {
        preZone=parseZone(parser,token);
      }
 else       if ("pre_zone".equals(fieldName) || "preZone".equals(fieldName)) {
        preZone=parseZone(parser,token);
      }
 else       if ("pre_zone_adjust_large_interval".equals(fieldName) || "preZoneAdjustLargeInterval".equals(fieldName)) {
        preZoneAdjustLargeInterval=parser.booleanValue();
      }
 else       if ("post_zone".equals(fieldName) || "postZone".equals(fieldName)) {
        postZone=parseZone(parser,token);
      }
 else       if ("pre_offset".equals(fieldName) || "preOffset".equals(fieldName)) {
        preOffset=parseOffset(parser.text());
      }
 else       if ("post_offset".equals(fieldName) || "postOffset".equals(fieldName)) {
        postOffset=parseOffset(parser.text());
      }
 else       if ("factor".equals(fieldName)) {
        factor=parser.floatValue();
      }
 else       if ("value_script".equals(fieldName) || "valueScript".equals(fieldName)) {
        valueScript=parser.text();
      }
 else       if ("order".equals(fieldName) || "comparator".equals(fieldName)) {
        comparatorType=DateHistogramFacet.ComparatorType.fromString(parser.text());
      }
 else       if ("lang".equals(fieldName)) {
        scriptLang=parser.text();
      }
    }
  }
  if (interval == null) {
    throw new FacetPhaseExecutionException(facetName,"[interval] is required to be set for histogram facet");
  }
  if (keyField == null) {
    throw new FacetPhaseExecutionException(facetName,"key field is required to be set for histogram facet, either using [field] or using [key_field]");
  }
  FieldMapper keyMapper=context.smartNameFieldMapper(keyField);
  if (keyMapper == null) {
    throw new FacetPhaseExecutionException(facetName,"(key) field [" + keyField + "] not found");
  }
  IndexNumericFieldData keyIndexFieldData=context.fieldData().getForField(keyMapper);
  TimeZoneRounding.Builder tzRoundingBuilder;
  DateFieldParser fieldParser=dateFieldParsers.get(interval);
  if (fieldParser != null) {
    tzRoundingBuilder=TimeZoneRounding.builder(fieldParser.parse(chronology));
  }
 else {
    tzRoundingBuilder=TimeZoneRounding.builder(TimeValue.parseTimeValue(interval,null));
  }
  TimeZoneRounding tzRounding=tzRoundingBuilder.preZone(preZone).postZone(postZone).preZoneAdjustLargeInterval(preZoneAdjustLargeInterval).preOffset(preOffset).postOffset(postOffset).factor(factor).build();
  if (valueScript != null) {
    SearchScript script=context.scriptService().search(context.lookup(),scriptLang,valueScript,params);
    return new ValueScriptDateHistogramFacetExecutor(keyIndexFieldData,script,tzRounding,comparatorType);
  }
 else   if (valueField != null) {
    FieldMapper valueMapper=context.smartNameFieldMapper(valueField);
    if (valueMapper == null) {
      throw new FacetPhaseExecutionException(facetName,"(value) field [" + valueField + "] not found");
    }
    IndexNumericFieldData valueIndexFieldData=context.fieldData().getForField(valueMapper);
    return new ValueDateHistogramFacetExecutor(keyIndexFieldData,valueIndexFieldData,tzRounding,comparatorType);
  }
 else {
    return new CountDateHistogramFacetExecutor(keyIndexFieldData,tzRounding,comparatorType);
  }
}
