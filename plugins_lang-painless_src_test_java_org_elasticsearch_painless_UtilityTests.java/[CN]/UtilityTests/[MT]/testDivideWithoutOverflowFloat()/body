{
  assertEquals(5F,Utility.divideWithoutOverflow(25F,5F),0F);
  assertTrue(Float.isNaN(Utility.divideWithoutOverflow(5F,Float.NaN)));
  assertEquals(Float.POSITIVE_INFINITY,Utility.divideWithoutOverflow(Float.POSITIVE_INFINITY,5F),0F);
  try {
    Utility.divideWithoutOverflow(Float.MAX_VALUE,Float.MIN_VALUE);
    fail("did not get expected exception");
  }
 catch (  ArithmeticException expected) {
  }
  try {
    Utility.divideWithoutOverflow(0F,0F);
    fail("did not get expected exception");
  }
 catch (  ArithmeticException expected) {
  }
  try {
    Utility.divideWithoutOverflow(5F,0F);
    fail("did not get expected exception");
  }
 catch (  ArithmeticException expected) {
  }
}
