{
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","string").field("index","not_analyzed").endObject().endObject().endObject().endObject().string();
  DocumentMapper defaultMapper=MapperTestUtils.newParser().parse(mapping);
  ParsedDocument doc=defaultMapper.parse("type","1",XContentFactory.jsonBuilder().startObject().field("field","1234").endObject().bytes());
  IndexableFieldType fieldType=doc.rootDoc().getField("field").fieldType();
  assertThat(fieldType.omitNorms(),equalTo(true));
  assertThat(fieldType.indexOptions(),equalTo(FieldInfo.IndexOptions.DOCS_ONLY));
  assertThat(fieldType.storeTermVectors(),equalTo(false));
  assertThat(fieldType.storeTermVectorOffsets(),equalTo(false));
  assertThat(fieldType.storeTermVectorPositions(),equalTo(false));
  assertThat(fieldType.storeTermVectorPayloads(),equalTo(false));
  assertParseIdemPotent(fieldType,defaultMapper);
  mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","string").field("index","not_analyzed").startObject("norms").field("enabled",true).endObject().field("index_options","freqs").endObject().endObject().endObject().endObject().string();
  defaultMapper=MapperTestUtils.newParser().parse(mapping);
  doc=defaultMapper.parse("type","1",XContentFactory.jsonBuilder().startObject().field("field","1234").endObject().bytes());
  fieldType=doc.rootDoc().getField("field").fieldType();
  assertThat(fieldType.omitNorms(),equalTo(false));
  assertThat(fieldType.indexOptions(),equalTo(FieldInfo.IndexOptions.DOCS_AND_FREQS));
  assertThat(fieldType.storeTermVectors(),equalTo(false));
  assertThat(fieldType.storeTermVectorOffsets(),equalTo(false));
  assertThat(fieldType.storeTermVectorPositions(),equalTo(false));
  assertThat(fieldType.storeTermVectorPayloads(),equalTo(false));
  assertParseIdemPotent(fieldType,defaultMapper);
  mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","string").field("index","not_analyzed").field("omit_norms",false).endObject().endObject().endObject().endObject().string();
  defaultMapper=MapperTestUtils.newParser().parse(mapping);
  doc=defaultMapper.parse("type","1",XContentFactory.jsonBuilder().startObject().field("field","1234").endObject().bytes());
  fieldType=doc.rootDoc().getField("field").fieldType();
  assertThat(fieldType.omitNorms(),equalTo(false));
  assertParseIdemPotent(fieldType,defaultMapper);
}
