{
  String mapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","string").endObject().endObject().endObject().endObject().string();
  DocumentMapper defaultMapper=parser.parse(mapping);
  ParsedDocument doc=defaultMapper.parse("type","1",XContentFactory.jsonBuilder().startObject().field("field","1234").endObject().bytes());
  IndexableFieldType fieldType=doc.rootDoc().getField("field").fieldType();
  assertEquals(false,fieldType.omitNorms());
  String updatedMapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","string").startObject("norms").field("enabled",false).endObject().endObject().endObject().endObject().endObject().string();
  MergeResult mergeResult=defaultMapper.merge(parser.parse(updatedMapping),MergeFlags.mergeFlags().simulate(false));
  assertFalse(Arrays.toString(mergeResult.conflicts()),mergeResult.hasConflicts());
  doc=defaultMapper.parse("type","1",XContentFactory.jsonBuilder().startObject().field("field","1234").endObject().bytes());
  fieldType=doc.rootDoc().getField("field").fieldType();
  assertEquals(true,fieldType.omitNorms());
  updatedMapping=XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("field").field("type","string").startObject("norms").field("enabled",true).endObject().endObject().endObject().endObject().endObject().string();
  mergeResult=defaultMapper.merge(parser.parse(updatedMapping),MergeFlags.mergeFlags());
  assertTrue(mergeResult.hasConflicts());
  assertEquals(1,mergeResult.conflicts().length);
  assertTrue(mergeResult.conflicts()[0].contains("cannot enable norms"));
}
