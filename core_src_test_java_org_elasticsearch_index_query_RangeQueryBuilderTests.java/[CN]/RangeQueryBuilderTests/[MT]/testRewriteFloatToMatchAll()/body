{
  String fieldName=randomAsciiOfLengthBetween(1,20);
  RangeQueryBuilder query=new RangeQueryBuilder(fieldName);
  float queryFromValue=(float)randomDoubleBetween(-1000000.0,1000000.0,true);
  float queryToValue=(float)randomDoubleBetween(queryFromValue,2000000,true);
  float shardMinValue=(float)randomDoubleBetween(queryFromValue,queryToValue,true);
  float shardMaxValue=(float)randomDoubleBetween(shardMinValue,queryToValue,true);
  query.from(queryFromValue);
  query.to(queryToValue);
  QueryShardContext queryShardContext=queryShardContext();
  FieldStatsProvider fieldStatsProvider=new FieldStatsProvider(null,null){
    @Override public Relation isFieldWithinQuery(    String fieldName,    Object from,    Object to,    boolean includeLower,    boolean includeUpper,    DateTimeZone timeZone,    DateMathParser dateMathParser) throws IOException {
      return Relation.WITHIN;
    }
    @SuppressWarnings("unchecked") @Override public <T extends Comparable<T>>FieldStats<T> get(    String field) throws IOException {
      assertThat(field,equalTo(fieldName));
      return (FieldStats<T>)new FieldStats.Float(randomLong(),randomLong(),randomLong(),randomLong(),shardMinValue,shardMaxValue);
    }
  }
;
  queryShardContext.setFieldStatsProvider(fieldStatsProvider);
  QueryBuilder<?> rewritten=query.rewrite(queryShardContext);
  assertThat(rewritten,instanceOf(RangeQueryBuilder.class));
  RangeQueryBuilder rewrittenRange=(RangeQueryBuilder)rewritten;
  assertThat(rewrittenRange.fieldName(),equalTo(fieldName));
  assertThat(rewrittenRange.from(),equalTo(null));
  assertThat(rewrittenRange.to(),equalTo(null));
}
