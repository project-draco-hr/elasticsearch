{
  assertThat(Booleans.parseBoolean(randomFrom("true","on","yes","1"),randomBoolean()),is(true));
  assertThat(Booleans.parseBoolean(randomFrom("false","off","no","0"),randomBoolean()),is(false));
  assertThat(Booleans.parseBoolean(randomFrom("true","on","yes").toUpperCase(Locale.ROOT),randomBoolean()),is(true));
  assertThat(Booleans.parseBoolean(null,false),is(false));
  assertThat(Booleans.parseBoolean(null,true),is(true));
  assertThat(Booleans.parseBoolean(randomFrom("true","on","yes","1"),randomFrom(Boolean.TRUE,Boolean.FALSE,null)),is(true));
  assertThat(Booleans.parseBoolean(randomFrom("false","off","no","0"),randomFrom(Boolean.TRUE,Boolean.FALSE,null)),is(false));
  assertThat(Booleans.parseBoolean(randomFrom("true","on","yes").toUpperCase(Locale.ROOT),randomFrom(Boolean.TRUE,Boolean.FALSE,null)),is(true));
  assertThat(Booleans.parseBoolean(null,Boolean.FALSE),is(false));
  assertThat(Booleans.parseBoolean(null,Boolean.TRUE),is(true));
  assertThat(Booleans.parseBoolean(null,null),nullValue());
  char[] chars=randomFrom("true","on","yes","1").toCharArray();
  assertThat(Booleans.parseBoolean(chars,0,chars.length,randomBoolean()),is(true));
  chars=randomFrom("false","off","no","0").toCharArray();
  assertThat(Booleans.parseBoolean(chars,0,chars.length,randomBoolean()),is(false));
  chars=randomFrom("true","on","yes").toUpperCase(Locale.ROOT).toCharArray();
  assertThat(Booleans.parseBoolean(chars,0,chars.length,randomBoolean()),is(true));
}
