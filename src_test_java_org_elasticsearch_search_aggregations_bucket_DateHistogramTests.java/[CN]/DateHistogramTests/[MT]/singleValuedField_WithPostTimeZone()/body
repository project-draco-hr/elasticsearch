{
  SearchResponse response;
  if (randomBoolean()) {
    response=client().prepareSearch("idx").addAggregation(dateHistogram("histo").field("date").interval(DateHistogramInterval.DAY).postZone("-01:00")).execute().actionGet();
  }
 else {
    response=client().prepareSearch("idx").addAggregation(new AbstractAggregationBuilder("histo","date_histogram"){
      @Override public XContentBuilder toXContent(      XContentBuilder builder,      Params params) throws IOException {
        return builder.startObject(getName()).startObject(type).field("field","date").field("interval","1d").field("post_zone",-1).endObject().endObject();
      }
    }
).execute().actionGet();
  }
  assertSearchResponse(response);
  Histogram histo=response.getAggregations().get("histo");
  assertThat(histo,notNullValue());
  assertThat(histo.getName(),equalTo("histo"));
  List<? extends Bucket> buckets=histo.getBuckets();
  assertThat(buckets.size(),equalTo(6));
  DateTime key=new DateTime(2012,1,2,0,0,DateTimeZone.forID("+01:00"));
  Histogram.Bucket bucket=buckets.get(0);
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKeyAsString(),equalTo(getBucketKeyAsString(key)));
  assertThat(((DateTime)bucket.getKey()),equalTo(key.withZone(DateTimeZone.UTC)));
  assertThat(bucket.getDocCount(),equalTo(1l));
  key=new DateTime(2012,2,2,0,0,DateTimeZone.forID("+01:00"));
  bucket=buckets.get(1);
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKeyAsString(),equalTo(getBucketKeyAsString(key)));
  assertThat(((DateTime)bucket.getKey()),equalTo(key.withZone(DateTimeZone.UTC)));
  assertThat(bucket.getDocCount(),equalTo(1l));
  key=new DateTime(2012,2,15,0,0,DateTimeZone.forID("+01:00"));
  bucket=buckets.get(2);
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKeyAsString(),equalTo(getBucketKeyAsString(key)));
  assertThat(((DateTime)bucket.getKey()),equalTo(key.withZone(DateTimeZone.UTC)));
  assertThat(bucket.getDocCount(),equalTo(1l));
  key=new DateTime(2012,3,2,0,0,DateTimeZone.forID("+01:00"));
  bucket=buckets.get(3);
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKeyAsString(),equalTo(getBucketKeyAsString(key)));
  assertThat(((DateTime)bucket.getKey()),equalTo(key.withZone(DateTimeZone.UTC)));
  assertThat(bucket.getDocCount(),equalTo(1l));
  key=new DateTime(2012,3,15,0,0,DateTimeZone.forID("+01:00"));
  bucket=buckets.get(4);
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKeyAsString(),equalTo(getBucketKeyAsString(key)));
  assertThat(((DateTime)bucket.getKey()),equalTo(key.withZone(DateTimeZone.UTC)));
  assertThat(bucket.getDocCount(),equalTo(1l));
  key=new DateTime(2012,3,23,0,0,DateTimeZone.forID("+01:00"));
  bucket=buckets.get(5);
  assertThat(bucket,notNullValue());
  assertThat(bucket.getKeyAsString(),equalTo(getBucketKeyAsString(key)));
  assertThat(((DateTime)bucket.getKey()),equalTo(key.withZone(DateTimeZone.UTC)));
  assertThat(bucket.getDocCount(),equalTo(1l));
}
