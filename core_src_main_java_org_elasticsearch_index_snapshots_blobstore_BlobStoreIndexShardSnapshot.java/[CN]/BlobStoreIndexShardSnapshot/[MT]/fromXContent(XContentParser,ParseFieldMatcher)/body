{
  String snapshot=null;
  long indexVersion=-1;
  long startTime=0;
  long time=0;
  int numberOfFiles=0;
  long totalSize=0;
  List<FileInfo> indexFiles=newArrayList();
  if (parser.currentToken() == null) {
    parser.nextToken();
  }
  XContentParser.Token token=parser.currentToken();
  if (token == XContentParser.Token.START_OBJECT) {
    while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
      if (token == XContentParser.Token.FIELD_NAME) {
        String currentFieldName=parser.currentName();
        token=parser.nextToken();
        if (token.isValue()) {
          if (parseFieldMatcher.match(currentFieldName,ParseFields.NAME)) {
            snapshot=parser.text();
          }
 else           if (parseFieldMatcher.match(currentFieldName,ParseFields.INDEX_VERSION)) {
            indexVersion=parser.longValue();
          }
 else           if (parseFieldMatcher.match(currentFieldName,ParseFields.START_TIME)) {
            startTime=parser.longValue();
          }
 else           if (parseFieldMatcher.match(currentFieldName,ParseFields.TIME)) {
            time=parser.longValue();
          }
 else           if (parseFieldMatcher.match(currentFieldName,ParseFields.NUMBER_OF_FILES)) {
            numberOfFiles=parser.intValue();
          }
 else           if (parseFieldMatcher.match(currentFieldName,ParseFields.TOTAL_SIZE)) {
            totalSize=parser.longValue();
          }
 else {
            throw new ElasticsearchParseException("unknown parameter [{}]",currentFieldName);
          }
        }
 else         if (token == XContentParser.Token.START_ARRAY) {
          if (parseFieldMatcher.match(currentFieldName,ParseFields.FILES)) {
            while ((parser.nextToken()) != XContentParser.Token.END_ARRAY) {
              indexFiles.add(FileInfo.fromXContent(parser));
            }
          }
 else {
            throw new ElasticsearchParseException("unknown parameter [{}]",currentFieldName);
          }
        }
 else {
          throw new ElasticsearchParseException("unexpected token  [{}]",token);
        }
      }
 else {
        throw new ElasticsearchParseException("unexpected token [{}]",token);
      }
    }
  }
  return new BlobStoreIndexShardSnapshot(snapshot,indexVersion,Collections.unmodifiableList(indexFiles),startTime,time,numberOfFiles,totalSize);
}
