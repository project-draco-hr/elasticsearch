{
  AtomicReader reader=context.reader();
  Terms terms=reader.terms(getFieldNames().indexName());
  if (terms == null) {
    return PagedBytesAtomicFieldData.empty(reader.maxDoc());
  }
  final PagedBytes bytes=new PagedBytes(15);
  int startBytesBPV;
  int startNumUniqueTerms;
  int maxDoc=reader.maxDoc();
  final int termCountHardLimit;
  if (maxDoc == Integer.MAX_VALUE) {
    termCountHardLimit=Integer.MAX_VALUE;
  }
 else {
    termCountHardLimit=maxDoc + 1;
  }
  long numUniqueTerms=terms.size();
  if (numUniqueTerms != -1L) {
    if (numUniqueTerms > termCountHardLimit) {
      numUniqueTerms=termCountHardLimit;
    }
    startBytesBPV=PackedInts.bitsRequired(numUniqueTerms * 4);
    startNumUniqueTerms=(int)numUniqueTerms;
  }
 else {
    startBytesBPV=1;
    startNumUniqueTerms=1;
  }
  float acceptableOverheadRatio=PackedInts.FAST;
  GrowableWriter termOrdToBytesOffset=new GrowableWriter(startBytesBPV,1 + startNumUniqueTerms,acceptableOverheadRatio);
  OrdinalsBuilder builder=new OrdinalsBuilder(terms,reader.maxDoc());
  try {
    bytes.copyUsingLengthPrefix(new BytesRef());
    TermsEnum termsEnum=terms.iterator(null);
    DocsEnum docsEnum=null;
    for (BytesRef term=termsEnum.next(); term != null; term=termsEnum.next()) {
      final int termOrd=builder.nextOrdinal();
      if (termOrd == termOrdToBytesOffset.size()) {
        termOrdToBytesOffset=termOrdToBytesOffset.resize(ArrayUtil.oversize(1 + termOrd,1));
      }
      termOrdToBytesOffset.set(termOrd,bytes.copyUsingLengthPrefix(term));
      docsEnum=termsEnum.docs(reader.getLiveDocs(),docsEnum,DocsEnum.FLAG_NONE);
      for (int docId=docsEnum.nextDoc(); docId != DocsEnum.NO_MORE_DOCS; docId=docsEnum.nextDoc()) {
        builder.addDoc(docId);
      }
    }
    final long sizePointer=bytes.getPointer();
    PagedBytes.Reader bytesReader=bytes.freeze(true);
    PackedInts.Reader termOrdToBytesOffsetReader=termOrdToBytesOffset.getMutable();
    final Ordinals ordinals=builder.build(fieldDataType.getSettings());
    return new PagedBytesAtomicFieldData(bytesReader,sizePointer,termOrdToBytesOffsetReader,ordinals);
  }
  finally {
    builder.close();
  }
}
