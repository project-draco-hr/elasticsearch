{
  createIndex("test");
  indexRandom(true,client().prepareIndex("test","type1","1").setSource("field1","value1","field2","value4","field3","value3"),client().prepareIndex("test","type1","2").setSource("field1","value2","field2","value5","field3","value2"),client().prepareIndex("test","type1","3").setSource("field1","value3","field2","value6","field3","value1"));
  MultiMatchQueryBuilder builder=multiMatchQuery("value1 value2 value4","field1","field2");
  SearchResponse searchResponse=client().prepareSearch().setQuery(builder).addAggregation(AggregationBuilders.terms("field1").field("field1")).get();
  assertHitCount(searchResponse,2L);
  assertSearchHits(searchResponse,"1","2");
  builder.useDisMax(false);
  searchResponse=client().prepareSearch().setQuery(builder).get();
  assertHitCount(searchResponse,2L);
  assertSearchHits(searchResponse,"1","2");
  client().admin().indices().prepareRefresh("test").get();
  builder=multiMatchQuery("value1","field1","field2").operator(Operator.AND);
  searchResponse=client().prepareSearch().setQuery(builder).get();
  assertHitCount(searchResponse,1L);
  assertFirstHit(searchResponse,hasId("1"));
  refresh();
  builder=multiMatchQuery("value1","field1").field("field3",1.5f).operator(Operator.AND);
  searchResponse=client().prepareSearch().setQuery(builder).get();
  assertHitCount(searchResponse,2L);
  assertSearchHits(searchResponse,"3","1");
  client().admin().indices().prepareRefresh("test").get();
  builder=multiMatchQuery("value1").field("field1").field("field3",1.5f).operator(Operator.AND);
  searchResponse=client().prepareSearch().setQuery(builder).get();
  assertHitCount(searchResponse,2L);
  assertSearchHits(searchResponse,"3","1");
  client().prepareIndex("test","type1","3").setSource("field1","value7","field2","value8","field4",5).get();
  refresh();
  builder=multiMatchQuery("value1","field1","field2","field4");
  assertFailures(client().prepareSearch().setQuery(builder),RestStatus.BAD_REQUEST,containsString("NumberFormatException[For input string: \"value1\"]"));
  builder.lenient(true);
  searchResponse=client().prepareSearch().setQuery(builder).get();
  assertHitCount(searchResponse,1L);
  assertFirstHit(searchResponse,hasId("1"));
}
