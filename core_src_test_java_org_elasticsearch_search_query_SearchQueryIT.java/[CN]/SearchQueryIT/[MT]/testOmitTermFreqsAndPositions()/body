{
  cluster().wipeTemplates();
  Version version=Version.CURRENT;
  int iters=scaledRandomIntBetween(10,20);
  for (int i=0; i < iters; i++) {
    try {
      assertAcked(client().admin().indices().prepareCreate("test").addMapping("type1","field1","type=string,omit_term_freq_and_positions=true").setSettings(settings(version).put(SETTING_NUMBER_OF_SHARDS,1)));
      assertThat(version.onOrAfter(Version.V_1_0_0_RC2),equalTo(false));
      indexRandom(true,client().prepareIndex("test","type1","1").setSource("field1","quick brown fox","field2","quick brown fox"),client().prepareIndex("test","type1","2").setSource("field1","quick lazy huge brown fox","field2","quick lazy huge brown fox"));
      SearchResponse searchResponse=client().prepareSearch().setQuery(matchQuery("field2","quick brown").type(MatchQueryBuilder.Type.PHRASE).slop(0)).get();
      assertHitCount(searchResponse,1l);
      try {
        client().prepareSearch().setQuery(matchQuery("field1","quick brown").type(MatchQueryBuilder.Type.PHRASE).slop(0)).get();
        fail("SearchPhaseExecutionException should have been thrown");
      }
 catch (      SearchPhaseExecutionException e) {
        assertTrue(e.toString().contains("IllegalStateException[field \"field1\" was indexed without position data; cannot run PhraseQuery"));
      }
      cluster().wipeIndices("test");
    }
 catch (    MapperParsingException ex) {
      assertThat(version.toString(),version.onOrAfter(Version.V_1_0_0_RC2),equalTo(true));
      assertThat(ex.getCause().getMessage(),equalTo("'omit_term_freq_and_positions' is not supported anymore - use ['index_options' : 'docs']  instead"));
    }
    version=randomVersion(random());
  }
}
