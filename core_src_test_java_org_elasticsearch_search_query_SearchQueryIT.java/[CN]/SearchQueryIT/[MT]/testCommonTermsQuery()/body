{
  client().admin().indices().prepareCreate("test").addMapping("type1","field1","type=string,analyzer=whitespace").setSettings(SETTING_NUMBER_OF_SHARDS,1).get();
  indexRandom(true,client().prepareIndex("test","type1","3").setSource("field1","quick lazy huge brown pidgin","field2","the quick lazy huge brown fox jumps over the tree"),client().prepareIndex("test","type1","1").setSource("field1","the quick brown fox"),client().prepareIndex("test","type1","2").setSource("field1","the quick lazy huge brown fox jumps over the tree"));
  SearchResponse searchResponse=client().prepareSearch().setQuery(commonTermsQuery("field1","the quick brown").cutoffFrequency(3).lowFreqOperator(Operator.OR)).get();
  assertHitCount(searchResponse,3l);
  assertFirstHit(searchResponse,hasId("1"));
  assertSecondHit(searchResponse,hasId("2"));
  assertThirdHit(searchResponse,hasId("3"));
  searchResponse=client().prepareSearch().setQuery(commonTermsQuery("field1","the quick brown").cutoffFrequency(3).lowFreqOperator(Operator.AND)).get();
  assertThat(searchResponse.getHits().totalHits(),equalTo(2l));
  assertFirstHit(searchResponse,hasId("1"));
  assertSecondHit(searchResponse,hasId("2"));
  searchResponse=client().prepareSearch().setQuery(commonTermsQuery("field1","the quick brown").cutoffFrequency(3)).get();
  assertHitCount(searchResponse,3l);
  assertFirstHit(searchResponse,hasId("1"));
  assertSecondHit(searchResponse,hasId("2"));
  assertThirdHit(searchResponse,hasId("3"));
  searchResponse=client().prepareSearch().setQuery(commonTermsQuery("field1","the huge fox").lowFreqMinimumShouldMatch("2")).get();
  assertHitCount(searchResponse,1l);
  assertFirstHit(searchResponse,hasId("2"));
  searchResponse=client().prepareSearch().setQuery(commonTermsQuery("field1","the lazy fox brown").cutoffFrequency(1).highFreqMinimumShouldMatch("3")).get();
  assertHitCount(searchResponse,2l);
  assertFirstHit(searchResponse,hasId("1"));
  assertSecondHit(searchResponse,hasId("2"));
  searchResponse=client().prepareSearch().setQuery(commonTermsQuery("field1","the lazy fox brown").cutoffFrequency(1).highFreqMinimumShouldMatch("4")).get();
  assertHitCount(searchResponse,1l);
  assertFirstHit(searchResponse,hasId("2"));
  searchResponse=client().prepareSearch().setQuery("{ \"common\" : { \"field1\" : { \"query\" : \"the lazy fox brown\", \"cutoff_frequency\" : 1, \"minimum_should_match\" : { \"high_freq\" : 4 } } } }").get();
  assertHitCount(searchResponse,1l);
  assertFirstHit(searchResponse,hasId("2"));
  searchResponse=client().prepareSearch().setQuery(commonTermsQuery("field1","the lazy fox brown").cutoffFrequency(1)).get();
  assertHitCount(searchResponse,1l);
  assertFirstHit(searchResponse,hasId("2"));
  searchResponse=client().prepareSearch().setQuery(commonTermsQuery("field1","the quick brown").cutoffFrequency(3).analyzer("stop")).get();
  assertHitCount(searchResponse,3l);
  assertFirstHit(searchResponse,hasId("1"));
  assertSecondHit(searchResponse,hasId("3"));
  assertThirdHit(searchResponse,hasId("2"));
  searchResponse=client().prepareSearch().setQuery(matchQuery("field1","the quick brown").cutoffFrequency(3).operator(MatchQueryBuilder.Operator.AND)).get();
  assertHitCount(searchResponse,2l);
  assertFirstHit(searchResponse,hasId("1"));
  assertSecondHit(searchResponse,hasId("2"));
  searchResponse=client().prepareSearch().setQuery(matchQuery("field1","the quick brown").cutoffFrequency(3).operator(MatchQueryBuilder.Operator.OR)).get();
  assertHitCount(searchResponse,3l);
  assertFirstHit(searchResponse,hasId("1"));
  assertSecondHit(searchResponse,hasId("2"));
  assertThirdHit(searchResponse,hasId("3"));
  searchResponse=client().prepareSearch().setQuery(matchQuery("field1","the quick brown").cutoffFrequency(3).operator(MatchQueryBuilder.Operator.AND).analyzer("stop")).get();
  assertHitCount(searchResponse,3l);
  assertFirstHit(searchResponse,hasId("1"));
  assertSecondHit(searchResponse,hasId("3"));
  assertThirdHit(searchResponse,hasId("2"));
  searchResponse=client().prepareSearch().setQuery(multiMatchQuery("the quick brown","field1","field2").cutoffFrequency(3).operator(MatchQueryBuilder.Operator.AND)).get();
  assertHitCount(searchResponse,3l);
  assertFirstHit(searchResponse,hasId("3"));
  assertSecondHit(searchResponse,hasId("1"));
  assertThirdHit(searchResponse,hasId("2"));
}
