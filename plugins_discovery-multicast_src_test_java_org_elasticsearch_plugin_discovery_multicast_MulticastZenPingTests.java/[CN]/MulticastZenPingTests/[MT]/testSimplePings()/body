{
  assumeTrue("https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=193246",Constants.FREE_BSD == false);
  Settings settings=Settings.EMPTY;
  settings=buildRandomMulticast(settings);
  Thread.sleep(30000);
  ThreadPool threadPool=new ThreadPool("testSimplePings");
  final ClusterName clusterName=new ClusterName("test");
  final TransportService transportServiceA=new TransportService(new LocalTransport(settings,threadPool,Version.CURRENT,new NamedWriteableRegistry()),threadPool).start();
  final DiscoveryNode nodeA=new DiscoveryNode("A",transportServiceA.boundAddress().publishAddress(),Version.CURRENT);
  final TransportService transportServiceB=new TransportService(new LocalTransport(settings,threadPool,Version.CURRENT,new NamedWriteableRegistry()),threadPool).start();
  final DiscoveryNode nodeB=new DiscoveryNode("B",transportServiceB.boundAddress().publishAddress(),Version.CURRENT);
  MulticastZenPing zenPingA=new MulticastZenPing(threadPool,transportServiceA,clusterName,Version.CURRENT);
  zenPingA.setPingContextProvider(new PingContextProvider(){
    @Override public DiscoveryNodes nodes(){
      return DiscoveryNodes.builder().put(nodeA).localNodeId("A").build();
    }
    @Override public NodeService nodeService(){
      return null;
    }
    @Override public boolean nodeHasJoinedClusterOnce(){
      return false;
    }
  }
);
  zenPingA.start();
  MulticastZenPing zenPingB=new MulticastZenPing(threadPool,transportServiceB,clusterName,Version.CURRENT);
  zenPingB.setPingContextProvider(new PingContextProvider(){
    @Override public DiscoveryNodes nodes(){
      return DiscoveryNodes.builder().put(nodeB).localNodeId("B").build();
    }
    @Override public NodeService nodeService(){
      return null;
    }
    @Override public boolean nodeHasJoinedClusterOnce(){
      return true;
    }
  }
);
  zenPingB.start();
  try {
    logger.info("ping from A");
    ZenPing.PingResponse[] pingResponses=zenPingA.pingAndWait(TimeValue.timeValueSeconds(1));
    Assert.assertThat(pingResponses.length,Matchers.equalTo(1));
    Assert.assertThat(pingResponses[0].node().id(),Matchers.equalTo("B"));
    Assert.assertTrue(pingResponses[0].hasJoinedOnce());
    logger.info("ping from B");
    pingResponses=zenPingB.pingAndWait(TimeValue.timeValueSeconds(1));
    Assert.assertThat(pingResponses.length,Matchers.equalTo(1));
    Assert.assertThat(pingResponses[0].node().id(),Matchers.equalTo("A"));
    Assert.assertFalse(pingResponses[0].hasJoinedOnce());
  }
  finally {
    zenPingA.close();
    zenPingB.close();
    transportServiceA.close();
    transportServiceB.close();
    terminate(threadPool);
  }
}
