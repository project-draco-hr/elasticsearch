{
  int size=numDataNodes();
  if (size <= n) {
    return;
  }
  final Stream<NodeAndClient> collection=n == 0 ? nodes.values().stream() : nodes.values().stream().filter(new DataNodePredicate().and(new MasterNodePredicate(getMasterName()).negate()));
  final Iterator<NodeAndClient> values=collection.iterator();
  logger.info("changing cluster size from {} to {}, {} data nodes",size(),n + numSharedCoordOnlyNodes,n);
  Set<NodeAndClient> nodesToRemove=new HashSet<>();
  int numNodesAndClients=0;
  while (values.hasNext() && numNodesAndClients++ < size - n) {
    NodeAndClient next=values.next();
    nodesToRemove.add(next);
    removeDisruptionSchemeFromNode(next);
    next.close();
  }
  for (  NodeAndClient toRemove : nodesToRemove) {
    nodes.remove(toRemove.name);
  }
  if (!nodesToRemove.isEmpty() && size() > 0) {
    assertNoTimeout(client().admin().cluster().prepareHealth().setWaitForNodes(Integer.toString(nodes.size())).get());
  }
}
