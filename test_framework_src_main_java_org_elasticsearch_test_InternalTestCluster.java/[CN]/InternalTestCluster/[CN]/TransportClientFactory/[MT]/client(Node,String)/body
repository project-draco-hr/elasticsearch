{
  TransportAddress addr=node.injector().getInstance(TransportService.class).boundAddress().publishAddress();
  Settings nodeSettings=node.settings();
  Builder builder=settingsBuilder().put("client.transport.nodes_sampler_interval","1s").put(Environment.PATH_HOME_SETTING.getKey(),baseDir).put("name",TRANSPORT_CLIENT_PREFIX + node.settings().get("name")).put(ClusterName.SETTING,clusterName).put("client.transport.sniff",sniff).put(Node.NODE_MODE_SETTING.getKey(),Node.NODE_MODE_SETTING.exists(nodeSettings) ? Node.NODE_MODE_SETTING.get(nodeSettings) : nodeMode).put("logger.prefix",nodeSettings.get("logger.prefix","")).put("logger.level",nodeSettings.get("logger.level","INFO")).put(InternalSettingsPreparer.IGNORE_SYSTEM_PROPERTIES_SETTING,true).put(settings);
  if (Node.NODE_LOCAL_SETTING.exists(nodeSettings)) {
    builder.put(Node.NODE_LOCAL_SETTING.getKey(),Node.NODE_LOCAL_SETTING.get(nodeSettings));
  }
  TransportClient.Builder clientBuilder=TransportClient.builder().settings(builder.build());
  for (  Class<? extends Plugin> plugin : plugins) {
    clientBuilder.addPlugin(plugin);
  }
  TransportClient client=clientBuilder.build();
  client.addTransportAddress(addr);
  return client;
}
