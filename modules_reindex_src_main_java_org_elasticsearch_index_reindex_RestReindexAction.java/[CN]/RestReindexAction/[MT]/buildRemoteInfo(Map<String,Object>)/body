{
  @SuppressWarnings("unchecked") Map<String,Object> remote=(Map<String,Object>)source.remove("remote");
  if (remote == null) {
    return null;
  }
  String username=extractString(remote,"username");
  String password=extractString(remote,"password");
  String hostInRequest=requireNonNull(extractString(remote,"host"),"[host] must be specified to reindex from a remote cluster");
  Matcher hostMatcher=HOST_PATTERN.matcher(hostInRequest);
  if (false == hostMatcher.matches()) {
    throw new IllegalArgumentException("[host] must be of the form [scheme]://[host]:[port] but was [" + hostInRequest + "]");
  }
  String scheme=hostMatcher.group("scheme");
  String host=hostMatcher.group("host");
  int port=Integer.parseInt(hostMatcher.group("port"));
  Map<String,String> headers=extractStringStringMap(remote,"headers");
  if (false == remote.isEmpty()) {
    throw new IllegalArgumentException("Unsupported fields in [remote]: [" + Strings.collectionToCommaDelimitedString(remote.keySet()) + "]");
  }
  return new RemoteInfo(scheme,host,port,queryForRemote(source),username,password,headers);
}
