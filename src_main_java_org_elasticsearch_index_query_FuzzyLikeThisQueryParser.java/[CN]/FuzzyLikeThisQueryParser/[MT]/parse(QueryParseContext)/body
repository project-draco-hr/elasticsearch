{
  XContentParser parser=parseContext.parser();
  int maxNumTerms=25;
  float boost=1.0f;
  List<String> fields=null;
  String likeText=null;
  float minSimilarity=0.5f;
  int prefixLength=0;
  boolean ignoreTF=false;
  Analyzer analyzer=null;
  boolean failOnUnsupportedField=true;
  XContentParser.Token token;
  String currentFieldName=null;
  while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {
    if (token == XContentParser.Token.FIELD_NAME) {
      currentFieldName=parser.currentName();
    }
 else     if (token.isValue()) {
      if ("like_text".equals(currentFieldName) || "likeText".equals(currentFieldName)) {
        likeText=parser.text();
      }
 else       if ("max_query_terms".equals(currentFieldName) || "maxQueryTerms".equals(currentFieldName)) {
        maxNumTerms=parser.intValue();
      }
 else       if ("boost".equals(currentFieldName)) {
        boost=parser.floatValue();
      }
 else       if ("ignore_tf".equals(currentFieldName) || "ignoreTF".equals(currentFieldName)) {
        ignoreTF=parser.booleanValue();
      }
 else       if ("min_similarity".equals(currentFieldName) || "minSimilarity".equals(currentFieldName)) {
        minSimilarity=parser.floatValue();
      }
 else       if ("prefix_length".equals(currentFieldName) || "prefixLength".equals(currentFieldName)) {
        prefixLength=parser.intValue();
      }
 else       if ("analyzer".equals(currentFieldName)) {
        analyzer=parseContext.analysisService().analyzer(parser.text());
      }
 else       if ("fail_on_unsupported_field".equals(currentFieldName) || "failOnUnsupportedField".equals(currentFieldName)) {
        failOnUnsupportedField=parser.booleanValue();
      }
 else {
        throw new QueryParsingException(parseContext.index(),"[flt] query does not support [" + currentFieldName + "]");
      }
    }
 else     if (token == XContentParser.Token.START_ARRAY) {
      if ("fields".equals(currentFieldName)) {
        fields=Lists.newLinkedList();
        while ((token=parser.nextToken()) != XContentParser.Token.END_ARRAY) {
          fields.add(parseContext.indexName(parser.text()));
        }
      }
 else {
        throw new QueryParsingException(parseContext.index(),"[flt] query does not support [" + currentFieldName + "]");
      }
    }
  }
  if (likeText == null) {
    throw new QueryParsingException(parseContext.index(),"fuzzy_like_this requires 'like_text' to be specified");
  }
  if (analyzer == null) {
    analyzer=parseContext.mapperService().searchAnalyzer();
  }
  FuzzyLikeThisQuery query=new FuzzyLikeThisQuery(maxNumTerms,analyzer);
  if (fields == null) {
    fields=Lists.newArrayList(parseContext.defaultField());
  }
 else   if (fields.isEmpty()) {
    throw new QueryParsingException(parseContext.index(),"fuzzy_like_this requires 'fields' to be non-empty");
  }
  for (Iterator<String> it=fields.iterator(); it.hasNext(); ) {
    final String fieldName=it.next();
    if (!Analysis.generatesCharacterTokenStream(analyzer,fieldName)) {
      if (failOnUnsupportedField) {
        throw new ElasticSearchIllegalArgumentException("more_like_this doesn't support binary/numeric fields: [" + fieldName + "]");
      }
 else {
        it.remove();
      }
    }
  }
  if (fields.isEmpty()) {
    return null;
  }
  for (  String field : fields) {
    query.addTerms(likeText,field,minSimilarity,prefixLength);
  }
  query.setBoost(boost);
  query.setIgnoreTF(ignoreTF);
  return query;
}
