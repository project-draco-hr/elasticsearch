{
  startNode("server1");
  logger.info("Creating index [{}]","test");
  client("server1").admin().indices().create(createIndexRequest("test")).actionGet();
  PutMappingResponse putMappingResponse=client("server1").admin().indices().putMapping(putMappingRequest("test").type("type1").source(mappingSource())).actionGet();
  assertThat(putMappingResponse.acknowledged(),equalTo(true));
  ClusterStateResponse clusterState=client("server1").admin().cluster().state(clusterState()).actionGet();
  assertThat(clusterState.state().metaData().index("test").mapping("type1"),notNullValue());
  logger.info("Indexing #1");
  client("server1").index(Requests.indexRequest("test").type("type1").id("1").source(source("1","test"))).actionGet();
  logger.info("Indexing #2");
  client("server1").index(Requests.indexRequest("test").type("type1").id("2").source(source("2","test"))).actionGet();
  logger.info("Deleting #1");
  client("server1").delete(deleteRequest("test").type("type1").id("1")).actionGet();
  logger.info("Gateway Snapshot");
  client("server1").admin().indices().gatewaySnapshot(gatewaySnapshotRequest("test")).actionGet();
  logger.info("Gateway Snapshot (should be a no op)");
  client("server1").admin().indices().gatewaySnapshot(gatewaySnapshotRequest("test")).actionGet();
  logger.info("Closing the server");
  closeNode("server1");
  logger.info("Starting the server, should recover from the gateway (only translog should be populated)");
  startNode("server1");
  logger.info("Running Cluster Health (wait for the shards to startup)");
  ClusterHealthResponse clusterHealth=client("server1").admin().cluster().health(clusterHealth().waitForYellowStatus().waitForActiveShards(1)).actionGet();
  logger.info("Done Cluster Health, status " + clusterHealth.status());
  assertThat(clusterHealth.timedOut(),equalTo(false));
  assertThat(clusterHealth.status(),equalTo(ClusterHealthStatus.YELLOW));
  clusterState=client("server1").admin().cluster().state(clusterState()).actionGet();
  assertThat(clusterState.state().metaData().index("test").mapping("type1"),notNullValue());
  logger.info("Getting #1, should not exists");
  GetResponse getResponse=client("server1").get(getRequest("test").type("type1").id("1")).actionGet();
  assertThat(getResponse.exists(),equalTo(false));
  logger.info("Getting #2");
  getResponse=client("server1").get(getRequest("test").type("type1").id("2")).actionGet();
  assertThat(getResponse.sourceAsString(),equalTo(source("2","test")));
  logger.info("Flushing, so we have actual content in the index files (#2 should be in the index)");
  client("server1").admin().indices().flush(flushRequest("test")).actionGet();
  logger.info("Indexing #3, so we have something in the translog as well");
  client("server1").index(Requests.indexRequest("test").type("type1").id("3").source(source("3","test"))).actionGet();
  logger.info("Gateway Snapshot");
  client("server1").admin().indices().gatewaySnapshot(gatewaySnapshotRequest("test")).actionGet();
  logger.info("Gateway Snapshot (should be a no op)");
  client("server1").admin().indices().gatewaySnapshot(gatewaySnapshotRequest("test")).actionGet();
  logger.info("Closing the server");
  closeNode("server1");
  logger.info("Starting the server, should recover from the gateway (both index and translog)");
  startNode("server1");
  logger.info("Running Cluster Health (wait for the shards to startup)");
  clusterHealth=client("server1").admin().cluster().health(clusterHealth().waitForYellowStatus().waitForActiveShards(1)).actionGet();
  logger.info("Done Cluster Health, status " + clusterHealth.status());
  assertThat(clusterHealth.timedOut(),equalTo(false));
  assertThat(clusterHealth.status(),equalTo(ClusterHealthStatus.YELLOW));
  logger.info("Getting #1, should not exists");
  getResponse=client("server1").get(getRequest("test").type("type1").id("1")).actionGet();
  assertThat(getResponse.exists(),equalTo(false));
  logger.info("Getting #2 (not from the translog, but from the index)");
  getResponse=client("server1").get(getRequest("test").type("type1").id("2")).actionGet();
  assertThat(getResponse.sourceAsString(),equalTo(source("2","test")));
  logger.info("Getting #3 (from the translog)");
  getResponse=client("server1").get(getRequest("test").type("type1").id("3")).actionGet();
  assertThat(getResponse.sourceAsString(),equalTo(source("3","test")));
  logger.info("Flushing, so we have actual content in the index files (#3 should be in the index now as well)");
  client("server1").admin().indices().flush(flushRequest("test")).actionGet();
  logger.info("Gateway Snapshot");
  client("server1").admin().indices().gatewaySnapshot(gatewaySnapshotRequest("test")).actionGet();
  logger.info("Gateway Snapshot (should be a no op)");
  client("server1").admin().indices().gatewaySnapshot(gatewaySnapshotRequest("test")).actionGet();
  logger.info("Closing the server");
  closeNode("server1");
  logger.info("Starting the server, should recover from the gateway (just from the index, nothing in the translog)");
  startNode("server1");
  logger.info("Running Cluster Health (wait for the shards to startup)");
  clusterHealth=client("server1").admin().cluster().health(clusterHealth().waitForYellowStatus().waitForActiveShards(1)).actionGet();
  logger.info("Done Cluster Health, status " + clusterHealth.status());
  assertThat(clusterHealth.timedOut(),equalTo(false));
  assertThat(clusterHealth.status(),equalTo(ClusterHealthStatus.YELLOW));
  logger.info("Getting #1, should not exists");
  getResponse=client("server1").get(getRequest("test").type("type1").id("1")).actionGet();
  assertThat(getResponse.exists(),equalTo(false));
  logger.info("Getting #2 (not from the translog, but from the index)");
  getResponse=client("server1").get(getRequest("test").type("type1").id("2")).actionGet();
  assertThat(getResponse.sourceAsString(),equalTo(source("2","test")));
  logger.info("Getting #3 (not from the translog, but from the index)");
  getResponse=client("server1").get(getRequest("test").type("type1").id("3")).actionGet();
  assertThat(getResponse.sourceAsString(),equalTo(source("3","test")));
  logger.info("Deleting the index");
  client("server1").admin().indices().delete(deleteIndexRequest("test")).actionGet();
}
