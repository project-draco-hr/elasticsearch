{
  final JavaScriptScriptEngineService se=new JavaScriptScriptEngineService(Settings.Builder.EMPTY_SETTINGS);
  final Object compiled=se.compile(null,"x + y",Collections.emptyMap());
  final AtomicBoolean failed=new AtomicBoolean();
  Thread[] threads=new Thread[between(3,12)];
  final CountDownLatch latch=new CountDownLatch(threads.length);
  final CyclicBarrier barrier=new CyclicBarrier(threads.length + 1);
  for (int i=0; i < threads.length; i++) {
    threads[i]=new Thread(new Runnable(){
      @Override public void run(){
        try {
          barrier.await();
          long x=Randomness.get().nextInt();
          long y=Randomness.get().nextInt();
          long addition=x + y;
          Map<String,Object> vars=new HashMap<String,Object>();
          vars.put("x",x);
          vars.put("y",y);
          ExecutableScript script=se.executable(new CompiledScript(ScriptService.ScriptType.INLINE,"testExecutableNoRuntimeParams","js",compiled),vars);
          for (int i=0; i < between(100,1000); i++) {
            long result=((Number)script.run()).longValue();
            assertThat(result,equalTo(addition));
          }
        }
 catch (        Exception e) {
          failed.set(true);
          logger.error("failed",e);
        }
 finally {
          latch.countDown();
        }
      }
    }
);
  }
  for (int i=0; i < threads.length; i++) {
    threads[i].start();
  }
  barrier.await();
  latch.await();
  assertThat(failed.get(),equalTo(false));
}
