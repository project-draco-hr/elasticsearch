{
  if ("accuracy".equals(fieldName)) {
    suggestion.accuracy(parser.floatValue());
  }
 else   if (Fields.SUGGEST_MODE.match(fieldName)) {
    suggestion.suggestMode(SuggestUtils.resolveSuggestMode(parser.text()));
  }
 else   if ("sort".equals(fieldName)) {
    suggestion.sort(SuggestUtils.resolveSort(parser.text()));
  }
 else   if (Fields.STRING_DISTANCE.match(fieldName)) {
    suggestion.stringDistance(SuggestUtils.resolveDistance(parser.text()));
  }
 else   if (Fields.MAX_EDITS.match(fieldName)) {
    suggestion.maxEdits(parser.intValue());
    if (suggestion.maxEdits() < 1 || suggestion.maxEdits() > LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {
      throw new ElasticsearchIllegalArgumentException("Illegal max_edits value " + suggestion.maxEdits());
    }
  }
 else   if (Fields.MAX_INSPECTIONS.match(fieldName)) {
    suggestion.maxInspections(parser.intValue());
  }
 else   if (Fields.MAX_TERM_FREQ.match(fieldName)) {
    suggestion.maxTermFreq(parser.floatValue());
  }
 else   if (Fields.PREFIX_LENGTH.match(fieldName)) {
    suggestion.prefixLength(parser.intValue());
  }
 else   if (Fields.MIN_WORD_LENGTH.match(fieldName)) {
    suggestion.minQueryLength(parser.intValue());
  }
 else   if (Fields.MIN_DOC_FREQ.match(fieldName)) {
    suggestion.minDocFreq(parser.floatValue());
  }
 else {
    return false;
  }
  return true;
}
