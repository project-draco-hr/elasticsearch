{
  fillSingleValueAllSet();
  IndexNumericFieldData indexFieldData=getForField("value");
  AtomicNumericFieldData fieldData=indexFieldData.load(refreshReader());
  assertThat(fieldData.getNumDocs(),equalTo(3));
  LongValues longValues=fieldData.getLongValues();
  assertThat(longValues.isMultiValued(),equalTo(false));
  assertThat(longValues.hasValue(0),equalTo(true));
  assertThat(longValues.hasValue(1),equalTo(true));
  assertThat(longValues.hasValue(2),equalTo(true));
  assertThat(longValues.getValue(0),equalTo(2l));
  assertThat(longValues.getValue(1),equalTo(1l));
  assertThat(longValues.getValue(2),equalTo(3l));
  assertThat(longValues.getValueMissing(0,-1),equalTo(2l));
  assertThat(longValues.getValueMissing(1,-1),equalTo(1l));
  assertThat(longValues.getValueMissing(2,-1),equalTo(3l));
  LongValues.Iter longValuesIter=longValues.getIter(0);
  assertThat(longValuesIter.hasNext(),equalTo(true));
  assertThat(longValuesIter.next(),equalTo(2l));
  assertThat(longValuesIter.hasNext(),equalTo(false));
  longValuesIter=longValues.getIter(1);
  assertThat(longValuesIter.hasNext(),equalTo(true));
  assertThat(longValuesIter.next(),equalTo(1l));
  assertThat(longValuesIter.hasNext(),equalTo(false));
  longValuesIter=longValues.getIter(2);
  assertThat(longValuesIter.hasNext(),equalTo(true));
  assertThat(longValuesIter.next(),equalTo(3l));
  assertThat(longValuesIter.hasNext(),equalTo(false));
  DoubleValues doubleValues=fieldData.getDoubleValues();
  assertThat(doubleValues.isMultiValued(),equalTo(false));
  assertThat(doubleValues.hasValue(0),equalTo(true));
  assertThat(doubleValues.hasValue(1),equalTo(true));
  assertThat(doubleValues.hasValue(2),equalTo(true));
  assertThat(doubleValues.getValue(0),equalTo(2d));
  assertThat(doubleValues.getValue(1),equalTo(1d));
  assertThat(doubleValues.getValue(2),equalTo(3d));
  assertThat(doubleValues.getValueMissing(0,-1),equalTo(2d));
  assertThat(doubleValues.getValueMissing(1,-1),equalTo(1d));
  assertThat(doubleValues.getValueMissing(2,-1),equalTo(3d));
  DoubleValues.Iter doubleValuesIter=doubleValues.getIter(0);
  assertThat(doubleValuesIter.hasNext(),equalTo(true));
  assertThat(doubleValuesIter.next(),equalTo(2d));
  assertThat(doubleValuesIter.hasNext(),equalTo(false));
  doubleValuesIter=doubleValues.getIter(1);
  assertThat(doubleValuesIter.hasNext(),equalTo(true));
  assertThat(doubleValuesIter.next(),equalTo(1d));
  assertThat(doubleValuesIter.hasNext(),equalTo(false));
  doubleValuesIter=doubleValues.getIter(2);
  assertThat(doubleValuesIter.hasNext(),equalTo(true));
  assertThat(doubleValuesIter.next(),equalTo(3d));
  assertThat(doubleValuesIter.hasNext(),equalTo(false));
  doubleValues.forEachValueInDoc(0,new DoubleValuesVerifierProc(0).addExpected(2d));
  doubleValues.forEachValueInDoc(1,new DoubleValuesVerifierProc(1).addExpected(1d));
  doubleValues.forEachValueInDoc(2,new DoubleValuesVerifierProc(2).addExpected(3d));
  IndexSearcher searcher=new IndexSearcher(readerContext.reader());
  TopFieldDocs topDocs;
  topDocs=searcher.search(new MatchAllDocsQuery(),10,new Sort(new SortField("value",indexFieldData.comparatorSource(null,SortMode.MIN))));
  assertThat(topDocs.totalHits,equalTo(3));
  assertThat(topDocs.scoreDocs[0].doc,equalTo(1));
  assertThat(topDocs.scoreDocs[1].doc,equalTo(0));
  assertThat(topDocs.scoreDocs[2].doc,equalTo(2));
  topDocs=searcher.search(new MatchAllDocsQuery(),10,new Sort(new SortField("value",indexFieldData.comparatorSource(null,SortMode.MAX),true)));
  assertThat(topDocs.totalHits,equalTo(3));
  assertThat(topDocs.scoreDocs[0].doc,equalTo(2));
  assertThat(topDocs.scoreDocs[1].doc,equalTo(0));
  assertThat(topDocs.scoreDocs[2].doc,equalTo(1));
}
