{
  InvocationHandler invocationHandler=new InvocationHandler(){
    public Object invoke(    Object proxy,    Method method,    Object[] creationArgs) throws Throwable {
      if (method.getDeclaringClass().equals(Object.class)) {
        return method.invoke(this,creationArgs);
      }
      AssistedConstructor<?> constructor=factoryMethodToConstructor.get(method);
      Object[] constructorArgs=gatherArgsForConstructor(constructor,creationArgs);
      Object objectToReturn=constructor.newInstance(constructorArgs);
      injector.injectMembers(objectToReturn);
      return objectToReturn;
    }
    public Object[] gatherArgsForConstructor(    AssistedConstructor<?> constructor,    Object[] factoryArgs){
      int numParams=constructor.getAllParameters().size();
      int argPosition=0;
      Object[] result=new Object[numParams];
      for (int i=0; i < numParams; i++) {
        Parameter parameter=constructor.getAllParameters().get(i);
        if (parameter.isProvidedByFactory()) {
          result[i]=factoryArgs[argPosition];
          argPosition++;
        }
 else {
          result[i]=parameter.getValue(injector);
        }
      }
      return result;
    }
  }
;
  @SuppressWarnings("unchecked") Class<F> factoryRawType=(Class)factoryType.getRawType();
  return factoryRawType.cast(Proxy.newProxyInstance(factoryRawType.getClassLoader(),new Class[]{factoryRawType},invocationHandler));
}
