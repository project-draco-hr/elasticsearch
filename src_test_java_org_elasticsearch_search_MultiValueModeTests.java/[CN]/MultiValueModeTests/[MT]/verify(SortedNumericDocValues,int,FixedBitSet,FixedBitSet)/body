{
  for (  long missingValue : new long[]{0,randomLong()}) {
    for (    MultiValueMode mode : MultiValueMode.values()) {
      if (MultiValueMode.MEDIAN.equals(mode)) {
        continue;
      }
      final NumericDocValues selected=mode.select(values,missingValue,rootDocs,new BitDocIdSet(innerDocs),maxDoc);
      int prevRoot=-1;
      for (int root=rootDocs.nextSetBit(0); root != -1; root=root + 1 < maxDoc ? rootDocs.nextSetBit(root + 1) : -1) {
        final long actual=selected.get(root);
        long expected=mode.startLong();
        int numValues=0;
        for (int child=innerDocs.nextSetBit(prevRoot + 1); child != -1 && child < root; child=innerDocs.nextSetBit(child + 1)) {
          values.setDocument(child);
          for (int j=0; j < values.count(); ++j) {
            expected=mode.apply(expected,values.valueAt(j));
            ++numValues;
          }
        }
        if (numValues == 0) {
          expected=missingValue;
        }
 else {
          expected=mode.reduce(expected,numValues);
        }
        assertEquals(mode.toString() + " docId=" + root,expected,actual);
        prevRoot=root;
      }
    }
  }
}
