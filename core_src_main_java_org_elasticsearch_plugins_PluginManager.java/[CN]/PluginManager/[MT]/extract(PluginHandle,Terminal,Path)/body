{
  Path tmp=Files.createTempDirectory(environment.tmpFile(),null);
  Path root=tmp.resolve(pluginHandle.name);
  unzipPlugin(pluginFile,root);
  root=findPluginRoot(root);
  PluginInfo info=PluginInfo.readFromProperties(root);
  terminal.println(VERBOSE,"%s",info);
  if (info.isJvm()) {
    jarHellCheck(root,info.isIsolated());
  }
  pluginHandle=new PluginHandle(info.getName(),pluginHandle.version,pluginHandle.user);
  final Path extractLocation=pluginHandle.extractedDir(environment);
  if (Files.exists(extractLocation)) {
    throw new IOException("plugin directory " + extractLocation.toAbsolutePath() + " already exists. To update the plugin, uninstall it first using 'remove "+ pluginHandle.name+ "' command");
  }
  FileSystemUtils.copyDirectoryRecursively(root,extractLocation);
  terminal.println("Installed %s into %s",pluginHandle.name,extractLocation.toAbsolutePath());
  tryToDeletePath(terminal,tmp,pluginFile);
  Path sourcePluginBinDirectory=extractLocation.resolve("bin");
  Path destPluginBinDirectory=pluginHandle.binDir(environment);
  boolean needToCopyBinDirectory=Files.exists(sourcePluginBinDirectory);
  if (needToCopyBinDirectory) {
    if (Files.exists(destPluginBinDirectory) && !Files.isDirectory(destPluginBinDirectory)) {
      tryToDeletePath(terminal,extractLocation);
      throw new IOException("plugin bin directory " + destPluginBinDirectory + " is not a directory");
    }
    try {
      copyBinDirectory(sourcePluginBinDirectory,destPluginBinDirectory,pluginHandle.name,terminal);
    }
 catch (    IOException e) {
      terminal.printError("Error copying bin directory [%s] to [%s], cleaning up, reason: %s",sourcePluginBinDirectory,destPluginBinDirectory,e.getMessage());
      tryToDeletePath(terminal,extractLocation,pluginHandle.binDir(environment));
      throw e;
    }
  }
  Path sourceConfigDirectory=extractLocation.resolve("config");
  Path destConfigDirectory=pluginHandle.configDir(environment);
  boolean needToCopyConfigDirectory=Files.exists(sourceConfigDirectory);
  if (needToCopyConfigDirectory) {
    if (Files.exists(destConfigDirectory) && !Files.isDirectory(destConfigDirectory)) {
      tryToDeletePath(terminal,extractLocation,destPluginBinDirectory);
      throw new IOException("plugin config directory " + destConfigDirectory + " is not a directory");
    }
    try {
      terminal.println(VERBOSE,"Found config, moving to %s",destConfigDirectory.toAbsolutePath());
      moveFilesWithoutOverwriting(sourceConfigDirectory,destConfigDirectory,".new");
      terminal.println(VERBOSE,"Installed %s into %s",pluginHandle.name,destConfigDirectory.toAbsolutePath());
    }
 catch (    IOException e) {
      terminal.printError("Error copying config directory [%s] to [%s], cleaning up, reason: %s",sourceConfigDirectory,destConfigDirectory,e.getMessage());
      tryToDeletePath(terminal,extractLocation,destPluginBinDirectory,destConfigDirectory);
      throw e;
    }
  }
}
