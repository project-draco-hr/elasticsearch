{
  boolean canCopyFromSource=Files.exists(sourcePluginBinDirectory) && Files.isReadable(sourcePluginBinDirectory) && Files.isDirectory(sourcePluginBinDirectory);
  if (canCopyFromSource) {
    terminal.println(VERBOSE,"Found bin, moving to %s",destPluginBinDirectory.toAbsolutePath());
    if (Files.exists(destPluginBinDirectory)) {
      IOUtils.rm(destPluginBinDirectory);
    }
    try {
      Files.createDirectories(destPluginBinDirectory.getParent());
      FileSystemUtils.move(sourcePluginBinDirectory,destPluginBinDirectory);
    }
 catch (    IOException e) {
      throw new IOException("Could not move [" + sourcePluginBinDirectory + "] to ["+ destPluginBinDirectory+ "]",e);
    }
    if (Environment.getFileStore(destPluginBinDirectory).supportsFileAttributeView(PosixFileAttributeView.class)) {
      final Set<PosixFilePermission> executePerms=new HashSet<>();
      executePerms.add(PosixFilePermission.OWNER_READ);
      executePerms.add(PosixFilePermission.GROUP_READ);
      executePerms.add(PosixFilePermission.OTHERS_READ);
      executePerms.add(PosixFilePermission.OWNER_EXECUTE);
      executePerms.add(PosixFilePermission.GROUP_EXECUTE);
      executePerms.add(PosixFilePermission.OTHERS_EXECUTE);
      Files.walkFileTree(destPluginBinDirectory,new SimpleFileVisitor<Path>(){
        @Override public FileVisitResult visitFile(        Path file,        BasicFileAttributes attrs) throws IOException {
          if (attrs.isRegularFile()) {
            Set<PosixFilePermission> perms=Files.getPosixFilePermissions(file);
            perms.addAll(executePerms);
            Files.setPosixFilePermissions(file,perms);
          }
          return FileVisitResult.CONTINUE;
        }
      }
);
    }
 else {
      terminal.println(VERBOSE,"Skipping posix permissions - filestore doesn't support posix permission");
    }
    terminal.println(VERBOSE,"Installed %s into %s",pluginName,destPluginBinDirectory.toAbsolutePath());
  }
}
