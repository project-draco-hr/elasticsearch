{
  Path pluginFile=pluginHandle.newDistroFile(environment);
  HttpDownloadHelper downloadHelper=new HttpDownloadHelper();
  boolean downloaded=false;
  boolean verified=false;
  HttpDownloadHelper.DownloadProgress progress;
  if (outputMode == OutputMode.SILENT) {
    progress=new HttpDownloadHelper.NullProgress();
  }
 else {
    progress=new HttpDownloadHelper.VerboseProgress(terminal.writer());
  }
  if (url != null) {
    URL pluginUrl=url;
    boolean isSecureProcotol="https".equalsIgnoreCase(pluginUrl.getProtocol());
    boolean isAuthInfoSet=!Strings.isNullOrEmpty(pluginUrl.getUserInfo());
    if (isAuthInfoSet && !isSecureProcotol) {
      throw new IOException("Basic auth is only supported for HTTPS!");
    }
    terminal.println("Trying %s ...",pluginUrl.toExternalForm());
    try {
      downloadHelper.download(pluginUrl,pluginFile,progress,this.timeout);
      downloaded=true;
      terminal.println("Verifying %s checksums if available ...",pluginUrl.toExternalForm());
      Tuple<URL,Path> sha1Info=pluginHandle.newChecksumUrlAndFile(environment,pluginUrl,"sha1");
      verified=downloadHelper.downloadAndVerifyChecksum(sha1Info.v1(),pluginFile,sha1Info.v2(),progress,this.timeout,HttpDownloadHelper.SHA1_CHECKSUM);
      Tuple<URL,Path> md5Info=pluginHandle.newChecksumUrlAndFile(environment,pluginUrl,"md5");
      verified=verified || downloadHelper.downloadAndVerifyChecksum(md5Info.v1(),pluginFile,md5Info.v2(),progress,this.timeout,HttpDownloadHelper.MD5_CHECKSUM);
    }
 catch (    ElasticsearchTimeoutException|ElasticsearchCorruptionException e) {
      throw e;
    }
catch (    Exception e) {
      terminal.println("Failed: %s",ExceptionsHelper.detailedMessage(e));
    }
  }
 else {
    if (PluginHandle.isOfficialPlugin(pluginHandle.name,pluginHandle.user,pluginHandle.version)) {
      checkForOfficialPlugins(pluginHandle.name);
    }
  }
  if (!downloaded && url == null) {
    for (    URL url : pluginHandle.urls()) {
      terminal.println("Trying %s ...",url.toExternalForm());
      try {
        downloadHelper.download(url,pluginFile,progress,this.timeout);
        downloaded=true;
        terminal.println("Verifying %s checksums if available ...",url.toExternalForm());
        Tuple<URL,Path> sha1Info=pluginHandle.newChecksumUrlAndFile(environment,url,"sha1");
        verified=downloadHelper.downloadAndVerifyChecksum(sha1Info.v1(),pluginFile,sha1Info.v2(),progress,this.timeout,HttpDownloadHelper.SHA1_CHECKSUM);
        Tuple<URL,Path> md5Info=pluginHandle.newChecksumUrlAndFile(environment,url,"md5");
        verified=verified || downloadHelper.downloadAndVerifyChecksum(md5Info.v1(),pluginFile,md5Info.v2(),progress,this.timeout,HttpDownloadHelper.MD5_CHECKSUM);
        break;
      }
 catch (      ElasticsearchTimeoutException|ElasticsearchCorruptionException e) {
        throw e;
      }
catch (      Exception e) {
        terminal.println(VERBOSE,"Failed: %s",ExceptionsHelper.detailedMessage(e));
      }
    }
  }
  if (!downloaded) {
    IOUtils.deleteFilesIgnoringExceptions(pluginFile);
    throw new IOException("failed to download out of all possible locations..., use --verbose to get detailed information");
  }
  if (verified == false) {
    terminal.println("NOTE: Unable to verify checksum for downloaded plugin (unable to find .sha1 or .md5 file to verify)");
  }
  return pluginFile;
}
