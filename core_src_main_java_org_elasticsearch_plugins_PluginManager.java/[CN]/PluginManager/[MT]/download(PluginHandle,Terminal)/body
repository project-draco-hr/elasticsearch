{
  Path pluginFile=pluginHandle.newDistroFile(environment);
  HttpDownloadHelper downloadHelper=new HttpDownloadHelper();
  boolean downloaded=false;
  HttpDownloadHelper.DownloadProgress progress;
  if (outputMode == OutputMode.SILENT) {
    progress=new HttpDownloadHelper.NullProgress();
  }
 else {
    progress=new HttpDownloadHelper.VerboseProgress(terminal.writer());
  }
  if (url != null) {
    URL pluginUrl=new URL(url);
    terminal.println("Trying %s ...",pluginUrl.toExternalForm());
    try {
      downloadHelper.download(pluginUrl,pluginFile,progress,this.timeout);
      downloaded=true;
    }
 catch (    ElasticsearchTimeoutException e) {
      throw e;
    }
catch (    Exception e) {
      terminal.println("Failed: %s",ExceptionsHelper.detailedMessage(e));
    }
  }
 else {
    if (PluginHandle.isOfficialPlugin(pluginHandle.repo,pluginHandle.user,pluginHandle.version)) {
      checkForOfficialPlugins(pluginHandle.name);
    }
  }
  if (!downloaded) {
    for (    URL url : pluginHandle.urls()) {
      terminal.println("Trying %s ...",url.toExternalForm());
      try {
        downloadHelper.download(url,pluginFile,progress,this.timeout);
        downloaded=true;
        break;
      }
 catch (      ElasticsearchTimeoutException e) {
        throw e;
      }
catch (      Exception e) {
        terminal.println(VERBOSE,"Failed: %s",ExceptionsHelper.detailedMessage(e));
      }
    }
  }
  if (!downloaded) {
    IOUtils.deleteFilesIgnoringExceptions(pluginFile);
    throw new IOException("failed to download out of all possible locations..., use --verbose to get detailed information");
  }
  return pluginFile;
}
