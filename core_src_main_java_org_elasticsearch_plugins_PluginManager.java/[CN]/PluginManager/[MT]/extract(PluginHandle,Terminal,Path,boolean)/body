{
  Path tmp=Files.createTempDirectory(environment.tmpFile(),null);
  Path root=tmp.resolve(pluginHandle.name);
  unzipPlugin(pluginFile,root);
  root=findPluginRoot(root);
  PluginInfo info=PluginInfo.readFromProperties(root);
  terminal.println(VERBOSE,"%s",info);
  if (info.isJvm()) {
    jarHellCheck(root,info.isIsolated());
  }
  pluginHandle=new PluginHandle(info.getName(),pluginHandle.version,pluginHandle.user);
  final Path extractLocation=pluginHandle.extractedDir(environment);
  if (Files.exists(extractLocation)) {
    throw new IOException("plugin directory " + extractLocation.toAbsolutePath() + " already exists. To update the plugin, uninstall it first using 'remove "+ pluginHandle.name+ "' command");
  }
  Path policy=root.resolve(PluginInfo.ES_PLUGIN_POLICY);
  if (Files.exists(policy)) {
    PluginSecurity.readPolicy(policy,terminal,environment,batch);
  }
  FileSystemUtils.copyDirectoryRecursively(root,extractLocation);
  terminal.println("Installed %s into %s",pluginHandle.name,extractLocation.toAbsolutePath());
  tryToDeletePath(terminal,tmp,pluginFile);
  Path sourcePluginBinDirectory=extractLocation.resolve("bin");
  Path destPluginBinDirectory=pluginHandle.binDir(environment);
  boolean needToCopyBinDirectory=Files.exists(sourcePluginBinDirectory);
  if (needToCopyBinDirectory) {
    if (Files.exists(destPluginBinDirectory) && !Files.isDirectory(destPluginBinDirectory)) {
      tryToDeletePath(terminal,extractLocation);
      throw new IOException("plugin bin directory " + destPluginBinDirectory + " is not a directory");
    }
    try {
      copyBinDirectory(sourcePluginBinDirectory,destPluginBinDirectory,pluginHandle.name,terminal);
    }
 catch (    IOException e) {
      terminal.printError("Error copying bin directory [%s] to [%s], cleaning up, reason: %s",sourcePluginBinDirectory,destPluginBinDirectory,ExceptionsHelper.detailedMessage(e));
      tryToDeletePath(terminal,extractLocation,pluginHandle.binDir(environment));
      throw e;
    }
  }
  Path sourceConfigDirectory=extractLocation.resolve("config");
  Path destConfigDirectory=pluginHandle.configDir(environment);
  boolean needToCopyConfigDirectory=Files.exists(sourceConfigDirectory);
  if (needToCopyConfigDirectory) {
    if (Files.exists(destConfigDirectory) && !Files.isDirectory(destConfigDirectory)) {
      tryToDeletePath(terminal,extractLocation,destPluginBinDirectory);
      throw new IOException("plugin config directory " + destConfigDirectory + " is not a directory");
    }
    try {
      terminal.println(VERBOSE,"Found config, moving to %s",destConfigDirectory.toAbsolutePath());
      moveFilesWithoutOverwriting(sourceConfigDirectory,destConfigDirectory,".new");
      if (Environment.getFileStore(destConfigDirectory).supportsFileAttributeView(PosixFileAttributeView.class)) {
        PosixFileAttributes parentDirAttributes=Files.getFileAttributeView(destConfigDirectory.getParent(),PosixFileAttributeView.class).readAttributes();
        Set<PosixFilePermission> baseFilePermissions=new HashSet<>();
        for (        PosixFilePermission posixFilePermission : parentDirAttributes.permissions()) {
switch (posixFilePermission) {
case OWNER_EXECUTE:
case GROUP_EXECUTE:
case OTHERS_EXECUTE:
            break;
default :
          baseFilePermissions.add(posixFilePermission);
      }
    }
    Files.walkFileTree(destConfigDirectory,new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        if (attrs.isRegularFile()) {
          Set<PosixFilePermission> newFilePermissions=new HashSet<>(baseFilePermissions);
          Set<PosixFilePermission> currentFilePermissions=Files.getPosixFilePermissions(file);
          for (          PosixFilePermission posixFilePermission : currentFilePermissions) {
switch (posixFilePermission) {
case OWNER_EXECUTE:
case GROUP_EXECUTE:
case OTHERS_EXECUTE:
              newFilePermissions.add(posixFilePermission);
          }
        }
        setPosixFileAttributes(file,parentDirAttributes.owner(),parentDirAttributes.group(),newFilePermissions);
      }
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult preVisitDirectory(    Path dir,    BasicFileAttributes attrs) throws IOException {
      setPosixFileAttributes(dir,parentDirAttributes.owner(),parentDirAttributes.group(),parentDirAttributes.permissions());
      return FileVisitResult.CONTINUE;
    }
  }
);
}
 else {
  terminal.println(VERBOSE,"Skipping posix permissions - filestore doesn't support posix permission");
}
terminal.println(VERBOSE,"Installed %s into %s",pluginHandle.name,destConfigDirectory.toAbsolutePath());
}
 catch (IOException e) {
terminal.printError("Error copying config directory [%s] to [%s], cleaning up, reason: %s",sourceConfigDirectory,destConfigDirectory,ExceptionsHelper.detailedMessage(e));
tryToDeletePath(terminal,extractLocation,destPluginBinDirectory,destConfigDirectory);
throw e;
}
}
}
