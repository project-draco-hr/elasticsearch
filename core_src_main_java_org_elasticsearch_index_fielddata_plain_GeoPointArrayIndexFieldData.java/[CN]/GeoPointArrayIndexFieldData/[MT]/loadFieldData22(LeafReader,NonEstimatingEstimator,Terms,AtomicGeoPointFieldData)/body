{
  LongArray indexedPoints=BigArrays.NON_RECYCLING_INSTANCE.newLongArray(128);
  final float acceptableTransientOverheadRatio=fieldDataType.getSettings().getAsFloat("acceptable_transient_overhead_ratio",OrdinalsBuilder.DEFAULT_ACCEPTABLE_OVERHEAD_RATIO);
  boolean success=false;
  try (OrdinalsBuilder builder=new OrdinalsBuilder(reader.maxDoc(),acceptableTransientOverheadRatio)){
    final TermsEnum termsEnum;
    final GeoPointField.TermEncoding termEncoding;
    if (indexSettings.getIndexVersionCreated().onOrAfter(Version.V_2_3_0)) {
      termEncoding=GeoPointField.TermEncoding.PREFIX;
      termsEnum=OrdinalsBuilder.wrapGeoPointTerms(terms.iterator());
    }
 else {
      termEncoding=GeoPointField.TermEncoding.NUMERIC;
      termsEnum=OrdinalsBuilder.wrapNumeric64Bit(terms.iterator());
    }
    final GeoPointTermsEnum iter=new GeoPointTermsEnum(builder.buildFromTerms(termsEnum),termEncoding);
    Long hashedPoint;
    long numTerms=0;
    while ((hashedPoint=iter.next()) != null) {
      indexedPoints=BigArrays.NON_RECYCLING_INSTANCE.resize(indexedPoints,numTerms + 1);
      indexedPoints.set(numTerms++,hashedPoint);
    }
    indexedPoints=BigArrays.NON_RECYCLING_INSTANCE.resize(indexedPoints,numTerms);
    Ordinals build=builder.build(fieldDataType.getSettings());
    RandomAccessOrds ordinals=build.ordinals();
    if (!(FieldData.isMultiValued(ordinals) || CommonSettings.getMemoryStorageHint(fieldDataType) == CommonSettings.MemoryStorageFormat.ORDINALS)) {
      int maxDoc=reader.maxDoc();
      LongArray sIndexedPoint=BigArrays.NON_RECYCLING_INSTANCE.newLongArray(reader.maxDoc());
      for (int i=0; i < maxDoc; ++i) {
        ordinals.setDocument(i);
        long nativeOrdinal=ordinals.nextOrd();
        if (nativeOrdinal != RandomAccessOrds.NO_MORE_ORDS) {
          sIndexedPoint.set(i,indexedPoints.get(nativeOrdinal));
        }
      }
      BitSet set=builder.buildDocsWithValuesSet();
      data=new GeoPointArrayAtomicFieldData.Single(sIndexedPoint,set);
    }
 else {
      data=new GeoPointArrayAtomicFieldData.WithOrdinals(indexedPoints,build,reader.maxDoc());
    }
    success=true;
    return data;
  }
  finally {
    if (success) {
      estimator.afterLoad(null,data.ramBytesUsed());
    }
  }
}
