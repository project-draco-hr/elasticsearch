{
  SetProcessor.Factory metaProcessorFactory=new SetProcessor.Factory(TestTemplateService.instance());
  Map<String,Object> config=new HashMap<>();
  config.put("field","_ttl");
  config.put("value","5d");
  Processor processor=metaProcessorFactory.create(config);
  when(store.get("_id")).thenReturn(new Pipeline("_id","_description",new CompoundProcessor(processor)));
  IndexRequest indexRequest=new IndexRequest("_index","_type","_id").source(Collections.emptyMap());
  Consumer<Throwable> failureHandler=mock(Consumer.class);
  Consumer<Boolean> completionHandler=mock(Consumer.class);
  executionService.execute(indexRequest,"_id",failureHandler,completionHandler);
  assertThat(indexRequest.ttl(),equalTo(TimeValue.parseTimeValue("5d",null,"ttl")));
  verify(failureHandler,never()).accept(any());
  verify(completionHandler,times(1)).accept(true);
  metaProcessorFactory=new SetProcessor.Factory(TestTemplateService.instance());
  config=new HashMap<>();
  config.put("field","_ttl");
  config.put("value","abc");
  processor=metaProcessorFactory.create(config);
  when(store.get("_id")).thenReturn(new Pipeline("_id","_description",new CompoundProcessor(processor)));
  indexRequest=new IndexRequest("_index","_type","_id").source(Collections.emptyMap());
  failureHandler=mock(Consumer.class);
  completionHandler=mock(Consumer.class);
  executionService.execute(indexRequest,"_id",failureHandler,completionHandler);
  verify(failureHandler,times(1)).accept(any(ElasticsearchParseException.class));
  verify(completionHandler,never()).accept(anyBoolean());
  when(store.get("_id")).thenReturn(new Pipeline("_id","_description",mock(CompoundProcessor.class)));
  indexRequest=new IndexRequest("_index","_type","_id").source(Collections.emptyMap()).ttl(1000L);
  failureHandler=mock(Consumer.class);
  completionHandler=mock(Consumer.class);
  executionService.execute(indexRequest,"_id",failureHandler,completionHandler);
  assertThat(indexRequest.ttl(),equalTo(new TimeValue(1000L)));
  verify(failureHandler,never()).accept(any());
  verify(completionHandler,times(1)).accept(true);
}
